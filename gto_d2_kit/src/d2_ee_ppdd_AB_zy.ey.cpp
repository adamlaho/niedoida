/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AB_zy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_12_32(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46271 = ae + be;
    const double C46270 = yA - yB;
    const double C46278 = zA - zB;
    const double C46292 = ae * be;
    const double C46290 = 0 * be;
    const double C46309 = 0 * be;
    const double C46323 = yP - yQ;
    const double C46322 = zP - zQ;
    const double C46321 = p + q;
    const double C46320 = p * q;
    const double C46332 = bs[4];
    const double C46330 = xP - xQ;
    const double C46337 = bs[5];
    const double C46344 = bs[6];
    const double C46352 = bs[7];
    const double C46366 = bs[3];
    const double C46789 = bs[2];
    const double C115 = bs[0];
    const double C47152 = xA - xB;
    const double C47171 = ce + de;
    const double C47170 = ce * de;
    const double C47169 = xC - xD;
    const double C47203 = yC - yD;
    const double C47221 = zC - zD;
    const double C46291 = std::pow(C46271, 2);
    const double C47162 = 2 * C46271;
    const double C47407 = std::pow(C46270, 2);
    const double C47489 = C46270 * be;
    const double C47487 = C46270 * ae;
    const double C47424 = std::pow(C46278, 2);
    const double C47490 = C46278 * be;
    const double C47488 = C46278 * ae;
    const double C46294 = C46292 * C46270;
    const double C46310 = C46292 * C46278;
    const double C46404 = C46323 * be;
    const double C46457 = std::pow(C46323, 2);
    const double C46325 = C46322 * C46323;
    const double C46363 = C46322 * ae;
    const double C46540 = std::pow(C46322, 2);
    const double C46324 = 2 * C46320;
    const double C46338 = std::pow(C46330, 2);
    const double C47153 = std::pow(C47152, 2);
    const double C47455 = C47152 * be;
    const double C47454 = C47152 * ae;
    const double C47175 = 2 * C47171;
    const double C47174 = std::pow(C47171, 2);
    const double C47176 = C47169 * de;
    const double C47173 = C47169 * ce;
    const double C47172 = std::pow(C47169, 2);
    const double C47204 = std::pow(C47203, 2);
    const double C47263 = C47203 * de;
    const double C47261 = C47203 * ce;
    const double C47222 = std::pow(C47221, 2);
    const double C47305 = C47221 * de;
    const double C47303 = C47221 * ce;
    const double C46293 = 2 * C46291;
    const double C136 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (yP - yQ) * ae * be) /
                        C46291;
    const double C137 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (zP - zQ) * (yP - yQ) * ae * be) /
                        C46291;
    const double C47456 = std::pow(C47162, -1);
    const double C47408 = C47407 * C46292;
    const double C47425 = C47424 * C46292;
    const double C46406 = C46366 * C46404;
    const double C46409 = C46332 * C46404;
    const double C46413 = C46337 * C46404;
    const double C46420 = C46344 * C46404;
    const double C46431 = C46352 * C46404;
    const double C46327 = C46325 * ae;
    const double C46367 = C46366 * C46363;
    const double C46370 = C46332 * C46363;
    const double C46374 = C46337 * C46363;
    const double C46381 = C46344 * C46363;
    const double C46392 = C46352 * C46363;
    const double C46326 = C46324 / C46321;
    const double C122 = (-(bs[1] * C46404 * C46324) / C46321) / C46271;
    const double C123 = (-(bs[1] * C46363 * C46324) / C46321) / C46271;
    const double C116 = -(C46330 * bs[1] * C46324) / C46321;
    const double C294 = -(C46323 * bs[1] * C46324) / C46321;
    const double C481 = -(C46322 * bs[1] * C46324) / C46321;
    const double C47154 = C47153 * C46292;
    const double C47188 = std::pow(C47175, -1);
    const double C47464 = std::pow(C47175, -2);
    const double C47189 = 2 * C47174;
    const double C47468 = C47174 * C47175;
    const double C47467 = 4 * C47174;
    const double C47457 = std::pow(C47173, 2);
    const double C47177 = C47172 * C47170;
    const double C47205 = C47204 * C47170;
    const double C47469 = std::pow(C47261, 2);
    const double C47223 = C47222 * C47170;
    const double C47471 = std::pow(C47303, 2);
    const double C47409 = C47408 / C46271;
    const double C47426 = C47425 / C46271;
    const double C46328 = C46327 * be;
    const double C46331 = std::pow(C46326, 4);
    const double C46336 = -C46326;
    const double C46343 = std::pow(C46326, 6);
    const double C46788 = std::pow(C46326, 2);
    const double C124 =
        (C46330 * std::pow(C46326, 2) * bs[2] * C46404) / C46271;
    const double C125 =
        (C46330 * std::pow(C46326, 2) * bs[2] * C46363) / C46271;
    const double C304 =
        (C46323 * std::pow(C46326, 2) * bs[2] * C46404) / C46271 -
        (be * bs[1] * C46324) / (C46321 * C46271);
    const double C305 =
        (C46323 * std::pow(C46326, 2) * bs[2] * C46363) / C46271;
    const double C47155 = C47154 / C46271;
    const double C47502 = 4 * C47468;
    const double C47501 = C47171 * C47467;
    const double C47178 = C47177 / C47171;
    const double C47206 = C47205 / C47171;
    const double C47224 = C47223 / C47171;
    const double C47410 = -C47409;
    const double C47427 = -C47426;
    const double C46333 = C46332 * C46328;
    const double C46340 = C46337 * C46328;
    const double C46345 = C46344 * C46328;
    const double C46354 = C46352 * C46328;
    const double C138 =
        (std::pow(-C46326, 3) * bs[3] * C46328 +
         std::pow(C46326, 4) * bs[4] * C46328 * std::pow(xP - xQ, 2)) /
        C46291;
    const double C46371 = C46331 * C46370;
    const double C46410 = C46331 * C46409;
    const double C46446 = C46332 * C46331;
    const double C46339 = std::pow(C46336, 5);
    const double C46351 = std::pow(C46336, 7);
    const double C46365 = std::pow(C46336, 3);
    const double C324 = (be * std::pow(C46326, 2) * bs[2] * C46322 * ae +
                         C46323 * std::pow(C46336, 3) * bs[3] * C46328) /
                        C46291;
    const double C46383 = C46343 * C46381;
    const double C46422 = C46343 * C46420;
    const double C46515 = C46344 * C46343;
    const double C46790 = C46789 * C46788;
    const double C491 = (C46322 * C46788 * C46789 * C46404) / C46271;
    const double C492 = (C46322 * C46788 * C46789 * C46363) / C46271 -
                        (ae * bs[1] * C46324) / (C46321 * C46271);
    const double C47156 = -C47155;
    const double C47179 = -C47178;
    const double C47207 = -C47206;
    const double C47225 = -C47224;
    const double C47411 = std::exp(C47410);
    const double C47428 = std::exp(C47427);
    const double C46334 = C46331 * C46333;
    const double C46346 = C46343 * C46345;
    const double C46372 = C46330 * C46371;
    const double C46455 = be * C46371;
    const double C46454 = C46323 * C46371;
    const double C46904 = C46322 * C46371;
    const double C46411 = C46330 * C46410;
    const double C46476 = C46323 * C46410;
    const double C46538 = ae * C46410;
    const double C46537 = C46322 * C46410;
    const double C46482 = C46330 * C46446;
    const double C46497 = C46323 * C46446;
    const double C46496 = C46446 * be;
    const double C46796 = C46446 * C46338;
    const double C46855 = C46446 * C46457;
    const double C46907 = C46446 * C46540;
    const double C46979 = C46322 * C46446;
    const double C46978 = C46446 * ae;
    const double C46341 = C46339 * C46340;
    const double C46375 = C46339 * C46374;
    const double C46414 = C46339 * C46413;
    const double C46448 = C46337 * C46339;
    const double C46355 = C46351 * C46354;
    const double C46394 = C46351 * C46392;
    const double C46433 = C46351 * C46431;
    const double C46368 = C46365 * C46367;
    const double C46407 = C46365 * C46406;
    const double C46477 = C46366 * C46365;
    const double C511 = (ae * std::pow(C46326, 2) * bs[2] * C46323 * be +
                         C46322 * C46365 * C46366 * C46328) /
                        C46291;
    const double C46384 = C46383 * C46338;
    const double C46391 = C46330 * C46383;
    const double C46570 = C46383 * C46457;
    const double C46680 = be * C46383;
    const double C46679 = C46323 * C46383;
    const double C47042 = C46322 * C46383;
    const double C46423 = C46422 * C46338;
    const double C46430 = C46330 * C46422;
    const double C46598 = C46323 * C46422;
    const double C46652 = C46422 * C46540;
    const double C46749 = ae * C46422;
    const double C46748 = C46322 * C46422;
    const double C46516 = C46515 * C46338;
    const double C46615 = C46330 * C46515;
    const double C46704 = C46515 * C46457;
    const double C46703 = C46323 * C46515;
    const double C46702 = C46515 * be;
    const double C47046 = C46515 * C46540;
    const double C117 = C46790 * C46338 - (bs[1] * C46324) / C46321;
    const double C295 = C46323 * C46330 * C46790;
    const double C297 = C46790 * C46457 - (bs[1] * C46324) / C46321;
    const double C482 = C46322 * C46330 * C46790;
    const double C484 = C46790 * C46540 - (bs[1] * C46324) / C46321;
    const double C931 = C46322 * C46323 * C46790;
    const double C47157 = std::exp(C47156);
    const double C47180 = std::exp(C47179);
    const double C47208 = std::exp(C47207);
    const double C47226 = std::exp(C47225);
    const double C150 = C47411 * C138;
    const double C146 = C47411 * C137;
    const double C144 = C47411 * C124;
    const double C10694 = C47411 * C491;
    const double C46295 = C46294 * C47411;
    const double C113 = -(2 * ae * be * (yA - yB) * C47411) / (ae + be);
    const double C4747 =
        ((C47411 - (C46270 * 2 * ae * be * C46270 * C47411) / C46271) * ae) /
            C46271 -
        (0 * be) / (2 * std::pow(C46271, 2));
    const double C4748 =
        (0 * ae) / C46271 - (ae * be * C46270 * C47411) / std::pow(C46271, 2);
    const double C15949 =
        (-(0 * be) / C46271) / (2 * C46271) -
        ((C47411 - (C46270 * 2 * ae * be * C46270 * C47411) / C46271) * be) /
            C46271;
    const double C15950 =
        (-(2 * ae * be * C46270 * C47411) / C46271) / (2 * C46271) -
        (0 * be) / C46271;
    const double C47523 = C47456 * C47411;
    const double C47522 = C47411 * C47487;
    const double C15945 = -(C47411 * C47489) / C46271;
    const double C46311 = C46310 * C47428;
    const double C114 = -(2 * ae * be * (zA - zB) * C47428) / (ae + be);
    const double C10399 =
        ((C47428 - (C46278 * 2 * ae * be * C46278 * C47428) / C46271) * ae) /
            C46271 -
        (0 * be) / (2 * std::pow(C46271, 2));
    const double C10400 =
        (0 * ae) / C46271 - (ae * be * C46278 * C47428) / std::pow(C46271, 2);
    const double C31224 =
        (-(0 * be) / C46271) / (2 * C46271) -
        ((C47428 - (C46278 * 2 * C46292 * C46278 * C47428) / C46271) * be) /
            C46271;
    const double C31225 =
        (-(2 * C46292 * C46278 * C47428) / C46271) / (2 * C46271) -
        (0 * be) / C46271;
    const double C47525 = C47456 * C47428;
    const double C47524 = C47428 * C47488;
    const double C31222 = -(C47428 * C47490) / C46271;
    const double C139 = (2 * C46330 * C46334 +
                         C46330 * (C46334 + std::pow(-C46326, 5) * bs[5] *
                                                C46328 * std::pow(C46330, 2))) /
                        C46291;
    const double C325 =
        (be * C46330 * std::pow(C46336, 3) * bs[3] * C46322 * ae +
         C46323 * C46330 * C46334) /
        C46291;
    const double C512 = (ae * C46330 * C46365 * C46366 * C46323 * be +
                         C46322 * C46330 * C46334) /
                        C46291;
    const double C46347 = C46346 * C46338;
    const double C46350 = C46330 * C46346;
    const double C46569 = C46323 * C46346;
    const double C46651 = C46322 * C46346;
    const double C46483 = C46482 * be;
    const double C46802 = 2 * C46482;
    const double C46859 = C46323 * C46482;
    const double C46914 = C46322 * C46482;
    const double C46913 = C46482 * ae;
    const double C46499 = C46497 * be;
    const double C46938 = 2 * C46497;
    const double C46959 = C46322 * C46497;
    const double C46958 = C46497 * ae;
    const double C46984 = 2 * C46979;
    const double C46982 = C46979 * ae;
    const double C46451 = C46330 * C46341;
    const double C46456 = C46323 * C46341;
    const double C46539 = C46322 * C46341;
    const double C140 =
        (3 * (C46334 + C46341 * C46338) +
         C46330 * (2 * C46330 * C46341 +
                   C46330 * (C46341 +
                             std::pow(C46326, 6) * bs[6] * C46328 * C46338))) /
        C46291;
    const double C326 = (be * (std::pow(C46336, 3) * bs[3] * C46363 +
                               C46331 * C46332 * C46363 * C46338) +
                         C46323 * (C46334 + C46341 * C46338)) /
                        C46291;
    const double C328 = (C46330 * C46334 + be * C46323 * C46372 +
                         C46323 * (be * C46372 + C46323 * C46330 * C46341)) /
                        C46291;
    const double C513 =
        (ae * (C46365 * C46366 * C46404 + C46331 * C46332 * C46404 * C46338) +
         C46322 * (C46334 + C46341 * C46338)) /
        C46291;
    const double C515 = (C46330 * C46334 + ae * C46322 * C46411 +
                         C46322 * (ae * C46411 + C46322 * C46330 * C46341)) /
                        C46291;
    const double C947 =
        (ae * (C46323 * C46411 + C46330 * C46366 * C46365 * be) +
         C46322 * (be * C46372 + C46323 * C46330 * C46341)) /
        C46291;
    const double C46376 = C46375 * C46338;
    const double C46380 = C46330 * C46375;
    const double C46459 = C46375 * C46457;
    const double C46568 = be * C46375;
    const double C46567 = C46323 * C46375;
    const double C46977 = C46322 * C46375;
    const double C46415 = C46414 * C46338;
    const double C46419 = C46330 * C46414;
    const double C46495 = C46323 * C46414;
    const double C46542 = C46414 * C46540;
    const double C46650 = ae * C46414;
    const double C46649 = C46322 * C46414;
    const double C46487 = C46448 * C46338;
    const double C46505 = C46330 * C46448;
    const double C46601 = C46448 * C46457;
    const double C46600 = C46323 * C46448;
    const double C46599 = C46448 * be;
    const double C46980 = C46448 * C46540;
    const double C47044 = C46322 * C46448;
    const double C47043 = C46448 * ae;
    const double C46356 = C46355 * C46338;
    const double C46583 = C46330 * C46355;
    const double C46681 = C46323 * C46355;
    const double C46750 = C46322 * C46355;
    const double C46395 = C46394 * C46338;
    const double C46584 = C46330 * C46394;
    const double C46683 = C46394 * C46457;
    const double C46434 = C46433 * C46338;
    const double C46614 = C46330 * C46433;
    const double C46701 = C46323 * C46433;
    const double C46752 = C46433 * C46540;
    const double C327 = (C46365 * C46366 * C46328 + be * C46323 * C46368 +
                         C46323 * (be * C46368 + C46323 * C46334)) /
                        C46291;
    const double C1170 = (2 * (be * C46368 + C46323 * C46334) +
                          be * (C46368 + C46371 * std::pow(C46323, 2)) +
                          C46323 * (C46334 + be * C46323 * C46371 +
                                    C46323 * (be * C46371 + C46323 * C46341))) /
                         C46291;
    const double C127 =
        (std::pow(C46326, 2) * bs[2] * C46363 + C46368 * C46338) / C46271;
    const double C129 =
        (2 * C46330 * C46368 + C46330 * (C46368 + C46371 * C46338)) / C46271;
    const double C307 = (C46323 * C46330 * C46368) / C46271;
    const double C309 = (C46323 * (C46368 + C46371 * C46338)) / C46271;
    const double C311 = (C46788 * C46789 * C46363 + C46368 * C46457) / C46271;
    const double C313 = (C46330 * C46368 + C46372 * C46457) / C46271;
    const double C494 =
        (C46322 * C46330 * C46368 + C46330 * C46790 * ae) / C46271;
    const double C498 =
        (C46788 * C46789 * C46363 + C46322 * (C46322 * C46368 + C46790 * ae) +
         C46322 * C46790 * ae) /
        C46271;
    const double C937 =
        (C46322 * C46323 * C46368 + C46323 * C46790 * ae) / C46271;
    const double C1159 =
        (2 * C46323 * C46368 + C46323 * (C46368 + C46371 * C46457)) / C46271;
    const double C514 = (C46365 * C46366 * C46328 + ae * C46322 * C46407 +
                         C46322 * (ae * C46407 + C46322 * C46334)) /
                        C46291;
    const double C946 =
        (ae * (C46323 * C46407 + bs[2] * std::pow(C46326, 2) * be) +
         C46322 * (be * C46368 + C46323 * C46334)) /
        C46291;
    const double C2014 = (2 * (ae * C46407 + C46322 * C46334) +
                          ae * (C46407 + C46410 * std::pow(C46322, 2)) +
                          C46322 * (C46334 + ae * C46322 * C46410 +
                                    C46322 * (ae * C46410 + C46322 * C46341))) /
                         C46291;
    const double C126 =
        (std::pow(C46326, 2) * bs[2] * C46404 + C46407 * C46338) / C46271;
    const double C128 =
        (2 * C46330 * C46407 + C46330 * (C46407 + C46410 * C46338)) / C46271;
    const double C306 =
        (C46323 * C46330 * C46407 + C46330 * bs[2] * std::pow(C46326, 2) * be) /
        C46271;
    const double C310 =
        (C46788 * C46789 * C46404 + C46323 * (C46323 * C46407 + C46790 * be) +
         C46323 * C46790 * be) /
        C46271;
    const double C493 = (C46322 * C46330 * C46407) / C46271;
    const double C495 = (C46322 * (C46407 + C46410 * C46338)) / C46271;
    const double C497 = (C46788 * C46789 * C46404 + C46407 * C46540) / C46271;
    const double C499 = (C46330 * C46407 + C46411 * C46540) / C46271;
    const double C936 = (C46322 * (C46323 * C46407 + C46790 * be)) / C46271;
    const double C2002 =
        (2 * C46322 * C46407 + C46322 * (C46407 + C46410 * C46540)) / C46271;
    const double C46478 = C46477 * be;
    const double C46793 = C46330 * C46477;
    const double C46797 = C46477 + C46796;
    const double C46854 = C46323 * C46477;
    const double C46856 = C46477 + C46855;
    const double C46906 = C46322 * C46477;
    const double C46905 = C46477 * ae;
    const double C46909 = C46477 + C46907;
    const double C308 = (C46323 * (C46407 + C46410 * C46338) +
                         (bs[2] * std::pow(C46326, 2) + C46477 * C46338) * be) /
                        C46271;
    const double C496 = (C46322 * (C46368 + C46371 * C46338) +
                         (C46790 + C46477 * C46338) * ae) /
                        C46271;
    const double C1302 = (C46322 * (C46368 + C46371 * C46457) +
                          (C46790 + C46477 * C46457) * ae) /
                         C46271;
    const double C2003 =
        (2 * (C46322 * C46368 + C46790 * ae) +
         C46322 * (C46368 + C46322 * (C46322 * C46371 + C46477 * ae) +
                   C46322 * C46477 * ae) +
         (C46790 + C46477 * C46540) * ae) /
        C46271;
    const double C118 =
        2 * C46330 * C46790 + C46330 * (C46790 + C46477 * C46338);
    const double C296 = C46323 * (C46790 + C46477 * C46338);
    const double C483 = C46322 * (C46790 + C46477 * C46338);
    const double C1152 =
        2 * C46323 * C46790 + C46323 * (C46790 + C46477 * C46457);
    const double C1289 = C46322 * (C46790 + C46477 * C46457);
    const double C1996 =
        2 * C46322 * C46790 + C46322 * (C46790 + C46477 * C46540);
    const double C10696 = C47411 * C511;
    const double C46385 = C46375 + C46384;
    const double C46393 = 2 * C46391;
    const double C46465 = C46391 * C46457;
    const double C46582 = be * C46391;
    const double C46581 = C46323 * C46391;
    const double C46992 = C46322 * C46391;
    const double C46574 = C46375 + C46570;
    const double C46687 = 2 * C46679;
    const double C46685 = be * C46679;
    const double C47026 = C46322 * C46679;
    const double C46424 = C46414 + C46423;
    const double C46432 = 2 * C46430;
    const double C46504 = C46323 * C46430;
    const double C46548 = C46430 * C46540;
    const double C46664 = ae * C46430;
    const double C46663 = C46322 * C46430;
    const double C46656 = C46414 + C46652;
    const double C46756 = 2 * C46748;
    const double C46754 = ae * C46748;
    const double C46517 = C46448 + C46516;
    const double C46619 = C46615 * C46457;
    const double C46618 = C46323 * C46615;
    const double C46617 = C46615 * be;
    const double C46995 = C46615 * C46540;
    const double C46708 = C46448 + C46704;
    const double C46707 = C46703 * be;
    const double C47029 = C46703 * C46540;
    const double C47050 = C46448 + C47046;
    const double C47492 = C47456 * C47157;
    const double C47491 = C47157 * C47454;
    const double C4745 = -(C47157 * C47455) / C46271;
    const double C47182 = C47180 * C47173;
    const double C47181 = C47180 / C47175;
    const double C47191 = C47188 * C47180;
    const double C47460 = C47180 * C47176;
    const double C47499 = C47464 * C47180;
    const double C47493 = C47180 * C47457;
    const double C47262 = C47208 / C47175;
    const double C47264 = C47208 * C47261;
    const double C47271 = C47188 * C47208;
    const double C47475 = C47208 * C47263;
    const double C47505 = C47464 * C47208;
    const double C47503 = C47208 * C47469;
    const double C47304 = C47226 / C47175;
    const double C47306 = C47226 * C47303;
    const double C47313 = C47188 * C47226;
    const double C47481 = C47226 * C47305;
    const double C47508 = C47464 * C47226;
    const double C47506 = C47226 * C47471;
    const double C21545 = ((0 * ae) / C46271 - C46295 / C46291) / (2 * C46271) -
                          (0 * be) / C46271;
    const double C149 = C113 * C117;
    const double C147 = C113 * C125;
    const double C145 = C113 * C116;
    const double C335 = C113 * C295;
    const double C522 = C113 * C482;
    const double C10700 = C113 * C484;
    const double C10697 = C113 * C492;
    const double C10695 = C113 * C481;
    const double C11170 = C113 * C931;
    const double C4758 = C4747 * C117;
    const double C4755 = C4747 * C125;
    const double C4751 = C4747 * C116;
    const double C4928 = C4747 * C295;
    const double C5106 = C4747 * C482;
    const double C36975 = C4747 * C484;
    const double C36972 = C4747 * C492;
    const double C36968 = C4747 * C481;
    const double C37437 = C4747 * C931;
    const double C4753 = C4748 * C295;
    const double C36970 = C4748 * C931;
    const double C15960 = C15949 * C117;
    const double C15957 = C15949 * C125;
    const double C15953 = C15949 * C116;
    const double C16130 = C15949 * C295;
    const double C16308 = C15949 * C482;
    const double C25991 = C15949 * C484;
    const double C25988 = C15949 * C492;
    const double C25984 = C15949 * C481;
    const double C26453 = C15949 * C931;
    const double C15955 = C15950 * C295;
    const double C25986 = C15950 * C931;
    const double C21544 =
        (((C47411 - (C46270 * 2 * C46295) / C46271) * ae) / C46271 -
         C46290 / C46293) /
            (2 * C46271) -
        ((C46270 * ((0 * ae) / C46271 - C46295 / C46291) + C47523) * be) /
            C46271;
    const double C21541 = C47523 / C47162;
    const double C4743 = C47522 / C46271;
    const double C21539 = C47411 / C47162 - (C47522 * C47489) / C46291;
    const double C21540 = C47522 / C46293 - (C47523 * C47489) / C46271;
    const double C15965 = C15945 * C138;
    const double C15956 = C15945 * C137;
    const double C15952 = C15945 * C124;
    const double C25987 = C15945 * C511;
    const double C25983 = C15945 * C491;
    const double C42187 = ((0 * ae) / C46271 - C46311 / C46291) / (2 * C46271) -
                          (0 * be) / C46271;
    const double C42186 =
        (((C47428 - (C46278 * 2 * C46311) / C46271) * ae) / C46271 -
         C46309 / C46293) /
            (2 * C46271) -
        ((C46278 * ((0 * ae) / C46271 - C46311 / C46291) + C47525) * be) /
            C46271;
    const double C42184 = C47525 / C47162;
    const double C10397 = C47524 / C46271;
    const double C42182 = C47428 / C47162 - (C47524 * C47490) / C46291;
    const double C42183 = C47524 / C46293 - (C47525 * C47490) / C46271;
    const double C155 = C47411 * C139;
    const double C15972 = C15945 * C139;
    const double C338 = C47411 * C325;
    const double C4756 = C47523 * C325;
    const double C15958 = C47523 * C325;
    const double C16135 = C15945 * C325;
    const double C525 = C47411 * C512;
    const double C16313 = C15945 * C512;
    const double C46348 = C46341 + C46347;
    const double C46353 = 2 * C46350;
    const double C46464 = C46323 * C46350;
    const double C46547 = C46322 * C46350;
    const double C46458 = C46455 + C46456;
    const double C46541 = C46538 + C46539;
    const double C158 = C47411 * C140;
    const double C15981 = C15945 * C140;
    const double C342 = C47411 * C326;
    const double C4765 = C47523 * C326;
    const double C15967 = C47523 * C326;
    const double C16150 = C15945 * C326;
    const double C345 = C47411 * C328;
    const double C4935 = C47523 * C328;
    const double C16142 = C15945 * C328;
    const double C16137 = C47523 * C328;
    const double C529 = C47411 * C513;
    const double C16328 = C15945 * C513;
    const double C532 = C47411 * C515;
    const double C16320 = C15945 * C515;
    const double C954 = C47411 * C947;
    const double C5113 = C47523 * C947;
    const double C16315 = C47523 * C947;
    const double C16814 = C15945 * C947;
    const double C46377 = C46371 + C46376;
    const double C46382 = 2 * C46380;
    const double C46463 = be * C46380;
    const double C46462 = C46323 * C46380;
    const double C1171 = (2 * (be * C46372 + C46323 * C46451) +
                          be * (C46372 + C46380 * std::pow(C46323, 2)) +
                          C46323 * (C46451 + be * C46323 * C46380 +
                                    C46323 * (be * C46380 + C46323 * C46350))) /
                         C46291;
    const double C46912 = C46322 * C46380;
    const double C1161 =
        (2 * C46323 * C46372 + C46323 * (C46372 + C46380 * C46457)) / C46271;
    const double C46460 = C46371 + C46459;
    const double C46572 = C46568 + C46569;
    const double C46573 = 2 * C46567;
    const double C46571 = be * C46567;
    const double C46957 = C46322 * C46567;
    const double C46981 = C46977 + C46978;
    const double C46416 = C46410 + C46415;
    const double C46421 = 2 * C46419;
    const double C46481 = C46323 * C46419;
    const double C46546 = ae * C46419;
    const double C46545 = C46322 * C46419;
    const double C2015 = (2 * (ae * C46411 + C46322 * C46451) +
                          ae * (C46411 + C46419 * std::pow(C46322, 2)) +
                          C46322 * (C46451 + ae * C46322 * C46419 +
                                    C46322 * (ae * C46419 + C46322 * C46350))) /
                         C46291;
    const double C2004 =
        (2 * C46322 * C46411 + C46322 * (C46411 + C46419 * C46540)) / C46271;
    const double C46498 = C46495 + C46496;
    const double C46543 = C46410 + C46542;
    const double C46654 = C46650 + C46651;
    const double C46655 = 2 * C46649;
    const double C46653 = ae * C46649;
    const double C46488 = C46446 + C46487;
    const double C46507 = C46323 * C46505;
    const double C46506 = C46505 * be;
    const double C46527 = 2 * C46505;
    const double C46860 = C46505 * C46457;
    const double C46915 = C46505 * C46540;
    const double C46994 = C46322 * C46505;
    const double C46993 = C46505 * ae;
    const double C46604 = C46446 + C46601;
    const double C46603 = C46600 * be;
    const double C46705 = 2 * C46600;
    const double C46960 = C46600 * C46540;
    const double C47028 = C46322 * C46600;
    const double C47027 = C46600 * ae;
    const double C46602 = C46598 + C46599;
    const double C46983 = C46446 + C46980;
    const double C47051 = 2 * C47044;
    const double C47049 = C47044 * ae;
    const double C47048 = C47042 + C47043;
    const double C46357 = C46346 + C46356;
    const double C46586 = C46323 * C46583;
    const double C46665 = C46322 * C46583;
    const double C46686 = C46680 + C46681;
    const double C46755 = C46749 + C46750;
    const double C46396 = C46383 + C46395;
    const double C46588 = C46584 * C46457;
    const double C46688 = C46383 + C46683;
    const double C46435 = C46422 + C46434;
    const double C46616 = C46323 * C46614;
    const double C46666 = C46614 * C46540;
    const double C46706 = C46701 + C46702;
    const double C46757 = C46422 + C46752;
    const double C151 = C113 * C127;
    const double C4762 = C4747 * C127;
    const double C15964 = C15949 * C127;
    const double C154 = C113 * C129;
    const double C4771 = C4747 * C129;
    const double C15973 = C15949 * C129;
    const double C337 = C113 * C307;
    const double C4757 = C4748 * C307;
    const double C4932 = C4747 * C307;
    const double C15959 = C15950 * C307;
    const double C16134 = C15949 * C307;
    const double C341 = C113 * C309;
    const double C4764 = C4748 * C309;
    const double C4949 = C4747 * C309;
    const double C15966 = C15950 * C309;
    const double C16151 = C15949 * C309;
    const double C346 = C113 * C313;
    const double C4941 = C4747 * C313;
    const double C4934 = C4748 * C313;
    const double C16143 = C15949 * C313;
    const double C16136 = C15950 * C313;
    const double C524 = C113 * C494;
    const double C5110 = C4747 * C494;
    const double C16312 = C15949 * C494;
    const double C10702 = C113 * C498;
    const double C25995 = C15949 * C498;
    const double C36979 = C4747 * C498;
    const double C11172 = C113 * C937;
    const double C25990 = C15950 * C937;
    const double C26457 = C15949 * C937;
    const double C36974 = C4748 * C937;
    const double C37441 = C4747 * C937;
    const double C10703 = C47411 * C514;
    const double C25996 = C15945 * C514;
    const double C11173 = C47411 * C946;
    const double C25989 = C47523 * C946;
    const double C26458 = C15945 * C946;
    const double C36973 = C47523 * C946;
    const double C12420 = C47411 * C2014;
    const double C27703 = C15945 * C2014;
    const double C148 = C47411 * C126;
    const double C15961 = C15945 * C126;
    const double C153 = C47411 * C128;
    const double C15968 = C15945 * C128;
    const double C336 = C47411 * C306;
    const double C4752 = C47523 * C306;
    const double C15954 = C47523 * C306;
    const double C16131 = C15945 * C306;
    const double C523 = C47411 * C493;
    const double C16309 = C15945 * C493;
    const double C527 = C47411 * C495;
    const double C16324 = C15945 * C495;
    const double C10701 = C47411 * C497;
    const double C25992 = C15945 * C497;
    const double C530 = C47411 * C499;
    const double C16316 = C15945 * C499;
    const double C11171 = C47411 * C936;
    const double C25985 = C47523 * C936;
    const double C26454 = C15945 * C936;
    const double C36969 = C47523 * C936;
    const double C12418 = C47411 * C2002;
    const double C27699 = C15945 * C2002;
    const double C46479 = C46476 + C46478;
    const double C312 =
        (C46330 * C46407 + C46323 * (C46323 * C46411 + C46793 * be) +
         C46323 * C46793 * be) /
        C46271;
    const double C500 =
        (C46330 * C46368 + C46322 * (C46322 * C46372 + C46793 * ae) +
         C46322 * C46793 * ae) /
        C46271;
    const double C938 = (C46322 * (C46323 * C46411 + C46793 * be)) / C46271;
    const double C939 =
        (C46322 * C46323 * C46372 + C46323 * C46793 * ae) / C46271;
    const double C1304 = (C46322 * (C46372 + C46380 * C46457) +
                          (C46793 + C46482 * C46457) * ae) /
                         C46271;
    const double C2005 =
        (2 * (C46322 * C46372 + C46793 * ae) +
         C46322 * (C46372 + C46322 * (C46322 * C46380 + C46482 * ae) +
                   C46322 * C46482 * ae) +
         (C46793 + C46482 * C46540) * ae) /
        C46271;
    const double C298 = C46330 * C46790 + C46793 * C46457;
    const double C485 = C46330 * C46790 + C46793 * C46540;
    const double C932 = C46322 * C46323 * C46793;
    const double C1153 =
        2 * C46323 * C46793 + C46323 * (C46793 + C46482 * C46457);
    const double C1287 = C46323 * C46793 + C46859 * C46540;
    const double C1290 = C46322 * (C46793 + C46482 * C46457);
    const double C1997 =
        2 * C46322 * C46793 + C46322 * (C46793 + C46482 * C46540);
    const double C119 = 3 * (C46790 + C46477 * C46338) +
                        C46330 * (2 * C46793 + C46330 * C46797);
    const double C299 = C46790 + C46477 * C46338 + C46797 * C46457;
    const double C300 = C46323 * (2 * C46793 + C46330 * C46797);
    const double C486 = C46790 + C46477 * C46338 + C46797 * C46540;
    const double C487 = C46322 * (2 * C46793 + C46330 * C46797);
    const double C933 = C46322 * C46323 * C46797;
    const double C1296 =
        (C46323 * C46368 + C46322 * (C46322 * C46454 + C46854 * ae) +
         C46322 * C46854 * ae) /
        C46271;
    const double C2394 =
        (2 * (C46322 * C46454 + C46854 * ae) +
         C46322 * (C46454 + C46322 * (C46322 * C46567 + C46497 * ae) +
                   C46322 * C46497 * ae) +
         (C46854 + C46497 * C46540) * ae) /
        C46271;
    const double C1286 = C46323 * C46790 + C46854 * C46540;
    const double C2390 =
        2 * C46322 * C46854 + C46322 * (C46854 + C46497 * C46540);
    const double C1155 = 3 * (C46790 + C46477 * C46457) +
                         C46323 * (2 * C46854 + C46323 * C46856);
    const double C1292 = C46790 + C46477 * C46457 + C46856 * C46540;
    const double C1694 = C46322 * (2 * C46854 + C46323 * C46856);
    const double C46908 = C46904 + C46905;
    const double C1999 = 3 * (C46790 + C46477 * C46540) +
                         C46322 * (2 * C46906 + C46322 * C46909);
    const double C340 = C47411 * C308;
    const double C4761 = C47523 * C308;
    const double C15963 = C47523 * C308;
    const double C16146 = C15945 * C308;
    const double C528 = C113 * C496;
    const double C5127 = C4747 * C496;
    const double C16329 = C15949 * C496;
    const double C11561 = C113 * C1302;
    const double C26459 = C15950 * C1302;
    const double C26848 = C15949 * C1302;
    const double C37443 = C4748 * C1302;
    const double C37832 = C4747 * C1302;
    const double C12421 = C113 * C2003;
    const double C27704 = C15949 * C2003;
    const double C38684 = C4747 * C2003;
    const double C152 = C113 * C118;
    const double C4767 = C4747 * C118;
    const double C15969 = C15949 * C118;
    const double C339 = C113 * C296;
    const double C4760 = C4748 * C296;
    const double C4945 = C4747 * C296;
    const double C15962 = C15950 * C296;
    const double C16147 = C15949 * C296;
    const double C526 = C113 * C483;
    const double C5123 = C4747 * C483;
    const double C16325 = C15949 * C483;
    const double C11559 = C113 * C1289;
    const double C26455 = C15950 * C1289;
    const double C26844 = C15949 * C1289;
    const double C37439 = C4748 * C1289;
    const double C37828 = C4747 * C1289;
    const double C12419 = C113 * C1996;
    const double C27700 = C15949 * C1996;
    const double C38680 = C4747 * C1996;
    const double C46386 = C46330 * C46385;
    const double C46390 = 3 * C46385;
    const double C46470 = be * C46385;
    const double C46469 = C46323 * C46385;
    const double C46920 = C46322 * C46385;
    const double C46467 = C46380 + C46465;
    const double C46587 = 2 * C46581;
    const double C46585 = be * C46581;
    const double C46965 = C46322 * C46581;
    const double C46577 = C46323 * C46574;
    const double C46682 = 3 * C46574;
    const double C46678 = be * C46574;
    const double C47016 = C46322 * C46574;
    const double C46689 = C46346 + C46685;
    const double C46425 = C46330 * C46424;
    const double C46429 = 3 * C46424;
    const double C46486 = C46323 * C46424;
    const double C46553 = ae * C46424;
    const double C46552 = C46322 * C46424;
    const double C46550 = C46419 + C46548;
    const double C46669 = 2 * C46663;
    const double C46667 = ae * C46663;
    const double C46659 = C46322 * C46656;
    const double C46751 = 3 * C46656;
    const double C46747 = ae * C46656;
    const double C46758 = C46346 + C46754;
    const double C46519 = C46323 * C46517;
    const double C46518 = C46517 * be;
    const double C46528 = C46330 * C46517;
    const double C46865 = C46517 * C46457;
    const double C46923 = C46517 * C46540;
    const double C46622 = C46505 + C46619;
    const double C46621 = C46618 * be;
    const double C46968 = C46618 * C46540;
    const double C46998 = C46505 + C46995;
    const double C46711 = C46323 * C46708;
    const double C46710 = C46708 * be;
    const double C47019 = C46708 * C46540;
    const double C47032 = C46600 + C47029;
    const double C47053 = C46322 * C47050;
    const double C105 = C47492 / C47162;
    const double C103 = C47157 / C47162 - (C47491 * C47455) / C46291;
    const double C104 = C47491 / C46293 - (C47492 * C47455) / C46271;
    const double C15947 = C47491 / C46271;
    const double C47183 = C47182 * C47176;
    const double C47190 = C47182 / C47189;
    const double C47461 = C47188 * C47182;
    const double C47459 = C47182 / C47171;
    const double C291 = (C47180 * std::pow(C47176, 2)) / C47174 + C47181;
    const double C47192 = C47191 * C47176;
    const double C47465 = C47173 * C47191;
    const double C47463 = 2 * C47191;
    const double C47509 = C47191 / C47467;
    const double C112 = C47191 / C47502;
    const double C2871 = C47191 / C47175;
    const double C47495 = C47460 / C47171;
    const double C292 = (-2 * C47188 * C47460) / C47171;
    const double C47526 = C47493 / C47174;
    const double C1078 = (C47208 * std::pow(C47263, 2)) / C47174 + C47262;
    const double C47265 = C47264 * C47263;
    const double C47270 = C47264 / C47189;
    const double C47473 = C47264 / C47171;
    const double C47470 = C47188 * C47264;
    const double C47272 = C47271 * C47263;
    const double C47479 = C47261 * C47271;
    const double C47478 = 2 * C47271;
    const double C47515 = C47271 / C47467;
    const double C1150 = C47271 / C47502;
    const double C2868 = C47271 / C47175;
    const double C47511 = C47475 / C47171;
    const double C1079 = (-2 * C47188 * C47475) / C47171;
    const double C47531 = C47503 / C47174;
    const double C1816 = (C47226 * std::pow(C47305, 2)) / C47174 + C47304;
    const double C47307 = C47306 * C47305;
    const double C47312 = C47306 / C47189;
    const double C47474 = C47306 / C47171;
    const double C47472 = C47188 * C47306;
    const double C47314 = C47313 * C47305;
    const double C47485 = C47303 * C47313;
    const double C47484 = 2 * C47313;
    const double C47521 = C47313 / C47467;
    const double C1995 = C47313 / C47502;
    const double C3770 = C47313 / C47175;
    const double C47517 = C47481 / C47171;
    const double C1817 = (-2 * C47188 * C47481) / C47171;
    const double C47533 = C47506 / C47174;
    const double C4779 = C4743 * C140;
    const double C4770 = C4743 * C139;
    const double C4766 = C4743 * C128;
    const double C4763 = C4743 * C138;
    const double C4759 = C4743 * C126;
    const double C4754 = C4743 * C137;
    const double C4750 = C4743 * C124;
    const double C4948 = C4743 * C326;
    const double C4944 = C4743 * C308;
    const double C4940 = C4743 * C328;
    const double C4933 = C4743 * C325;
    const double C4929 = C4743 * C306;
    const double C5126 = C4743 * C513;
    const double C5122 = C4743 * C495;
    const double C5118 = C4743 * C515;
    const double C5114 = C4743 * C499;
    const double C5111 = C4743 * C512;
    const double C5107 = C4743 * C493;
    const double C5612 = C4743 * C947;
    const double C36980 = C4743 * C514;
    const double C36976 = C4743 * C497;
    const double C36971 = C4743 * C511;
    const double C36967 = C4743 * C491;
    const double C37442 = C4743 * C946;
    const double C37438 = C4743 * C936;
    const double C38683 = C4743 * C2014;
    const double C38679 = C4743 * C2002;
    const double C21543 =
        (((0 - (C46270 * C46290) / C46271) * ae) / C46271 - (0 * be) / C46293) /
            (2 * C46271) -
        ((C46270 * (((C47411 - (C46270 * 2 * C46295) / C46271) * ae) / C46271 -
                    C46290 / C46293) +
          C4743) *
         be) /
            C46271 +
        (0 * ae) / C46271 - C46295 / C46291;
    const double C42185 =
        (((0 - (C46278 * C46309) / C46271) * ae) / C46271 - (0 * be) / C46293) /
            (2 * C46271) -
        ((C46278 * (((C47428 - (C46278 * 2 * C46311) / C46271) * ae) / C46271 -
                    C46309 / C46293) +
          C10397) *
         be) /
            C46271 +
        (0 * ae) / C46271 - C46311 / C46291;
    const double C141 =
        (4 * (2 * C46330 * C46341 + C46330 * C46348) +
         C46330 * (3 * C46348 +
                   C46330 * (2 * C46330 * C46346 +
                             C46330 * (C46346 + std::pow(C46336, 7) * bs[7] *
                                                    C46328 * C46338)))) /
        C46291;
    const double C329 = (C46334 + C46341 * C46338 + be * C46323 * C46377 +
                         C46323 * (be * C46377 + C46323 * C46348)) /
                        C46291;
    const double C330 = (be * (2 * C46372 + C46330 * C46377) +
                         C46323 * (2 * C46330 * C46341 + C46330 * C46348)) /
                        C46291;
    const double C131 = (3 * (C46368 + C46371 * C46338) +
                         C46330 * (2 * C46372 + C46330 * C46377)) /
                        C46271;
    const double C315 = (C46368 + C46371 * C46338 + C46377 * C46457) / C46271;
    const double C317 = (C46323 * (2 * C46372 + C46330 * C46377)) / C46271;
    const double C502 =
        (C46368 + C46371 * C46338 + C46322 * (C46322 * C46377 + C46797 * ae) +
         C46322 * C46797 * ae) /
        C46271;
    const double C504 = (C46322 * (2 * C46372 + C46330 * C46377) +
                         (2 * C46793 + C46330 * C46797) * ae) /
                        C46271;
    const double C941 =
        (C46322 * C46323 * C46377 + C46323 * C46797 * ae) / C46271;
    const double C1163 =
        (2 * C46323 * C46377 + C46323 * (C46377 + C46385 * C46457)) / C46271;
    const double C46466 = C46463 + C46464;
    const double C1298 =
        (C46323 * C46372 + C46322 * (C46322 * C46462 + C46859 * ae) +
         C46322 * C46859 * ae) /
        C46271;
    const double C1434 = C47411 * C1171;
    const double C4942 = C47523 * C1171;
    const double C6149 = C4743 * C1171;
    const double C16144 = C47523 * C1171;
    const double C17335 = C15945 * C1171;
    const double C46916 = C46912 + C46913;
    const double C1433 = C113 * C1161;
    const double C4943 = C4748 * C1161;
    const double C6148 = C4747 * C1161;
    const double C16145 = C15950 * C1161;
    const double C17334 = C15949 * C1161;
    const double C1173 =
        (3 * (C46334 + be * C46454 + C46323 * C46458) +
         be * (2 * C46454 + C46323 * C46460) +
         C46323 * (2 * C46458 + be * C46460 +
                   C46323 * (C46341 + be * C46323 * C46375 +
                             C46323 * (be * C46375 + C46323 * C46346)))) /
        C46291;
    const double C1165 = (3 * (C46368 + C46371 * C46457) +
                          C46323 * (2 * C46454 + C46323 * C46460)) /
                         C46271;
    const double C1308 =
        (C46368 + C46371 * C46457 + C46322 * (C46322 * C46460 + C46856 * ae) +
         C46322 * C46856 * ae) /
        C46271;
    const double C1698 = (C46322 * (2 * C46454 + C46323 * C46460) +
                          (2 * C46854 + C46323 * C46856) * ae) /
                         C46271;
    const double C46576 = C46323 * C46572;
    const double C46635 = C46322 * C46572;
    const double C46677 = 2 * C46572;
    const double C46575 = C46341 + C46571;
    const double C46961 = C46957 + C46958;
    const double C46985 = C46322 * C46981;
    const double C47041 = 2 * C46981;
    const double C516 = (C46334 + C46341 * C46338 + ae * C46322 * C46416 +
                         C46322 * (ae * C46416 + C46322 * C46348)) /
                        C46291;
    const double C517 = (ae * (2 * C46411 + C46330 * C46416) +
                         C46322 * (2 * C46330 * C46341 + C46330 * C46348)) /
                        C46291;
    const double C948 =
        (ae * (C46323 * C46416 +
               (C46366 * C46365 + C46332 * C46331 * C46338) * be) +
         C46322 * (be * C46377 + C46323 * C46348)) /
        C46291;
    const double C130 = (3 * (C46407 + C46410 * C46338) +
                         C46330 * (2 * C46411 + C46330 * C46416)) /
                        C46271;
    const double C314 =
        (C46407 + C46410 * C46338 + C46323 * (C46323 * C46416 + C46797 * be) +
         C46323 * C46797 * be) /
        C46271;
    const double C316 = (C46323 * (2 * C46411 + C46330 * C46416) +
                         (2 * C46793 + C46330 * C46797) * be) /
                        C46271;
    const double C501 = (C46407 + C46410 * C46338 + C46416 * C46540) / C46271;
    const double C503 = (C46322 * (2 * C46411 + C46330 * C46416)) / C46271;
    const double C940 = (C46322 * (C46323 * C46416 + C46797 * be)) / C46271;
    const double C2006 =
        (2 * C46322 * C46416 + C46322 * (C46416 + C46424 * C46540)) / C46271;
    const double C46484 = C46481 + C46483;
    const double C46549 = C46546 + C46547;
    const double C2288 = C47411 * C2015;
    const double C7211 = C4743 * C2015;
    const double C18381 = C15945 * C2015;
    const double C2286 = C47411 * C2004;
    const double C7207 = C4743 * C2004;
    const double C18377 = C15945 * C2004;
    const double C46500 = C46323 * C46498;
    const double C46597 = 2 * C46498;
    const double C46634 = ae * C46498;
    const double C46633 = C46322 * C46498;
    const double C2017 =
        (3 * (C46334 + ae * C46537 + C46322 * C46541) +
         ae * (2 * C46537 + C46322 * C46543) +
         C46322 * (2 * C46541 + ae * C46543 +
                   C46322 * (C46341 + ae * C46322 * C46414 +
                             C46322 * (ae * C46414 + C46322 * C46346)))) /
        C46291;
    const double C2008 = (3 * (C46407 + C46410 * C46540) +
                          C46322 * (2 * C46537 + C46322 * C46543)) /
                         C46271;
    const double C46658 = C46322 * C46654;
    const double C46746 = 2 * C46654;
    const double C46657 = C46341 + C46653;
    const double C46489 = C46488 * be;
    const double C46803 = C46330 * C46488;
    const double C46809 = 3 * C46488;
    const double C46864 = C46323 * C46488;
    const double C46922 = C46322 * C46488;
    const double C46921 = C46488 * ae;
    const double C1306 = (C46322 * (C46377 + C46385 * C46457) +
                          (C46797 + C46488 * C46457) * ae) /
                         C46271;
    const double C2007 =
        (2 * (C46322 * C46377 + C46797 * ae) +
         C46322 * (C46377 + C46322 * (C46322 * C46385 + C46488 * ae) +
                   C46322 * C46488 * ae) +
         (C46797 + C46488 * C46540) * ae) /
        C46271;
    const double C1154 =
        2 * C46323 * C46797 + C46323 * (C46797 + C46488 * C46457);
    const double C1291 = C46322 * (C46797 + C46488 * C46457);
    const double C1998 =
        2 * C46322 * C46797 + C46322 * (C46797 + C46488 * C46540);
    const double C46509 = C46507 * be;
    const double C46943 = 2 * C46507;
    const double C46967 = C46322 * C46507;
    const double C46966 = C46507 * ae;
    const double C2396 =
        (2 * (C46322 * C46462 + C46859 * ae) +
         C46322 * (C46462 + C46322 * (C46322 * C46581 + C46507 * ae) +
                   C46322 * C46507 * ae) +
         (C46859 + C46507 * C46540) * ae) /
        C46271;
    const double C2391 =
        2 * C46322 * C46859 + C46322 * (C46859 + C46507 * C46540);
    const double C46508 = C46504 + C46506;
    const double C46861 = C46482 + C46860;
    const double C46917 = C46482 + C46915;
    const double C46999 = 2 * C46994;
    const double C46997 = C46994 * ae;
    const double C46996 = C46992 + C46993;
    const double C46606 = C46604 * be;
    const double C46939 = C46323 * C46604;
    const double C47006 = 3 * C46604;
    const double C47018 = C46322 * C46604;
    const double C47017 = C46604 * ae;
    const double C7346 =
        (2 * (C46322 * C46460 + C46856 * ae) +
         C46322 * (C46460 + C46322 * (C46322 * C46574 + C46604 * ae) +
                   C46322 * C46604 * ae) +
         (C46856 + C46604 * C46540) * ae) /
        C46271;
    const double C7343 =
        2 * C46322 * C46856 + C46322 * (C46856 + C46604 * C46540);
    const double C46962 = C46497 + C46960;
    const double C47033 = 2 * C47028;
    const double C47031 = C47028 * ae;
    const double C47030 = C47026 + C47027;
    const double C46605 = C46323 * C46602;
    const double C46636 = C46602 * C46540;
    const double C46700 = 2 * C46602;
    const double C46733 = ae * C46602;
    const double C46732 = C46322 * C46602;
    const double C46986 = C46322 * C46983;
    const double C47047 = 3 * C46983;
    const double C47045 = C46983 * ae;
    const double C47052 = C46322 * C47048;
    const double C46358 = C46330 * C46357;
    const double C46471 = C46323 * C46357;
    const double C46554 = C46322 * C46357;
    const double C1172 = (2 * (be * C46377 + C46323 * C46348) +
                          be * (C46377 + C46385 * std::pow(C46323, 2)) +
                          C46323 * (C46348 + be * C46323 * C46385 +
                                    C46323 * (be * C46385 + C46323 * C46357))) /
                         C46291;
    const double C2016 = (2 * (ae * C46416 + C46322 * C46348) +
                          ae * (C46416 + C46424 * std::pow(C46322, 2)) +
                          C46322 * (C46348 + ae * C46322 * C46424 +
                                    C46322 * (ae * C46424 + C46322 * C46357))) /
                         C46291;
    const double C46590 = C46582 + C46586;
    const double C46668 = C46664 + C46665;
    const double C46690 = C46323 * C46686;
    const double C46734 = C46322 * C46686;
    const double C46759 = C46322 * C46755;
    const double C46397 = C46330 * C46396;
    const double C46472 = C46396 * C46457;
    const double C46591 = C46391 + C46588;
    const double C46691 = C46323 * C46688;
    const double C46436 = C46330 * C46435;
    const double C46514 = C46323 * C46435;
    const double C46555 = C46435 * C46540;
    const double C46620 = C46616 + C46617;
    const double C46670 = C46430 + C46666;
    const double C46709 = C46323 * C46706;
    const double C46735 = C46706 * C46540;
    const double C46760 = C46322 * C46757;
    const double C165 = C150 - C151;
    const double C167 = C154 - C155;
    const double C360 = C341 - C342;
    const double C10705 = C524 - C525;
    const double C10699 = C525 - C524;
    const double C42410 = C10703 - C10702;
    const double C164 = C148 - C149;
    const double C10704 = C522 - C523;
    const double C10698 = C523 - C522;
    const double C42409 = C10701 - C10700;
    const double C1313 = (be * C46368 + C46323 * C46334 + ae * C46322 * C46479 +
                          C46322 * (ae * C46479 + C46322 * C46458)) /
                         C46291;
    const double C1316 =
        (ae * (C46407 + C46323 * C46479 + C46323 * C46477 * be) +
         C46322 * (C46334 + be * C46454 + C46323 * C46458)) /
        C46291;
    const double C2399 =
        (2 * (ae * C46479 + C46322 * C46458) + ae * (C46479 + C46498 * C46540) +
         C46322 * (C46458 + ae * C46322 * C46498 +
                   C46322 * (ae * C46498 +
                             C46322 * (be * C46375 + C46323 * C46346)))) /
        C46291;
    const double C1158 =
        (2 * (C46323 * C46407 + C46790 * be) +
         C46323 * (C46407 + C46323 * C46479 + C46323 * C46477 * be) +
         (C46790 + C46477 * C46457) * be) /
        C46271;
    const double C1295 =
        (C46323 * C46407 + C46790 * be + C46479 * C46540) / C46271;
    const double C1301 =
        (C46322 * (C46407 + C46323 * C46479 + C46854 * be)) / C46271;
    const double C2393 =
        (2 * C46322 * C46479 + C46322 * (C46479 + C46498 * C46540)) / C46271;
    const double C343 = C47411 * C312;
    const double C4936 = C4743 * C312;
    const double C4931 = C47523 * C312;
    const double C16138 = C15945 * C312;
    const double C16133 = C47523 * C312;
    const double C533 = C113 * C500;
    const double C5119 = C4747 * C500;
    const double C16321 = C15949 * C500;
    const double C952 = C47411 * C938;
    const double C5109 = C47523 * C938;
    const double C5608 = C4743 * C938;
    const double C16311 = C47523 * C938;
    const double C16810 = C15945 * C938;
    const double C955 = C113 * C939;
    const double C5112 = C4748 * C939;
    const double C5613 = C4747 * C939;
    const double C16314 = C15950 * C939;
    const double C16815 = C15949 * C939;
    const double C1591 = C113 * C1304;
    const double C5615 = C4748 * C1304;
    const double C6350 = C4747 * C1304;
    const double C16817 = C15950 * C1304;
    const double C17536 = C15949 * C1304;
    const double C2287 = C113 * C2005;
    const double C7210 = C4747 * C2005;
    const double C18380 = C15949 * C2005;
    const double C344 = C113 * C298;
    const double C4937 = C4747 * C298;
    const double C4930 = C4748 * C298;
    const double C16139 = C15949 * C298;
    const double C16132 = C15950 * C298;
    const double C531 = C113 * C485;
    const double C5115 = C4747 * C485;
    const double C16317 = C15949 * C485;
    const double C953 = C113 * C932;
    const double C5108 = C4748 * C932;
    const double C5609 = C4747 * C932;
    const double C16310 = C15950 * C932;
    const double C16811 = C15949 * C932;
    const double C1431 = C113 * C1153;
    const double C4939 = C4748 * C1153;
    const double C6144 = C4747 * C1153;
    const double C16141 = C15950 * C1153;
    const double C17330 = C15949 * C1153;
    const double C2171 = C113 * C1287;
    const double C5117 = C4748 * C1287;
    const double C7068 = C4747 * C1287;
    const double C16319 = C15950 * C1287;
    const double C18238 = C15949 * C1287;
    const double C1589 = C113 * C1290;
    const double C5611 = C4748 * C1290;
    const double C6346 = C4747 * C1290;
    const double C16813 = C15950 * C1290;
    const double C17532 = C15949 * C1290;
    const double C2285 = C113 * C1997;
    const double C7206 = C4747 * C1997;
    const double C18376 = C15949 * C1997;
    const double C157 = C113 * C119;
    const double C4774 = C4747 * C119;
    const double C15976 = C15949 * C119;
    const double C348 = C113 * C299;
    const double C4952 = C4747 * C299;
    const double C4947 = C4748 * C299;
    const double C16154 = C15949 * C299;
    const double C16149 = C15950 * C299;
    const double C352 = C113 * C300;
    const double C4769 = C4748 * C300;
    const double C5268 = C4747 * C300;
    const double C15971 = C15950 * C300;
    const double C16470 = C15949 * C300;
    const double C535 = C113 * C486;
    const double C5130 = C4747 * C486;
    const double C16332 = C15949 * C486;
    const double C539 = C113 * C487;
    const double C5406 = C4747 * C487;
    const double C16608 = C15949 * C487;
    const double C957 = C113 * C933;
    const double C5125 = C4748 * C933;
    const double C5616 = C4747 * C933;
    const double C16327 = C15950 * C933;
    const double C16818 = C15949 * C933;
    const double C11557 = C113 * C1296;
    const double C25997 = C15950 * C1296;
    const double C26840 = C15949 * C1296;
    const double C36981 = C4748 * C1296;
    const double C37824 = C4747 * C1296;
    const double C12898 = C113 * C2394;
    const double C27706 = C15950 * C2394;
    const double C28173 = C15949 * C2394;
    const double C38686 = C4748 * C2394;
    const double C39153 = C4747 * C2394;
    const double C11555 = C113 * C1286;
    const double C25993 = C15950 * C1286;
    const double C26836 = C15949 * C1286;
    const double C36977 = C4748 * C1286;
    const double C37820 = C4747 * C1286;
    const double C12896 = C113 * C2390;
    const double C27702 = C15950 * C2390;
    const double C28169 = C15949 * C2390;
    const double C38682 = C4748 * C2390;
    const double C39149 = C4747 * C2390;
    const double C11562 = C113 * C1292;
    const double C26851 = C15949 * C1292;
    const double C26838 = C15950 * C1292;
    const double C37835 = C4747 * C1292;
    const double C37822 = C4748 * C1292;
    const double C12032 = C113 * C1694;
    const double C26846 = C15950 * C1694;
    const double C27313 = C15949 * C1694;
    const double C37830 = C4748 * C1694;
    const double C38297 = C4747 * C1694;
    const double C2009 =
        (3 * (C46368 + C46322 * C46908 + C46906 * ae) +
         C46322 * (2 * C46908 +
                   C46322 * (C46371 + C46322 * (C46322 * C46375 + C46446 * ae) +
                             C46322 * C46446 * ae) +
                   C46909 * ae) +
         (2 * C46906 + C46322 * C46909) * ae) /
        C46271;
    const double C12422 = C113 * C1999;
    const double C27707 = C15949 * C1999;
    const double C38687 = C4747 * C1999;
    const double C547 = C528 - C529;
    const double C10711 = C529 - C528;
    const double C43676 = C12421 - C12420;
    const double C166 = C152 - C153;
    const double C359 = C339 - C340;
    const double C546 = C526 - C527;
    const double C10710 = C527 - C526;
    const double C43675 = C12419 - C12418;
    const double C46387 = C46382 + C46386;
    const double C1167 = (3 * (C46372 + C46380 * C46457) +
                          C46323 * (2 * C46462 + C46323 * C46467)) /
                         C46271;
    const double C46589 = C46350 + C46585;
    const double C46579 = C46573 + C46577;
    const double C46426 = C46421 + C46425;
    const double C2010 = (3 * (C46411 + C46419 * C46540) +
                          C46322 * (2 * C46545 + C46322 * C46550)) /
                         C46271;
    const double C46671 = C46350 + C46667;
    const double C46661 = C46655 + C46659;
    const double C46521 = C46519 * be;
    const double C46529 = C46527 + C46528;
    const double C46866 = C46488 + C46865;
    const double C46925 = C46488 + C46923;
    const double C46624 = C46622 * be;
    const double C46944 = C46323 * C46622;
    const double C46970 = C46507 + C46968;
    const double C47001 = C46322 * C46998;
    const double C46713 = C46705 + C46711;
    const double C47021 = C46604 + C47019;
    const double C47035 = C46322 * C47032;
    const double C47055 = C47051 + C47053;
    const double C47184 = C47183 / C47174;
    const double C47496 = 2 * C47461;
    const double C47193 = C47192 / C47171;
    const double C47500 = C47465 / C47189;
    const double C47527 = C47459 - C47495;
    const double C2608 = -C47495;
    const double C47541 = C47526 + C47181;
    const double C47266 = C47265 / C47174;
    const double C47504 = 2 * C47470;
    const double C47273 = C47272 / C47171;
    const double C47514 = C47479 / C47189;
    const double C47535 = C47473 - C47511;
    const double C2500 = -C47511;
    const double C47544 = C47531 + C47262;
    const double C47308 = C47307 / C47174;
    const double C47507 = 2 * C47472;
    const double C47315 = C47314 / C47171;
    const double C47520 = C47485 / C47189;
    const double C47538 = C47474 - C47517;
    const double C3262 = -C47517;
    const double C47545 = C47533 + C47304;
    const double C163 = C47411 * C141;
    const double C349 = C47411 * C329;
    const double C4957 = C4743 * C329;
    const double C4950 = C47523 * C329;
    const double C16159 = C15945 * C329;
    const double C16152 = C47523 * C329;
    const double C353 = C47411 * C330;
    const double C4772 = C47523 * C330;
    const double C5273 = C4743 * C330;
    const double C15974 = C47523 * C330;
    const double C16475 = C15945 * C330;
    const double C159 = C113 * C131;
    const double C4778 = C4747 * C131;
    const double C15980 = C15949 * C131;
    const double C350 = C113 * C315;
    const double C4956 = C4747 * C315;
    const double C4951 = C4748 * C315;
    const double C16158 = C15949 * C315;
    const double C16153 = C15950 * C315;
    const double C354 = C113 * C317;
    const double C4773 = C4748 * C317;
    const double C5272 = C4747 * C317;
    const double C15975 = C15950 * C317;
    const double C16474 = C15949 * C317;
    const double C537 = C113 * C502;
    const double C5134 = C4747 * C502;
    const double C16336 = C15949 * C502;
    const double C541 = C113 * C504;
    const double C5410 = C4747 * C504;
    const double C16612 = C15949 * C504;
    const double C959 = C113 * C941;
    const double C5129 = C4748 * C941;
    const double C5620 = C4747 * C941;
    const double C16331 = C15950 * C941;
    const double C16822 = C15949 * C941;
    const double C1437 = C113 * C1163;
    const double C4958 = C4748 * C1163;
    const double C16160 = C15950 * C1163;
    const double C1174 =
        (3 * (C46451 + be * C46462 + C46323 * C46466) +
         be * (2 * C46462 + C46323 * C46467) +
         C46323 *
             (2 * C46466 + be * C46467 +
              C46323 * (C46350 + be * C46323 * C46391 +
                        C46323 * (be * C46391 + C46323 * C46330 * C46355)))) /
        C46291;
    const double C2173 = C113 * C1298;
    const double C5121 = C4748 * C1298;
    const double C7072 = C4747 * C1298;
    const double C16323 = C15950 * C1298;
    const double C18242 = C15949 * C1298;
    const double C11564 = C113 * C1308;
    const double C26855 = C15949 * C1308;
    const double C26842 = C15950 * C1308;
    const double C37839 = C4747 * C1308;
    const double C37826 = C4748 * C1308;
    const double C12034 = C113 * C1698;
    const double C26850 = C15950 * C1698;
    const double C27317 = C15949 * C1698;
    const double C37834 = C4748 * C1698;
    const double C38301 = C4747 * C1698;
    const double C46684 = C46677 + C46678;
    const double C46578 = C46575 + C46576;
    const double C46987 = C46371 + C46985;
    const double C536 = C47411 * C516;
    const double C5135 = C4743 * C516;
    const double C16337 = C15945 * C516;
    const double C540 = C47411 * C517;
    const double C5411 = C4743 * C517;
    const double C16613 = C15945 * C517;
    const double C958 = C47411 * C948;
    const double C5128 = C47523 * C948;
    const double C5621 = C4743 * C948;
    const double C16330 = C47523 * C948;
    const double C16823 = C15945 * C948;
    const double C156 = C47411 * C130;
    const double C4775 = C4743 * C130;
    const double C15977 = C15945 * C130;
    const double C347 = C47411 * C314;
    const double C4953 = C4743 * C314;
    const double C4946 = C47523 * C314;
    const double C16155 = C15945 * C314;
    const double C16148 = C47523 * C314;
    const double C351 = C47411 * C316;
    const double C4768 = C47523 * C316;
    const double C5269 = C4743 * C316;
    const double C15970 = C47523 * C316;
    const double C16471 = C15945 * C316;
    const double C534 = C47411 * C501;
    const double C5131 = C4743 * C501;
    const double C16333 = C15945 * C501;
    const double C538 = C47411 * C503;
    const double C5407 = C4743 * C503;
    const double C16609 = C15945 * C503;
    const double C956 = C47411 * C940;
    const double C5124 = C47523 * C940;
    const double C5617 = C4743 * C940;
    const double C16326 = C47523 * C940;
    const double C16819 = C15945 * C940;
    const double C2290 = C47411 * C2006;
    const double C1314 = (be * C46372 + C46323 * C46451 + ae * C46322 * C46484 +
                          C46322 * (ae * C46484 + C46322 * C46466)) /
                         C46291;
    const double C1317 =
        (ae * (C46411 + C46323 * C46484 + C46323 * C46482 * be) +
         C46322 * (C46451 + be * C46462 + C46323 * C46466)) /
        C46291;
    const double C1160 =
        (2 * (C46323 * C46411 + C46793 * be) +
         C46323 * (C46411 + C46323 * C46484 + C46323 * C46482 * be) +
         (C46793 + C46482 * C46457) * be) /
        C46271;
    const double C1297 =
        (C46323 * C46411 + C46793 * be + C46484 * C46540) / C46271;
    const double C1303 =
        (C46322 * (C46411 + C46323 * C46484 + C46859 * be)) / C46271;
    const double C2018 =
        (3 * (C46451 + ae * C46545 + C46322 * C46549) +
         ae * (2 * C46545 + C46322 * C46550) +
         C46322 *
             (2 * C46549 + ae * C46550 +
              C46322 * (C46350 + ae * C46322 * C46430 +
                        C46322 * (ae * C46430 + C46322 * C46330 * C46355)))) /
        C46291;
    const double C46501 = C46410 + C46500;
    const double C46637 = C46634 + C46635;
    const double C12425 = C47411 * C2017;
    const double C27712 = C15945 * C2017;
    const double C38692 = C4743 * C2017;
    const double C12423 = C47411 * C2008;
    const double C27708 = C15945 * C2008;
    const double C38688 = C4743 * C2008;
    const double C46753 = C46746 + C46747;
    const double C46660 = C46657 + C46658;
    const double C46490 = C46486 + C46489;
    const double C46804 = C46802 + C46803;
    const double C1300 =
        (C46323 * C46377 + C46322 * (C46322 * C46469 + C46864 * ae) +
         C46322 * C46864 * ae) /
        C46271;
    const double C2398 =
        (2 * (C46322 * C46469 + C46864 * ae) +
         C46322 * (C46469 + C46322 * (C46322 * C46323 * C46396 + C46519 * ae) +
                   C46322 * C46519 * ae) +
         (C46864 + C46519 * C46540) * ae) /
        C46271;
    const double C1288 = C46323 * C46797 + C46864 * C46540;
    const double C2392 =
        2 * C46322 * C46864 + C46322 * (C46864 + C46519 * C46540);
    const double C46924 = C46920 + C46921;
    const double C1595 = C113 * C1306;
    const double C5622 = C4748 * C1306;
    const double C16824 = C15950 * C1306;
    const double C2291 = C113 * C2007;
    const double C1435 = C113 * C1154;
    const double C4954 = C4748 * C1154;
    const double C16156 = C15950 * C1154;
    const double C1593 = C113 * C1291;
    const double C5618 = C4748 * C1291;
    const double C16820 = C15950 * C1291;
    const double C2289 = C113 * C1998;
    const double C46969 = C46965 + C46966;
    const double C7212 = C4748 * C2396;
    const double C12630 = C113 * C2396;
    const double C18382 = C15950 * C2396;
    const double C7208 = C4748 * C2391;
    const double C12628 = C113 * C2391;
    const double C18378 = C15950 * C2391;
    const double C46510 = C46323 * C46508;
    const double C46613 = 2 * C46508;
    const double C46641 = ae * C46508;
    const double C46640 = C46322 * C46508;
    const double C2400 =
        (2 * (ae * C46484 + C46322 * C46466) + ae * (C46484 + C46508 * C46540) +
         C46322 *
             (C46466 + ae * C46322 * C46508 +
              C46322 * (ae * C46508 +
                        C46322 * (be * C46391 + C46323 * C46330 * C46355)))) /
        C46291;
    const double C2395 =
        (2 * C46322 * C46484 + C46322 * (C46484 + C46508 * C46540)) / C46271;
    const double C1310 =
        (C46372 + C46380 * C46457 + C46322 * (C46322 * C46467 + C46861 * ae) +
         C46322 * C46861 * ae) /
        C46271;
    const double C1700 = (C46322 * (2 * C46462 + C46323 * C46467) +
                          (2 * C46859 + C46323 * C46861) * ae) /
                         C46271;
    const double C1156 = 3 * (C46793 + C46482 * C46457) +
                         C46323 * (2 * C46859 + C46323 * C46861);
    const double C1293 = C46793 + C46482 * C46457 + C46861 * C46540;
    const double C1695 = C46322 * (2 * C46859 + C46323 * C46861);
    const double C7344 =
        2 * C46322 * C46861 + C46322 * (C46861 + C46622 * C46540);
    const double C2011 =
        (3 * (C46372 + C46322 * C46916 + C46914 * ae) +
         C46322 * (2 * C46916 +
                   C46322 * (C46380 + C46322 * (C46322 * C46391 + C46505 * ae) +
                             C46322 * C46505 * ae) +
                   C46917 * ae) +
         (2 * C46914 + C46322 * C46917) * ae) /
        C46271;
    const double C2000 = 3 * (C46793 + C46482 * C46540) +
                         C46322 * (2 * C46914 + C46322 * C46917);
    const double C47000 = C46322 * C46996;
    const double C46940 = C46938 + C46939;
    const double C47020 = C47016 + C47017;
    const double C28175 = C15950 * C7346;
    const double C39155 = C4748 * C7346;
    const double C43041 = C113 * C7346;
    const double C28171 = C15950 * C7343;
    const double C39151 = C4748 * C7343;
    const double C43039 = C113 * C7343;
    const double C6868 =
        (3 * (C46454 + C46322 * C46961 + C46959 * ae) +
         C46322 * (2 * C46961 +
                   C46322 * (C46567 + C46322 * (C46322 * C46679 + C46600 * ae) +
                             C46322 * C46600 * ae) +
                   C46962 * ae) +
         (2 * C46959 + C46322 * C46962) * ae) /
        C46271;
    const double C6865 = 3 * (C46854 + C46497 * C46540) +
                         C46322 * (2 * C46959 + C46322 * C46962);
    const double C47034 = C46322 * C47030;
    const double C46607 = C46414 + C46605;
    const double C46638 = C46498 + C46636;
    const double C46738 = 2 * C46732;
    const double C46736 = ae * C46732;
    const double C46988 = C46984 + C46986;
    const double C47054 = C46375 + C47052;
    const double C46359 = C46353 + C46358;
    const double C46473 = C46470 + C46471;
    const double C46556 = C46553 + C46554;
    const double C1438 = C47411 * C1172;
    const double C4959 = C47523 * C1172;
    const double C16161 = C47523 * C1172;
    const double C2292 = C47411 * C2016;
    const double C46592 = C46323 * C46590;
    const double C46642 = C46322 * C46590;
    const double C46672 = C46322 * C46668;
    const double C46692 = C46689 + C46690;
    const double C46737 = C46733 + C46734;
    const double C46761 = C46758 + C46759;
    const double C46398 = C46393 + C46397;
    const double C46474 = C46385 + C46472;
    const double C46593 = C46323 * C46591;
    const double C7348 =
        (2 * (C46322 * C46467 + C46861 * ae) +
         C46322 * (C46467 + C46322 * (C46322 * C46591 + C46622 * ae) +
                   C46322 * C46622 * ae) +
         (C46861 + C46622 * C46540) * ae) /
        C46271;
    const double C46693 = C46687 + C46691;
    const double C46437 = C46432 + C46436;
    const double C46520 = C46514 + C46518;
    const double C46557 = C46424 + C46555;
    const double C46623 = C46323 * C46620;
    const double C46643 = C46620 * C46540;
    const double C46673 = C46322 * C46670;
    const double C46712 = C46422 + C46709;
    const double C46739 = C46602 + C46735;
    const double C46762 = C46756 + C46760;
    const double C171 = C165 * C47428;
    const double C173 = C167 * C47428;
    const double C364 = C360 * C47428;
    const double C170 = C164 * C114;
    const double C11556 = C47411 * C1313;
    const double C25998 = C47523 * C1313;
    const double C26839 = C15945 * C1313;
    const double C36982 = C47523 * C1313;
    const double C37823 = C4743 * C1313;
    const double C11560 = C47411 * C1316;
    const double C26460 = C47523 * C1316;
    const double C26847 = C15945 * C1316;
    const double C37444 = C47523 * C1316;
    const double C37831 = C4743 * C1316;
    const double C12899 = C47411 * C2399;
    const double C27705 = C47523 * C2399;
    const double C28174 = C15945 * C2399;
    const double C38685 = C47523 * C2399;
    const double C39154 = C4743 * C2399;
    const double C11554 = C47411 * C1295;
    const double C25994 = C47523 * C1295;
    const double C26835 = C15945 * C1295;
    const double C36978 = C47523 * C1295;
    const double C37819 = C4743 * C1295;
    const double C11558 = C47411 * C1301;
    const double C26456 = C47523 * C1301;
    const double C26843 = C15945 * C1301;
    const double C37440 = C47523 * C1301;
    const double C37827 = C4743 * C1301;
    const double C12897 = C47411 * C2393;
    const double C27701 = C47523 * C2393;
    const double C28170 = C15945 * C2393;
    const double C38681 = C47523 * C2393;
    const double C39150 = C4743 * C2393;
    const double C10709 = C532 - C533;
    const double C10707 = C533 - C532;
    const double C11177 = C954 - C955;
    const double C11175 = C955 - C954;
    const double C12765 = C2287 - C2288;
    const double C12763 = C2288 - C2287;
    const double C10708 = C530 - C531;
    const double C10706 = C531 - C530;
    const double C11176 = C952 - C953;
    const double C11174 = C953 - C952;
    const double C12764 = C2285 - C2286;
    const double C12762 = C2286 - C2285;
    const double C12424 = C113 * C2009;
    const double C27711 = C15949 * C2009;
    const double C38691 = C4747 * C2009;
    const double C551 = C547 * C47428;
    const double C172 = C166 * C114;
    const double C363 = C359 * C114;
    const double C550 = C546 * C114;
    const double C133 = (4 * (2 * C46372 + C46330 * C46377) +
                         C46330 * (3 * C46377 + C46330 * C46387)) /
                        C46271;
    const double C319 =
        (2 * C46372 + C46330 * C46377 + C46387 * C46457) / C46271;
    const double C321 = (C46323 * (3 * C46377 + C46330 * C46387)) / C46271;
    const double C6150 = C4748 * C1167;
    const double C17336 = C15950 * C1167;
    const double C5854 = (4 * (2 * C46454 + C46323 * C46460) +
                          C46323 * (3 * C46460 + C46323 * C46579)) /
                         C46271;
    const double C132 = (4 * (2 * C46411 + C46330 * C46416) +
                         C46330 * (3 * C46416 + C46330 * C46426)) /
                        C46271;
    const double C505 =
        (2 * C46411 + C46330 * C46416 + C46426 * C46540) / C46271;
    const double C507 = (C46322 * (3 * C46416 + C46330 * C46426)) / C46271;
    const double C12427 = C47411 * C2010;
    const double C12411 = (4 * (2 * C46537 + C46322 * C46543) +
                           C46322 * (3 * C46543 + C46322 * C46661)) /
                          C46271;
    const double C46560 = C46529 * be;
    const double C46810 = C46330 * C46529;
    const double C46928 = C46323 * C46529;
    const double C1157 = 3 * (C46797 + C46488 * C46457) +
                         C46323 * (2 * C46864 + C46323 * C46866);
    const double C1294 = C46797 + C46488 * C46457 + C46866 * C46540;
    const double C1696 = C46322 * (2 * C46864 + C46323 * C46866);
    const double C2001 = 3 * (C46797 + C46488 * C46540) +
                         C46322 * (2 * C46922 + C46322 * C46925);
    const double C46945 = C46943 + C46944;
    const double C6866 = 3 * (C46859 + C46507 * C46540) +
                         C46322 * (2 * C46967 + C46322 * C46970);
    const double C47003 = C46999 + C47001;
    const double C46715 = C46713 * be;
    const double C47007 = C46323 * C46713;
    const double C23026 = 3 * (C46856 + C46604 * C46540) +
                          C46322 * (2 * C47018 + C46322 * C47021);
    const double C47037 = C47033 + C47035;
    const double C47057 = C46322 * C47055;
    const double C47185 = C47181 - C47184;
    const double C47528 = C47496 / C47171;
    const double C47194 = C47190 - C47193;
    const double C47542 = C47527 / C47175;
    const double C47267 = C47262 - C47266;
    const double C47532 = C47504 / C47171;
    const double C47274 = C47270 - C47273;
    const double C47546 = C47535 / C47175;
    const double C47309 = C47304 - C47308;
    const double C47534 = C47507 / C47171;
    const double C47316 = C47312 - C47315;
    const double C47548 = C47538 / C47175;
    const double C169 = C158 - C159;
    const double C362 = C349 - C350;
    const double C665 = C353 - C354;
    const double C6151 = C47523 * C1174;
    const double C17337 = C47523 * C1174;
    const double C5857 =
        (4 * (2 * C46458 + be * C46460 + C46323 * C46578) +
         be * (3 * C46460 + C46323 * C46579) +
         C46323 *
             (3 * C46578 + be * C46579 +
              C46323 * (2 * C46572 + be * C46574 +
                        C46323 * (C46346 + be * C46323 * C46383 +
                                  C46323 * (be * C46383 + C46323 * C46355))))) /
        C46291;
    const double C46989 = C46987 + C46982;
    const double C549 = C536 - C537;
    const double C10713 = C537 - C536;
    const double C778 = C540 - C541;
    const double C10975 = C541 - C540;
    const double C965 = C958 - C959;
    const double C11179 = C959 - C958;
    const double C168 = C156 - C157;
    const double C361 = C347 - C348;
    const double C664 = C351 - C352;
    const double C548 = C534 - C535;
    const double C10712 = C535 - C534;
    const double C777 = C538 - C539;
    const double C10974 = C539 - C538;
    const double C964 = C956 - C957;
    const double C11178 = C957 - C956;
    const double C2174 = C47411 * C1314;
    const double C5120 = C47523 * C1314;
    const double C7073 = C4743 * C1314;
    const double C16322 = C47523 * C1314;
    const double C18243 = C15945 * C1314;
    const double C1592 = C47411 * C1317;
    const double C5614 = C47523 * C1317;
    const double C6351 = C4743 * C1317;
    const double C16816 = C47523 * C1317;
    const double C17537 = C15945 * C1317;
    const double C1432 = C47411 * C1160;
    const double C4938 = C47523 * C1160;
    const double C6145 = C4743 * C1160;
    const double C16140 = C47523 * C1160;
    const double C17331 = C15945 * C1160;
    const double C2172 = C47411 * C1297;
    const double C5116 = C47523 * C1297;
    const double C7069 = C4743 * C1297;
    const double C16318 = C47523 * C1297;
    const double C18239 = C15945 * C1297;
    const double C1590 = C47411 * C1303;
    const double C5610 = C47523 * C1303;
    const double C6347 = C4743 * C1303;
    const double C16812 = C47523 * C1303;
    const double C17533 = C15945 * C1303;
    const double C12429 = C47411 * C2018;
    const double C46502 = C46501 + C46499;
    const double C43677 = C12423 - C12422;
    const double C12415 =
        (4 * (2 * C46541 + ae * C46543 + C46322 * C46660) +
         ae * (3 * C46543 + C46322 * C46661) +
         C46322 *
             (3 * C46660 + ae * C46661 +
              C46322 * (2 * C46654 + ae * C46656 +
                        C46322 * (C46346 + ae * C46322 * C46422 +
                                  C46322 * (ae * C46422 + C46322 * C46355))))) /
        C46291;
    const double C1162 =
        (2 * (C46323 * C46416 + C46797 * be) +
         C46323 * (C46416 + C46323 * C46490 + C46323 * C46488 * be) +
         (C46797 + C46488 * C46457) * be) /
        C46271;
    const double C1299 =
        (C46323 * C46416 + C46797 * be + C46490 * C46540) / C46271;
    const double C1305 =
        (C46322 * (C46416 + C46323 * C46490 + C46864 * be)) / C46271;
    const double C318 =
        (2 * C46411 + C46330 * C46416 +
         C46323 * (C46323 * C46426 + C46804 * be) + C46323 * C46804 * be) /
        C46271;
    const double C320 = (C46323 * (3 * C46416 + C46330 * C46426) +
                         (3 * C46797 + C46330 * C46804) * be) /
                        C46271;
    const double C506 =
        (2 * C46372 + C46330 * C46377 +
         C46322 * (C46322 * C46387 + C46804 * ae) + C46322 * C46804 * ae) /
        C46271;
    const double C508 = (C46322 * (3 * C46377 + C46330 * C46387) +
                         (3 * C46797 + C46330 * C46804) * ae) /
                        C46271;
    const double C942 = (C46322 * (C46323 * C46426 + C46804 * be)) / C46271;
    const double C943 =
        (C46322 * C46323 * C46387 + C46323 * C46804 * ae) / C46271;
    const double C120 = 4 * (2 * C46793 + C46330 * C46797) +
                        C46330 * (3 * C46797 + C46330 * C46804);
    const double C301 = 2 * C46793 + C46330 * C46797 + C46804 * C46457;
    const double C302 = C46323 * (3 * C46797 + C46330 * C46804);
    const double C488 = 2 * C46793 + C46330 * C46797 + C46804 * C46540;
    const double C489 = C46322 * (3 * C46797 + C46330 * C46804);
    const double C934 = C46322 * C46323 * C46804;
    const double C1426 =
        2 * C46323 * C46804 + C46323 * (C46804 + C46529 * C46457);
    const double C1584 = C46322 * (C46804 + C46529 * C46457);
    const double C2280 =
        2 * C46322 * C46804 + C46322 * (C46804 + C46529 * C46540);
    const double C2177 = C113 * C1300;
    const double C5136 = C4748 * C1300;
    const double C16338 = C15950 * C1300;
    const double C2175 = C113 * C1288;
    const double C5132 = C4748 * C1288;
    const double C16334 = C15950 * C1288;
    const double C2013 =
        (3 * (C46377 + C46322 * C46924 + C46922 * ae) +
         C46322 * (2 * C46924 +
                   C46322 * (C46385 + C46322 * (C46322 * C46396 + C46517 * ae) +
                             C46322 * C46517 * ae) +
                   C46925 * ae) +
         (2 * C46922 + C46322 * C46925) * ae) /
        C46271;
    const double C6870 =
        (3 * (C46462 + C46322 * C46969 + C46967 * ae) +
         C46322 * (2 * C46969 +
                   C46322 * (C46581 +
                             C46322 * (C46322 * C46323 * C46584 + C46618 * ae) +
                             C46322 * C46618 * ae) +
                   C46970 * ae) +
         (2 * C46967 + C46322 * C46970) * ae) /
        C46271;
    const double C46511 = C46419 + C46510;
    const double C7213 = C47523 * C2400;
    const double C12631 = C47411 * C2400;
    const double C18383 = C47523 * C2400;
    const double C7209 = C47523 * C2395;
    const double C12629 = C47411 * C2395;
    const double C18379 = C47523 * C2395;
    const double C7074 = C4748 * C1310;
    const double C11568 = C113 * C1310;
    const double C18244 = C15950 * C1310;
    const double C6352 = C4748 * C1700;
    const double C11702 = C113 * C1700;
    const double C17538 = C15950 * C1700;
    const double C6146 = C4748 * C1156;
    const double C17332 = C15950 * C1156;
    const double C7070 = C4748 * C1293;
    const double C11566 = C113 * C1293;
    const double C18240 = C15950 * C1293;
    const double C6348 = C4748 * C1695;
    const double C11700 = C113 * C1695;
    const double C17534 = C15950 * C1695;
    const double C12428 = C113 * C2011;
    const double C12426 = C113 * C2000;
    const double C47002 = C46380 + C47000;
    const double C6008 =
        (2 * C46454 + C46323 * C46460 +
         C46322 * (C46322 * C46579 + C46940 * ae) + C46322 * C46940 * ae) /
        C46271;
    const double C6486 = (C46322 * (3 * C46460 + C46323 * C46579) +
                          (3 * C46856 + C46323 * C46940) * ae) /
                         C46271;
    const double C5851 = 4 * (2 * C46854 + C46323 * C46856) +
                         C46323 * (3 * C46856 + C46323 * C46940);
    const double C6005 = 2 * C46854 + C46323 * C46856 + C46940 * C46540;
    const double C6483 = C46322 * (3 * C46856 + C46323 * C46940);
    const double C23372 =
        2 * C46322 * C46940 + C46322 * (C46940 + C46713 * C46540);
    const double C23028 =
        (3 * (C46460 + C46322 * C47020 + C47018 * ae) +
         C46322 * (2 * C47020 +
                   C46322 * (C46574 + C46322 * (C46322 * C46688 + C46708 * ae) +
                             C46322 * C46708 * ae) +
                   C47021 * ae) +
         (2 * C47018 + C46322 * C47021) * ae) /
        C46271;
    const double C27713 = C15950 * C6868;
    const double C38693 = C4748 * C6868;
    const double C44029 = C113 * C6868;
    const double C27709 = C15950 * C6865;
    const double C38689 = C4748 * C6865;
    const double C44027 = C113 * C6865;
    const double C47036 = C46567 + C47034;
    const double C46608 = C46607 + C46603;
    const double C6871 =
        (3 * (C46458 + ae * C46633 + C46322 * C46637) +
         ae * (2 * C46633 + C46322 * C46638) +
         C46322 *
             (2 * C46637 + ae * C46638 +
              C46322 * (C46572 + ae * C46322 * C46602 +
                        C46322 * (ae * C46602 +
                                  C46322 * (be * C46383 + C46323 * C46355))))) /
        C46291;
    const double C6867 = (3 * (C46479 + C46498 * C46540) +
                          C46322 * (2 * C46633 + C46322 * C46638)) /
                         C46271;
    const double C46740 = C46572 + C46736;
    const double C12409 = 4 * (2 * C46906 + C46322 * C46909) +
                          C46322 * (3 * C46909 + C46322 * C46988);
    const double C47056 = C47054 + C47049;
    const double C142 =
        (5 * (3 * C46348 + C46330 * C46359) +
         C46330 * (4 * C46359 +
                   C46330 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C331 =
        (2 * C46330 * C46341 + C46330 * C46348 + be * C46323 * C46387 +
         C46323 * (be * C46387 + C46323 * C46359)) /
        C46291;
    const double C332 = (be * (3 * C46377 + C46330 * C46387) +
                         C46323 * (3 * C46348 + C46330 * C46359)) /
                        C46291;
    const double C518 =
        (2 * C46330 * C46341 + C46330 * C46348 + ae * C46322 * C46426 +
         C46322 * (ae * C46426 + C46322 * C46359)) /
        C46291;
    const double C519 = (ae * (3 * C46416 + C46330 * C46426) +
                         C46322 * (3 * C46348 + C46330 * C46359)) /
                        C46291;
    const double C949 = (ae * (C46323 * C46426 +
                               (2 * C46330 * C46446 +
                                C46330 * (C46446 + C46337 * C46339 * C46338)) *
                                   be) +
                         C46322 * (be * C46387 + C46323 * C46359)) /
                        C46291;
    const double C1315 = (be * C46377 + C46323 * C46348 + ae * C46322 * C46490 +
                          C46322 * (ae * C46490 + C46322 * C46473)) /
                         C46291;
    const double C1318 =
        (ae * (C46416 + C46323 * C46490 + C46323 * C46488 * be) +
         C46322 * (C46348 + be * C46469 + C46323 * C46473)) /
        C46291;
    const double C46594 = C46589 + C46592;
    const double C46644 = C46641 + C46642;
    const double C46674 = C46671 + C46672;
    const double C46694 = C46323 * C46692;
    const double C46726 = C46322 * C46692;
    const double C46741 = C46322 * C46737;
    const double C46763 = C46322 * C46761;
    const double C46399 = C46330 * C46398;
    const double C1429 =
        (2 * (be * C46387 + C46323 * C46359) + be * (C46387 + C46398 * C46457) +
         C46323 * (C46359 + be * C46323 * C46398 +
                   C46323 * (be * C46398 +
                             C46323 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C1428 =
        (2 * C46323 * C46387 + C46323 * (C46387 + C46398 * C46457)) / C46271;
    const double C1586 = (C46322 * (C46387 + C46398 * C46457) +
                          (C46804 + C46529 * C46457) * ae) /
                         C46271;
    const double C2282 =
        (2 * (C46322 * C46387 + C46804 * ae) +
         C46322 * (C46387 + C46322 * (C46322 * C46398 + C46529 * ae) +
                   C46322 * C46529 * ae) +
         (C46804 + C46529 * C46540) * ae) /
        C46271;
    const double C1175 =
        (3 * (C46348 + be * C46469 + C46323 * C46473) +
         be * (2 * C46469 + C46323 * C46474) +
         C46323 * (2 * C46473 + be * C46474 +
                   C46323 * (C46357 + be * C46323 * C46396 +
                             C46323 * (be * C46396 +
                                       C46323 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C1169 = (3 * (C46377 + C46385 * C46457) +
                          C46323 * (2 * C46469 + C46323 * C46474)) /
                         C46271;
    const double C1312 =
        (C46377 + C46385 * C46457 + C46322 * (C46322 * C46474 + C46866 * ae) +
         C46322 * C46866 * ae) /
        C46271;
    const double C1702 = (C46322 * (2 * C46469 + C46323 * C46474) +
                          (2 * C46864 + C46323 * C46866) * ae) /
                         C46271;
    const double C46595 = C46587 + C46593;
    const double C46695 = C46323 * C46693;
    const double C23374 =
        (2 * (C46322 * C46579 + C46940 * ae) +
         C46322 * (C46579 + C46322 * (C46322 * C46693 + C46713 * ae) +
                   C46322 * C46713 * ae) +
         (C46940 + C46713 * C46540) * ae) /
        C46271;
    const double C46438 = C46330 * C46437;
    const double C46559 = C46323 * C46437;
    const double C1587 =
        (ae * (C46426 + C46323 * (C46323 * C46437 + C46529 * be) +
               C46323 * C46529 * be) +
         C46322 * (C46359 + be * C46323 * C46398 +
                   C46323 * (be * C46398 +
                             C46323 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C2283 =
        (2 * (ae * C46426 + C46322 * C46359) + ae * (C46426 + C46437 * C46540) +
         C46322 * (C46359 + ae * C46322 * C46437 +
                   C46322 * (ae * C46437 +
                             C46322 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C2281 =
        (2 * C46322 * C46426 + C46322 * (C46426 + C46437 * C46540)) / C46271;
    const double C46522 = C46323 * C46520;
    const double C2401 =
        (2 * (ae * C46490 + C46322 * C46473) + ae * (C46490 + C46520 * C46540) +
         C46322 * (C46473 + ae * C46322 * C46520 +
                   C46322 * (ae * C46520 +
                             C46322 * (be * C46396 +
                                       C46323 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C2397 =
        (2 * C46322 * C46490 + C46322 * (C46490 + C46520 * C46540)) / C46271;
    const double C2019 =
        (3 * (C46348 + ae * C46552 + C46322 * C46556) +
         ae * (2 * C46552 + C46322 * C46557) +
         C46322 * (2 * C46556 + ae * C46557 +
                   C46322 * (C46357 + ae * C46322 * C46435 +
                             C46322 * (ae * C46435 +
                                       C46322 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C2012 = (3 * (C46416 + C46424 * C46540) +
                          C46322 * (2 * C46552 + C46322 * C46557)) /
                         C46271;
    const double C46625 = C46430 + C46623;
    const double C46645 = C46508 + C46643;
    const double C46675 = C46669 + C46673;
    const double C46714 = C46712 + C46707;
    const double C46742 = C46322 * C46739;
    const double C46764 = C46322 * C46762;
    const double C176 = C170 + C171;
    const double C43036 = C11557 - C11556;
    const double C44026 = C12899 - C12898;
    const double C43035 = C11555 - C11554;
    const double C44025 = C12897 - C12896;
    const double C43678 = C12425 - C12424;
    const double C177 = C172 + C173;
    const double C367 = C363 + C364;
    const double C554 = C550 + C551;
    const double C162 = C113 * C133;
    const double C357 = C113 * C319;
    const double C5274 = C4748 * C319;
    const double C16476 = C15950 * C319;
    const double C668 = C113 * C321;
    const double C4780 = C4748 * C321;
    const double C15982 = C15950 * C321;
    const double C161 = C47411 * C132;
    const double C543 = C47411 * C505;
    const double C780 = C47411 * C507;
    const double C43680 = C47411 * C12411;
    const double C46811 = C46809 + C46810;
    const double C2168 =
        (C46323 * C46387 + C46322 * (C46322 * C46323 * C46398 + C46928 * ae) +
         C46322 * C46928 * ae) /
        C46271;
    const double C2166 = C46323 * C46804 + C46928 * C46540;
    const double C5852 = 4 * (2 * C46859 + C46323 * C46861) +
                         C46323 * (3 * C46861 + C46323 * C46945);
    const double C6006 = 2 * C46859 + C46323 * C46861 + C46945 * C46540;
    const double C6484 = C46322 * (3 * C46861 + C46323 * C46945);
    const double C12410 = 4 * (2 * C46914 + C46322 * C46917) +
                          C46322 * (3 * C46917 + C46322 * C47003);
    const double C47008 = C47006 + C47007;
    const double C27694 = 4 * (2 * C46959 + C46322 * C46962) +
                          C46322 * (3 * C46962 + C46322 * C47037);
    const double C47059 = C47047 + C47057;
    const double C47458 = C47185 * C47173;
    const double C47498 = C47463 + C47185;
    const double C47466 = C47194 / C47175;
    const double C47462 = C47194 * C47173;
    const double C655 = C47542 - (C47185 * C47176) / C47171;
    const double C47476 = C47267 * C47261;
    const double C47513 = C47478 + C47267;
    const double C47480 = C47274 / C47175;
    const double C47477 = C47274 * C47261;
    const double C1420 = C47546 - (C47267 * C47263) / C47171;
    const double C47482 = C47309 * C47303;
    const double C47519 = C47484 + C47309;
    const double C47486 = C47316 / C47175;
    const double C47483 = C47316 * C47303;
    const double C2276 = C47548 - (C47309 * C47305) / C47171;
    const double C175 = C169 * C47428;
    const double C366 = C362 * C47428;
    const double C671 = C665 * C47428;
    const double C12412 =
        (4 * (2 * C46908 + C46322 * C46989 + C46909 * ae) +
         C46322 *
             (3 * C46989 +
              C46322 *
                  (2 * C46981 +
                   C46322 * (C46375 + C46322 * (C46322 * C46383 + C46448 * ae) +
                             C46322 * C46448 * ae) +
                   C46983 * ae) +
              C46988 * ae) +
         (3 * C46909 + C46322 * C46988) * ae) /
        C46271;
    const double C553 = C549 * C47428;
    const double C784 = C778 * C47428;
    const double C967 = C965 * C47428;
    const double C174 = C168 * C114;
    const double C365 = C361 * C114;
    const double C670 = C664 * C114;
    const double C552 = C548 * C114;
    const double C783 = C777 * C114;
    const double C966 = C964 * C114;
    const double C12627 = C2173 - C2174;
    const double C12625 = C2174 - C2173;
    const double C11901 = C1591 - C1592;
    const double C11899 = C1592 - C1591;
    const double C12626 = C2171 - C2172;
    const double C12624 = C2172 - C2171;
    const double C11900 = C1589 - C1590;
    const double C11898 = C1590 - C1589;
    const double C1319 =
        (C46334 + be * C46454 + C46323 * C46458 + ae * C46322 * C46502 +
         C46322 * (ae * C46502 +
                   C46322 * (C46341 + be * C46323 * C46375 +
                             C46323 * (be * C46375 + C46323 * C46346)))) /
        C46291;
    const double C1703 =
        (ae * (2 * C46479 + C46323 * C46502 + (C46477 + C46446 * C46457) * be) +
         C46322 * (2 * C46458 + be * C46460 +
                   C46323 * (C46341 + be * C46323 * C46375 +
                             C46323 * (be * C46375 + C46323 * C46346)))) /
        C46291;
    const double C1164 =
        (3 * (C46407 + C46323 * C46479 + C46854 * be) +
         C46323 * (2 * C46479 + C46323 * C46502 + C46856 * be) +
         (2 * C46854 + C46323 * C46856) * be) /
        C46271;
    const double C1307 =
        (C46407 + C46323 * C46479 + C46854 * be + C46502 * C46540) / C46271;
    const double C1697 =
        (C46322 * (2 * C46479 + C46323 * C46502 + C46856 * be)) / C46271;
    const double C43682 = C47411 * C12415;
    const double C1436 = C47411 * C1162;
    const double C4955 = C47523 * C1162;
    const double C16157 = C47523 * C1162;
    const double C2176 = C47411 * C1299;
    const double C5133 = C47523 * C1299;
    const double C16335 = C47523 * C1299;
    const double C1594 = C47411 * C1305;
    const double C5619 = C47523 * C1305;
    const double C16821 = C47523 * C1305;
    const double C356 = C47411 * C318;
    const double C5271 = C47523 * C318;
    const double C16473 = C47523 * C318;
    const double C667 = C47411 * C320;
    const double C4777 = C47523 * C320;
    const double C15979 = C47523 * C320;
    const double C544 = C113 * C506;
    const double C781 = C113 * C508;
    const double C961 = C47411 * C942;
    const double C5409 = C47523 * C942;
    const double C16611 = C47523 * C942;
    const double C962 = C113 * C943;
    const double C5412 = C4748 * C943;
    const double C16614 = C15950 * C943;
    const double C160 = C113 * C120;
    const double C355 = C113 * C301;
    const double C5270 = C4748 * C301;
    const double C16472 = C15950 * C301;
    const double C666 = C113 * C302;
    const double C4776 = C4748 * C302;
    const double C15978 = C15950 * C302;
    const double C542 = C113 * C488;
    const double C779 = C113 * C489;
    const double C960 = C113 * C934;
    const double C5408 = C4748 * C934;
    const double C16610 = C15950 * C934;
    const double C46512 = C46511 + C46509;
    const double C47004 = C47002 + C46997;
    const double C26857 = C15950 * C6008;
    const double C37841 = C4748 * C6008;
    const double C43387 = C113 * C6008;
    const double C27319 = C15950 * C6486;
    const double C38303 = C4748 * C6486;
    const double C26853 = C15950 * C6005;
    const double C37837 = C4748 * C6005;
    const double C43385 = C113 * C6005;
    const double C27315 = C15950 * C6483;
    const double C38299 = C4748 * C6483;
    const double C47038 = C47036 + C47031;
    const double C46609 = C46323 * C46608;
    const double C46699 = 3 * C46608;
    const double C46725 = ae * C46608;
    const double C46724 = C46322 * C46608;
    const double C7349 =
        (2 * (ae * C46502 + C46322 * C46578) + ae * (C46502 + C46608 * C46540) +
         C46322 *
             (C46578 + ae * C46322 * C46608 +
              C46322 * (ae * C46608 +
                        C46322 * (C46346 + be * C46323 * C46383 +
                                  C46323 * (be * C46383 + C46323 * C46355))))) /
        C46291;
    const double C7345 =
        (2 * C46322 * C46502 + C46322 * (C46502 + C46608 * C46540)) / C46271;
    const double C27714 = C47523 * C6871;
    const double C38694 = C47523 * C6871;
    const double C44030 = C47411 * C6871;
    const double C27710 = C47523 * C6867;
    const double C38690 = C47523 * C6867;
    const double C44028 = C47411 * C6867;
    const double C43679 = C113 * C12409;
    const double C47058 = C46322 * C47056;
    const double C358 = C47411 * C331;
    const double C5275 = C47523 * C331;
    const double C16477 = C47523 * C331;
    const double C669 = C47411 * C332;
    const double C4781 = C47523 * C332;
    const double C15983 = C47523 * C332;
    const double C545 = C47411 * C518;
    const double C782 = C47411 * C519;
    const double C963 = C47411 * C949;
    const double C5413 = C47523 * C949;
    const double C16615 = C47523 * C949;
    const double C2178 = C47411 * C1315;
    const double C5137 = C47523 * C1315;
    const double C16339 = C47523 * C1315;
    const double C1596 = C47411 * C1318;
    const double C5623 = C47523 * C1318;
    const double C16825 = C47523 * C1318;
    const double C46696 = C46684 + C46694;
    const double C46743 = C46740 + C46741;
    const double C46765 = C46753 + C46763;
    const double C46400 = C46390 + C46399;
    const double C5858 =
        (4 * (2 * C46466 + be * C46467 + C46323 * C46594) +
         be * (3 * C46467 + C46323 * C46595) +
         C46323 * (3 * C46594 + be * C46595 +
                   C46323 * (2 * C46590 + be * C46591 +
                             C46323 * (C46583 + be * C46323 * C46584 +
                                       C46323 * (be * C46584 +
                                                 C46323 * C46330 *
                                                     std::pow(C46326, 8) *
                                                     bs[8] * C46328))))) /
        C46291;
    const double C5856 = (4 * (2 * C46462 + C46323 * C46467) +
                          C46323 * (3 * C46467 + C46323 * C46595)) /
                         C46271;
    const double C6010 =
        (2 * C46462 + C46323 * C46467 +
         C46322 * (C46322 * C46595 + C46945 * ae) + C46322 * C46945 * ae) /
        C46271;
    const double C6488 = (C46322 * (3 * C46467 + C46323 * C46595) +
                          (3 * C46861 + C46323 * C46945) * ae) /
                         C46271;
    const double C46697 = C46682 + C46695;
    const double C46439 = C46429 + C46438;
    const double C46561 = C46559 + C46560;
    const double C46523 = C46424 + C46522;
    const double C46626 = C46625 + C46621;
    const double C6872 =
        (3 * (C46466 + ae * C46640 + C46322 * C46644) +
         ae * (2 * C46640 + C46322 * C46645) +
         C46322 * (2 * C46644 + ae * C46645 +
                   C46322 * (C46590 + ae * C46322 * C46620 +
                             C46322 * (ae * C46620 +
                                       C46322 * (be * C46584 +
                                                 C46323 * C46330 *
                                                     std::pow(C46326, 8) *
                                                     bs[8] * C46328))))) /
        C46291;
    const double C6869 = (3 * (C46484 + C46508 * C46540) +
                          C46322 * (2 * C46640 + C46322 * C46645)) /
                         C46271;
    const double C12416 =
        (4 * (2 * C46549 + ae * C46550 + C46322 * C46674) +
         ae * (3 * C46550 + C46322 * C46675) +
         C46322 * (3 * C46674 + ae * C46675 +
                   C46322 * (2 * C46668 + ae * C46670 +
                             C46322 * (C46583 + ae * C46322 * C46614 +
                                       C46322 * (ae * C46614 +
                                                 C46322 * C46330 *
                                                     std::pow(C46326, 8) *
                                                     bs[8] * C46328))))) /
        C46291;
    const double C12413 = (4 * (2 * C46545 + C46322 * C46550) +
                           C46322 * (3 * C46550 + C46322 * C46675)) /
                          C46271;
    const double C46716 = C46323 * C46714;
    const double C46727 = C46714 * C46540;
    const double C46744 = C46738 + C46742;
    const double C46766 = C46751 + C46764;
    const double C121 = 5 * (3 * C46797 + C46330 * C46804) +
                        C46330 * (4 * C46804 + C46330 * C46811);
    const double C303 = 3 * C46797 + C46330 * C46804 + C46811 * C46457;
    const double C490 = 3 * C46797 + C46330 * C46804 + C46811 * C46540;
    const double C659 = C46323 * (4 * C46804 + C46330 * C46811);
    const double C772 = C46322 * (4 * C46804 + C46330 * C46811);
    const double C935 = C46322 * C46323 * C46811;
    const double C22280 = 5 * (3 * C46856 + C46323 * C46940) +
                          C46323 * (4 * C46940 + C46323 * C47008);
    const double C22394 = 3 * C46856 + C46323 * C46940 + C47008 * C46540;
    const double C22740 = C46322 * (4 * C46940 + C46323 * C47008);
    const double C43670 = 5 * (3 * C46909 + C46322 * C46988) +
                          C46322 * (4 * C46988 + C46322 * C47059);
    const double C47494 = C47458 / C47171;
    const double C47529 = C47498 / C47175;
    const double C47530 = C47500 + C47466;
    const double C657 = C47466 - C47192 / C47189;
    const double C47497 = C47462 / C47171;
    const double C47510 = C47476 / C47171;
    const double C47536 = C47513 / C47175;
    const double C47537 = C47514 + C47480;
    const double C1422 = C47480 - C47272 / C47189;
    const double C47512 = C47477 / C47171;
    const double C47516 = C47482 / C47171;
    const double C47539 = C47519 / C47175;
    const double C47540 = C47520 + C47486;
    const double C2278 = C47486 - C47314 / C47189;
    const double C47518 = C47483 / C47171;
    const double C43681 = C113 * C12412;
    const double C178 = C174 + C175;
    const double C368 = C365 + C366;
    const double C672 = C670 + C671;
    const double C555 = C552 + C553;
    const double C785 = C783 + C784;
    const double C968 = C966 + C967;
    const double C11565 = C47411 * C1319;
    const double C26856 = C15945 * C1319;
    const double C26841 = C47523 * C1319;
    const double C37840 = C4743 * C1319;
    const double C37825 = C47523 * C1319;
    const double C12035 = C47411 * C1703;
    const double C26849 = C47523 * C1703;
    const double C27318 = C15945 * C1703;
    const double C37833 = C47523 * C1703;
    const double C38302 = C4743 * C1703;
    const double C11563 = C47411 * C1307;
    const double C26852 = C15945 * C1307;
    const double C26837 = C47523 * C1307;
    const double C37836 = C4743 * C1307;
    const double C37821 = C47523 * C1307;
    const double C12033 = C47411 * C1697;
    const double C26845 = C47523 * C1697;
    const double C27314 = C15945 * C1697;
    const double C37829 = C47523 * C1697;
    const double C38298 = C4743 * C1697;
    const double C1320 =
        (C46451 + be * C46462 + C46323 * C46466 + ae * C46322 * C46512 +
         C46322 *
             (ae * C46512 +
              C46322 * (C46350 + be * C46323 * C46391 +
                        C46323 * (be * C46391 + C46323 * C46330 * C46355)))) /
        C46291;
    const double C1704 =
        (ae * (2 * C46484 + C46323 * C46512 + (C46482 + C46505 * C46457) * be) +
         C46322 *
             (2 * C46466 + be * C46467 +
              C46323 * (C46350 + be * C46323 * C46391 +
                        C46323 * (be * C46391 + C46323 * C46330 * C46355)))) /
        C46291;
    const double C1166 =
        (3 * (C46411 + C46323 * C46484 + C46859 * be) +
         C46323 * (2 * C46484 + C46323 * C46512 + C46861 * be) +
         (2 * C46859 + C46323 * C46861) * be) /
        C46271;
    const double C1309 =
        (C46411 + C46323 * C46484 + C46859 * be + C46512 * C46540) / C46271;
    const double C1699 =
        (C46322 * (2 * C46484 + C46323 * C46512 + C46861 * be)) / C46271;
    const double C12414 =
        (4 * (2 * C46916 + C46322 * C47004 + C46917 * ae) +
         C46322 *
             (3 * C47004 +
              C46322 *
                  (2 * C46996 +
                   C46322 * (C46391 + C46322 * (C46322 * C46584 + C46615 * ae) +
                             C46322 * C46615 * ae) +
                   C46998 * ae) +
              C47003 * ae) +
         (3 * C46917 + C46322 * C47003) * ae) /
        C46271;
    const double C27696 =
        (4 * (2 * C46961 + C46322 * C47038 + C46962 * ae) +
         C46322 * (3 * C47038 +
                   C46322 * (2 * C47030 +
                             C46322 * (C46679 +
                                       C46322 * (C46322 * C46323 * C46394 +
                                                 C46703 * ae) +
                                       C46322 * C46703 * ae) +
                             C47032 * ae) +
                   C47037 * ae) +
         (3 * C46962 + C46322 * C47037) * ae) /
        C46271;
    const double C46610 = C46597 + C46609;
    const double C46728 = C46725 + C46726;
    const double C28176 = C47523 * C7349;
    const double C39156 = C47523 * C7349;
    const double C43042 = C47411 * C7349;
    const double C28172 = C47523 * C7345;
    const double C39152 = C47523 * C7345;
    const double C43040 = C47411 * C7345;
    const double C47060 = C47041 + C47058;
    const double C333 =
        (3 * C46348 + C46330 * C46359 + be * C46323 * C46400 +
         C46323 * (be * C46400 +
                   C46323 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C662 =
        (be * (4 * C46387 + C46330 * C46400) +
         C46323 * (4 * C46359 +
                   C46330 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C135 = (5 * (3 * C46377 + C46330 * C46387) +
                         C46330 * (4 * C46387 + C46330 * C46400)) /
                        C46271;
    const double C323 =
        (3 * C46377 + C46330 * C46387 + C46400 * C46457) / C46271;
    const double C510 =
        (3 * C46377 + C46330 * C46387 +
         C46322 * (C46322 * C46400 + C46811 * ae) + C46322 * C46811 * ae) /
        C46271;
    const double C661 = (C46323 * (4 * C46387 + C46330 * C46400)) / C46271;
    const double C774 = (C46322 * (4 * C46387 + C46330 * C46400) +
                         (4 * C46804 + C46330 * C46811) * ae) /
                        C46271;
    const double C945 =
        (C46322 * C46323 * C46400 + C46323 * C46811 * ae) / C46271;
    const double C22283 =
        (5 * (3 * C46578 + be * C46579 + C46323 * C46696) +
         be * (4 * C46579 + C46323 * C46697) +
         C46323 *
             (4 * C46696 + be * C46697 +
              C46323 *
                  (3 * C46692 + be * C46693 +
                   C46323 * (2 * C46686 + be * C46688 +
                             C46323 * (C46355 + be * C46323 * C46394 +
                                       C46323 * (be * C46394 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C22282 = (5 * (3 * C46460 + C46323 * C46579) +
                           C46323 * (4 * C46579 + C46323 * C46697)) /
                          C46271;
    const double C22396 =
        (3 * C46460 + C46323 * C46579 +
         C46322 * (C46322 * C46697 + C47008 * ae) + C46322 * C47008 * ae) /
        C46271;
    const double C22742 = (C46322 * (4 * C46579 + C46323 * C46697) +
                           (4 * C46940 + C46323 * C47008) * ae) /
                          C46271;
    const double C520 =
        (3 * C46348 + C46330 * C46359 + ae * C46322 * C46439 +
         C46322 * (ae * C46439 +
                   C46322 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C775 =
        (ae * (4 * C46426 + C46330 * C46439) +
         C46322 * (4 * C46359 +
                   C46330 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C950 =
        (ae * (C46323 * C46439 +
               (3 * (C46446 + C46448 * C46338) +
                C46330 * (2 * C46330 * C46448 +
                          C46330 * (C46448 + C46344 * C46343 * C46338))) *
                   be) +
         C46322 * (be * C46400 +
                   C46323 * (3 * C46357 +
                             C46330 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C134 = (5 * (3 * C46416 + C46330 * C46426) +
                         C46330 * (4 * C46426 + C46330 * C46439)) /
                        C46271;
    const double C322 =
        (3 * C46416 + C46330 * C46426 +
         C46323 * (C46323 * C46439 + C46811 * be) + C46323 * C46811 * be) /
        C46271;
    const double C509 =
        (3 * C46416 + C46330 * C46426 + C46439 * C46540) / C46271;
    const double C660 = (C46323 * (4 * C46426 + C46330 * C46439) +
                         (4 * C46804 + C46330 * C46811) * be) /
                        C46271;
    const double C773 = (C46322 * (4 * C46426 + C46330 * C46439)) / C46271;
    const double C944 = (C46322 * (C46323 * C46439 + C46811 * be)) / C46271;
    const double C2169 =
        (be * C46387 + C46323 * C46359 + ae * C46322 * C46561 +
         C46322 * (ae * C46561 +
                   C46322 * (be * C46398 +
                             C46323 * (2 * C46330 * C46355 +
                                       C46330 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C1427 =
        (2 * (C46323 * C46426 + C46804 * be) +
         C46323 * (C46426 + C46323 * C46561 + C46323 * C46529 * be) +
         (C46804 + C46529 * C46457) * be) /
        C46271;
    const double C1585 =
        (C46322 * (C46426 + C46323 * C46561 + C46323 * C46529 * be)) / C46271;
    const double C2167 =
        (C46323 * C46426 + C46804 * be + C46561 * C46540) / C46271;
    const double C46524 = C46523 + C46521;
    const double C46627 = C46323 * C46626;
    const double C7350 =
        (2 * (ae * C46512 + C46322 * C46594) + ae * (C46512 + C46626 * C46540) +
         C46322 * (C46594 + ae * C46322 * C46626 +
                   C46322 * (ae * C46626 +
                             C46322 * (C46583 + be * C46323 * C46584 +
                                       C46323 * (be * C46584 +
                                                 C46323 * C46330 *
                                                     std::pow(C46326, 8) *
                                                     bs[8] * C46328))))) /
        C46291;
    const double C7347 =
        (2 * C46322 * C46512 + C46322 * (C46512 + C46626 * C46540)) / C46271;
    const double C46717 = C46700 + C46716;
    const double C46729 = C46608 + C46727;
    const double C27697 =
        (4 * (2 * C46637 + ae * C46638 + C46322 * C46743) +
         ae * (3 * C46638 + C46322 * C46744) +
         C46322 *
             (3 * C46743 + ae * C46744 +
              C46322 *
                  (2 * C46737 + ae * C46739 +
                   C46322 * (C46686 + ae * C46322 * C46706 +
                             C46322 * (ae * C46706 +
                                       C46322 * (be * C46394 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C27695 = (4 * (2 * C46633 + C46322 * C46638) +
                           C46322 * (3 * C46638 + C46322 * C46744)) /
                          C46271;
    const double C43673 =
        (5 * (3 * C46660 + ae * C46661 + C46322 * C46765) +
         ae * (4 * C46661 + C46322 * C46766) +
         C46322 *
             (4 * C46765 + ae * C46766 +
              C46322 *
                  (3 * C46761 + ae * C46762 +
                   C46322 * (2 * C46755 + ae * C46757 +
                             C46322 * (C46355 + ae * C46322 * C46433 +
                                       C46322 * (ae * C46433 +
                                                 C46322 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C43671 = (5 * (3 * C46543 + C46322 * C46661) +
                           C46322 * (4 * C46661 + C46322 * C46766)) /
                          C46271;
    const double C47550 = C47494 + C47542;
    const double C656 = C47529 - (C47194 * C47176) / C47171;
    const double C111 = C47530 / C47175 - C47192 / C47501;
    const double C47543 = C47497 + C47529;
    const double C47551 = C47510 + C47546;
    const double C1421 = C47536 - (C47274 * C47263) / C47171;
    const double C1149 = C47537 / C47175 - C47272 / C47501;
    const double C47547 = C47512 + C47536;
    const double C47552 = C47516 + C47548;
    const double C2277 = C47539 - (C47316 * C47305) / C47171;
    const double C1994 = C47540 / C47175 - C47314 / C47501;
    const double C47549 = C47518 + C47539;
    const double C43038 = C11565 - C11564;
    const double C43037 = C11563 - C11562;
    const double C7075 = C47523 * C1320;
    const double C11569 = C47411 * C1320;
    const double C18245 = C47523 * C1320;
    const double C6353 = C47523 * C1704;
    const double C11703 = C47411 * C1704;
    const double C17539 = C47523 * C1704;
    const double C6147 = C47523 * C1166;
    const double C17333 = C47523 * C1166;
    const double C7071 = C47523 * C1309;
    const double C11567 = C47411 * C1309;
    const double C18241 = C47523 * C1309;
    const double C6349 = C47523 * C1699;
    const double C11701 = C47411 * C1699;
    const double C17535 = C47523 * C1699;
    const double C46611 = C46610 + C46606;
    const double C47061 = C47060 + C47045;
    const double C1321 =
        (C46348 + be * C46469 + C46323 * C46473 + ae * C46322 * C46524 +
         C46322 * (ae * C46524 +
                   C46322 * (C46357 + be * C46323 * C46396 +
                             C46323 * (be * C46396 +
                                       C46323 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C1705 =
        (ae * (2 * C46490 + C46323 * C46524 + (C46488 + C46517 * C46457) * be) +
         C46322 * (2 * C46473 + be * C46474 +
                   C46323 * (C46357 + be * C46323 * C46396 +
                             C46323 * (be * C46396 +
                                       C46323 * (C46355 + std::pow(C46326, 8) *
                                                              bs[8] * C46328 *
                                                              C46338))))) /
        C46291;
    const double C1168 =
        (3 * (C46416 + C46323 * C46490 + C46864 * be) +
         C46323 * (2 * C46490 + C46323 * C46524 + C46866 * be) +
         (2 * C46864 + C46323 * C46866) * be) /
        C46271;
    const double C1311 =
        (C46416 + C46323 * C46490 + C46864 * be + C46524 * C46540) / C46271;
    const double C1701 =
        (C46322 * (2 * C46490 + C46323 * C46524 + C46866 * be)) / C46271;
    const double C46628 = C46613 + C46627;
    const double C46718 = C46717 + C46710;
    const double C23029 =
        (3 * (C46578 + ae * C46724 + C46322 * C46728) +
         ae * (2 * C46724 + C46322 * C46729) +
         C46322 *
             (2 * C46728 + ae * C46729 +
              C46322 *
                  (C46692 + ae * C46322 * C46714 +
                   C46322 * (ae * C46714 +
                             C46322 * (C46355 + be * C46323 * C46394 +
                                       C46323 * (be * C46394 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C23027 = (3 * (C46502 + C46608 * C46540) +
                           C46322 * (2 * C46724 + C46322 * C46729)) /
                          C46271;
    const double C108 =
        (C47541 + 2 * C47185) / C47175 - (C47550 * C47176) / C47171;
    const double C109 =
        (C47528 + 2 * C47194 + C47550) / C47175 - (C47543 * C47176) / C47171;
    const double C110 = (C47499 + C47191 / C47171 + C47543) / C47175 -
                        (C47530 * C47176) / C47171;
    const double C1146 =
        (C47544 + 2 * C47267) / C47175 - (C47551 * C47263) / C47171;
    const double C1147 =
        (C47532 + 2 * C47274 + C47551) / C47175 - (C47547 * C47263) / C47171;
    const double C1148 = (C47505 + C47271 / C47171 + C47547) / C47175 -
                         (C47537 * C47263) / C47171;
    const double C1991 =
        (C47545 + 2 * C47309) / C47175 - (C47552 * C47305) / C47171;
    const double C1992 =
        (C47534 + 2 * C47316 + C47552) / C47175 - (C47549 * C47305) / C47171;
    const double C1993 = (C47508 + C47313 / C47171 + C47549) / C47175 -
                         (C47540 * C47305) / C47171;
    const double C6011 =
        (2 * C46458 + be * C46460 + C46323 * C46578 + ae * C46322 * C46611 +
         C46322 *
             (ae * C46611 +
              C46322 * (2 * C46572 + be * C46574 +
                        C46323 * (C46346 + be * C46323 * C46383 +
                                  C46323 * (be * C46383 + C46323 * C46355))))) /
        C46291;
    const double C6489 =
        (ae * (3 * C46502 + C46323 * C46611 +
               (2 * C46497 + C46323 * C46604) * be) +
         C46322 *
             (3 * C46578 + be * C46579 +
              C46323 * (2 * C46572 + be * C46574 +
                        C46323 * (C46346 + be * C46323 * C46383 +
                                  C46323 * (be * C46383 + C46323 * C46355))))) /
        C46291;
    const double C5853 =
        (4 * (2 * C46479 + C46323 * C46502 + C46856 * be) +
         C46323 * (3 * C46502 + C46323 * C46611 + C46940 * be) +
         (3 * C46856 + C46323 * C46940) * be) /
        C46271;
    const double C6007 =
        (2 * C46479 + C46323 * C46502 + C46856 * be + C46611 * C46540) / C46271;
    const double C6485 =
        (C46322 * (3 * C46502 + C46323 * C46611 + C46940 * be)) / C46271;
    const double C43672 =
        (5 * (3 * C46989 + C46322 * C47061 + C46988 * ae) +
         C46322 * (4 * C47061 +
                   C46322 * (3 * C47056 +
                             C46322 * (2 * C47048 +
                                       C46322 * (C46383 +
                                                 C46322 * (C46322 * C46394 +
                                                           C46515 * ae) +
                                                 C46322 * C46515 * ae) +
                                       C47050 * ae) +
                             C47055 * ae) +
                   C47059 * ae) +
         (4 * C46988 + C46322 * C47059) * ae) /
        C46271;
    const double C46629 = C46628 + C46624;
    const double C46719 = C46323 * C46718;
    const double C23375 =
        (2 * (ae * C46611 + C46322 * C46696) + ae * (C46611 + C46718 * C46540) +
         C46322 *
             (C46696 + ae * C46322 * C46718 +
              C46322 *
                  (ae * C46718 +
                   C46322 * (2 * C46686 + be * C46688 +
                             C46323 * (C46355 + be * C46323 * C46394 +
                                       C46323 * (be * C46394 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C23373 =
        (2 * C46322 * C46611 + C46322 * (C46611 + C46718 * C46540)) / C46271;
    const double C26858 = C47523 * C6011;
    const double C37842 = C47523 * C6011;
    const double C43388 = C47411 * C6011;
    const double C27320 = C47523 * C6489;
    const double C38304 = C47523 * C6489;
    const double C26854 = C47523 * C6007;
    const double C37838 = C47523 * C6007;
    const double C43386 = C47411 * C6007;
    const double C27316 = C47523 * C6485;
    const double C38300 = C47523 * C6485;
    const double C6012 =
        (2 * C46466 + be * C46467 + C46323 * C46594 + ae * C46322 * C46629 +
         C46322 * (ae * C46629 +
                   C46322 * (2 * C46590 + be * C46591 +
                             C46323 * (C46583 + be * C46323 * C46584 +
                                       C46323 * (be * C46584 +
                                                 C46323 * C46330 *
                                                     std::pow(C46326, 8) *
                                                     bs[8] * C46328))))) /
        C46291;
    const double C6490 =
        (ae * (3 * C46512 + C46323 * C46629 +
               (2 * C46507 + C46323 * C46622) * be) +
         C46322 * (3 * C46594 + be * C46595 +
                   C46323 * (2 * C46590 + be * C46591 +
                             C46323 * (C46583 + be * C46323 * C46584 +
                                       C46323 * (be * C46584 +
                                                 C46323 * C46330 *
                                                     std::pow(C46326, 8) *
                                                     bs[8] * C46328))))) /
        C46291;
    const double C5855 =
        (4 * (2 * C46484 + C46323 * C46512 + C46861 * be) +
         C46323 * (3 * C46512 + C46323 * C46629 + C46945 * be) +
         (3 * C46861 + C46323 * C46945) * be) /
        C46271;
    const double C6009 =
        (2 * C46484 + C46323 * C46512 + C46861 * be + C46629 * C46540) / C46271;
    const double C6487 =
        (C46322 * (3 * C46512 + C46323 * C46629 + C46945 * be)) / C46271;
    const double C46720 = C46699 + C46719;
    const double C46721 = C46720 + C46715;
    const double C22397 =
        (3 * C46578 + be * C46579 + C46323 * C46696 + ae * C46322 * C46721 +
         C46322 *
             (ae * C46721 +
              C46322 *
                  (3 * C46692 + be * C46693 +
                   C46323 * (2 * C46686 + be * C46688 +
                             C46323 * (C46355 + be * C46323 * C46394 +
                                       C46323 * (be * C46394 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C22743 =
        (ae * (4 * C46611 + C46323 * C46721 +
               (3 * C46604 + C46323 * C46713) * be) +
         C46322 *
             (4 * C46696 + be * C46697 +
              C46323 *
                  (3 * C46692 + be * C46693 +
                   C46323 * (2 * C46686 + be * C46688 +
                             C46323 * (C46355 + be * C46323 * C46394 +
                                       C46323 * (be * C46394 +
                                                 C46323 * std::pow(C46326, 8) *
                                                     bs[8] * C46328)))))) /
        C46291;
    const double C22281 =
        (5 * (3 * C46502 + C46323 * C46611 + C46940 * be) +
         C46323 * (4 * C46611 + C46323 * C46721 + C47008 * be) +
         (4 * C46940 + C46323 * C47008) * be) /
        C46271;
    const double C22395 =
        (3 * C46502 + C46323 * C46611 + C46940 * be + C46721 * C46540) / C46271;
    const double C22741 =
        (C46322 * (4 * C46611 + C46323 * C46721 + C47008 * be)) / C46271;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C47226 * C47267 +
                  (((C113 * C294 - C47411 * C304) * C114 +
                    (C113 * C305 - C47411 * C324) * C47428) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                   C367 * C105) *
                      C47226 * C47274 +
                  (((C47411 * C310 - C113 * C297) * C114 +
                    (C47411 * C327 - C113 * C311) * C47428) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                   C368 * C105) *
                      C47226 * C2868) *
                     C47185 +
                 ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                   ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                   C177 * C105) *
                      C47226 * C47267 +
                  (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                   ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                   C672 * C105) *
                      C47226 * C47274 +
                  (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
                   ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
                   ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                      C47226 * C2868) *
                     C47194 +
                 ((C176 * C103 +
                   ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                   C178 * C105) *
                      C47226 * C47267 +
                  (C367 * C103 +
                   ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                   ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
                      C47226 * C47274 +
                  (C368 * C103 +
                   ((C356 - C355) * C114 + (C358 - C357) * C47428) * C104 +
                   ((C47411 * C322 - C113 * C303) * C114 +
                    (C47411 * C333 - C113 * C323) * C47428) *
                       C105) *
                      C47226 * C2868) *
                     C2871)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C47474 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47313) *
               C47267 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C47474 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47313) *
               C47274 +
           ((((C47411 * C310 - C113 * C297) * C114 +
              (C47411 * C327 - C113 * C311) * C47428) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
             C368 * C105) *
                C47474 +
            (((C113 * C1289 - C47411 * C1301) * C114 +
              (C113 * C1302 - C47411 * C1316) * C47428) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
                C47313) *
               C2868) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C47474 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47313) *
               C47267 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C47474 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47313) *
               C47274 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                C47474 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47428) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47428) * C104 +
             ((C47411 * C1585 - C113 * C1584) * C114 +
              (C47411 * C1587 - C113 * C1586) * C47428) *
                 C105) *
                C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47226 * C47551 +
           (((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47226 * C47547 +
           (((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C47226 * C47537 +
           (((C113 * C1152 - C47411 * C1158) * C114 +
             (C113 * C1159 - C47411 * C1170) * C47428) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C47428) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C47428) * C105) *
               C47226 * C47515) *
              C2608 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47226 * C47551 +
           (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
            C672 * C105) *
               C47226 * C47547 +
           (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
               C47226 * C47537 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C47428) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C47428) * C104 +
            ((C47411 * C1427 - C113 * C1426) * C114 +
             (C47411 * C1429 - C113 * C1428) * C47428) *
                C105) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47226 * C2500 +
           (((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47226 * C47271) *
              C47550 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47226 * C2500 +
           (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
            C672 * C105) *
               C47226 * C47271) *
              C47543 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C47226 * C2500 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
               C47226 * C47271) *
              C47530 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
               C47226 * C2500 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C47428) * C104 +
            ((C47411 * C660 - C113 * C659) * C114 +
             (C47411 * C662 - C113 * C661) * C47428) *
                C105) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C47545 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47534 +
            (((C47411 * C497 - C113 * C484) * C114 +
              (C47411 * C514 - C113 * C498) * C47428) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
             C555 * C105) *
                C47508) *
               C2500 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C47545 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47534 +
            (((C113 * C1286 - C47411 * C1295) * C114 +
              (C113 * C1296 - C47411 * C1313) * C47428) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C47428) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C47428) * C105) *
                C47508) *
               C47271) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C47545 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47534 +
            (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
                C47508) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C47545 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47534 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C47428) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C47428) * C104 +
             ((C47411 * C2167 - C113 * C2166) * C114 +
              (C47411 * C2169 - C113 * C2168) * C47428) *
                 C105) *
                C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C47411 * C122 - C113 * C115) * C114 +
                     (C47411 * C136 - C113 * C123) * C47428) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                    C176 * C105) *
                       C47474 +
                   (((C113 * C481 - C47411 * C491) * C114 +
                     (C113 * C492 - C47411 * C511) * C47428) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                    C554 * C105) *
                       C47313) *
                      C2500 +
                  ((((C113 * C294 - C47411 * C304) * C114 +
                     (C113 * C305 - C47411 * C324) * C47428) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                    C367 * C105) *
                       C47474 +
                   (((C47411 * C936 - C113 * C931) * C114 +
                     (C47411 * C946 - C113 * C937) * C47428) *
                        C103 +
                    ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
                    C968 * C105) *
                       C47313) *
                      C47271) *
                     C47185 +
                 (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                    C177 * C105) *
                       C47474 +
                   (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
                    ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
                    C785 * C105) *
                       C47313) *
                      C2500 +
                  ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                    C672 * C105) *
                       C47474 +
                   (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
                    ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
                    ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                       C47313) *
                      C47271) *
                     C47194 +
                 (((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                    C178 * C105) *
                       C47474 +
                   (C554 * C103 +
                    ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
                    ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
                       C47313) *
                      C2500 +
                  ((C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                    ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
                       C47474 +
                   (C968 * C103 +
                    ((C961 - C960) * C114 + (C963 - C962) * C47428) * C104 +
                    ((C47411 * C944 - C113 * C935) * C114 +
                     (C47411 * C950 - C113 * C945) * C47428) *
                        C105) *
                       C47313) *
                      C47271) *
                     C2871)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C47226 * C2500 +
                  (((C113 * C294 - C47411 * C304) * C114 +
                    (C113 * C305 - C47411 * C324) * C47428) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                   C367 * C105) *
                      C47226 * C47271) *
                     C47550 +
                 ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                   ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                   C177 * C105) *
                      C47226 * C2500 +
                  (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                   ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                   C672 * C105) *
                      C47226 * C47271) *
                     C47543 +
                 ((C176 * C103 +
                   ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                   C178 * C105) *
                      C47226 * C2500 +
                  (C367 * C103 +
                   ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                   ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
                      C47226 * C47271) *
                     C47530 +
                 ((C177 * C103 +
                   ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
                   ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
                      C47226 * C2500 +
                  (C672 * C103 +
                   ((C667 - C666) * C114 + (C669 - C668) * C47428) * C104 +
                   ((C47411 * C660 - C113 * C659) * C114 +
                    (C47411 * C662 - C113 * C661) * C47428) *
                       C105) *
                      C47226 * C47271) *
                     C47509)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C47226 * C47551 +
                  (((C113 * C294 - C47411 * C304) * C114 +
                    (C113 * C305 - C47411 * C324) * C47428) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                   C367 * C105) *
                      C47226 * C47547 +
                  (((C47411 * C310 - C113 * C297) * C114 +
                    (C47411 * C327 - C113 * C311) * C47428) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                   C368 * C105) *
                      C47226 * C47537 +
                  (((C113 * C1152 - C47411 * C1158) * C114 +
                    (C113 * C1159 - C47411 * C1170) * C47428) *
                       C103 +
                   ((C1431 - C1432) * C114 + (C1433 - C1434) * C47428) * C104 +
                   ((C1435 - C1436) * C114 + (C1437 - C1438) * C47428) * C105) *
                      C47226 * C47515) *
                     C2608 +
                 ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                   ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                   C177 * C105) *
                      C47226 * C47551 +
                  (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                   ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                   C672 * C105) *
                      C47226 * C47547 +
                  (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
                   ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
                   ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                      C47226 * C47537 +
                  (((C1432 - C1431) * C114 + (C1434 - C1433) * C47428) * C103 +
                   ((C1436 - C1435) * C114 + (C1438 - C1437) * C47428) * C104 +
                   ((C47411 * C1427 - C113 * C1426) * C114 +
                    (C47411 * C1429 - C113 * C1428) * C47428) *
                       C105) *
                      C47226 * C47515) *
                     C47191)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47313) *
               C47267 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C3262 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47313) *
               C47274 +
           ((((C47411 * C310 - C113 * C297) * C114 +
              (C47411 * C327 - C113 * C311) * C47428) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C47411 * C1301) * C114 +
              (C113 * C1302 - C47411 * C1316) * C47428) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
                C47313) *
               C2868) *
              C47459 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47313) *
               C47267 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47313) *
               C47274 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47428) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47428) * C104 +
             ((C47411 * C1585 - C113 * C1584) * C114 +
              (C47411 * C1587 - C113 * C1586) * C47428) *
                 C105) *
                C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C47309 +
                  (((C113 * C481 - C47411 * C491) * C114 +
                    (C113 * C492 - C47411 * C511) * C47428) *
                       C103 +
                   ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                   C554 * C105) *
                      C47316 +
                  (((C47411 * C497 - C113 * C484) * C114 +
                    (C47411 * C514 - C113 * C498) * C47428) *
                       C103 +
                   ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
                   C555 * C105) *
                      C3770) *
                     C47267 +
                 ((((C113 * C294 - C47411 * C304) * C114 +
                    (C113 * C305 - C47411 * C324) * C47428) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                   C367 * C105) *
                      C47309 +
                  (((C47411 * C936 - C113 * C931) * C114 +
                    (C47411 * C946 - C113 * C937) * C47428) *
                       C103 +
                   ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
                   C968 * C105) *
                      C47316 +
                  (((C113 * C1286 - C47411 * C1295) * C114 +
                    (C113 * C1296 - C47411 * C1313) * C47428) *
                       C103 +
                   ((C2171 - C2172) * C114 + (C2173 - C2174) * C47428) * C104 +
                   ((C2175 - C2176) * C114 + (C2177 - C2178) * C47428) * C105) *
                      C3770) *
                     C47274 +
                 ((((C47411 * C310 - C113 * C297) * C114 +
                    (C47411 * C327 - C113 * C311) * C47428) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                   C368 * C105) *
                      C47309 +
                  (((C113 * C1289 - C47411 * C1301) * C114 +
                    (C113 * C1302 - C47411 * C1316) * C47428) *
                       C103 +
                   ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
                   ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
                      C47316 +
                  (((C47411 * C1307 - C113 * C1292) * C114 +
                    (C47411 * C1319 - C113 * C1308) * C47428) *
                       C103 +
                   ((C47411 * C1309 - C113 * C1293) * C114 +
                    (C47411 * C1320 - C113 * C1310) * C47428) *
                       C104 +
                   ((C47411 * C1311 - C113 * C1294) * C114 +
                    (C47411 * C1321 - C113 * C1312) * C47428) *
                       C105) *
                      C3770) *
                     C2868) *
                C47180) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C3262 +
                  (((C113 * C481 - C47411 * C491) * C114 +
                    (C113 * C492 - C47411 * C511) * C47428) *
                       C103 +
                   ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                   C554 * C105) *
                      C47313) *
                     C47551 +
                 ((((C113 * C294 - C47411 * C304) * C114 +
                    (C113 * C305 - C47411 * C324) * C47428) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                   C367 * C105) *
                      C3262 +
                  (((C47411 * C936 - C113 * C931) * C114 +
                    (C47411 * C946 - C113 * C937) * C47428) *
                       C103 +
                   ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
                   C968 * C105) *
                      C47313) *
                     C47547 +
                 ((((C47411 * C310 - C113 * C297) * C114 +
                    (C47411 * C327 - C113 * C311) * C47428) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                   C368 * C105) *
                      C3262 +
                  (((C113 * C1289 - C47411 * C1301) * C114 +
                    (C113 * C1302 - C47411 * C1316) * C47428) *
                       C103 +
                   ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
                   ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
                      C47313) *
                     C47537 +
                 ((((C113 * C1152 - C47411 * C1158) * C114 +
                    (C113 * C1159 - C47411 * C1170) * C47428) *
                       C103 +
                   ((C1431 - C1432) * C114 + (C1433 - C1434) * C47428) * C104 +
                   ((C1435 - C1436) * C114 + (C1437 - C1438) * C47428) * C105) *
                      C3262 +
                  (((C47411 * C1697 - C113 * C1694) * C114 +
                    (C47411 * C1703 - C113 * C1698) * C47428) *
                       C103 +
                   ((C47411 * C1699 - C113 * C1695) * C114 +
                    (C47411 * C1704 - C113 * C1700) * C47428) *
                       C104 +
                   ((C47411 * C1701 - C113 * C1696) * C114 +
                    (C47411 * C1705 - C113 * C1702) * C47428) *
                       C105) *
                      C47313) *
                     C47515) *
                C47180) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((((C47411 * C122 - C113 * C115) * C114 +
                     (C47411 * C136 - C113 * C123) * C47428) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                    C176 * C105) *
                       C3262 +
                   (((C113 * C481 - C47411 * C491) * C114 +
                     (C113 * C492 - C47411 * C511) * C47428) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                    C554 * C105) *
                       C47313) *
                      C2500 +
                  ((((C113 * C294 - C47411 * C304) * C114 +
                     (C113 * C305 - C47411 * C324) * C47428) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                    C367 * C105) *
                       C3262 +
                   (((C47411 * C936 - C113 * C931) * C114 +
                     (C47411 * C946 - C113 * C937) * C47428) *
                        C103 +
                    ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
                    C968 * C105) *
                       C47313) *
                      C47271) *
                     C47541 +
                 (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                    C177 * C105) *
                       C3262 +
                   (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
                    ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
                    C785 * C105) *
                       C47313) *
                      C2500 +
                  ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                    C672 * C105) *
                       C3262 +
                   (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
                    ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
                    ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                       C47313) *
                      C47271) *
                     C47528 +
                 (((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                    C178 * C105) *
                       C3262 +
                   (C554 * C103 +
                    ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
                    ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
                       C47313) *
                      C2500 +
                  ((C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                    ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
                       C3262 +
                   (C968 * C103 +
                    ((C961 - C960) * C114 + (C963 - C962) * C47428) * C104 +
                    ((C47411 * C944 - C113 * C935) * C114 +
                     (C47411 * C950 - C113 * C945) * C47428) *
                        C105) *
                       C47313) *
                      C47271) *
                     C47499)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C47552 +
                  (((C113 * C481 - C47411 * C491) * C114 +
                    (C113 * C492 - C47411 * C511) * C47428) *
                       C103 +
                   ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                   C554 * C105) *
                      C47549 +
                  (((C47411 * C497 - C113 * C484) * C114 +
                    (C47411 * C514 - C113 * C498) * C47428) *
                       C103 +
                   ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
                   C555 * C105) *
                      C47540 +
                  (((C113 * C1996 - C47411 * C2002) * C114 +
                    (C113 * C2003 - C47411 * C2014) * C47428) *
                       C103 +
                   ((C2285 - C2286) * C114 + (C2287 - C2288) * C47428) * C104 +
                   ((C2289 - C2290) * C114 + (C2291 - C2292) * C47428) * C105) *
                      C47521) *
                     C2500 +
                 ((((C113 * C294 - C47411 * C304) * C114 +
                    (C113 * C305 - C47411 * C324) * C47428) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                   C367 * C105) *
                      C47552 +
                  (((C47411 * C936 - C113 * C931) * C114 +
                    (C47411 * C946 - C113 * C937) * C47428) *
                       C103 +
                   ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
                   C968 * C105) *
                      C47549 +
                  (((C113 * C1286 - C47411 * C1295) * C114 +
                    (C113 * C1296 - C47411 * C1313) * C47428) *
                       C103 +
                   ((C2171 - C2172) * C114 + (C2173 - C2174) * C47428) * C104 +
                   ((C2175 - C2176) * C114 + (C2177 - C2178) * C47428) * C105) *
                      C47540 +
                  (((C47411 * C2393 - C113 * C2390) * C114 +
                    (C47411 * C2399 - C113 * C2394) * C47428) *
                       C103 +
                   ((C47411 * C2395 - C113 * C2391) * C114 +
                    (C47411 * C2400 - C113 * C2396) * C47428) *
                       C104 +
                   ((C47411 * C2397 - C113 * C2392) * C114 +
                    (C47411 * C2401 - C113 * C2398) * C47428) *
                       C105) *
                      C47521) *
                     C47271) *
                C47180) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C47309 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47316 +
            (((C47411 * C497 - C113 * C484) * C114 +
              (C47411 * C514 - C113 * C498) * C47428) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
             C555 * C105) *
                C3770) *
               C2500 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C47309 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47316 +
            (((C113 * C1286 - C47411 * C1295) * C114 +
              (C113 * C1296 - C47411 * C1313) * C47428) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C47428) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C47428) * C105) *
                C3770) *
               C47271) *
              C47459 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C47309 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47316 +
            (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
                C3770) *
               C2500 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C47309 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47316 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C47428) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C47428) * C104 +
             ((C47411 * C2167 - C113 * C2166) * C114 +
              (C47411 * C2169 - C113 * C2168) * C47428) *
                 C105) *
                C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((((C47411 * C122 - C113 * C115) * C114 +
                     (C47411 * C136 - C113 * C123) * C47428) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                    C176 * C105) *
                       C3262 +
                   (((C113 * C481 - C47411 * C491) * C114 +
                     (C113 * C492 - C47411 * C511) * C47428) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                    C554 * C105) *
                       C47313) *
                      C2500 +
                  ((((C113 * C294 - C47411 * C304) * C114 +
                     (C113 * C305 - C47411 * C324) * C47428) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                    C367 * C105) *
                       C3262 +
                   (((C47411 * C936 - C113 * C931) * C114 +
                     (C47411 * C946 - C113 * C937) * C47428) *
                        C103 +
                    ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
                    C968 * C105) *
                       C47313) *
                      C47271) *
                     C47541 +
                 (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                    C177 * C105) *
                       C3262 +
                   (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
                    ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
                    C785 * C105) *
                       C47313) *
                      C2500 +
                  ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                    C672 * C105) *
                       C3262 +
                   (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
                    ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
                    ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                       C47313) *
                      C47271) *
                     C47528 +
                 (((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                    C178 * C105) *
                       C3262 +
                   (C554 * C103 +
                    ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
                    ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
                       C47313) *
                      C2500 +
                  ((C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                    ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
                       C3262 +
                   (C968 * C103 +
                    ((C961 - C960) * C114 + (C963 - C962) * C47428) * C104 +
                    ((C47411 * C944 - C113 * C935) * C114 +
                     (C47411 * C950 - C113 * C945) * C47428) *
                        C105) *
                       C47313) *
                      C47271) *
                     C47499)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C3262 +
                  (((C113 * C481 - C47411 * C491) * C114 +
                    (C113 * C492 - C47411 * C511) * C47428) *
                       C103 +
                   ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                   C554 * C105) *
                      C47313) *
                     C47551 +
                 ((((C113 * C294 - C47411 * C304) * C114 +
                    (C113 * C305 - C47411 * C324) * C47428) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                   C367 * C105) *
                      C3262 +
                  (((C47411 * C936 - C113 * C931) * C114 +
                    (C47411 * C946 - C113 * C937) * C47428) *
                       C103 +
                   ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
                   C968 * C105) *
                      C47313) *
                     C47547 +
                 ((((C47411 * C310 - C113 * C297) * C114 +
                    (C47411 * C327 - C113 * C311) * C47428) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                   C368 * C105) *
                      C3262 +
                  (((C113 * C1289 - C47411 * C1301) * C114 +
                    (C113 * C1302 - C47411 * C1316) * C47428) *
                       C103 +
                   ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
                   ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
                      C47313) *
                     C47537 +
                 ((((C113 * C1152 - C47411 * C1158) * C114 +
                    (C113 * C1159 - C47411 * C1170) * C47428) *
                       C103 +
                   ((C1431 - C1432) * C114 + (C1433 - C1434) * C47428) * C104 +
                   ((C1435 - C1436) * C114 + (C1437 - C1438) * C47428) * C105) *
                      C3262 +
                  (((C47411 * C1697 - C113 * C1694) * C114 +
                    (C47411 * C1703 - C113 * C1698) * C47428) *
                       C103 +
                   ((C47411 * C1699 - C113 * C1695) * C114 +
                    (C47411 * C1704 - C113 * C1700) * C47428) *
                       C104 +
                   ((C47411 * C1701 - C113 * C1696) * C114 +
                    (C47411 * C1705 - C113 * C1702) * C47428) *
                       C105) *
                      C47313) *
                     C47515) *
                C47180) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47226 * C1420 +
           (((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47226 * C1421 +
           (((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C47226 * C1422 +
           (((C113 * C1152 - C47411 * C1158) * C114 +
             (C113 * C1159 - C47411 * C1170) * C47428) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C47428) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C47428) * C105) *
               C47226 * C47515) *
              C47459 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47226 * C1420 +
           (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
            C672 * C105) *
               C47226 * C1421 +
           (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
               C47226 * C1422 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C47428) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C47428) * C104 +
            ((C47411 * C1427 - C113 * C1426) * C114 +
             (C47411 * C1429 - C113 * C1428) * C47428) *
                C105) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47226 * C47473 +
           (((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47226 * C47271) *
              C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47226 * C47473 +
           (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
            C672 * C105) *
               C47226 * C47271) *
              C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C47226 * C47473 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
               C47226 * C47271) *
              C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
               C47226 * C47473 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C47428) * C104 +
            ((C47411 * C660 - C113 * C659) * C114 +
             (C47411 * C662 - C113 * C661) * C47428) *
                C105) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C1816 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C1817 +
            (((C47411 * C497 - C113 * C484) * C114 +
              (C47411 * C514 - C113 * C498) * C47428) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
             C555 * C105) *
                C47508) *
               C47473 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C1816 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C1817 +
            (((C113 * C1286 - C47411 * C1295) * C114 +
              (C113 * C1296 - C47411 * C1313) * C47428) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C47428) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C47428) * C105) *
                C47508) *
               C47271) *
              C47459 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C1816 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C1817 +
            (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
                C47508) *
               C47473 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C1816 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C1817 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C47428) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C47428) * C104 +
             ((C47411 * C2167 - C113 * C2166) * C114 +
              (C47411 * C2169 - C113 * C2168) * C47428) *
                 C105) *
                C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47474 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C47313) *
              C1420 +
          ((((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47474 +
           (((C47411 * C936 - C113 * C931) * C114 +
             (C47411 * C946 - C113 * C937) * C47428) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
            C968 * C105) *
               C47313) *
              C1421 +
          ((((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C47474 +
           (((C113 * C1289 - C47411 * C1301) * C114 +
             (C113 * C1302 - C47411 * C1316) * C47428) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
               C47313) *
              C1422 +
          ((((C113 * C1152 - C47411 * C1158) * C114 +
             (C113 * C1159 - C47411 * C1170) * C47428) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C47428) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C47428) * C105) *
               C47474 +
           (((C47411 * C1697 - C113 * C1694) * C114 +
             (C47411 * C1703 - C113 * C1698) * C47428) *
                C103 +
            ((C47411 * C1699 - C113 * C1695) * C114 +
             (C47411 * C1704 - C113 * C1700) * C47428) *
                C104 +
            ((C47411 * C1701 - C113 * C1696) * C114 +
             (C47411 * C1705 - C113 * C1702) * C47428) *
                C105) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C47474 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47313) *
               C47473 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C47474 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47313) *
               C47271) *
              C291 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C47474 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47313) *
               C47473 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C47474 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47313) *
               C47271) *
              C292 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
             C178 * C105) *
                C47474 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
                C47313) *
               C47473 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
                C47474 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C47428) * C104 +
             ((C47411 * C944 - C113 * C935) * C114 +
              (C47411 * C950 - C113 * C945) * C47428) *
                 C105) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C2276 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C2277 +
           (((C47411 * C497 - C113 * C484) * C114 +
             (C47411 * C514 - C113 * C498) * C47428) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
            C555 * C105) *
               C2278 +
           (((C113 * C1996 - C47411 * C2002) * C114 +
             (C113 * C2003 - C47411 * C2014) * C47428) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C47428) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C47428) * C105) *
               C47521) *
              C47473 +
          ((((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C2276 +
           (((C47411 * C936 - C113 * C931) * C114 +
             (C47411 * C946 - C113 * C937) * C47428) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
            C968 * C105) *
               C2277 +
           (((C113 * C1286 - C47411 * C1295) * C114 +
             (C113 * C1296 - C47411 * C1313) * C47428) *
                C103 +
            ((C2171 - C2172) * C114 + (C2173 - C2174) * C47428) * C104 +
            ((C2175 - C2176) * C114 + (C2177 - C2178) * C47428) * C105) *
               C2278 +
           (((C47411 * C2393 - C113 * C2390) * C114 +
             (C47411 * C2399 - C113 * C2394) * C47428) *
                C103 +
            ((C47411 * C2395 - C113 * C2391) * C114 +
             (C47411 * C2400 - C113 * C2396) * C47428) *
                C104 +
            ((C47411 * C2397 - C113 * C2392) * C114 +
             (C47411 * C2401 - C113 * C2398) * C47428) *
                C105) *
               C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47411 * C122 - C113 * C115) * C114 +
                (C47411 * C136 - C113 * C123) * C47428) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
               C176 * C105) *
                  C47226 * C47208 * C108 +
              (((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
               ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
               C177 * C105) *
                  C47226 * C47208 * C109 +
              (C176 * C103 +
               ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
               C178 * C105) *
                  C47226 * C47208 * C110 +
              (C177 * C103 +
               ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
               ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
                  C47226 * C47208 * C111 +
              (C178 * C103 +
               ((C161 - C160) * C114 + (C163 - C162) * C47428) * C104 +
               ((C47411 * C134 - C113 * C121) * C114 +
                (C47411 * C142 - C113 * C135) * C47428) *
                   C105) *
                  C47226 * C47208 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47411 * C122 - C113 * C115) * C114 +
                 (C47411 * C136 - C113 * C123) * C47428) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                C176 * C105) *
                   C47226 * C47544 +
               (((C113 * C294 - C47411 * C304) * C114 +
                 (C113 * C305 - C47411 * C324) * C47428) *
                    C103 +
                ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                C367 * C105) *
                   C47226 * C47532 +
               (((C47411 * C310 - C113 * C297) * C114 +
                 (C47411 * C327 - C113 * C311) * C47428) *
                    C103 +
                ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                C368 * C105) *
                   C47226 * C47505) *
                  C291 +
              ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                C177 * C105) *
                   C47226 * C47544 +
               (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                ((C351 - C352) * C114 + (C353 - C354) * C47428) * C105) *
                   C47226 * C47532 +
               (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
                ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
                ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                   C47226 * C47505) *
                  C292 +
              ((C176 * C103 +
                ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                C178 * C105) *
                   C47226 * C47544 +
               (C367 * C103 +
                ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                ((C113 * C302 - C47411 * C320) * C114 +
                 (C113 * C321 - C47411 * C332) * C47428) *
                    C105) *
                   C47226 * C47532 +
               (C368 * C103 +
                ((C356 - C355) * C114 + (C358 - C357) * C47428) * C104 +
                ((C47411 * C322 - C113 * C303) * C114 +
                 (C47411 * C333 - C113 * C323) * C47428) *
                    C105) *
                   C47226 * C47505) *
                  C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47545 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C47534 +
           (((C47411 * C497 - C113 * C484) * C114 +
             (C47411 * C514 - C113 * C498) * C47428) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
            C555 * C105) *
               C47508) *
              C47208 * C291 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47545 +
           (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
            ((C538 - C539) * C114 + (C540 - C541) * C47428) * C105) *
               C47534 +
           (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
               C47508) *
              C47208 * C292 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C47545 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
            ((C113 * C489 - C47411 * C507) * C114 +
             (C113 * C508 - C47411 * C519) * C47428) *
                C105) *
               C47534 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C47428) * C104 +
            ((C47411 * C509 - C113 * C490) * C114 +
             (C47411 * C520 - C113 * C510) * C47428) *
                C105) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47226 * C1078 +
           (((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47226 * C1079 +
           (((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C47226 * C47505) *
              C47541 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47226 * C1078 +
           (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
            C672 * C105) *
               C47226 * C1079 +
           (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
               C47226 * C47505) *
              C47528 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C47226 * C1078 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
               C47226 * C1079 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C47428) * C104 +
            ((C47411 * C322 - C113 * C303) * C114 +
             (C47411 * C333 - C113 * C323) * C47428) *
                C105) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C114 +
            (C47411 * C136 - C113 * C123) * C47428) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
           C176 * C105) *
              C47226 * C1146 +
          (((C113 * C294 - C47411 * C304) * C114 +
            (C113 * C305 - C47411 * C324) * C47428) *
               C103 +
           ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
           C367 * C105) *
              C47226 * C1147 +
          (((C47411 * C310 - C113 * C297) * C114 +
            (C47411 * C327 - C113 * C311) * C47428) *
               C103 +
           ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
           C368 * C105) *
              C47226 * C1148 +
          (((C113 * C1152 - C47411 * C1158) * C114 +
            (C113 * C1159 - C47411 * C1170) * C47428) *
               C103 +
           ((C113 * C1153 - C47411 * C1160) * C114 +
            (C113 * C1161 - C47411 * C1171) * C47428) *
               C104 +
           ((C113 * C1154 - C47411 * C1162) * C114 +
            (C113 * C1163 - C47411 * C1172) * C47428) *
               C105) *
              C47226 * C1149 +
          (((C47411 * C1164 - C113 * C1155) * C114 +
            (C47411 * C1173 - C113 * C1165) * C47428) *
               C103 +
           ((C47411 * C1166 - C113 * C1156) * C114 +
            (C47411 * C1174 - C113 * C1167) * C47428) *
               C104 +
           ((C47411 * C1168 - C113 * C1157) * C114 +
            (C47411 * C1175 - C113 * C1169) * C47428) *
               C105) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47545 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C47534 +
           (((C47411 * C497 - C113 * C484) * C114 +
             (C47411 * C514 - C113 * C498) * C47428) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
            C555 * C105) *
               C47508) *
              C1078 +
          ((((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47545 +
           (((C47411 * C936 - C113 * C931) * C114 +
             (C47411 * C946 - C113 * C937) * C47428) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
            C968 * C105) *
               C47534 +
           (((C113 * C1286 - C47411 * C1295) * C114 +
             (C113 * C1296 - C47411 * C1313) * C47428) *
                C103 +
            ((C113 * C1287 - C47411 * C1297) * C114 +
             (C113 * C1298 - C47411 * C1314) * C47428) *
                C104 +
            ((C113 * C1288 - C47411 * C1299) * C114 +
             (C113 * C1300 - C47411 * C1315) * C47428) *
                C105) *
               C47508) *
              C1079 +
          ((((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C47545 +
           (((C113 * C1289 - C47411 * C1301) * C114 +
             (C113 * C1302 - C47411 * C1316) * C47428) *
                C103 +
            ((C113 * C1290 - C47411 * C1303) * C114 +
             (C113 * C1304 - C47411 * C1317) * C47428) *
                C104 +
            ((C113 * C1291 - C47411 * C1305) * C114 +
             (C113 * C1306 - C47411 * C1318) * C47428) *
                C105) *
               C47534 +
           (((C47411 * C1307 - C113 * C1292) * C114 +
             (C47411 * C1319 - C113 * C1308) * C47428) *
                C103 +
            ((C47411 * C1309 - C113 * C1293) * C114 +
             (C47411 * C1320 - C113 * C1310) * C47428) *
                C104 +
            ((C47411 * C1311 - C113 * C1294) * C114 +
             (C47411 * C1321 - C113 * C1312) * C47428) *
                C105) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C1817 +
           (((C47411 * C497 - C113 * C484) * C114 +
             (C47411 * C514 - C113 * C498) * C47428) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
            C555 * C105) *
               C47508) *
              C47208 * C47541 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C1816 +
           (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
            C785 * C105) *
               C1817 +
           (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
               C47508) *
              C47208 * C47528 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C1816 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
               C1817 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C47428) * C104 +
            ((C47411 * C509 - C113 * C490) * C114 +
             (C47411 * C520 - C113 * C510) * C47428) *
                C105) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C1817 +
           (((C47411 * C497 - C113 * C484) * C114 +
             (C47411 * C514 - C113 * C498) * C47428) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
            C555 * C105) *
               C47508) *
              C47544 +
          ((((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C1816 +
           (((C47411 * C936 - C113 * C931) * C114 +
             (C47411 * C946 - C113 * C937) * C47428) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
            C968 * C105) *
               C1817 +
           (((C113 * C1286 - C47411 * C1295) * C114 +
             (C113 * C1296 - C47411 * C1313) * C47428) *
                C103 +
            ((C113 * C1287 - C47411 * C1297) * C114 +
             (C113 * C1298 - C47411 * C1314) * C47428) *
                C104 +
            ((C113 * C1288 - C47411 * C1299) * C114 +
             (C113 * C1300 - C47411 * C1315) * C47428) *
                C105) *
               C47508) *
              C47532 +
          ((((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C1816 +
           (((C113 * C1289 - C47411 * C1301) * C114 +
             (C113 * C1302 - C47411 * C1316) * C47428) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
               C1817 +
           (((C47411 * C1307 - C113 * C1292) * C114 +
             (C47411 * C1319 - C113 * C1308) * C47428) *
                C103 +
            ((C47411 * C1309 - C113 * C1293) * C114 +
             (C47411 * C1320 - C113 * C1310) * C47428) *
                C104 +
            ((C47411 * C1311 - C113 * C1294) * C114 +
             (C47411 * C1321 - C113 * C1312) * C47428) *
                C105) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C114 +
            (C47411 * C136 - C113 * C123) * C47428) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
           C176 * C105) *
              C1991 +
          (((C113 * C481 - C47411 * C491) * C114 +
            (C113 * C492 - C47411 * C511) * C47428) *
               C103 +
           ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
           C554 * C105) *
              C1992 +
          (((C47411 * C497 - C113 * C484) * C114 +
            (C47411 * C514 - C113 * C498) * C47428) *
               C103 +
           ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
           C555 * C105) *
              C1993 +
          (((C113 * C1996 - C47411 * C2002) * C114 +
            (C113 * C2003 - C47411 * C2014) * C47428) *
               C103 +
           ((C113 * C1997 - C47411 * C2004) * C114 +
            (C113 * C2005 - C47411 * C2015) * C47428) *
               C104 +
           ((C113 * C1998 - C47411 * C2006) * C114 +
            (C113 * C2007 - C47411 * C2016) * C47428) *
               C105) *
              C1994 +
          (((C47411 * C2008 - C113 * C1999) * C114 +
            (C47411 * C2017 - C113 * C2009) * C47428) *
               C103 +
           ((C47411 * C2010 - C113 * C2000) * C114 +
            (C47411 * C2018 - C113 * C2011) * C47428) *
               C104 +
           ((C47411 * C2012 - C113 * C2001) * C114 +
            (C47411 * C2019 - C113 * C2013) * C47428) *
               C105) *
              C1995) *
         C47208 * C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C47474 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47313) *
               C1078 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C47474 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47313) *
               C1079 +
           ((((C47411 * C310 - C113 * C297) * C114 +
              (C47411 * C327 - C113 * C311) * C47428) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
             C368 * C105) *
                C47474 +
            (((C113 * C1289 - C47411 * C1301) * C114 +
              (C113 * C1302 - C47411 * C1316) * C47428) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
                C47313) *
               C47505) *
              C47459 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C47474 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47313) *
               C1078 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C47474 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47313) *
               C1079 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                C47474 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47428) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47428) * C104 +
             ((C47411 * C1585 - C113 * C1584) * C114 +
              (C47411 * C1587 - C113 * C1586) * C47428) *
                 C105) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47474 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C47313) *
              C47208 * C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47474 +
           (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
            C785 * C105) *
               C47313) *
              C47208 * C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C47474 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
               C47313) *
              C47208 * C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
               C47474 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C47428) * C104 +
            ((C47411 * C773 - C113 * C772) * C114 +
             (C47411 * C775 - C113 * C774) * C47428) *
                C105) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C2276 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C2277 +
           (((C47411 * C497 - C113 * C484) * C114 +
             (C47411 * C514 - C113 * C498) * C47428) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
            C555 * C105) *
               C2278 +
           (((C113 * C1996 - C47411 * C2002) * C114 +
             (C113 * C2003 - C47411 * C2014) * C47428) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C47428) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C47428) * C105) *
               C47521) *
              C47208 * C47459 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C2276 +
           (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
            C785 * C105) *
               C2277 +
           (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
               C2278 +
           (((C2286 - C2285) * C114 + (C2288 - C2287) * C47428) * C103 +
            ((C2290 - C2289) * C114 + (C2292 - C2291) * C47428) * C104 +
            ((C47411 * C2281 - C113 * C2280) * C114 +
             (C47411 * C2283 - C113 * C2282) * C47428) *
                C105) *
               C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47226 * C47544 +
           (((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47226 * C47532 +
           (((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C47226 * C47505) *
              C291 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47226 * C47544 +
           (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
            ((C351 - C352) * C114 + (C353 - C354) * C47428) * C105) *
               C47226 * C47532 +
           (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
               C47226 * C47505) *
              C292 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C47226 * C47544 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
            ((C113 * C302 - C47411 * C320) * C114 +
             (C113 * C321 - C47411 * C332) * C47428) *
                C105) *
               C47226 * C47532 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C47428) * C104 +
            ((C47411 * C322 - C113 * C303) * C114 +
             (C47411 * C333 - C113 * C323) * C47428) *
                C105) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C114 +
            (C47411 * C136 - C113 * C123) * C47428) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
           C176 * C105) *
              C47226 * C47208 * C108 +
          (((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
           C177 * C105) *
              C47226 * C47208 * C109 +
          (C176 * C103 +
           ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
           C178 * C105) *
              C47226 * C47208 * C110 +
          (C177 * C103 +
           ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
           ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
              C47226 * C47208 * C111 +
          (C178 * C103 +
           ((C161 - C160) * C114 + (C163 - C162) * C47428) * C104 +
           ((C47411 * C134 - C113 * C121) * C114 +
            (C47411 * C142 - C113 * C135) * C47428) *
               C105) *
              C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47226 * C1078 +
           (((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47226 * C1079 +
           (((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C47226 * C47505) *
              C47541 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47226 * C1078 +
           (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
            C672 * C105) *
               C47226 * C1079 +
           (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
               C47226 * C47505) *
              C47528 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C47226 * C1078 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
               C47226 * C1079 +
           (C368 * C103 +
            ((C356 - C355) * C114 + (C358 - C357) * C47428) * C104 +
            ((C47411 * C322 - C113 * C303) * C114 +
             (C47411 * C333 - C113 * C323) * C47428) *
                C105) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C114 +
            (C47411 * C136 - C113 * C123) * C47428) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
           C176 * C105) *
              C47226 * C1146 +
          (((C113 * C294 - C47411 * C304) * C114 +
            (C113 * C305 - C47411 * C324) * C47428) *
               C103 +
           ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
           C367 * C105) *
              C47226 * C1147 +
          (((C47411 * C310 - C113 * C297) * C114 +
            (C47411 * C327 - C113 * C311) * C47428) *
               C103 +
           ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
           C368 * C105) *
              C47226 * C1148 +
          (((C113 * C1152 - C47411 * C1158) * C114 +
            (C113 * C1159 - C47411 * C1170) * C47428) *
               C103 +
           ((C113 * C1153 - C47411 * C1160) * C114 +
            (C113 * C1161 - C47411 * C1171) * C47428) *
               C104 +
           ((C113 * C1154 - C47411 * C1162) * C114 +
            (C113 * C1163 - C47411 * C1172) * C47428) *
               C105) *
              C47226 * C1149 +
          (((C47411 * C1164 - C113 * C1155) * C114 +
            (C47411 * C1173 - C113 * C1165) * C47428) *
               C103 +
           ((C47411 * C1166 - C113 * C1156) * C114 +
            (C47411 * C1174 - C113 * C1167) * C47428) *
               C104 +
           ((C47411 * C1168 - C113 * C1157) * C114 +
            (C47411 * C1175 - C113 * C1169) * C47428) *
               C105) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C1817 +
           (((C47411 * C497 - C113 * C484) * C114 +
             (C47411 * C514 - C113 * C498) * C47428) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
            C555 * C105) *
               C47508) *
              C47208 * C47541 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C1816 +
           (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
            C785 * C105) *
               C1817 +
           (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
               C47508) *
              C47208 * C47528 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C1816 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
               C1817 +
           (C555 * C103 +
            ((C543 - C542) * C114 + (C545 - C544) * C47428) * C104 +
            ((C47411 * C509 - C113 * C490) * C114 +
             (C47411 * C520 - C113 * C510) * C47428) *
                C105) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C1816 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C1817 +
           (((C47411 * C497 - C113 * C484) * C114 +
             (C47411 * C514 - C113 * C498) * C47428) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
            C555 * C105) *
               C47508) *
              C47544 +
          ((((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C1816 +
           (((C47411 * C936 - C113 * C931) * C114 +
             (C47411 * C946 - C113 * C937) * C47428) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
            C968 * C105) *
               C1817 +
           (((C113 * C1286 - C47411 * C1295) * C114 +
             (C113 * C1296 - C47411 * C1313) * C47428) *
                C103 +
            ((C113 * C1287 - C47411 * C1297) * C114 +
             (C113 * C1298 - C47411 * C1314) * C47428) *
                C104 +
            ((C113 * C1288 - C47411 * C1299) * C114 +
             (C113 * C1300 - C47411 * C1315) * C47428) *
                C105) *
               C47508) *
              C47532 +
          ((((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C1816 +
           (((C113 * C1289 - C47411 * C1301) * C114 +
             (C113 * C1302 - C47411 * C1316) * C47428) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
               C1817 +
           (((C47411 * C1307 - C113 * C1292) * C114 +
             (C47411 * C1319 - C113 * C1308) * C47428) *
                C103 +
            ((C47411 * C1309 - C113 * C1293) * C114 +
             (C47411 * C1320 - C113 * C1310) * C47428) *
                C104 +
            ((C47411 * C1311 - C113 * C1294) * C114 +
             (C47411 * C1321 - C113 * C1312) * C47428) *
                C105) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C114 +
                      (C47411 * C136 - C113 * C123) * C47428) *
                         C103 +
                     ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                     C176 * C105) *
                        C3262 +
                    (((C113 * C481 - C47411 * C491) * C114 +
                      (C113 * C492 - C47411 * C511) * C47428) *
                         C103 +
                     ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                     C554 * C105) *
                        C47313) *
                       C47473 +
                   ((((C113 * C294 - C47411 * C304) * C114 +
                      (C113 * C305 - C47411 * C324) * C47428) *
                         C103 +
                     ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                     C367 * C105) *
                        C3262 +
                    (((C47411 * C936 - C113 * C931) * C114 +
                      (C47411 * C946 - C113 * C937) * C47428) *
                         C103 +
                     ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
                     C968 * C105) *
                        C47313) *
                       C47271) *
                      C47185 +
                  (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                     ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                     C177 * C105) *
                        C3262 +
                    (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
                     ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
                     C785 * C105) *
                        C47313) *
                       C47473 +
                   ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                     ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                     C672 * C105) *
                        C3262 +
                    (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
                     ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
                     ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                        C47313) *
                       C47271) *
                      C47194 +
                  (((C176 * C103 +
                     ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                     C178 * C105) *
                        C3262 +
                    (C554 * C103 +
                     ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
                     ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
                        C47313) *
                       C47473 +
                   ((C367 * C103 +
                     ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                     ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
                        C3262 +
                    (C968 * C103 +
                     ((C961 - C960) * C114 + (C963 - C962) * C47428) * C104 +
                     ((C47411 * C944 - C113 * C935) * C114 +
                      (C47411 * C950 - C113 * C945) * C47428) *
                         C105) *
                        C47313) *
                       C47271) *
                      C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C47309 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47316 +
            (((C47411 * C497 - C113 * C484) * C114 +
              (C47411 * C514 - C113 * C498) * C47428) *
                 C103 +
             ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
             C555 * C105) *
                C3770) *
               C47473 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C47309 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47316 +
            (((C113 * C1286 - C47411 * C1295) * C114 +
              (C113 * C1296 - C47411 * C1313) * C47428) *
                 C103 +
             ((C2171 - C2172) * C114 + (C2173 - C2174) * C47428) * C104 +
             ((C2175 - C2176) * C114 + (C2177 - C2178) * C47428) * C105) *
                C3770) *
               C47271) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C47309 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47316 +
            (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
             ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
             ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
                C3770) *
               C47473 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C47309 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47316 +
            (((C2172 - C2171) * C114 + (C2174 - C2173) * C47428) * C103 +
             ((C2176 - C2175) * C114 + (C2178 - C2177) * C47428) * C104 +
             ((C47411 * C2167 - C113 * C2166) * C114 +
              (C47411 * C2169 - C113 * C2168) * C47428) *
                 C105) *
                C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47313) *
               C47544 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C3262 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47313) *
               C47532 +
           ((((C47411 * C310 - C113 * C297) * C114 +
              (C47411 * C327 - C113 * C311) * C47428) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C47411 * C1301) * C114 +
              (C113 * C1302 - C47411 * C1316) * C47428) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
                C47313) *
               C47505) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47313) *
               C47544 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47313) *
               C47532 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47428) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47428) * C104 +
             ((C47411 * C1585 - C113 * C1584) * C114 +
              (C47411 * C1587 - C113 * C1586) * C47428) *
                 C105) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C3262 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C47313) *
              C47208 * C47550 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C3262 +
           (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
            C785 * C105) *
               C47313) *
              C47208 * C47543 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C3262 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
               C47313) *
              C47208 * C47530 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
               C3262 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C47428) * C104 +
            ((C47411 * C773 - C113 * C772) * C114 +
             (C47411 * C775 - C113 * C774) * C47428) *
                C105) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47552 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C47549 +
           (((C47411 * C497 - C113 * C484) * C114 +
             (C47411 * C514 - C113 * C498) * C47428) *
                C103 +
            ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
            C555 * C105) *
               C47540 +
           (((C113 * C1996 - C47411 * C2002) * C114 +
             (C113 * C2003 - C47411 * C2014) * C47428) *
                C103 +
            ((C2285 - C2286) * C114 + (C2287 - C2288) * C47428) * C104 +
            ((C2289 - C2290) * C114 + (C2291 - C2292) * C47428) * C105) *
               C47521) *
              C47208 * C2608 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47552 +
           (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
            C785 * C105) *
               C47549 +
           (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
            ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
            ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
               C47540 +
           (((C2286 - C2285) * C114 + (C2288 - C2287) * C47428) * C103 +
            ((C2290 - C2289) * C114 + (C2292 - C2291) * C47428) * C104 +
            ((C47411 * C2281 - C113 * C2280) * C114 +
             (C47411 * C2283 - C113 * C2282) * C47428) *
                C105) *
               C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C114 +
                     (C47411 * C136 - C113 * C123) * C47428) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                    C176 * C105) *
                       C47309 +
                   (((C113 * C481 - C47411 * C491) * C114 +
                     (C113 * C492 - C47411 * C511) * C47428) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                    C554 * C105) *
                       C47316 +
                   (((C47411 * C497 - C113 * C484) * C114 +
                     (C47411 * C514 - C113 * C498) * C47428) *
                        C103 +
                    ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
                    C555 * C105) *
                       C3770) *
                      C47208 * C47185 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                    C177 * C105) *
                       C47309 +
                   (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
                    ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
                    C785 * C105) *
                       C47316 +
                   (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
                    ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
                    ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
                       C3770) *
                      C47208 * C47194 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                    C178 * C105) *
                       C47309 +
                   (C554 * C103 +
                    ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
                    ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
                       C47316 +
                   (C555 * C103 +
                    ((C543 - C542) * C114 + (C545 - C544) * C47428) * C104 +
                    ((C47411 * C509 - C113 * C490) * C114 +
                     (C47411 * C520 - C113 * C510) * C47428) *
                        C105) *
                       C3770) *
                      C47208 * C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C3262 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C47313) *
              C47208 * C47550 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C3262 +
           (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
            C785 * C105) *
               C47313) *
              C47208 * C47543 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C3262 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
               C47313) *
              C47208 * C47530 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
               C3262 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C47428) * C104 +
            ((C47411 * C773 - C113 * C772) * C114 +
             (C47411 * C775 - C113 * C774) * C47428) *
                C105) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C3262 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47313) *
               C47544 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C3262 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47313) *
               C47532 +
           ((((C47411 * C310 - C113 * C297) * C114 +
              (C47411 * C327 - C113 * C311) * C47428) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
             C368 * C105) *
                C3262 +
            (((C113 * C1289 - C47411 * C1301) * C114 +
              (C113 * C1302 - C47411 * C1316) * C47428) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
                C47313) *
               C47505) *
              C2608 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C3262 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47313) *
               C47544 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C3262 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47313) *
               C47532 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                C3262 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47428) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47428) * C104 +
             ((C47411 * C1585 - C113 * C1584) * C114 +
              (C47411 * C1587 - C113 * C1586) * C47428) *
                 C105) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47226 * C47473 +
           (((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47226 * C47271) *
              C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47226 * C47473 +
           (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
            C672 * C105) *
               C47226 * C47271) *
              C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C47226 * C47473 +
           (C367 * C103 +
            ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
            ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
               C47226 * C47271) *
              C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
               C47226 * C47473 +
           (C672 * C103 +
            ((C667 - C666) * C114 + (C669 - C668) * C47428) * C104 +
            ((C47411 * C660 - C113 * C659) * C114 +
             (C47411 * C662 - C113 * C661) * C47428) *
                C105) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47226 * C1420 +
           (((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47226 * C1421 +
           (((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C47226 * C1422 +
           (((C113 * C1152 - C47411 * C1158) * C114 +
             (C113 * C1159 - C47411 * C1170) * C47428) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C47428) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C47428) * C105) *
               C47226 * C47515) *
              C47459 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47226 * C1420 +
           (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
            ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
            C672 * C105) *
               C47226 * C1421 +
           (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
            ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
            ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
               C47226 * C1422 +
           (((C1432 - C1431) * C114 + (C1434 - C1433) * C47428) * C103 +
            ((C1436 - C1435) * C114 + (C1438 - C1437) * C47428) * C104 +
            ((C47411 * C1427 - C113 * C1426) * C114 +
             (C47411 * C1429 - C113 * C1428) * C47428) *
                C105) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C47474 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47313) *
               C47473 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C47474 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47313) *
               C47271) *
              C291 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C47474 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47313) *
               C47473 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C47474 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47313) *
               C47271) *
              C292 +
          (((C176 * C103 +
             ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
             C178 * C105) *
                C47474 +
            (C554 * C103 +
             ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
             ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
                C47313) *
               C47473 +
           ((C367 * C103 +
             ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
             ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
                C47474 +
            (C968 * C103 +
             ((C961 - C960) * C114 + (C963 - C962) * C47428) * C104 +
             ((C47411 * C944 - C113 * C935) * C114 +
              (C47411 * C950 - C113 * C945) * C47428) *
                 C105) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47474 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C47313) *
              C1420 +
          ((((C113 * C294 - C47411 * C304) * C114 +
             (C113 * C305 - C47411 * C324) * C47428) *
                C103 +
            ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
            C367 * C105) *
               C47474 +
           (((C47411 * C936 - C113 * C931) * C114 +
             (C47411 * C946 - C113 * C937) * C47428) *
                C103 +
            ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
            C968 * C105) *
               C47313) *
              C1421 +
          ((((C47411 * C310 - C113 * C297) * C114 +
             (C47411 * C327 - C113 * C311) * C47428) *
                C103 +
            ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
            C368 * C105) *
               C47474 +
           (((C113 * C1289 - C47411 * C1301) * C114 +
             (C113 * C1302 - C47411 * C1316) * C47428) *
                C103 +
            ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
            ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
               C47313) *
              C1422 +
          ((((C113 * C1152 - C47411 * C1158) * C114 +
             (C113 * C1159 - C47411 * C1170) * C47428) *
                C103 +
            ((C1431 - C1432) * C114 + (C1433 - C1434) * C47428) * C104 +
            ((C1435 - C1436) * C114 + (C1437 - C1438) * C47428) * C105) *
               C47474 +
           (((C47411 * C1697 - C113 * C1694) * C114 +
             (C47411 * C1703 - C113 * C1698) * C47428) *
                C103 +
            ((C47411 * C1699 - C113 * C1695) * C114 +
             (C47411 * C1704 - C113 * C1700) * C47428) *
                C104 +
            ((C47411 * C1701 - C113 * C1696) * C114 +
             (C47411 * C1705 - C113 * C1702) * C47428) *
                C105) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C114 +
                     (C47411 * C136 - C113 * C123) * C47428) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                    C176 * C105) *
                       C47226 * C47544 +
                   (((C113 * C294 - C47411 * C304) * C114 +
                     (C113 * C305 - C47411 * C324) * C47428) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                    C367 * C105) *
                       C47226 * C47532 +
                   (((C47411 * C310 - C113 * C297) * C114 +
                     (C47411 * C327 - C113 * C311) * C47428) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                    C368 * C105) *
                       C47226 * C47505) *
                      C291 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                    C177 * C105) *
                       C47226 * C47544 +
                   (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                    ((C351 - C352) * C114 + (C353 - C354) * C47428) * C105) *
                       C47226 * C47532 +
                   (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
                    ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
                    ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                       C47226 * C47505) *
                      C292 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                    C178 * C105) *
                       C47226 * C47544 +
                   (C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                    ((C113 * C302 - C47411 * C320) * C114 +
                     (C113 * C321 - C47411 * C332) * C47428) *
                        C105) *
                       C47226 * C47532 +
                   (C368 * C103 +
                    ((C356 - C355) * C114 + (C358 - C357) * C47428) * C104 +
                    ((C47411 * C322 - C113 * C303) * C114 +
                     (C47411 * C333 - C113 * C323) * C47428) *
                        C105) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C47226 * C47208 * C108 +
                  (((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                   ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                   C177 * C105) *
                      C47226 * C47208 * C109 +
                  (C176 * C103 +
                   ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                   C178 * C105) *
                      C47226 * C47208 * C110 +
                  (C177 * C103 +
                   ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
                   ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
                      C47226 * C47208 * C111 +
                  (C178 * C103 +
                   ((C161 - C160) * C114 + (C163 - C162) * C47428) * C104 +
                   ((C47411 * C134 - C113 * C121) * C114 +
                    (C47411 * C142 - C113 * C135) * C47428) *
                       C105) *
                      C47226 * C47208 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C114 +
                     (C47411 * C136 - C113 * C123) * C47428) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                    C176 * C105) *
                       C47545 +
                   (((C113 * C481 - C47411 * C491) * C114 +
                     (C113 * C492 - C47411 * C511) * C47428) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                    C554 * C105) *
                       C47534 +
                   (((C47411 * C497 - C113 * C484) * C114 +
                     (C47411 * C514 - C113 * C498) * C47428) *
                        C103 +
                    ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
                    C555 * C105) *
                       C47508) *
                      C47208 * C291 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                    C177 * C105) *
                       C47545 +
                   (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
                    ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
                    ((C538 - C539) * C114 + (C540 - C541) * C47428) * C105) *
                       C47534 +
                   (((C531 - C530) * C114 + (C533 - C532) * C47428) * C103 +
                    ((C535 - C534) * C114 + (C537 - C536) * C47428) * C104 +
                    ((C542 - C543) * C114 + (C544 - C545) * C47428) * C105) *
                       C47508) *
                      C47208 * C292 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                    C178 * C105) *
                       C47545 +
                   (C554 * C103 +
                    ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
                    ((C113 * C489 - C47411 * C507) * C114 +
                     (C113 * C508 - C47411 * C519) * C47428) *
                        C105) *
                       C47534 +
                   (C555 * C103 +
                    ((C543 - C542) * C114 + (C545 - C544) * C47428) * C104 +
                    ((C47411 * C509 - C113 * C490) * C114 +
                     (C47411 * C520 - C113 * C510) * C47428) *
                        C105) *
                       C47508) *
                      C47208 * C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C114 +
                     (C47411 * C136 - C113 * C123) * C47428) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                    C176 * C105) *
                       C47226 * C1078 +
                   (((C113 * C294 - C47411 * C304) * C114 +
                     (C113 * C305 - C47411 * C324) * C47428) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                    C367 * C105) *
                       C47226 * C1079 +
                   (((C47411 * C310 - C113 * C297) * C114 +
                     (C47411 * C327 - C113 * C311) * C47428) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                    C368 * C105) *
                       C47226 * C47505) *
                      C47541 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                    C177 * C105) *
                       C47226 * C1078 +
                   (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                    C672 * C105) *
                       C47226 * C1079 +
                   (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
                    ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
                    ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                       C47226 * C47505) *
                      C47528 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                    C178 * C105) *
                       C47226 * C1078 +
                   (C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                    ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
                       C47226 * C1079 +
                   (C368 * C103 +
                    ((C356 - C355) * C114 + (C358 - C357) * C47428) * C104 +
                    ((C47411 * C322 - C113 * C303) * C114 +
                     (C47411 * C333 - C113 * C323) * C47428) *
                        C105) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C47226 * C1146 +
                  (((C113 * C294 - C47411 * C304) * C114 +
                    (C113 * C305 - C47411 * C324) * C47428) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                   C367 * C105) *
                      C47226 * C1147 +
                  (((C47411 * C310 - C113 * C297) * C114 +
                    (C47411 * C327 - C113 * C311) * C47428) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                   C368 * C105) *
                      C47226 * C1148 +
                  (((C113 * C1152 - C47411 * C1158) * C114 +
                    (C113 * C1159 - C47411 * C1170) * C47428) *
                       C103 +
                   ((C113 * C1153 - C47411 * C1160) * C114 +
                    (C113 * C1161 - C47411 * C1171) * C47428) *
                       C104 +
                   ((C113 * C1154 - C47411 * C1162) * C114 +
                    (C113 * C1163 - C47411 * C1172) * C47428) *
                       C105) *
                      C47226 * C1149 +
                  (((C47411 * C1164 - C113 * C1155) * C114 +
                    (C47411 * C1173 - C113 * C1165) * C47428) *
                       C103 +
                   ((C47411 * C1166 - C113 * C1156) * C114 +
                    (C47411 * C1174 - C113 * C1167) * C47428) *
                       C104 +
                   ((C47411 * C1168 - C113 * C1157) * C114 +
                    (C47411 * C1175 - C113 * C1169) * C47428) *
                       C105) *
                      C47226 * C1150) *
                 C47180) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C114 +
                     (C47411 * C136 - C113 * C123) * C47428) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                    C176 * C105) *
                       C47545 +
                   (((C113 * C481 - C47411 * C491) * C114 +
                     (C113 * C492 - C47411 * C511) * C47428) *
                        C103 +
                    ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
                    C554 * C105) *
                       C47534 +
                   (((C47411 * C497 - C113 * C484) * C114 +
                     (C47411 * C514 - C113 * C498) * C47428) *
                        C103 +
                    ((C530 - C531) * C114 + (C532 - C533) * C47428) * C104 +
                    C555 * C105) *
                       C47508) *
                      C1078 +
                  ((((C113 * C294 - C47411 * C304) * C114 +
                     (C113 * C305 - C47411 * C324) * C47428) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                    C367 * C105) *
                       C47545 +
                   (((C47411 * C936 - C113 * C931) * C114 +
                     (C47411 * C946 - C113 * C937) * C47428) *
                        C103 +
                    ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
                    C968 * C105) *
                       C47534 +
                   (((C113 * C1286 - C47411 * C1295) * C114 +
                     (C113 * C1296 - C47411 * C1313) * C47428) *
                        C103 +
                    ((C113 * C1287 - C47411 * C1297) * C114 +
                     (C113 * C1298 - C47411 * C1314) * C47428) *
                        C104 +
                    ((C113 * C1288 - C47411 * C1299) * C114 +
                     (C113 * C1300 - C47411 * C1315) * C47428) *
                        C105) *
                       C47508) *
                      C1079 +
                  ((((C47411 * C310 - C113 * C297) * C114 +
                     (C47411 * C327 - C113 * C311) * C47428) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                    C368 * C105) *
                       C47545 +
                   (((C113 * C1289 - C47411 * C1301) * C114 +
                     (C113 * C1302 - C47411 * C1316) * C47428) *
                        C103 +
                    ((C113 * C1290 - C47411 * C1303) * C114 +
                     (C113 * C1304 - C47411 * C1317) * C47428) *
                        C104 +
                    ((C113 * C1291 - C47411 * C1305) * C114 +
                     (C113 * C1306 - C47411 * C1318) * C47428) *
                        C105) *
                       C47534 +
                   (((C47411 * C1307 - C113 * C1292) * C114 +
                     (C47411 * C1319 - C113 * C1308) * C47428) *
                        C103 +
                    ((C47411 * C1309 - C113 * C1293) * C114 +
                     (C47411 * C1320 - C113 * C1310) * C47428) *
                        C104 +
                    ((C47411 * C1311 - C113 * C1294) * C114 +
                     (C47411 * C1321 - C113 * C1312) * C47428) *
                        C105) *
                       C47508) *
                      C47505) *
                 C47180) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C114 +
             (C47411 * C136 - C113 * C123) * C47428) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
            C176 * C105) *
               C47474 +
           (((C113 * C481 - C47411 * C491) * C114 +
             (C113 * C492 - C47411 * C511) * C47428) *
                C103 +
            ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
            C554 * C105) *
               C47313) *
              C47208 * C655 +
          ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
            C177 * C105) *
               C47474 +
           (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
            ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
            C785 * C105) *
               C47313) *
              C47208 * C656 +
          ((C176 * C103 +
            ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
            C178 * C105) *
               C47474 +
           (C554 * C103 +
            ((C539 - C538) * C114 + (C541 - C540) * C47428) * C104 +
            ((C779 - C780) * C114 + (C781 - C782) * C47428) * C105) *
               C47313) *
              C47208 * C657 +
          ((C177 * C103 +
            ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
            ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
               C47474 +
           (C785 * C103 +
            ((C780 - C779) * C114 + (C782 - C781) * C47428) * C104 +
            ((C47411 * C773 - C113 * C772) * C114 +
             (C47411 * C775 - C113 * C774) * C47428) *
                C105) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C114 +
              (C47411 * C136 - C113 * C123) * C47428) *
                 C103 +
             ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
             C176 * C105) *
                C47474 +
            (((C113 * C481 - C47411 * C491) * C114 +
              (C113 * C492 - C47411 * C511) * C47428) *
                 C103 +
             ((C522 - C523) * C114 + (C524 - C525) * C47428) * C104 +
             C554 * C105) *
                C47313) *
               C1078 +
           ((((C113 * C294 - C47411 * C304) * C114 +
              (C113 * C305 - C47411 * C324) * C47428) *
                 C103 +
             ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
             C367 * C105) *
                C47474 +
            (((C47411 * C936 - C113 * C931) * C114 +
              (C47411 * C946 - C113 * C937) * C47428) *
                 C103 +
             ((C952 - C953) * C114 + (C954 - C955) * C47428) * C104 +
             C968 * C105) *
                C47313) *
               C1079 +
           ((((C47411 * C310 - C113 * C297) * C114 +
              (C47411 * C327 - C113 * C311) * C47428) *
                 C103 +
             ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
             C368 * C105) *
                C47474 +
            (((C113 * C1289 - C47411 * C1301) * C114 +
              (C113 * C1302 - C47411 * C1316) * C47428) *
                 C103 +
             ((C1589 - C1590) * C114 + (C1591 - C1592) * C47428) * C104 +
             ((C1593 - C1594) * C114 + (C1595 - C1596) * C47428) * C105) *
                C47313) *
               C47505) *
              C47459 +
          (((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
             ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
             C177 * C105) *
                C47474 +
            (((C523 - C522) * C114 + (C525 - C524) * C47428) * C103 +
             ((C527 - C526) * C114 + (C529 - C528) * C47428) * C104 +
             C785 * C105) *
                C47313) *
               C1078 +
           ((((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
             ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
             C672 * C105) *
                C47474 +
            (((C953 - C952) * C114 + (C955 - C954) * C47428) * C103 +
             ((C957 - C956) * C114 + (C959 - C958) * C47428) * C104 +
             ((C960 - C961) * C114 + (C962 - C963) * C47428) * C105) *
                C47313) *
               C1079 +
           ((((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
             ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
             ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                C47474 +
            (((C1590 - C1589) * C114 + (C1592 - C1591) * C47428) * C103 +
             ((C1594 - C1593) * C114 + (C1596 - C1595) * C47428) * C104 +
             ((C47411 * C1585 - C113 * C1584) * C114 +
              (C47411 * C1587 - C113 * C1586) * C47428) *
                 C105) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C47226 * C47208 * C108 +
                  (((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                   ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                   C177 * C105) *
                      C47226 * C47208 * C109 +
                  (C176 * C103 +
                   ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                   C178 * C105) *
                      C47226 * C47208 * C110 +
                  (C177 * C103 +
                   ((C157 - C156) * C114 + (C159 - C158) * C47428) * C104 +
                   ((C160 - C161) * C114 + (C162 - C163) * C47428) * C105) *
                      C47226 * C47208 * C111 +
                  (C178 * C103 +
                   ((C161 - C160) * C114 + (C163 - C162) * C47428) * C104 +
                   ((C47411 * C134 - C113 * C121) * C114 +
                    (C47411 * C142 - C113 * C135) * C47428) *
                       C105) *
                      C47226 * C47208 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C114 +
                     (C47411 * C136 - C113 * C123) * C47428) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                    C176 * C105) *
                       C47226 * C47544 +
                   (((C113 * C294 - C47411 * C304) * C114 +
                     (C113 * C305 - C47411 * C324) * C47428) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                    C367 * C105) *
                       C47226 * C47532 +
                   (((C47411 * C310 - C113 * C297) * C114 +
                     (C47411 * C327 - C113 * C311) * C47428) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                    C368 * C105) *
                       C47226 * C47505) *
                      C291 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                    C177 * C105) *
                       C47226 * C47544 +
                   (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                    ((C351 - C352) * C114 + (C353 - C354) * C47428) * C105) *
                       C47226 * C47532 +
                   (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
                    ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
                    ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                       C47226 * C47505) *
                      C292 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                    C178 * C105) *
                       C47226 * C47544 +
                   (C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                    ((C113 * C302 - C47411 * C320) * C114 +
                     (C113 * C321 - C47411 * C332) * C47428) *
                        C105) *
                       C47226 * C47532 +
                   (C368 * C103 +
                    ((C356 - C355) * C114 + (C358 - C357) * C47428) * C104 +
                    ((C47411 * C322 - C113 * C303) * C114 +
                     (C47411 * C333 - C113 * C323) * C47428) *
                        C105) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C114 +
                     (C47411 * C136 - C113 * C123) * C47428) *
                        C103 +
                    ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                    C176 * C105) *
                       C47226 * C1078 +
                   (((C113 * C294 - C47411 * C304) * C114 +
                     (C113 * C305 - C47411 * C324) * C47428) *
                        C103 +
                    ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                    C367 * C105) *
                       C47226 * C1079 +
                   (((C47411 * C310 - C113 * C297) * C114 +
                     (C47411 * C327 - C113 * C311) * C47428) *
                        C103 +
                    ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                    C368 * C105) *
                       C47226 * C47505) *
                      C47541 +
                  ((((C145 - C144) * C114 + (C147 - C146) * C47428) * C103 +
                    ((C149 - C148) * C114 + (C151 - C150) * C47428) * C104 +
                    C177 * C105) *
                       C47226 * C1078 +
                   (((C336 - C335) * C114 + (C338 - C337) * C47428) * C103 +
                    ((C340 - C339) * C114 + (C342 - C341) * C47428) * C104 +
                    C672 * C105) *
                       C47226 * C1079 +
                   (((C344 - C343) * C114 + (C346 - C345) * C47428) * C103 +
                    ((C348 - C347) * C114 + (C350 - C349) * C47428) * C104 +
                    ((C355 - C356) * C114 + (C357 - C358) * C47428) * C105) *
                       C47226 * C47505) *
                      C47528 +
                  ((C176 * C103 +
                    ((C153 - C152) * C114 + (C155 - C154) * C47428) * C104 +
                    C178 * C105) *
                       C47226 * C1078 +
                   (C367 * C103 +
                    ((C352 - C351) * C114 + (C354 - C353) * C47428) * C104 +
                    ((C666 - C667) * C114 + (C668 - C669) * C47428) * C105) *
                       C47226 * C1079 +
                   (C368 * C103 +
                    ((C356 - C355) * C114 + (C358 - C357) * C47428) * C104 +
                    ((C47411 * C322 - C113 * C303) * C114 +
                     (C47411 * C333 - C113 * C323) * C47428) *
                        C105) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C114 +
                    (C47411 * C136 - C113 * C123) * C47428) *
                       C103 +
                   ((C144 - C145) * C114 + (C146 - C147) * C47428) * C104 +
                   C176 * C105) *
                      C47226 * C1146 +
                  (((C113 * C294 - C47411 * C304) * C114 +
                    (C113 * C305 - C47411 * C324) * C47428) *
                       C103 +
                   ((C335 - C336) * C114 + (C337 - C338) * C47428) * C104 +
                   C367 * C105) *
                      C47226 * C1147 +
                  (((C47411 * C310 - C113 * C297) * C114 +
                    (C47411 * C327 - C113 * C311) * C47428) *
                       C103 +
                   ((C343 - C344) * C114 + (C345 - C346) * C47428) * C104 +
                   C368 * C105) *
                      C47226 * C1148 +
                  (((C113 * C1152 - C47411 * C1158) * C114 +
                    (C113 * C1159 - C47411 * C1170) * C47428) *
                       C103 +
                   ((C113 * C1153 - C47411 * C1160) * C114 +
                    (C113 * C1161 - C47411 * C1171) * C47428) *
                       C104 +
                   ((C113 * C1154 - C47411 * C1162) * C114 +
                    (C113 * C1163 - C47411 * C1172) * C47428) *
                       C105) *
                      C47226 * C1149 +
                  (((C47411 * C1164 - C113 * C1155) * C114 +
                    (C47411 * C1173 - C113 * C1165) * C47428) *
                       C103 +
                   ((C47411 * C1166 - C113 * C1156) * C114 +
                    (C47411 * C1174 - C113 * C1167) * C47428) *
                       C104 +
                   ((C47411 * C1168 - C113 * C1157) * C114 +
                    (C47411 * C1175 - C113 * C1169) * C47428) *
                       C105) *
                      C47226 * C1150) *
                 C47180) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C47267 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C47274 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C2868) *
              C47185 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C47267 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C47274 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C2868) *
              C47194 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C47267 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C5268 - C5269 + C5270 - C5271) * C114 +
             (C5272 - C5273 + C5274 - C5275) * C47428) *
                C47492) *
               C47226 * C47274 +
           (((C4953 - C4952 + C4955 - C4954) * C114 +
             (C4957 - C4956 + C4959 - C4958) * C47428) *
                C4745 +
            ((C4743 * C318 - C4747 * C301 + C47523 * C1427 - C4748 * C1426) *
                 C114 +
             (C4743 * C331 - C4747 * C319 + C47523 * C1429 - C4748 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C47474 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C47474 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                  C114 +
              (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                  C47428) *
                 C4745 +
             ((C4936 - C4937 + C4938 - C4939) * C114 +
              (C4940 - C4941 + C4942 - C4943) * C47428) *
                 C47492) *
                C47474 +
            (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                  C114 +
              (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                  C47428) *
                 C4745 +
             ((C6346 - C6347 + C6348 - C6349) * C114 +
              (C6350 - C6351 + C6352 - C6353) * C47428) *
                 C47492) *
                C47313) *
               C2868) *
              C2608 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C47474 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C47474 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C4937 - C4936 + C4939 - C4938) * C114 +
              (C4941 - C4940 + C4943 - C4942) * C47428) *
                 C4745 +
             ((C4952 - C4953 + C4954 - C4955) * C114 +
              (C4956 - C4957 + C4958 - C4959) * C47428) *
                 C47492) *
                C47474 +
            (((C6347 - C6346 + C6349 - C6348) * C114 +
              (C6351 - C6350 + C6353 - C6352) * C47428) *
                 C4745 +
             ((C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                  C114 +
              (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C47551 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C47547 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C47537 +
           (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                 C114 +
             (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                 C47428) *
                C4745 +
            ((C6144 - C6145 + C6146 - C6147) * C114 +
             (C6148 - C6149 + C6150 - C6151) * C47428) *
                C47492) *
               C47226 * C47515) *
              C2608 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C47551 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C47547 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C47537 +
           (((C6145 - C6144 + C6147 - C6146) * C114 +
             (C6149 - C6148 + C6151 - C6150) * C47428) *
                C4745 +
            ((C4743 * C1162 - C4747 * C1154 + C47523 * C1168 - C4748 * C1157) *
                 C114 +
             (C4743 * C1172 - C4747 * C1163 + C47523 * C1175 - C4748 * C1169) *
                 C47428) *
                C47492) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47550 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47543 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C5268 - C5269 + C5270 - C5271) * C114 +
             (C5272 - C5273 + C5274 - C5275) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47530 +
          ((((C4767 - C4766 + C4769 - C4768) * C114 +
             (C4771 - C4770 + C4773 - C4772) * C47428) *
                C4745 +
            ((C4774 - C4775 + C4776 - C4777) * C114 +
             (C4778 - C4779 + C4780 - C4781) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C5269 - C5268 + C5271 - C5270) * C114 +
             (C5273 - C5272 + C5275 - C5274) * C47428) *
                C4745 +
            ((C4743 * C320 - C4747 * C302 + C47523 * C322 - C4748 * C303) *
                 C114 +
             (C4743 * C332 - C4747 * C321 + C47523 * C333 - C4748 * C323) *
                 C47428) *
                C47492) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C47545 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47534 +
            (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                  C114 +
              (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                  C47428) *
                 C4745 +
             ((C5114 - C5115 + C5116 - C5117) * C114 +
              (C5118 - C5119 + C5120 - C5121) * C47428) *
                 C47492) *
                C47508) *
               C2500 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C47545 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47534 +
            (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                  C114 +
              (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                  C47428) *
                 C4745 +
             ((C7068 - C7069 + C7070 - C7071) * C114 +
              (C7072 - C7073 + C7074 - C7075) * C47428) *
                 C47492) *
                C47508) *
               C47271) *
              C2608 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C47545 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47534 +
            (((C5115 - C5114 + C5117 - C5116) * C114 +
              (C5119 - C5118 + C5121 - C5120) * C47428) *
                 C4745 +
             ((C5130 - C5131 + C5132 - C5133) * C114 +
              (C5134 - C5135 + C5136 - C5137) * C47428) *
                 C47492) *
                C47508) *
               C2500 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C47545 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47534 +
            (((C7069 - C7068 + C7071 - C7070) * C114 +
              (C7073 - C7072 + C7075 - C7074) * C47428) *
                 C4745 +
             ((C4743 * C1299 - C4747 * C1288 + C47523 * C1311 - C4748 * C1294) *
                  C114 +
              (C4743 * C1315 - C4747 * C1300 + C47523 * C1321 - C4748 * C1312) *
                  C47428) *
                 C47492) *
                C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C47474 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C47474 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47185 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C47474 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C47474 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47194 +
          (((((C4759 - C4758 + C4761 - C4760) * C114 +
              (C4763 - C4762 + C4765 - C4764) * C47428) *
                 C4745 +
             ((C4766 - C4767 + C4768 - C4769) * C114 +
              (C4770 - C4771 + C4772 - C4773) * C47428) *
                 C47492) *
                C47474 +
            (((C5123 - C5122 + C5125 - C5124) * C114 +
              (C5127 - C5126 + C5129 - C5128) * C47428) *
                 C4745 +
             ((C5406 - C5407 + C5408 - C5409) * C114 +
              (C5410 - C5411 + C5412 - C5413) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C4945 - C4944 + C4947 - C4946) * C114 +
              (C4949 - C4948 + C4951 - C4950) * C47428) *
                 C4745 +
             ((C5268 - C5269 + C5270 - C5271) * C114 +
              (C5272 - C5273 + C5274 - C5275) * C47428) *
                 C47492) *
                C47474 +
            (((C5617 - C5616 + C5619 - C5618) * C114 +
              (C5621 - C5620 + C5623 - C5622) * C47428) *
                 C4745 +
             ((C4743 * C942 - C4747 * C934 + C47523 * C1585 - C4748 * C1584) *
                  C114 +
              (C4743 * C949 - C4747 * C943 + C47523 * C1587 - C4748 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47550 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47543 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C5268 - C5269 + C5270 - C5271) * C114 +
             (C5272 - C5273 + C5274 - C5275) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47530 +
          ((((C4767 - C4766 + C4769 - C4768) * C114 +
             (C4771 - C4770 + C4773 - C4772) * C47428) *
                C4745 +
            ((C4774 - C4775 + C4776 - C4777) * C114 +
             (C4778 - C4779 + C4780 - C4781) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C5269 - C5268 + C5271 - C5270) * C114 +
             (C5273 - C5272 + C5275 - C5274) * C47428) *
                C4745 +
            ((C4743 * C320 - C4747 * C302 + C47523 * C322 - C4748 * C303) *
                 C114 +
             (C4743 * C332 - C4747 * C321 + C47523 * C333 - C4748 * C323) *
                 C47428) *
                C47492) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C47551 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C47547 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C47537 +
           (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                 C114 +
             (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                 C47428) *
                C4745 +
            ((C6144 - C6145 + C6146 - C6147) * C114 +
             (C6148 - C6149 + C6150 - C6151) * C47428) *
                C47492) *
               C47226 * C47515) *
              C2608 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C47551 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C47547 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C47537 +
           (((C6145 - C6144 + C6147 - C6146) * C114 +
             (C6149 - C6148 + C6151 - C6150) * C47428) *
                C4745 +
            ((C4743 * C1162 - C4747 * C1154 + C47523 * C1168 - C4748 * C1157) *
                 C114 +
             (C4743 * C1172 - C4747 * C1163 + C47523 * C1175 - C4748 * C1169) *
                 C47428) *
                C47492) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C3262 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C3262 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                  C114 +
              (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                  C47428) *
                 C4745 +
             ((C4936 - C4937 + C4938 - C4939) * C114 +
              (C4940 - C4941 + C4942 - C4943) * C47428) *
                 C47492) *
                C3262 +
            (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                  C114 +
              (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                  C47428) *
                 C4745 +
             ((C6346 - C6347 + C6348 - C6349) * C114 +
              (C6350 - C6351 + C6352 - C6353) * C47428) *
                 C47492) *
                C47313) *
               C2868) *
              C47459 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C3262 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C3262 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C4937 - C4936 + C4939 - C4938) * C114 +
              (C4941 - C4940 + C4943 - C4942) * C47428) *
                 C4745 +
             ((C4952 - C4953 + C4954 - C4955) * C114 +
              (C4956 - C4957 + C4958 - C4959) * C47428) *
                 C47492) *
                C3262 +
            (((C6347 - C6346 + C6349 - C6348) * C114 +
              (C6351 - C6350 + C6353 - C6352) * C47428) *
                 C4745 +
             ((C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                  C114 +
              (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47309 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47316 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C3770) *
              C47267 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47309 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C47316 +
           (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                 C114 +
             (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                 C47428) *
                C4745 +
            ((C7068 - C7069 + C7070 - C7071) * C114 +
             (C7072 - C7073 + C7074 - C7075) * C47428) *
                C47492) *
               C3770) *
              C47274 +
          ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47309 +
           (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                 C114 +
             (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                 C47428) *
                C4745 +
            ((C6346 - C6347 + C6348 - C6349) * C114 +
             (C6350 - C6351 + C6352 - C6353) * C47428) *
                C47492) *
               C47316 +
           (((C4743 * C1307 - C4747 * C1292 + C47523 * C6007 - C4748 * C6005) *
                 C114 +
             (C4743 * C1319 - C4747 * C1308 + C47523 * C6011 - C4748 * C6008) *
                 C47428) *
                C4745 +
            ((C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C114 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47428) *
                C47492) *
               C3770) *
              C2868) *
         C47180) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C3262 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47313) *
              C47551 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C3262 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C47313) *
              C47547 +
          ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C3262 +
           (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                 C114 +
             (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                 C47428) *
                C4745 +
            ((C6346 - C6347 + C6348 - C6349) * C114 +
             (C6350 - C6351 + C6352 - C6353) * C47428) *
                C47492) *
               C47313) *
              C47537 +
          ((((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                 C114 +
             (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                 C47428) *
                C4745 +
            ((C6144 - C6145 + C6146 - C6147) * C114 +
             (C6148 - C6149 + C6150 - C6151) * C47428) *
                C47492) *
               C3262 +
           (((C4743 * C1697 - C4747 * C1694 + C47523 * C6485 - C4748 * C6483) *
                 C114 +
             (C4743 * C1703 - C4747 * C1698 + C47523 * C6489 - C4748 * C6486) *
                 C47428) *
                C4745 +
            ((C4743 * C1699 - C4747 * C1695 + C47523 * C6487 - C4748 * C6484) *
                 C114 +
             (C4743 * C1704 - C4747 * C1700 + C47523 * C6490 - C4748 * C6488) *
                 C47428) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C3262 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C3262 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47541 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C3262 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C3262 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47528 +
          (((((C4759 - C4758 + C4761 - C4760) * C114 +
              (C4763 - C4762 + C4765 - C4764) * C47428) *
                 C4745 +
             ((C4766 - C4767 + C4768 - C4769) * C114 +
              (C4770 - C4771 + C4772 - C4773) * C47428) *
                 C47492) *
                C3262 +
            (((C5123 - C5122 + C5125 - C5124) * C114 +
              (C5127 - C5126 + C5129 - C5128) * C47428) *
                 C4745 +
             ((C5406 - C5407 + C5408 - C5409) * C114 +
              (C5410 - C5411 + C5412 - C5413) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C4945 - C4944 + C4947 - C4946) * C114 +
              (C4949 - C4948 + C4951 - C4950) * C47428) *
                 C4745 +
             ((C5268 - C5269 + C5270 - C5271) * C114 +
              (C5272 - C5273 + C5274 - C5275) * C47428) *
                 C47492) *
                C3262 +
            (((C5617 - C5616 + C5619 - C5618) * C114 +
              (C5621 - C5620 + C5623 - C5622) * C47428) *
                 C4745 +
             ((C4743 * C942 - C4747 * C934 + C47523 * C1585 - C4748 * C1584) *
                  C114 +
              (C4743 * C949 - C4747 * C943 + C47523 * C1587 - C4748 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47552 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47549 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C47540 +
           (((C4747 * C1996 - C4743 * C2002 + C4748 * C2390 - C47523 * C2393) *
                 C114 +
             (C4747 * C2003 - C4743 * C2014 + C4748 * C2394 - C47523 * C2399) *
                 C47428) *
                C4745 +
            ((C7206 - C7207 + C7208 - C7209) * C114 +
             (C7210 - C7211 + C7212 - C7213) * C47428) *
                C47492) *
               C47521) *
              C2500 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47552 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C47549 +
           (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                 C114 +
             (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                 C47428) *
                C4745 +
            ((C7068 - C7069 + C7070 - C7071) * C114 +
             (C7072 - C7073 + C7074 - C7075) * C47428) *
                C47492) *
               C47540 +
           (((C4743 * C2393 - C4747 * C2390 + C47523 * C7345 - C4748 * C7343) *
                 C114 +
             (C4743 * C2399 - C4747 * C2394 + C47523 * C7349 - C4748 * C7346) *
                 C47428) *
                C4745 +
            ((C4743 * C2395 - C4747 * C2391 + C47523 * C7347 - C4748 * C7344) *
                 C114 +
             (C4743 * C2400 - C4747 * C2396 + C47523 * C7350 - C4748 * C7348) *
                 C47428) *
                C47492) *
               C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C47309 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47316 +
            (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                  C114 +
              (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                  C47428) *
                 C4745 +
             ((C5114 - C5115 + C5116 - C5117) * C114 +
              (C5118 - C5119 + C5120 - C5121) * C47428) *
                 C47492) *
                C3770) *
               C2500 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C47309 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47316 +
            (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                  C114 +
              (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                  C47428) *
                 C4745 +
             ((C7068 - C7069 + C7070 - C7071) * C114 +
              (C7072 - C7073 + C7074 - C7075) * C47428) *
                 C47492) *
                C3770) *
               C47271) *
              C47459 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C47309 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47316 +
            (((C5115 - C5114 + C5117 - C5116) * C114 +
              (C5119 - C5118 + C5121 - C5120) * C47428) *
                 C4745 +
             ((C5130 - C5131 + C5132 - C5133) * C114 +
              (C5134 - C5135 + C5136 - C5137) * C47428) *
                 C47492) *
                C3770) *
               C2500 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C47309 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47316 +
            (((C7069 - C7068 + C7071 - C7070) * C114 +
              (C7073 - C7072 + C7075 - C7074) * C47428) *
                 C4745 +
             ((C4743 * C1299 - C4747 * C1288 + C47523 * C1311 - C4748 * C1294) *
                  C114 +
              (C4743 * C1315 - C4747 * C1300 + C47523 * C1321 - C4748 * C1312) *
                  C47428) *
                 C47492) *
                C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C3262 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C3262 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47541 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C3262 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C3262 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47528 +
          (((((C4759 - C4758 + C4761 - C4760) * C114 +
              (C4763 - C4762 + C4765 - C4764) * C47428) *
                 C4745 +
             ((C4766 - C4767 + C4768 - C4769) * C114 +
              (C4770 - C4771 + C4772 - C4773) * C47428) *
                 C47492) *
                C3262 +
            (((C5123 - C5122 + C5125 - C5124) * C114 +
              (C5127 - C5126 + C5129 - C5128) * C47428) *
                 C4745 +
             ((C5406 - C5407 + C5408 - C5409) * C114 +
              (C5410 - C5411 + C5412 - C5413) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C4945 - C4944 + C4947 - C4946) * C114 +
              (C4949 - C4948 + C4951 - C4950) * C47428) *
                 C4745 +
             ((C5268 - C5269 + C5270 - C5271) * C114 +
              (C5272 - C5273 + C5274 - C5275) * C47428) *
                 C47492) *
                C3262 +
            (((C5617 - C5616 + C5619 - C5618) * C114 +
              (C5621 - C5620 + C5623 - C5622) * C47428) *
                 C4745 +
             ((C4743 * C942 - C4747 * C934 + C47523 * C1585 - C4748 * C1584) *
                  C114 +
              (C4743 * C949 - C4747 * C943 + C47523 * C1587 - C4748 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C3262 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47313) *
              C47551 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C3262 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C47313) *
              C47547 +
          ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C3262 +
           (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                 C114 +
             (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                 C47428) *
                C4745 +
            ((C6346 - C6347 + C6348 - C6349) * C114 +
             (C6350 - C6351 + C6352 - C6353) * C47428) *
                C47492) *
               C47313) *
              C47537 +
          ((((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                 C114 +
             (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                 C47428) *
                C4745 +
            ((C6144 - C6145 + C6146 - C6147) * C114 +
             (C6148 - C6149 + C6150 - C6151) * C47428) *
                C47492) *
               C3262 +
           (((C4743 * C1697 - C4747 * C1694 + C47523 * C6485 - C4748 * C6483) *
                 C114 +
             (C4743 * C1703 - C4747 * C1698 + C47523 * C6489 - C4748 * C6486) *
                 C47428) *
                C4745 +
            ((C4743 * C1699 - C4747 * C1695 + C47523 * C6487 - C4748 * C6484) *
                 C114 +
             (C4743 * C1704 - C4747 * C1700 + C47523 * C6490 - C4748 * C6488) *
                 C47428) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C1420 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C1421 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C1422 +
           (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                 C114 +
             (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                 C47428) *
                C4745 +
            ((C6144 - C6145 + C6146 - C6147) * C114 +
             (C6148 - C6149 + C6150 - C6151) * C47428) *
                C47492) *
               C47226 * C47515) *
              C47459 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C1420 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C1421 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C1422 +
           (((C6145 - C6144 + C6147 - C6146) * C114 +
             (C6149 - C6148 + C6151 - C6150) * C47428) *
                C4745 +
            ((C4743 * C1162 - C4747 * C1154 + C47523 * C1168 - C4748 * C1157) *
                 C114 +
             (C4743 * C1172 - C4747 * C1163 + C47523 * C1175 - C4748 * C1169) *
                 C47428) *
                C47492) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C47271) *
              C655 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C47271) *
              C656 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C5268 - C5269 + C5270 - C5271) * C114 +
             (C5272 - C5273 + C5274 - C5275) * C47428) *
                C47492) *
               C47226 * C47271) *
              C657 +
          ((((C4767 - C4766 + C4769 - C4768) * C114 +
             (C4771 - C4770 + C4773 - C4772) * C47428) *
                C4745 +
            ((C4774 - C4775 + C4776 - C4777) * C114 +
             (C4778 - C4779 + C4780 - C4781) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C5269 - C5268 + C5271 - C5270) * C114 +
             (C5273 - C5272 + C5275 - C5274) * C47428) *
                C4745 +
            ((C4743 * C320 - C4747 * C302 + C47523 * C322 - C4748 * C303) *
                 C114 +
             (C4743 * C332 - C4747 * C321 + C47523 * C333 - C4748 * C323) *
                 C47428) *
                C47492) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C1816 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C1817 +
            (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                  C114 +
              (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                  C47428) *
                 C4745 +
             ((C5114 - C5115 + C5116 - C5117) * C114 +
              (C5118 - C5119 + C5120 - C5121) * C47428) *
                 C47492) *
                C47508) *
               C47473 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C1816 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C1817 +
            (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                  C114 +
              (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                  C47428) *
                 C4745 +
             ((C7068 - C7069 + C7070 - C7071) * C114 +
              (C7072 - C7073 + C7074 - C7075) * C47428) *
                 C47492) *
                C47508) *
               C47271) *
              C47459 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C1816 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C1817 +
            (((C5115 - C5114 + C5117 - C5116) * C114 +
              (C5119 - C5118 + C5121 - C5120) * C47428) *
                 C4745 +
             ((C5130 - C5131 + C5132 - C5133) * C114 +
              (C5134 - C5135 + C5136 - C5137) * C47428) *
                 C47492) *
                C47508) *
               C47473 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C1816 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C1817 +
            (((C7069 - C7068 + C7071 - C7070) * C114 +
              (C7073 - C7072 + C7075 - C7074) * C47428) *
                 C4745 +
             ((C4743 * C1299 - C4747 * C1288 + C47523 * C1311 - C4748 * C1294) *
                  C114 +
              (C4743 * C1315 - C4747 * C1300 + C47523 * C1321 - C4748 * C1312) *
                  C47428) *
                 C47492) *
                C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47474 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47313) *
              C1420 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47474 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C47313) *
              C1421 +
          ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47474 +
           (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                 C114 +
             (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                 C47428) *
                C4745 +
            ((C6346 - C6347 + C6348 - C6349) * C114 +
             (C6350 - C6351 + C6352 - C6353) * C47428) *
                C47492) *
               C47313) *
              C1422 +
          ((((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                 C114 +
             (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                 C47428) *
                C4745 +
            ((C6144 - C6145 + C6146 - C6147) * C114 +
             (C6148 - C6149 + C6150 - C6151) * C47428) *
                C47492) *
               C47474 +
           (((C4743 * C1697 - C4747 * C1694 + C47523 * C6485 - C4748 * C6483) *
                 C114 +
             (C4743 * C1703 - C4747 * C1698 + C47523 * C6489 - C4748 * C6486) *
                 C47428) *
                C4745 +
            ((C4743 * C1699 - C4747 * C1695 + C47523 * C6487 - C4748 * C6484) *
                 C114 +
             (C4743 * C1704 - C4747 * C1700 + C47523 * C6490 - C4748 * C6488) *
                 C47428) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C47474 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C47474 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C291 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C47474 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C47474 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C292 +
          (((((C4759 - C4758 + C4761 - C4760) * C114 +
              (C4763 - C4762 + C4765 - C4764) * C47428) *
                 C4745 +
             ((C4766 - C4767 + C4768 - C4769) * C114 +
              (C4770 - C4771 + C4772 - C4773) * C47428) *
                 C47492) *
                C47474 +
            (((C5123 - C5122 + C5125 - C5124) * C114 +
              (C5127 - C5126 + C5129 - C5128) * C47428) *
                 C4745 +
             ((C5406 - C5407 + C5408 - C5409) * C114 +
              (C5410 - C5411 + C5412 - C5413) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C4945 - C4944 + C4947 - C4946) * C114 +
              (C4949 - C4948 + C4951 - C4950) * C47428) *
                 C4745 +
             ((C5268 - C5269 + C5270 - C5271) * C114 +
              (C5272 - C5273 + C5274 - C5275) * C47428) *
                 C47492) *
                C47474 +
            (((C5617 - C5616 + C5619 - C5618) * C114 +
              (C5621 - C5620 + C5623 - C5622) * C47428) *
                 C4745 +
             ((C4743 * C942 - C4747 * C934 + C47523 * C1585 - C4748 * C1584) *
                  C114 +
              (C4743 * C949 - C4747 * C943 + C47523 * C1587 - C4748 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C2276 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C2277 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C2278 +
           (((C4747 * C1996 - C4743 * C2002 + C4748 * C2390 - C47523 * C2393) *
                 C114 +
             (C4747 * C2003 - C4743 * C2014 + C4748 * C2394 - C47523 * C2399) *
                 C47428) *
                C4745 +
            ((C7206 - C7207 + C7208 - C7209) * C114 +
             (C7210 - C7211 + C7212 - C7213) * C47428) *
                C47492) *
               C47521) *
              C47473 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C2276 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C2277 +
           (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                 C114 +
             (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                 C47428) *
                C4745 +
            ((C7068 - C7069 + C7070 - C7071) * C114 +
             (C7072 - C7073 + C7074 - C7075) * C47428) *
                C47492) *
               C2278 +
           (((C4743 * C2393 - C4747 * C2390 + C47523 * C7345 - C4748 * C7343) *
                 C114 +
             (C4743 * C2399 - C4747 * C2394 + C47523 * C7349 - C4748 * C7346) *
                 C47428) *
                C4745 +
            ((C4743 * C2395 - C4747 * C2391 + C47523 * C7347 - C4748 * C7344) *
                 C114 +
             (C4743 * C2400 - C4747 * C2396 + C47523 * C7350 - C4748 * C7348) *
                 C47428) *
                C47492) *
               C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                    C114 +
                (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                    C47428) *
                   C4745 +
               ((C4750 - C4751 + C4752 - C4753) * C114 +
                (C4754 - C4755 + C4756 - C4757) * C47428) *
                   C47492) *
                  C47226 * C47208 * C108 +
              (((C4751 - C4750 + C4753 - C4752) * C114 +
                (C4755 - C4754 + C4757 - C4756) * C47428) *
                   C4745 +
               ((C4758 - C4759 + C4760 - C4761) * C114 +
                (C4762 - C4763 + C4764 - C4765) * C47428) *
                   C47492) *
                  C47226 * C47208 * C109 +
              (((C4759 - C4758 + C4761 - C4760) * C114 +
                (C4763 - C4762 + C4765 - C4764) * C47428) *
                   C4745 +
               ((C4766 - C4767 + C4768 - C4769) * C114 +
                (C4770 - C4771 + C4772 - C4773) * C47428) *
                   C47492) *
                  C47226 * C47208 * C110 +
              (((C4767 - C4766 + C4769 - C4768) * C114 +
                (C4771 - C4770 + C4773 - C4772) * C47428) *
                   C4745 +
               ((C4774 - C4775 + C4776 - C4777) * C114 +
                (C4778 - C4779 + C4780 - C4781) * C47428) *
                   C47492) *
                  C47226 * C47208 * C111 +
              (((C4775 - C4774 + C4777 - C4776) * C114 +
                (C4779 - C4778 + C4781 - C4780) * C47428) *
                   C4745 +
               ((C4743 * C132 - C4747 * C120 + C47523 * C660 - C4748 * C659) *
                    C114 +
                (C4743 * C141 - C4747 * C133 + C47523 * C662 - C4748 * C661) *
                    C47428) *
                   C47492) *
                  C47226 * C47208 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                     C114 +
                 (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                     C47428) *
                    C4745 +
                ((C4750 - C4751 + C4752 - C4753) * C114 +
                 (C4754 - C4755 + C4756 - C4757) * C47428) *
                    C47492) *
                   C47226 * C47544 +
               (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                     C114 +
                 (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                     C47428) *
                    C4745 +
                ((C4928 - C4929 + C4930 - C4931) * C114 +
                 (C4932 - C4933 + C4934 - C4935) * C47428) *
                    C47492) *
                   C47226 * C47532 +
               (((C4743 * C310 - C4747 * C297 + C47523 * C1158 -
                  C4748 * C1152) *
                     C114 +
                 (C4743 * C327 - C4747 * C311 + C47523 * C1170 -
                  C4748 * C1159) *
                     C47428) *
                    C4745 +
                ((C4936 - C4937 + C4938 - C4939) * C114 +
                 (C4940 - C4941 + C4942 - C4943) * C47428) *
                    C47492) *
                   C47226 * C47505) *
                  C291 +
              ((((C4751 - C4750 + C4753 - C4752) * C114 +
                 (C4755 - C4754 + C4757 - C4756) * C47428) *
                    C4745 +
                ((C4758 - C4759 + C4760 - C4761) * C114 +
                 (C4762 - C4763 + C4764 - C4765) * C47428) *
                    C47492) *
                   C47226 * C47544 +
               (((C4929 - C4928 + C4931 - C4930) * C114 +
                 (C4933 - C4932 + C4935 - C4934) * C47428) *
                    C4745 +
                ((C4944 - C4945 + C4946 - C4947) * C114 +
                 (C4948 - C4949 + C4950 - C4951) * C47428) *
                    C47492) *
                   C47226 * C47532 +
               (((C4937 - C4936 + C4939 - C4938) * C114 +
                 (C4941 - C4940 + C4943 - C4942) * C47428) *
                    C4745 +
                ((C4952 - C4953 + C4954 - C4955) * C114 +
                 (C4956 - C4957 + C4958 - C4959) * C47428) *
                    C47492) *
                   C47226 * C47505) *
                  C292 +
              ((((C4759 - C4758 + C4761 - C4760) * C114 +
                 (C4763 - C4762 + C4765 - C4764) * C47428) *
                    C4745 +
                ((C4766 - C4767 + C4768 - C4769) * C114 +
                 (C4770 - C4771 + C4772 - C4773) * C47428) *
                    C47492) *
                   C47226 * C47544 +
               (((C4945 - C4944 + C4947 - C4946) * C114 +
                 (C4949 - C4948 + C4951 - C4950) * C47428) *
                    C4745 +
                ((C4747 * C300 - C4743 * C316 + C4748 * C301 - C47523 * C318) *
                     C114 +
                 (C4747 * C317 - C4743 * C330 + C4748 * C319 - C47523 * C331) *
                     C47428) *
                    C47492) *
                   C47226 * C47532 +
               (((C4953 - C4952 + C4955 - C4954) * C114 +
                 (C4957 - C4956 + C4959 - C4958) * C47428) *
                    C4745 +
                ((C4743 * C318 - C4747 * C301 + C47523 * C1427 -
                  C4748 * C1426) *
                     C114 +
                 (C4743 * C331 - C4747 * C319 + C47523 * C1429 -
                  C4748 * C1428) *
                     C47428) *
                    C47492) *
                   C47226 * C47505) *
                  C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47545 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47534 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C47508) *
              C47208 * C291 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47545 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C47534 +
           (((C5115 - C5114 + C5117 - C5116) * C114 +
             (C5119 - C5118 + C5121 - C5120) * C47428) *
                C4745 +
            ((C5130 - C5131 + C5132 - C5133) * C114 +
             (C5134 - C5135 + C5136 - C5137) * C47428) *
                C47492) *
               C47508) *
              C47208 * C292 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47545 +
           (((C5123 - C5122 + C5125 - C5124) * C114 +
             (C5127 - C5126 + C5129 - C5128) * C47428) *
                C4745 +
            ((C4747 * C487 - C4743 * C503 + C4748 * C934 - C47523 * C942) *
                 C114 +
             (C4747 * C504 - C4743 * C517 + C4748 * C943 - C47523 * C949) *
                 C47428) *
                C47492) *
               C47534 +
           (((C5131 - C5130 + C5133 - C5132) * C114 +
             (C5135 - C5134 + C5137 - C5136) * C47428) *
                C4745 +
            ((C4743 * C505 - C4747 * C488 + C47523 * C2167 - C4748 * C2166) *
                 C114 +
             (C4743 * C518 - C4747 * C506 + C47523 * C2169 - C4748 * C2168) *
                 C47428) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C5268 - C5269 + C5270 - C5271) * C114 +
             (C5272 - C5273 + C5274 - C5275) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4953 - C4952 + C4955 - C4954) * C114 +
             (C4957 - C4956 + C4959 - C4958) * C47428) *
                C4745 +
            ((C4743 * C318 - C4747 * C301 + C47523 * C1427 - C4748 * C1426) *
                 C114 +
             (C4743 * C331 - C4747 * C319 + C47523 * C1429 - C4748 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C114 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C47428) *
               C4745 +
           ((C4750 - C4751 + C4752 - C4753) * C114 +
            (C4754 - C4755 + C4756 - C4757) * C47428) *
               C47492) *
              C47226 * C1146 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C114 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C47428) *
               C4745 +
           ((C4928 - C4929 + C4930 - C4931) * C114 +
            (C4932 - C4933 + C4934 - C4935) * C47428) *
               C47492) *
              C47226 * C1147 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C114 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C47428) *
               C4745 +
           ((C4936 - C4937 + C4938 - C4939) * C114 +
            (C4940 - C4941 + C4942 - C4943) * C47428) *
               C47492) *
              C47226 * C1148 +
          (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C114 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C47428) *
               C4745 +
           ((C4747 * C1153 - C4743 * C1160 + C4748 * C1156 - C47523 * C1166) *
                C114 +
            (C4747 * C1161 - C4743 * C1171 + C4748 * C1167 - C47523 * C1174) *
                C47428) *
               C47492) *
              C47226 * C1149 +
          (((C4743 * C1164 - C4747 * C1155 + C47523 * C5853 - C4748 * C5851) *
                C114 +
            (C4743 * C1173 - C4747 * C1165 + C47523 * C5857 - C4748 * C5854) *
                C47428) *
               C4745 +
           ((C4743 * C1166 - C4747 * C1156 + C47523 * C5855 - C4748 * C5852) *
                C114 +
            (C4743 * C1174 - C4747 * C1167 + C47523 * C5858 - C4748 * C5856) *
                C47428) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47545 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47534 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C47508) *
              C1078 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47545 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C47534 +
           (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                 C114 +
             (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                 C47428) *
                C4745 +
            ((C4747 * C1287 - C4743 * C1297 + C4748 * C1293 - C47523 * C1309) *
                 C114 +
             (C4747 * C1298 - C4743 * C1314 + C4748 * C1310 - C47523 * C1320) *
                 C47428) *
                C47492) *
               C47508) *
              C1079 +
          ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47545 +
           (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                 C114 +
             (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                 C47428) *
                C4745 +
            ((C4747 * C1290 - C4743 * C1303 + C4748 * C1695 - C47523 * C1699) *
                 C114 +
             (C4747 * C1304 - C4743 * C1317 + C4748 * C1700 - C47523 * C1704) *
                 C47428) *
                C47492) *
               C47534 +
           (((C4743 * C1307 - C4747 * C1292 + C47523 * C6007 - C4748 * C6005) *
                 C114 +
             (C4743 * C1319 - C4747 * C1308 + C47523 * C6011 - C4748 * C6008) *
                 C47428) *
                C4745 +
            ((C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C114 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47428) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C1816 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C1817 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C47508) *
              C47208 * C47541 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C1816 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C1817 +
           (((C5115 - C5114 + C5117 - C5116) * C114 +
             (C5119 - C5118 + C5121 - C5120) * C47428) *
                C4745 +
            ((C5130 - C5131 + C5132 - C5133) * C114 +
             (C5134 - C5135 + C5136 - C5137) * C47428) *
                C47492) *
               C47508) *
              C47208 * C47528 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C1816 +
           (((C5123 - C5122 + C5125 - C5124) * C114 +
             (C5127 - C5126 + C5129 - C5128) * C47428) *
                C4745 +
            ((C5406 - C5407 + C5408 - C5409) * C114 +
             (C5410 - C5411 + C5412 - C5413) * C47428) *
                C47492) *
               C1817 +
           (((C5131 - C5130 + C5133 - C5132) * C114 +
             (C5135 - C5134 + C5137 - C5136) * C47428) *
                C4745 +
            ((C4743 * C505 - C4747 * C488 + C47523 * C2167 - C4748 * C2166) *
                 C114 +
             (C4743 * C518 - C4747 * C506 + C47523 * C2169 - C4748 * C2168) *
                 C47428) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C1816 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C1817 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C47508) *
              C47544 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C1816 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C1817 +
           (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                 C114 +
             (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                 C47428) *
                C4745 +
            ((C4747 * C1287 - C4743 * C1297 + C4748 * C1293 - C47523 * C1309) *
                 C114 +
             (C4747 * C1298 - C4743 * C1314 + C4748 * C1310 - C47523 * C1320) *
                 C47428) *
                C47492) *
               C47508) *
              C47532 +
          ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C1816 +
           (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                 C114 +
             (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                 C47428) *
                C4745 +
            ((C6346 - C6347 + C6348 - C6349) * C114 +
             (C6350 - C6351 + C6352 - C6353) * C47428) *
                C47492) *
               C1817 +
           (((C4743 * C1307 - C4747 * C1292 + C47523 * C6007 - C4748 * C6005) *
                 C114 +
             (C4743 * C1319 - C4747 * C1308 + C47523 * C6011 - C4748 * C6008) *
                 C47428) *
                C4745 +
            ((C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C114 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47428) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C114 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C47428) *
               C4745 +
           ((C4750 - C4751 + C4752 - C4753) * C114 +
            (C4754 - C4755 + C4756 - C4757) * C47428) *
               C47492) *
              C1991 +
          (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                C114 +
            (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                C47428) *
               C4745 +
           ((C5106 - C5107 + C5108 - C5109) * C114 +
            (C5110 - C5111 + C5112 - C5113) * C47428) *
               C47492) *
              C1992 +
          (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                C114 +
            (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                C47428) *
               C4745 +
           ((C5114 - C5115 + C5116 - C5117) * C114 +
            (C5118 - C5119 + C5120 - C5121) * C47428) *
               C47492) *
              C1993 +
          (((C4747 * C1996 - C4743 * C2002 + C4748 * C2390 - C47523 * C2393) *
                C114 +
            (C4747 * C2003 - C4743 * C2014 + C4748 * C2394 - C47523 * C2399) *
                C47428) *
               C4745 +
           ((C4747 * C1997 - C4743 * C2004 + C4748 * C2391 - C47523 * C2395) *
                C114 +
            (C4747 * C2005 - C4743 * C2015 + C4748 * C2396 - C47523 * C2400) *
                C47428) *
               C47492) *
              C1994 +
          (((C4743 * C2008 - C4747 * C1999 + C47523 * C6867 - C4748 * C6865) *
                C114 +
            (C4743 * C2017 - C4747 * C2009 + C47523 * C6871 - C4748 * C6868) *
                C47428) *
               C4745 +
           ((C4743 * C2010 - C4747 * C2000 + C47523 * C6869 - C4748 * C6866) *
                C114 +
            (C4743 * C2018 - C4747 * C2011 + C47523 * C6872 - C4748 * C6870) *
                C47428) *
               C47492) *
              C1995) *
         C47208 * C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C47474 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C47474 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                  C114 +
              (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                  C47428) *
                 C4745 +
             ((C4936 - C4937 + C4938 - C4939) * C114 +
              (C4940 - C4941 + C4942 - C4943) * C47428) *
                 C47492) *
                C47474 +
            (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                  C114 +
              (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                  C47428) *
                 C4745 +
             ((C6346 - C6347 + C6348 - C6349) * C114 +
              (C6350 - C6351 + C6352 - C6353) * C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47459 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C47474 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C47474 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C4937 - C4936 + C4939 - C4938) * C114 +
              (C4941 - C4940 + C4943 - C4942) * C47428) *
                 C4745 +
             ((C4952 - C4953 + C4954 - C4955) * C114 +
              (C4956 - C4957 + C4958 - C4959) * C47428) *
                 C47492) *
                C47474 +
            (((C6347 - C6346 + C6349 - C6348) * C114 +
              (C6351 - C6350 + C6353 - C6352) * C47428) *
                 C4745 +
             ((C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                  C114 +
              (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47474 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47313) *
              C47208 * C655 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47474 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C47313) *
              C47208 * C656 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47474 +
           (((C5123 - C5122 + C5125 - C5124) * C114 +
             (C5127 - C5126 + C5129 - C5128) * C47428) *
                C4745 +
            ((C5406 - C5407 + C5408 - C5409) * C114 +
             (C5410 - C5411 + C5412 - C5413) * C47428) *
                C47492) *
               C47313) *
              C47208 * C657 +
          ((((C4767 - C4766 + C4769 - C4768) * C114 +
             (C4771 - C4770 + C4773 - C4772) * C47428) *
                C4745 +
            ((C4774 - C4775 + C4776 - C4777) * C114 +
             (C4778 - C4779 + C4780 - C4781) * C47428) *
                C47492) *
               C47474 +
           (((C5407 - C5406 + C5409 - C5408) * C114 +
             (C5411 - C5410 + C5413 - C5412) * C47428) *
                C4745 +
            ((C4743 * C507 - C4747 * C489 + C47523 * C944 - C4748 * C935) *
                 C114 +
             (C4743 * C519 - C4747 * C508 + C47523 * C950 - C4748 * C945) *
                 C47428) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C2276 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C2277 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C2278 +
           (((C4747 * C1996 - C4743 * C2002 + C4748 * C2390 - C47523 * C2393) *
                 C114 +
             (C4747 * C2003 - C4743 * C2014 + C4748 * C2394 - C47523 * C2399) *
                 C47428) *
                C4745 +
            ((C7206 - C7207 + C7208 - C7209) * C114 +
             (C7210 - C7211 + C7212 - C7213) * C47428) *
                C47492) *
               C47521) *
              C47208 * C47459 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C2276 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C2277 +
           (((C5115 - C5114 + C5117 - C5116) * C114 +
             (C5119 - C5118 + C5121 - C5120) * C47428) *
                C4745 +
            ((C5130 - C5131 + C5132 - C5133) * C114 +
             (C5134 - C5135 + C5136 - C5137) * C47428) *
                C47492) *
               C2278 +
           (((C7207 - C7206 + C7209 - C7208) * C114 +
             (C7211 - C7210 + C7213 - C7212) * C47428) *
                C4745 +
            ((C4743 * C2006 - C4747 * C1998 + C47523 * C2397 - C4748 * C2392) *
                 C114 +
             (C4743 * C2016 - C4747 * C2007 + C47523 * C2401 - C4748 * C2398) *
                 C47428) *
                C47492) *
               C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C47505) *
              C291 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C47505) *
              C292 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C4747 * C300 - C4743 * C316 + C4748 * C301 - C47523 * C318) *
                 C114 +
             (C4747 * C317 - C4743 * C330 + C4748 * C319 - C47523 * C331) *
                 C47428) *
                C47492) *
               C47226 * C47532 +
           (((C4953 - C4952 + C4955 - C4954) * C114 +
             (C4957 - C4956 + C4959 - C4958) * C47428) *
                C4745 +
            ((C4743 * C318 - C4747 * C301 + C47523 * C1427 - C4748 * C1426) *
                 C114 +
             (C4743 * C331 - C4747 * C319 + C47523 * C1429 - C4748 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C114 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C47428) *
               C4745 +
           ((C4750 - C4751 + C4752 - C4753) * C114 +
            (C4754 - C4755 + C4756 - C4757) * C47428) *
               C47492) *
              C47226 * C47208 * C108 +
          (((C4751 - C4750 + C4753 - C4752) * C114 +
            (C4755 - C4754 + C4757 - C4756) * C47428) *
               C4745 +
           ((C4758 - C4759 + C4760 - C4761) * C114 +
            (C4762 - C4763 + C4764 - C4765) * C47428) *
               C47492) *
              C47226 * C47208 * C109 +
          (((C4759 - C4758 + C4761 - C4760) * C114 +
            (C4763 - C4762 + C4765 - C4764) * C47428) *
               C4745 +
           ((C4766 - C4767 + C4768 - C4769) * C114 +
            (C4770 - C4771 + C4772 - C4773) * C47428) *
               C47492) *
              C47226 * C47208 * C110 +
          (((C4767 - C4766 + C4769 - C4768) * C114 +
            (C4771 - C4770 + C4773 - C4772) * C47428) *
               C4745 +
           ((C4774 - C4775 + C4776 - C4777) * C114 +
            (C4778 - C4779 + C4780 - C4781) * C47428) *
               C47492) *
              C47226 * C47208 * C111 +
          (((C4775 - C4774 + C4777 - C4776) * C114 +
            (C4779 - C4778 + C4781 - C4780) * C47428) *
               C4745 +
           ((C4743 * C132 - C4747 * C120 + C47523 * C660 - C4748 * C659) *
                C114 +
            (C4743 * C141 - C4747 * C133 + C47523 * C662 - C4748 * C661) *
                C47428) *
               C47492) *
              C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C5268 - C5269 + C5270 - C5271) * C114 +
             (C5272 - C5273 + C5274 - C5275) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4953 - C4952 + C4955 - C4954) * C114 +
             (C4957 - C4956 + C4959 - C4958) * C47428) *
                C4745 +
            ((C4743 * C318 - C4747 * C301 + C47523 * C1427 - C4748 * C1426) *
                 C114 +
             (C4743 * C331 - C4747 * C319 + C47523 * C1429 - C4748 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C114 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C47428) *
               C4745 +
           ((C4750 - C4751 + C4752 - C4753) * C114 +
            (C4754 - C4755 + C4756 - C4757) * C47428) *
               C47492) *
              C47226 * C1146 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C114 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C47428) *
               C4745 +
           ((C4928 - C4929 + C4930 - C4931) * C114 +
            (C4932 - C4933 + C4934 - C4935) * C47428) *
               C47492) *
              C47226 * C1147 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C114 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C47428) *
               C4745 +
           ((C4936 - C4937 + C4938 - C4939) * C114 +
            (C4940 - C4941 + C4942 - C4943) * C47428) *
               C47492) *
              C47226 * C1148 +
          (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C114 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C47428) *
               C4745 +
           ((C4747 * C1153 - C4743 * C1160 + C4748 * C1156 - C47523 * C1166) *
                C114 +
            (C4747 * C1161 - C4743 * C1171 + C4748 * C1167 - C47523 * C1174) *
                C47428) *
               C47492) *
              C47226 * C1149 +
          (((C4743 * C1164 - C4747 * C1155 + C47523 * C5853 - C4748 * C5851) *
                C114 +
            (C4743 * C1173 - C4747 * C1165 + C47523 * C5857 - C4748 * C5854) *
                C47428) *
               C4745 +
           ((C4743 * C1166 - C4747 * C1156 + C47523 * C5855 - C4748 * C5852) *
                C114 +
            (C4743 * C1174 - C4747 * C1167 + C47523 * C5858 - C4748 * C5856) *
                C47428) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C1816 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C1817 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C47508) *
              C47208 * C47541 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C1816 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C1817 +
           (((C5115 - C5114 + C5117 - C5116) * C114 +
             (C5119 - C5118 + C5121 - C5120) * C47428) *
                C4745 +
            ((C5130 - C5131 + C5132 - C5133) * C114 +
             (C5134 - C5135 + C5136 - C5137) * C47428) *
                C47492) *
               C47508) *
              C47208 * C47528 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C1816 +
           (((C5123 - C5122 + C5125 - C5124) * C114 +
             (C5127 - C5126 + C5129 - C5128) * C47428) *
                C4745 +
            ((C5406 - C5407 + C5408 - C5409) * C114 +
             (C5410 - C5411 + C5412 - C5413) * C47428) *
                C47492) *
               C1817 +
           (((C5131 - C5130 + C5133 - C5132) * C114 +
             (C5135 - C5134 + C5137 - C5136) * C47428) *
                C4745 +
            ((C4743 * C505 - C4747 * C488 + C47523 * C2167 - C4748 * C2166) *
                 C114 +
             (C4743 * C518 - C4747 * C506 + C47523 * C2169 - C4748 * C2168) *
                 C47428) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C1816 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C1817 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C47508) *
              C47544 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C1816 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C1817 +
           (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                 C114 +
             (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                 C47428) *
                C4745 +
            ((C4747 * C1287 - C4743 * C1297 + C4748 * C1293 - C47523 * C1309) *
                 C114 +
             (C4747 * C1298 - C4743 * C1314 + C4748 * C1310 - C47523 * C1320) *
                 C47428) *
                C47492) *
               C47508) *
              C47532 +
          ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C1816 +
           (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                 C114 +
             (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                 C47428) *
                C4745 +
            ((C6346 - C6347 + C6348 - C6349) * C114 +
             (C6350 - C6351 + C6352 - C6353) * C47428) *
                C47492) *
               C1817 +
           (((C4743 * C1307 - C4747 * C1292 + C47523 * C6007 - C4748 * C6005) *
                 C114 +
             (C4743 * C1319 - C4747 * C1308 + C47523 * C6011 - C4748 * C6008) *
                 C47428) *
                C4745 +
            ((C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C114 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47428) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C3262 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C3262 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47185 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C3262 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C3262 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47194 +
          (((((C4759 - C4758 + C4761 - C4760) * C114 +
              (C4763 - C4762 + C4765 - C4764) * C47428) *
                 C4745 +
             ((C4766 - C4767 + C4768 - C4769) * C114 +
              (C4770 - C4771 + C4772 - C4773) * C47428) *
                 C47492) *
                C3262 +
            (((C5123 - C5122 + C5125 - C5124) * C114 +
              (C5127 - C5126 + C5129 - C5128) * C47428) *
                 C4745 +
             ((C5406 - C5407 + C5408 - C5409) * C114 +
              (C5410 - C5411 + C5412 - C5413) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C4945 - C4944 + C4947 - C4946) * C114 +
              (C4949 - C4948 + C4951 - C4950) * C47428) *
                 C4745 +
             ((C5268 - C5269 + C5270 - C5271) * C114 +
              (C5272 - C5273 + C5274 - C5275) * C47428) *
                 C47492) *
                C3262 +
            (((C5617 - C5616 + C5619 - C5618) * C114 +
              (C5621 - C5620 + C5623 - C5622) * C47428) *
                 C4745 +
             ((C4743 * C942 - C4747 * C934 + C47523 * C1585 - C4748 * C1584) *
                  C114 +
              (C4743 * C949 - C4747 * C943 + C47523 * C1587 - C4748 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C47309 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47316 +
            (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                  C114 +
              (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                  C47428) *
                 C4745 +
             ((C5114 - C5115 + C5116 - C5117) * C114 +
              (C5118 - C5119 + C5120 - C5121) * C47428) *
                 C47492) *
                C3770) *
               C47473 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C47309 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47316 +
            (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                  C114 +
              (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                  C47428) *
                 C4745 +
             ((C7068 - C7069 + C7070 - C7071) * C114 +
              (C7072 - C7073 + C7074 - C7075) * C47428) *
                 C47492) *
                C3770) *
               C47271) *
              C2608 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C47309 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47316 +
            (((C5115 - C5114 + C5117 - C5116) * C114 +
              (C5119 - C5118 + C5121 - C5120) * C47428) *
                 C4745 +
             ((C5130 - C5131 + C5132 - C5133) * C114 +
              (C5134 - C5135 + C5136 - C5137) * C47428) *
                 C47492) *
                C3770) *
               C47473 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C47309 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47316 +
            (((C7069 - C7068 + C7071 - C7070) * C114 +
              (C7073 - C7072 + C7075 - C7074) * C47428) *
                 C4745 +
             ((C4743 * C1299 - C4747 * C1288 + C47523 * C1311 - C4748 * C1294) *
                  C114 +
              (C4743 * C1315 - C4747 * C1300 + C47523 * C1321 - C4748 * C1312) *
                  C47428) *
                 C47492) *
                C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C3262 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C3262 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                  C114 +
              (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                  C47428) *
                 C4745 +
             ((C4936 - C4937 + C4938 - C4939) * C114 +
              (C4940 - C4941 + C4942 - C4943) * C47428) *
                 C47492) *
                C3262 +
            (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                  C114 +
              (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                  C47428) *
                 C4745 +
             ((C6346 - C6347 + C6348 - C6349) * C114 +
              (C6350 - C6351 + C6352 - C6353) * C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C2608 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C3262 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C3262 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C4937 - C4936 + C4939 - C4938) * C114 +
              (C4941 - C4940 + C4943 - C4942) * C47428) *
                 C4745 +
             ((C4952 - C4953 + C4954 - C4955) * C114 +
              (C4956 - C4957 + C4958 - C4959) * C47428) *
                 C47492) *
                C3262 +
            (((C6347 - C6346 + C6349 - C6348) * C114 +
              (C6351 - C6350 + C6353 - C6352) * C47428) *
                 C4745 +
             ((C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                  C114 +
              (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C3262 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47550 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C3262 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47543 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C3262 +
           (((C5123 - C5122 + C5125 - C5124) * C114 +
             (C5127 - C5126 + C5129 - C5128) * C47428) *
                C4745 +
            ((C5406 - C5407 + C5408 - C5409) * C114 +
             (C5410 - C5411 + C5412 - C5413) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47530 +
          ((((C4767 - C4766 + C4769 - C4768) * C114 +
             (C4771 - C4770 + C4773 - C4772) * C47428) *
                C4745 +
            ((C4774 - C4775 + C4776 - C4777) * C114 +
             (C4778 - C4779 + C4780 - C4781) * C47428) *
                C47492) *
               C3262 +
           (((C5407 - C5406 + C5409 - C5408) * C114 +
             (C5411 - C5410 + C5413 - C5412) * C47428) *
                C4745 +
            ((C4743 * C507 - C4747 * C489 + C47523 * C944 - C4748 * C935) *
                 C114 +
             (C4743 * C519 - C4747 * C508 + C47523 * C950 - C4748 * C945) *
                 C47428) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47552 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47549 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C47540 +
           (((C4747 * C1996 - C4743 * C2002 + C4748 * C2390 - C47523 * C2393) *
                 C114 +
             (C4747 * C2003 - C4743 * C2014 + C4748 * C2394 - C47523 * C2399) *
                 C47428) *
                C4745 +
            ((C7206 - C7207 + C7208 - C7209) * C114 +
             (C7210 - C7211 + C7212 - C7213) * C47428) *
                C47492) *
               C47521) *
              C47208 * C2608 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47552 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C47549 +
           (((C5115 - C5114 + C5117 - C5116) * C114 +
             (C5119 - C5118 + C5121 - C5120) * C47428) *
                C4745 +
            ((C5130 - C5131 + C5132 - C5133) * C114 +
             (C5134 - C5135 + C5136 - C5137) * C47428) *
                C47492) *
               C47540 +
           (((C7207 - C7206 + C7209 - C7208) * C114 +
             (C7211 - C7210 + C7213 - C7212) * C47428) *
                C4745 +
            ((C4743 * C2006 - C4747 * C1998 + C47523 * C2397 - C4748 * C2392) *
                 C114 +
             (C4743 * C2016 - C4747 * C2007 + C47523 * C2401 - C4748 * C2398) *
                 C47428) *
                C47492) *
               C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47309 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47316 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C3770) *
              C47208 * C47185 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47309 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C47316 +
           (((C5115 - C5114 + C5117 - C5116) * C114 +
             (C5119 - C5118 + C5121 - C5120) * C47428) *
                C4745 +
            ((C5130 - C5131 + C5132 - C5133) * C114 +
             (C5134 - C5135 + C5136 - C5137) * C47428) *
                C47492) *
               C3770) *
              C47208 * C47194 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47309 +
           (((C5123 - C5122 + C5125 - C5124) * C114 +
             (C5127 - C5126 + C5129 - C5128) * C47428) *
                C4745 +
            ((C5406 - C5407 + C5408 - C5409) * C114 +
             (C5410 - C5411 + C5412 - C5413) * C47428) *
                C47492) *
               C47316 +
           (((C5131 - C5130 + C5133 - C5132) * C114 +
             (C5135 - C5134 + C5137 - C5136) * C47428) *
                C4745 +
            ((C4743 * C505 - C4747 * C488 + C47523 * C2167 - C4748 * C2166) *
                 C114 +
             (C4743 * C518 - C4747 * C506 + C47523 * C2169 - C4748 * C2168) *
                 C47428) *
                C47492) *
               C3770) *
              C47208 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C3262 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47550 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C3262 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47543 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C3262 +
           (((C5123 - C5122 + C5125 - C5124) * C114 +
             (C5127 - C5126 + C5129 - C5128) * C47428) *
                C4745 +
            ((C5406 - C5407 + C5408 - C5409) * C114 +
             (C5410 - C5411 + C5412 - C5413) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47530 +
          ((((C4767 - C4766 + C4769 - C4768) * C114 +
             (C4771 - C4770 + C4773 - C4772) * C47428) *
                C4745 +
            ((C4774 - C4775 + C4776 - C4777) * C114 +
             (C4778 - C4779 + C4780 - C4781) * C47428) *
                C47492) *
               C3262 +
           (((C5407 - C5406 + C5409 - C5408) * C114 +
             (C5411 - C5410 + C5413 - C5412) * C47428) *
                C4745 +
            ((C4743 * C507 - C4747 * C489 + C47523 * C944 - C4748 * C935) *
                 C114 +
             (C4743 * C519 - C4747 * C508 + C47523 * C950 - C4748 * C945) *
                 C47428) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C3262 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C3262 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                  C114 +
              (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                  C47428) *
                 C4745 +
             ((C4936 - C4937 + C4938 - C4939) * C114 +
              (C4940 - C4941 + C4942 - C4943) * C47428) *
                 C47492) *
                C3262 +
            (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                  C114 +
              (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                  C47428) *
                 C4745 +
             ((C6346 - C6347 + C6348 - C6349) * C114 +
              (C6350 - C6351 + C6352 - C6353) * C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C2608 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C3262 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C3262 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C4937 - C4936 + C4939 - C4938) * C114 +
              (C4941 - C4940 + C4943 - C4942) * C47428) *
                 C4745 +
             ((C4952 - C4953 + C4954 - C4955) * C114 +
              (C4956 - C4957 + C4958 - C4959) * C47428) *
                 C47492) *
                C3262 +
            (((C6347 - C6346 + C6349 - C6348) * C114 +
              (C6351 - C6350 + C6353 - C6352) * C47428) *
                 C4745 +
             ((C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                  C114 +
              (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C47271) *
              C655 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C47271) *
              C656 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C5268 - C5269 + C5270 - C5271) * C114 +
             (C5272 - C5273 + C5274 - C5275) * C47428) *
                C47492) *
               C47226 * C47271) *
              C657 +
          ((((C4767 - C4766 + C4769 - C4768) * C114 +
             (C4771 - C4770 + C4773 - C4772) * C47428) *
                C4745 +
            ((C4774 - C4775 + C4776 - C4777) * C114 +
             (C4778 - C4779 + C4780 - C4781) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C5269 - C5268 + C5271 - C5270) * C114 +
             (C5273 - C5272 + C5275 - C5274) * C47428) *
                C4745 +
            ((C4743 * C320 - C4747 * C302 + C47523 * C322 - C4748 * C303) *
                 C114 +
             (C4743 * C332 - C4747 * C321 + C47523 * C333 - C4748 * C323) *
                 C47428) *
                C47492) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C1420 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C1421 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C1422 +
           (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                 C114 +
             (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                 C47428) *
                C4745 +
            ((C6144 - C6145 + C6146 - C6147) * C114 +
             (C6148 - C6149 + C6150 - C6151) * C47428) *
                C47492) *
               C47226 * C47515) *
              C47459 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C1420 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C1421 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C1422 +
           (((C6145 - C6144 + C6147 - C6146) * C114 +
             (C6149 - C6148 + C6151 - C6150) * C47428) *
                C4745 +
            ((C4743 * C1162 - C4747 * C1154 + C47523 * C1168 - C4748 * C1157) *
                 C114 +
             (C4743 * C1172 - C4747 * C1163 + C47523 * C1175 - C4748 * C1169) *
                 C47428) *
                C47492) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C47474 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C47474 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C291 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C47474 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C47474 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C292 +
          (((((C4759 - C4758 + C4761 - C4760) * C114 +
              (C4763 - C4762 + C4765 - C4764) * C47428) *
                 C4745 +
             ((C4766 - C4767 + C4768 - C4769) * C114 +
              (C4770 - C4771 + C4772 - C4773) * C47428) *
                 C47492) *
                C47474 +
            (((C5123 - C5122 + C5125 - C5124) * C114 +
              (C5127 - C5126 + C5129 - C5128) * C47428) *
                 C4745 +
             ((C5406 - C5407 + C5408 - C5409) * C114 +
              (C5410 - C5411 + C5412 - C5413) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C4945 - C4944 + C4947 - C4946) * C114 +
              (C4949 - C4948 + C4951 - C4950) * C47428) *
                 C4745 +
             ((C5268 - C5269 + C5270 - C5271) * C114 +
              (C5272 - C5273 + C5274 - C5275) * C47428) *
                 C47492) *
                C47474 +
            (((C5617 - C5616 + C5619 - C5618) * C114 +
              (C5621 - C5620 + C5623 - C5622) * C47428) *
                 C4745 +
             ((C4743 * C942 - C4747 * C934 + C47523 * C1585 - C4748 * C1584) *
                  C114 +
              (C4743 * C949 - C4747 * C943 + C47523 * C1587 - C4748 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47474 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47313) *
              C1420 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47474 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C47313) *
              C1421 +
          ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47474 +
           (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                 C114 +
             (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                 C47428) *
                C4745 +
            ((C6346 - C6347 + C6348 - C6349) * C114 +
             (C6350 - C6351 + C6352 - C6353) * C47428) *
                C47492) *
               C47313) *
              C1422 +
          ((((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                 C114 +
             (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                 C47428) *
                C4745 +
            ((C6144 - C6145 + C6146 - C6147) * C114 +
             (C6148 - C6149 + C6150 - C6151) * C47428) *
                C47492) *
               C47474 +
           (((C4743 * C1697 - C4747 * C1694 + C47523 * C6485 - C4748 * C6483) *
                 C114 +
             (C4743 * C1703 - C4747 * C1698 + C47523 * C6489 - C4748 * C6486) *
                 C47428) *
                C4745 +
            ((C4743 * C1699 - C4747 * C1695 + C47523 * C6487 - C4748 * C6484) *
                 C114 +
             (C4743 * C1704 - C4747 * C1700 + C47523 * C6490 - C4748 * C6488) *
                 C47428) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C47505) *
              C291 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C47505) *
              C292 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C4747 * C300 - C4743 * C316 + C4748 * C301 - C47523 * C318) *
                 C114 +
             (C4747 * C317 - C4743 * C330 + C4748 * C319 - C47523 * C331) *
                 C47428) *
                C47492) *
               C47226 * C47532 +
           (((C4953 - C4952 + C4955 - C4954) * C114 +
             (C4957 - C4956 + C4959 - C4958) * C47428) *
                C4745 +
            ((C4743 * C318 - C4747 * C301 + C47523 * C1427 - C4748 * C1426) *
                 C114 +
             (C4743 * C331 - C4747 * C319 + C47523 * C1429 - C4748 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C114 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C47428) *
               C4745 +
           ((C4750 - C4751 + C4752 - C4753) * C114 +
            (C4754 - C4755 + C4756 - C4757) * C47428) *
               C47492) *
              C47226 * C47208 * C108 +
          (((C4751 - C4750 + C4753 - C4752) * C114 +
            (C4755 - C4754 + C4757 - C4756) * C47428) *
               C4745 +
           ((C4758 - C4759 + C4760 - C4761) * C114 +
            (C4762 - C4763 + C4764 - C4765) * C47428) *
               C47492) *
              C47226 * C47208 * C109 +
          (((C4759 - C4758 + C4761 - C4760) * C114 +
            (C4763 - C4762 + C4765 - C4764) * C47428) *
               C4745 +
           ((C4766 - C4767 + C4768 - C4769) * C114 +
            (C4770 - C4771 + C4772 - C4773) * C47428) *
               C47492) *
              C47226 * C47208 * C110 +
          (((C4767 - C4766 + C4769 - C4768) * C114 +
            (C4771 - C4770 + C4773 - C4772) * C47428) *
               C4745 +
           ((C4774 - C4775 + C4776 - C4777) * C114 +
            (C4778 - C4779 + C4780 - C4781) * C47428) *
               C47492) *
              C47226 * C47208 * C111 +
          (((C4775 - C4774 + C4777 - C4776) * C114 +
            (C4779 - C4778 + C4781 - C4780) * C47428) *
               C4745 +
           ((C4743 * C132 - C4747 * C120 + C47523 * C660 - C4748 * C659) *
                C114 +
            (C4743 * C141 - C4747 * C133 + C47523 * C662 - C4748 * C661) *
                C47428) *
               C47492) *
              C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47545 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47534 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C47508) *
              C47208 * C291 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47545 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C47534 +
           (((C5115 - C5114 + C5117 - C5116) * C114 +
             (C5119 - C5118 + C5121 - C5120) * C47428) *
                C4745 +
            ((C5130 - C5131 + C5132 - C5133) * C114 +
             (C5134 - C5135 + C5136 - C5137) * C47428) *
                C47492) *
               C47508) *
              C47208 * C292 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47545 +
           (((C5123 - C5122 + C5125 - C5124) * C114 +
             (C5127 - C5126 + C5129 - C5128) * C47428) *
                C4745 +
            ((C4747 * C487 - C4743 * C503 + C4748 * C934 - C47523 * C942) *
                 C114 +
             (C4747 * C504 - C4743 * C517 + C4748 * C943 - C47523 * C949) *
                 C47428) *
                C47492) *
               C47534 +
           (((C5131 - C5130 + C5133 - C5132) * C114 +
             (C5135 - C5134 + C5137 - C5136) * C47428) *
                C4745 +
            ((C4743 * C505 - C4747 * C488 + C47523 * C2167 - C4748 * C2166) *
                 C114 +
             (C4743 * C518 - C4747 * C506 + C47523 * C2169 - C4748 * C2168) *
                 C47428) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C5268 - C5269 + C5270 - C5271) * C114 +
             (C5272 - C5273 + C5274 - C5275) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4953 - C4952 + C4955 - C4954) * C114 +
             (C4957 - C4956 + C4959 - C4958) * C47428) *
                C4745 +
            ((C4743 * C318 - C4747 * C301 + C47523 * C1427 - C4748 * C1426) *
                 C114 +
             (C4743 * C331 - C4747 * C319 + C47523 * C1429 - C4748 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C114 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C47428) *
               C4745 +
           ((C4750 - C4751 + C4752 - C4753) * C114 +
            (C4754 - C4755 + C4756 - C4757) * C47428) *
               C47492) *
              C47226 * C1146 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C114 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C47428) *
               C4745 +
           ((C4928 - C4929 + C4930 - C4931) * C114 +
            (C4932 - C4933 + C4934 - C4935) * C47428) *
               C47492) *
              C47226 * C1147 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C114 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C47428) *
               C4745 +
           ((C4936 - C4937 + C4938 - C4939) * C114 +
            (C4940 - C4941 + C4942 - C4943) * C47428) *
               C47492) *
              C47226 * C1148 +
          (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C114 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C47428) *
               C4745 +
           ((C4747 * C1153 - C4743 * C1160 + C4748 * C1156 - C47523 * C1166) *
                C114 +
            (C4747 * C1161 - C4743 * C1171 + C4748 * C1167 - C47523 * C1174) *
                C47428) *
               C47492) *
              C47226 * C1149 +
          (((C4743 * C1164 - C4747 * C1155 + C47523 * C5853 - C4748 * C5851) *
                C114 +
            (C4743 * C1173 - C4747 * C1165 + C47523 * C5857 - C4748 * C5854) *
                C47428) *
               C4745 +
           ((C4743 * C1166 - C4747 * C1156 + C47523 * C5855 - C4748 * C5852) *
                C114 +
            (C4743 * C1174 - C4747 * C1167 + C47523 * C5858 - C4748 * C5856) *
                C47428) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47545 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47534 +
           (((C4743 * C497 - C4747 * C484 + C47523 * C1295 - C4748 * C1286) *
                 C114 +
             (C4743 * C514 - C4747 * C498 + C47523 * C1313 - C4748 * C1296) *
                 C47428) *
                C4745 +
            ((C5114 - C5115 + C5116 - C5117) * C114 +
             (C5118 - C5119 + C5120 - C5121) * C47428) *
                C47492) *
               C47508) *
              C1078 +
          ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47545 +
           (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                 C114 +
             (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                 C47428) *
                C4745 +
            ((C5608 - C5609 + C5610 - C5611) * C114 +
             (C5612 - C5613 + C5614 - C5615) * C47428) *
                C47492) *
               C47534 +
           (((C4747 * C1286 - C4743 * C1295 + C4748 * C1292 - C47523 * C1307) *
                 C114 +
             (C4747 * C1296 - C4743 * C1313 + C4748 * C1308 - C47523 * C1319) *
                 C47428) *
                C4745 +
            ((C4747 * C1287 - C4743 * C1297 + C4748 * C1293 - C47523 * C1309) *
                 C114 +
             (C4747 * C1298 - C4743 * C1314 + C4748 * C1310 - C47523 * C1320) *
                 C47428) *
                C47492) *
               C47508) *
              C1079 +
          ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47545 +
           (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                 C114 +
             (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                 C47428) *
                C4745 +
            ((C4747 * C1290 - C4743 * C1303 + C4748 * C1695 - C47523 * C1699) *
                 C114 +
             (C4747 * C1304 - C4743 * C1317 + C4748 * C1700 - C47523 * C1704) *
                 C47428) *
                C47492) *
               C47534 +
           (((C4743 * C1307 - C4747 * C1292 + C47523 * C6007 - C4748 * C6005) *
                 C114 +
             (C4743 * C1319 - C4747 * C1308 + C47523 * C6011 - C4748 * C6008) *
                 C47428) *
                C4745 +
            ((C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C114 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47428) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47474 +
           (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                 C114 +
             (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                 C47428) *
                C4745 +
            ((C5106 - C5107 + C5108 - C5109) * C114 +
             (C5110 - C5111 + C5112 - C5113) * C47428) *
                C47492) *
               C47313) *
              C47208 * C655 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47474 +
           (((C5107 - C5106 + C5109 - C5108) * C114 +
             (C5111 - C5110 + C5113 - C5112) * C47428) *
                C4745 +
            ((C5122 - C5123 + C5124 - C5125) * C114 +
             (C5126 - C5127 + C5128 - C5129) * C47428) *
                C47492) *
               C47313) *
              C47208 * C656 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47474 +
           (((C5123 - C5122 + C5125 - C5124) * C114 +
             (C5127 - C5126 + C5129 - C5128) * C47428) *
                C4745 +
            ((C5406 - C5407 + C5408 - C5409) * C114 +
             (C5410 - C5411 + C5412 - C5413) * C47428) *
                C47492) *
               C47313) *
              C47208 * C657 +
          ((((C4767 - C4766 + C4769 - C4768) * C114 +
             (C4771 - C4770 + C4773 - C4772) * C47428) *
                C4745 +
            ((C4774 - C4775 + C4776 - C4777) * C114 +
             (C4778 - C4779 + C4780 - C4781) * C47428) *
                C47492) *
               C47474 +
           (((C5407 - C5406 + C5409 - C5408) * C114 +
             (C5411 - C5410 + C5413 - C5412) * C47428) *
                C4745 +
            ((C4743 * C507 - C4747 * C489 + C47523 * C944 - C4748 * C935) *
                 C114 +
             (C4743 * C519 - C4747 * C508 + C47523 * C950 - C4748 * C945) *
                 C47428) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                  C114 +
              (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                  C47428) *
                 C4745 +
             ((C4750 - C4751 + C4752 - C4753) * C114 +
              (C4754 - C4755 + C4756 - C4757) * C47428) *
                 C47492) *
                C47474 +
            (((C4747 * C481 - C4743 * C491 + C4748 * C931 - C47523 * C936) *
                  C114 +
              (C4747 * C492 - C4743 * C511 + C4748 * C937 - C47523 * C946) *
                  C47428) *
                 C4745 +
             ((C5106 - C5107 + C5108 - C5109) * C114 +
              (C5110 - C5111 + C5112 - C5113) * C47428) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                  C114 +
              (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                  C47428) *
                 C4745 +
             ((C4928 - C4929 + C4930 - C4931) * C114 +
              (C4932 - C4933 + C4934 - C4935) * C47428) *
                 C47492) *
                C47474 +
            (((C4743 * C936 - C4747 * C931 + C47523 * C1301 - C4748 * C1289) *
                  C114 +
              (C4743 * C946 - C4747 * C937 + C47523 * C1316 - C4748 * C1302) *
                  C47428) *
                 C4745 +
             ((C5608 - C5609 + C5610 - C5611) * C114 +
              (C5612 - C5613 + C5614 - C5615) * C47428) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                  C114 +
              (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                  C47428) *
                 C4745 +
             ((C4936 - C4937 + C4938 - C4939) * C114 +
              (C4940 - C4941 + C4942 - C4943) * C47428) *
                 C47492) *
                C47474 +
            (((C4747 * C1289 - C4743 * C1301 + C4748 * C1694 - C47523 * C1697) *
                  C114 +
              (C4747 * C1302 - C4743 * C1316 + C4748 * C1698 - C47523 * C1703) *
                  C47428) *
                 C4745 +
             ((C6346 - C6347 + C6348 - C6349) * C114 +
              (C6350 - C6351 + C6352 - C6353) * C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47459 +
          (((((C4751 - C4750 + C4753 - C4752) * C114 +
              (C4755 - C4754 + C4757 - C4756) * C47428) *
                 C4745 +
             ((C4758 - C4759 + C4760 - C4761) * C114 +
              (C4762 - C4763 + C4764 - C4765) * C47428) *
                 C47492) *
                C47474 +
            (((C5107 - C5106 + C5109 - C5108) * C114 +
              (C5111 - C5110 + C5113 - C5112) * C47428) *
                 C4745 +
             ((C5122 - C5123 + C5124 - C5125) * C114 +
              (C5126 - C5127 + C5128 - C5129) * C47428) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C4929 - C4928 + C4931 - C4930) * C114 +
              (C4933 - C4932 + C4935 - C4934) * C47428) *
                 C4745 +
             ((C4944 - C4945 + C4946 - C4947) * C114 +
              (C4948 - C4949 + C4950 - C4951) * C47428) *
                 C47492) *
                C47474 +
            (((C5609 - C5608 + C5611 - C5610) * C114 +
              (C5613 - C5612 + C5615 - C5614) * C47428) *
                 C4745 +
             ((C5616 - C5617 + C5618 - C5619) * C114 +
              (C5620 - C5621 + C5622 - C5623) * C47428) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C4937 - C4936 + C4939 - C4938) * C114 +
              (C4941 - C4940 + C4943 - C4942) * C47428) *
                 C4745 +
             ((C4952 - C4953 + C4954 - C4955) * C114 +
              (C4956 - C4957 + C4958 - C4959) * C47428) *
                 C47492) *
                C47474 +
            (((C6347 - C6346 + C6349 - C6348) * C114 +
              (C6351 - C6350 + C6353 - C6352) * C47428) *
                 C4745 +
             ((C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                  C114 +
              (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C114 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C47428) *
               C4745 +
           ((C4750 - C4751 + C4752 - C4753) * C114 +
            (C4754 - C4755 + C4756 - C4757) * C47428) *
               C47492) *
              C47226 * C47208 * C108 +
          (((C4751 - C4750 + C4753 - C4752) * C114 +
            (C4755 - C4754 + C4757 - C4756) * C47428) *
               C4745 +
           ((C4758 - C4759 + C4760 - C4761) * C114 +
            (C4762 - C4763 + C4764 - C4765) * C47428) *
               C47492) *
              C47226 * C47208 * C109 +
          (((C4759 - C4758 + C4761 - C4760) * C114 +
            (C4763 - C4762 + C4765 - C4764) * C47428) *
               C4745 +
           ((C4766 - C4767 + C4768 - C4769) * C114 +
            (C4770 - C4771 + C4772 - C4773) * C47428) *
               C47492) *
              C47226 * C47208 * C110 +
          (((C4767 - C4766 + C4769 - C4768) * C114 +
            (C4771 - C4770 + C4773 - C4772) * C47428) *
               C4745 +
           ((C4774 - C4775 + C4776 - C4777) * C114 +
            (C4778 - C4779 + C4780 - C4781) * C47428) *
               C47492) *
              C47226 * C47208 * C111 +
          (((C4775 - C4774 + C4777 - C4776) * C114 +
            (C4779 - C4778 + C4781 - C4780) * C47428) *
               C4745 +
           ((C4743 * C132 - C4747 * C120 + C47523 * C660 - C4748 * C659) *
                C114 +
            (C4743 * C141 - C4747 * C133 + C47523 * C662 - C4748 * C661) *
                C47428) *
               C47492) *
              C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C47505) *
              C291 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C47505) *
              C292 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C4747 * C300 - C4743 * C316 + C4748 * C301 - C47523 * C318) *
                 C114 +
             (C4747 * C317 - C4743 * C330 + C4748 * C319 - C47523 * C331) *
                 C47428) *
                C47492) *
               C47226 * C47532 +
           (((C4953 - C4952 + C4955 - C4954) * C114 +
             (C4957 - C4956 + C4959 - C4958) * C47428) *
                C4745 +
            ((C4743 * C318 - C4747 * C301 + C47523 * C1427 - C4748 * C1426) *
                 C114 +
             (C4743 * C331 - C4747 * C319 + C47523 * C1429 - C4748 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C114 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C47428) *
                C4745 +
            ((C4750 - C4751 + C4752 - C4753) * C114 +
             (C4754 - C4755 + C4756 - C4757) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C114 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C47428) *
                C4745 +
            ((C4928 - C4929 + C4930 - C4931) * C114 +
             (C4932 - C4933 + C4934 - C4935) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C114 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C47428) *
                C4745 +
            ((C4936 - C4937 + C4938 - C4939) * C114 +
             (C4940 - C4941 + C4942 - C4943) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C4751 - C4750 + C4753 - C4752) * C114 +
             (C4755 - C4754 + C4757 - C4756) * C47428) *
                C4745 +
            ((C4758 - C4759 + C4760 - C4761) * C114 +
             (C4762 - C4763 + C4764 - C4765) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4929 - C4928 + C4931 - C4930) * C114 +
             (C4933 - C4932 + C4935 - C4934) * C47428) *
                C4745 +
            ((C4944 - C4945 + C4946 - C4947) * C114 +
             (C4948 - C4949 + C4950 - C4951) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4937 - C4936 + C4939 - C4938) * C114 +
             (C4941 - C4940 + C4943 - C4942) * C47428) *
                C4745 +
            ((C4952 - C4953 + C4954 - C4955) * C114 +
             (C4956 - C4957 + C4958 - C4959) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          ((((C4759 - C4758 + C4761 - C4760) * C114 +
             (C4763 - C4762 + C4765 - C4764) * C47428) *
                C4745 +
            ((C4766 - C4767 + C4768 - C4769) * C114 +
             (C4770 - C4771 + C4772 - C4773) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C4945 - C4944 + C4947 - C4946) * C114 +
             (C4949 - C4948 + C4951 - C4950) * C47428) *
                C4745 +
            ((C5268 - C5269 + C5270 - C5271) * C114 +
             (C5272 - C5273 + C5274 - C5275) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C4953 - C4952 + C4955 - C4954) * C114 +
             (C4957 - C4956 + C4959 - C4958) * C47428) *
                C4745 +
            ((C4743 * C318 - C4747 * C301 + C47523 * C1427 - C4748 * C1426) *
                 C114 +
             (C4743 * C331 - C4747 * C319 + C47523 * C1429 - C4748 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C114 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C47428) *
               C4745 +
           ((C4750 - C4751 + C4752 - C4753) * C114 +
            (C4754 - C4755 + C4756 - C4757) * C47428) *
               C47492) *
              C47226 * C1146 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C114 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C47428) *
               C4745 +
           ((C4928 - C4929 + C4930 - C4931) * C114 +
            (C4932 - C4933 + C4934 - C4935) * C47428) *
               C47492) *
              C47226 * C1147 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C114 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C47428) *
               C4745 +
           ((C4936 - C4937 + C4938 - C4939) * C114 +
            (C4940 - C4941 + C4942 - C4943) * C47428) *
               C47492) *
              C47226 * C1148 +
          (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C114 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C47428) *
               C4745 +
           ((C4747 * C1153 - C4743 * C1160 + C4748 * C1156 - C47523 * C1166) *
                C114 +
            (C4747 * C1161 - C4743 * C1171 + C4748 * C1167 - C47523 * C1174) *
                C47428) *
               C47492) *
              C47226 * C1149 +
          (((C4743 * C1164 - C4747 * C1155 + C47523 * C5853 - C4748 * C5851) *
                C114 +
            (C4743 * C1173 - C4747 * C1165 + C47523 * C5857 - C4748 * C5854) *
                C47428) *
               C4745 +
           ((C4743 * C1166 - C4747 * C1156 + C47523 * C5855 - C4748 * C5852) *
                C114 +
            (C4743 * C1174 - C4747 * C1167 + C47523 * C5858 - C4748 * C5856) *
                C47428) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C47267 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C47274 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     C11898 * C10400 + C11899 * C47525) *
                        C47492) *
                       C47226 * C2868) *
                      C47185 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C47267 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C47274 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     C11900 * C10400 + C11901 * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C2868) *
                      C47194 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C47267 +
                   ((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                     C11179 * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C47274 +
                   ((C361 * C10399 + C362 * C10397 + (C1594 - C1593) * C10400 +
                     (C1596 - C1595) * C47525) *
                        C4745 +
                    ((C356 - C355) * C10399 + (C358 - C357) * C10397 +
                     (C47411 * C1585 - C113 * C1584) * C10400 +
                     (C47411 * C1587 - C113 * C1586) * C47525) *
                        C47492) *
                       C47226 * C2868) *
                      C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C47474 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C47267 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C47474 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47313) *
                       C47274 +
                   ((((C47411 * C310 - C113 * C297) * C10399 +
                      (C47411 * C327 - C113 * C311) * C10397 +
                      (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                         C4745 +
                     ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                      C11898 * C10400 + C11899 * C47525) *
                         C47492) *
                        C47474 +
                    (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                      (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                         C4745 +
                     (C11900 * C10399 + C11901 * C10397 +
                      (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                         C47492) *
                        C47313) *
                       C2868) *
                      C2608 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C47474 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C47267 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C47474 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C47274 +
                   ((((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                      C11900 * C10400 + C11901 * C47525) *
                         C4745 +
                     ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                      (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                         C47492) *
                        C47474 +
                    ((C11898 * C10399 + C11899 * C10397 +
                      (C11567 - C11566) * C10400 + (C11569 - C11568) * C47525) *
                         C4745 +
                     ((C1594 - C1593) * C10399 + (C1596 - C1595) * C10397 +
                      (C47411 * C1311 - C113 * C1294) * C10400 +
                      (C47411 * C1321 - C113 * C1312) * C47525) *
                         C47492) *
                        C47313) *
                       C2868) *
                      C47191)) /
                (p * q * std::sqrt(p + q));
    d2ee[52] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C47551 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C47547 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     C11898 * C10400 + C11899 * C47525) *
                        C47492) *
                       C47226 * C47537 +
                   (((C113 * C1152 - C47411 * C1158) * C10399 +
                     (C113 * C1159 - C47411 * C1170) * C10397 +
                     (C12032 - C12033) * C10400 + (C12034 - C12035) * C47525) *
                        C4745 +
                    ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                     (C11700 - C11701) * C10400 + (C11702 - C11703) * C47525) *
                        C47492) *
                       C47226 * C47515) *
                      C2608 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C47551 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C47547 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     C11900 * C10400 + C11901 * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C47537 +
                   (((C1432 - C1431) * C10399 + (C1434 - C1433) * C10397 +
                     (C11701 - C11700) * C10400 + (C11703 - C11702) * C47525) *
                        C4745 +
                    ((C1436 - C1435) * C10399 + (C1438 - C1437) * C10397 +
                     (C47411 * C1701 - C113 * C1696) * C10400 +
                     (C47411 * C1705 - C113 * C1702) * C47525) *
                        C47492) *
                       C47226 * C47515) *
                      C47191)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C2500 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C47550 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C2500 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C47543 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C2500 +
                   ((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                     C11179 * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C47530 +
                  (((C166 * C10399 + C167 * C10397 + C10974 * C10400 +
                     C10975 * C47525) *
                        C4745 +
                    ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                     (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                        C47492) *
                       C47226 * C2500 +
                   ((C664 * C10399 + C665 * C10397 + (C961 - C960) * C10400 +
                     (C963 - C962) * C47525) *
                        C4745 +
                    ((C667 - C666) * C10399 + (C669 - C668) * C10397 +
                     (C47411 * C944 - C113 * C935) * C10400 +
                     (C47411 * C950 - C113 * C945) * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C47509)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C47545 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47534 +
                    (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                      (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                         C4745 +
                     (C10708 * C10399 + C10709 * C10397 + C12762 * C10400 +
                      C12763 * C47525) *
                         C47492) *
                        C47508) *
                       C2500 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C47545 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47534 +
                    (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                      (C12896 - C12897) * C10400 + (C12898 - C12899) * C47525) *
                         C4745 +
                     (C12626 * C10399 + C12627 * C10397 +
                      (C12628 - C12629) * C10400 + (C12630 - C12631) * C47525) *
                         C47492) *
                        C47508) *
                       C47271) *
                      C2608 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C47545 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47534 +
                    ((C10706 * C10399 + C10707 * C10397 + C12764 * C10400 +
                      C12765 * C47525) *
                         C4745 +
                     (C10712 * C10399 + C10713 * C10397 +
                      (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                         C47492) *
                        C47508) *
                       C2500 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C47545 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47534 +
                    ((C12624 * C10399 + C12625 * C10397 +
                      (C12629 - C12628) * C10400 + (C12631 - C12630) * C47525) *
                         C4745 +
                     ((C2176 - C2175) * C10399 + (C2178 - C2177) * C10397 +
                      (C47411 * C2397 - C113 * C2392) * C10400 +
                      (C47411 * C2401 - C113 * C2398) * C47525) *
                         C47492) *
                        C47508) *
                       C47271) *
                      C47191)) /
                    (p * q * std::sqrt(p + q));
    d2ee[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C47474 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C2500 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C47474 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47185 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C47474 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C2500 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C47474 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47194 +
                  ((((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                      C10711 * C47525) *
                         C4745 +
                     ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                      C777 * C10400 + C778 * C47525) *
                         C47492) *
                        C47474 +
                    ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                      C10713 * C47525) *
                         C4745 +
                     (C10974 * C10399 + C10975 * C10397 +
                      (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                         C47492) *
                        C47313) *
                       C2500 +
                   (((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                      C11179 * C47525) *
                         C4745 +
                     ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                      (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                         C47492) *
                        C47474 +
                    ((C964 * C10399 + C965 * C10397 + (C2176 - C2175) * C10400 +
                      (C2178 - C2177) * C47525) *
                         C4745 +
                     ((C961 - C960) * C10399 + (C963 - C962) * C10397 +
                      (C47411 * C2167 - C113 * C2166) * C10400 +
                      (C47411 * C2169 - C113 * C2168) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C2500 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C47550 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C2500 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C47543 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C2500 +
                   ((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                     C11179 * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C47530 +
                  (((C166 * C10399 + C167 * C10397 + C10974 * C10400 +
                     C10975 * C47525) *
                        C4745 +
                    ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                     (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                        C47492) *
                       C47226 * C2500 +
                   ((C664 * C10399 + C665 * C10397 + (C961 - C960) * C10400 +
                     (C963 - C962) * C47525) *
                        C4745 +
                    ((C667 - C666) * C10399 + (C669 - C668) * C10397 +
                     (C47411 * C944 - C113 * C935) * C10400 +
                     (C47411 * C950 - C113 * C945) * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C47509)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C47551 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C47547 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     C11898 * C10400 + C11899 * C47525) *
                        C47492) *
                       C47226 * C47537 +
                   (((C113 * C1152 - C47411 * C1158) * C10399 +
                     (C113 * C1159 - C47411 * C1170) * C10397 +
                     (C12032 - C12033) * C10400 + (C12034 - C12035) * C47525) *
                        C4745 +
                    ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                     (C11700 - C11701) * C10400 + (C11702 - C11703) * C47525) *
                        C47492) *
                       C47226 * C47515) *
                      C2608 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C47551 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C47547 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     C11900 * C10400 + C11901 * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C47537 +
                   (((C1432 - C1431) * C10399 + (C1434 - C1433) * C10397 +
                     (C11701 - C11700) * C10400 + (C11703 - C11702) * C47525) *
                        C4745 +
                    ((C1436 - C1435) * C10399 + (C1438 - C1437) * C10397 +
                     (C47411 * C1701 - C113 * C1696) * C10400 +
                     (C47411 * C1705 - C113 * C1702) * C47525) *
                        C47492) *
                       C47226 * C47515) *
                      C47191)) /
                    (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C3262 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C47267 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C3262 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47313) *
                       C47274 +
                   ((((C47411 * C310 - C113 * C297) * C10399 +
                      (C47411 * C327 - C113 * C311) * C10397 +
                      (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                         C4745 +
                     ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                      C11898 * C10400 + C11899 * C47525) *
                         C47492) *
                        C3262 +
                    (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                      (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                         C4745 +
                     (C11900 * C10399 + C11901 * C10397 +
                      (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                         C47492) *
                        C47313) *
                       C2868) *
                      C47459 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C3262 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C47267 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C3262 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C47274 +
                   ((((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                      C11900 * C10400 + C11901 * C47525) *
                         C4745 +
                     ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                      (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                         C47492) *
                        C3262 +
                    ((C11898 * C10399 + C11899 * C10397 +
                      (C11567 - C11566) * C10400 + (C11569 - C11568) * C47525) *
                         C4745 +
                     ((C1594 - C1593) * C10399 + (C1596 - C1595) * C10397 +
                      (C47411 * C1311 - C113 * C1294) * C10400 +
                      (C47411 * C1321 - C113 * C1312) * C47525) *
                         C47492) *
                        C47313) *
                       C2868) *
                      C47191)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47309 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47316 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 + C12762 * C10400 +
                     C12763 * C47525) *
                        C47492) *
                       C3770) *
                      C47267 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47309 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                     C12625 * C47525) *
                        C47492) *
                       C47316 +
                   (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                     (C12896 - C12897) * C10400 + (C12898 - C12899) * C47525) *
                        C4745 +
                    (C12626 * C10399 + C12627 * C10397 +
                     (C12628 - C12629) * C10400 + (C12630 - C12631) * C47525) *
                        C47492) *
                       C3770) *
                      C47274 +
                  ((((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     C11898 * C10400 + C11899 * C47525) *
                        C47492) *
                       C47309 +
                   (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                     (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                        C4745 +
                    (C11900 * C10399 + C11901 * C10397 +
                     (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                        C47492) *
                       C47316 +
                   (((C11563 - C11562) * C10399 + (C11565 - C11564) * C10397 +
                     (C47411 * C7345 - C113 * C7343) * C10400 +
                     (C47411 * C7349 - C113 * C7346) * C47525) *
                        C4745 +
                    ((C11567 - C11566) * C10399 + (C11569 - C11568) * C10397 +
                     (C47411 * C7347 - C113 * C7344) * C10400 +
                     (C47411 * C7350 - C113 * C7348) * C47525) *
                        C47492) *
                       C3770) *
                      C2868) *
                 C47180) /
                (p * q * std::sqrt(p + q));
    d2ee[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C3262 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47313) *
                      C47551 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C3262 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                     C12625 * C47525) *
                        C47492) *
                       C47313) *
                      C47547 +
                  ((((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     C11898 * C10400 + C11899 * C47525) *
                        C47492) *
                       C3262 +
                   (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                     (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                        C4745 +
                    (C11900 * C10399 + C11901 * C10397 +
                     (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                        C47492) *
                       C47313) *
                      C47537 +
                  ((((C113 * C1152 - C47411 * C1158) * C10399 +
                     (C113 * C1159 - C47411 * C1170) * C10397 +
                     (C12032 - C12033) * C10400 + (C12034 - C12035) * C47525) *
                        C4745 +
                    ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                     (C11700 - C11701) * C10400 + (C11702 - C11703) * C47525) *
                        C47492) *
                       C3262 +
                   (((C12033 - C12032) * C10399 + (C12035 - C12034) * C10397 +
                     (C47411 * C6007 - C113 * C6005) * C10400 +
                     (C47411 * C6011 - C113 * C6008) * C47525) *
                        C4745 +
                    ((C11701 - C11700) * C10399 + (C11703 - C11702) * C10397 +
                     (C47411 * C6009 - C113 * C6006) * C10400 +
                     (C47411 * C6012 - C113 * C6010) * C47525) *
                        C47492) *
                       C47313) *
                      C47515) *
                 C47180) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C3262 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C2500 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C3262 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47541 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C3262 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C2500 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C3262 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47528 +
                  ((((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                      C10711 * C47525) *
                         C4745 +
                     ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                      C777 * C10400 + C778 * C47525) *
                         C47492) *
                        C3262 +
                    ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                      C10713 * C47525) *
                         C4745 +
                     (C10974 * C10399 + C10975 * C10397 +
                      (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                         C47492) *
                        C47313) *
                       C2500 +
                   (((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                      C11179 * C47525) *
                         C4745 +
                     ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                      (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                         C47492) *
                        C3262 +
                    ((C964 * C10399 + C965 * C10397 + (C2176 - C2175) * C10400 +
                      (C2178 - C2177) * C47525) *
                         C4745 +
                     ((C961 - C960) * C10399 + (C963 - C962) * C10397 +
                      (C47411 * C2167 - C113 * C2166) * C10400 +
                      (C47411 * C2169 - C113 * C2168) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47552 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47549 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 + C12762 * C10400 +
                     C12763 * C47525) *
                        C47492) *
                       C47540 +
                   (((C12419 - C12418) * C10399 + (C12421 - C12420) * C10397 +
                     (C12422 - C12423) * C10400 + (C12424 - C12425) * C47525) *
                        C4745 +
                    (C12764 * C10399 + C12765 * C10397 +
                     (C12426 - C12427) * C10400 + (C12428 - C12429) * C47525) *
                        C47492) *
                       C47521) *
                      C2500 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47552 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                     C12625 * C47525) *
                        C47492) *
                       C47549 +
                   (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                     (C12896 - C12897) * C10400 + (C12898 - C12899) * C47525) *
                        C4745 +
                    (C12626 * C10399 + C12627 * C10397 +
                     (C12628 - C12629) * C10400 + (C12630 - C12631) * C47525) *
                        C47492) *
                       C47540 +
                   (((C12897 - C12896) * C10399 + (C12899 - C12898) * C10397 +
                     (C47411 * C6867 - C113 * C6865) * C10400 +
                     (C47411 * C6871 - C113 * C6868) * C47525) *
                        C4745 +
                    ((C12629 - C12628) * C10399 + (C12631 - C12630) * C10397 +
                     (C47411 * C6869 - C113 * C6866) * C10400 +
                     (C47411 * C6872 - C113 * C6870) * C47525) *
                        C47492) *
                       C47521) *
                      C47271) *
                 C47180) /
                    (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C47309 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47316 +
                    (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                      (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                         C4745 +
                     (C10708 * C10399 + C10709 * C10397 + C12762 * C10400 +
                      C12763 * C47525) *
                         C47492) *
                        C3770) *
                       C2500 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C47309 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47316 +
                    (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                      (C12896 - C12897) * C10400 + (C12898 - C12899) * C47525) *
                         C4745 +
                     (C12626 * C10399 + C12627 * C10397 +
                      (C12628 - C12629) * C10400 + (C12630 - C12631) * C47525) *
                         C47492) *
                        C3770) *
                       C47271) *
                      C47459 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C47309 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47316 +
                    ((C10706 * C10399 + C10707 * C10397 + C12764 * C10400 +
                      C12765 * C47525) *
                         C4745 +
                     (C10712 * C10399 + C10713 * C10397 +
                      (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                         C47492) *
                        C3770) *
                       C2500 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C47309 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47316 +
                    ((C12624 * C10399 + C12625 * C10397 +
                      (C12629 - C12628) * C10400 + (C12631 - C12630) * C47525) *
                         C4745 +
                     ((C2176 - C2175) * C10399 + (C2178 - C2177) * C10397 +
                      (C47411 * C2397 - C113 * C2392) * C10400 +
                      (C47411 * C2401 - C113 * C2398) * C47525) *
                         C47492) *
                        C3770) *
                       C47271) *
                      C47191)) /
                (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C3262 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C2500 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C3262 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47541 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C3262 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C2500 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C3262 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47528 +
                  ((((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                      C10711 * C47525) *
                         C4745 +
                     ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                      C777 * C10400 + C778 * C47525) *
                         C47492) *
                        C3262 +
                    ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                      C10713 * C47525) *
                         C4745 +
                     (C10974 * C10399 + C10975 * C10397 +
                      (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                         C47492) *
                        C47313) *
                       C2500 +
                   (((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                      C11179 * C47525) *
                         C4745 +
                     ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                      (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                         C47492) *
                        C3262 +
                    ((C964 * C10399 + C965 * C10397 + (C2176 - C2175) * C10400 +
                      (C2178 - C2177) * C47525) *
                         C4745 +
                     ((C961 - C960) * C10399 + (C963 - C962) * C10397 +
                      (C47411 * C2167 - C113 * C2166) * C10400 +
                      (C47411 * C2169 - C113 * C2168) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C3262 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47313) *
                      C47551 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C3262 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                     C12625 * C47525) *
                        C47492) *
                       C47313) *
                      C47547 +
                  ((((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     C11898 * C10400 + C11899 * C47525) *
                        C47492) *
                       C3262 +
                   (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                     (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                        C4745 +
                    (C11900 * C10399 + C11901 * C10397 +
                     (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                        C47492) *
                       C47313) *
                      C47537 +
                  ((((C113 * C1152 - C47411 * C1158) * C10399 +
                     (C113 * C1159 - C47411 * C1170) * C10397 +
                     (C12032 - C12033) * C10400 + (C12034 - C12035) * C47525) *
                        C4745 +
                    ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                     (C11700 - C11701) * C10400 + (C11702 - C11703) * C47525) *
                        C47492) *
                       C3262 +
                   (((C12033 - C12032) * C10399 + (C12035 - C12034) * C10397 +
                     (C47411 * C6007 - C113 * C6005) * C10400 +
                     (C47411 * C6011 - C113 * C6008) * C47525) *
                        C4745 +
                    ((C11701 - C11700) * C10399 + (C11703 - C11702) * C10397 +
                     (C47411 * C6009 - C113 * C6006) * C10400 +
                     (C47411 * C6012 - C113 * C6010) * C47525) *
                        C47492) *
                       C47313) *
                      C47515) *
                 C47180) /
                    (p * q * std::sqrt(p + q));
    d2ee[60] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C1420 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C1421 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47226 * C1422 +
                   (((C113 * C1152 - C47411 * C1158) * C10399 +
                     (C113 * C1159 - C47411 * C1170) * C10397 +
                     (C113 * C1694 - C47411 * C1697) * C10400 +
                     (C113 * C1698 - C47411 * C1703) * C47525) *
                        C4745 +
                    ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                     (C11700 - C11701) * C10400 + (C11702 - C11703) * C47525) *
                        C47492) *
                       C47226 * C47515) *
                      C47459 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C1420 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C1421 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     (C1589 - C1590) * C10400 + (C1591 - C1592) * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C1422 +
                   (((C1432 - C1431) * C10399 + (C1434 - C1433) * C10397 +
                     (C11701 - C11700) * C10400 + (C11703 - C11702) * C47525) *
                        C4745 +
                    ((C1436 - C1435) * C10399 + (C1438 - C1437) * C10397 +
                     (C47411 * C1701 - C113 * C1696) * C10400 +
                     (C47411 * C1705 - C113 * C1702) * C47525) *
                        C47492) *
                       C47226 * C47515) *
                      C47191)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C47473 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C113 * C931 - C47411 * C936) * C10400 +
                     (C113 * C937 - C47411 * C946) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     (C953 - C952) * C10400 + (C955 - C954) * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C655 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C47473 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     (C952 - C953) * C10400 + (C954 - C955) * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C656 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C47473 +
                   ((C359 * C10399 + C360 * C10397 + (C957 - C956) * C10400 +
                     (C959 - C958) * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C657 +
                  (((C166 * C10399 + C167 * C10397 + (C539 - C538) * C10400 +
                     (C541 - C540) * C47525) *
                        C4745 +
                    ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                     (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                        C47492) *
                       C47226 * C47473 +
                   ((C664 * C10399 + C665 * C10397 + (C961 - C960) * C10400 +
                     (C963 - C962) * C47525) *
                        C4745 +
                    ((C667 - C666) * C10399 + (C669 - C668) * C10397 +
                     (C47411 * C944 - C113 * C935) * C10400 +
                     (C47411 * C950 - C113 * C945) * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C47509)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C1816 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C1817 +
                    (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                      (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                         C4745 +
                     (C10708 * C10399 + C10709 * C10397 +
                      (C2286 - C2285) * C10400 + (C2288 - C2287) * C47525) *
                         C47492) *
                        C47508) *
                       C47473 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C1816 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C1817 +
                    (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                      (C113 * C2390 - C47411 * C2393) * C10400 +
                      (C113 * C2394 - C47411 * C2399) * C47525) *
                         C4745 +
                     (C12626 * C10399 + C12627 * C10397 +
                      (C12628 - C12629) * C10400 + (C12630 - C12631) * C47525) *
                         C47492) *
                        C47508) *
                       C47271) *
                      C47459 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C1816 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C1817 +
                    ((C10706 * C10399 + C10707 * C10397 +
                      (C2285 - C2286) * C10400 + (C2287 - C2288) * C47525) *
                         C4745 +
                     (C10712 * C10399 + C10713 * C10397 +
                      (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                         C47492) *
                        C47508) *
                       C47473 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C1816 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C1817 +
                    ((C12624 * C10399 + C12625 * C10397 +
                      (C12629 - C12628) * C10400 + (C12631 - C12630) * C47525) *
                         C4745 +
                     ((C2176 - C2175) * C10399 + (C2178 - C2177) * C10397 +
                      (C47411 * C2397 - C113 * C2392) * C10400 +
                      (C47411 * C2401 - C113 * C2398) * C47525) *
                         C47492) *
                        C47508) *
                       C47271) *
                      C47191)) /
                    (p * q * std::sqrt(p + q));
    d2ee[61] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47474 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47313) *
                      C1420 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47474 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 +
                     (C2172 - C2171) * C10400 + (C2174 - C2173) * C47525) *
                        C47492) *
                       C47313) *
                      C1421 +
                  ((((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     C11898 * C10400 + C11899 * C47525) *
                        C47492) *
                       C47474 +
                   (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                     (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                        C4745 +
                    (C11900 * C10399 + C11901 * C10397 +
                     (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                        C47492) *
                       C47313) *
                      C1422 +
                  ((((C113 * C1152 - C47411 * C1158) * C10399 +
                     (C113 * C1159 - C47411 * C1170) * C10397 +
                     (C12032 - C12033) * C10400 + (C12034 - C12035) * C47525) *
                        C4745 +
                    ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                     (C11700 - C11701) * C10400 + (C11702 - C11703) * C47525) *
                        C47492) *
                       C47474 +
                   (((C12033 - C12032) * C10399 + (C12035 - C12034) * C10397 +
                     (C47411 * C6007 - C113 * C6005) * C10400 +
                     (C47411 * C6011 - C113 * C6008) * C47525) *
                        C4745 +
                    ((C11701 - C11700) * C10399 + (C11703 - C11702) * C10397 +
                     (C47411 * C6009 - C113 * C6006) * C10400 +
                     (C47411 * C6012 - C113 * C6010) * C47525) *
                        C47492) *
                       C47313) *
                      C47515) *
                 C47180) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C47474 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C47473 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C47474 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C47411 * C1295 - C113 * C1286) * C10400 +
                      (C47411 * C1313 - C113 * C1296) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 +
                      (C2172 - C2171) * C10400 + (C2174 - C2173) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C291 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C47474 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C47473 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C47474 +
                    ((C11174 * C10399 + C11175 * C10397 +
                      (C2171 - C2172) * C10400 + (C2173 - C2174) * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C292 +
                  ((((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                      C10711 * C47525) *
                         C4745 +
                     ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                      C777 * C10400 + C778 * C47525) *
                         C47492) *
                        C47474 +
                    ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                      C10713 * C47525) *
                         C4745 +
                     (C10974 * C10399 + C10975 * C10397 +
                      (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                         C47492) *
                        C47313) *
                       C47473 +
                   (((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                      C11179 * C47525) *
                         C4745 +
                     ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                      (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                         C47492) *
                        C47474 +
                    ((C964 * C10399 + C965 * C10397 + (C2176 - C2175) * C10400 +
                      (C2178 - C2177) * C47525) *
                         C4745 +
                     ((C961 - C960) * C10399 + (C963 - C962) * C10397 +
                      (C47411 * C2167 - C113 * C2166) * C10400 +
                      (C47411 * C2169 - C113 * C2168) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C2276 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C2277 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 + C12762 * C10400 +
                     C12763 * C47525) *
                        C47492) *
                       C2278 +
                   (((C12419 - C12418) * C10399 + (C12421 - C12420) * C10397 +
                     (C12422 - C12423) * C10400 + (C12424 - C12425) * C47525) *
                        C4745 +
                    (C12764 * C10399 + C12765 * C10397 +
                     (C12426 - C12427) * C10400 + (C12428 - C12429) * C47525) *
                        C47492) *
                       C47521) *
                      C47473 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C2276 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                     C12625 * C47525) *
                        C47492) *
                       C2277 +
                   (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                     (C12896 - C12897) * C10400 + (C12898 - C12899) * C47525) *
                        C4745 +
                    (C12626 * C10399 + C12627 * C10397 +
                     (C12628 - C12629) * C10400 + (C12630 - C12631) * C47525) *
                        C47492) *
                       C2278 +
                   (((C12897 - C12896) * C10399 + (C12899 - C12898) * C10397 +
                     (C47411 * C6867 - C113 * C6865) * C10400 +
                     (C47411 * C6871 - C113 * C6868) * C47525) *
                        C4745 +
                    ((C12629 - C12628) * C10399 + (C12631 - C12630) * C10397 +
                     (C47411 * C6869 - C113 * C6866) * C10400 +
                     (C47411 * C6872 - C113 * C6870) * C47525) *
                        C47492) *
                       C47521) *
                      C47271) *
                 C47180) /
                    (p * q * std::sqrt(p + q));
    d2ee[62] += (0.5 * std::pow(Pi, 2.5) *
                     ((((C47411 * C122 - C113 * C115) * C10399 +
                        (C47411 * C136 - C113 * C123) * C10397 +
                        (C47411 * C491 - C113 * C481) * C10400 +
                        (C47411 * C511 - C113 * C492) * C47525) *
                           C4745 +
                       ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                        (C523 - C522) * C10400 + (C525 - C524) * C47525) *
                           C47492) *
                          C47226 * C47208 * C108 +
                      (((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                        (C522 - C523) * C10400 + (C524 - C525) * C47525) *
                           C4745 +
                       ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                        C546 * C10400 + C547 * C47525) *
                           C47492) *
                          C47226 * C47208 * C109 +
                      ((C164 * C10399 + C165 * C10397 + (C527 - C526) * C10400 +
                        (C529 - C528) * C47525) *
                           C4745 +
                       ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                        C777 * C10400 + C778 * C47525) *
                           C47492) *
                          C47226 * C47208 * C110 +
                      ((C166 * C10399 + C167 * C10397 + (C539 - C538) * C10400 +
                        (C541 - C540) * C47525) *
                           C4745 +
                       ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                        (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                           C47492) *
                          C47226 * C47208 * C111 +
                      ((C168 * C10399 + C169 * C10397 + (C780 - C779) * C10400 +
                        (C782 - C781) * C47525) *
                           C4745 +
                       ((C161 - C160) * C10399 + (C163 - C162) * C10397 +
                        (C47411 * C773 - C113 * C772) * C10400 +
                        (C47411 * C775 - C113 * C774) * C47525) *
                           C47492) *
                          C47226 * C47208 * C112) +
                 0.5 * std::pow(Pi, 2.5) *
                     (((((C47411 * C122 - C113 * C115) * C10399 +
                         (C47411 * C136 - C113 * C123) * C10397 +
                         (C47411 * C491 - C113 * C481) * C10400 +
                         (C47411 * C511 - C113 * C492) * C47525) *
                            C4745 +
                        ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                         (C523 - C522) * C10400 + (C525 - C524) * C47525) *
                            C47492) *
                           C47226 * C47544 +
                       (((C113 * C294 - C47411 * C304) * C10399 +
                         (C113 * C305 - C47411 * C324) * C10397 +
                         (C113 * C931 - C47411 * C936) * C10400 +
                         (C113 * C937 - C47411 * C946) * C47525) *
                            C4745 +
                        ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                         (C953 - C952) * C10400 + (C955 - C954) * C47525) *
                            C47492) *
                           C47226 * C47532 +
                       (((C47411 * C310 - C113 * C297) * C10399 +
                         (C47411 * C327 - C113 * C311) * C10397 +
                         (C47411 * C1301 - C113 * C1289) * C10400 +
                         (C47411 * C1316 - C113 * C1302) * C47525) *
                            C4745 +
                        ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                         (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                            C47492) *
                           C47226 * C47505) *
                          C291 +
                      ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                         (C522 - C523) * C10400 + (C524 - C525) * C47525) *
                            C4745 +
                        ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                         C546 * C10400 + C547 * C47525) *
                            C47492) *
                           C47226 * C47544 +
                       (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                         (C952 - C953) * C10400 + (C954 - C955) * C47525) *
                            C4745 +
                        ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                         C964 * C10400 + C965 * C47525) *
                            C47492) *
                           C47226 * C47532 +
                       (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                         (C1589 - C1590) * C10400 + (C1591 - C1592) * C47525) *
                            C4745 +
                        ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                         (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                            C47492) *
                           C47226 * C47505) *
                          C292 +
                      (((C164 * C10399 + C165 * C10397 +
                         (C527 - C526) * C10400 + (C529 - C528) * C47525) *
                            C4745 +
                        ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                         C777 * C10400 + C778 * C47525) *
                            C47492) *
                           C47226 * C47544 +
                       ((C359 * C10399 + C360 * C10397 +
                         (C957 - C956) * C10400 + (C959 - C958) * C47525) *
                            C4745 +
                        ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                         (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                            C47492) *
                           C47226 * C47532 +
                       ((C361 * C10399 + C362 * C10397 +
                         (C1594 - C1593) * C10400 + (C1596 - C1595) * C47525) *
                            C4745 +
                        ((C356 - C355) * C10399 + (C358 - C357) * C10397 +
                         (C47411 * C1585 - C113 * C1584) * C10400 +
                         (C47411 * C1587 - C113 * C1586) * C47525) *
                            C47492) *
                           C47226 * C47505) *
                          C47499)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47545 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47534 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C47411 * C2002 - C113 * C1996) * C10400 +
                     (C47411 * C2014 - C113 * C2003) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 +
                     (C2286 - C2285) * C10400 + (C2288 - C2287) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C291 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47545 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C47534 +
                   ((C10706 * C10399 + C10707 * C10397 +
                     (C2285 - C2286) * C10400 + (C2287 - C2288) * C47525) *
                        C4745 +
                    (C10712 * C10399 + C10713 * C10397 +
                     (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C292 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47545 +
                   ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                     C10713 * C47525) *
                        C4745 +
                    ((C539 - C538) * C10399 + (C541 - C540) * C10397 +
                     (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                        C47492) *
                       C47534 +
                   ((C548 * C10399 + C549 * C10397 + (C2290 - C2289) * C10400 +
                     (C2292 - C2291) * C47525) *
                        C4745 +
                    ((C543 - C542) * C10399 + (C545 - C544) * C10397 +
                     (C47411 * C2281 - C113 * C2280) * C10400 +
                     (C47411 * C2283 - C113 * C2282) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C47411 * C1301 - C113 * C1289) * C10400 +
                     (C47411 * C1316 - C113 * C1302) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47541 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     (C1589 - C1590) * C10400 + (C1591 - C1592) * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47528 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   ((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                     C11179 * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   ((C361 * C10399 + C362 * C10397 + (C1594 - C1593) * C10400 +
                     (C1596 - C1595) * C47525) *
                        C4745 +
                    ((C356 - C355) * C10399 + (C358 - C357) * C10397 +
                     (C47411 * C1585 - C113 * C1584) * C10400 +
                     (C47411 * C1587 - C113 * C1586) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C10399 +
                    (C47411 * C136 - C113 * C123) * C10397 +
                    (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                       C4745 +
                   ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                    C10698 * C10400 + C10699 * C47525) *
                       C47492) *
                      C47226 * C1146 +
                  (((C113 * C294 - C47411 * C304) * C10399 +
                    (C113 * C305 - C47411 * C324) * C10397 +
                    (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                       C4745 +
                   ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                    C11174 * C10400 + C11175 * C47525) *
                       C47492) *
                      C47226 * C1147 +
                  (((C47411 * C310 - C113 * C297) * C10399 +
                    (C47411 * C327 - C113 * C311) * C10397 +
                    (C47411 * C1301 - C113 * C1289) * C10400 +
                    (C47411 * C1316 - C113 * C1302) * C47525) *
                       C4745 +
                   ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                    (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                       C47492) *
                      C47226 * C1148 +
                  (((C113 * C1152 - C47411 * C1158) * C10399 +
                    (C113 * C1159 - C47411 * C1170) * C10397 +
                    (C113 * C1694 - C47411 * C1697) * C10400 +
                    (C113 * C1698 - C47411 * C1703) * C47525) *
                       C4745 +
                   ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                    (C113 * C1695 - C47411 * C1699) * C10400 +
                    (C113 * C1700 - C47411 * C1704) * C47525) *
                       C47492) *
                      C47226 * C1149 +
                  (((C47411 * C1164 - C113 * C1155) * C10399 +
                    (C47411 * C1173 - C113 * C1165) * C10397 +
                    (C47411 * C6485 - C113 * C6483) * C10400 +
                    (C47411 * C6489 - C113 * C6486) * C47525) *
                       C4745 +
                   ((C47411 * C1166 - C113 * C1156) * C10399 +
                    (C47411 * C1174 - C113 * C1167) * C10397 +
                    (C47411 * C6487 - C113 * C6484) * C10400 +
                    (C47411 * C6490 - C113 * C6488) * C47525) *
                       C47492) *
                      C47226 * C1150) *
                 C47180) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47545 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47534 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C47411 * C2002 - C113 * C1996) * C10400 +
                     (C47411 * C2014 - C113 * C2003) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 +
                     (C2286 - C2285) * C10400 + (C2288 - C2287) * C47525) *
                        C47492) *
                       C47508) *
                      C1078 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47545 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 +
                     (C2172 - C2171) * C10400 + (C2174 - C2173) * C47525) *
                        C47492) *
                       C47534 +
                   (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                     (C113 * C2390 - C47411 * C2393) * C10400 +
                     (C113 * C2394 - C47411 * C2399) * C47525) *
                        C4745 +
                    ((C2171 - C2172) * C10399 + (C2173 - C2174) * C10397 +
                     (C113 * C2391 - C47411 * C2395) * C10400 +
                     (C113 * C2396 - C47411 * C2400) * C47525) *
                        C47492) *
                       C47508) *
                      C1079 +
                  ((((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47545 +
                   (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                     (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                        C4745 +
                    ((C1589 - C1590) * C10399 + (C1591 - C1592) * C10397 +
                     (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                        C47492) *
                       C47534 +
                   (((C11563 - C11562) * C10399 + (C11565 - C11564) * C10397 +
                     (C47411 * C7345 - C113 * C7343) * C10400 +
                     (C47411 * C7349 - C113 * C7346) * C47525) *
                        C4745 +
                    ((C11567 - C11566) * C10399 + (C11569 - C11568) * C10397 +
                     (C47411 * C7347 - C113 * C7344) * C10400 +
                     (C47411 * C7350 - C113 * C7348) * C47525) *
                        C47492) *
                       C47508) *
                      C47505) *
                 C47180) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C1816 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C1817 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C47411 * C2002 - C113 * C1996) * C10400 +
                     (C47411 * C2014 - C113 * C2003) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 +
                     (C2286 - C2285) * C10400 + (C2288 - C2287) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C47541 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C1816 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C1817 +
                   ((C10706 * C10399 + C10707 * C10397 +
                     (C2285 - C2286) * C10400 + (C2287 - C2288) * C47525) *
                        C4745 +
                    (C10712 * C10399 + C10713 * C10397 +
                     (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C47528 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C1816 +
                   ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                     C10713 * C47525) *
                        C4745 +
                    (C10974 * C10399 + C10975 * C10397 +
                     (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                        C47492) *
                       C1817 +
                   ((C548 * C10399 + C549 * C10397 + (C2290 - C2289) * C10400 +
                     (C2292 - C2291) * C47525) *
                        C4745 +
                    ((C543 - C542) * C10399 + (C545 - C544) * C10397 +
                     (C47411 * C2281 - C113 * C2280) * C10400 +
                     (C47411 * C2283 - C113 * C2282) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C47499)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C1816 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C1817 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C47411 * C2002 - C113 * C1996) * C10400 +
                     (C47411 * C2014 - C113 * C2003) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 +
                     (C2286 - C2285) * C10400 + (C2288 - C2287) * C47525) *
                        C47492) *
                       C47508) *
                      C47544 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C1816 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 +
                     (C2172 - C2171) * C10400 + (C2174 - C2173) * C47525) *
                        C47492) *
                       C1817 +
                   (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                     (C113 * C2390 - C47411 * C2393) * C10400 +
                     (C113 * C2394 - C47411 * C2399) * C47525) *
                        C4745 +
                    ((C2171 - C2172) * C10399 + (C2173 - C2174) * C10397 +
                     (C113 * C2391 - C47411 * C2395) * C10400 +
                     (C113 * C2396 - C47411 * C2400) * C47525) *
                        C47492) *
                       C47508) *
                      C47532 +
                  ((((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     C11898 * C10400 + C11899 * C47525) *
                        C47492) *
                       C1816 +
                   (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                     (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                        C4745 +
                    (C11900 * C10399 + C11901 * C10397 +
                     (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                        C47492) *
                       C1817 +
                   (((C11563 - C11562) * C10399 + (C11565 - C11564) * C10397 +
                     (C47411 * C7345 - C113 * C7343) * C10400 +
                     (C47411 * C7349 - C113 * C7346) * C47525) *
                        C4745 +
                    ((C11567 - C11566) * C10399 + (C11569 - C11568) * C10397 +
                     (C47411 * C7347 - C113 * C7344) * C10400 +
                     (C47411 * C7350 - C113 * C7348) * C47525) *
                        C47492) *
                       C47508) *
                      C47505) *
                 C47180) /
                    (p * q * std::sqrt(p + q)) +
                (2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C10399 +
                    (C47411 * C136 - C113 * C123) * C10397 +
                    (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                       C4745 +
                   ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                    C10698 * C10400 + C10699 * C47525) *
                       C47492) *
                      C1991 +
                  (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                    (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                       C4745 +
                   (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                    C10707 * C47525) *
                       C47492) *
                      C1992 +
                  (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                    (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                       C4745 +
                   (C10708 * C10399 + C10709 * C10397 +
                    (C2286 - C2285) * C10400 + (C2288 - C2287) * C47525) *
                       C47492) *
                      C1993 +
                  (((C12419 - C12418) * C10399 + (C12421 - C12420) * C10397 +
                    (C12422 - C12423) * C10400 + (C12424 - C12425) * C47525) *
                       C4745 +
                   ((C2285 - C2286) * C10399 + (C2287 - C2288) * C10397 +
                    (C12426 - C12427) * C10400 + (C12428 - C12429) * C47525) *
                       C47492) *
                      C1994 +
                  (((C12423 - C12422) * C10399 + (C12425 - C12424) * C10397 +
                    (C47411 * C12411 - C113 * C12409) * C10400 +
                    (C47411 * C12415 - C113 * C12412) * C47525) *
                       C4745 +
                   ((C12427 - C12426) * C10399 + (C12429 - C12428) * C10397 +
                    (C47411 * C12413 - C113 * C12410) * C10400 +
                    (C47411 * C12416 - C113 * C12414) * C47525) *
                       C47492) *
                      C1995) *
                 C47208 * C47180) /
                    (p * q * std::sqrt(p + q));
    d2ee[63] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C47474 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C1078 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C47474 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 +
                      (C2172 - C2171) * C10400 + (C2174 - C2173) * C47525) *
                         C47492) *
                        C47313) *
                       C1079 +
                   ((((C47411 * C310 - C113 * C297) * C10399 +
                      (C47411 * C327 - C113 * C311) * C10397 +
                      (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                         C4745 +
                     ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                      C11898 * C10400 + C11899 * C47525) *
                         C47492) *
                        C47474 +
                    (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                      (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                         C4745 +
                     (C11900 * C10399 + C11901 * C10397 +
                      (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                         C47492) *
                        C47313) *
                       C47505) *
                      C47459 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C47474 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C1078 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C47474 +
                    ((C11174 * C10399 + C11175 * C10397 +
                      (C2171 - C2172) * C10400 + (C2173 - C2174) * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C1079 +
                   ((((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                      C11900 * C10400 + C11901 * C47525) *
                         C4745 +
                     ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                      (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                         C47492) *
                        C47474 +
                    ((C11898 * C10399 + C11899 * C10397 +
                      (C11567 - C11566) * C10400 + (C11569 - C11568) * C47525) *
                         C4745 +
                     ((C1594 - C1593) * C10399 + (C1596 - C1595) * C10397 +
                      (C47411 * C1311 - C113 * C1294) * C10400 +
                      (C47411 * C1321 - C113 * C1312) * C47525) *
                         C47492) *
                        C47313) *
                       C47505) *
                      C47191)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47474 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C655 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47474 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C656 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47474 +
                   ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                     C10713 * C47525) *
                        C4745 +
                    (C10974 * C10399 + C10975 * C10397 +
                     (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C657 +
                  (((C166 * C10399 + C167 * C10397 + C10974 * C10400 +
                     C10975 * C47525) *
                        C4745 +
                    ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                     (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                        C47492) *
                       C47474 +
                   ((C777 * C10399 + C778 * C10397 + (C543 - C542) * C10400 +
                     (C545 - C544) * C47525) *
                        C4745 +
                    ((C780 - C779) * C10399 + (C782 - C781) * C10397 +
                     (C47411 * C509 - C113 * C490) * C10400 +
                     (C47411 * C520 - C113 * C510) * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C47509)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C2276 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C2277 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 + C12762 * C10400 +
                     C12763 * C47525) *
                        C47492) *
                       C2278 +
                   (((C12419 - C12418) * C10399 + (C12421 - C12420) * C10397 +
                     (C12422 - C12423) * C10400 + (C12424 - C12425) * C47525) *
                        C4745 +
                    (C12764 * C10399 + C12765 * C10397 +
                     (C12426 - C12427) * C10400 + (C12428 - C12429) * C47525) *
                        C47492) *
                       C47521) *
                      C47208 * C47459 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C2276 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C2277 +
                   ((C10706 * C10399 + C10707 * C10397 + C12764 * C10400 +
                     C12765 * C47525) *
                        C4745 +
                    (C10712 * C10399 + C10713 * C10397 +
                     (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                        C47492) *
                       C2278 +
                   ((C12762 * C10399 + C12763 * C10397 +
                     (C12427 - C12426) * C10400 + (C12429 - C12428) * C47525) *
                        C4745 +
                    ((C2290 - C2289) * C10399 + (C2292 - C2291) * C10397 +
                     (C47411 * C2012 - C113 * C2001) * C10400 +
                     (C47411 * C2019 - C113 * C2013) * C47525) *
                        C47492) *
                       C47521) *
                      C47208 * C47191)) /
                    (p * q * std::sqrt(p + q));
    d2ee[64] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C47411 * C491 - C113 * C481) * C10400 +
                     (C47411 * C511 - C113 * C492) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     (C523 - C522) * C10400 + (C525 - C524) * C47525) *
                        C47492) *
                       C47226 * C47544 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C113 * C931 - C47411 * C936) * C10400 +
                     (C113 * C937 - C47411 * C946) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     (C953 - C952) * C10400 + (C955 - C954) * C47525) *
                        C47492) *
                       C47226 * C47532 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C47411 * C1301 - C113 * C1289) * C10400 +
                     (C47411 * C1316 - C113 * C1302) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C291 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     (C522 - C523) * C10400 + (C524 - C525) * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C47544 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     (C952 - C953) * C10400 + (C954 - C955) * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C47532 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     (C1589 - C1590) * C10400 + (C1591 - C1592) * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C292 +
                  (((C164 * C10399 + C165 * C10397 + (C527 - C526) * C10400 +
                     (C529 - C528) * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C47544 +
                   ((C359 * C10399 + C360 * C10397 + (C957 - C956) * C10400 +
                     (C959 - C958) * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C47532 +
                   ((C361 * C10399 + C362 * C10397 + (C1594 - C1593) * C10400 +
                     (C1596 - C1595) * C47525) *
                        C4745 +
                    ((C356 - C355) * C10399 + (C358 - C357) * C10397 +
                     (C47411 * C1585 - C113 * C1584) * C10400 +
                     (C47411 * C1587 - C113 * C1586) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C10399 +
                    (C47411 * C136 - C113 * C123) * C10397 +
                    (C47411 * C491 - C113 * C481) * C10400 +
                    (C47411 * C511 - C113 * C492) * C47525) *
                       C4745 +
                   ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                    (C523 - C522) * C10400 + (C525 - C524) * C47525) *
                       C47492) *
                      C47226 * C47208 * C108 +
                  (((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                    (C522 - C523) * C10400 + (C524 - C525) * C47525) *
                       C4745 +
                   ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                    C546 * C10400 + C547 * C47525) *
                       C47492) *
                      C47226 * C47208 * C109 +
                  ((C164 * C10399 + C165 * C10397 + (C527 - C526) * C10400 +
                    (C529 - C528) * C47525) *
                       C4745 +
                   ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                    C777 * C10400 + C778 * C47525) *
                       C47492) *
                      C47226 * C47208 * C110 +
                  ((C166 * C10399 + C167 * C10397 + (C539 - C538) * C10400 +
                    (C541 - C540) * C47525) *
                       C4745 +
                   ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                    (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                       C47492) *
                      C47226 * C47208 * C111 +
                  ((C168 * C10399 + C169 * C10397 + (C780 - C779) * C10400 +
                    (C782 - C781) * C47525) *
                       C4745 +
                   ((C161 - C160) * C10399 + (C163 - C162) * C10397 +
                    (C47411 * C773 - C113 * C772) * C10400 +
                    (C47411 * C775 - C113 * C774) * C47525) *
                       C47492) *
                      C47226 * C47208 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C47411 * C1301 - C113 * C1289) * C10400 +
                     (C47411 * C1316 - C113 * C1302) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47541 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     (C1589 - C1590) * C10400 + (C1591 - C1592) * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47528 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   ((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                     C11179 * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   ((C361 * C10399 + C362 * C10397 + (C1594 - C1593) * C10400 +
                     (C1596 - C1595) * C47525) *
                        C4745 +
                    ((C356 - C355) * C10399 + (C358 - C357) * C10397 +
                     (C47411 * C1585 - C113 * C1584) * C10400 +
                     (C47411 * C1587 - C113 * C1586) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C10399 +
                    (C47411 * C136 - C113 * C123) * C10397 +
                    (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                       C4745 +
                   ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                    C10698 * C10400 + C10699 * C47525) *
                       C47492) *
                      C47226 * C1146 +
                  (((C113 * C294 - C47411 * C304) * C10399 +
                    (C113 * C305 - C47411 * C324) * C10397 +
                    (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                       C4745 +
                   ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                    C11174 * C10400 + C11175 * C47525) *
                       C47492) *
                      C47226 * C1147 +
                  (((C47411 * C310 - C113 * C297) * C10399 +
                    (C47411 * C327 - C113 * C311) * C10397 +
                    (C47411 * C1301 - C113 * C1289) * C10400 +
                    (C47411 * C1316 - C113 * C1302) * C47525) *
                       C4745 +
                   ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                    (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                       C47492) *
                      C47226 * C1148 +
                  (((C113 * C1152 - C47411 * C1158) * C10399 +
                    (C113 * C1159 - C47411 * C1170) * C10397 +
                    (C113 * C1694 - C47411 * C1697) * C10400 +
                    (C113 * C1698 - C47411 * C1703) * C47525) *
                       C4745 +
                   ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                    (C113 * C1695 - C47411 * C1699) * C10400 +
                    (C113 * C1700 - C47411 * C1704) * C47525) *
                       C47492) *
                      C47226 * C1149 +
                  (((C47411 * C1164 - C113 * C1155) * C10399 +
                    (C47411 * C1173 - C113 * C1165) * C10397 +
                    (C47411 * C6485 - C113 * C6483) * C10400 +
                    (C47411 * C6489 - C113 * C6486) * C47525) *
                       C4745 +
                   ((C47411 * C1166 - C113 * C1156) * C10399 +
                    (C47411 * C1174 - C113 * C1167) * C10397 +
                    (C47411 * C6487 - C113 * C6484) * C10400 +
                    (C47411 * C6490 - C113 * C6488) * C47525) *
                       C47492) *
                      C47226 * C1150) *
                 C47180) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C1816 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C1817 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C47411 * C2002 - C113 * C1996) * C10400 +
                     (C47411 * C2014 - C113 * C2003) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 +
                     (C2286 - C2285) * C10400 + (C2288 - C2287) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C47541 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C1816 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C1817 +
                   ((C10706 * C10399 + C10707 * C10397 +
                     (C2285 - C2286) * C10400 + (C2287 - C2288) * C47525) *
                        C4745 +
                    (C10712 * C10399 + C10713 * C10397 +
                     (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C47528 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C1816 +
                   ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                     C10713 * C47525) *
                        C4745 +
                    (C10974 * C10399 + C10975 * C10397 +
                     (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                        C47492) *
                       C1817 +
                   ((C548 * C10399 + C549 * C10397 + (C2290 - C2289) * C10400 +
                     (C2292 - C2291) * C47525) *
                        C4745 +
                    ((C543 - C542) * C10399 + (C545 - C544) * C10397 +
                     (C47411 * C2281 - C113 * C2280) * C10400 +
                     (C47411 * C2283 - C113 * C2282) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C47499)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C1816 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C1817 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C47411 * C2002 - C113 * C1996) * C10400 +
                     (C47411 * C2014 - C113 * C2003) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 +
                     (C2286 - C2285) * C10400 + (C2288 - C2287) * C47525) *
                        C47492) *
                       C47508) *
                      C47544 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C1816 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 +
                     (C2172 - C2171) * C10400 + (C2174 - C2173) * C47525) *
                        C47492) *
                       C1817 +
                   (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                     (C113 * C2390 - C47411 * C2393) * C10400 +
                     (C113 * C2394 - C47411 * C2399) * C47525) *
                        C4745 +
                    ((C2171 - C2172) * C10399 + (C2173 - C2174) * C10397 +
                     (C113 * C2391 - C47411 * C2395) * C10400 +
                     (C113 * C2396 - C47411 * C2400) * C47525) *
                        C47492) *
                       C47508) *
                      C47532 +
                  ((((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     C11898 * C10400 + C11899 * C47525) *
                        C47492) *
                       C1816 +
                   (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                     (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                        C4745 +
                    (C11900 * C10399 + C11901 * C10397 +
                     (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                        C47492) *
                       C1817 +
                   (((C11563 - C11562) * C10399 + (C11565 - C11564) * C10397 +
                     (C47411 * C7345 - C113 * C7343) * C10400 +
                     (C47411 * C7349 - C113 * C7346) * C47525) *
                        C4745 +
                    ((C11567 - C11566) * C10399 + (C11569 - C11568) * C10397 +
                     (C47411 * C7347 - C113 * C7344) * C10400 +
                     (C47411 * C7350 - C113 * C7348) * C47525) *
                        C47492) *
                       C47508) *
                      C47505) *
                 C47180) /
                    (p * q * std::sqrt(p + q));
    d2ee[65] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C3262 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C47473 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C3262 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47185 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C3262 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C47473 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C3262 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47194 +
                  ((((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                      C10711 * C47525) *
                         C4745 +
                     ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                      C777 * C10400 + C778 * C47525) *
                         C47492) *
                        C3262 +
                    ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                      C10713 * C47525) *
                         C4745 +
                     (C10974 * C10399 + C10975 * C10397 +
                      (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                         C47492) *
                        C47313) *
                       C47473 +
                   (((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                      C11179 * C47525) *
                         C4745 +
                     ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                      (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                         C47492) *
                        C3262 +
                    ((C964 * C10399 + C965 * C10397 + (C2176 - C2175) * C10400 +
                      (C2178 - C2177) * C47525) *
                         C4745 +
                     ((C961 - C960) * C10399 + (C963 - C962) * C10397 +
                      (C47411 * C2167 - C113 * C2166) * C10400 +
                      (C47411 * C2169 - C113 * C2168) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[66] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C47309 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47316 +
                    (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                      (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                         C4745 +
                     (C10708 * C10399 + C10709 * C10397 + C12762 * C10400 +
                      C12763 * C47525) *
                         C47492) *
                        C3770) *
                       C47473 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C47309 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47316 +
                    (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                      (C12896 - C12897) * C10400 + (C12898 - C12899) * C47525) *
                         C4745 +
                     (C12626 * C10399 + C12627 * C10397 +
                      (C12628 - C12629) * C10400 + (C12630 - C12631) * C47525) *
                         C47492) *
                        C3770) *
                       C47271) *
                      C2608 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C47309 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47316 +
                    ((C10706 * C10399 + C10707 * C10397 + C12764 * C10400 +
                      C12765 * C47525) *
                         C4745 +
                     (C10712 * C10399 + C10713 * C10397 +
                      (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                         C47492) *
                        C3770) *
                       C47473 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C47309 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47316 +
                    ((C12624 * C10399 + C12625 * C10397 +
                      (C12629 - C12628) * C10400 + (C12631 - C12630) * C47525) *
                         C4745 +
                     ((C2176 - C2175) * C10399 + (C2178 - C2177) * C10397 +
                      (C47411 * C2397 - C113 * C2392) * C10400 +
                      (C47411 * C2401 - C113 * C2398) * C47525) *
                         C47492) *
                        C3770) *
                       C47271) *
                      C47191)) /
                (p * q * std::sqrt(p + q));
    d2ee[67] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C3262 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C47544 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C3262 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47313) *
                       C47532 +
                   ((((C47411 * C310 - C113 * C297) * C10399 +
                      (C47411 * C327 - C113 * C311) * C10397 +
                      (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                         C4745 +
                     ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                      C11898 * C10400 + C11899 * C47525) *
                         C47492) *
                        C3262 +
                    (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                      (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                         C4745 +
                     (C11900 * C10399 + C11901 * C10397 +
                      (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                         C47492) *
                        C47313) *
                       C47505) *
                      C2608 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C3262 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C47544 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C3262 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C47532 +
                   ((((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                      C11900 * C10400 + C11901 * C47525) *
                         C4745 +
                     ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                      (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                         C47492) *
                        C3262 +
                    ((C11898 * C10399 + C11899 * C10397 +
                      (C11567 - C11566) * C10400 + (C11569 - C11568) * C47525) *
                         C4745 +
                     ((C1594 - C1593) * C10399 + (C1596 - C1595) * C10397 +
                      (C47411 * C1311 - C113 * C1294) * C10400 +
                      (C47411 * C1321 - C113 * C1312) * C47525) *
                         C47492) *
                        C47313) *
                       C47505) *
                      C47191)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C3262 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C47550 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C3262 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C47543 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C3262 +
                   ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                     C10713 * C47525) *
                        C4745 +
                    (C10974 * C10399 + C10975 * C10397 +
                     (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C47530 +
                  (((C166 * C10399 + C167 * C10397 + C10974 * C10400 +
                     C10975 * C47525) *
                        C4745 +
                    ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                     (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                        C47492) *
                       C3262 +
                   ((C777 * C10399 + C778 * C10397 + (C543 - C542) * C10400 +
                     (C545 - C544) * C47525) *
                        C4745 +
                    ((C780 - C779) * C10399 + (C782 - C781) * C10397 +
                     (C47411 * C509 - C113 * C490) * C10400 +
                     (C47411 * C520 - C113 * C510) * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C47509)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47552 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47549 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 + C12762 * C10400 +
                     C12763 * C47525) *
                        C47492) *
                       C47540 +
                   (((C12419 - C12418) * C10399 + (C12421 - C12420) * C10397 +
                     (C12422 - C12423) * C10400 + (C12424 - C12425) * C47525) *
                        C4745 +
                    (C12764 * C10399 + C12765 * C10397 +
                     (C12426 - C12427) * C10400 + (C12428 - C12429) * C47525) *
                        C47492) *
                       C47521) *
                      C47208 * C2608 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47552 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C47549 +
                   ((C10706 * C10399 + C10707 * C10397 + C12764 * C10400 +
                     C12765 * C47525) *
                        C4745 +
                    (C10712 * C10399 + C10713 * C10397 +
                     (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                        C47492) *
                       C47540 +
                   ((C12762 * C10399 + C12763 * C10397 +
                     (C12427 - C12426) * C10400 + (C12429 - C12428) * C47525) *
                        C4745 +
                    ((C2290 - C2289) * C10399 + (C2292 - C2291) * C10397 +
                     (C47411 * C2012 - C113 * C2001) * C10400 +
                     (C47411 * C2019 - C113 * C2013) * C47525) *
                        C47492) *
                       C47521) *
                      C47208 * C47191)) /
                    (p * q * std::sqrt(p + q));
    d2ee[68] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47309 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47316 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C12418 - C12419) * C10400 + (C12420 - C12421) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 + C12762 * C10400 +
                     C12763 * C47525) *
                        C47492) *
                       C3770) *
                      C47208 * C47185 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47309 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C47316 +
                   ((C10706 * C10399 + C10707 * C10397 + C12764 * C10400 +
                     C12765 * C47525) *
                        C4745 +
                    (C10712 * C10399 + C10713 * C10397 +
                     (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                        C47492) *
                       C3770) *
                      C47208 * C47194 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47309 +
                   ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                     C10713 * C47525) *
                        C4745 +
                    (C10974 * C10399 + C10975 * C10397 +
                     (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                        C47492) *
                       C47316 +
                   ((C548 * C10399 + C549 * C10397 + (C2290 - C2289) * C10400 +
                     (C2292 - C2291) * C47525) *
                        C4745 +
                    ((C543 - C542) * C10399 + (C545 - C544) * C10397 +
                     (C47411 * C2281 - C113 * C2280) * C10400 +
                     (C47411 * C2283 - C113 * C2282) * C47525) *
                        C47492) *
                       C3770) *
                      C47208 * C2871)) /
                (p * q * std::sqrt(p + q));
    d2ee[69] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C3262 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C47550 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C3262 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C47543 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C3262 +
                   ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                     C10713 * C47525) *
                        C4745 +
                    (C10974 * C10399 + C10975 * C10397 +
                     (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C47530 +
                  (((C166 * C10399 + C167 * C10397 + C10974 * C10400 +
                     C10975 * C47525) *
                        C4745 +
                    ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                     (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                        C47492) *
                       C3262 +
                   ((C777 * C10399 + C778 * C10397 + (C543 - C542) * C10400 +
                     (C545 - C544) * C47525) *
                        C4745 +
                    ((C780 - C779) * C10399 + (C782 - C781) * C10397 +
                     (C47411 * C509 - C113 * C490) * C10400 +
                     (C47411 * C520 - C113 * C510) * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C47509)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C3262 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C47544 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C3262 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 + C12624 * C10400 +
                      C12625 * C47525) *
                         C47492) *
                        C47313) *
                       C47532 +
                   ((((C47411 * C310 - C113 * C297) * C10399 +
                      (C47411 * C327 - C113 * C311) * C10397 +
                      (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                         C4745 +
                     ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                      C11898 * C10400 + C11899 * C47525) *
                         C47492) *
                        C3262 +
                    (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                      (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                         C4745 +
                     (C11900 * C10399 + C11901 * C10397 +
                      (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                         C47492) *
                        C47313) *
                       C47505) *
                      C2608 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C3262 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C47544 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C3262 +
                    ((C11174 * C10399 + C11175 * C10397 + C12626 * C10400 +
                      C12627 * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C47532 +
                   ((((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                      C11900 * C10400 + C11901 * C47525) *
                         C4745 +
                     ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                      (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                         C47492) *
                        C3262 +
                    ((C11898 * C10399 + C11899 * C10397 +
                      (C11567 - C11566) * C10400 + (C11569 - C11568) * C47525) *
                         C4745 +
                     ((C1594 - C1593) * C10399 + (C1596 - C1595) * C10397 +
                      (C47411 * C1311 - C113 * C1294) * C10400 +
                      (C47411 * C1321 - C113 * C1312) * C47525) *
                         C47492) *
                        C47313) *
                       C47505) *
                      C47191)) /
                    (p * q * std::sqrt(p + q));
    d2ee[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C47473 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C113 * C931 - C47411 * C936) * C10400 +
                     (C113 * C937 - C47411 * C946) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     (C953 - C952) * C10400 + (C955 - C954) * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C655 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C47473 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     (C952 - C953) * C10400 + (C954 - C955) * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C656 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C47473 +
                   ((C359 * C10399 + C360 * C10397 + (C957 - C956) * C10400 +
                     (C959 - C958) * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C657 +
                  (((C166 * C10399 + C167 * C10397 + (C539 - C538) * C10400 +
                     (C541 - C540) * C47525) *
                        C4745 +
                    ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                     (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                        C47492) *
                       C47226 * C47473 +
                   ((C664 * C10399 + C665 * C10397 + (C961 - C960) * C10400 +
                     (C963 - C962) * C47525) *
                        C4745 +
                    ((C667 - C666) * C10399 + (C669 - C668) * C10397 +
                     (C47411 * C944 - C113 * C935) * C10400 +
                     (C47411 * C950 - C113 * C945) * C47525) *
                        C47492) *
                       C47226 * C47271) *
                      C47509)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C1420 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C1421 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47226 * C1422 +
                   (((C113 * C1152 - C47411 * C1158) * C10399 +
                     (C113 * C1159 - C47411 * C1170) * C10397 +
                     (C113 * C1694 - C47411 * C1697) * C10400 +
                     (C113 * C1698 - C47411 * C1703) * C47525) *
                        C4745 +
                    ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                     (C11700 - C11701) * C10400 + (C11702 - C11703) * C47525) *
                        C47492) *
                       C47226 * C47515) *
                      C47459 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C1420 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C1421 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     (C1589 - C1590) * C10400 + (C1591 - C1592) * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C1422 +
                   (((C1432 - C1431) * C10399 + (C1434 - C1433) * C10397 +
                     (C11701 - C11700) * C10400 + (C11703 - C11702) * C47525) *
                        C4745 +
                    ((C1436 - C1435) * C10399 + (C1438 - C1437) * C10397 +
                     (C47411 * C1701 - C113 * C1696) * C10400 +
                     (C47411 * C1705 - C113 * C1702) * C47525) *
                        C47492) *
                       C47226 * C47515) *
                      C47191)) /
                    (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C47474 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C47473 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C47474 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C47411 * C1295 - C113 * C1286) * C10400 +
                      (C47411 * C1313 - C113 * C1296) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 +
                      (C2172 - C2171) * C10400 + (C2174 - C2173) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C291 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C47474 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C47473 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C47474 +
                    ((C11174 * C10399 + C11175 * C10397 +
                      (C2171 - C2172) * C10400 + (C2173 - C2174) * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C292 +
                  ((((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                      C10711 * C47525) *
                         C4745 +
                     ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                      C777 * C10400 + C778 * C47525) *
                         C47492) *
                        C47474 +
                    ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                      C10713 * C47525) *
                         C4745 +
                     (C10974 * C10399 + C10975 * C10397 +
                      (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                         C47492) *
                        C47313) *
                       C47473 +
                   (((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                      C11179 * C47525) *
                         C4745 +
                     ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                      (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                         C47492) *
                        C47474 +
                    ((C964 * C10399 + C965 * C10397 + (C2176 - C2175) * C10400 +
                      (C2178 - C2177) * C47525) *
                         C4745 +
                     ((C961 - C960) * C10399 + (C963 - C962) * C10397 +
                      (C47411 * C2167 - C113 * C2166) * C10400 +
                      (C47411 * C2169 - C113 * C2168) * C47525) *
                         C47492) *
                        C47313) *
                       C47271) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47474 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47313) *
                      C1420 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47474 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 +
                     (C2172 - C2171) * C10400 + (C2174 - C2173) * C47525) *
                        C47492) *
                       C47313) *
                      C1421 +
                  ((((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     C11898 * C10400 + C11899 * C47525) *
                        C47492) *
                       C47474 +
                   (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                     (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                        C4745 +
                    (C11900 * C10399 + C11901 * C10397 +
                     (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                        C47492) *
                       C47313) *
                      C1422 +
                  ((((C113 * C1152 - C47411 * C1158) * C10399 +
                     (C113 * C1159 - C47411 * C1170) * C10397 +
                     (C12032 - C12033) * C10400 + (C12034 - C12035) * C47525) *
                        C4745 +
                    ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                     (C11700 - C11701) * C10400 + (C11702 - C11703) * C47525) *
                        C47492) *
                       C47474 +
                   (((C12033 - C12032) * C10399 + (C12035 - C12034) * C10397 +
                     (C47411 * C6007 - C113 * C6005) * C10400 +
                     (C47411 * C6011 - C113 * C6008) * C47525) *
                        C4745 +
                    ((C11701 - C11700) * C10399 + (C11703 - C11702) * C10397 +
                     (C47411 * C6009 - C113 * C6006) * C10400 +
                     (C47411 * C6012 - C113 * C6010) * C47525) *
                        C47492) *
                       C47313) *
                      C47515) *
                 C47180) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C47411 * C491 - C113 * C481) * C10400 +
                     (C47411 * C511 - C113 * C492) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     (C523 - C522) * C10400 + (C525 - C524) * C47525) *
                        C47492) *
                       C47226 * C47544 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C113 * C931 - C47411 * C936) * C10400 +
                     (C113 * C937 - C47411 * C946) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     (C953 - C952) * C10400 + (C955 - C954) * C47525) *
                        C47492) *
                       C47226 * C47532 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C47411 * C1301 - C113 * C1289) * C10400 +
                     (C47411 * C1316 - C113 * C1302) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C291 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     (C522 - C523) * C10400 + (C524 - C525) * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C47544 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     (C952 - C953) * C10400 + (C954 - C955) * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C47532 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     (C1589 - C1590) * C10400 + (C1591 - C1592) * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C292 +
                  (((C164 * C10399 + C165 * C10397 + (C527 - C526) * C10400 +
                     (C529 - C528) * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C47544 +
                   ((C359 * C10399 + C360 * C10397 + (C957 - C956) * C10400 +
                     (C959 - C958) * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C47532 +
                   ((C361 * C10399 + C362 * C10397 + (C1594 - C1593) * C10400 +
                     (C1596 - C1595) * C47525) *
                        C4745 +
                    ((C356 - C355) * C10399 + (C358 - C357) * C10397 +
                     (C47411 * C1585 - C113 * C1584) * C10400 +
                     (C47411 * C1587 - C113 * C1586) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C10399 +
                    (C47411 * C136 - C113 * C123) * C10397 +
                    (C47411 * C491 - C113 * C481) * C10400 +
                    (C47411 * C511 - C113 * C492) * C47525) *
                       C4745 +
                   ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                    (C523 - C522) * C10400 + (C525 - C524) * C47525) *
                       C47492) *
                      C47226 * C47208 * C108 +
                  (((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                    (C522 - C523) * C10400 + (C524 - C525) * C47525) *
                       C4745 +
                   ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                    C546 * C10400 + C547 * C47525) *
                       C47492) *
                      C47226 * C47208 * C109 +
                  ((C164 * C10399 + C165 * C10397 + (C527 - C526) * C10400 +
                    (C529 - C528) * C47525) *
                       C4745 +
                   ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                    C777 * C10400 + C778 * C47525) *
                       C47492) *
                      C47226 * C47208 * C110 +
                  ((C166 * C10399 + C167 * C10397 + (C539 - C538) * C10400 +
                    (C541 - C540) * C47525) *
                       C4745 +
                   ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                    (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                       C47492) *
                      C47226 * C47208 * C111 +
                  ((C168 * C10399 + C169 * C10397 + (C780 - C779) * C10400 +
                    (C782 - C781) * C47525) *
                       C4745 +
                   ((C161 - C160) * C10399 + (C163 - C162) * C10397 +
                    (C47411 * C773 - C113 * C772) * C10400 +
                    (C47411 * C775 - C113 * C774) * C47525) *
                       C47492) *
                      C47226 * C47208 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47545 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47534 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C47411 * C2002 - C113 * C1996) * C10400 +
                     (C47411 * C2014 - C113 * C2003) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 +
                     (C2286 - C2285) * C10400 + (C2288 - C2287) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C291 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47545 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C47534 +
                   ((C10706 * C10399 + C10707 * C10397 +
                     (C2285 - C2286) * C10400 + (C2287 - C2288) * C47525) *
                        C4745 +
                    (C10712 * C10399 + C10713 * C10397 +
                     (C2289 - C2290) * C10400 + (C2291 - C2292) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C292 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47545 +
                   ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                     C10713 * C47525) *
                        C4745 +
                    ((C539 - C538) * C10399 + (C541 - C540) * C10397 +
                     (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                        C47492) *
                       C47534 +
                   ((C548 * C10399 + C549 * C10397 + (C2290 - C2289) * C10400 +
                     (C2292 - C2291) * C47525) *
                        C4745 +
                    ((C543 - C542) * C10399 + (C545 - C544) * C10397 +
                     (C47411 * C2281 - C113 * C2280) * C10400 +
                     (C47411 * C2283 - C113 * C2282) * C47525) *
                        C47492) *
                       C47508) *
                      C47208 * C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C47411 * C1301 - C113 * C1289) * C10400 +
                     (C47411 * C1316 - C113 * C1302) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47541 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     (C1589 - C1590) * C10400 + (C1591 - C1592) * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47528 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   ((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                     C11179 * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   ((C361 * C10399 + C362 * C10397 + (C1594 - C1593) * C10400 +
                     (C1596 - C1595) * C47525) *
                        C4745 +
                    ((C356 - C355) * C10399 + (C358 - C357) * C10397 +
                     (C47411 * C1585 - C113 * C1584) * C10400 +
                     (C47411 * C1587 - C113 * C1586) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C10399 +
                    (C47411 * C136 - C113 * C123) * C10397 +
                    (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                       C4745 +
                   ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                    C10698 * C10400 + C10699 * C47525) *
                       C47492) *
                      C47226 * C1146 +
                  (((C113 * C294 - C47411 * C304) * C10399 +
                    (C113 * C305 - C47411 * C324) * C10397 +
                    (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                       C4745 +
                   ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                    C11174 * C10400 + C11175 * C47525) *
                       C47492) *
                      C47226 * C1147 +
                  (((C47411 * C310 - C113 * C297) * C10399 +
                    (C47411 * C327 - C113 * C311) * C10397 +
                    (C47411 * C1301 - C113 * C1289) * C10400 +
                    (C47411 * C1316 - C113 * C1302) * C47525) *
                       C4745 +
                   ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                    (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                       C47492) *
                      C47226 * C1148 +
                  (((C113 * C1152 - C47411 * C1158) * C10399 +
                    (C113 * C1159 - C47411 * C1170) * C10397 +
                    (C113 * C1694 - C47411 * C1697) * C10400 +
                    (C113 * C1698 - C47411 * C1703) * C47525) *
                       C4745 +
                   ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                    (C113 * C1695 - C47411 * C1699) * C10400 +
                    (C113 * C1700 - C47411 * C1704) * C47525) *
                       C47492) *
                      C47226 * C1149 +
                  (((C47411 * C1164 - C113 * C1155) * C10399 +
                    (C47411 * C1173 - C113 * C1165) * C10397 +
                    (C47411 * C6485 - C113 * C6483) * C10400 +
                    (C47411 * C6489 - C113 * C6486) * C47525) *
                       C4745 +
                   ((C47411 * C1166 - C113 * C1156) * C10399 +
                    (C47411 * C1174 - C113 * C1167) * C10397 +
                    (C47411 * C6487 - C113 * C6484) * C10400 +
                    (C47411 * C6490 - C113 * C6488) * C47525) *
                       C47492) *
                      C47226 * C1150) *
                 C47180) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47545 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47534 +
                   (((C10701 - C10700) * C10399 + (C10703 - C10702) * C10397 +
                     (C47411 * C2002 - C113 * C1996) * C10400 +
                     (C47411 * C2014 - C113 * C2003) * C47525) *
                        C4745 +
                    (C10708 * C10399 + C10709 * C10397 +
                     (C2286 - C2285) * C10400 + (C2288 - C2287) * C47525) *
                        C47492) *
                       C47508) *
                      C1078 +
                  ((((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47545 +
                   (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                     (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                        C4745 +
                    (C11176 * C10399 + C11177 * C10397 +
                     (C2172 - C2171) * C10400 + (C2174 - C2173) * C47525) *
                        C47492) *
                       C47534 +
                   (((C11555 - C11554) * C10399 + (C11557 - C11556) * C10397 +
                     (C113 * C2390 - C47411 * C2393) * C10400 +
                     (C113 * C2394 - C47411 * C2399) * C47525) *
                        C4745 +
                    ((C2171 - C2172) * C10399 + (C2173 - C2174) * C10397 +
                     (C113 * C2391 - C47411 * C2395) * C10400 +
                     (C113 * C2396 - C47411 * C2400) * C47525) *
                        C47492) *
                       C47508) *
                      C1079 +
                  ((((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47545 +
                   (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                     (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                        C4745 +
                    ((C1589 - C1590) * C10399 + (C1591 - C1592) * C10397 +
                     (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                        C47492) *
                       C47534 +
                   (((C11563 - C11562) * C10399 + (C11565 - C11564) * C10397 +
                     (C47411 * C7345 - C113 * C7343) * C10400 +
                     (C47411 * C7349 - C113 * C7346) * C47525) *
                        C4745 +
                    ((C11567 - C11566) * C10399 + (C11569 - C11568) * C10397 +
                     (C47411 * C7347 - C113 * C7344) * C10400 +
                     (C47411 * C7350 - C113 * C7348) * C47525) *
                        C47492) *
                       C47508) *
                      C47505) *
                 C47180) /
                    (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47474 +
                   (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                     (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                        C4745 +
                    (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                     C10707 * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C655 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47474 +
                   ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                     C10709 * C47525) *
                        C4745 +
                    (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                     C549 * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C656 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47474 +
                   ((C546 * C10399 + C547 * C10397 + C10712 * C10400 +
                     C10713 * C47525) *
                        C4745 +
                    (C10974 * C10399 + C10975 * C10397 +
                     (C542 - C543) * C10400 + (C544 - C545) * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C657 +
                  (((C166 * C10399 + C167 * C10397 + C10974 * C10400 +
                     C10975 * C47525) *
                        C4745 +
                    ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                     (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                        C47492) *
                       C47474 +
                   ((C777 * C10399 + C778 * C10397 + (C543 - C542) * C10400 +
                     (C545 - C544) * C47525) *
                        C4745 +
                    ((C780 - C779) * C10399 + (C782 - C781) * C10397 +
                     (C47411 * C509 - C113 * C490) * C10400 +
                     (C47411 * C520 - C113 * C510) * C47525) *
                        C47492) *
                       C47313) *
                      C47208 * C47509)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C47411 * C122 - C113 * C115) * C10399 +
                      (C47411 * C136 - C113 * C123) * C10397 +
                      (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                         C4745 +
                     ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                      C10698 * C10400 + C10699 * C47525) *
                         C47492) *
                        C47474 +
                    (((C10695 - C10694) * C10399 + (C10697 - C10696) * C10397 +
                      (C10700 - C10701) * C10400 + (C10702 - C10703) * C47525) *
                         C4745 +
                     (C10704 * C10399 + C10705 * C10397 + C10706 * C10400 +
                      C10707 * C47525) *
                         C47492) *
                        C47313) *
                       C1078 +
                   ((((C113 * C294 - C47411 * C304) * C10399 +
                      (C113 * C305 - C47411 * C324) * C10397 +
                      (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                         C4745 +
                     ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                      C11174 * C10400 + C11175 * C47525) *
                         C47492) *
                        C47474 +
                    (((C11171 - C11170) * C10399 + (C11173 - C11172) * C10397 +
                      (C11554 - C11555) * C10400 + (C11556 - C11557) * C47525) *
                         C4745 +
                     (C11176 * C10399 + C11177 * C10397 +
                      (C2172 - C2171) * C10400 + (C2174 - C2173) * C47525) *
                         C47492) *
                        C47313) *
                       C1079 +
                   ((((C47411 * C310 - C113 * C297) * C10399 +
                      (C47411 * C327 - C113 * C311) * C10397 +
                      (C11558 - C11559) * C10400 + (C11560 - C11561) * C47525) *
                         C4745 +
                     ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                      C11898 * C10400 + C11899 * C47525) *
                         C47492) *
                        C47474 +
                    (((C11559 - C11558) * C10399 + (C11561 - C11560) * C10397 +
                      (C11562 - C11563) * C10400 + (C11564 - C11565) * C47525) *
                         C4745 +
                     (C11900 * C10399 + C11901 * C10397 +
                      (C11566 - C11567) * C10400 + (C11568 - C11569) * C47525) *
                         C47492) *
                        C47313) *
                       C47505) *
                      C47459 +
                  (((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                      C10704 * C10400 + C10705 * C47525) *
                         C4745 +
                     ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                      C546 * C10400 + C547 * C47525) *
                         C47492) *
                        C47474 +
                    ((C10698 * C10399 + C10699 * C10397 + C10708 * C10400 +
                      C10709 * C47525) *
                         C4745 +
                     (C10710 * C10399 + C10711 * C10397 + C548 * C10400 +
                      C549 * C47525) *
                         C47492) *
                        C47313) *
                       C1078 +
                   ((((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                      C11176 * C10400 + C11177 * C47525) *
                         C4745 +
                     ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                      C964 * C10400 + C965 * C47525) *
                         C47492) *
                        C47474 +
                    ((C11174 * C10399 + C11175 * C10397 +
                      (C2171 - C2172) * C10400 + (C2173 - C2174) * C47525) *
                         C4745 +
                     (C11178 * C10399 + C11179 * C10397 +
                      (C2175 - C2176) * C10400 + (C2177 - C2178) * C47525) *
                         C47492) *
                        C47313) *
                       C1079 +
                   ((((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                      C11900 * C10400 + C11901 * C47525) *
                         C4745 +
                     ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                      (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                         C47492) *
                        C47474 +
                    ((C11898 * C10399 + C11899 * C10397 +
                      (C11567 - C11566) * C10400 + (C11569 - C11568) * C47525) *
                         C4745 +
                     ((C1594 - C1593) * C10399 + (C1596 - C1595) * C10397 +
                      (C47411 * C1311 - C113 * C1294) * C10400 +
                      (C47411 * C1321 - C113 * C1312) * C47525) *
                         C47492) *
                        C47313) *
                       C47505) *
                      C47191)) /
                    (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C10399 +
                    (C47411 * C136 - C113 * C123) * C10397 +
                    (C47411 * C491 - C113 * C481) * C10400 +
                    (C47411 * C511 - C113 * C492) * C47525) *
                       C4745 +
                   ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                    (C523 - C522) * C10400 + (C525 - C524) * C47525) *
                       C47492) *
                      C47226 * C47208 * C108 +
                  (((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                    (C522 - C523) * C10400 + (C524 - C525) * C47525) *
                       C4745 +
                   ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                    C546 * C10400 + C547 * C47525) *
                       C47492) *
                      C47226 * C47208 * C109 +
                  ((C164 * C10399 + C165 * C10397 + (C527 - C526) * C10400 +
                    (C529 - C528) * C47525) *
                       C4745 +
                   ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                    C777 * C10400 + C778 * C47525) *
                       C47492) *
                      C47226 * C47208 * C110 +
                  ((C166 * C10399 + C167 * C10397 + (C539 - C538) * C10400 +
                    (C541 - C540) * C47525) *
                       C4745 +
                   ((C157 - C156) * C10399 + (C159 - C158) * C10397 +
                    (C779 - C780) * C10400 + (C781 - C782) * C47525) *
                       C47492) *
                      C47226 * C47208 * C111 +
                  ((C168 * C10399 + C169 * C10397 + (C780 - C779) * C10400 +
                    (C782 - C781) * C47525) *
                       C4745 +
                   ((C161 - C160) * C10399 + (C163 - C162) * C10397 +
                    (C47411 * C773 - C113 * C772) * C10400 +
                    (C47411 * C775 - C113 * C774) * C47525) *
                       C47492) *
                      C47226 * C47208 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C47411 * C491 - C113 * C481) * C10400 +
                     (C47411 * C511 - C113 * C492) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     (C523 - C522) * C10400 + (C525 - C524) * C47525) *
                        C47492) *
                       C47226 * C47544 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C113 * C931 - C47411 * C936) * C10400 +
                     (C113 * C937 - C47411 * C946) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     (C953 - C952) * C10400 + (C955 - C954) * C47525) *
                        C47492) *
                       C47226 * C47532 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C47411 * C1301 - C113 * C1289) * C10400 +
                     (C47411 * C1316 - C113 * C1302) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C291 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     (C522 - C523) * C10400 + (C524 - C525) * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C47544 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     (C952 - C953) * C10400 + (C954 - C955) * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C47532 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     (C1589 - C1590) * C10400 + (C1591 - C1592) * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C292 +
                  (((C164 * C10399 + C165 * C10397 + (C527 - C526) * C10400 +
                     (C529 - C528) * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C47544 +
                   ((C359 * C10399 + C360 * C10397 + (C957 - C956) * C10400 +
                     (C959 - C958) * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C47532 +
                   ((C361 * C10399 + C362 * C10397 + (C1594 - C1593) * C10400 +
                     (C1596 - C1595) * C47525) *
                        C4745 +
                    ((C356 - C355) * C10399 + (C358 - C357) * C10397 +
                     (C47411 * C1585 - C113 * C1584) * C10400 +
                     (C47411 * C1587 - C113 * C1586) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C47411 * C122 - C113 * C115) * C10399 +
                     (C47411 * C136 - C113 * C123) * C10397 +
                     (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                        C4745 +
                    ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                     C10698 * C10400 + C10699 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   (((C113 * C294 - C47411 * C304) * C10399 +
                     (C113 * C305 - C47411 * C324) * C10397 +
                     (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                        C4745 +
                    ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                     C11174 * C10400 + C11175 * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   (((C47411 * C310 - C113 * C297) * C10399 +
                     (C47411 * C327 - C113 * C311) * C10397 +
                     (C47411 * C1301 - C113 * C1289) * C10400 +
                     (C47411 * C1316 - C113 * C1302) * C47525) *
                        C4745 +
                    ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                     (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47541 +
                  ((((C145 - C144) * C10399 + (C147 - C146) * C10397 +
                     C10704 * C10400 + C10705 * C47525) *
                        C4745 +
                    ((C149 - C148) * C10399 + (C151 - C150) * C10397 +
                     C546 * C10400 + C547 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   (((C336 - C335) * C10399 + (C338 - C337) * C10397 +
                     C11176 * C10400 + C11177 * C47525) *
                        C4745 +
                    ((C340 - C339) * C10399 + (C342 - C341) * C10397 +
                     C964 * C10400 + C965 * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   (((C344 - C343) * C10399 + (C346 - C345) * C10397 +
                     (C1589 - C1590) * C10400 + (C1591 - C1592) * C47525) *
                        C4745 +
                    ((C348 - C347) * C10399 + (C350 - C349) * C10397 +
                     (C1593 - C1594) * C10400 + (C1595 - C1596) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47528 +
                  (((C164 * C10399 + C165 * C10397 + C10710 * C10400 +
                     C10711 * C47525) *
                        C4745 +
                    ((C153 - C152) * C10399 + (C155 - C154) * C10397 +
                     C777 * C10400 + C778 * C47525) *
                        C47492) *
                       C47226 * C1078 +
                   ((C359 * C10399 + C360 * C10397 + C11178 * C10400 +
                     C11179 * C47525) *
                        C4745 +
                    ((C352 - C351) * C10399 + (C354 - C353) * C10397 +
                     (C960 - C961) * C10400 + (C962 - C963) * C47525) *
                        C47492) *
                       C47226 * C1079 +
                   ((C361 * C10399 + C362 * C10397 + (C1594 - C1593) * C10400 +
                     (C1596 - C1595) * C47525) *
                        C4745 +
                    ((C356 - C355) * C10399 + (C358 - C357) * C10397 +
                     (C47411 * C1585 - C113 * C1584) * C10400 +
                     (C47411 * C1587 - C113 * C1586) * C47525) *
                        C47492) *
                       C47226 * C47505) *
                      C47499)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C47411 * C122 - C113 * C115) * C10399 +
                    (C47411 * C136 - C113 * C123) * C10397 +
                    (C10694 - C10695) * C10400 + (C10696 - C10697) * C47525) *
                       C4745 +
                   ((C144 - C145) * C10399 + (C146 - C147) * C10397 +
                    C10698 * C10400 + C10699 * C47525) *
                       C47492) *
                      C47226 * C1146 +
                  (((C113 * C294 - C47411 * C304) * C10399 +
                    (C113 * C305 - C47411 * C324) * C10397 +
                    (C11170 - C11171) * C10400 + (C11172 - C11173) * C47525) *
                       C4745 +
                   ((C335 - C336) * C10399 + (C337 - C338) * C10397 +
                    C11174 * C10400 + C11175 * C47525) *
                       C47492) *
                      C47226 * C1147 +
                  (((C47411 * C310 - C113 * C297) * C10399 +
                    (C47411 * C327 - C113 * C311) * C10397 +
                    (C47411 * C1301 - C113 * C1289) * C10400 +
                    (C47411 * C1316 - C113 * C1302) * C47525) *
                       C4745 +
                   ((C343 - C344) * C10399 + (C345 - C346) * C10397 +
                    (C1590 - C1589) * C10400 + (C1592 - C1591) * C47525) *
                       C47492) *
                      C47226 * C1148 +
                  (((C113 * C1152 - C47411 * C1158) * C10399 +
                    (C113 * C1159 - C47411 * C1170) * C10397 +
                    (C113 * C1694 - C47411 * C1697) * C10400 +
                    (C113 * C1698 - C47411 * C1703) * C47525) *
                       C4745 +
                   ((C1431 - C1432) * C10399 + (C1433 - C1434) * C10397 +
                    (C113 * C1695 - C47411 * C1699) * C10400 +
                    (C113 * C1700 - C47411 * C1704) * C47525) *
                       C47492) *
                      C47226 * C1149 +
                  (((C47411 * C1164 - C113 * C1155) * C10399 +
                    (C47411 * C1173 - C113 * C1165) * C10397 +
                    (C47411 * C6485 - C113 * C6483) * C10400 +
                    (C47411 * C6489 - C113 * C6486) * C47525) *
                       C4745 +
                   ((C47411 * C1166 - C113 * C1156) * C10399 +
                    (C47411 * C1174 - C113 * C1167) * C10397 +
                    (C47411 * C6487 - C113 * C6484) * C10400 +
                    (C47411 * C6490 - C113 * C6488) * C47525) *
                       C47492) *
                      C47226 * C1150) *
                 C47180) /
                    (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C47267 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C47274 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C2868) *
              C47185 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C47267 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C47274 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C2868) *
              C47194 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C47267 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C16470 - C16471 + C16472 - C16473) * C114 +
             (C16474 - C16475 + C16476 - C16477) * C47428) *
                C47492) *
               C47226 * C47274 +
           (((C16155 - C16154 + C16157 - C16156) * C114 +
             (C16159 - C16158 + C16161 - C16160) * C47428) *
                C15947 +
            ((C15945 * C318 - C15949 * C301 + C47523 * C1427 - C15950 * C1426) *
                 C114 +
             (C15945 * C331 - C15949 * C319 + C47523 * C1429 - C15950 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C47474 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C47474 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 -
               C15950 * C1152) *
                  C114 +
              (C15945 * C327 - C15949 * C311 + C47523 * C1170 -
               C15950 * C1159) *
                  C47428) *
                 C15947 +
             ((C16138 - C16139 + C16140 - C16141) * C114 +
              (C16142 - C16143 + C16144 - C16145) * C47428) *
                 C47492) *
                C47474 +
            (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
               C47523 * C1697) *
                  C114 +
              (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
               C47523 * C1703) *
                  C47428) *
                 C15947 +
             ((C17532 - C17533 + C17534 - C17535) * C114 +
              (C17536 - C17537 + C17538 - C17539) * C47428) *
                 C47492) *
                C47313) *
               C2868) *
              C2608 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C47474 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C47474 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C16139 - C16138 + C16141 - C16140) * C114 +
              (C16143 - C16142 + C16145 - C16144) * C47428) *
                 C15947 +
             ((C16154 - C16155 + C16156 - C16157) * C114 +
              (C16158 - C16159 + C16160 - C16161) * C47428) *
                 C47492) *
                C47474 +
            (((C17533 - C17532 + C17535 - C17534) * C114 +
              (C17537 - C17536 + C17539 - C17538) * C47428) *
                 C15947 +
             ((C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
               C15950 * C1696) *
                  C114 +
              (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
               C15950 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C47551 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C47547 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C47537 +
           (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
              C47523 * C1164) *
                 C114 +
             (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
              C47523 * C1173) *
                 C47428) *
                C15947 +
            ((C17330 - C17331 + C17332 - C17333) * C114 +
             (C17334 - C17335 + C17336 - C17337) * C47428) *
                C47492) *
               C47226 * C47515) *
              C2608 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C47551 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C47547 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C47537 +
           (((C17331 - C17330 + C17333 - C17332) * C114 +
             (C17335 - C17334 + C17337 - C17336) * C47428) *
                C15947 +
            ((C15945 * C1162 - C15949 * C1154 + C47523 * C1168 -
              C15950 * C1157) *
                 C114 +
             (C15945 * C1172 - C15949 * C1163 + C47523 * C1175 -
              C15950 * C1169) *
                 C47428) *
                C47492) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47550 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47543 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C16470 - C16471 + C16472 - C16473) * C114 +
             (C16474 - C16475 + C16476 - C16477) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47530 +
          ((((C15969 - C15968 + C15971 - C15970) * C114 +
             (C15973 - C15972 + C15975 - C15974) * C47428) *
                C15947 +
            ((C15976 - C15977 + C15978 - C15979) * C114 +
             (C15980 - C15981 + C15982 - C15983) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C16471 - C16470 + C16473 - C16472) * C114 +
             (C16475 - C16474 + C16477 - C16476) * C47428) *
                C15947 +
            ((C15945 * C320 - C15949 * C302 + C47523 * C322 - C15950 * C303) *
                 C114 +
             (C15945 * C332 - C15949 * C321 + C47523 * C333 - C15950 * C323) *
                 C47428) *
                C47492) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C47545 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47534 +
            (((C15945 * C497 - C15949 * C484 + C47523 * C1295 -
               C15950 * C1286) *
                  C114 +
              (C15945 * C514 - C15949 * C498 + C47523 * C1313 -
               C15950 * C1296) *
                  C47428) *
                 C15947 +
             ((C16316 - C16317 + C16318 - C16319) * C114 +
              (C16320 - C16321 + C16322 - C16323) * C47428) *
                 C47492) *
                C47508) *
               C2500 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C47545 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47534 +
            (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
               C47523 * C1307) *
                  C114 +
              (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
               C47523 * C1319) *
                  C47428) *
                 C15947 +
             ((C18238 - C18239 + C18240 - C18241) * C114 +
              (C18242 - C18243 + C18244 - C18245) * C47428) *
                 C47492) *
                C47508) *
               C47271) *
              C2608 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C47545 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47534 +
            (((C16317 - C16316 + C16319 - C16318) * C114 +
              (C16321 - C16320 + C16323 - C16322) * C47428) *
                 C15947 +
             ((C16332 - C16333 + C16334 - C16335) * C114 +
              (C16336 - C16337 + C16338 - C16339) * C47428) *
                 C47492) *
                C47508) *
               C2500 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C47545 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47534 +
            (((C18239 - C18238 + C18241 - C18240) * C114 +
              (C18243 - C18242 + C18245 - C18244) * C47428) *
                 C15947 +
             ((C15945 * C1299 - C15949 * C1288 + C47523 * C1311 -
               C15950 * C1294) *
                  C114 +
              (C15945 * C1315 - C15949 * C1300 + C47523 * C1321 -
               C15950 * C1312) *
                  C47428) *
                 C47492) *
                C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C47474 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C47474 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47185 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C47474 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C47474 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47194 +
          (((((C15961 - C15960 + C15963 - C15962) * C114 +
              (C15965 - C15964 + C15967 - C15966) * C47428) *
                 C15947 +
             ((C15968 - C15969 + C15970 - C15971) * C114 +
              (C15972 - C15973 + C15974 - C15975) * C47428) *
                 C47492) *
                C47474 +
            (((C16325 - C16324 + C16327 - C16326) * C114 +
              (C16329 - C16328 + C16331 - C16330) * C47428) *
                 C15947 +
             ((C16608 - C16609 + C16610 - C16611) * C114 +
              (C16612 - C16613 + C16614 - C16615) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C16147 - C16146 + C16149 - C16148) * C114 +
              (C16151 - C16150 + C16153 - C16152) * C47428) *
                 C15947 +
             ((C16470 - C16471 + C16472 - C16473) * C114 +
              (C16474 - C16475 + C16476 - C16477) * C47428) *
                 C47492) *
                C47474 +
            (((C16819 - C16818 + C16821 - C16820) * C114 +
              (C16823 - C16822 + C16825 - C16824) * C47428) *
                 C15947 +
             ((C15945 * C942 - C15949 * C934 + C47523 * C1585 -
               C15950 * C1584) *
                  C114 +
              (C15945 * C949 - C15949 * C943 + C47523 * C1587 -
               C15950 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47550 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47543 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C16470 - C16471 + C16472 - C16473) * C114 +
             (C16474 - C16475 + C16476 - C16477) * C47428) *
                C47492) *
               C47226 * C47271) *
              C47530 +
          ((((C15969 - C15968 + C15971 - C15970) * C114 +
             (C15973 - C15972 + C15975 - C15974) * C47428) *
                C15947 +
            ((C15976 - C15977 + C15978 - C15979) * C114 +
             (C15980 - C15981 + C15982 - C15983) * C47428) *
                C47492) *
               C47226 * C2500 +
           (((C16471 - C16470 + C16473 - C16472) * C114 +
             (C16475 - C16474 + C16477 - C16476) * C47428) *
                C15947 +
            ((C15945 * C320 - C15949 * C302 + C47523 * C322 - C15950 * C303) *
                 C114 +
             (C15945 * C332 - C15949 * C321 + C47523 * C333 - C15950 * C323) *
                 C47428) *
                C47492) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C47551 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C47547 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C47537 +
           (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
              C47523 * C1164) *
                 C114 +
             (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
              C47523 * C1173) *
                 C47428) *
                C15947 +
            ((C17330 - C17331 + C17332 - C17333) * C114 +
             (C17334 - C17335 + C17336 - C17337) * C47428) *
                C47492) *
               C47226 * C47515) *
              C2608 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C47551 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C47547 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C47537 +
           (((C17331 - C17330 + C17333 - C17332) * C114 +
             (C17335 - C17334 + C17337 - C17336) * C47428) *
                C15947 +
            ((C15945 * C1162 - C15949 * C1154 + C47523 * C1168 -
              C15950 * C1157) *
                 C114 +
             (C15945 * C1172 - C15949 * C1163 + C47523 * C1175 -
              C15950 * C1169) *
                 C47428) *
                C47492) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C3262 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C3262 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 -
               C15950 * C1152) *
                  C114 +
              (C15945 * C327 - C15949 * C311 + C47523 * C1170 -
               C15950 * C1159) *
                  C47428) *
                 C15947 +
             ((C16138 - C16139 + C16140 - C16141) * C114 +
              (C16142 - C16143 + C16144 - C16145) * C47428) *
                 C47492) *
                C3262 +
            (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
               C47523 * C1697) *
                  C114 +
              (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
               C47523 * C1703) *
                  C47428) *
                 C15947 +
             ((C17532 - C17533 + C17534 - C17535) * C114 +
              (C17536 - C17537 + C17538 - C17539) * C47428) *
                 C47492) *
                C47313) *
               C2868) *
              C47459 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C3262 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C3262 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C16139 - C16138 + C16141 - C16140) * C114 +
              (C16143 - C16142 + C16145 - C16144) * C47428) *
                 C15947 +
             ((C16154 - C16155 + C16156 - C16157) * C114 +
              (C16158 - C16159 + C16160 - C16161) * C47428) *
                 C47492) *
                C3262 +
            (((C17533 - C17532 + C17535 - C17534) * C114 +
              (C17537 - C17536 + C17539 - C17538) * C47428) *
                 C15947 +
             ((C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
               C15950 * C1696) *
                  C114 +
              (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
               C15950 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47309 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47316 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C3770) *
              C47267 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47309 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C47316 +
           (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
              C47523 * C1307) *
                 C114 +
             (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
              C47523 * C1319) *
                 C47428) *
                C15947 +
            ((C18238 - C18239 + C18240 - C18241) * C114 +
             (C18242 - C18243 + C18244 - C18245) * C47428) *
                C47492) *
               C3770) *
              C47274 +
          ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47309 +
           (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
              C47523 * C1697) *
                 C114 +
             (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
              C47523 * C1703) *
                 C47428) *
                C15947 +
            ((C17532 - C17533 + C17534 - C17535) * C114 +
             (C17536 - C17537 + C17538 - C17539) * C47428) *
                C47492) *
               C47316 +
           (((C15945 * C1307 - C15949 * C1292 + C47523 * C6007 -
              C15950 * C6005) *
                 C114 +
             (C15945 * C1319 - C15949 * C1308 + C47523 * C6011 -
              C15950 * C6008) *
                 C47428) *
                C15947 +
            ((C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C114 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47428) *
                C47492) *
               C3770) *
              C2868) *
         C47180) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C3262 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47313) *
              C47551 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C3262 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C47313) *
              C47547 +
          ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C3262 +
           (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
              C47523 * C1697) *
                 C114 +
             (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
              C47523 * C1703) *
                 C47428) *
                C15947 +
            ((C17532 - C17533 + C17534 - C17535) * C114 +
             (C17536 - C17537 + C17538 - C17539) * C47428) *
                C47492) *
               C47313) *
              C47537 +
          ((((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
              C47523 * C1164) *
                 C114 +
             (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
              C47523 * C1173) *
                 C47428) *
                C15947 +
            ((C17330 - C17331 + C17332 - C17333) * C114 +
             (C17334 - C17335 + C17336 - C17337) * C47428) *
                C47492) *
               C3262 +
           (((C15945 * C1697 - C15949 * C1694 + C47523 * C6485 -
              C15950 * C6483) *
                 C114 +
             (C15945 * C1703 - C15949 * C1698 + C47523 * C6489 -
              C15950 * C6486) *
                 C47428) *
                C15947 +
            ((C15945 * C1699 - C15949 * C1695 + C47523 * C6487 -
              C15950 * C6484) *
                 C114 +
             (C15945 * C1704 - C15949 * C1700 + C47523 * C6490 -
              C15950 * C6488) *
                 C47428) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C3262 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C3262 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47541 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C3262 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C3262 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47528 +
          (((((C15961 - C15960 + C15963 - C15962) * C114 +
              (C15965 - C15964 + C15967 - C15966) * C47428) *
                 C15947 +
             ((C15968 - C15969 + C15970 - C15971) * C114 +
              (C15972 - C15973 + C15974 - C15975) * C47428) *
                 C47492) *
                C3262 +
            (((C16325 - C16324 + C16327 - C16326) * C114 +
              (C16329 - C16328 + C16331 - C16330) * C47428) *
                 C15947 +
             ((C16608 - C16609 + C16610 - C16611) * C114 +
              (C16612 - C16613 + C16614 - C16615) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C16147 - C16146 + C16149 - C16148) * C114 +
              (C16151 - C16150 + C16153 - C16152) * C47428) *
                 C15947 +
             ((C16470 - C16471 + C16472 - C16473) * C114 +
              (C16474 - C16475 + C16476 - C16477) * C47428) *
                 C47492) *
                C3262 +
            (((C16819 - C16818 + C16821 - C16820) * C114 +
              (C16823 - C16822 + C16825 - C16824) * C47428) *
                 C15947 +
             ((C15945 * C942 - C15949 * C934 + C47523 * C1585 -
               C15950 * C1584) *
                  C114 +
              (C15945 * C949 - C15949 * C943 + C47523 * C1587 -
               C15950 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47552 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47549 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C47540 +
           (((C15949 * C1996 - C15945 * C2002 + C15950 * C2390 -
              C47523 * C2393) *
                 C114 +
             (C15949 * C2003 - C15945 * C2014 + C15950 * C2394 -
              C47523 * C2399) *
                 C47428) *
                C15947 +
            ((C18376 - C18377 + C18378 - C18379) * C114 +
             (C18380 - C18381 + C18382 - C18383) * C47428) *
                C47492) *
               C47521) *
              C2500 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47552 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C47549 +
           (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
              C47523 * C1307) *
                 C114 +
             (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
              C47523 * C1319) *
                 C47428) *
                C15947 +
            ((C18238 - C18239 + C18240 - C18241) * C114 +
             (C18242 - C18243 + C18244 - C18245) * C47428) *
                C47492) *
               C47540 +
           (((C15945 * C2393 - C15949 * C2390 + C47523 * C7345 -
              C15950 * C7343) *
                 C114 +
             (C15945 * C2399 - C15949 * C2394 + C47523 * C7349 -
              C15950 * C7346) *
                 C47428) *
                C15947 +
            ((C15945 * C2395 - C15949 * C2391 + C47523 * C7347 -
              C15950 * C7344) *
                 C114 +
             (C15945 * C2400 - C15949 * C2396 + C47523 * C7350 -
              C15950 * C7348) *
                 C47428) *
                C47492) *
               C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C47309 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47316 +
            (((C15945 * C497 - C15949 * C484 + C47523 * C1295 -
               C15950 * C1286) *
                  C114 +
              (C15945 * C514 - C15949 * C498 + C47523 * C1313 -
               C15950 * C1296) *
                  C47428) *
                 C15947 +
             ((C16316 - C16317 + C16318 - C16319) * C114 +
              (C16320 - C16321 + C16322 - C16323) * C47428) *
                 C47492) *
                C3770) *
               C2500 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C47309 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47316 +
            (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
               C47523 * C1307) *
                  C114 +
              (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
               C47523 * C1319) *
                  C47428) *
                 C15947 +
             ((C18238 - C18239 + C18240 - C18241) * C114 +
              (C18242 - C18243 + C18244 - C18245) * C47428) *
                 C47492) *
                C3770) *
               C47271) *
              C47459 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C47309 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47316 +
            (((C16317 - C16316 + C16319 - C16318) * C114 +
              (C16321 - C16320 + C16323 - C16322) * C47428) *
                 C15947 +
             ((C16332 - C16333 + C16334 - C16335) * C114 +
              (C16336 - C16337 + C16338 - C16339) * C47428) *
                 C47492) *
                C3770) *
               C2500 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C47309 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47316 +
            (((C18239 - C18238 + C18241 - C18240) * C114 +
              (C18243 - C18242 + C18245 - C18244) * C47428) *
                 C15947 +
             ((C15945 * C1299 - C15949 * C1288 + C47523 * C1311 -
               C15950 * C1294) *
                  C114 +
              (C15945 * C1315 - C15949 * C1300 + C47523 * C1321 -
               C15950 * C1312) *
                  C47428) *
                 C47492) *
                C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C3262 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C3262 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47541 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C3262 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C3262 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47528 +
          (((((C15961 - C15960 + C15963 - C15962) * C114 +
              (C15965 - C15964 + C15967 - C15966) * C47428) *
                 C15947 +
             ((C15968 - C15969 + C15970 - C15971) * C114 +
              (C15972 - C15973 + C15974 - C15975) * C47428) *
                 C47492) *
                C3262 +
            (((C16325 - C16324 + C16327 - C16326) * C114 +
              (C16329 - C16328 + C16331 - C16330) * C47428) *
                 C15947 +
             ((C16608 - C16609 + C16610 - C16611) * C114 +
              (C16612 - C16613 + C16614 - C16615) * C47428) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C16147 - C16146 + C16149 - C16148) * C114 +
              (C16151 - C16150 + C16153 - C16152) * C47428) *
                 C15947 +
             ((C16470 - C16471 + C16472 - C16473) * C114 +
              (C16474 - C16475 + C16476 - C16477) * C47428) *
                 C47492) *
                C3262 +
            (((C16819 - C16818 + C16821 - C16820) * C114 +
              (C16823 - C16822 + C16825 - C16824) * C47428) *
                 C15947 +
             ((C15945 * C942 - C15949 * C934 + C47523 * C1585 -
               C15950 * C1584) *
                  C114 +
              (C15945 * C949 - C15949 * C943 + C47523 * C1587 -
               C15950 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C3262 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47313) *
              C47551 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C3262 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C47313) *
              C47547 +
          ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C3262 +
           (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
              C47523 * C1697) *
                 C114 +
             (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
              C47523 * C1703) *
                 C47428) *
                C15947 +
            ((C17532 - C17533 + C17534 - C17535) * C114 +
             (C17536 - C17537 + C17538 - C17539) * C47428) *
                C47492) *
               C47313) *
              C47537 +
          ((((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
              C47523 * C1164) *
                 C114 +
             (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
              C47523 * C1173) *
                 C47428) *
                C15947 +
            ((C17330 - C17331 + C17332 - C17333) * C114 +
             (C17334 - C17335 + C17336 - C17337) * C47428) *
                C47492) *
               C3262 +
           (((C15945 * C1697 - C15949 * C1694 + C47523 * C6485 -
              C15950 * C6483) *
                 C114 +
             (C15945 * C1703 - C15949 * C1698 + C47523 * C6489 -
              C15950 * C6486) *
                 C47428) *
                C15947 +
            ((C15945 * C1699 - C15949 * C1695 + C47523 * C6487 -
              C15950 * C6484) *
                 C114 +
             (C15945 * C1704 - C15949 * C1700 + C47523 * C6490 -
              C15950 * C6488) *
                 C47428) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C1420 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C1421 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C1422 +
           (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
              C47523 * C1164) *
                 C114 +
             (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
              C47523 * C1173) *
                 C47428) *
                C15947 +
            ((C17330 - C17331 + C17332 - C17333) * C114 +
             (C17334 - C17335 + C17336 - C17337) * C47428) *
                C47492) *
               C47226 * C47515) *
              C47459 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C1420 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C1421 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C1422 +
           (((C17331 - C17330 + C17333 - C17332) * C114 +
             (C17335 - C17334 + C17337 - C17336) * C47428) *
                C15947 +
            ((C15945 * C1162 - C15949 * C1154 + C47523 * C1168 -
              C15950 * C1157) *
                 C114 +
             (C15945 * C1172 - C15949 * C1163 + C47523 * C1175 -
              C15950 * C1169) *
                 C47428) *
                C47492) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C47271) *
              C655 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C47271) *
              C656 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C16470 - C16471 + C16472 - C16473) * C114 +
             (C16474 - C16475 + C16476 - C16477) * C47428) *
                C47492) *
               C47226 * C47271) *
              C657 +
          ((((C15969 - C15968 + C15971 - C15970) * C114 +
             (C15973 - C15972 + C15975 - C15974) * C47428) *
                C15947 +
            ((C15976 - C15977 + C15978 - C15979) * C114 +
             (C15980 - C15981 + C15982 - C15983) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C16471 - C16470 + C16473 - C16472) * C114 +
             (C16475 - C16474 + C16477 - C16476) * C47428) *
                C15947 +
            ((C15945 * C320 - C15949 * C302 + C47523 * C322 - C15950 * C303) *
                 C114 +
             (C15945 * C332 - C15949 * C321 + C47523 * C333 - C15950 * C323) *
                 C47428) *
                C47492) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C1816 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C1817 +
            (((C15945 * C497 - C15949 * C484 + C47523 * C1295 -
               C15950 * C1286) *
                  C114 +
              (C15945 * C514 - C15949 * C498 + C47523 * C1313 -
               C15950 * C1296) *
                  C47428) *
                 C15947 +
             ((C16316 - C16317 + C16318 - C16319) * C114 +
              (C16320 - C16321 + C16322 - C16323) * C47428) *
                 C47492) *
                C47508) *
               C47473 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C1816 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C1817 +
            (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
               C47523 * C1307) *
                  C114 +
              (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
               C47523 * C1319) *
                  C47428) *
                 C15947 +
             ((C18238 - C18239 + C18240 - C18241) * C114 +
              (C18242 - C18243 + C18244 - C18245) * C47428) *
                 C47492) *
                C47508) *
               C47271) *
              C47459 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C1816 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C1817 +
            (((C16317 - C16316 + C16319 - C16318) * C114 +
              (C16321 - C16320 + C16323 - C16322) * C47428) *
                 C15947 +
             ((C16332 - C16333 + C16334 - C16335) * C114 +
              (C16336 - C16337 + C16338 - C16339) * C47428) *
                 C47492) *
                C47508) *
               C47473 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C1816 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C1817 +
            (((C18239 - C18238 + C18241 - C18240) * C114 +
              (C18243 - C18242 + C18245 - C18244) * C47428) *
                 C15947 +
             ((C15945 * C1299 - C15949 * C1288 + C47523 * C1311 -
               C15950 * C1294) *
                  C114 +
              (C15945 * C1315 - C15949 * C1300 + C47523 * C1321 -
               C15950 * C1312) *
                  C47428) *
                 C47492) *
                C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47474 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47313) *
              C1420 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47474 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C47313) *
              C1421 +
          ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47474 +
           (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
              C47523 * C1697) *
                 C114 +
             (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
              C47523 * C1703) *
                 C47428) *
                C15947 +
            ((C17532 - C17533 + C17534 - C17535) * C114 +
             (C17536 - C17537 + C17538 - C17539) * C47428) *
                C47492) *
               C47313) *
              C1422 +
          ((((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
              C47523 * C1164) *
                 C114 +
             (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
              C47523 * C1173) *
                 C47428) *
                C15947 +
            ((C17330 - C17331 + C17332 - C17333) * C114 +
             (C17334 - C17335 + C17336 - C17337) * C47428) *
                C47492) *
               C47474 +
           (((C15945 * C1697 - C15949 * C1694 + C47523 * C6485 -
              C15950 * C6483) *
                 C114 +
             (C15945 * C1703 - C15949 * C1698 + C47523 * C6489 -
              C15950 * C6486) *
                 C47428) *
                C15947 +
            ((C15945 * C1699 - C15949 * C1695 + C47523 * C6487 -
              C15950 * C6484) *
                 C114 +
             (C15945 * C1704 - C15949 * C1700 + C47523 * C6490 -
              C15950 * C6488) *
                 C47428) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C47474 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C47474 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C291 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C47474 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C47474 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C292 +
          (((((C15961 - C15960 + C15963 - C15962) * C114 +
              (C15965 - C15964 + C15967 - C15966) * C47428) *
                 C15947 +
             ((C15968 - C15969 + C15970 - C15971) * C114 +
              (C15972 - C15973 + C15974 - C15975) * C47428) *
                 C47492) *
                C47474 +
            (((C16325 - C16324 + C16327 - C16326) * C114 +
              (C16329 - C16328 + C16331 - C16330) * C47428) *
                 C15947 +
             ((C16608 - C16609 + C16610 - C16611) * C114 +
              (C16612 - C16613 + C16614 - C16615) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C16147 - C16146 + C16149 - C16148) * C114 +
              (C16151 - C16150 + C16153 - C16152) * C47428) *
                 C15947 +
             ((C16470 - C16471 + C16472 - C16473) * C114 +
              (C16474 - C16475 + C16476 - C16477) * C47428) *
                 C47492) *
                C47474 +
            (((C16819 - C16818 + C16821 - C16820) * C114 +
              (C16823 - C16822 + C16825 - C16824) * C47428) *
                 C15947 +
             ((C15945 * C942 - C15949 * C934 + C47523 * C1585 -
               C15950 * C1584) *
                  C114 +
              (C15945 * C949 - C15949 * C943 + C47523 * C1587 -
               C15950 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C2276 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C2277 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C2278 +
           (((C15949 * C1996 - C15945 * C2002 + C15950 * C2390 -
              C47523 * C2393) *
                 C114 +
             (C15949 * C2003 - C15945 * C2014 + C15950 * C2394 -
              C47523 * C2399) *
                 C47428) *
                C15947 +
            ((C18376 - C18377 + C18378 - C18379) * C114 +
             (C18380 - C18381 + C18382 - C18383) * C47428) *
                C47492) *
               C47521) *
              C47473 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C2276 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C2277 +
           (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
              C47523 * C1307) *
                 C114 +
             (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
              C47523 * C1319) *
                 C47428) *
                C15947 +
            ((C18238 - C18239 + C18240 - C18241) * C114 +
             (C18242 - C18243 + C18244 - C18245) * C47428) *
                C47492) *
               C2278 +
           (((C15945 * C2393 - C15949 * C2390 + C47523 * C7345 -
              C15950 * C7343) *
                 C114 +
             (C15945 * C2399 - C15949 * C2394 + C47523 * C7349 -
              C15950 * C7346) *
                 C47428) *
                C15947 +
            ((C15945 * C2395 - C15949 * C2391 + C47523 * C7347 -
              C15950 * C7344) *
                 C114 +
             (C15945 * C2400 - C15949 * C2396 + C47523 * C7350 -
              C15950 * C7348) *
                 C47428) *
                C47492) *
               C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C15945 * C122 - C15949 * C115 + C47523 * C304 -
                 C15950 * C294) *
                    C114 +
                (C15945 * C136 - C15949 * C123 + C47523 * C324 -
                 C15950 * C305) *
                    C47428) *
                   C15947 +
               ((C15952 - C15953 + C15954 - C15955) * C114 +
                (C15956 - C15957 + C15958 - C15959) * C47428) *
                   C47492) *
                  C47226 * C47208 * C108 +
              (((C15953 - C15952 + C15955 - C15954) * C114 +
                (C15957 - C15956 + C15959 - C15958) * C47428) *
                   C15947 +
               ((C15960 - C15961 + C15962 - C15963) * C114 +
                (C15964 - C15965 + C15966 - C15967) * C47428) *
                   C47492) *
                  C47226 * C47208 * C109 +
              (((C15961 - C15960 + C15963 - C15962) * C114 +
                (C15965 - C15964 + C15967 - C15966) * C47428) *
                   C15947 +
               ((C15968 - C15969 + C15970 - C15971) * C114 +
                (C15972 - C15973 + C15974 - C15975) * C47428) *
                   C47492) *
                  C47226 * C47208 * C110 +
              (((C15969 - C15968 + C15971 - C15970) * C114 +
                (C15973 - C15972 + C15975 - C15974) * C47428) *
                   C15947 +
               ((C15976 - C15977 + C15978 - C15979) * C114 +
                (C15980 - C15981 + C15982 - C15983) * C47428) *
                   C47492) *
                  C47226 * C47208 * C111 +
              (((C15977 - C15976 + C15979 - C15978) * C114 +
                (C15981 - C15980 + C15983 - C15982) * C47428) *
                   C15947 +
               ((C15945 * C132 - C15949 * C120 + C47523 * C660 -
                 C15950 * C659) *
                    C114 +
                (C15945 * C141 - C15949 * C133 + C47523 * C662 -
                 C15950 * C661) *
                    C47428) *
                   C47492) *
                  C47226 * C47208 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C15945 * C122 - C15949 * C115 + C47523 * C304 -
                  C15950 * C294) *
                     C114 +
                 (C15945 * C136 - C15949 * C123 + C47523 * C324 -
                  C15950 * C305) *
                     C47428) *
                    C15947 +
                ((C15952 - C15953 + C15954 - C15955) * C114 +
                 (C15956 - C15957 + C15958 - C15959) * C47428) *
                    C47492) *
                   C47226 * C47544 +
               (((C15949 * C294 - C15945 * C304 + C15950 * C297 -
                  C47523 * C310) *
                     C114 +
                 (C15949 * C305 - C15945 * C324 + C15950 * C311 -
                  C47523 * C327) *
                     C47428) *
                    C15947 +
                ((C16130 - C16131 + C16132 - C16133) * C114 +
                 (C16134 - C16135 + C16136 - C16137) * C47428) *
                    C47492) *
                   C47226 * C47532 +
               (((C15945 * C310 - C15949 * C297 + C47523 * C1158 -
                  C15950 * C1152) *
                     C114 +
                 (C15945 * C327 - C15949 * C311 + C47523 * C1170 -
                  C15950 * C1159) *
                     C47428) *
                    C15947 +
                ((C16138 - C16139 + C16140 - C16141) * C114 +
                 (C16142 - C16143 + C16144 - C16145) * C47428) *
                    C47492) *
                   C47226 * C47505) *
                  C291 +
              ((((C15953 - C15952 + C15955 - C15954) * C114 +
                 (C15957 - C15956 + C15959 - C15958) * C47428) *
                    C15947 +
                ((C15960 - C15961 + C15962 - C15963) * C114 +
                 (C15964 - C15965 + C15966 - C15967) * C47428) *
                    C47492) *
                   C47226 * C47544 +
               (((C16131 - C16130 + C16133 - C16132) * C114 +
                 (C16135 - C16134 + C16137 - C16136) * C47428) *
                    C15947 +
                ((C16146 - C16147 + C16148 - C16149) * C114 +
                 (C16150 - C16151 + C16152 - C16153) * C47428) *
                    C47492) *
                   C47226 * C47532 +
               (((C16139 - C16138 + C16141 - C16140) * C114 +
                 (C16143 - C16142 + C16145 - C16144) * C47428) *
                    C15947 +
                ((C16154 - C16155 + C16156 - C16157) * C114 +
                 (C16158 - C16159 + C16160 - C16161) * C47428) *
                    C47492) *
                   C47226 * C47505) *
                  C292 +
              ((((C15961 - C15960 + C15963 - C15962) * C114 +
                 (C15965 - C15964 + C15967 - C15966) * C47428) *
                    C15947 +
                ((C15968 - C15969 + C15970 - C15971) * C114 +
                 (C15972 - C15973 + C15974 - C15975) * C47428) *
                    C47492) *
                   C47226 * C47544 +
               (((C16147 - C16146 + C16149 - C16148) * C114 +
                 (C16151 - C16150 + C16153 - C16152) * C47428) *
                    C15947 +
                ((C15949 * C300 - C15945 * C316 + C15950 * C301 -
                  C47523 * C318) *
                     C114 +
                 (C15949 * C317 - C15945 * C330 + C15950 * C319 -
                  C47523 * C331) *
                     C47428) *
                    C47492) *
                   C47226 * C47532 +
               (((C16155 - C16154 + C16157 - C16156) * C114 +
                 (C16159 - C16158 + C16161 - C16160) * C47428) *
                    C15947 +
                ((C15945 * C318 - C15949 * C301 + C47523 * C1427 -
                  C15950 * C1426) *
                     C114 +
                 (C15945 * C331 - C15949 * C319 + C47523 * C1429 -
                  C15950 * C1428) *
                     C47428) *
                    C47492) *
                   C47226 * C47505) *
                  C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47545 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47534 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C47508) *
              C47208 * C291 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47545 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C47534 +
           (((C16317 - C16316 + C16319 - C16318) * C114 +
             (C16321 - C16320 + C16323 - C16322) * C47428) *
                C15947 +
            ((C16332 - C16333 + C16334 - C16335) * C114 +
             (C16336 - C16337 + C16338 - C16339) * C47428) *
                C47492) *
               C47508) *
              C47208 * C292 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47545 +
           (((C16325 - C16324 + C16327 - C16326) * C114 +
             (C16329 - C16328 + C16331 - C16330) * C47428) *
                C15947 +
            ((C15949 * C487 - C15945 * C503 + C15950 * C934 - C47523 * C942) *
                 C114 +
             (C15949 * C504 - C15945 * C517 + C15950 * C943 - C47523 * C949) *
                 C47428) *
                C47492) *
               C47534 +
           (((C16333 - C16332 + C16335 - C16334) * C114 +
             (C16337 - C16336 + C16339 - C16338) * C47428) *
                C15947 +
            ((C15945 * C505 - C15949 * C488 + C47523 * C2167 - C15950 * C2166) *
                 C114 +
             (C15945 * C518 - C15949 * C506 + C47523 * C2169 - C15950 * C2168) *
                 C47428) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C16470 - C16471 + C16472 - C16473) * C114 +
             (C16474 - C16475 + C16476 - C16477) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C16155 - C16154 + C16157 - C16156) * C114 +
             (C16159 - C16158 + C16161 - C16160) * C47428) *
                C15947 +
            ((C15945 * C318 - C15949 * C301 + C47523 * C1427 - C15950 * C1426) *
                 C114 +
             (C15945 * C331 - C15949 * C319 + C47523 * C1429 - C15950 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C114 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C47428) *
               C15947 +
           ((C15952 - C15953 + C15954 - C15955) * C114 +
            (C15956 - C15957 + C15958 - C15959) * C47428) *
               C47492) *
              C47226 * C1146 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C114 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C47428) *
               C15947 +
           ((C16130 - C16131 + C16132 - C16133) * C114 +
            (C16134 - C16135 + C16136 - C16137) * C47428) *
               C47492) *
              C47226 * C1147 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C114 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C47428) *
               C15947 +
           ((C16138 - C16139 + C16140 - C16141) * C114 +
            (C16142 - C16143 + C16144 - C16145) * C47428) *
               C47492) *
              C47226 * C1148 +
          (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C114 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C47428) *
               C15947 +
           ((C15949 * C1153 - C15945 * C1160 + C15950 * C1156 -
             C47523 * C1166) *
                C114 +
            (C15949 * C1161 - C15945 * C1171 + C15950 * C1167 -
             C47523 * C1174) *
                C47428) *
               C47492) *
              C47226 * C1149 +
          (((C15945 * C1164 - C15949 * C1155 + C47523 * C5853 -
             C15950 * C5851) *
                C114 +
            (C15945 * C1173 - C15949 * C1165 + C47523 * C5857 -
             C15950 * C5854) *
                C47428) *
               C15947 +
           ((C15945 * C1166 - C15949 * C1156 + C47523 * C5855 -
             C15950 * C5852) *
                C114 +
            (C15945 * C1174 - C15949 * C1167 + C47523 * C5858 -
             C15950 * C5856) *
                C47428) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47545 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47534 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C47508) *
              C1078 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47545 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C47534 +
           (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
              C47523 * C1307) *
                 C114 +
             (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
              C47523 * C1319) *
                 C47428) *
                C15947 +
            ((C15949 * C1287 - C15945 * C1297 + C15950 * C1293 -
              C47523 * C1309) *
                 C114 +
             (C15949 * C1298 - C15945 * C1314 + C15950 * C1310 -
              C47523 * C1320) *
                 C47428) *
                C47492) *
               C47508) *
              C1079 +
          ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47545 +
           (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
              C47523 * C1697) *
                 C114 +
             (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
              C47523 * C1703) *
                 C47428) *
                C15947 +
            ((C15949 * C1290 - C15945 * C1303 + C15950 * C1695 -
              C47523 * C1699) *
                 C114 +
             (C15949 * C1304 - C15945 * C1317 + C15950 * C1700 -
              C47523 * C1704) *
                 C47428) *
                C47492) *
               C47534 +
           (((C15945 * C1307 - C15949 * C1292 + C47523 * C6007 -
              C15950 * C6005) *
                 C114 +
             (C15945 * C1319 - C15949 * C1308 + C47523 * C6011 -
              C15950 * C6008) *
                 C47428) *
                C15947 +
            ((C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C114 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47428) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C1816 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C1817 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C47508) *
              C47208 * C47541 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C1816 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C1817 +
           (((C16317 - C16316 + C16319 - C16318) * C114 +
             (C16321 - C16320 + C16323 - C16322) * C47428) *
                C15947 +
            ((C16332 - C16333 + C16334 - C16335) * C114 +
             (C16336 - C16337 + C16338 - C16339) * C47428) *
                C47492) *
               C47508) *
              C47208 * C47528 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C1816 +
           (((C16325 - C16324 + C16327 - C16326) * C114 +
             (C16329 - C16328 + C16331 - C16330) * C47428) *
                C15947 +
            ((C16608 - C16609 + C16610 - C16611) * C114 +
             (C16612 - C16613 + C16614 - C16615) * C47428) *
                C47492) *
               C1817 +
           (((C16333 - C16332 + C16335 - C16334) * C114 +
             (C16337 - C16336 + C16339 - C16338) * C47428) *
                C15947 +
            ((C15945 * C505 - C15949 * C488 + C47523 * C2167 - C15950 * C2166) *
                 C114 +
             (C15945 * C518 - C15949 * C506 + C47523 * C2169 - C15950 * C2168) *
                 C47428) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C1816 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C1817 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C47508) *
              C47544 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C1816 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C1817 +
           (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
              C47523 * C1307) *
                 C114 +
             (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
              C47523 * C1319) *
                 C47428) *
                C15947 +
            ((C15949 * C1287 - C15945 * C1297 + C15950 * C1293 -
              C47523 * C1309) *
                 C114 +
             (C15949 * C1298 - C15945 * C1314 + C15950 * C1310 -
              C47523 * C1320) *
                 C47428) *
                C47492) *
               C47508) *
              C47532 +
          ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C1816 +
           (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
              C47523 * C1697) *
                 C114 +
             (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
              C47523 * C1703) *
                 C47428) *
                C15947 +
            ((C17532 - C17533 + C17534 - C17535) * C114 +
             (C17536 - C17537 + C17538 - C17539) * C47428) *
                C47492) *
               C1817 +
           (((C15945 * C1307 - C15949 * C1292 + C47523 * C6007 -
              C15950 * C6005) *
                 C114 +
             (C15945 * C1319 - C15949 * C1308 + C47523 * C6011 -
              C15950 * C6008) *
                 C47428) *
                C15947 +
            ((C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C114 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47428) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C114 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C47428) *
               C15947 +
           ((C15952 - C15953 + C15954 - C15955) * C114 +
            (C15956 - C15957 + C15958 - C15959) * C47428) *
               C47492) *
              C1991 +
          (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                C114 +
            (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                C47428) *
               C15947 +
           ((C16308 - C16309 + C16310 - C16311) * C114 +
            (C16312 - C16313 + C16314 - C16315) * C47428) *
               C47492) *
              C1992 +
          (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                C114 +
            (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                C47428) *
               C15947 +
           ((C16316 - C16317 + C16318 - C16319) * C114 +
            (C16320 - C16321 + C16322 - C16323) * C47428) *
               C47492) *
              C1993 +
          (((C15949 * C1996 - C15945 * C2002 + C15950 * C2390 -
             C47523 * C2393) *
                C114 +
            (C15949 * C2003 - C15945 * C2014 + C15950 * C2394 -
             C47523 * C2399) *
                C47428) *
               C15947 +
           ((C15949 * C1997 - C15945 * C2004 + C15950 * C2391 -
             C47523 * C2395) *
                C114 +
            (C15949 * C2005 - C15945 * C2015 + C15950 * C2396 -
             C47523 * C2400) *
                C47428) *
               C47492) *
              C1994 +
          (((C15945 * C2008 - C15949 * C1999 + C47523 * C6867 -
             C15950 * C6865) *
                C114 +
            (C15945 * C2017 - C15949 * C2009 + C47523 * C6871 -
             C15950 * C6868) *
                C47428) *
               C15947 +
           ((C15945 * C2010 - C15949 * C2000 + C47523 * C6869 -
             C15950 * C6866) *
                C114 +
            (C15945 * C2018 - C15949 * C2011 + C47523 * C6872 -
             C15950 * C6870) *
                C47428) *
               C47492) *
              C1995) *
         C47208 * C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C47474 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C47474 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 -
               C15950 * C1152) *
                  C114 +
              (C15945 * C327 - C15949 * C311 + C47523 * C1170 -
               C15950 * C1159) *
                  C47428) *
                 C15947 +
             ((C16138 - C16139 + C16140 - C16141) * C114 +
              (C16142 - C16143 + C16144 - C16145) * C47428) *
                 C47492) *
                C47474 +
            (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
               C47523 * C1697) *
                  C114 +
              (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
               C47523 * C1703) *
                  C47428) *
                 C15947 +
             ((C17532 - C17533 + C17534 - C17535) * C114 +
              (C17536 - C17537 + C17538 - C17539) * C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47459 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C47474 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C47474 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C16139 - C16138 + C16141 - C16140) * C114 +
              (C16143 - C16142 + C16145 - C16144) * C47428) *
                 C15947 +
             ((C16154 - C16155 + C16156 - C16157) * C114 +
              (C16158 - C16159 + C16160 - C16161) * C47428) *
                 C47492) *
                C47474 +
            (((C17533 - C17532 + C17535 - C17534) * C114 +
              (C17537 - C17536 + C17539 - C17538) * C47428) *
                 C15947 +
             ((C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
               C15950 * C1696) *
                  C114 +
              (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
               C15950 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47474 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47313) *
              C47208 * C655 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47474 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C47313) *
              C47208 * C656 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47474 +
           (((C16325 - C16324 + C16327 - C16326) * C114 +
             (C16329 - C16328 + C16331 - C16330) * C47428) *
                C15947 +
            ((C16608 - C16609 + C16610 - C16611) * C114 +
             (C16612 - C16613 + C16614 - C16615) * C47428) *
                C47492) *
               C47313) *
              C47208 * C657 +
          ((((C15969 - C15968 + C15971 - C15970) * C114 +
             (C15973 - C15972 + C15975 - C15974) * C47428) *
                C15947 +
            ((C15976 - C15977 + C15978 - C15979) * C114 +
             (C15980 - C15981 + C15982 - C15983) * C47428) *
                C47492) *
               C47474 +
           (((C16609 - C16608 + C16611 - C16610) * C114 +
             (C16613 - C16612 + C16615 - C16614) * C47428) *
                C15947 +
            ((C15945 * C507 - C15949 * C489 + C47523 * C944 - C15950 * C935) *
                 C114 +
             (C15945 * C519 - C15949 * C508 + C47523 * C950 - C15950 * C945) *
                 C47428) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C2276 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C2277 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C2278 +
           (((C15949 * C1996 - C15945 * C2002 + C15950 * C2390 -
              C47523 * C2393) *
                 C114 +
             (C15949 * C2003 - C15945 * C2014 + C15950 * C2394 -
              C47523 * C2399) *
                 C47428) *
                C15947 +
            ((C18376 - C18377 + C18378 - C18379) * C114 +
             (C18380 - C18381 + C18382 - C18383) * C47428) *
                C47492) *
               C47521) *
              C47208 * C47459 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C2276 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C2277 +
           (((C16317 - C16316 + C16319 - C16318) * C114 +
             (C16321 - C16320 + C16323 - C16322) * C47428) *
                C15947 +
            ((C16332 - C16333 + C16334 - C16335) * C114 +
             (C16336 - C16337 + C16338 - C16339) * C47428) *
                C47492) *
               C2278 +
           (((C18377 - C18376 + C18379 - C18378) * C114 +
             (C18381 - C18380 + C18383 - C18382) * C47428) *
                C15947 +
            ((C15945 * C2006 - C15949 * C1998 + C47523 * C2397 -
              C15950 * C2392) *
                 C114 +
             (C15945 * C2016 - C15949 * C2007 + C47523 * C2401 -
              C15950 * C2398) *
                 C47428) *
                C47492) *
               C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C47505) *
              C291 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C47505) *
              C292 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C15949 * C300 - C15945 * C316 + C15950 * C301 - C47523 * C318) *
                 C114 +
             (C15949 * C317 - C15945 * C330 + C15950 * C319 - C47523 * C331) *
                 C47428) *
                C47492) *
               C47226 * C47532 +
           (((C16155 - C16154 + C16157 - C16156) * C114 +
             (C16159 - C16158 + C16161 - C16160) * C47428) *
                C15947 +
            ((C15945 * C318 - C15949 * C301 + C47523 * C1427 - C15950 * C1426) *
                 C114 +
             (C15945 * C331 - C15949 * C319 + C47523 * C1429 - C15950 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C114 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C47428) *
               C15947 +
           ((C15952 - C15953 + C15954 - C15955) * C114 +
            (C15956 - C15957 + C15958 - C15959) * C47428) *
               C47492) *
              C47226 * C47208 * C108 +
          (((C15953 - C15952 + C15955 - C15954) * C114 +
            (C15957 - C15956 + C15959 - C15958) * C47428) *
               C15947 +
           ((C15960 - C15961 + C15962 - C15963) * C114 +
            (C15964 - C15965 + C15966 - C15967) * C47428) *
               C47492) *
              C47226 * C47208 * C109 +
          (((C15961 - C15960 + C15963 - C15962) * C114 +
            (C15965 - C15964 + C15967 - C15966) * C47428) *
               C15947 +
           ((C15968 - C15969 + C15970 - C15971) * C114 +
            (C15972 - C15973 + C15974 - C15975) * C47428) *
               C47492) *
              C47226 * C47208 * C110 +
          (((C15969 - C15968 + C15971 - C15970) * C114 +
            (C15973 - C15972 + C15975 - C15974) * C47428) *
               C15947 +
           ((C15976 - C15977 + C15978 - C15979) * C114 +
            (C15980 - C15981 + C15982 - C15983) * C47428) *
               C47492) *
              C47226 * C47208 * C111 +
          (((C15977 - C15976 + C15979 - C15978) * C114 +
            (C15981 - C15980 + C15983 - C15982) * C47428) *
               C15947 +
           ((C15945 * C132 - C15949 * C120 + C47523 * C660 - C15950 * C659) *
                C114 +
            (C15945 * C141 - C15949 * C133 + C47523 * C662 - C15950 * C661) *
                C47428) *
               C47492) *
              C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C16470 - C16471 + C16472 - C16473) * C114 +
             (C16474 - C16475 + C16476 - C16477) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C16155 - C16154 + C16157 - C16156) * C114 +
             (C16159 - C16158 + C16161 - C16160) * C47428) *
                C15947 +
            ((C15945 * C318 - C15949 * C301 + C47523 * C1427 - C15950 * C1426) *
                 C114 +
             (C15945 * C331 - C15949 * C319 + C47523 * C1429 - C15950 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C114 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C47428) *
               C15947 +
           ((C15952 - C15953 + C15954 - C15955) * C114 +
            (C15956 - C15957 + C15958 - C15959) * C47428) *
               C47492) *
              C47226 * C1146 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C114 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C47428) *
               C15947 +
           ((C16130 - C16131 + C16132 - C16133) * C114 +
            (C16134 - C16135 + C16136 - C16137) * C47428) *
               C47492) *
              C47226 * C1147 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C114 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C47428) *
               C15947 +
           ((C16138 - C16139 + C16140 - C16141) * C114 +
            (C16142 - C16143 + C16144 - C16145) * C47428) *
               C47492) *
              C47226 * C1148 +
          (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C114 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C47428) *
               C15947 +
           ((C15949 * C1153 - C15945 * C1160 + C15950 * C1156 -
             C47523 * C1166) *
                C114 +
            (C15949 * C1161 - C15945 * C1171 + C15950 * C1167 -
             C47523 * C1174) *
                C47428) *
               C47492) *
              C47226 * C1149 +
          (((C15945 * C1164 - C15949 * C1155 + C47523 * C5853 -
             C15950 * C5851) *
                C114 +
            (C15945 * C1173 - C15949 * C1165 + C47523 * C5857 -
             C15950 * C5854) *
                C47428) *
               C15947 +
           ((C15945 * C1166 - C15949 * C1156 + C47523 * C5855 -
             C15950 * C5852) *
                C114 +
            (C15945 * C1174 - C15949 * C1167 + C47523 * C5858 -
             C15950 * C5856) *
                C47428) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C1816 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C1817 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C47508) *
              C47208 * C47541 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C1816 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C1817 +
           (((C16317 - C16316 + C16319 - C16318) * C114 +
             (C16321 - C16320 + C16323 - C16322) * C47428) *
                C15947 +
            ((C16332 - C16333 + C16334 - C16335) * C114 +
             (C16336 - C16337 + C16338 - C16339) * C47428) *
                C47492) *
               C47508) *
              C47208 * C47528 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C1816 +
           (((C16325 - C16324 + C16327 - C16326) * C114 +
             (C16329 - C16328 + C16331 - C16330) * C47428) *
                C15947 +
            ((C16608 - C16609 + C16610 - C16611) * C114 +
             (C16612 - C16613 + C16614 - C16615) * C47428) *
                C47492) *
               C1817 +
           (((C16333 - C16332 + C16335 - C16334) * C114 +
             (C16337 - C16336 + C16339 - C16338) * C47428) *
                C15947 +
            ((C15945 * C505 - C15949 * C488 + C47523 * C2167 - C15950 * C2166) *
                 C114 +
             (C15945 * C518 - C15949 * C506 + C47523 * C2169 - C15950 * C2168) *
                 C47428) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C1816 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C1817 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C47508) *
              C47544 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C1816 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C1817 +
           (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
              C47523 * C1307) *
                 C114 +
             (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
              C47523 * C1319) *
                 C47428) *
                C15947 +
            ((C15949 * C1287 - C15945 * C1297 + C15950 * C1293 -
              C47523 * C1309) *
                 C114 +
             (C15949 * C1298 - C15945 * C1314 + C15950 * C1310 -
              C47523 * C1320) *
                 C47428) *
                C47492) *
               C47508) *
              C47532 +
          ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C1816 +
           (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
              C47523 * C1697) *
                 C114 +
             (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
              C47523 * C1703) *
                 C47428) *
                C15947 +
            ((C17532 - C17533 + C17534 - C17535) * C114 +
             (C17536 - C17537 + C17538 - C17539) * C47428) *
                C47492) *
               C1817 +
           (((C15945 * C1307 - C15949 * C1292 + C47523 * C6007 -
              C15950 * C6005) *
                 C114 +
             (C15945 * C1319 - C15949 * C1308 + C47523 * C6011 -
              C15950 * C6008) *
                 C47428) *
                C15947 +
            ((C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C114 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47428) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C3262 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C3262 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47185 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C3262 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C3262 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47194 +
          (((((C15961 - C15960 + C15963 - C15962) * C114 +
              (C15965 - C15964 + C15967 - C15966) * C47428) *
                 C15947 +
             ((C15968 - C15969 + C15970 - C15971) * C114 +
              (C15972 - C15973 + C15974 - C15975) * C47428) *
                 C47492) *
                C3262 +
            (((C16325 - C16324 + C16327 - C16326) * C114 +
              (C16329 - C16328 + C16331 - C16330) * C47428) *
                 C15947 +
             ((C16608 - C16609 + C16610 - C16611) * C114 +
              (C16612 - C16613 + C16614 - C16615) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C16147 - C16146 + C16149 - C16148) * C114 +
              (C16151 - C16150 + C16153 - C16152) * C47428) *
                 C15947 +
             ((C16470 - C16471 + C16472 - C16473) * C114 +
              (C16474 - C16475 + C16476 - C16477) * C47428) *
                 C47492) *
                C3262 +
            (((C16819 - C16818 + C16821 - C16820) * C114 +
              (C16823 - C16822 + C16825 - C16824) * C47428) *
                 C15947 +
             ((C15945 * C942 - C15949 * C934 + C47523 * C1585 -
               C15950 * C1584) *
                  C114 +
              (C15945 * C949 - C15949 * C943 + C47523 * C1587 -
               C15950 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C47309 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47316 +
            (((C15945 * C497 - C15949 * C484 + C47523 * C1295 -
               C15950 * C1286) *
                  C114 +
              (C15945 * C514 - C15949 * C498 + C47523 * C1313 -
               C15950 * C1296) *
                  C47428) *
                 C15947 +
             ((C16316 - C16317 + C16318 - C16319) * C114 +
              (C16320 - C16321 + C16322 - C16323) * C47428) *
                 C47492) *
                C3770) *
               C47473 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C47309 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47316 +
            (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
               C47523 * C1307) *
                  C114 +
              (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
               C47523 * C1319) *
                  C47428) *
                 C15947 +
             ((C18238 - C18239 + C18240 - C18241) * C114 +
              (C18242 - C18243 + C18244 - C18245) * C47428) *
                 C47492) *
                C3770) *
               C47271) *
              C2608 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C47309 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47316 +
            (((C16317 - C16316 + C16319 - C16318) * C114 +
              (C16321 - C16320 + C16323 - C16322) * C47428) *
                 C15947 +
             ((C16332 - C16333 + C16334 - C16335) * C114 +
              (C16336 - C16337 + C16338 - C16339) * C47428) *
                 C47492) *
                C3770) *
               C47473 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C47309 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47316 +
            (((C18239 - C18238 + C18241 - C18240) * C114 +
              (C18243 - C18242 + C18245 - C18244) * C47428) *
                 C15947 +
             ((C15945 * C1299 - C15949 * C1288 + C47523 * C1311 -
               C15950 * C1294) *
                  C114 +
              (C15945 * C1315 - C15949 * C1300 + C47523 * C1321 -
               C15950 * C1312) *
                  C47428) *
                 C47492) *
                C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C3262 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C3262 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 -
               C15950 * C1152) *
                  C114 +
              (C15945 * C327 - C15949 * C311 + C47523 * C1170 -
               C15950 * C1159) *
                  C47428) *
                 C15947 +
             ((C16138 - C16139 + C16140 - C16141) * C114 +
              (C16142 - C16143 + C16144 - C16145) * C47428) *
                 C47492) *
                C3262 +
            (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
               C47523 * C1697) *
                  C114 +
              (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
               C47523 * C1703) *
                  C47428) *
                 C15947 +
             ((C17532 - C17533 + C17534 - C17535) * C114 +
              (C17536 - C17537 + C17538 - C17539) * C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C2608 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C3262 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C3262 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C16139 - C16138 + C16141 - C16140) * C114 +
              (C16143 - C16142 + C16145 - C16144) * C47428) *
                 C15947 +
             ((C16154 - C16155 + C16156 - C16157) * C114 +
              (C16158 - C16159 + C16160 - C16161) * C47428) *
                 C47492) *
                C3262 +
            (((C17533 - C17532 + C17535 - C17534) * C114 +
              (C17537 - C17536 + C17539 - C17538) * C47428) *
                 C15947 +
             ((C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
               C15950 * C1696) *
                  C114 +
              (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
               C15950 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C3262 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47550 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C3262 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47543 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C3262 +
           (((C16325 - C16324 + C16327 - C16326) * C114 +
             (C16329 - C16328 + C16331 - C16330) * C47428) *
                C15947 +
            ((C16608 - C16609 + C16610 - C16611) * C114 +
             (C16612 - C16613 + C16614 - C16615) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47530 +
          ((((C15969 - C15968 + C15971 - C15970) * C114 +
             (C15973 - C15972 + C15975 - C15974) * C47428) *
                C15947 +
            ((C15976 - C15977 + C15978 - C15979) * C114 +
             (C15980 - C15981 + C15982 - C15983) * C47428) *
                C47492) *
               C3262 +
           (((C16609 - C16608 + C16611 - C16610) * C114 +
             (C16613 - C16612 + C16615 - C16614) * C47428) *
                C15947 +
            ((C15945 * C507 - C15949 * C489 + C47523 * C944 - C15950 * C935) *
                 C114 +
             (C15945 * C519 - C15949 * C508 + C47523 * C950 - C15950 * C945) *
                 C47428) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47552 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47549 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C47540 +
           (((C15949 * C1996 - C15945 * C2002 + C15950 * C2390 -
              C47523 * C2393) *
                 C114 +
             (C15949 * C2003 - C15945 * C2014 + C15950 * C2394 -
              C47523 * C2399) *
                 C47428) *
                C15947 +
            ((C18376 - C18377 + C18378 - C18379) * C114 +
             (C18380 - C18381 + C18382 - C18383) * C47428) *
                C47492) *
               C47521) *
              C47208 * C2608 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47552 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C47549 +
           (((C16317 - C16316 + C16319 - C16318) * C114 +
             (C16321 - C16320 + C16323 - C16322) * C47428) *
                C15947 +
            ((C16332 - C16333 + C16334 - C16335) * C114 +
             (C16336 - C16337 + C16338 - C16339) * C47428) *
                C47492) *
               C47540 +
           (((C18377 - C18376 + C18379 - C18378) * C114 +
             (C18381 - C18380 + C18383 - C18382) * C47428) *
                C15947 +
            ((C15945 * C2006 - C15949 * C1998 + C47523 * C2397 -
              C15950 * C2392) *
                 C114 +
             (C15945 * C2016 - C15949 * C2007 + C47523 * C2401 -
              C15950 * C2398) *
                 C47428) *
                C47492) *
               C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47309 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47316 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C3770) *
              C47208 * C47185 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47309 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C47316 +
           (((C16317 - C16316 + C16319 - C16318) * C114 +
             (C16321 - C16320 + C16323 - C16322) * C47428) *
                C15947 +
            ((C16332 - C16333 + C16334 - C16335) * C114 +
             (C16336 - C16337 + C16338 - C16339) * C47428) *
                C47492) *
               C3770) *
              C47208 * C47194 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47309 +
           (((C16325 - C16324 + C16327 - C16326) * C114 +
             (C16329 - C16328 + C16331 - C16330) * C47428) *
                C15947 +
            ((C16608 - C16609 + C16610 - C16611) * C114 +
             (C16612 - C16613 + C16614 - C16615) * C47428) *
                C47492) *
               C47316 +
           (((C16333 - C16332 + C16335 - C16334) * C114 +
             (C16337 - C16336 + C16339 - C16338) * C47428) *
                C15947 +
            ((C15945 * C505 - C15949 * C488 + C47523 * C2167 - C15950 * C2166) *
                 C114 +
             (C15945 * C518 - C15949 * C506 + C47523 * C2169 - C15950 * C2168) *
                 C47428) *
                C47492) *
               C3770) *
              C47208 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C3262 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47550 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C3262 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47543 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C3262 +
           (((C16325 - C16324 + C16327 - C16326) * C114 +
             (C16329 - C16328 + C16331 - C16330) * C47428) *
                C15947 +
            ((C16608 - C16609 + C16610 - C16611) * C114 +
             (C16612 - C16613 + C16614 - C16615) * C47428) *
                C47492) *
               C47313) *
              C47208 * C47530 +
          ((((C15969 - C15968 + C15971 - C15970) * C114 +
             (C15973 - C15972 + C15975 - C15974) * C47428) *
                C15947 +
            ((C15976 - C15977 + C15978 - C15979) * C114 +
             (C15980 - C15981 + C15982 - C15983) * C47428) *
                C47492) *
               C3262 +
           (((C16609 - C16608 + C16611 - C16610) * C114 +
             (C16613 - C16612 + C16615 - C16614) * C47428) *
                C15947 +
            ((C15945 * C507 - C15949 * C489 + C47523 * C944 - C15950 * C935) *
                 C114 +
             (C15945 * C519 - C15949 * C508 + C47523 * C950 - C15950 * C945) *
                 C47428) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C3262 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C3262 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 -
               C15950 * C1152) *
                  C114 +
              (C15945 * C327 - C15949 * C311 + C47523 * C1170 -
               C15950 * C1159) *
                  C47428) *
                 C15947 +
             ((C16138 - C16139 + C16140 - C16141) * C114 +
              (C16142 - C16143 + C16144 - C16145) * C47428) *
                 C47492) *
                C3262 +
            (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
               C47523 * C1697) *
                  C114 +
              (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
               C47523 * C1703) *
                  C47428) *
                 C15947 +
             ((C17532 - C17533 + C17534 - C17535) * C114 +
              (C17536 - C17537 + C17538 - C17539) * C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C2608 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C3262 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C3262 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C16139 - C16138 + C16141 - C16140) * C114 +
              (C16143 - C16142 + C16145 - C16144) * C47428) *
                 C15947 +
             ((C16154 - C16155 + C16156 - C16157) * C114 +
              (C16158 - C16159 + C16160 - C16161) * C47428) *
                 C47492) *
                C3262 +
            (((C17533 - C17532 + C17535 - C17534) * C114 +
              (C17537 - C17536 + C17539 - C17538) * C47428) *
                 C15947 +
             ((C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
               C15950 * C1696) *
                  C114 +
              (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
               C15950 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C47271) *
              C655 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C47271) *
              C656 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C16470 - C16471 + C16472 - C16473) * C114 +
             (C16474 - C16475 + C16476 - C16477) * C47428) *
                C47492) *
               C47226 * C47271) *
              C657 +
          ((((C15969 - C15968 + C15971 - C15970) * C114 +
             (C15973 - C15972 + C15975 - C15974) * C47428) *
                C15947 +
            ((C15976 - C15977 + C15978 - C15979) * C114 +
             (C15980 - C15981 + C15982 - C15983) * C47428) *
                C47492) *
               C47226 * C47473 +
           (((C16471 - C16470 + C16473 - C16472) * C114 +
             (C16475 - C16474 + C16477 - C16476) * C47428) *
                C15947 +
            ((C15945 * C320 - C15949 * C302 + C47523 * C322 - C15950 * C303) *
                 C114 +
             (C15945 * C332 - C15949 * C321 + C47523 * C333 - C15950 * C323) *
                 C47428) *
                C47492) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C1420 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C1421 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C1422 +
           (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
              C47523 * C1164) *
                 C114 +
             (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
              C47523 * C1173) *
                 C47428) *
                C15947 +
            ((C17330 - C17331 + C17332 - C17333) * C114 +
             (C17334 - C17335 + C17336 - C17337) * C47428) *
                C47492) *
               C47226 * C47515) *
              C47459 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C1420 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C1421 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C1422 +
           (((C17331 - C17330 + C17333 - C17332) * C114 +
             (C17335 - C17334 + C17337 - C17336) * C47428) *
                C15947 +
            ((C15945 * C1162 - C15949 * C1154 + C47523 * C1168 -
              C15950 * C1157) *
                 C114 +
             (C15945 * C1172 - C15949 * C1163 + C47523 * C1175 -
              C15950 * C1169) *
                 C47428) *
                C47492) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C47474 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C47474 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C291 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C47474 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C47474 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C292 +
          (((((C15961 - C15960 + C15963 - C15962) * C114 +
              (C15965 - C15964 + C15967 - C15966) * C47428) *
                 C15947 +
             ((C15968 - C15969 + C15970 - C15971) * C114 +
              (C15972 - C15973 + C15974 - C15975) * C47428) *
                 C47492) *
                C47474 +
            (((C16325 - C16324 + C16327 - C16326) * C114 +
              (C16329 - C16328 + C16331 - C16330) * C47428) *
                 C15947 +
             ((C16608 - C16609 + C16610 - C16611) * C114 +
              (C16612 - C16613 + C16614 - C16615) * C47428) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C16147 - C16146 + C16149 - C16148) * C114 +
              (C16151 - C16150 + C16153 - C16152) * C47428) *
                 C15947 +
             ((C16470 - C16471 + C16472 - C16473) * C114 +
              (C16474 - C16475 + C16476 - C16477) * C47428) *
                 C47492) *
                C47474 +
            (((C16819 - C16818 + C16821 - C16820) * C114 +
              (C16823 - C16822 + C16825 - C16824) * C47428) *
                 C15947 +
             ((C15945 * C942 - C15949 * C934 + C47523 * C1585 -
               C15950 * C1584) *
                  C114 +
              (C15945 * C949 - C15949 * C943 + C47523 * C1587 -
               C15950 * C1586) *
                  C47428) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47474 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47313) *
              C1420 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47474 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C47313) *
              C1421 +
          ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47474 +
           (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
              C47523 * C1697) *
                 C114 +
             (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
              C47523 * C1703) *
                 C47428) *
                C15947 +
            ((C17532 - C17533 + C17534 - C17535) * C114 +
             (C17536 - C17537 + C17538 - C17539) * C47428) *
                C47492) *
               C47313) *
              C1422 +
          ((((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
              C47523 * C1164) *
                 C114 +
             (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
              C47523 * C1173) *
                 C47428) *
                C15947 +
            ((C17330 - C17331 + C17332 - C17333) * C114 +
             (C17334 - C17335 + C17336 - C17337) * C47428) *
                C47492) *
               C47474 +
           (((C15945 * C1697 - C15949 * C1694 + C47523 * C6485 -
              C15950 * C6483) *
                 C114 +
             (C15945 * C1703 - C15949 * C1698 + C47523 * C6489 -
              C15950 * C6486) *
                 C47428) *
                C15947 +
            ((C15945 * C1699 - C15949 * C1695 + C47523 * C6487 -
              C15950 * C6484) *
                 C114 +
             (C15945 * C1704 - C15949 * C1700 + C47523 * C6490 -
              C15950 * C6488) *
                 C47428) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C47505) *
              C291 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C47505) *
              C292 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C15949 * C300 - C15945 * C316 + C15950 * C301 - C47523 * C318) *
                 C114 +
             (C15949 * C317 - C15945 * C330 + C15950 * C319 - C47523 * C331) *
                 C47428) *
                C47492) *
               C47226 * C47532 +
           (((C16155 - C16154 + C16157 - C16156) * C114 +
             (C16159 - C16158 + C16161 - C16160) * C47428) *
                C15947 +
            ((C15945 * C318 - C15949 * C301 + C47523 * C1427 - C15950 * C1426) *
                 C114 +
             (C15945 * C331 - C15949 * C319 + C47523 * C1429 - C15950 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C114 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C47428) *
               C15947 +
           ((C15952 - C15953 + C15954 - C15955) * C114 +
            (C15956 - C15957 + C15958 - C15959) * C47428) *
               C47492) *
              C47226 * C47208 * C108 +
          (((C15953 - C15952 + C15955 - C15954) * C114 +
            (C15957 - C15956 + C15959 - C15958) * C47428) *
               C15947 +
           ((C15960 - C15961 + C15962 - C15963) * C114 +
            (C15964 - C15965 + C15966 - C15967) * C47428) *
               C47492) *
              C47226 * C47208 * C109 +
          (((C15961 - C15960 + C15963 - C15962) * C114 +
            (C15965 - C15964 + C15967 - C15966) * C47428) *
               C15947 +
           ((C15968 - C15969 + C15970 - C15971) * C114 +
            (C15972 - C15973 + C15974 - C15975) * C47428) *
               C47492) *
              C47226 * C47208 * C110 +
          (((C15969 - C15968 + C15971 - C15970) * C114 +
            (C15973 - C15972 + C15975 - C15974) * C47428) *
               C15947 +
           ((C15976 - C15977 + C15978 - C15979) * C114 +
            (C15980 - C15981 + C15982 - C15983) * C47428) *
               C47492) *
              C47226 * C47208 * C111 +
          (((C15977 - C15976 + C15979 - C15978) * C114 +
            (C15981 - C15980 + C15983 - C15982) * C47428) *
               C15947 +
           ((C15945 * C132 - C15949 * C120 + C47523 * C660 - C15950 * C659) *
                C114 +
            (C15945 * C141 - C15949 * C133 + C47523 * C662 - C15950 * C661) *
                C47428) *
               C47492) *
              C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47545 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47534 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C47508) *
              C47208 * C291 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47545 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C47534 +
           (((C16317 - C16316 + C16319 - C16318) * C114 +
             (C16321 - C16320 + C16323 - C16322) * C47428) *
                C15947 +
            ((C16332 - C16333 + C16334 - C16335) * C114 +
             (C16336 - C16337 + C16338 - C16339) * C47428) *
                C47492) *
               C47508) *
              C47208 * C292 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47545 +
           (((C16325 - C16324 + C16327 - C16326) * C114 +
             (C16329 - C16328 + C16331 - C16330) * C47428) *
                C15947 +
            ((C15949 * C487 - C15945 * C503 + C15950 * C934 - C47523 * C942) *
                 C114 +
             (C15949 * C504 - C15945 * C517 + C15950 * C943 - C47523 * C949) *
                 C47428) *
                C47492) *
               C47534 +
           (((C16333 - C16332 + C16335 - C16334) * C114 +
             (C16337 - C16336 + C16339 - C16338) * C47428) *
                C15947 +
            ((C15945 * C505 - C15949 * C488 + C47523 * C2167 - C15950 * C2166) *
                 C114 +
             (C15945 * C518 - C15949 * C506 + C47523 * C2169 - C15950 * C2168) *
                 C47428) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C16470 - C16471 + C16472 - C16473) * C114 +
             (C16474 - C16475 + C16476 - C16477) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C16155 - C16154 + C16157 - C16156) * C114 +
             (C16159 - C16158 + C16161 - C16160) * C47428) *
                C15947 +
            ((C15945 * C318 - C15949 * C301 + C47523 * C1427 - C15950 * C1426) *
                 C114 +
             (C15945 * C331 - C15949 * C319 + C47523 * C1429 - C15950 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C114 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C47428) *
               C15947 +
           ((C15952 - C15953 + C15954 - C15955) * C114 +
            (C15956 - C15957 + C15958 - C15959) * C47428) *
               C47492) *
              C47226 * C1146 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C114 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C47428) *
               C15947 +
           ((C16130 - C16131 + C16132 - C16133) * C114 +
            (C16134 - C16135 + C16136 - C16137) * C47428) *
               C47492) *
              C47226 * C1147 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C114 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C47428) *
               C15947 +
           ((C16138 - C16139 + C16140 - C16141) * C114 +
            (C16142 - C16143 + C16144 - C16145) * C47428) *
               C47492) *
              C47226 * C1148 +
          (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C114 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C47428) *
               C15947 +
           ((C15949 * C1153 - C15945 * C1160 + C15950 * C1156 -
             C47523 * C1166) *
                C114 +
            (C15949 * C1161 - C15945 * C1171 + C15950 * C1167 -
             C47523 * C1174) *
                C47428) *
               C47492) *
              C47226 * C1149 +
          (((C15945 * C1164 - C15949 * C1155 + C47523 * C5853 -
             C15950 * C5851) *
                C114 +
            (C15945 * C1173 - C15949 * C1165 + C47523 * C5857 -
             C15950 * C5854) *
                C47428) *
               C15947 +
           ((C15945 * C1166 - C15949 * C1156 + C47523 * C5855 -
             C15950 * C5852) *
                C114 +
            (C15945 * C1174 - C15949 * C1167 + C47523 * C5858 -
             C15950 * C5856) *
                C47428) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47545 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47534 +
           (((C15945 * C497 - C15949 * C484 + C47523 * C1295 - C15950 * C1286) *
                 C114 +
             (C15945 * C514 - C15949 * C498 + C47523 * C1313 - C15950 * C1296) *
                 C47428) *
                C15947 +
            ((C16316 - C16317 + C16318 - C16319) * C114 +
             (C16320 - C16321 + C16322 - C16323) * C47428) *
                C47492) *
               C47508) *
              C1078 +
          ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47545 +
           (((C15945 * C936 - C15949 * C931 + C47523 * C1301 - C15950 * C1289) *
                 C114 +
             (C15945 * C946 - C15949 * C937 + C47523 * C1316 - C15950 * C1302) *
                 C47428) *
                C15947 +
            ((C16810 - C16811 + C16812 - C16813) * C114 +
             (C16814 - C16815 + C16816 - C16817) * C47428) *
                C47492) *
               C47534 +
           (((C15949 * C1286 - C15945 * C1295 + C15950 * C1292 -
              C47523 * C1307) *
                 C114 +
             (C15949 * C1296 - C15945 * C1313 + C15950 * C1308 -
              C47523 * C1319) *
                 C47428) *
                C15947 +
            ((C15949 * C1287 - C15945 * C1297 + C15950 * C1293 -
              C47523 * C1309) *
                 C114 +
             (C15949 * C1298 - C15945 * C1314 + C15950 * C1310 -
              C47523 * C1320) *
                 C47428) *
                C47492) *
               C47508) *
              C1079 +
          ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47545 +
           (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
              C47523 * C1697) *
                 C114 +
             (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
              C47523 * C1703) *
                 C47428) *
                C15947 +
            ((C15949 * C1290 - C15945 * C1303 + C15950 * C1695 -
              C47523 * C1699) *
                 C114 +
             (C15949 * C1304 - C15945 * C1317 + C15950 * C1700 -
              C47523 * C1704) *
                 C47428) *
                C47492) *
               C47534 +
           (((C15945 * C1307 - C15949 * C1292 + C47523 * C6007 -
              C15950 * C6005) *
                 C114 +
             (C15945 * C1319 - C15949 * C1308 + C47523 * C6011 -
              C15950 * C6008) *
                 C47428) *
                C15947 +
            ((C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C114 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47428) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47474 +
           (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                 C114 +
             (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                 C47428) *
                C15947 +
            ((C16308 - C16309 + C16310 - C16311) * C114 +
             (C16312 - C16313 + C16314 - C16315) * C47428) *
                C47492) *
               C47313) *
              C47208 * C655 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47474 +
           (((C16309 - C16308 + C16311 - C16310) * C114 +
             (C16313 - C16312 + C16315 - C16314) * C47428) *
                C15947 +
            ((C16324 - C16325 + C16326 - C16327) * C114 +
             (C16328 - C16329 + C16330 - C16331) * C47428) *
                C47492) *
               C47313) *
              C47208 * C656 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47474 +
           (((C16325 - C16324 + C16327 - C16326) * C114 +
             (C16329 - C16328 + C16331 - C16330) * C47428) *
                C15947 +
            ((C16608 - C16609 + C16610 - C16611) * C114 +
             (C16612 - C16613 + C16614 - C16615) * C47428) *
                C47492) *
               C47313) *
              C47208 * C657 +
          ((((C15969 - C15968 + C15971 - C15970) * C114 +
             (C15973 - C15972 + C15975 - C15974) * C47428) *
                C15947 +
            ((C15976 - C15977 + C15978 - C15979) * C114 +
             (C15980 - C15981 + C15982 - C15983) * C47428) *
                C47492) *
               C47474 +
           (((C16609 - C16608 + C16611 - C16610) * C114 +
             (C16613 - C16612 + C16615 - C16614) * C47428) *
                C15947 +
            ((C15945 * C507 - C15949 * C489 + C47523 * C944 - C15950 * C935) *
                 C114 +
             (C15945 * C519 - C15949 * C508 + C47523 * C950 - C15950 * C945) *
                 C47428) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                  C114 +
              (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                  C47428) *
                 C15947 +
             ((C15952 - C15953 + C15954 - C15955) * C114 +
              (C15956 - C15957 + C15958 - C15959) * C47428) *
                 C47492) *
                C47474 +
            (((C15949 * C481 - C15945 * C491 + C15950 * C931 - C47523 * C936) *
                  C114 +
              (C15949 * C492 - C15945 * C511 + C15950 * C937 - C47523 * C946) *
                  C47428) *
                 C15947 +
             ((C16308 - C16309 + C16310 - C16311) * C114 +
              (C16312 - C16313 + C16314 - C16315) * C47428) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                  C114 +
              (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                  C47428) *
                 C15947 +
             ((C16130 - C16131 + C16132 - C16133) * C114 +
              (C16134 - C16135 + C16136 - C16137) * C47428) *
                 C47492) *
                C47474 +
            (((C15945 * C936 - C15949 * C931 + C47523 * C1301 -
               C15950 * C1289) *
                  C114 +
              (C15945 * C946 - C15949 * C937 + C47523 * C1316 -
               C15950 * C1302) *
                  C47428) *
                 C15947 +
             ((C16810 - C16811 + C16812 - C16813) * C114 +
              (C16814 - C16815 + C16816 - C16817) * C47428) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C15945 * C310 - C15949 * C297 + C47523 * C1158 -
               C15950 * C1152) *
                  C114 +
              (C15945 * C327 - C15949 * C311 + C47523 * C1170 -
               C15950 * C1159) *
                  C47428) *
                 C15947 +
             ((C16138 - C16139 + C16140 - C16141) * C114 +
              (C16142 - C16143 + C16144 - C16145) * C47428) *
                 C47492) *
                C47474 +
            (((C15949 * C1289 - C15945 * C1301 + C15950 * C1694 -
               C47523 * C1697) *
                  C114 +
              (C15949 * C1302 - C15945 * C1316 + C15950 * C1698 -
               C47523 * C1703) *
                  C47428) *
                 C15947 +
             ((C17532 - C17533 + C17534 - C17535) * C114 +
              (C17536 - C17537 + C17538 - C17539) * C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47459 +
          (((((C15953 - C15952 + C15955 - C15954) * C114 +
              (C15957 - C15956 + C15959 - C15958) * C47428) *
                 C15947 +
             ((C15960 - C15961 + C15962 - C15963) * C114 +
              (C15964 - C15965 + C15966 - C15967) * C47428) *
                 C47492) *
                C47474 +
            (((C16309 - C16308 + C16311 - C16310) * C114 +
              (C16313 - C16312 + C16315 - C16314) * C47428) *
                 C15947 +
             ((C16324 - C16325 + C16326 - C16327) * C114 +
              (C16328 - C16329 + C16330 - C16331) * C47428) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C16131 - C16130 + C16133 - C16132) * C114 +
              (C16135 - C16134 + C16137 - C16136) * C47428) *
                 C15947 +
             ((C16146 - C16147 + C16148 - C16149) * C114 +
              (C16150 - C16151 + C16152 - C16153) * C47428) *
                 C47492) *
                C47474 +
            (((C16811 - C16810 + C16813 - C16812) * C114 +
              (C16815 - C16814 + C16817 - C16816) * C47428) *
                 C15947 +
             ((C16818 - C16819 + C16820 - C16821) * C114 +
              (C16822 - C16823 + C16824 - C16825) * C47428) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C16139 - C16138 + C16141 - C16140) * C114 +
              (C16143 - C16142 + C16145 - C16144) * C47428) *
                 C15947 +
             ((C16154 - C16155 + C16156 - C16157) * C114 +
              (C16158 - C16159 + C16160 - C16161) * C47428) *
                 C47492) *
                C47474 +
            (((C17533 - C17532 + C17535 - C17534) * C114 +
              (C17537 - C17536 + C17539 - C17538) * C47428) *
                 C15947 +
             ((C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
               C15950 * C1696) *
                  C114 +
              (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
               C15950 * C1702) *
                  C47428) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C114 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C47428) *
               C15947 +
           ((C15952 - C15953 + C15954 - C15955) * C114 +
            (C15956 - C15957 + C15958 - C15959) * C47428) *
               C47492) *
              C47226 * C47208 * C108 +
          (((C15953 - C15952 + C15955 - C15954) * C114 +
            (C15957 - C15956 + C15959 - C15958) * C47428) *
               C15947 +
           ((C15960 - C15961 + C15962 - C15963) * C114 +
            (C15964 - C15965 + C15966 - C15967) * C47428) *
               C47492) *
              C47226 * C47208 * C109 +
          (((C15961 - C15960 + C15963 - C15962) * C114 +
            (C15965 - C15964 + C15967 - C15966) * C47428) *
               C15947 +
           ((C15968 - C15969 + C15970 - C15971) * C114 +
            (C15972 - C15973 + C15974 - C15975) * C47428) *
               C47492) *
              C47226 * C47208 * C110 +
          (((C15969 - C15968 + C15971 - C15970) * C114 +
            (C15973 - C15972 + C15975 - C15974) * C47428) *
               C15947 +
           ((C15976 - C15977 + C15978 - C15979) * C114 +
            (C15980 - C15981 + C15982 - C15983) * C47428) *
               C47492) *
              C47226 * C47208 * C111 +
          (((C15977 - C15976 + C15979 - C15978) * C114 +
            (C15981 - C15980 + C15983 - C15982) * C47428) *
               C15947 +
           ((C15945 * C132 - C15949 * C120 + C47523 * C660 - C15950 * C659) *
                C114 +
            (C15945 * C141 - C15949 * C133 + C47523 * C662 - C15950 * C661) *
                C47428) *
               C47492) *
              C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C47505) *
              C291 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C47532 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C47505) *
              C292 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C47544 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C15949 * C300 - C15945 * C316 + C15950 * C301 - C47523 * C318) *
                 C114 +
             (C15949 * C317 - C15945 * C330 + C15950 * C319 - C47523 * C331) *
                 C47428) *
                C47492) *
               C47226 * C47532 +
           (((C16155 - C16154 + C16157 - C16156) * C114 +
             (C16159 - C16158 + C16161 - C16160) * C47428) *
                C15947 +
            ((C15945 * C318 - C15949 * C301 + C47523 * C1427 - C15950 * C1426) *
                 C114 +
             (C15945 * C331 - C15949 * C319 + C47523 * C1429 - C15950 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C114 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C47428) *
                C15947 +
            ((C15952 - C15953 + C15954 - C15955) * C114 +
             (C15956 - C15957 + C15958 - C15959) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C114 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C47428) *
                C15947 +
            ((C16130 - C16131 + C16132 - C16133) * C114 +
             (C16134 - C16135 + C16136 - C16137) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C114 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C47428) *
                C15947 +
            ((C16138 - C16139 + C16140 - C16141) * C114 +
             (C16142 - C16143 + C16144 - C16145) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C15953 - C15952 + C15955 - C15954) * C114 +
             (C15957 - C15956 + C15959 - C15958) * C47428) *
                C15947 +
            ((C15960 - C15961 + C15962 - C15963) * C114 +
             (C15964 - C15965 + C15966 - C15967) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C16131 - C16130 + C16133 - C16132) * C114 +
             (C16135 - C16134 + C16137 - C16136) * C47428) *
                C15947 +
            ((C16146 - C16147 + C16148 - C16149) * C114 +
             (C16150 - C16151 + C16152 - C16153) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C16139 - C16138 + C16141 - C16140) * C114 +
             (C16143 - C16142 + C16145 - C16144) * C47428) *
                C15947 +
            ((C16154 - C16155 + C16156 - C16157) * C114 +
             (C16158 - C16159 + C16160 - C16161) * C47428) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          ((((C15961 - C15960 + C15963 - C15962) * C114 +
             (C15965 - C15964 + C15967 - C15966) * C47428) *
                C15947 +
            ((C15968 - C15969 + C15970 - C15971) * C114 +
             (C15972 - C15973 + C15974 - C15975) * C47428) *
                C47492) *
               C47226 * C1078 +
           (((C16147 - C16146 + C16149 - C16148) * C114 +
             (C16151 - C16150 + C16153 - C16152) * C47428) *
                C15947 +
            ((C16470 - C16471 + C16472 - C16473) * C114 +
             (C16474 - C16475 + C16476 - C16477) * C47428) *
                C47492) *
               C47226 * C1079 +
           (((C16155 - C16154 + C16157 - C16156) * C114 +
             (C16159 - C16158 + C16161 - C16160) * C47428) *
                C15947 +
            ((C15945 * C318 - C15949 * C301 + C47523 * C1427 - C15950 * C1426) *
                 C114 +
             (C15945 * C331 - C15949 * C319 + C47523 * C1429 - C15950 * C1428) *
                 C47428) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C114 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C47428) *
               C15947 +
           ((C15952 - C15953 + C15954 - C15955) * C114 +
            (C15956 - C15957 + C15958 - C15959) * C47428) *
               C47492) *
              C47226 * C1146 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C114 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C47428) *
               C15947 +
           ((C16130 - C16131 + C16132 - C16133) * C114 +
            (C16134 - C16135 + C16136 - C16137) * C47428) *
               C47492) *
              C47226 * C1147 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C114 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C47428) *
               C15947 +
           ((C16138 - C16139 + C16140 - C16141) * C114 +
            (C16142 - C16143 + C16144 - C16145) * C47428) *
               C47492) *
              C47226 * C1148 +
          (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C114 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C47428) *
               C15947 +
           ((C15949 * C1153 - C15945 * C1160 + C15950 * C1156 -
             C47523 * C1166) *
                C114 +
            (C15949 * C1161 - C15945 * C1171 + C15950 * C1167 -
             C47523 * C1174) *
                C47428) *
               C47492) *
              C47226 * C1149 +
          (((C15945 * C1164 - C15949 * C1155 + C47523 * C5853 -
             C15950 * C5851) *
                C114 +
            (C15945 * C1173 - C15949 * C1165 + C47523 * C5857 -
             C15950 * C5854) *
                C47428) *
               C15947 +
           ((C15945 * C1166 - C15949 * C1156 + C47523 * C5855 -
             C15950 * C5852) *
                C114 +
            (C15945 * C1174 - C15949 * C1167 + C47523 * C5858 -
             C15950 * C5856) *
                C47428) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C47267 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C47274 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C2868) *
                       C47185 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C47267 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C47274 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C2868) *
                       C47194 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C47267 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C47274 +
                    ((C21539 * C314 - C21543 * C299 + C21540 * C1162 -
                      C21544 * C1154 + C21541 * C1168 - C21545 * C1157) *
                         C114 +
                     (C21539 * C329 - C21543 * C315 + C21540 * C1172 -
                      C21544 * C1163 + C21541 * C1175 - C21545 * C1169) *
                         C47428) *
                        C47157 * C47226 * C2868) *
                       C2871)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C47267 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C47274 +
                    (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                       C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                          C114 +
                      (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                       C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                       C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                          C114 +
                      (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                       C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                          C47428) *
                         C47157 * C47313) *
                        C2868) *
                       C2608 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C47267 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C47274 +
                    (((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                       C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                          C114 +
                      (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                       C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C1303 - C21543 * C1290 + C21540 * C1699 -
                       C21544 * C1695 + C21541 * C6487 - C21545 * C6484) *
                          C114 +
                      (C21539 * C1317 - C21543 * C1304 + C21540 * C1704 -
                       C21544 * C1700 + C21541 * C6490 - C21545 * C6488) *
                          C47428) *
                         C47157 * C47313) *
                        C2868) *
                       C47191)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C47551 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C47547 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C47537 +
                    ((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                      C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                         C114 +
                     (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                      C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                         C47428) *
                        C47157 * C47226 * C47515) *
                       C2608 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C47551 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C47547 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C47537 +
                    ((C21539 * C1160 - C21543 * C1153 + C21540 * C1166 -
                      C21544 * C1156 + C21541 * C5855 - C21545 * C5852) *
                         C114 +
                     (C21539 * C1171 - C21543 * C1161 + C21540 * C1174 -
                      C21544 * C1167 + C21541 * C5858 - C21545 * C5856) *
                         C47428) *
                        C47157 * C47226 * C47515) *
                       C47191)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C2500 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C47550 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C2500 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C47543 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C2500 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C47530 +
                   (((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                      C21540 * C316 + C21545 * C301 - C21541 * C318) *
                         C114 +
                     (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                      C21540 * C330 + C21545 * C319 - C21541 * C331) *
                         C47428) *
                        C47157 * C47226 * C2500 +
                    ((C21539 * C316 - C21543 * C300 + C21540 * C318 -
                      C21544 * C301 + C21541 * C1427 - C21545 * C1426) *
                         C114 +
                     (C21539 * C330 - C21543 * C317 + C21540 * C331 -
                      C21544 * C319 + C21541 * C1429 - C21545 * C1428) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C47509)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C47545 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47534 +
                     ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                       C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                          C114 +
                      (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                       C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                          C47428) *
                         C47157 * C47508) *
                        C2500 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C47545 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47534 +
                     ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                       C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                          C114 +
                      (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                       C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                          C47428) *
                         C47157 * C47508) *
                        C47271) *
                       C2608 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C47545 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47534 +
                     ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                       C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                          C114 +
                      (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                       C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                          C47428) *
                         C47157 * C47508) *
                        C2500 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C47545 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47534 +
                     ((C21539 * C1297 - C21543 * C1287 + C21540 * C1309 -
                       C21544 * C1293 + C21541 * C6009 - C21545 * C6006) *
                          C114 +
                      (C21539 * C1314 - C21543 * C1298 + C21540 * C1320 -
                       C21544 * C1310 + C21541 * C6012 - C21545 * C6010) *
                          C47428) *
                         C47157 * C47508) *
                        C47271) *
                       C47191)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C2500 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47185 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C2500 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47194 +
                   ((((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                       C21544 * C296 + C21541 * C314 - C21545 * C299) *
                          C114 +
                      (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                       C21544 * C309 + C21541 * C329 - C21545 * C315) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                       C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                          C114 +
                      (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                       C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                          C47428) *
                         C47157 * C47313) *
                        C2500 +
                    (((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                       C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                          C114 +
                      (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                       C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C940 - C21543 * C933 + C21540 * C1305 -
                       C21544 * C1291 + C21541 * C1701 - C21545 * C1696) *
                          C114 +
                      (C21539 * C948 - C21543 * C941 + C21540 * C1318 -
                       C21544 * C1306 + C21541 * C1705 - C21545 * C1702) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C2871)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C2500 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C47550 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C2500 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C47543 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C2500 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C47530 +
                   (((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                      C21540 * C316 + C21545 * C301 - C21541 * C318) *
                         C114 +
                     (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                      C21540 * C330 + C21545 * C319 - C21541 * C331) *
                         C47428) *
                        C47157 * C47226 * C2500 +
                    ((C21539 * C316 - C21543 * C300 + C21540 * C318 -
                      C21544 * C301 + C21541 * C1427 - C21545 * C1426) *
                         C114 +
                     (C21539 * C330 - C21543 * C317 + C21540 * C331 -
                      C21544 * C319 + C21541 * C1429 - C21545 * C1428) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C47509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C47551 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C47547 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C47537 +
                    ((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                      C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                         C114 +
                     (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                      C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                         C47428) *
                        C47157 * C47226 * C47515) *
                       C2608 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C47551 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C47547 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C47537 +
                    ((C21539 * C1160 - C21543 * C1153 + C21540 * C1166 -
                      C21544 * C1156 + C21541 * C5855 - C21545 * C5852) *
                         C114 +
                     (C21539 * C1171 - C21543 * C1161 + C21540 * C1174 -
                      C21544 * C1167 + C21541 * C5858 - C21545 * C5856) *
                         C47428) *
                        C47157 * C47226 * C47515) *
                       C47191)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C47267 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C47274 +
                    (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                       C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                          C114 +
                      (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                       C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                       C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                          C114 +
                      (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                       C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                          C47428) *
                         C47157 * C47313) *
                        C2868) *
                       C47459 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C47267 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C47274 +
                    (((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                       C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                          C114 +
                      (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                       C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C1303 - C21543 * C1290 + C21540 * C1699 -
                       C21544 * C1695 + C21541 * C6487 - C21545 * C6484) *
                          C114 +
                      (C21539 * C1317 - C21543 * C1304 + C21540 * C1704 -
                       C21544 * C1700 + C21541 * C6490 - C21545 * C6488) *
                          C47428) *
                         C47157 * C47313) *
                        C2868) *
                       C47191)) /
                 (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47309 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47316 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C3770) *
                       C47267 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47309 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C47316 +
                    ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                      C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                         C114 +
                     (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                      C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                         C47428) *
                        C47157 * C3770) *
                       C47274 +
                   (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47309 +
                    ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                      C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                         C114 +
                     (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                      C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                         C47428) *
                        C47157 * C47316 +
                    ((C21539 * C1307 - C21543 * C1292 + C21540 * C6007 -
                      C21544 * C6005 + C21541 * C22395 - C21545 * C22394) *
                         C114 +
                     (C21539 * C1319 - C21543 * C1308 + C21540 * C6011 -
                      C21544 * C6008 + C21541 * C22397 - C21545 * C22396) *
                         C47428) *
                        C47157 * C3770) *
                       C2868) *
                  C47180) /
                 (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47313) *
                       C47551 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C47313) *
                       C47547 +
                   (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                      C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                         C114 +
                     (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                      C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                         C47428) *
                        C47157 * C47313) *
                       C47537 +
                   (((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                      C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                         C114 +
                     (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                      C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21539 * C1697 - C21543 * C1694 + C21540 * C6485 -
                      C21544 * C6483 + C21541 * C22741 - C21545 * C22740) *
                         C114 +
                     (C21539 * C1703 - C21543 * C1698 + C21540 * C6489 -
                      C21544 * C6486 + C21541 * C22743 - C21545 * C22742) *
                         C47428) *
                        C47157 * C47313) *
                       C47515) *
                  C47180) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C2500 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47541 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C2500 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47528 +
                   ((((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                       C21544 * C296 + C21541 * C314 - C21545 * C299) *
                          C114 +
                      (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                       C21544 * C309 + C21541 * C329 - C21545 * C315) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                       C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                          C114 +
                      (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                       C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                          C47428) *
                         C47157 * C47313) *
                        C2500 +
                    (((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                       C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                          C114 +
                      (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                       C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C940 - C21543 * C933 + C21540 * C1305 -
                       C21544 * C1291 + C21541 * C1701 - C21545 * C1696) *
                          C114 +
                      (C21539 * C948 - C21543 * C941 + C21540 * C1318 -
                       C21544 * C1306 + C21541 * C1705 - C21545 * C1702) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47552 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47549 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C47540 +
                    ((C21543 * C1996 - C21539 * C2002 + C21544 * C2390 -
                      C21540 * C2393 + C21545 * C7343 - C21541 * C7345) *
                         C114 +
                     (C21543 * C2003 - C21539 * C2014 + C21544 * C2394 -
                      C21540 * C2399 + C21545 * C7346 - C21541 * C7349) *
                         C47428) *
                        C47157 * C47521) *
                       C2500 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47552 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C47549 +
                    ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                      C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                         C114 +
                     (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                      C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                         C47428) *
                        C47157 * C47540 +
                    ((C21539 * C2393 - C21543 * C2390 + C21540 * C7345 -
                      C21544 * C7343 + C21541 * C23373 - C21545 * C23372) *
                         C114 +
                     (C21539 * C2399 - C21543 * C2394 + C21540 * C7349 -
                      C21544 * C7346 + C21541 * C23375 - C21545 * C23374) *
                         C47428) *
                        C47157 * C47521) *
                       C47271) *
                  C47180) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C47309 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47316 +
                     ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                       C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                          C114 +
                      (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                       C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                          C47428) *
                         C47157 * C3770) *
                        C2500 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C47309 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47316 +
                     ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                       C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                          C114 +
                      (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                       C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                          C47428) *
                         C47157 * C3770) *
                        C47271) *
                       C47459 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C47309 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47316 +
                     ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                       C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                          C114 +
                      (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                       C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                          C47428) *
                         C47157 * C3770) *
                        C2500 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C47309 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47316 +
                     ((C21539 * C1297 - C21543 * C1287 + C21540 * C1309 -
                       C21544 * C1293 + C21541 * C6009 - C21545 * C6006) *
                          C114 +
                      (C21539 * C1314 - C21543 * C1298 + C21540 * C1320 -
                       C21544 * C1310 + C21541 * C6012 - C21545 * C6010) *
                          C47428) *
                         C47157 * C3770) *
                        C47271) *
                       C47191)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C2500 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47541 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C2500 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47528 +
                   ((((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                       C21544 * C296 + C21541 * C314 - C21545 * C299) *
                          C114 +
                      (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                       C21544 * C309 + C21541 * C329 - C21545 * C315) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                       C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                          C114 +
                      (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                       C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                          C47428) *
                         C47157 * C47313) *
                        C2500 +
                    (((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                       C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                          C114 +
                      (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                       C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C940 - C21543 * C933 + C21540 * C1305 -
                       C21544 * C1291 + C21541 * C1701 - C21545 * C1696) *
                          C114 +
                      (C21539 * C948 - C21543 * C941 + C21540 * C1318 -
                       C21544 * C1306 + C21541 * C1705 - C21545 * C1702) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47313) *
                       C47551 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C47313) *
                       C47547 +
                   (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                      C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                         C114 +
                     (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                      C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                         C47428) *
                        C47157 * C47313) *
                       C47537 +
                   (((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                      C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                         C114 +
                     (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                      C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21539 * C1697 - C21543 * C1694 + C21540 * C6485 -
                      C21544 * C6483 + C21541 * C22741 - C21545 * C22740) *
                         C114 +
                     (C21539 * C1703 - C21543 * C1698 + C21540 * C6489 -
                      C21544 * C6486 + C21541 * C22743 - C21545 * C22742) *
                         C47428) *
                        C47157 * C47313) *
                       C47515) *
                  C47180) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C1420 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C1421 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C1422 +
                    ((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                      C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                         C114 +
                     (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                      C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                         C47428) *
                        C47157 * C47226 * C47515) *
                       C47459 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C1420 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C1421 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C1422 +
                    ((C21539 * C1160 - C21543 * C1153 + C21540 * C1166 -
                      C21544 * C1156 + C21541 * C5855 - C21545 * C5852) *
                         C114 +
                     (C21539 * C1171 - C21543 * C1161 + C21540 * C1174 -
                      C21544 * C1167 + C21541 * C5858 - C21545 * C5856) *
                         C47428) *
                        C47157 * C47226 * C47515) *
                       C47191)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C47473 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C655 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C47473 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C656 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C47473 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C657 +
                   (((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                      C21540 * C316 + C21545 * C301 - C21541 * C318) *
                         C114 +
                     (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                      C21540 * C330 + C21545 * C319 - C21541 * C331) *
                         C47428) *
                        C47157 * C47226 * C47473 +
                    ((C21539 * C316 - C21543 * C300 + C21540 * C318 -
                      C21544 * C301 + C21541 * C1427 - C21545 * C1426) *
                         C114 +
                     (C21539 * C330 - C21543 * C317 + C21540 * C331 -
                      C21544 * C319 + C21541 * C1429 - C21545 * C1428) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C47509)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C1816 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C1817 +
                     ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                       C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                          C114 +
                      (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                       C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                          C47428) *
                         C47157 * C47508) *
                        C47473 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C1816 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C1817 +
                     ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                       C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                          C114 +
                      (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                       C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                          C47428) *
                         C47157 * C47508) *
                        C47271) *
                       C47459 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C1816 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C1817 +
                     ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                       C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                          C114 +
                      (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                       C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                          C47428) *
                         C47157 * C47508) *
                        C47473 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C1816 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C1817 +
                     ((C21539 * C1297 - C21543 * C1287 + C21540 * C1309 -
                       C21544 * C1293 + C21541 * C6009 - C21545 * C6006) *
                          C114 +
                      (C21539 * C1314 - C21543 * C1298 + C21540 * C1320 -
                       C21544 * C1310 + C21541 * C6012 - C21545 * C6010) *
                          C47428) *
                         C47157 * C47508) *
                        C47271) *
                       C47191)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47313) *
                       C1420 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C47313) *
                       C1421 +
                   (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                      C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                         C114 +
                     (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                      C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                         C47428) *
                        C47157 * C47313) *
                       C1422 +
                   (((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                      C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                         C114 +
                     (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                      C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21539 * C1697 - C21543 * C1694 + C21540 * C6485 -
                      C21544 * C6483 + C21541 * C22741 - C21545 * C22740) *
                         C114 +
                     (C21539 * C1703 - C21543 * C1698 + C21540 * C6489 -
                      C21544 * C6486 + C21541 * C22743 - C21545 * C22742) *
                         C47428) *
                        C47157 * C47313) *
                       C47515) *
                  C47180) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C47473 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C291 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C47473 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C292 +
                   ((((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                       C21544 * C296 + C21541 * C314 - C21545 * C299) *
                          C114 +
                      (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                       C21544 * C309 + C21541 * C329 - C21545 * C315) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                       C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                          C114 +
                      (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                       C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                          C47428) *
                         C47157 * C47313) *
                        C47473 +
                    (((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                       C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                          C114 +
                      (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                       C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C940 - C21543 * C933 + C21540 * C1305 -
                       C21544 * C1291 + C21541 * C1701 - C21545 * C1696) *
                          C114 +
                      (C21539 * C948 - C21543 * C941 + C21540 * C1318 -
                       C21544 * C1306 + C21541 * C1705 - C21545 * C1702) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C2276 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C2277 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C2278 +
                    ((C21543 * C1996 - C21539 * C2002 + C21544 * C2390 -
                      C21540 * C2393 + C21545 * C7343 - C21541 * C7345) *
                         C114 +
                     (C21543 * C2003 - C21539 * C2014 + C21544 * C2394 -
                      C21540 * C2399 + C21545 * C7346 - C21541 * C7349) *
                         C47428) *
                        C47157 * C47521) *
                       C47473 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C2276 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C2277 +
                    ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                      C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                         C114 +
                     (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                      C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                         C47428) *
                        C47157 * C2278 +
                    ((C21539 * C2393 - C21543 * C2390 + C21540 * C7345 -
                      C21544 * C7343 + C21541 * C23373 - C21545 * C23372) *
                         C114 +
                     (C21539 * C2399 - C21543 * C2394 + C21540 * C7349 -
                      C21544 * C7346 + C21541 * C23375 - C21545 * C23374) *
                         C47428) *
                        C47157 * C47521) *
                       C47271) *
                  C47180) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (0.5 * std::pow(Pi, 2.5) *
                      (((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                         C21544 * C294 + C21541 * C310 - C21545 * C297) *
                            C114 +
                        (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                         C21544 * C305 + C21541 * C327 - C21545 * C311) *
                            C47428) *
                           C47157 * C47226 * C47208 * C108 +
                       ((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                         C21540 * C306 + C21545 * C298 - C21541 * C312) *
                            C114 +
                        (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                         C21540 * C325 + C21545 * C313 - C21541 * C328) *
                            C47428) *
                           C47157 * C47226 * C47208 * C109 +
                       ((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                         C21544 * C296 + C21541 * C314 - C21545 * C299) *
                            C114 +
                        (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                         C21544 * C309 + C21541 * C329 - C21545 * C315) *
                            C47428) *
                           C47157 * C47226 * C47208 * C110 +
                       ((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                         C21540 * C316 + C21545 * C301 - C21541 * C318) *
                            C114 +
                        (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                         C21540 * C330 + C21545 * C319 - C21541 * C331) *
                            C47428) *
                           C47157 * C47226 * C47208 * C111 +
                       ((C21539 * C130 - C21543 * C119 + C21540 * C320 -
                         C21544 * C302 + C21541 * C322 - C21545 * C303) *
                            C114 +
                        (C21539 * C140 - C21543 * C131 + C21540 * C332 -
                         C21544 * C321 + C21541 * C333 - C21545 * C323) *
                            C47428) *
                           C47157 * C47226 * C47208 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                          C21544 * C294 + C21541 * C310 - C21545 * C297) *
                             C114 +
                         (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                          C21544 * C305 + C21541 * C327 - C21545 * C311) *
                             C47428) *
                            C47157 * C47226 * C47544 +
                        ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                          C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                             C114 +
                         (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                          C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                             C47428) *
                            C47157 * C47226 * C47532 +
                        ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                          C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                             C114 +
                         (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                          C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                             C47428) *
                            C47157 * C47226 * C47505) *
                           C291 +
                       (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                          C21540 * C306 + C21545 * C298 - C21541 * C312) *
                             C114 +
                         (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                          C21540 * C325 + C21545 * C313 - C21541 * C328) *
                             C47428) *
                            C47157 * C47226 * C47544 +
                        ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                          C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                             C114 +
                         (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                          C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                             C47428) *
                            C47157 * C47226 * C47532 +
                        ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                          C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                             C114 +
                         (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                          C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                             C47428) *
                            C47157 * C47226 * C47505) *
                           C292 +
                       (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                          C21544 * C296 + C21541 * C314 - C21545 * C299) *
                             C114 +
                         (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                          C21544 * C309 + C21541 * C329 - C21545 * C315) *
                             C47428) *
                            C47157 * C47226 * C47544 +
                        ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                          C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                             C114 +
                         (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                          C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                             C47428) *
                            C47157 * C47226 * C47532 +
                        ((C21539 * C314 - C21543 * C299 + C21540 * C1162 -
                          C21544 * C1154 + C21541 * C1168 - C21545 * C1157) *
                             C114 +
                         (C21539 * C329 - C21543 * C315 + C21540 * C1172 -
                          C21544 * C1163 + C21541 * C1175 - C21545 * C1169) *
                             C47428) *
                            C47157 * C47226 * C47505) *
                           C47499)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C291 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                      C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                         C114 +
                     (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                      C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C292 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                      C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                         C114 +
                     (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                      C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21539 * C501 - C21543 * C486 + C21540 * C1299 -
                      C21544 * C1288 + C21541 * C1311 - C21545 * C1294) *
                         C114 +
                     (C21539 * C516 - C21543 * C502 + C21540 * C1315 -
                      C21544 * C1300 + C21541 * C1321 - C21545 * C1312) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C47499)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47541 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47528 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21539 * C314 - C21543 * C299 + C21540 * C1162 -
                      C21544 * C1154 + C21541 * C1168 - C21545 * C1157) *
                         C114 +
                     (C21539 * C329 - C21543 * C315 + C21540 * C1172 -
                      C21544 * C1163 + C21541 * C1175 - C21545 * C1169) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                     C21544 * C294 + C21541 * C310 - C21545 * C297) *
                        C114 +
                    (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                     C21544 * C305 + C21541 * C327 - C21545 * C311) *
                        C47428) *
                       C47157 * C47226 * C1146 +
                   ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                     C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                        C114 +
                    (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                     C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                        C47428) *
                       C47157 * C47226 * C1147 +
                   ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                     C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                        C114 +
                    (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                     C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                        C47428) *
                       C47157 * C47226 * C1148 +
                   ((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                     C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                        C114 +
                    (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                     C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                        C47428) *
                       C47157 * C47226 * C1149 +
                   ((C21539 * C1164 - C21543 * C1155 + C21540 * C5853 -
                     C21544 * C5851 + C21541 * C22281 - C21545 * C22280) *
                        C114 +
                    (C21539 * C1173 - C21543 * C1165 + C21540 * C5857 -
                     C21544 * C5854 + C21541 * C22283 - C21545 * C22282) *
                        C47428) *
                       C47157 * C47226 * C1150) *
                  C47180) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C47508) *
                       C1078 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                      C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                         C114 +
                     (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                      C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                         C47428) *
                        C47157 * C47508) *
                       C1079 +
                   (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                      C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                         C114 +
                     (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                      C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21539 * C1307 - C21543 * C1292 + C21540 * C6007 -
                      C21544 * C6005 + C21541 * C22395 - C21545 * C22394) *
                         C114 +
                     (C21539 * C1319 - C21543 * C1308 + C21540 * C6011 -
                      C21544 * C6008 + C21541 * C22397 - C21545 * C22396) *
                         C47428) *
                        C47157 * C47508) *
                       C47505) *
                  C47180) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C47541 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                      C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                         C114 +
                     (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                      C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C47528 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                      C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                         C114 +
                     (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                      C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21539 * C501 - C21543 * C486 + C21540 * C1299 -
                      C21544 * C1288 + C21541 * C1311 - C21545 * C1294) *
                         C114 +
                     (C21539 * C516 - C21543 * C502 + C21540 * C1315 -
                      C21544 * C1300 + C21541 * C1321 - C21545 * C1312) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C47499)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C47508) *
                       C47544 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                      C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                         C114 +
                     (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                      C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                         C47428) *
                        C47157 * C47508) *
                       C47532 +
                   (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                      C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                         C114 +
                     (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                      C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21539 * C1307 - C21543 * C1292 + C21540 * C6007 -
                      C21544 * C6005 + C21541 * C22395 - C21545 * C22394) *
                         C114 +
                     (C21539 * C1319 - C21543 * C1308 + C21540 * C6011 -
                      C21544 * C6008 + C21541 * C22397 - C21545 * C22396) *
                         C47428) *
                        C47157 * C47508) *
                       C47505) *
                  C47180) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                     C21544 * C294 + C21541 * C310 - C21545 * C297) *
                        C114 +
                    (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                     C21544 * C305 + C21541 * C327 - C21545 * C311) *
                        C47428) *
                       C47157 * C1991 +
                   ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                     C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                        C114 +
                    (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                     C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                        C47428) *
                       C47157 * C1992 +
                   ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                     C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                        C114 +
                    (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                     C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                        C47428) *
                       C47157 * C1993 +
                   ((C21543 * C1996 - C21539 * C2002 + C21544 * C2390 -
                     C21540 * C2393 + C21545 * C7343 - C21541 * C7345) *
                        C114 +
                    (C21543 * C2003 - C21539 * C2014 + C21544 * C2394 -
                     C21540 * C2399 + C21545 * C7346 - C21541 * C7349) *
                        C47428) *
                       C47157 * C1994 +
                   ((C21539 * C2008 - C21543 * C1999 + C21540 * C6867 -
                     C21544 * C6865 + C21541 * C23027 - C21545 * C23026) *
                        C114 +
                    (C21539 * C2017 - C21543 * C2009 + C21540 * C6871 -
                     C21544 * C6868 + C21541 * C23029 - C21545 * C23028) *
                        C47428) *
                       C47157 * C1995) *
                  C47208 * C47180) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C1078 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C1079 +
                    (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                       C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                          C114 +
                      (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                       C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                       C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                          C114 +
                      (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                       C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                          C47428) *
                         C47157 * C47313) *
                        C47505) *
                       C47459 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C1078 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C1079 +
                    (((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                       C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                          C114 +
                      (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                       C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C1303 - C21543 * C1290 + C21540 * C1699 -
                       C21544 * C1695 + C21541 * C6487 - C21545 * C6484) *
                          C114 +
                      (C21539 * C1317 - C21543 * C1304 + C21540 * C1704 -
                       C21544 * C1700 + C21541 * C6490 - C21545 * C6488) *
                          C47428) *
                         C47157 * C47313) *
                        C47505) *
                       C47191)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C655 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C656 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                      C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                         C114 +
                     (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                      C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C657 +
                   (((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                      C21540 * C316 + C21545 * C301 - C21541 * C318) *
                         C114 +
                     (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                      C21540 * C330 + C21545 * C319 - C21541 * C331) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21539 * C503 - C21543 * C487 + C21540 * C942 -
                      C21544 * C934 + C21541 * C1585 - C21545 * C1584) *
                         C114 +
                     (C21539 * C517 - C21543 * C504 + C21540 * C949 -
                      C21544 * C943 + C21541 * C1587 - C21545 * C1586) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C47509)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C2276 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C2277 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C2278 +
                    ((C21543 * C1996 - C21539 * C2002 + C21544 * C2390 -
                      C21540 * C2393 + C21545 * C7343 - C21541 * C7345) *
                         C114 +
                     (C21543 * C2003 - C21539 * C2014 + C21544 * C2394 -
                      C21540 * C2399 + C21545 * C7346 - C21541 * C7349) *
                         C47428) *
                        C47157 * C47521) *
                       C47208 * C47459 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C2276 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C2277 +
                    ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                      C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                         C114 +
                     (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                      C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                         C47428) *
                        C47157 * C2278 +
                    ((C21539 * C2004 - C21543 * C1997 + C21540 * C2395 -
                      C21544 * C2391 + C21541 * C7347 - C21545 * C7344) *
                         C114 +
                     (C21539 * C2015 - C21543 * C2005 + C21540 * C2400 -
                      C21544 * C2396 + C21541 * C7350 - C21545 * C7348) *
                         C47428) *
                        C47157 * C47521) *
                       C47208 * C47191)) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C47544 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C47532 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C291 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C47544 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C47532 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C292 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C47544 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C47532 +
                    ((C21539 * C314 - C21543 * C299 + C21540 * C1162 -
                      C21544 * C1154 + C21541 * C1168 - C21545 * C1157) *
                         C114 +
                     (C21539 * C329 - C21543 * C315 + C21540 * C1172 -
                      C21544 * C1163 + C21541 * C1175 - C21545 * C1169) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                     C21544 * C294 + C21541 * C310 - C21545 * C297) *
                        C114 +
                    (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                     C21544 * C305 + C21541 * C327 - C21545 * C311) *
                        C47428) *
                       C47157 * C47226 * C47208 * C108 +
                   ((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                     C21540 * C306 + C21545 * C298 - C21541 * C312) *
                        C114 +
                    (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                     C21540 * C325 + C21545 * C313 - C21541 * C328) *
                        C47428) *
                       C47157 * C47226 * C47208 * C109 +
                   ((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                     C21544 * C296 + C21541 * C314 - C21545 * C299) *
                        C114 +
                    (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                     C21544 * C309 + C21541 * C329 - C21545 * C315) *
                        C47428) *
                       C47157 * C47226 * C47208 * C110 +
                   ((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                     C21540 * C316 + C21545 * C301 - C21541 * C318) *
                        C114 +
                    (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                     C21540 * C330 + C21545 * C319 - C21541 * C331) *
                        C47428) *
                       C47157 * C47226 * C47208 * C111 +
                   ((C21539 * C130 - C21543 * C119 + C21540 * C320 -
                     C21544 * C302 + C21541 * C322 - C21545 * C303) *
                        C114 +
                    (C21539 * C140 - C21543 * C131 + C21540 * C332 -
                     C21544 * C321 + C21541 * C333 - C21545 * C323) *
                        C47428) *
                       C47157 * C47226 * C47208 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47541 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47528 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21539 * C314 - C21543 * C299 + C21540 * C1162 -
                      C21544 * C1154 + C21541 * C1168 - C21545 * C1157) *
                         C114 +
                     (C21539 * C329 - C21543 * C315 + C21540 * C1172 -
                      C21544 * C1163 + C21541 * C1175 - C21545 * C1169) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                     C21544 * C294 + C21541 * C310 - C21545 * C297) *
                        C114 +
                    (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                     C21544 * C305 + C21541 * C327 - C21545 * C311) *
                        C47428) *
                       C47157 * C47226 * C1146 +
                   ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                     C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                        C114 +
                    (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                     C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                        C47428) *
                       C47157 * C47226 * C1147 +
                   ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                     C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                        C114 +
                    (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                     C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                        C47428) *
                       C47157 * C47226 * C1148 +
                   ((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                     C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                        C114 +
                    (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                     C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                        C47428) *
                       C47157 * C47226 * C1149 +
                   ((C21539 * C1164 - C21543 * C1155 + C21540 * C5853 -
                     C21544 * C5851 + C21541 * C22281 - C21545 * C22280) *
                        C114 +
                    (C21539 * C1173 - C21543 * C1165 + C21540 * C5857 -
                     C21544 * C5854 + C21541 * C22283 - C21545 * C22282) *
                        C47428) *
                       C47157 * C47226 * C1150) *
                  C47180) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C47541 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                      C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                         C114 +
                     (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                      C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C47528 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                      C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                         C114 +
                     (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                      C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21539 * C501 - C21543 * C486 + C21540 * C1299 -
                      C21544 * C1288 + C21541 * C1311 - C21545 * C1294) *
                         C114 +
                     (C21539 * C516 - C21543 * C502 + C21540 * C1315 -
                      C21544 * C1300 + C21541 * C1321 - C21545 * C1312) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C47499)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C47508) *
                       C47544 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                      C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                         C114 +
                     (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                      C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                         C47428) *
                        C47157 * C47508) *
                       C47532 +
                   (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C1816 +
                    ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                      C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                         C114 +
                     (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                      C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                         C47428) *
                        C47157 * C1817 +
                    ((C21539 * C1307 - C21543 * C1292 + C21540 * C6007 -
                      C21544 * C6005 + C21541 * C22395 - C21545 * C22394) *
                         C114 +
                     (C21539 * C1319 - C21543 * C1308 + C21540 * C6011 -
                      C21544 * C6008 + C21541 * C22397 - C21545 * C22396) *
                         C47428) *
                        C47157 * C47508) *
                       C47505) *
                  C47180) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C47473 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47185 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C47473 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47194 +
                   ((((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                       C21544 * C296 + C21541 * C314 - C21545 * C299) *
                          C114 +
                      (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                       C21544 * C309 + C21541 * C329 - C21545 * C315) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                       C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                          C114 +
                      (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                       C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                          C47428) *
                         C47157 * C47313) *
                        C47473 +
                    (((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                       C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                          C114 +
                      (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                       C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C940 - C21543 * C933 + C21540 * C1305 -
                       C21544 * C1291 + C21541 * C1701 - C21545 * C1696) *
                          C114 +
                      (C21539 * C948 - C21543 * C941 + C21540 * C1318 -
                       C21544 * C1306 + C21541 * C1705 - C21545 * C1702) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C2871)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C47309 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47316 +
                     ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                       C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                          C114 +
                      (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                       C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                          C47428) *
                         C47157 * C3770) *
                        C47473 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C47309 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47316 +
                     ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                       C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                          C114 +
                      (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                       C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                          C47428) *
                         C47157 * C3770) *
                        C47271) *
                       C2608 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C47309 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47316 +
                     ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                       C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                          C114 +
                      (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                       C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                          C47428) *
                         C47157 * C3770) *
                        C47473 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C47309 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47316 +
                     ((C21539 * C1297 - C21543 * C1287 + C21540 * C1309 -
                       C21544 * C1293 + C21541 * C6009 - C21545 * C6006) *
                          C114 +
                      (C21539 * C1314 - C21543 * C1298 + C21540 * C1320 -
                       C21544 * C1310 + C21541 * C6012 - C21545 * C6010) *
                          C47428) *
                         C47157 * C3770) *
                        C47271) *
                       C47191)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C47544 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C47532 +
                    (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                       C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                          C114 +
                      (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                       C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                       C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                          C114 +
                      (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                       C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                          C47428) *
                         C47157 * C47313) *
                        C47505) *
                       C2608 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C47544 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C47532 +
                    (((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                       C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                          C114 +
                      (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                       C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C1303 - C21543 * C1290 + C21540 * C1699 -
                       C21544 * C1695 + C21541 * C6487 - C21545 * C6484) *
                          C114 +
                      (C21539 * C1317 - C21543 * C1304 + C21540 * C1704 -
                       C21544 * C1700 + C21541 * C6490 - C21545 * C6488) *
                          C47428) *
                         C47157 * C47313) *
                        C47505) *
                       C47191)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C47550 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C47543 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                      C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                         C114 +
                     (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                      C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C47530 +
                   (((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                      C21540 * C316 + C21545 * C301 - C21541 * C318) *
                         C114 +
                     (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                      C21540 * C330 + C21545 * C319 - C21541 * C331) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21539 * C503 - C21543 * C487 + C21540 * C942 -
                      C21544 * C934 + C21541 * C1585 - C21545 * C1584) *
                         C114 +
                     (C21539 * C517 - C21543 * C504 + C21540 * C949 -
                      C21544 * C943 + C21541 * C1587 - C21545 * C1586) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C47509)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47552 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47549 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C47540 +
                    ((C21543 * C1996 - C21539 * C2002 + C21544 * C2390 -
                      C21540 * C2393 + C21545 * C7343 - C21541 * C7345) *
                         C114 +
                     (C21543 * C2003 - C21539 * C2014 + C21544 * C2394 -
                      C21540 * C2399 + C21545 * C7346 - C21541 * C7349) *
                         C47428) *
                        C47157 * C47521) *
                       C47208 * C2608 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47552 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C47549 +
                    ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                      C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                         C114 +
                     (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                      C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                         C47428) *
                        C47157 * C47540 +
                    ((C21539 * C2004 - C21543 * C1997 + C21540 * C2395 -
                      C21544 * C2391 + C21541 * C7347 - C21545 * C7344) *
                         C114 +
                     (C21539 * C2015 - C21543 * C2005 + C21540 * C2400 -
                      C21544 * C2396 + C21541 * C7350 - C21545 * C7348) *
                         C47428) *
                        C47157 * C47521) *
                       C47208 * C47191)) /
                     (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47309 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47316 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C3770) *
                       C47208 * C47185 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47309 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C47316 +
                    ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                      C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                         C114 +
                     (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                      C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                         C47428) *
                        C47157 * C3770) *
                       C47208 * C47194 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47309 +
                    ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                      C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                         C114 +
                     (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                      C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                         C47428) *
                        C47157 * C47316 +
                    ((C21539 * C501 - C21543 * C486 + C21540 * C1299 -
                      C21544 * C1288 + C21541 * C1311 - C21545 * C1294) *
                         C114 +
                     (C21539 * C516 - C21543 * C502 + C21540 * C1315 -
                      C21544 * C1300 + C21541 * C1321 - C21545 * C1312) *
                         C47428) *
                        C47157 * C3770) *
                       C47208 * C2871)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C47550 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C47543 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                      C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                         C114 +
                     (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                      C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C47530 +
                   (((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                      C21540 * C316 + C21545 * C301 - C21541 * C318) *
                         C114 +
                     (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                      C21540 * C330 + C21545 * C319 - C21541 * C331) *
                         C47428) *
                        C47157 * C3262 +
                    ((C21539 * C503 - C21543 * C487 + C21540 * C942 -
                      C21544 * C934 + C21541 * C1585 - C21545 * C1584) *
                         C114 +
                     (C21539 * C517 - C21543 * C504 + C21540 * C949 -
                      C21544 * C943 + C21541 * C1587 - C21545 * C1586) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C47509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C47544 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C47532 +
                    (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                       C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                          C114 +
                      (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                       C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                       C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                          C114 +
                      (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                       C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                          C47428) *
                         C47157 * C47313) *
                        C47505) *
                       C2608 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C47544 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C47532 +
                    (((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                       C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                          C114 +
                      (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                       C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                          C47428) *
                         C47157 * C3262 +
                     ((C21539 * C1303 - C21543 * C1290 + C21540 * C1699 -
                       C21544 * C1695 + C21541 * C6487 - C21545 * C6484) *
                          C114 +
                      (C21539 * C1317 - C21543 * C1304 + C21540 * C1704 -
                       C21544 * C1700 + C21541 * C6490 - C21545 * C6488) *
                          C47428) *
                         C47157 * C47313) *
                        C47505) *
                       C47191)) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C47473 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C655 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C47473 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C656 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C47473 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C657 +
                   (((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                      C21540 * C316 + C21545 * C301 - C21541 * C318) *
                         C114 +
                     (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                      C21540 * C330 + C21545 * C319 - C21541 * C331) *
                         C47428) *
                        C47157 * C47226 * C47473 +
                    ((C21539 * C316 - C21543 * C300 + C21540 * C318 -
                      C21544 * C301 + C21541 * C1427 - C21545 * C1426) *
                         C114 +
                     (C21539 * C330 - C21543 * C317 + C21540 * C331 -
                      C21544 * C319 + C21541 * C1429 - C21545 * C1428) *
                         C47428) *
                        C47157 * C47226 * C47271) *
                       C47509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C1420 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C1421 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C1422 +
                    ((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                      C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                         C114 +
                     (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                      C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                         C47428) *
                        C47157 * C47226 * C47515) *
                       C47459 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C1420 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C1421 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C1422 +
                    ((C21539 * C1160 - C21543 * C1153 + C21540 * C1166 -
                      C21544 * C1156 + C21541 * C5855 - C21545 * C5852) *
                         C114 +
                     (C21539 * C1171 - C21543 * C1161 + C21540 * C1174 -
                      C21544 * C1167 + C21541 * C5858 - C21545 * C5856) *
                         C47428) *
                        C47157 * C47226 * C47515) *
                       C47191)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C47473 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C291 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C47473 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C292 +
                   ((((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                       C21544 * C296 + C21541 * C314 - C21545 * C299) *
                          C114 +
                      (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                       C21544 * C309 + C21541 * C329 - C21545 * C315) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                       C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                          C114 +
                      (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                       C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                          C47428) *
                         C47157 * C47313) *
                        C47473 +
                    (((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                       C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                          C114 +
                      (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                       C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C940 - C21543 * C933 + C21540 * C1305 -
                       C21544 * C1291 + C21541 * C1701 - C21545 * C1696) *
                          C114 +
                      (C21539 * C948 - C21543 * C941 + C21540 * C1318 -
                       C21544 * C1306 + C21541 * C1705 - C21545 * C1702) *
                          C47428) *
                         C47157 * C47313) *
                        C47271) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47313) *
                       C1420 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C47313) *
                       C1421 +
                   (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                      C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                         C114 +
                     (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                      C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                         C47428) *
                        C47157 * C47313) *
                       C1422 +
                   (((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                      C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                         C114 +
                     (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                      C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21539 * C1697 - C21543 * C1694 + C21540 * C6485 -
                      C21544 * C6483 + C21541 * C22741 - C21545 * C22740) *
                         C114 +
                     (C21539 * C1703 - C21543 * C1698 + C21540 * C6489 -
                      C21544 * C6486 + C21541 * C22743 - C21545 * C22742) *
                         C47428) *
                        C47157 * C47313) *
                       C47515) *
                  C47180) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C47544 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C47532 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C291 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C47544 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C47532 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C292 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C47544 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C47532 +
                    ((C21539 * C314 - C21543 * C299 + C21540 * C1162 -
                      C21544 * C1154 + C21541 * C1168 - C21545 * C1157) *
                         C114 +
                     (C21539 * C329 - C21543 * C315 + C21540 * C1172 -
                      C21544 * C1163 + C21541 * C1175 - C21545 * C1169) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                     C21544 * C294 + C21541 * C310 - C21545 * C297) *
                        C114 +
                    (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                     C21544 * C305 + C21541 * C327 - C21545 * C311) *
                        C47428) *
                       C47157 * C47226 * C47208 * C108 +
                   ((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                     C21540 * C306 + C21545 * C298 - C21541 * C312) *
                        C114 +
                    (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                     C21540 * C325 + C21545 * C313 - C21541 * C328) *
                        C47428) *
                       C47157 * C47226 * C47208 * C109 +
                   ((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                     C21544 * C296 + C21541 * C314 - C21545 * C299) *
                        C114 +
                    (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                     C21544 * C309 + C21541 * C329 - C21545 * C315) *
                        C47428) *
                       C47157 * C47226 * C47208 * C110 +
                   ((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                     C21540 * C316 + C21545 * C301 - C21541 * C318) *
                        C114 +
                    (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                     C21540 * C330 + C21545 * C319 - C21541 * C331) *
                        C47428) *
                       C47157 * C47226 * C47208 * C111 +
                   ((C21539 * C130 - C21543 * C119 + C21540 * C320 -
                     C21544 * C302 + C21541 * C322 - C21545 * C303) *
                        C114 +
                    (C21539 * C140 - C21543 * C131 + C21540 * C332 -
                     C21544 * C321 + C21541 * C333 - C21545 * C323) *
                        C47428) *
                       C47157 * C47226 * C47208 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C291 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21543 * C485 - C21539 * C499 + C21544 * C1287 -
                      C21540 * C1297 + C21545 * C1293 - C21541 * C1309) *
                         C114 +
                     (C21543 * C500 - C21539 * C515 + C21544 * C1298 -
                      C21540 * C1314 + C21545 * C1310 - C21541 * C1320) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C292 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                      C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                         C114 +
                     (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                      C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21539 * C501 - C21543 * C486 + C21540 * C1299 -
                      C21544 * C1288 + C21541 * C1311 - C21545 * C1294) *
                         C114 +
                     (C21539 * C516 - C21543 * C502 + C21540 * C1315 -
                      C21544 * C1300 + C21541 * C1321 - C21545 * C1312) *
                         C47428) *
                        C47157 * C47508) *
                       C47208 * C47499)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47541 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47528 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21539 * C314 - C21543 * C299 + C21540 * C1162 -
                      C21544 * C1154 + C21541 * C1168 - C21545 * C1157) *
                         C114 +
                     (C21539 * C329 - C21543 * C315 + C21540 * C1172 -
                      C21544 * C1163 + C21541 * C1175 - C21545 * C1169) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                     C21544 * C294 + C21541 * C310 - C21545 * C297) *
                        C114 +
                    (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                     C21544 * C305 + C21541 * C327 - C21545 * C311) *
                        C47428) *
                       C47157 * C47226 * C1146 +
                   ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                     C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                        C114 +
                    (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                     C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                        C47428) *
                       C47157 * C47226 * C1147 +
                   ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                     C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                        C114 +
                    (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                     C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                        C47428) *
                       C47157 * C47226 * C1148 +
                   ((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                     C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                        C114 +
                    (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                     C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                        C47428) *
                       C47157 * C47226 * C1149 +
                   ((C21539 * C1164 - C21543 * C1155 + C21540 * C5853 -
                     C21544 * C5851 + C21541 * C22281 - C21545 * C22280) *
                        C114 +
                    (C21539 * C1173 - C21543 * C1165 + C21540 * C5857 -
                     C21544 * C5854 + C21541 * C22283 - C21545 * C22282) *
                        C47428) *
                       C47157 * C47226 * C1150) *
                  C47180) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21539 * C497 - C21543 * C484 + C21540 * C1295 -
                      C21544 * C1286 + C21541 * C1307 - C21545 * C1292) *
                         C114 +
                     (C21539 * C514 - C21543 * C498 + C21540 * C1313 -
                      C21544 * C1296 + C21541 * C1319 - C21545 * C1308) *
                         C47428) *
                        C47157 * C47508) *
                       C1078 +
                   (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                      C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                         C114 +
                     (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                      C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21543 * C1286 - C21539 * C1295 + C21544 * C1292 -
                      C21540 * C1307 + C21545 * C6005 - C21541 * C6007) *
                         C114 +
                     (C21543 * C1296 - C21539 * C1313 + C21544 * C1308 -
                      C21540 * C1319 + C21545 * C6008 - C21541 * C6011) *
                         C47428) *
                        C47157 * C47508) *
                       C1079 +
                   (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47545 +
                    ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                      C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                         C114 +
                     (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                      C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                         C47428) *
                        C47157 * C47534 +
                    ((C21539 * C1307 - C21543 * C1292 + C21540 * C6007 -
                      C21544 * C6005 + C21541 * C22395 - C21545 * C22394) *
                         C114 +
                     (C21539 * C1319 - C21543 * C1308 + C21540 * C6011 -
                      C21544 * C6008 + C21541 * C22397 - C21545 * C22396) *
                         C47428) *
                        C47157 * C47508) *
                       C47505) *
                  C47180) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                      C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                         C114 +
                     (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                      C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C655 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                      C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                         C114 +
                     (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                      C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C656 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21543 * C483 - C21539 * C495 + C21544 * C933 -
                      C21540 * C940 + C21545 * C1291 - C21541 * C1305) *
                         C114 +
                     (C21543 * C496 - C21539 * C513 + C21544 * C941 -
                      C21540 * C948 + C21545 * C1306 - C21541 * C1318) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C657 +
                   (((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                      C21540 * C316 + C21545 * C301 - C21541 * C318) *
                         C114 +
                     (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                      C21540 * C330 + C21545 * C319 - C21541 * C331) *
                         C47428) *
                        C47157 * C47474 +
                    ((C21539 * C503 - C21543 * C487 + C21540 * C942 -
                      C21544 * C934 + C21541 * C1585 - C21545 * C1584) *
                         C114 +
                     (C21539 * C517 - C21543 * C504 + C21540 * C949 -
                      C21544 * C943 + C21541 * C1587 - C21545 * C1586) *
                         C47428) *
                        C47157 * C47313) *
                       C47208 * C47509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                       C21544 * C294 + C21541 * C310 - C21545 * C297) *
                          C114 +
                      (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                       C21544 * C305 + C21541 * C327 - C21545 * C311) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C481 - C21539 * C491 + C21544 * C931 -
                       C21540 * C936 + C21545 * C1289 - C21541 * C1301) *
                          C114 +
                      (C21543 * C492 - C21539 * C511 + C21544 * C937 -
                       C21540 * C946 + C21545 * C1302 - C21541 * C1316) *
                          C47428) *
                         C47157 * C47313) *
                        C1078 +
                    (((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                       C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                          C114 +
                      (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                       C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C936 - C21543 * C931 + C21540 * C1301 -
                       C21544 * C1289 + C21541 * C1697 - C21545 * C1694) *
                          C114 +
                      (C21539 * C946 - C21543 * C937 + C21540 * C1316 -
                       C21544 * C1302 + C21541 * C1703 - C21545 * C1698) *
                          C47428) *
                         C47157 * C47313) *
                        C1079 +
                    (((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                       C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                          C114 +
                      (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                       C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C1289 - C21539 * C1301 + C21544 * C1694 -
                       C21540 * C1697 + C21545 * C6483 - C21541 * C6485) *
                          C114 +
                      (C21543 * C1302 - C21539 * C1316 + C21544 * C1698 -
                       C21540 * C1703 + C21545 * C6486 - C21541 * C6489) *
                          C47428) *
                         C47157 * C47313) *
                        C47505) *
                       C47459 +
                   ((((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                       C21540 * C306 + C21545 * C298 - C21541 * C312) *
                          C114 +
                      (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                       C21540 * C325 + C21545 * C313 - C21541 * C328) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C493 - C21543 * C482 + C21540 * C938 -
                       C21544 * C932 + C21541 * C1303 - C21545 * C1290) *
                          C114 +
                      (C21539 * C512 - C21543 * C494 + C21540 * C947 -
                       C21544 * C939 + C21541 * C1317 - C21545 * C1304) *
                          C47428) *
                         C47157 * C47313) *
                        C1078 +
                    (((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                       C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                          C114 +
                      (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                       C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21543 * C932 - C21539 * C938 + C21544 * C1290 -
                       C21540 * C1303 + C21545 * C1695 - C21541 * C1699) *
                          C114 +
                      (C21543 * C939 - C21539 * C947 + C21544 * C1304 -
                       C21540 * C1317 + C21545 * C1700 - C21541 * C1704) *
                          C47428) *
                         C47157 * C47313) *
                        C1079 +
                    (((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                       C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                          C114 +
                      (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                       C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                          C47428) *
                         C47157 * C47474 +
                     ((C21539 * C1303 - C21543 * C1290 + C21540 * C1699 -
                       C21544 * C1695 + C21541 * C6487 - C21545 * C6484) *
                          C114 +
                      (C21539 * C1317 - C21543 * C1304 + C21540 * C1704 -
                       C21544 * C1700 + C21541 * C6490 - C21545 * C6488) *
                          C47428) *
                         C47157 * C47313) *
                        C47505) *
                       C47191)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                     C21544 * C294 + C21541 * C310 - C21545 * C297) *
                        C114 +
                    (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                     C21544 * C305 + C21541 * C327 - C21545 * C311) *
                        C47428) *
                       C47157 * C47226 * C47208 * C108 +
                   ((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                     C21540 * C306 + C21545 * C298 - C21541 * C312) *
                        C114 +
                    (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                     C21540 * C325 + C21545 * C313 - C21541 * C328) *
                        C47428) *
                       C47157 * C47226 * C47208 * C109 +
                   ((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                     C21544 * C296 + C21541 * C314 - C21545 * C299) *
                        C114 +
                    (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                     C21544 * C309 + C21541 * C329 - C21545 * C315) *
                        C47428) *
                       C47157 * C47226 * C47208 * C110 +
                   ((C21543 * C118 - C21539 * C128 + C21544 * C300 -
                     C21540 * C316 + C21545 * C301 - C21541 * C318) *
                        C114 +
                    (C21543 * C129 - C21539 * C139 + C21544 * C317 -
                     C21540 * C330 + C21545 * C319 - C21541 * C331) *
                        C47428) *
                       C47157 * C47226 * C47208 * C111 +
                   ((C21539 * C130 - C21543 * C119 + C21540 * C320 -
                     C21544 * C302 + C21541 * C322 - C21545 * C303) *
                        C114 +
                    (C21539 * C140 - C21543 * C131 + C21540 * C332 -
                     C21544 * C321 + C21541 * C333 - C21545 * C323) *
                        C47428) *
                       C47157 * C47226 * C47208 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C47544 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C47532 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C291 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C47544 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C47532 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C292 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C47544 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C47532 +
                    ((C21539 * C314 - C21543 * C299 + C21540 * C1162 -
                      C21544 * C1154 + C21541 * C1168 - C21545 * C1157) *
                         C114 +
                     (C21539 * C329 - C21543 * C315 + C21540 * C1172 -
                      C21544 * C1163 + C21541 * C1175 - C21545 * C1169) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                      C21544 * C294 + C21541 * C310 - C21545 * C297) *
                         C114 +
                     (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                      C21544 * C305 + C21541 * C327 - C21545 * C311) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                      C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                         C114 +
                     (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                      C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                      C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                         C114 +
                     (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                      C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47541 +
                   (((C21543 * C116 - C21539 * C124 + C21544 * C295 -
                      C21540 * C306 + C21545 * C298 - C21541 * C312) *
                         C114 +
                     (C21543 * C125 - C21539 * C137 + C21544 * C307 -
                      C21540 * C325 + C21545 * C313 - C21541 * C328) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21539 * C306 - C21543 * C295 + C21540 * C312 -
                      C21544 * C298 + C21541 * C1160 - C21545 * C1153) *
                         C114 +
                     (C21539 * C325 - C21543 * C307 + C21540 * C328 -
                      C21544 * C313 + C21541 * C1171 - C21545 * C1161) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21543 * C298 - C21539 * C312 + C21544 * C1153 -
                      C21540 * C1160 + C21545 * C1156 - C21541 * C1166) *
                         C114 +
                     (C21543 * C313 - C21539 * C328 + C21544 * C1161 -
                      C21540 * C1171 + C21545 * C1167 - C21541 * C1174) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47528 +
                   (((C21539 * C126 - C21543 * C117 + C21540 * C308 -
                      C21544 * C296 + C21541 * C314 - C21545 * C299) *
                         C114 +
                     (C21539 * C138 - C21543 * C127 + C21540 * C326 -
                      C21544 * C309 + C21541 * C329 - C21545 * C315) *
                         C47428) *
                        C47157 * C47226 * C1078 +
                    ((C21543 * C296 - C21539 * C308 + C21544 * C299 -
                      C21540 * C314 + C21545 * C1154 - C21541 * C1162) *
                         C114 +
                     (C21543 * C309 - C21539 * C326 + C21544 * C315 -
                      C21540 * C329 + C21545 * C1163 - C21541 * C1172) *
                         C47428) *
                        C47157 * C47226 * C1079 +
                    ((C21539 * C314 - C21543 * C299 + C21540 * C1162 -
                      C21544 * C1154 + C21541 * C1168 - C21545 * C1157) *
                         C114 +
                     (C21539 * C329 - C21543 * C315 + C21540 * C1172 -
                      C21544 * C1163 + C21541 * C1175 - C21545 * C1169) *
                         C47428) *
                        C47157 * C47226 * C47505) *
                       C47499)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C21539 * C122 - C21543 * C115 + C21540 * C304 -
                     C21544 * C294 + C21541 * C310 - C21545 * C297) *
                        C114 +
                    (C21539 * C136 - C21543 * C123 + C21540 * C324 -
                     C21544 * C305 + C21541 * C327 - C21545 * C311) *
                        C47428) *
                       C47157 * C47226 * C1146 +
                   ((C21543 * C294 - C21539 * C304 + C21544 * C297 -
                     C21540 * C310 + C21545 * C1152 - C21541 * C1158) *
                        C114 +
                    (C21543 * C305 - C21539 * C324 + C21544 * C311 -
                     C21540 * C327 + C21545 * C1159 - C21541 * C1170) *
                        C47428) *
                       C47157 * C47226 * C1147 +
                   ((C21539 * C310 - C21543 * C297 + C21540 * C1158 -
                     C21544 * C1152 + C21541 * C1164 - C21545 * C1155) *
                        C114 +
                    (C21539 * C327 - C21543 * C311 + C21540 * C1170 -
                     C21544 * C1159 + C21541 * C1173 - C21545 * C1165) *
                        C47428) *
                       C47157 * C47226 * C1148 +
                   ((C21543 * C1152 - C21539 * C1158 + C21544 * C1155 -
                     C21540 * C1164 + C21545 * C5851 - C21541 * C5853) *
                        C114 +
                    (C21543 * C1159 - C21539 * C1170 + C21544 * C1165 -
                     C21540 * C1173 + C21545 * C5854 - C21541 * C5857) *
                        C47428) *
                       C47157 * C47226 * C1149 +
                   ((C21539 * C1164 - C21543 * C1155 + C21540 * C5853 -
                     C21544 * C5851 + C21541 * C22281 - C21545 * C22280) *
                        C114 +
                    (C21539 * C1173 - C21543 * C1165 + C21540 * C5857 -
                     C21544 * C5854 + C21541 * C22283 - C21545 * C22282) *
                        C47428) *
                       C47157 * C47226 * C1150) *
                  C47180) /
                     (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C47267 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C47274 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C47226 * C2868) *
              C47185 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C47267 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C47274 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C2868) *
              C47194 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C47267 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C47274 +
           ((C16155 - C16154 + C16157 - C16156) * C10399 +
            (C16159 - C16158 + C16161 - C16160) * C10397 +
            (C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
             C15950 * C1696) *
                C10400 +
            (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
             C15950 * C1702) *
                C47525) *
               C47157 * C47226 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C47474 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C47267 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C47474 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47313) *
               C47274 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C10399 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C10397 +
             (C26843 - C26844 + C26845 - C26846) * C10400 +
             (C26847 - C26848 + C26849 - C26850) * C47525) *
                C47157 * C47474 +
            ((C26844 - C26843 + C26846 - C26845) * C10399 +
             (C26848 - C26847 + C26850 - C26849) * C10397 +
             (C26851 - C26852 + C26853 - C26854) * C10400 +
             (C26855 - C26856 + C26857 - C26858) * C47525) *
                C47157 * C47313) *
               C2868) *
              C2608 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C47474 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C47267 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C47474 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C47274 +
           (((C16139 - C16138 + C16141 - C16140) * C10399 +
             (C16143 - C16142 + C16145 - C16144) * C10397 +
             (C17532 - C17533 + C17534 - C17535) * C10400 +
             (C17536 - C17537 + C17538 - C17539) * C47525) *
                C47157 * C47474 +
            ((C17533 - C17532 + C17535 - C17534) * C10399 +
             (C17537 - C17536 + C17539 - C17538) * C10397 +
             (C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C10400 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C47551 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C47547 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C47226 * C47537 +
           ((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C10399 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C10397 +
            (C27313 - C27314 + C27315 - C27316) * C10400 +
            (C27317 - C27318 + C27319 - C27320) * C47525) *
               C47157 * C47226 * C47515) *
              C2608 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C47551 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C47547 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C47537 +
           ((C17331 - C17330 + C17333 - C17332) * C10399 +
            (C17335 - C17334 + C17337 - C17336) * C10397 +
            (C15945 * C1699 - C15949 * C1695 + C47523 * C6487 -
             C15950 * C6484) *
                C10400 +
            (C15945 * C1704 - C15949 * C1700 + C47523 * C6490 -
             C15950 * C6488) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C2500 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C47271) *
              C47550 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C2500 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C47271) *
              C47543 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C2500 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C47271) *
              C47530 +
          (((C15969 - C15968 + C15971 - C15970) * C10399 +
            (C15973 - C15972 + C15975 - C15974) * C10397 +
            (C16608 - C16609 + C16610 - C16611) * C10400 +
            (C16612 - C16613 + C16614 - C16615) * C47525) *
               C47157 * C47226 * C2500 +
           ((C16471 - C16470 + C16473 - C16472) * C10399 +
            (C16475 - C16474 + C16477 - C16476) * C10397 +
            (C15945 * C942 - C15949 * C934 + C47523 * C1585 - C15950 * C1584) *
                C10400 +
            (C15945 * C949 - C15949 * C943 + C47523 * C1587 - C15950 * C1586) *
                C47525) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C47545 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47534 +
            ((C25992 - C25991 + C25994 - C25993) * C10399 +
             (C25996 - C25995 + C25998 - C25997) * C10397 +
             (C27699 - C27700 + C27701 - C27702) * C10400 +
             (C27703 - C27704 + C27705 - C27706) * C47525) *
                C47157 * C47508) *
               C2500 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C47545 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47534 +
            ((C26836 - C26835 + C26838 - C26837) * C10399 +
             (C26840 - C26839 + C26842 - C26841) * C10397 +
             (C28169 - C28170 + C28171 - C28172) * C10400 +
             (C28173 - C28174 + C28175 - C28176) * C47525) *
                C47157 * C47508) *
               C47271) *
              C2608 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C47545 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47534 +
            ((C16317 - C16316 + C16319 - C16318) * C10399 +
             (C16321 - C16320 + C16323 - C16322) * C10397 +
             (C18376 - C18377 + C18378 - C18379) * C10400 +
             (C18380 - C18381 + C18382 - C18383) * C47525) *
                C47157 * C47508) *
               C2500 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C47545 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47534 +
            ((C18239 - C18238 + C18241 - C18240) * C10399 +
             (C18243 - C18242 + C18245 - C18244) * C10397 +
             (C15945 * C2395 - C15949 * C2391 + C47523 * C7347 -
              C15950 * C7344) *
                 C10400 +
             (C15945 * C2400 - C15949 * C2396 + C47523 * C7350 -
              C15950 * C7348) *
                 C47525) *
                C47157 * C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C47474 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C47474 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47185 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C47474 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C47474 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47194 +
          ((((C15961 - C15960 + C15963 - C15962) * C10399 +
             (C15965 - C15964 + C15967 - C15966) * C10397 +
             (C16324 - C16325 + C16326 - C16327) * C10400 +
             (C16328 - C16329 + C16330 - C16331) * C47525) *
                C47157 * C47474 +
            ((C16325 - C16324 + C16327 - C16326) * C10399 +
             (C16329 - C16328 + C16331 - C16330) * C10397 +
             (C16332 - C16333 + C16334 - C16335) * C10400 +
             (C16336 - C16337 + C16338 - C16339) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C16147 - C16146 + C16149 - C16148) * C10399 +
             (C16151 - C16150 + C16153 - C16152) * C10397 +
             (C16818 - C16819 + C16820 - C16821) * C10400 +
             (C16822 - C16823 + C16824 - C16825) * C47525) *
                C47157 * C47474 +
            ((C16819 - C16818 + C16821 - C16820) * C10399 +
             (C16823 - C16822 + C16825 - C16824) * C10397 +
             (C15945 * C1299 - C15949 * C1288 + C47523 * C1311 -
              C15950 * C1294) *
                 C10400 +
             (C15945 * C1315 - C15949 * C1300 + C47523 * C1321 -
              C15950 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C2500 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C47271) *
              C47550 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C2500 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C47271) *
              C47543 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C2500 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C47271) *
              C47530 +
          (((C15969 - C15968 + C15971 - C15970) * C10399 +
            (C15973 - C15972 + C15975 - C15974) * C10397 +
            (C16608 - C16609 + C16610 - C16611) * C10400 +
            (C16612 - C16613 + C16614 - C16615) * C47525) *
               C47157 * C47226 * C2500 +
           ((C16471 - C16470 + C16473 - C16472) * C10399 +
            (C16475 - C16474 + C16477 - C16476) * C10397 +
            (C15945 * C942 - C15949 * C934 + C47523 * C1585 - C15950 * C1584) *
                C10400 +
            (C15945 * C949 - C15949 * C943 + C47523 * C1587 - C15950 * C1586) *
                C47525) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C47551 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C47547 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C47226 * C47537 +
           ((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C10399 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C10397 +
            (C27313 - C27314 + C27315 - C27316) * C10400 +
            (C27317 - C27318 + C27319 - C27320) * C47525) *
               C47157 * C47226 * C47515) *
              C2608 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C47551 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C47547 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C47537 +
           ((C17331 - C17330 + C17333 - C17332) * C10399 +
            (C17335 - C17334 + C17337 - C17336) * C10397 +
            (C15945 * C1699 - C15949 * C1695 + C47523 * C6487 -
             C15950 * C6484) *
                C10400 +
            (C15945 * C1704 - C15949 * C1700 + C47523 * C6490 -
             C15950 * C6488) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C3262 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C47267 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C3262 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47313) *
               C47274 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C10399 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C10397 +
             (C26843 - C26844 + C26845 - C26846) * C10400 +
             (C26847 - C26848 + C26849 - C26850) * C47525) *
                C47157 * C3262 +
            ((C26844 - C26843 + C26846 - C26845) * C10399 +
             (C26848 - C26847 + C26850 - C26849) * C10397 +
             (C26851 - C26852 + C26853 - C26854) * C10400 +
             (C26855 - C26856 + C26857 - C26858) * C47525) *
                C47157 * C47313) *
               C2868) *
              C47459 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C3262 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C47267 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C3262 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C47274 +
           (((C16139 - C16138 + C16141 - C16140) * C10399 +
             (C16143 - C16142 + C16145 - C16144) * C10397 +
             (C17532 - C17533 + C17534 - C17535) * C10400 +
             (C17536 - C17537 + C17538 - C17539) * C47525) *
                C47157 * C3262 +
            ((C17533 - C17532 + C17535 - C17534) * C10399 +
             (C17537 - C17536 + C17539 - C17538) * C10397 +
             (C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C10400 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47309 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47316 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C27699 - C27700 + C27701 - C27702) * C10400 +
            (C27703 - C27704 + C27705 - C27706) * C47525) *
               C47157 * C3770) *
              C47267 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47309 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C47316 +
           ((C26836 - C26835 + C26838 - C26837) * C10399 +
            (C26840 - C26839 + C26842 - C26841) * C10397 +
            (C28169 - C28170 + C28171 - C28172) * C10400 +
            (C28173 - C28174 + C28175 - C28176) * C47525) *
               C47157 * C3770) *
              C47274 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C47309 +
           ((C26844 - C26843 + C26846 - C26845) * C10399 +
            (C26848 - C26847 + C26850 - C26849) * C10397 +
            (C26851 - C26852 + C26853 - C26854) * C10400 +
            (C26855 - C26856 + C26857 - C26858) * C47525) *
               C47157 * C47316 +
           ((C26852 - C26851 + C26854 - C26853) * C10399 +
            (C26856 - C26855 + C26858 - C26857) * C10397 +
            (C15945 * C7345 - C15949 * C7343 + C47523 * C23373 -
             C15950 * C23372) *
                C10400 +
            (C15945 * C7349 - C15949 * C7346 + C47523 * C23375 -
             C15950 * C23374) *
                C47525) *
               C47157 * C3770) *
              C2868) *
         C47180) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C3262 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47313) *
              C47551 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C3262 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C47313) *
              C47547 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C3262 +
           ((C26844 - C26843 + C26846 - C26845) * C10399 +
            (C26848 - C26847 + C26850 - C26849) * C10397 +
            (C26851 - C26852 + C26853 - C26854) * C10400 +
            (C26855 - C26856 + C26857 - C26858) * C47525) *
               C47157 * C47313) *
              C47537 +
          (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C10399 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C10397 +
            (C27313 - C27314 + C27315 - C27316) * C10400 +
            (C27317 - C27318 + C27319 - C27320) * C47525) *
               C47157 * C3262 +
           ((C27314 - C27313 + C27316 - C27315) * C10399 +
            (C27318 - C27317 + C27320 - C27319) * C10397 +
            (C15945 * C6007 - C15949 * C6005 + C47523 * C22395 -
             C15950 * C22394) *
                C10400 +
            (C15945 * C6011 - C15949 * C6008 + C47523 * C22397 -
             C15950 * C22396) *
                C47525) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C3262 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C3262 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47541 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C3262 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C3262 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47528 +
          ((((C15961 - C15960 + C15963 - C15962) * C10399 +
             (C15965 - C15964 + C15967 - C15966) * C10397 +
             (C16324 - C16325 + C16326 - C16327) * C10400 +
             (C16328 - C16329 + C16330 - C16331) * C47525) *
                C47157 * C3262 +
            ((C16325 - C16324 + C16327 - C16326) * C10399 +
             (C16329 - C16328 + C16331 - C16330) * C10397 +
             (C16332 - C16333 + C16334 - C16335) * C10400 +
             (C16336 - C16337 + C16338 - C16339) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C16147 - C16146 + C16149 - C16148) * C10399 +
             (C16151 - C16150 + C16153 - C16152) * C10397 +
             (C16818 - C16819 + C16820 - C16821) * C10400 +
             (C16822 - C16823 + C16824 - C16825) * C47525) *
                C47157 * C3262 +
            ((C16819 - C16818 + C16821 - C16820) * C10399 +
             (C16823 - C16822 + C16825 - C16824) * C10397 +
             (C15945 * C1299 - C15949 * C1288 + C47523 * C1311 -
              C15950 * C1294) *
                 C10400 +
             (C15945 * C1315 - C15949 * C1300 + C47523 * C1321 -
              C15950 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47552 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47549 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C27699 - C27700 + C27701 - C27702) * C10400 +
            (C27703 - C27704 + C27705 - C27706) * C47525) *
               C47157 * C47540 +
           ((C27700 - C27699 + C27702 - C27701) * C10399 +
            (C27704 - C27703 + C27706 - C27705) * C10397 +
            (C27707 - C27708 + C27709 - C27710) * C10400 +
            (C27711 - C27712 + C27713 - C27714) * C47525) *
               C47157 * C47521) *
              C2500 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47552 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C47549 +
           ((C26836 - C26835 + C26838 - C26837) * C10399 +
            (C26840 - C26839 + C26842 - C26841) * C10397 +
            (C28169 - C28170 + C28171 - C28172) * C10400 +
            (C28173 - C28174 + C28175 - C28176) * C47525) *
               C47157 * C47540 +
           ((C28170 - C28169 + C28172 - C28171) * C10399 +
            (C28174 - C28173 + C28176 - C28175) * C10397 +
            (C15945 * C6867 - C15949 * C6865 + C47523 * C23027 -
             C15950 * C23026) *
                C10400 +
            (C15945 * C6871 - C15949 * C6868 + C47523 * C23029 -
             C15950 * C23028) *
                C47525) *
               C47157 * C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C47309 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47316 +
            ((C25992 - C25991 + C25994 - C25993) * C10399 +
             (C25996 - C25995 + C25998 - C25997) * C10397 +
             (C27699 - C27700 + C27701 - C27702) * C10400 +
             (C27703 - C27704 + C27705 - C27706) * C47525) *
                C47157 * C3770) *
               C2500 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C47309 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47316 +
            ((C26836 - C26835 + C26838 - C26837) * C10399 +
             (C26840 - C26839 + C26842 - C26841) * C10397 +
             (C28169 - C28170 + C28171 - C28172) * C10400 +
             (C28173 - C28174 + C28175 - C28176) * C47525) *
                C47157 * C3770) *
               C47271) *
              C47459 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C47309 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47316 +
            ((C16317 - C16316 + C16319 - C16318) * C10399 +
             (C16321 - C16320 + C16323 - C16322) * C10397 +
             (C18376 - C18377 + C18378 - C18379) * C10400 +
             (C18380 - C18381 + C18382 - C18383) * C47525) *
                C47157 * C3770) *
               C2500 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C47309 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47316 +
            ((C18239 - C18238 + C18241 - C18240) * C10399 +
             (C18243 - C18242 + C18245 - C18244) * C10397 +
             (C15945 * C2395 - C15949 * C2391 + C47523 * C7347 -
              C15950 * C7344) *
                 C10400 +
             (C15945 * C2400 - C15949 * C2396 + C47523 * C7350 -
              C15950 * C7348) *
                 C47525) *
                C47157 * C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C3262 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C3262 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47541 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C3262 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C3262 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47528 +
          ((((C15961 - C15960 + C15963 - C15962) * C10399 +
             (C15965 - C15964 + C15967 - C15966) * C10397 +
             (C16324 - C16325 + C16326 - C16327) * C10400 +
             (C16328 - C16329 + C16330 - C16331) * C47525) *
                C47157 * C3262 +
            ((C16325 - C16324 + C16327 - C16326) * C10399 +
             (C16329 - C16328 + C16331 - C16330) * C10397 +
             (C16332 - C16333 + C16334 - C16335) * C10400 +
             (C16336 - C16337 + C16338 - C16339) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C16147 - C16146 + C16149 - C16148) * C10399 +
             (C16151 - C16150 + C16153 - C16152) * C10397 +
             (C16818 - C16819 + C16820 - C16821) * C10400 +
             (C16822 - C16823 + C16824 - C16825) * C47525) *
                C47157 * C3262 +
            ((C16819 - C16818 + C16821 - C16820) * C10399 +
             (C16823 - C16822 + C16825 - C16824) * C10397 +
             (C15945 * C1299 - C15949 * C1288 + C47523 * C1311 -
              C15950 * C1294) *
                 C10400 +
             (C15945 * C1315 - C15949 * C1300 + C47523 * C1321 -
              C15950 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C3262 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47313) *
              C47551 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C3262 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C47313) *
              C47547 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C3262 +
           ((C26844 - C26843 + C26846 - C26845) * C10399 +
            (C26848 - C26847 + C26850 - C26849) * C10397 +
            (C26851 - C26852 + C26853 - C26854) * C10400 +
            (C26855 - C26856 + C26857 - C26858) * C47525) *
               C47157 * C47313) *
              C47537 +
          (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C10399 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C10397 +
            (C27313 - C27314 + C27315 - C27316) * C10400 +
            (C27317 - C27318 + C27319 - C27320) * C47525) *
               C47157 * C3262 +
           ((C27314 - C27313 + C27316 - C27315) * C10399 +
            (C27318 - C27317 + C27320 - C27319) * C10397 +
            (C15945 * C6007 - C15949 * C6005 + C47523 * C22395 -
             C15950 * C22394) *
                C10400 +
            (C15945 * C6011 - C15949 * C6008 + C47523 * C22397 -
             C15950 * C22396) *
                C47525) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C1420 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C1421 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C47226 * C1422 +
           ((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C10399 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C10397 +
            (C15949 * C1694 - C15945 * C1697 + C15950 * C6483 -
             C47523 * C6485) *
                C10400 +
            (C15949 * C1698 - C15945 * C1703 + C15950 * C6486 -
             C47523 * C6489) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47459 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C1420 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C1421 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C1422 +
           ((C17331 - C17330 + C17333 - C17332) * C10399 +
            (C17335 - C17334 + C17337 - C17336) * C10397 +
            (C15945 * C1699 - C15949 * C1695 + C47523 * C6487 -
             C15950 * C6484) *
                C10400 +
            (C15945 * C1704 - C15949 * C1700 + C47523 * C6490 -
             C15950 * C6488) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C47473 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C15949 * C931 - C15945 * C936 + C15950 * C1289 - C47523 * C1301) *
                C10400 +
            (C15949 * C937 - C15945 * C946 + C15950 * C1302 - C47523 * C1316) *
                C47525) *
               C47157 * C47226 * C47271) *
              C655 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C47473 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C47271) *
              C656 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C47473 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C47271) *
              C657 +
          (((C15969 - C15968 + C15971 - C15970) * C10399 +
            (C15973 - C15972 + C15975 - C15974) * C10397 +
            (C16608 - C16609 + C16610 - C16611) * C10400 +
            (C16612 - C16613 + C16614 - C16615) * C47525) *
               C47157 * C47226 * C47473 +
           ((C16471 - C16470 + C16473 - C16472) * C10399 +
            (C16475 - C16474 + C16477 - C16476) * C10397 +
            (C15945 * C942 - C15949 * C934 + C47523 * C1585 - C15950 * C1584) *
                C10400 +
            (C15945 * C949 - C15949 * C943 + C47523 * C1587 - C15950 * C1586) *
                C47525) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C1816 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C1817 +
            ((C25992 - C25991 + C25994 - C25993) * C10399 +
             (C25996 - C25995 + C25998 - C25997) * C10397 +
             (C27699 - C27700 + C27701 - C27702) * C10400 +
             (C27703 - C27704 + C27705 - C27706) * C47525) *
                C47157 * C47508) *
               C47473 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C1816 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C1817 +
            ((C26836 - C26835 + C26838 - C26837) * C10399 +
             (C26840 - C26839 + C26842 - C26841) * C10397 +
             (C15949 * C2390 - C15945 * C2393 + C15950 * C7343 -
              C47523 * C7345) *
                 C10400 +
             (C15949 * C2394 - C15945 * C2399 + C15950 * C7346 -
              C47523 * C7349) *
                 C47525) *
                C47157 * C47508) *
               C47271) *
              C47459 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C1816 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C1817 +
            ((C16317 - C16316 + C16319 - C16318) * C10399 +
             (C16321 - C16320 + C16323 - C16322) * C10397 +
             (C18376 - C18377 + C18378 - C18379) * C10400 +
             (C18380 - C18381 + C18382 - C18383) * C47525) *
                C47157 * C47508) *
               C47473 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C1816 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C1817 +
            ((C18239 - C18238 + C18241 - C18240) * C10399 +
             (C18243 - C18242 + C18245 - C18244) * C10397 +
             (C15945 * C2395 - C15949 * C2391 + C47523 * C7347 -
              C15950 * C7344) *
                 C10400 +
             (C15945 * C2400 - C15949 * C2396 + C47523 * C7350 -
              C15950 * C7348) *
                 C47525) *
                C47157 * C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47474 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47313) *
              C1420 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47474 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C47313) *
              C1421 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C47474 +
           ((C26844 - C26843 + C26846 - C26845) * C10399 +
            (C26848 - C26847 + C26850 - C26849) * C10397 +
            (C26851 - C26852 + C26853 - C26854) * C10400 +
            (C26855 - C26856 + C26857 - C26858) * C47525) *
               C47157 * C47313) *
              C1422 +
          (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C10399 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C10397 +
            (C27313 - C27314 + C27315 - C27316) * C10400 +
            (C27317 - C27318 + C27319 - C27320) * C47525) *
               C47157 * C47474 +
           ((C27314 - C27313 + C27316 - C27315) * C10399 +
            (C27318 - C27317 + C27320 - C27319) * C10397 +
            (C15945 * C6007 - C15949 * C6005 + C47523 * C22395 -
             C15950 * C22394) *
                C10400 +
            (C15945 * C6011 - C15949 * C6008 + C47523 * C22397 -
             C15950 * C22396) *
                C47525) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C47474 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C47474 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C15945 * C1295 - C15949 * C1286 + C47523 * C1307 -
              C15950 * C1292) *
                 C10400 +
             (C15945 * C1313 - C15949 * C1296 + C47523 * C1319 -
              C15950 * C1308) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C291 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C47474 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C47474 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C47271) *
              C292 +
          ((((C15961 - C15960 + C15963 - C15962) * C10399 +
             (C15965 - C15964 + C15967 - C15966) * C10397 +
             (C16324 - C16325 + C16326 - C16327) * C10400 +
             (C16328 - C16329 + C16330 - C16331) * C47525) *
                C47157 * C47474 +
            ((C16325 - C16324 + C16327 - C16326) * C10399 +
             (C16329 - C16328 + C16331 - C16330) * C10397 +
             (C16332 - C16333 + C16334 - C16335) * C10400 +
             (C16336 - C16337 + C16338 - C16339) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C16147 - C16146 + C16149 - C16148) * C10399 +
             (C16151 - C16150 + C16153 - C16152) * C10397 +
             (C16818 - C16819 + C16820 - C16821) * C10400 +
             (C16822 - C16823 + C16824 - C16825) * C47525) *
                C47157 * C47474 +
            ((C16819 - C16818 + C16821 - C16820) * C10399 +
             (C16823 - C16822 + C16825 - C16824) * C10397 +
             (C15945 * C1299 - C15949 * C1288 + C47523 * C1311 -
              C15950 * C1294) *
                 C10400 +
             (C15945 * C1315 - C15949 * C1300 + C47523 * C1321 -
              C15950 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C2276 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C2277 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C27699 - C27700 + C27701 - C27702) * C10400 +
            (C27703 - C27704 + C27705 - C27706) * C47525) *
               C47157 * C2278 +
           ((C27700 - C27699 + C27702 - C27701) * C10399 +
            (C27704 - C27703 + C27706 - C27705) * C10397 +
            (C27707 - C27708 + C27709 - C27710) * C10400 +
            (C27711 - C27712 + C27713 - C27714) * C47525) *
               C47157 * C47521) *
              C47473 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C2276 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C2277 +
           ((C26836 - C26835 + C26838 - C26837) * C10399 +
            (C26840 - C26839 + C26842 - C26841) * C10397 +
            (C28169 - C28170 + C28171 - C28172) * C10400 +
            (C28173 - C28174 + C28175 - C28176) * C47525) *
               C47157 * C2278 +
           ((C28170 - C28169 + C28172 - C28171) * C10399 +
            (C28174 - C28173 + C28176 - C28175) * C10397 +
            (C15945 * C6867 - C15949 * C6865 + C47523 * C23027 -
             C15950 * C23026) *
                C10400 +
            (C15945 * C6871 - C15949 * C6868 + C47523 * C23029 -
             C15950 * C23028) *
                C47525) *
               C47157 * C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                   C10399 +
               (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                   C10397 +
               (C15945 * C491 - C15949 * C481 + C47523 * C936 - C15950 * C931) *
                   C10400 +
               (C15945 * C511 - C15949 * C492 + C47523 * C946 - C15950 * C937) *
                   C47525) *
                  C47157 * C47226 * C47208 * C108 +
              ((C15953 - C15952 + C15955 - C15954) * C10399 +
               (C15957 - C15956 + C15959 - C15958) * C10397 +
               (C16308 - C16309 + C16310 - C16311) * C10400 +
               (C16312 - C16313 + C16314 - C16315) * C47525) *
                  C47157 * C47226 * C47208 * C109 +
              ((C15961 - C15960 + C15963 - C15962) * C10399 +
               (C15965 - C15964 + C15967 - C15966) * C10397 +
               (C16324 - C16325 + C16326 - C16327) * C10400 +
               (C16328 - C16329 + C16330 - C16331) * C47525) *
                  C47157 * C47226 * C47208 * C110 +
              ((C15969 - C15968 + C15971 - C15970) * C10399 +
               (C15973 - C15972 + C15975 - C15974) * C10397 +
               (C16608 - C16609 + C16610 - C16611) * C10400 +
               (C16612 - C16613 + C16614 - C16615) * C47525) *
                  C47157 * C47226 * C47208 * C111 +
              ((C15977 - C15976 + C15979 - C15978) * C10399 +
               (C15981 - C15980 + C15983 - C15982) * C10397 +
               (C15945 * C507 - C15949 * C489 + C47523 * C944 - C15950 * C935) *
                   C10400 +
               (C15945 * C519 - C15949 * C508 + C47523 * C950 - C15950 * C945) *
                   C47525) *
                  C47157 * C47226 * C47208 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15945 * C122 - C15949 * C115 + C47523 * C304 -
                 C15950 * C294) *
                    C10399 +
                (C15945 * C136 - C15949 * C123 + C47523 * C324 -
                 C15950 * C305) *
                    C10397 +
                (C15945 * C491 - C15949 * C481 + C47523 * C936 -
                 C15950 * C931) *
                    C10400 +
                (C15945 * C511 - C15949 * C492 + C47523 * C946 -
                 C15950 * C937) *
                    C47525) *
                   C47157 * C47226 * C47544 +
               ((C15949 * C294 - C15945 * C304 + C15950 * C297 -
                 C47523 * C310) *
                    C10399 +
                (C15949 * C305 - C15945 * C324 + C15950 * C311 -
                 C47523 * C327) *
                    C10397 +
                (C15949 * C931 - C15945 * C936 + C15950 * C1289 -
                 C47523 * C1301) *
                    C10400 +
                (C15949 * C937 - C15945 * C946 + C15950 * C1302 -
                 C47523 * C1316) *
                    C47525) *
                   C47157 * C47226 * C47532 +
               ((C15945 * C310 - C15949 * C297 + C47523 * C1158 -
                 C15950 * C1152) *
                    C10399 +
                (C15945 * C327 - C15949 * C311 + C47523 * C1170 -
                 C15950 * C1159) *
                    C10397 +
                (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 -
                 C15950 * C1694) *
                    C10400 +
                (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 -
                 C15950 * C1698) *
                    C47525) *
                   C47157 * C47226 * C47505) *
                  C291 +
              (((C15953 - C15952 + C15955 - C15954) * C10399 +
                (C15957 - C15956 + C15959 - C15958) * C10397 +
                (C16308 - C16309 + C16310 - C16311) * C10400 +
                (C16312 - C16313 + C16314 - C16315) * C47525) *
                   C47157 * C47226 * C47544 +
               ((C16131 - C16130 + C16133 - C16132) * C10399 +
                (C16135 - C16134 + C16137 - C16136) * C10397 +
                (C16810 - C16811 + C16812 - C16813) * C10400 +
                (C16814 - C16815 + C16816 - C16817) * C47525) *
                   C47157 * C47226 * C47532 +
               ((C16139 - C16138 + C16141 - C16140) * C10399 +
                (C16143 - C16142 + C16145 - C16144) * C10397 +
                (C17532 - C17533 + C17534 - C17535) * C10400 +
                (C17536 - C17537 + C17538 - C17539) * C47525) *
                   C47157 * C47226 * C47505) *
                  C292 +
              (((C15961 - C15960 + C15963 - C15962) * C10399 +
                (C15965 - C15964 + C15967 - C15966) * C10397 +
                (C16324 - C16325 + C16326 - C16327) * C10400 +
                (C16328 - C16329 + C16330 - C16331) * C47525) *
                   C47157 * C47226 * C47544 +
               ((C16147 - C16146 + C16149 - C16148) * C10399 +
                (C16151 - C16150 + C16153 - C16152) * C10397 +
                (C16818 - C16819 + C16820 - C16821) * C10400 +
                (C16822 - C16823 + C16824 - C16825) * C47525) *
                   C47157 * C47226 * C47532 +
               ((C16155 - C16154 + C16157 - C16156) * C10399 +
                (C16159 - C16158 + C16161 - C16160) * C10397 +
                (C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
                 C15950 * C1696) *
                    C10400 +
                (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
                 C15950 * C1702) *
                    C47525) *
                   C47157 * C47226 * C47505) *
                  C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47545 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47534 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C15945 * C2002 - C15949 * C1996 + C47523 * C2393 -
             C15950 * C2390) *
                C10400 +
            (C15945 * C2014 - C15949 * C2003 + C47523 * C2399 -
             C15950 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47208 * C291 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47545 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C47534 +
           ((C16317 - C16316 + C16319 - C16318) * C10399 +
            (C16321 - C16320 + C16323 - C16322) * C10397 +
            (C18376 - C18377 + C18378 - C18379) * C10400 +
            (C18380 - C18381 + C18382 - C18383) * C47525) *
               C47157 * C47508) *
              C47208 * C292 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47545 +
           ((C16325 - C16324 + C16327 - C16326) * C10399 +
            (C16329 - C16328 + C16331 - C16330) * C10397 +
            (C16332 - C16333 + C16334 - C16335) * C10400 +
            (C16336 - C16337 + C16338 - C16339) * C47525) *
               C47157 * C47534 +
           ((C16333 - C16332 + C16335 - C16334) * C10399 +
            (C16337 - C16336 + C16339 - C16338) * C10397 +
            (C15945 * C2006 - C15949 * C1998 + C47523 * C2397 -
             C15950 * C2392) *
                C10400 +
            (C15945 * C2016 - C15949 * C2007 + C47523 * C2401 -
             C15950 * C2398) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C1078 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C1079 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 -
             C15950 * C1694) *
                C10400 +
            (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 -
             C15950 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C1078 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C1079 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C47505) *
              C47528 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C1078 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C1079 +
           ((C16155 - C16154 + C16157 - C16156) * C10399 +
            (C16159 - C16158 + C16161 - C16160) * C10397 +
            (C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
             C15950 * C1696) *
                C10400 +
            (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
             C15950 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
               C10399 +
           (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
               C10397 +
           (C25983 - C25984 + C25985 - C25986) * C10400 +
           (C25987 - C25988 + C25989 - C25990) * C47525) *
              C47157 * C47226 * C1146 +
          ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
               C10399 +
           (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
               C10397 +
           (C26453 - C26454 + C26455 - C26456) * C10400 +
           (C26457 - C26458 + C26459 - C26460) * C47525) *
              C47157 * C47226 * C1147 +
          ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
               C10399 +
           (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
               C10397 +
           (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 - C15950 * C1694) *
               C10400 +
           (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 - C15950 * C1698) *
               C47525) *
              C47157 * C47226 * C1148 +
          ((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 - C47523 * C1164) *
               C10399 +
           (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 - C47523 * C1173) *
               C10397 +
           (C15949 * C1694 - C15945 * C1697 + C15950 * C6483 - C47523 * C6485) *
               C10400 +
           (C15949 * C1698 - C15945 * C1703 + C15950 * C6486 - C47523 * C6489) *
               C47525) *
              C47157 * C47226 * C1149 +
          ((C15945 * C1164 - C15949 * C1155 + C47523 * C5853 - C15950 * C5851) *
               C10399 +
           (C15945 * C1173 - C15949 * C1165 + C47523 * C5857 - C15950 * C5854) *
               C10397 +
           (C15945 * C6485 - C15949 * C6483 + C47523 * C22741 -
            C15950 * C22740) *
               C10400 +
           (C15945 * C6489 - C15949 * C6486 + C47523 * C22743 -
            C15950 * C22742) *
               C47525) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47545 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47534 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C15945 * C2002 - C15949 * C1996 + C47523 * C2393 -
             C15950 * C2390) *
                C10400 +
            (C15945 * C2014 - C15949 * C2003 + C47523 * C2399 -
             C15950 * C2394) *
                C47525) *
               C47157 * C47508) *
              C1078 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47545 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C47534 +
           ((C26836 - C26835 + C26838 - C26837) * C10399 +
            (C26840 - C26839 + C26842 - C26841) * C10397 +
            (C15949 * C2390 - C15945 * C2393 + C15950 * C7343 -
             C47523 * C7345) *
                C10400 +
            (C15949 * C2394 - C15945 * C2399 + C15950 * C7346 -
             C47523 * C7349) *
                C47525) *
               C47157 * C47508) *
              C1079 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C47545 +
           ((C26844 - C26843 + C26846 - C26845) * C10399 +
            (C26848 - C26847 + C26850 - C26849) * C10397 +
            (C26851 - C26852 + C26853 - C26854) * C10400 +
            (C26855 - C26856 + C26857 - C26858) * C47525) *
               C47157 * C47534 +
           ((C26852 - C26851 + C26854 - C26853) * C10399 +
            (C26856 - C26855 + C26858 - C26857) * C10397 +
            (C15945 * C7345 - C15949 * C7343 + C47523 * C23373 -
             C15950 * C23372) *
                C10400 +
            (C15945 * C7349 - C15949 * C7346 + C47523 * C23375 -
             C15950 * C23374) *
                C47525) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C1816 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C1817 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C15945 * C2002 - C15949 * C1996 + C47523 * C2393 -
             C15950 * C2390) *
                C10400 +
            (C15945 * C2014 - C15949 * C2003 + C47523 * C2399 -
             C15950 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47541 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C1816 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C1817 +
           ((C16317 - C16316 + C16319 - C16318) * C10399 +
            (C16321 - C16320 + C16323 - C16322) * C10397 +
            (C18376 - C18377 + C18378 - C18379) * C10400 +
            (C18380 - C18381 + C18382 - C18383) * C47525) *
               C47157 * C47508) *
              C47208 * C47528 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C1816 +
           ((C16325 - C16324 + C16327 - C16326) * C10399 +
            (C16329 - C16328 + C16331 - C16330) * C10397 +
            (C16332 - C16333 + C16334 - C16335) * C10400 +
            (C16336 - C16337 + C16338 - C16339) * C47525) *
               C47157 * C1817 +
           ((C16333 - C16332 + C16335 - C16334) * C10399 +
            (C16337 - C16336 + C16339 - C16338) * C10397 +
            (C15945 * C2006 - C15949 * C1998 + C47523 * C2397 -
             C15950 * C2392) *
                C10400 +
            (C15945 * C2016 - C15949 * C2007 + C47523 * C2401 -
             C15950 * C2398) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C1816 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C1817 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C15945 * C2002 - C15949 * C1996 + C47523 * C2393 -
             C15950 * C2390) *
                C10400 +
            (C15945 * C2014 - C15949 * C2003 + C47523 * C2399 -
             C15950 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47544 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C1816 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C1817 +
           ((C26836 - C26835 + C26838 - C26837) * C10399 +
            (C26840 - C26839 + C26842 - C26841) * C10397 +
            (C15949 * C2390 - C15945 * C2393 + C15950 * C7343 -
             C47523 * C7345) *
                C10400 +
            (C15949 * C2394 - C15945 * C2399 + C15950 * C7346 -
             C47523 * C7349) *
                C47525) *
               C47157 * C47508) *
              C47532 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C1816 +
           ((C26844 - C26843 + C26846 - C26845) * C10399 +
            (C26848 - C26847 + C26850 - C26849) * C10397 +
            (C26851 - C26852 + C26853 - C26854) * C10400 +
            (C26855 - C26856 + C26857 - C26858) * C47525) *
               C47157 * C1817 +
           ((C26852 - C26851 + C26854 - C26853) * C10399 +
            (C26856 - C26855 + C26858 - C26857) * C10397 +
            (C15945 * C7345 - C15949 * C7343 + C47523 * C23373 -
             C15950 * C23372) *
                C10400 +
            (C15945 * C7349 - C15949 * C7346 + C47523 * C23375 -
             C15950 * C23374) *
                C47525) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
               C10399 +
           (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
               C10397 +
           (C25983 - C25984 + C25985 - C25986) * C10400 +
           (C25987 - C25988 + C25989 - C25990) * C47525) *
              C47157 * C1991 +
          ((C25984 - C25983 + C25986 - C25985) * C10399 +
           (C25988 - C25987 + C25990 - C25989) * C10397 +
           (C25991 - C25992 + C25993 - C25994) * C10400 +
           (C25995 - C25996 + C25997 - C25998) * C47525) *
              C47157 * C1992 +
          ((C25992 - C25991 + C25994 - C25993) * C10399 +
           (C25996 - C25995 + C25998 - C25997) * C10397 +
           (C27699 - C27700 + C27701 - C27702) * C10400 +
           (C27703 - C27704 + C27705 - C27706) * C47525) *
              C47157 * C1993 +
          ((C27700 - C27699 + C27702 - C27701) * C10399 +
           (C27704 - C27703 + C27706 - C27705) * C10397 +
           (C27707 - C27708 + C27709 - C27710) * C10400 +
           (C27711 - C27712 + C27713 - C27714) * C47525) *
              C47157 * C1994 +
          ((C27708 - C27707 + C27710 - C27709) * C10399 +
           (C27712 - C27711 + C27714 - C27713) * C10397 +
           (C15945 * C12411 - C15949 * C12409 + C47523 * C27695 -
            C15950 * C27694) *
               C10400 +
           (C15945 * C12415 - C15949 * C12412 + C47523 * C27697 -
            C15950 * C27696) *
               C47525) *
              C47157 * C1995) *
         C47208 * C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C47474 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C1078 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C47474 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47313) *
               C1079 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C10399 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C10397 +
             (C26843 - C26844 + C26845 - C26846) * C10400 +
             (C26847 - C26848 + C26849 - C26850) * C47525) *
                C47157 * C47474 +
            ((C26844 - C26843 + C26846 - C26845) * C10399 +
             (C26848 - C26847 + C26850 - C26849) * C10397 +
             (C26851 - C26852 + C26853 - C26854) * C10400 +
             (C26855 - C26856 + C26857 - C26858) * C47525) *
                C47157 * C47313) *
               C47505) *
              C47459 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C47474 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C1078 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C47474 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C1079 +
           (((C16139 - C16138 + C16141 - C16140) * C10399 +
             (C16143 - C16142 + C16145 - C16144) * C10397 +
             (C17532 - C17533 + C17534 - C17535) * C10400 +
             (C17536 - C17537 + C17538 - C17539) * C47525) *
                C47157 * C47474 +
            ((C17533 - C17532 + C17535 - C17534) * C10399 +
             (C17537 - C17536 + C17539 - C17538) * C10397 +
             (C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C10400 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47474 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47313) *
              C47208 * C655 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47474 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C47313) *
              C47208 * C656 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47474 +
           ((C16325 - C16324 + C16327 - C16326) * C10399 +
            (C16329 - C16328 + C16331 - C16330) * C10397 +
            (C16332 - C16333 + C16334 - C16335) * C10400 +
            (C16336 - C16337 + C16338 - C16339) * C47525) *
               C47157 * C47313) *
              C47208 * C657 +
          (((C15969 - C15968 + C15971 - C15970) * C10399 +
            (C15973 - C15972 + C15975 - C15974) * C10397 +
            (C16608 - C16609 + C16610 - C16611) * C10400 +
            (C16612 - C16613 + C16614 - C16615) * C47525) *
               C47157 * C47474 +
           ((C16609 - C16608 + C16611 - C16610) * C10399 +
            (C16613 - C16612 + C16615 - C16614) * C10397 +
            (C15945 * C505 - C15949 * C488 + C47523 * C2167 - C15950 * C2166) *
                C10400 +
            (C15945 * C518 - C15949 * C506 + C47523 * C2169 - C15950 * C2168) *
                C47525) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C2276 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C2277 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C27699 - C27700 + C27701 - C27702) * C10400 +
            (C27703 - C27704 + C27705 - C27706) * C47525) *
               C47157 * C2278 +
           ((C27700 - C27699 + C27702 - C27701) * C10399 +
            (C27704 - C27703 + C27706 - C27705) * C10397 +
            (C27707 - C27708 + C27709 - C27710) * C10400 +
            (C27711 - C27712 + C27713 - C27714) * C47525) *
               C47157 * C47521) *
              C47208 * C47459 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C2276 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C2277 +
           ((C16317 - C16316 + C16319 - C16318) * C10399 +
            (C16321 - C16320 + C16323 - C16322) * C10397 +
            (C18376 - C18377 + C18378 - C18379) * C10400 +
            (C18380 - C18381 + C18382 - C18383) * C47525) *
               C47157 * C2278 +
           ((C18377 - C18376 + C18379 - C18378) * C10399 +
            (C18381 - C18380 + C18383 - C18382) * C10397 +
            (C15945 * C2010 - C15949 * C2000 + C47523 * C6869 -
             C15950 * C6866) *
                C10400 +
            (C15945 * C2018 - C15949 * C2011 + C47523 * C6872 -
             C15950 * C6870) *
                C47525) *
               C47157 * C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C15945 * C491 - C15949 * C481 + C47523 * C936 - C15950 * C931) *
                C10400 +
            (C15945 * C511 - C15949 * C492 + C47523 * C946 - C15950 * C937) *
                C47525) *
               C47157 * C47226 * C47544 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C15949 * C931 - C15945 * C936 + C15950 * C1289 - C47523 * C1301) *
                C10400 +
            (C15949 * C937 - C15945 * C946 + C15950 * C1302 - C47523 * C1316) *
                C47525) *
               C47157 * C47226 * C47532 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 -
             C15950 * C1694) *
                C10400 +
            (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 -
             C15950 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C291 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C47544 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C47532 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C47505) *
              C292 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C47544 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C47532 +
           ((C16155 - C16154 + C16157 - C16156) * C10399 +
            (C16159 - C16158 + C16161 - C16160) * C10397 +
            (C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
             C15950 * C1696) *
                C10400 +
            (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
             C15950 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
               C10399 +
           (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
               C10397 +
           (C15945 * C491 - C15949 * C481 + C47523 * C936 - C15950 * C931) *
               C10400 +
           (C15945 * C511 - C15949 * C492 + C47523 * C946 - C15950 * C937) *
               C47525) *
              C47157 * C47226 * C47208 * C108 +
          ((C15953 - C15952 + C15955 - C15954) * C10399 +
           (C15957 - C15956 + C15959 - C15958) * C10397 +
           (C16308 - C16309 + C16310 - C16311) * C10400 +
           (C16312 - C16313 + C16314 - C16315) * C47525) *
              C47157 * C47226 * C47208 * C109 +
          ((C15961 - C15960 + C15963 - C15962) * C10399 +
           (C15965 - C15964 + C15967 - C15966) * C10397 +
           (C16324 - C16325 + C16326 - C16327) * C10400 +
           (C16328 - C16329 + C16330 - C16331) * C47525) *
              C47157 * C47226 * C47208 * C110 +
          ((C15969 - C15968 + C15971 - C15970) * C10399 +
           (C15973 - C15972 + C15975 - C15974) * C10397 +
           (C16608 - C16609 + C16610 - C16611) * C10400 +
           (C16612 - C16613 + C16614 - C16615) * C47525) *
              C47157 * C47226 * C47208 * C111 +
          ((C15977 - C15976 + C15979 - C15978) * C10399 +
           (C15981 - C15980 + C15983 - C15982) * C10397 +
           (C15945 * C507 - C15949 * C489 + C47523 * C944 - C15950 * C935) *
               C10400 +
           (C15945 * C519 - C15949 * C508 + C47523 * C950 - C15950 * C945) *
               C47525) *
              C47157 * C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C1078 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C1079 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 -
             C15950 * C1694) *
                C10400 +
            (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 -
             C15950 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C1078 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C1079 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C47505) *
              C47528 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C1078 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C1079 +
           ((C16155 - C16154 + C16157 - C16156) * C10399 +
            (C16159 - C16158 + C16161 - C16160) * C10397 +
            (C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
             C15950 * C1696) *
                C10400 +
            (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
             C15950 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
               C10399 +
           (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
               C10397 +
           (C25983 - C25984 + C25985 - C25986) * C10400 +
           (C25987 - C25988 + C25989 - C25990) * C47525) *
              C47157 * C47226 * C1146 +
          ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
               C10399 +
           (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
               C10397 +
           (C26453 - C26454 + C26455 - C26456) * C10400 +
           (C26457 - C26458 + C26459 - C26460) * C47525) *
              C47157 * C47226 * C1147 +
          ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
               C10399 +
           (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
               C10397 +
           (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 - C15950 * C1694) *
               C10400 +
           (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 - C15950 * C1698) *
               C47525) *
              C47157 * C47226 * C1148 +
          ((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 - C47523 * C1164) *
               C10399 +
           (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 - C47523 * C1173) *
               C10397 +
           (C15949 * C1694 - C15945 * C1697 + C15950 * C6483 - C47523 * C6485) *
               C10400 +
           (C15949 * C1698 - C15945 * C1703 + C15950 * C6486 - C47523 * C6489) *
               C47525) *
              C47157 * C47226 * C1149 +
          ((C15945 * C1164 - C15949 * C1155 + C47523 * C5853 - C15950 * C5851) *
               C10399 +
           (C15945 * C1173 - C15949 * C1165 + C47523 * C5857 - C15950 * C5854) *
               C10397 +
           (C15945 * C6485 - C15949 * C6483 + C47523 * C22741 -
            C15950 * C22740) *
               C10400 +
           (C15945 * C6489 - C15949 * C6486 + C47523 * C22743 -
            C15950 * C22742) *
               C47525) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C1816 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C1817 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C15945 * C2002 - C15949 * C1996 + C47523 * C2393 -
             C15950 * C2390) *
                C10400 +
            (C15945 * C2014 - C15949 * C2003 + C47523 * C2399 -
             C15950 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47541 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C1816 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C1817 +
           ((C16317 - C16316 + C16319 - C16318) * C10399 +
            (C16321 - C16320 + C16323 - C16322) * C10397 +
            (C18376 - C18377 + C18378 - C18379) * C10400 +
            (C18380 - C18381 + C18382 - C18383) * C47525) *
               C47157 * C47508) *
              C47208 * C47528 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C1816 +
           ((C16325 - C16324 + C16327 - C16326) * C10399 +
            (C16329 - C16328 + C16331 - C16330) * C10397 +
            (C16332 - C16333 + C16334 - C16335) * C10400 +
            (C16336 - C16337 + C16338 - C16339) * C47525) *
               C47157 * C1817 +
           ((C16333 - C16332 + C16335 - C16334) * C10399 +
            (C16337 - C16336 + C16339 - C16338) * C10397 +
            (C15945 * C2006 - C15949 * C1998 + C47523 * C2397 -
             C15950 * C2392) *
                C10400 +
            (C15945 * C2016 - C15949 * C2007 + C47523 * C2401 -
             C15950 * C2398) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C1816 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C1817 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C15945 * C2002 - C15949 * C1996 + C47523 * C2393 -
             C15950 * C2390) *
                C10400 +
            (C15945 * C2014 - C15949 * C2003 + C47523 * C2399 -
             C15950 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47544 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C1816 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C1817 +
           ((C26836 - C26835 + C26838 - C26837) * C10399 +
            (C26840 - C26839 + C26842 - C26841) * C10397 +
            (C15949 * C2390 - C15945 * C2393 + C15950 * C7343 -
             C47523 * C7345) *
                C10400 +
            (C15949 * C2394 - C15945 * C2399 + C15950 * C7346 -
             C47523 * C7349) *
                C47525) *
               C47157 * C47508) *
              C47532 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C1816 +
           ((C26844 - C26843 + C26846 - C26845) * C10399 +
            (C26848 - C26847 + C26850 - C26849) * C10397 +
            (C26851 - C26852 + C26853 - C26854) * C10400 +
            (C26855 - C26856 + C26857 - C26858) * C47525) *
               C47157 * C1817 +
           ((C26852 - C26851 + C26854 - C26853) * C10399 +
            (C26856 - C26855 + C26858 - C26857) * C10397 +
            (C15945 * C7345 - C15949 * C7343 + C47523 * C23373 -
             C15950 * C23372) *
                C10400 +
            (C15945 * C7349 - C15949 * C7346 + C47523 * C23375 -
             C15950 * C23374) *
                C47525) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C3262 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C3262 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47185 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C3262 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C3262 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47194 +
          ((((C15961 - C15960 + C15963 - C15962) * C10399 +
             (C15965 - C15964 + C15967 - C15966) * C10397 +
             (C16324 - C16325 + C16326 - C16327) * C10400 +
             (C16328 - C16329 + C16330 - C16331) * C47525) *
                C47157 * C3262 +
            ((C16325 - C16324 + C16327 - C16326) * C10399 +
             (C16329 - C16328 + C16331 - C16330) * C10397 +
             (C16332 - C16333 + C16334 - C16335) * C10400 +
             (C16336 - C16337 + C16338 - C16339) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C16147 - C16146 + C16149 - C16148) * C10399 +
             (C16151 - C16150 + C16153 - C16152) * C10397 +
             (C16818 - C16819 + C16820 - C16821) * C10400 +
             (C16822 - C16823 + C16824 - C16825) * C47525) *
                C47157 * C3262 +
            ((C16819 - C16818 + C16821 - C16820) * C10399 +
             (C16823 - C16822 + C16825 - C16824) * C10397 +
             (C15945 * C1299 - C15949 * C1288 + C47523 * C1311 -
              C15950 * C1294) *
                 C10400 +
             (C15945 * C1315 - C15949 * C1300 + C47523 * C1321 -
              C15950 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C47309 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47316 +
            ((C25992 - C25991 + C25994 - C25993) * C10399 +
             (C25996 - C25995 + C25998 - C25997) * C10397 +
             (C27699 - C27700 + C27701 - C27702) * C10400 +
             (C27703 - C27704 + C27705 - C27706) * C47525) *
                C47157 * C3770) *
               C47473 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C47309 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47316 +
            ((C26836 - C26835 + C26838 - C26837) * C10399 +
             (C26840 - C26839 + C26842 - C26841) * C10397 +
             (C28169 - C28170 + C28171 - C28172) * C10400 +
             (C28173 - C28174 + C28175 - C28176) * C47525) *
                C47157 * C3770) *
               C47271) *
              C2608 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C47309 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47316 +
            ((C16317 - C16316 + C16319 - C16318) * C10399 +
             (C16321 - C16320 + C16323 - C16322) * C10397 +
             (C18376 - C18377 + C18378 - C18379) * C10400 +
             (C18380 - C18381 + C18382 - C18383) * C47525) *
                C47157 * C3770) *
               C47473 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C47309 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47316 +
            ((C18239 - C18238 + C18241 - C18240) * C10399 +
             (C18243 - C18242 + C18245 - C18244) * C10397 +
             (C15945 * C2395 - C15949 * C2391 + C47523 * C7347 -
              C15950 * C7344) *
                 C10400 +
             (C15945 * C2400 - C15949 * C2396 + C47523 * C7350 -
              C15950 * C7348) *
                 C47525) *
                C47157 * C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C3262 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C47544 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C3262 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47313) *
               C47532 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C10399 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C10397 +
             (C26843 - C26844 + C26845 - C26846) * C10400 +
             (C26847 - C26848 + C26849 - C26850) * C47525) *
                C47157 * C3262 +
            ((C26844 - C26843 + C26846 - C26845) * C10399 +
             (C26848 - C26847 + C26850 - C26849) * C10397 +
             (C26851 - C26852 + C26853 - C26854) * C10400 +
             (C26855 - C26856 + C26857 - C26858) * C47525) *
                C47157 * C47313) *
               C47505) *
              C2608 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C3262 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C47544 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C3262 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C47532 +
           (((C16139 - C16138 + C16141 - C16140) * C10399 +
             (C16143 - C16142 + C16145 - C16144) * C10397 +
             (C17532 - C17533 + C17534 - C17535) * C10400 +
             (C17536 - C17537 + C17538 - C17539) * C47525) *
                C47157 * C3262 +
            ((C17533 - C17532 + C17535 - C17534) * C10399 +
             (C17537 - C17536 + C17539 - C17538) * C10397 +
             (C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C10400 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C3262 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47313) *
              C47208 * C47550 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C3262 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C47313) *
              C47208 * C47543 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C3262 +
           ((C16325 - C16324 + C16327 - C16326) * C10399 +
            (C16329 - C16328 + C16331 - C16330) * C10397 +
            (C16332 - C16333 + C16334 - C16335) * C10400 +
            (C16336 - C16337 + C16338 - C16339) * C47525) *
               C47157 * C47313) *
              C47208 * C47530 +
          (((C15969 - C15968 + C15971 - C15970) * C10399 +
            (C15973 - C15972 + C15975 - C15974) * C10397 +
            (C16608 - C16609 + C16610 - C16611) * C10400 +
            (C16612 - C16613 + C16614 - C16615) * C47525) *
               C47157 * C3262 +
           ((C16609 - C16608 + C16611 - C16610) * C10399 +
            (C16613 - C16612 + C16615 - C16614) * C10397 +
            (C15945 * C505 - C15949 * C488 + C47523 * C2167 - C15950 * C2166) *
                C10400 +
            (C15945 * C518 - C15949 * C506 + C47523 * C2169 - C15950 * C2168) *
                C47525) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47552 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47549 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C27699 - C27700 + C27701 - C27702) * C10400 +
            (C27703 - C27704 + C27705 - C27706) * C47525) *
               C47157 * C47540 +
           ((C27700 - C27699 + C27702 - C27701) * C10399 +
            (C27704 - C27703 + C27706 - C27705) * C10397 +
            (C27707 - C27708 + C27709 - C27710) * C10400 +
            (C27711 - C27712 + C27713 - C27714) * C47525) *
               C47157 * C47521) *
              C47208 * C2608 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47552 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C47549 +
           ((C16317 - C16316 + C16319 - C16318) * C10399 +
            (C16321 - C16320 + C16323 - C16322) * C10397 +
            (C18376 - C18377 + C18378 - C18379) * C10400 +
            (C18380 - C18381 + C18382 - C18383) * C47525) *
               C47157 * C47540 +
           ((C18377 - C18376 + C18379 - C18378) * C10399 +
            (C18381 - C18380 + C18383 - C18382) * C10397 +
            (C15945 * C2010 - C15949 * C2000 + C47523 * C6869 -
             C15950 * C6866) *
                C10400 +
            (C15945 * C2018 - C15949 * C2011 + C47523 * C6872 -
             C15950 * C6870) *
                C47525) *
               C47157 * C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47309 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47316 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C27699 - C27700 + C27701 - C27702) * C10400 +
            (C27703 - C27704 + C27705 - C27706) * C47525) *
               C47157 * C3770) *
              C47208 * C47185 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47309 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C47316 +
           ((C16317 - C16316 + C16319 - C16318) * C10399 +
            (C16321 - C16320 + C16323 - C16322) * C10397 +
            (C18376 - C18377 + C18378 - C18379) * C10400 +
            (C18380 - C18381 + C18382 - C18383) * C47525) *
               C47157 * C3770) *
              C47208 * C47194 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47309 +
           ((C16325 - C16324 + C16327 - C16326) * C10399 +
            (C16329 - C16328 + C16331 - C16330) * C10397 +
            (C16332 - C16333 + C16334 - C16335) * C10400 +
            (C16336 - C16337 + C16338 - C16339) * C47525) *
               C47157 * C47316 +
           ((C16333 - C16332 + C16335 - C16334) * C10399 +
            (C16337 - C16336 + C16339 - C16338) * C10397 +
            (C15945 * C2006 - C15949 * C1998 + C47523 * C2397 -
             C15950 * C2392) *
                C10400 +
            (C15945 * C2016 - C15949 * C2007 + C47523 * C2401 -
             C15950 * C2398) *
                C47525) *
               C47157 * C3770) *
              C47208 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C3262 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47313) *
              C47208 * C47550 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C3262 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C47313) *
              C47208 * C47543 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C3262 +
           ((C16325 - C16324 + C16327 - C16326) * C10399 +
            (C16329 - C16328 + C16331 - C16330) * C10397 +
            (C16332 - C16333 + C16334 - C16335) * C10400 +
            (C16336 - C16337 + C16338 - C16339) * C47525) *
               C47157 * C47313) *
              C47208 * C47530 +
          (((C15969 - C15968 + C15971 - C15970) * C10399 +
            (C15973 - C15972 + C15975 - C15974) * C10397 +
            (C16608 - C16609 + C16610 - C16611) * C10400 +
            (C16612 - C16613 + C16614 - C16615) * C47525) *
               C47157 * C3262 +
           ((C16609 - C16608 + C16611 - C16610) * C10399 +
            (C16613 - C16612 + C16615 - C16614) * C10397 +
            (C15945 * C505 - C15949 * C488 + C47523 * C2167 - C15950 * C2166) *
                C10400 +
            (C15945 * C518 - C15949 * C506 + C47523 * C2169 - C15950 * C2168) *
                C47525) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C3262 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C47544 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C3262 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47313) *
               C47532 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C10399 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C10397 +
             (C26843 - C26844 + C26845 - C26846) * C10400 +
             (C26847 - C26848 + C26849 - C26850) * C47525) *
                C47157 * C3262 +
            ((C26844 - C26843 + C26846 - C26845) * C10399 +
             (C26848 - C26847 + C26850 - C26849) * C10397 +
             (C26851 - C26852 + C26853 - C26854) * C10400 +
             (C26855 - C26856 + C26857 - C26858) * C47525) *
                C47157 * C47313) *
               C47505) *
              C2608 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C3262 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C47544 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C3262 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C47532 +
           (((C16139 - C16138 + C16141 - C16140) * C10399 +
             (C16143 - C16142 + C16145 - C16144) * C10397 +
             (C17532 - C17533 + C17534 - C17535) * C10400 +
             (C17536 - C17537 + C17538 - C17539) * C47525) *
                C47157 * C3262 +
            ((C17533 - C17532 + C17535 - C17534) * C10399 +
             (C17537 - C17536 + C17539 - C17538) * C10397 +
             (C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C10400 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C47473 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C15949 * C931 - C15945 * C936 + C15950 * C1289 - C47523 * C1301) *
                C10400 +
            (C15949 * C937 - C15945 * C946 + C15950 * C1302 - C47523 * C1316) *
                C47525) *
               C47157 * C47226 * C47271) *
              C655 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C47473 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C47271) *
              C656 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C47473 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C47271) *
              C657 +
          (((C15969 - C15968 + C15971 - C15970) * C10399 +
            (C15973 - C15972 + C15975 - C15974) * C10397 +
            (C16608 - C16609 + C16610 - C16611) * C10400 +
            (C16612 - C16613 + C16614 - C16615) * C47525) *
               C47157 * C47226 * C47473 +
           ((C16471 - C16470 + C16473 - C16472) * C10399 +
            (C16475 - C16474 + C16477 - C16476) * C10397 +
            (C15945 * C942 - C15949 * C934 + C47523 * C1585 - C15950 * C1584) *
                C10400 +
            (C15945 * C949 - C15949 * C943 + C47523 * C1587 - C15950 * C1586) *
                C47525) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C1420 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C1421 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C47226 * C1422 +
           ((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C10399 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C10397 +
            (C15949 * C1694 - C15945 * C1697 + C15950 * C6483 -
             C47523 * C6485) *
                C10400 +
            (C15949 * C1698 - C15945 * C1703 + C15950 * C6486 -
             C47523 * C6489) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47459 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C1420 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C1421 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C1422 +
           ((C17331 - C17330 + C17333 - C17332) * C10399 +
            (C17335 - C17334 + C17337 - C17336) * C10397 +
            (C15945 * C1699 - C15949 * C1695 + C47523 * C6487 -
             C15950 * C6484) *
                C10400 +
            (C15945 * C1704 - C15949 * C1700 + C47523 * C6490 -
             C15950 * C6488) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C47474 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C47474 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C15945 * C1295 - C15949 * C1286 + C47523 * C1307 -
              C15950 * C1292) *
                 C10400 +
             (C15945 * C1313 - C15949 * C1296 + C47523 * C1319 -
              C15950 * C1308) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C291 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C47474 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C47474 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C47271) *
              C292 +
          ((((C15961 - C15960 + C15963 - C15962) * C10399 +
             (C15965 - C15964 + C15967 - C15966) * C10397 +
             (C16324 - C16325 + C16326 - C16327) * C10400 +
             (C16328 - C16329 + C16330 - C16331) * C47525) *
                C47157 * C47474 +
            ((C16325 - C16324 + C16327 - C16326) * C10399 +
             (C16329 - C16328 + C16331 - C16330) * C10397 +
             (C16332 - C16333 + C16334 - C16335) * C10400 +
             (C16336 - C16337 + C16338 - C16339) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C16147 - C16146 + C16149 - C16148) * C10399 +
             (C16151 - C16150 + C16153 - C16152) * C10397 +
             (C16818 - C16819 + C16820 - C16821) * C10400 +
             (C16822 - C16823 + C16824 - C16825) * C47525) *
                C47157 * C47474 +
            ((C16819 - C16818 + C16821 - C16820) * C10399 +
             (C16823 - C16822 + C16825 - C16824) * C10397 +
             (C15945 * C1299 - C15949 * C1288 + C47523 * C1311 -
              C15950 * C1294) *
                 C10400 +
             (C15945 * C1315 - C15949 * C1300 + C47523 * C1321 -
              C15950 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47474 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47313) *
              C1420 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47474 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C47313) *
              C1421 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C47474 +
           ((C26844 - C26843 + C26846 - C26845) * C10399 +
            (C26848 - C26847 + C26850 - C26849) * C10397 +
            (C26851 - C26852 + C26853 - C26854) * C10400 +
            (C26855 - C26856 + C26857 - C26858) * C47525) *
               C47157 * C47313) *
              C1422 +
          (((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 -
             C47523 * C1164) *
                C10399 +
            (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 -
             C47523 * C1173) *
                C10397 +
            (C27313 - C27314 + C27315 - C27316) * C10400 +
            (C27317 - C27318 + C27319 - C27320) * C47525) *
               C47157 * C47474 +
           ((C27314 - C27313 + C27316 - C27315) * C10399 +
            (C27318 - C27317 + C27320 - C27319) * C10397 +
            (C15945 * C6007 - C15949 * C6005 + C47523 * C22395 -
             C15950 * C22394) *
                C10400 +
            (C15945 * C6011 - C15949 * C6008 + C47523 * C22397 -
             C15950 * C22396) *
                C47525) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C15945 * C491 - C15949 * C481 + C47523 * C936 - C15950 * C931) *
                C10400 +
            (C15945 * C511 - C15949 * C492 + C47523 * C946 - C15950 * C937) *
                C47525) *
               C47157 * C47226 * C47544 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C15949 * C931 - C15945 * C936 + C15950 * C1289 - C47523 * C1301) *
                C10400 +
            (C15949 * C937 - C15945 * C946 + C15950 * C1302 - C47523 * C1316) *
                C47525) *
               C47157 * C47226 * C47532 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 -
             C15950 * C1694) *
                C10400 +
            (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 -
             C15950 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C291 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C47544 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C47532 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C47505) *
              C292 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C47544 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C47532 +
           ((C16155 - C16154 + C16157 - C16156) * C10399 +
            (C16159 - C16158 + C16161 - C16160) * C10397 +
            (C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
             C15950 * C1696) *
                C10400 +
            (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
             C15950 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
               C10399 +
           (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
               C10397 +
           (C15945 * C491 - C15949 * C481 + C47523 * C936 - C15950 * C931) *
               C10400 +
           (C15945 * C511 - C15949 * C492 + C47523 * C946 - C15950 * C937) *
               C47525) *
              C47157 * C47226 * C47208 * C108 +
          ((C15953 - C15952 + C15955 - C15954) * C10399 +
           (C15957 - C15956 + C15959 - C15958) * C10397 +
           (C16308 - C16309 + C16310 - C16311) * C10400 +
           (C16312 - C16313 + C16314 - C16315) * C47525) *
              C47157 * C47226 * C47208 * C109 +
          ((C15961 - C15960 + C15963 - C15962) * C10399 +
           (C15965 - C15964 + C15967 - C15966) * C10397 +
           (C16324 - C16325 + C16326 - C16327) * C10400 +
           (C16328 - C16329 + C16330 - C16331) * C47525) *
              C47157 * C47226 * C47208 * C110 +
          ((C15969 - C15968 + C15971 - C15970) * C10399 +
           (C15973 - C15972 + C15975 - C15974) * C10397 +
           (C16608 - C16609 + C16610 - C16611) * C10400 +
           (C16612 - C16613 + C16614 - C16615) * C47525) *
              C47157 * C47226 * C47208 * C111 +
          ((C15977 - C15976 + C15979 - C15978) * C10399 +
           (C15981 - C15980 + C15983 - C15982) * C10397 +
           (C15945 * C507 - C15949 * C489 + C47523 * C944 - C15950 * C935) *
               C10400 +
           (C15945 * C519 - C15949 * C508 + C47523 * C950 - C15950 * C945) *
               C47525) *
              C47157 * C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47545 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47534 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C15945 * C2002 - C15949 * C1996 + C47523 * C2393 -
             C15950 * C2390) *
                C10400 +
            (C15945 * C2014 - C15949 * C2003 + C47523 * C2399 -
             C15950 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47208 * C291 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47545 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C47534 +
           ((C16317 - C16316 + C16319 - C16318) * C10399 +
            (C16321 - C16320 + C16323 - C16322) * C10397 +
            (C18376 - C18377 + C18378 - C18379) * C10400 +
            (C18380 - C18381 + C18382 - C18383) * C47525) *
               C47157 * C47508) *
              C47208 * C292 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47545 +
           ((C16325 - C16324 + C16327 - C16326) * C10399 +
            (C16329 - C16328 + C16331 - C16330) * C10397 +
            (C16332 - C16333 + C16334 - C16335) * C10400 +
            (C16336 - C16337 + C16338 - C16339) * C47525) *
               C47157 * C47534 +
           ((C16333 - C16332 + C16335 - C16334) * C10399 +
            (C16337 - C16336 + C16339 - C16338) * C10397 +
            (C15945 * C2006 - C15949 * C1998 + C47523 * C2397 -
             C15950 * C2392) *
                C10400 +
            (C15945 * C2016 - C15949 * C2007 + C47523 * C2401 -
             C15950 * C2398) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C1078 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C1079 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 -
             C15950 * C1694) *
                C10400 +
            (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 -
             C15950 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C1078 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C1079 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C47505) *
              C47528 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C1078 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C1079 +
           ((C16155 - C16154 + C16157 - C16156) * C10399 +
            (C16159 - C16158 + C16161 - C16160) * C10397 +
            (C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
             C15950 * C1696) *
                C10400 +
            (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
             C15950 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
               C10399 +
           (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
               C10397 +
           (C25983 - C25984 + C25985 - C25986) * C10400 +
           (C25987 - C25988 + C25989 - C25990) * C47525) *
              C47157 * C47226 * C1146 +
          ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
               C10399 +
           (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
               C10397 +
           (C26453 - C26454 + C26455 - C26456) * C10400 +
           (C26457 - C26458 + C26459 - C26460) * C47525) *
              C47157 * C47226 * C1147 +
          ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
               C10399 +
           (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
               C10397 +
           (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 - C15950 * C1694) *
               C10400 +
           (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 - C15950 * C1698) *
               C47525) *
              C47157 * C47226 * C1148 +
          ((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 - C47523 * C1164) *
               C10399 +
           (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 - C47523 * C1173) *
               C10397 +
           (C15949 * C1694 - C15945 * C1697 + C15950 * C6483 - C47523 * C6485) *
               C10400 +
           (C15949 * C1698 - C15945 * C1703 + C15950 * C6486 - C47523 * C6489) *
               C47525) *
              C47157 * C47226 * C1149 +
          ((C15945 * C1164 - C15949 * C1155 + C47523 * C5853 - C15950 * C5851) *
               C10399 +
           (C15945 * C1173 - C15949 * C1165 + C47523 * C5857 - C15950 * C5854) *
               C10397 +
           (C15945 * C6485 - C15949 * C6483 + C47523 * C22741 -
            C15950 * C22740) *
               C10400 +
           (C15945 * C6489 - C15949 * C6486 + C47523 * C22743 -
            C15950 * C22742) *
               C47525) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47545 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47534 +
           ((C25992 - C25991 + C25994 - C25993) * C10399 +
            (C25996 - C25995 + C25998 - C25997) * C10397 +
            (C15945 * C2002 - C15949 * C1996 + C47523 * C2393 -
             C15950 * C2390) *
                C10400 +
            (C15945 * C2014 - C15949 * C2003 + C47523 * C2399 -
             C15950 * C2394) *
                C47525) *
               C47157 * C47508) *
              C1078 +
          (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47545 +
           ((C26454 - C26453 + C26456 - C26455) * C10399 +
            (C26458 - C26457 + C26460 - C26459) * C10397 +
            (C26835 - C26836 + C26837 - C26838) * C10400 +
            (C26839 - C26840 + C26841 - C26842) * C47525) *
               C47157 * C47534 +
           ((C26836 - C26835 + C26838 - C26837) * C10399 +
            (C26840 - C26839 + C26842 - C26841) * C10397 +
            (C15949 * C2390 - C15945 * C2393 + C15950 * C7343 -
             C47523 * C7345) *
                C10400 +
            (C15949 * C2394 - C15945 * C2399 + C15950 * C7346 -
             C47523 * C7349) *
                C47525) *
               C47157 * C47508) *
              C1079 +
          (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C26843 - C26844 + C26845 - C26846) * C10400 +
            (C26847 - C26848 + C26849 - C26850) * C47525) *
               C47157 * C47545 +
           ((C26844 - C26843 + C26846 - C26845) * C10399 +
            (C26848 - C26847 + C26850 - C26849) * C10397 +
            (C26851 - C26852 + C26853 - C26854) * C10400 +
            (C26855 - C26856 + C26857 - C26858) * C47525) *
               C47157 * C47534 +
           ((C26852 - C26851 + C26854 - C26853) * C10399 +
            (C26856 - C26855 + C26858 - C26857) * C10397 +
            (C15945 * C7345 - C15949 * C7343 + C47523 * C23373 -
             C15950 * C23372) *
                C10400 +
            (C15945 * C7349 - C15949 * C7346 + C47523 * C23375 -
             C15950 * C23374) *
                C47525) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47474 +
           ((C25984 - C25983 + C25986 - C25985) * C10399 +
            (C25988 - C25987 + C25990 - C25989) * C10397 +
            (C25991 - C25992 + C25993 - C25994) * C10400 +
            (C25995 - C25996 + C25997 - C25998) * C47525) *
               C47157 * C47313) *
              C47208 * C655 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47474 +
           ((C16309 - C16308 + C16311 - C16310) * C10399 +
            (C16313 - C16312 + C16315 - C16314) * C10397 +
            (C16316 - C16317 + C16318 - C16319) * C10400 +
            (C16320 - C16321 + C16322 - C16323) * C47525) *
               C47157 * C47313) *
              C47208 * C656 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47474 +
           ((C16325 - C16324 + C16327 - C16326) * C10399 +
            (C16329 - C16328 + C16331 - C16330) * C10397 +
            (C16332 - C16333 + C16334 - C16335) * C10400 +
            (C16336 - C16337 + C16338 - C16339) * C47525) *
               C47157 * C47313) *
              C47208 * C657 +
          (((C15969 - C15968 + C15971 - C15970) * C10399 +
            (C15973 - C15972 + C15975 - C15974) * C10397 +
            (C16608 - C16609 + C16610 - C16611) * C10400 +
            (C16612 - C16613 + C16614 - C16615) * C47525) *
               C47157 * C47474 +
           ((C16609 - C16608 + C16611 - C16610) * C10399 +
            (C16613 - C16612 + C16615 - C16614) * C10397 +
            (C15945 * C505 - C15949 * C488 + C47523 * C2167 - C15950 * C2166) *
                C10400 +
            (C15945 * C518 - C15949 * C506 + C47523 * C2169 - C15950 * C2168) *
                C47525) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                 C10399 +
             (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                 C10397 +
             (C25983 - C25984 + C25985 - C25986) * C10400 +
             (C25987 - C25988 + C25989 - C25990) * C47525) *
                C47157 * C47474 +
            ((C25984 - C25983 + C25986 - C25985) * C10399 +
             (C25988 - C25987 + C25990 - C25989) * C10397 +
             (C25991 - C25992 + C25993 - C25994) * C10400 +
             (C25995 - C25996 + C25997 - C25998) * C47525) *
                C47157 * C47313) *
               C1078 +
           (((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                 C10399 +
             (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                 C10397 +
             (C26453 - C26454 + C26455 - C26456) * C10400 +
             (C26457 - C26458 + C26459 - C26460) * C47525) *
                C47157 * C47474 +
            ((C26454 - C26453 + C26456 - C26455) * C10399 +
             (C26458 - C26457 + C26460 - C26459) * C10397 +
             (C26835 - C26836 + C26837 - C26838) * C10400 +
             (C26839 - C26840 + C26841 - C26842) * C47525) *
                C47157 * C47313) *
               C1079 +
           (((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                 C10399 +
             (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                 C10397 +
             (C26843 - C26844 + C26845 - C26846) * C10400 +
             (C26847 - C26848 + C26849 - C26850) * C47525) *
                C47157 * C47474 +
            ((C26844 - C26843 + C26846 - C26845) * C10399 +
             (C26848 - C26847 + C26850 - C26849) * C10397 +
             (C26851 - C26852 + C26853 - C26854) * C10400 +
             (C26855 - C26856 + C26857 - C26858) * C47525) *
                C47157 * C47313) *
               C47505) *
              C47459 +
          ((((C15953 - C15952 + C15955 - C15954) * C10399 +
             (C15957 - C15956 + C15959 - C15958) * C10397 +
             (C16308 - C16309 + C16310 - C16311) * C10400 +
             (C16312 - C16313 + C16314 - C16315) * C47525) *
                C47157 * C47474 +
            ((C16309 - C16308 + C16311 - C16310) * C10399 +
             (C16313 - C16312 + C16315 - C16314) * C10397 +
             (C16316 - C16317 + C16318 - C16319) * C10400 +
             (C16320 - C16321 + C16322 - C16323) * C47525) *
                C47157 * C47313) *
               C1078 +
           (((C16131 - C16130 + C16133 - C16132) * C10399 +
             (C16135 - C16134 + C16137 - C16136) * C10397 +
             (C16810 - C16811 + C16812 - C16813) * C10400 +
             (C16814 - C16815 + C16816 - C16817) * C47525) *
                C47157 * C47474 +
            ((C16811 - C16810 + C16813 - C16812) * C10399 +
             (C16815 - C16814 + C16817 - C16816) * C10397 +
             (C18238 - C18239 + C18240 - C18241) * C10400 +
             (C18242 - C18243 + C18244 - C18245) * C47525) *
                C47157 * C47313) *
               C1079 +
           (((C16139 - C16138 + C16141 - C16140) * C10399 +
             (C16143 - C16142 + C16145 - C16144) * C10397 +
             (C17532 - C17533 + C17534 - C17535) * C10400 +
             (C17536 - C17537 + C17538 - C17539) * C47525) *
                C47157 * C47474 +
            ((C17533 - C17532 + C17535 - C17534) * C10399 +
             (C17537 - C17536 + C17539 - C17538) * C10397 +
             (C15945 * C1309 - C15949 * C1293 + C47523 * C6009 -
              C15950 * C6006) *
                 C10400 +
             (C15945 * C1320 - C15949 * C1310 + C47523 * C6012 -
              C15950 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
               C10399 +
           (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
               C10397 +
           (C15945 * C491 - C15949 * C481 + C47523 * C936 - C15950 * C931) *
               C10400 +
           (C15945 * C511 - C15949 * C492 + C47523 * C946 - C15950 * C937) *
               C47525) *
              C47157 * C47226 * C47208 * C108 +
          ((C15953 - C15952 + C15955 - C15954) * C10399 +
           (C15957 - C15956 + C15959 - C15958) * C10397 +
           (C16308 - C16309 + C16310 - C16311) * C10400 +
           (C16312 - C16313 + C16314 - C16315) * C47525) *
              C47157 * C47226 * C47208 * C109 +
          ((C15961 - C15960 + C15963 - C15962) * C10399 +
           (C15965 - C15964 + C15967 - C15966) * C10397 +
           (C16324 - C16325 + C16326 - C16327) * C10400 +
           (C16328 - C16329 + C16330 - C16331) * C47525) *
              C47157 * C47226 * C47208 * C110 +
          ((C15969 - C15968 + C15971 - C15970) * C10399 +
           (C15973 - C15972 + C15975 - C15974) * C10397 +
           (C16608 - C16609 + C16610 - C16611) * C10400 +
           (C16612 - C16613 + C16614 - C16615) * C47525) *
              C47157 * C47226 * C47208 * C111 +
          ((C15977 - C15976 + C15979 - C15978) * C10399 +
           (C15981 - C15980 + C15983 - C15982) * C10397 +
           (C15945 * C507 - C15949 * C489 + C47523 * C944 - C15950 * C935) *
               C10400 +
           (C15945 * C519 - C15949 * C508 + C47523 * C950 - C15950 * C945) *
               C47525) *
              C47157 * C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C15945 * C491 - C15949 * C481 + C47523 * C936 - C15950 * C931) *
                C10400 +
            (C15945 * C511 - C15949 * C492 + C47523 * C946 - C15950 * C937) *
                C47525) *
               C47157 * C47226 * C47544 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C15949 * C931 - C15945 * C936 + C15950 * C1289 - C47523 * C1301) *
                C10400 +
            (C15949 * C937 - C15945 * C946 + C15950 * C1302 - C47523 * C1316) *
                C47525) *
               C47157 * C47226 * C47532 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 -
             C15950 * C1694) *
                C10400 +
            (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 -
             C15950 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C291 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C47544 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C47532 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C47505) *
              C292 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C47544 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C47532 +
           ((C16155 - C16154 + C16157 - C16156) * C10399 +
            (C16159 - C16158 + C16161 - C16160) * C10397 +
            (C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
             C15950 * C1696) *
                C10400 +
            (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
             C15950 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
                C10399 +
            (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
                C10397 +
            (C25983 - C25984 + C25985 - C25986) * C10400 +
            (C25987 - C25988 + C25989 - C25990) * C47525) *
               C47157 * C47226 * C1078 +
           ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
                C10399 +
            (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
                C10397 +
            (C26453 - C26454 + C26455 - C26456) * C10400 +
            (C26457 - C26458 + C26459 - C26460) * C47525) *
               C47157 * C47226 * C1079 +
           ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
                C10399 +
            (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
                C10397 +
            (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 -
             C15950 * C1694) *
                C10400 +
            (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 -
             C15950 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C15953 - C15952 + C15955 - C15954) * C10399 +
            (C15957 - C15956 + C15959 - C15958) * C10397 +
            (C16308 - C16309 + C16310 - C16311) * C10400 +
            (C16312 - C16313 + C16314 - C16315) * C47525) *
               C47157 * C47226 * C1078 +
           ((C16131 - C16130 + C16133 - C16132) * C10399 +
            (C16135 - C16134 + C16137 - C16136) * C10397 +
            (C16810 - C16811 + C16812 - C16813) * C10400 +
            (C16814 - C16815 + C16816 - C16817) * C47525) *
               C47157 * C47226 * C1079 +
           ((C16139 - C16138 + C16141 - C16140) * C10399 +
            (C16143 - C16142 + C16145 - C16144) * C10397 +
            (C17532 - C17533 + C17534 - C17535) * C10400 +
            (C17536 - C17537 + C17538 - C17539) * C47525) *
               C47157 * C47226 * C47505) *
              C47528 +
          (((C15961 - C15960 + C15963 - C15962) * C10399 +
            (C15965 - C15964 + C15967 - C15966) * C10397 +
            (C16324 - C16325 + C16326 - C16327) * C10400 +
            (C16328 - C16329 + C16330 - C16331) * C47525) *
               C47157 * C47226 * C1078 +
           ((C16147 - C16146 + C16149 - C16148) * C10399 +
            (C16151 - C16150 + C16153 - C16152) * C10397 +
            (C16818 - C16819 + C16820 - C16821) * C10400 +
            (C16822 - C16823 + C16824 - C16825) * C47525) *
               C47157 * C47226 * C1079 +
           ((C16155 - C16154 + C16157 - C16156) * C10399 +
            (C16159 - C16158 + C16161 - C16160) * C10397 +
            (C15945 * C1305 - C15949 * C1291 + C47523 * C1701 -
             C15950 * C1696) *
                C10400 +
            (C15945 * C1318 - C15949 * C1306 + C47523 * C1705 -
             C15950 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15945 * C122 - C15949 * C115 + C47523 * C304 - C15950 * C294) *
               C10399 +
           (C15945 * C136 - C15949 * C123 + C47523 * C324 - C15950 * C305) *
               C10397 +
           (C25983 - C25984 + C25985 - C25986) * C10400 +
           (C25987 - C25988 + C25989 - C25990) * C47525) *
              C47157 * C47226 * C1146 +
          ((C15949 * C294 - C15945 * C304 + C15950 * C297 - C47523 * C310) *
               C10399 +
           (C15949 * C305 - C15945 * C324 + C15950 * C311 - C47523 * C327) *
               C10397 +
           (C26453 - C26454 + C26455 - C26456) * C10400 +
           (C26457 - C26458 + C26459 - C26460) * C47525) *
              C47157 * C47226 * C1147 +
          ((C15945 * C310 - C15949 * C297 + C47523 * C1158 - C15950 * C1152) *
               C10399 +
           (C15945 * C327 - C15949 * C311 + C47523 * C1170 - C15950 * C1159) *
               C10397 +
           (C15945 * C1301 - C15949 * C1289 + C47523 * C1697 - C15950 * C1694) *
               C10400 +
           (C15945 * C1316 - C15949 * C1302 + C47523 * C1703 - C15950 * C1698) *
               C47525) *
              C47157 * C47226 * C1148 +
          ((C15949 * C1152 - C15945 * C1158 + C15950 * C1155 - C47523 * C1164) *
               C10399 +
           (C15949 * C1159 - C15945 * C1170 + C15950 * C1165 - C47523 * C1173) *
               C10397 +
           (C15949 * C1694 - C15945 * C1697 + C15950 * C6483 - C47523 * C6485) *
               C10400 +
           (C15949 * C1698 - C15945 * C1703 + C15950 * C6486 - C47523 * C6489) *
               C47525) *
              C47157 * C47226 * C1149 +
          ((C15945 * C1164 - C15949 * C1155 + C47523 * C5853 - C15950 * C5851) *
               C10399 +
           (C15945 * C1173 - C15949 * C1165 + C47523 * C5857 - C15950 * C5854) *
               C10397 +
           (C15945 * C6485 - C15949 * C6483 + C47523 * C22741 -
            C15950 * C22740) *
               C10400 +
           (C15945 * C6489 - C15949 * C6486 + C47523 * C22743 -
            C15950 * C22742) *
               C47525) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[150] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47411 * C122 - C113 * C115) * C31224 +
                      (C47411 * C136 - C113 * C123) * C31222 +
                      (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                         C15947 +
                     ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
                      C10698 * C31225 + C10699 * C47525) *
                         C47492) *
                        C47226 * C47267 +
                    (((C113 * C294 - C47411 * C304) * C31224 +
                      (C113 * C305 - C47411 * C324) * C31222 +
                      (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                         C15947 +
                     ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
                      C11174 * C31225 + C11175 * C47525) *
                         C47492) *
                        C47226 * C47274 +
                    (((C47411 * C310 - C113 * C297) * C31224 +
                      (C47411 * C327 - C113 * C311) * C31222 +
                      (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                         C15947 +
                     ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
                      C11898 * C31225 + C11899 * C47525) *
                         C47492) *
                        C47226 * C2868) *
                       C47185 +
                   ((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
                      C10704 * C31225 + C10705 * C47525) *
                         C15947 +
                     ((C149 - C148) * C31224 + (C151 - C150) * C31222 +
                      C546 * C31225 + C547 * C47525) *
                         C47492) *
                        C47226 * C47267 +
                    (((C336 - C335) * C31224 + (C338 - C337) * C31222 +
                      C11176 * C31225 + C11177 * C47525) *
                         C15947 +
                     ((C340 - C339) * C31224 + (C342 - C341) * C31222 +
                      C964 * C31225 + C965 * C47525) *
                         C47492) *
                        C47226 * C47274 +
                    (((C344 - C343) * C31224 + (C346 - C345) * C31222 +
                      C11900 * C31225 + C11901 * C47525) *
                         C15947 +
                     ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
                      (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                         C47492) *
                        C47226 * C2868) *
                       C47194 +
                   (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
                      C10711 * C47525) *
                         C15947 +
                     ((C153 - C152) * C31224 + (C155 - C154) * C31222 +
                      C777 * C31225 + C778 * C47525) *
                         C47492) *
                        C47226 * C47267 +
                    ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
                      C11179 * C47525) *
                         C15947 +
                     ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
                      (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                         C47492) *
                        C47226 * C47274 +
                    ((C361 * C31224 + C362 * C31222 + (C1594 - C1593) * C31225 +
                      (C1596 - C1595) * C47525) *
                         C15947 +
                     ((C356 - C355) * C31224 + (C358 - C357) * C31222 +
                      (C47411 * C1585 - C113 * C1584) * C31225 +
                      (C47411 * C1587 - C113 * C1586) * C47525) *
                         C47492) *
                        C47226 * C2868) *
                       C2871)) /
                 (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C47474 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C47474 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C47411 * C310 - C113 * C297) * C31224 +
              (C47411 * C327 - C113 * C311) * C31222 +
              (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                 C15947 +
             ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
              C11898 * C31225 + C11899 * C47525) *
                 C47492) *
                C47474 +
            (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
              (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                 C15947 +
             (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
              (C11568 - C11569) * C47525) *
                 C47492) *
                C47313) *
               C2868) *
              C2608 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C47474 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C47474 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C344 - C343) * C31224 + (C346 - C345) * C31222 +
              C11900 * C31225 + C11901 * C47525) *
                 C15947 +
             ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
              (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                 C47492) *
                C47474 +
            ((C11898 * C31224 + C11899 * C31222 + (C11567 - C11566) * C31225 +
              (C11569 - C11568) * C47525) *
                 C15947 +
             ((C1594 - C1593) * C31224 + (C1596 - C1595) * C31222 +
              (C47411 * C1311 - C113 * C1294) * C31225 +
              (C47411 * C1321 - C113 * C1312) * C47525) *
                 C47492) *
                C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C47551 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C47547 +
           (((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47226 * C47537 +
           (((C113 * C1152 - C47411 * C1158) * C31224 +
             (C113 * C1159 - C47411 * C1170) * C31222 +
             (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
                C15947 +
            ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
             (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
                C47492) *
               C47226 * C47515) *
              C2608 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C47551 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C47547 +
           (((C344 - C343) * C31224 + (C346 - C345) * C31222 + C11900 * C31225 +
             C11901 * C47525) *
                C15947 +
            ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
             (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                C47492) *
               C47226 * C47537 +
           (((C1432 - C1431) * C31224 + (C1434 - C1433) * C31222 +
             (C11701 - C11700) * C31225 + (C11703 - C11702) * C47525) *
                C15947 +
            ((C1436 - C1435) * C31224 + (C1438 - C1437) * C31222 +
             (C47411 * C1701 - C113 * C1696) * C31225 +
             (C47411 * C1705 - C113 * C1702) * C47525) *
                C47492) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C2500 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C47271) *
              C47550 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C2500 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C47271) *
              C47543 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47226 * C2500 +
           ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
             C11179 * C47525) *
                C15947 +
            ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
             (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                C47492) *
               C47226 * C47271) *
              C47530 +
          (((C166 * C31224 + C167 * C31222 + C10974 * C31225 +
             C10975 * C47525) *
                C15947 +
            ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
             (C779 - C780) * C31225 + (C781 - C782) * C47525) *
                C47492) *
               C47226 * C2500 +
           ((C664 * C31224 + C665 * C31222 + (C961 - C960) * C31225 +
             (C963 - C962) * C47525) *
                C15947 +
            ((C667 - C666) * C31224 + (C669 - C668) * C31222 +
             (C47411 * C944 - C113 * C935) * C31225 +
             (C47411 * C950 - C113 * C945) * C47525) *
                C47492) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C47545 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47534 +
            (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
              (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                 C15947 +
             (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
              C12763 * C47525) *
                 C47492) *
                C47508) *
               C2500 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C47545 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47534 +
            (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
              (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                 C15947 +
             (C12626 * C31224 + C12627 * C31222 + (C12628 - C12629) * C31225 +
              (C12630 - C12631) * C47525) *
                 C47492) *
                C47508) *
               C47271) *
              C2608 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C47545 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47534 +
            ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
              C12765 * C47525) *
                 C15947 +
             (C10712 * C31224 + C10713 * C31222 + (C2289 - C2290) * C31225 +
              (C2291 - C2292) * C47525) *
                 C47492) *
                C47508) *
               C2500 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C47545 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47534 +
            ((C12624 * C31224 + C12625 * C31222 + (C12629 - C12628) * C31225 +
              (C12631 - C12630) * C47525) *
                 C15947 +
             ((C2176 - C2175) * C31224 + (C2178 - C2177) * C31222 +
              (C47411 * C2397 - C113 * C2392) * C31225 +
              (C47411 * C2401 - C113 * C2398) * C47525) *
                 C47492) *
                C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C47474 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C47474 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47185 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C47474 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C47474 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47194 +
          ((((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
              C10711 * C47525) *
                 C15947 +
             ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
              C778 * C47525) *
                 C47492) *
                C47474 +
            ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
              C10713 * C47525) *
                 C15947 +
             (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
              (C544 - C545) * C47525) *
                 C47492) *
                C47313) *
               C2500 +
           (((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
              C11179 * C47525) *
                 C15947 +
             ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
              (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                 C47492) *
                C47474 +
            ((C964 * C31224 + C965 * C31222 + (C2176 - C2175) * C31225 +
              (C2178 - C2177) * C47525) *
                 C15947 +
             ((C961 - C960) * C31224 + (C963 - C962) * C31222 +
              (C47411 * C2167 - C113 * C2166) * C31225 +
              (C47411 * C2169 - C113 * C2168) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47411 * C122 - C113 * C115) * C31224 +
                      (C47411 * C136 - C113 * C123) * C31222 +
                      (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                         C15947 +
                     ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
                      C10698 * C31225 + C10699 * C47525) *
                         C47492) *
                        C47226 * C2500 +
                    (((C113 * C294 - C47411 * C304) * C31224 +
                      (C113 * C305 - C47411 * C324) * C31222 +
                      (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                         C15947 +
                     ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
                      C11174 * C31225 + C11175 * C47525) *
                         C47492) *
                        C47226 * C47271) *
                       C47550 +
                   ((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
                      C10704 * C31225 + C10705 * C47525) *
                         C15947 +
                     ((C149 - C148) * C31224 + (C151 - C150) * C31222 +
                      C546 * C31225 + C547 * C47525) *
                         C47492) *
                        C47226 * C2500 +
                    (((C336 - C335) * C31224 + (C338 - C337) * C31222 +
                      C11176 * C31225 + C11177 * C47525) *
                         C15947 +
                     ((C340 - C339) * C31224 + (C342 - C341) * C31222 +
                      C964 * C31225 + C965 * C47525) *
                         C47492) *
                        C47226 * C47271) *
                       C47543 +
                   (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
                      C10711 * C47525) *
                         C15947 +
                     ((C153 - C152) * C31224 + (C155 - C154) * C31222 +
                      C777 * C31225 + C778 * C47525) *
                         C47492) *
                        C47226 * C2500 +
                    ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
                      C11179 * C47525) *
                         C15947 +
                     ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
                      (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                         C47492) *
                        C47226 * C47271) *
                       C47530 +
                   (((C166 * C31224 + C167 * C31222 + C10974 * C31225 +
                      C10975 * C47525) *
                         C15947 +
                     ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
                      (C779 - C780) * C31225 + (C781 - C782) * C47525) *
                         C47492) *
                        C47226 * C2500 +
                    ((C664 * C31224 + C665 * C31222 + (C961 - C960) * C31225 +
                      (C963 - C962) * C47525) *
                         C15947 +
                     ((C667 - C666) * C31224 + (C669 - C668) * C31222 +
                      (C47411 * C944 - C113 * C935) * C31225 +
                      (C47411 * C950 - C113 * C945) * C47525) *
                         C47492) *
                        C47226 * C47271) *
                       C47509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47411 * C122 - C113 * C115) * C31224 +
                      (C47411 * C136 - C113 * C123) * C31222 +
                      (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                         C15947 +
                     ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
                      C10698 * C31225 + C10699 * C47525) *
                         C47492) *
                        C47226 * C47551 +
                    (((C113 * C294 - C47411 * C304) * C31224 +
                      (C113 * C305 - C47411 * C324) * C31222 +
                      (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                         C15947 +
                     ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
                      C11174 * C31225 + C11175 * C47525) *
                         C47492) *
                        C47226 * C47547 +
                    (((C47411 * C310 - C113 * C297) * C31224 +
                      (C47411 * C327 - C113 * C311) * C31222 +
                      (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                         C15947 +
                     ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
                      C11898 * C31225 + C11899 * C47525) *
                         C47492) *
                        C47226 * C47537 +
                    (((C113 * C1152 - C47411 * C1158) * C31224 +
                      (C113 * C1159 - C47411 * C1170) * C31222 +
                      (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
                         C15947 +
                     ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
                      (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
                         C47492) *
                        C47226 * C47515) *
                       C2608 +
                   ((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
                      C10704 * C31225 + C10705 * C47525) *
                         C15947 +
                     ((C149 - C148) * C31224 + (C151 - C150) * C31222 +
                      C546 * C31225 + C547 * C47525) *
                         C47492) *
                        C47226 * C47551 +
                    (((C336 - C335) * C31224 + (C338 - C337) * C31222 +
                      C11176 * C31225 + C11177 * C47525) *
                         C15947 +
                     ((C340 - C339) * C31224 + (C342 - C341) * C31222 +
                      C964 * C31225 + C965 * C47525) *
                         C47492) *
                        C47226 * C47547 +
                    (((C344 - C343) * C31224 + (C346 - C345) * C31222 +
                      C11900 * C31225 + C11901 * C47525) *
                         C15947 +
                     ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
                      (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                         C47492) *
                        C47226 * C47537 +
                    (((C1432 - C1431) * C31224 + (C1434 - C1433) * C31222 +
                      (C11701 - C11700) * C31225 + (C11703 - C11702) * C47525) *
                         C15947 +
                     ((C1436 - C1435) * C31224 + (C1438 - C1437) * C31222 +
                      (C47411 * C1701 - C113 * C1696) * C31225 +
                      (C47411 * C1705 - C113 * C1702) * C47525) *
                         C47492) *
                        C47226 * C47515) *
                       C47191)) /
                     (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C3262 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C3262 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C47411 * C310 - C113 * C297) * C31224 +
              (C47411 * C327 - C113 * C311) * C31222 +
              (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                 C15947 +
             ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
              C11898 * C31225 + C11899 * C47525) *
                 C47492) *
                C3262 +
            (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
              (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                 C15947 +
             (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
              (C11568 - C11569) * C47525) *
                 C47492) *
                C47313) *
               C2868) *
              C47459 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C3262 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C47267 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C3262 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C47274 +
           ((((C344 - C343) * C31224 + (C346 - C345) * C31222 +
              C11900 * C31225 + C11901 * C47525) *
                 C15947 +
             ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
              (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                 C47492) *
                C3262 +
            ((C11898 * C31224 + C11899 * C31222 + (C11567 - C11566) * C31225 +
              (C11569 - C11568) * C47525) *
                 C15947 +
             ((C1594 - C1593) * C31224 + (C1596 - C1595) * C31222 +
              (C47411 * C1311 - C113 * C1294) * C31225 +
              (C47411 * C1321 - C113 * C1312) * C47525) *
                 C47492) *
                C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47411 * C122 - C113 * C115) * C31224 +
                      (C47411 * C136 - C113 * C123) * C31222 +
                      (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                         C15947 +
                     ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
                      C10698 * C31225 + C10699 * C47525) *
                         C47492) *
                        C47309 +
                    (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
                      (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                         C15947 +
                     (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
                      C10707 * C47525) *
                         C47492) *
                        C47316 +
                    (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
                      (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                         C15947 +
                     (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
                      C12763 * C47525) *
                         C47492) *
                        C3770) *
                       C47267 +
                   ((((C113 * C294 - C47411 * C304) * C31224 +
                      (C113 * C305 - C47411 * C324) * C31222 +
                      (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                         C15947 +
                     ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
                      C11174 * C31225 + C11175 * C47525) *
                         C47492) *
                        C47309 +
                    (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
                      (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                         C15947 +
                     (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
                      C12625 * C47525) *
                         C47492) *
                        C47316 +
                    (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
                      (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                         C15947 +
                     (C12626 * C31224 + C12627 * C31222 +
                      (C12628 - C12629) * C31225 + (C12630 - C12631) * C47525) *
                         C47492) *
                        C3770) *
                       C47274 +
                   ((((C47411 * C310 - C113 * C297) * C31224 +
                      (C47411 * C327 - C113 * C311) * C31222 +
                      (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                         C15947 +
                     ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
                      C11898 * C31225 + C11899 * C47525) *
                         C47492) *
                        C47309 +
                    (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
                      (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                         C15947 +
                     (C11900 * C31224 + C11901 * C31222 +
                      (C11566 - C11567) * C31225 + (C11568 - C11569) * C47525) *
                         C47492) *
                        C47316 +
                    (((C11563 - C11562) * C31224 + (C11565 - C11564) * C31222 +
                      (C47411 * C7345 - C113 * C7343) * C31225 +
                      (C47411 * C7349 - C113 * C7346) * C47525) *
                         C15947 +
                     ((C11567 - C11566) * C31224 + (C11569 - C11568) * C31222 +
                      (C47411 * C7347 - C113 * C7344) * C31225 +
                      (C47411 * C7350 - C113 * C7348) * C47525) *
                         C47492) *
                        C3770) *
                       C2868) *
                  C47180) /
                 (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C3262 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47313) *
              C47551 +
          ((((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C3262 +
           (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
             (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                C15947 +
            (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
             C12625 * C47525) *
                C47492) *
               C47313) *
              C47547 +
          ((((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C3262 +
           (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
             (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                C15947 +
            (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
             (C11568 - C11569) * C47525) *
                C47492) *
               C47313) *
              C47537 +
          ((((C113 * C1152 - C47411 * C1158) * C31224 +
             (C113 * C1159 - C47411 * C1170) * C31222 +
             (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
                C15947 +
            ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
             (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
                C47492) *
               C3262 +
           (((C12033 - C12032) * C31224 + (C12035 - C12034) * C31222 +
             (C47411 * C6007 - C113 * C6005) * C31225 +
             (C47411 * C6011 - C113 * C6008) * C47525) *
                C15947 +
            ((C11701 - C11700) * C31224 + (C11703 - C11702) * C31222 +
             (C47411 * C6009 - C113 * C6006) * C31225 +
             (C47411 * C6012 - C113 * C6010) * C47525) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C3262 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C3262 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47541 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C3262 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C3262 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47528 +
          ((((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
              C10711 * C47525) *
                 C15947 +
             ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
              C778 * C47525) *
                 C47492) *
                C3262 +
            ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
              C10713 * C47525) *
                 C15947 +
             (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
              (C544 - C545) * C47525) *
                 C47492) *
                C47313) *
               C2500 +
           (((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
              C11179 * C47525) *
                 C15947 +
             ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
              (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                 C47492) *
                C3262 +
            ((C964 * C31224 + C965 * C31222 + (C2176 - C2175) * C31225 +
              (C2178 - C2177) * C47525) *
                 C15947 +
             ((C961 - C960) * C31224 + (C963 - C962) * C31222 +
              (C47411 * C2167 - C113 * C2166) * C31225 +
              (C47411 * C2169 - C113 * C2168) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47552 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47549 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C47540 +
           (((C12419 - C12418) * C31224 + (C12421 - C12420) * C31222 +
             (C12422 - C12423) * C31225 + (C12424 - C12425) * C47525) *
                C15947 +
            (C12764 * C31224 + C12765 * C31222 + (C12426 - C12427) * C31225 +
             (C12428 - C12429) * C47525) *
                C47492) *
               C47521) *
              C2500 +
          ((((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47552 +
           (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
             (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                C15947 +
            (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
             C12625 * C47525) *
                C47492) *
               C47549 +
           (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
             (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                C15947 +
            (C12626 * C31224 + C12627 * C31222 + (C12628 - C12629) * C31225 +
             (C12630 - C12631) * C47525) *
                C47492) *
               C47540 +
           (((C12897 - C12896) * C31224 + (C12899 - C12898) * C31222 +
             (C47411 * C6867 - C113 * C6865) * C31225 +
             (C47411 * C6871 - C113 * C6868) * C47525) *
                C15947 +
            ((C12629 - C12628) * C31224 + (C12631 - C12630) * C31222 +
             (C47411 * C6869 - C113 * C6866) * C31225 +
             (C47411 * C6872 - C113 * C6870) * C47525) *
                C47492) *
               C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C47309 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47316 +
            (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
              (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                 C15947 +
             (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
              C12763 * C47525) *
                 C47492) *
                C3770) *
               C2500 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C47309 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47316 +
            (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
              (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                 C15947 +
             (C12626 * C31224 + C12627 * C31222 + (C12628 - C12629) * C31225 +
              (C12630 - C12631) * C47525) *
                 C47492) *
                C3770) *
               C47271) *
              C47459 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C47309 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47316 +
            ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
              C12765 * C47525) *
                 C15947 +
             (C10712 * C31224 + C10713 * C31222 + (C2289 - C2290) * C31225 +
              (C2291 - C2292) * C47525) *
                 C47492) *
                C3770) *
               C2500 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C47309 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47316 +
            ((C12624 * C31224 + C12625 * C31222 + (C12629 - C12628) * C31225 +
              (C12631 - C12630) * C47525) *
                 C15947 +
             ((C2176 - C2175) * C31224 + (C2178 - C2177) * C31222 +
              (C47411 * C2397 - C113 * C2392) * C31225 +
              (C47411 * C2401 - C113 * C2398) * C47525) *
                 C47492) *
                C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C3262 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C3262 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47541 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C3262 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C2500 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C3262 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47528 +
          ((((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
              C10711 * C47525) *
                 C15947 +
             ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
              C778 * C47525) *
                 C47492) *
                C3262 +
            ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
              C10713 * C47525) *
                 C15947 +
             (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
              (C544 - C545) * C47525) *
                 C47492) *
                C47313) *
               C2500 +
           (((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
              C11179 * C47525) *
                 C15947 +
             ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
              (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                 C47492) *
                C3262 +
            ((C964 * C31224 + C965 * C31222 + (C2176 - C2175) * C31225 +
              (C2178 - C2177) * C47525) *
                 C15947 +
             ((C961 - C960) * C31224 + (C963 - C962) * C31222 +
              (C47411 * C2167 - C113 * C2166) * C31225 +
              (C47411 * C2169 - C113 * C2168) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C3262 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47313) *
              C47551 +
          ((((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C3262 +
           (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
             (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                C15947 +
            (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
             C12625 * C47525) *
                C47492) *
               C47313) *
              C47547 +
          ((((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C3262 +
           (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
             (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                C15947 +
            (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
             (C11568 - C11569) * C47525) *
                C47492) *
               C47313) *
              C47537 +
          ((((C113 * C1152 - C47411 * C1158) * C31224 +
             (C113 * C1159 - C47411 * C1170) * C31222 +
             (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
                C15947 +
            ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
             (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
                C47492) *
               C3262 +
           (((C12033 - C12032) * C31224 + (C12035 - C12034) * C31222 +
             (C47411 * C6007 - C113 * C6005) * C31225 +
             (C47411 * C6011 - C113 * C6008) * C47525) *
                C15947 +
            ((C11701 - C11700) * C31224 + (C11703 - C11702) * C31222 +
             (C47411 * C6009 - C113 * C6006) * C31225 +
             (C47411 * C6012 - C113 * C6010) * C47525) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C1420 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C1421 +
           (((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47226 * C1422 +
           (((C113 * C1152 - C47411 * C1158) * C31224 +
             (C113 * C1159 - C47411 * C1170) * C31222 +
             (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
                C15947 +
            ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
             (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
                C47492) *
               C47226 * C47515) *
              C47459 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C1420 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C1421 +
           (((C344 - C343) * C31224 + (C346 - C345) * C31222 + C11900 * C31225 +
             C11901 * C47525) *
                C15947 +
            ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
             (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                C47492) *
               C47226 * C1422 +
           (((C1432 - C1431) * C31224 + (C1434 - C1433) * C31222 +
             (C11701 - C11700) * C31225 + (C11703 - C11702) * C47525) *
                C15947 +
            ((C1436 - C1435) * C31224 + (C1438 - C1437) * C31222 +
             (C47411 * C1701 - C113 * C1696) * C31225 +
             (C47411 * C1705 - C113 * C1702) * C47525) *
                C47492) *
               C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C47473 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C47271) *
              C655 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C47473 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C47271) *
              C656 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47226 * C47473 +
           ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
             C11179 * C47525) *
                C15947 +
            ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
             (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                C47492) *
               C47226 * C47271) *
              C657 +
          (((C166 * C31224 + C167 * C31222 + C10974 * C31225 +
             C10975 * C47525) *
                C15947 +
            ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
             (C779 - C780) * C31225 + (C781 - C782) * C47525) *
                C47492) *
               C47226 * C47473 +
           ((C664 * C31224 + C665 * C31222 + (C961 - C960) * C31225 +
             (C963 - C962) * C47525) *
                C15947 +
            ((C667 - C666) * C31224 + (C669 - C668) * C31222 +
             (C47411 * C944 - C113 * C935) * C31225 +
             (C47411 * C950 - C113 * C945) * C47525) *
                C47492) *
               C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C1816 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C1817 +
            (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
              (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                 C15947 +
             (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
              C12763 * C47525) *
                 C47492) *
                C47508) *
               C47473 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C1816 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C1817 +
            (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
              (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                 C15947 +
             (C12626 * C31224 + C12627 * C31222 + (C12628 - C12629) * C31225 +
              (C12630 - C12631) * C47525) *
                 C47492) *
                C47508) *
               C47271) *
              C47459 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C1816 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C1817 +
            ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
              C12765 * C47525) *
                 C15947 +
             (C10712 * C31224 + C10713 * C31222 + (C2289 - C2290) * C31225 +
              (C2291 - C2292) * C47525) *
                 C47492) *
                C47508) *
               C47473 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C1816 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C1817 +
            ((C12624 * C31224 + C12625 * C31222 + (C12629 - C12628) * C31225 +
              (C12631 - C12630) * C47525) *
                 C15947 +
             ((C2176 - C2175) * C31224 + (C2178 - C2177) * C31222 +
              (C47411 * C2397 - C113 * C2392) * C31225 +
              (C47411 * C2401 - C113 * C2398) * C47525) *
                 C47492) *
                C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47474 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47313) *
              C1420 +
          ((((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47474 +
           (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
             (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                C15947 +
            (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
             C12625 * C47525) *
                C47492) *
               C47313) *
              C1421 +
          ((((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47474 +
           (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
             (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                C15947 +
            (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
             (C11568 - C11569) * C47525) *
                C47492) *
               C47313) *
              C1422 +
          ((((C113 * C1152 - C47411 * C1158) * C31224 +
             (C113 * C1159 - C47411 * C1170) * C31222 +
             (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
                C15947 +
            ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
             (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
                C47492) *
               C47474 +
           (((C12033 - C12032) * C31224 + (C12035 - C12034) * C31222 +
             (C47411 * C6007 - C113 * C6005) * C31225 +
             (C47411 * C6011 - C113 * C6008) * C47525) *
                C15947 +
            ((C11701 - C11700) * C31224 + (C11703 - C11702) * C31222 +
             (C47411 * C6009 - C113 * C6006) * C31225 +
             (C47411 * C6012 - C113 * C6010) * C47525) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C47474 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C47474 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C291 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C47474 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C47474 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C292 +
          ((((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
              C10711 * C47525) *
                 C15947 +
             ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
              C778 * C47525) *
                 C47492) *
                C47474 +
            ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
              C10713 * C47525) *
                 C15947 +
             (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
              (C544 - C545) * C47525) *
                 C47492) *
                C47313) *
               C47473 +
           (((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
              C11179 * C47525) *
                 C15947 +
             ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
              (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                 C47492) *
                C47474 +
            ((C964 * C31224 + C965 * C31222 + (C2176 - C2175) * C31225 +
              (C2178 - C2177) * C47525) *
                 C15947 +
             ((C961 - C960) * C31224 + (C963 - C962) * C31222 +
              (C47411 * C2167 - C113 * C2166) * C31225 +
              (C47411 * C2169 - C113 * C2168) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C2276 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C2277 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C2278 +
           (((C12419 - C12418) * C31224 + (C12421 - C12420) * C31222 +
             (C12422 - C12423) * C31225 + (C12424 - C12425) * C47525) *
                C15947 +
            (C12764 * C31224 + C12765 * C31222 + (C12426 - C12427) * C31225 +
             (C12428 - C12429) * C47525) *
                C47492) *
               C47521) *
              C47473 +
          ((((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C2276 +
           (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
             (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                C15947 +
            (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
             C12625 * C47525) *
                C47492) *
               C2277 +
           (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
             (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                C15947 +
            (C12626 * C31224 + C12627 * C31222 + (C12628 - C12629) * C31225 +
             (C12630 - C12631) * C47525) *
                C47492) *
               C2278 +
           (((C12897 - C12896) * C31224 + (C12899 - C12898) * C31222 +
             (C47411 * C6867 - C113 * C6865) * C31225 +
             (C47411 * C6871 - C113 * C6868) * C47525) *
                C15947 +
            ((C12629 - C12628) * C31224 + (C12631 - C12630) * C31222 +
             (C47411 * C6869 - C113 * C6866) * C31225 +
             (C47411 * C6872 - C113 * C6870) * C47525) *
                C47492) *
               C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C47411 * C122 - C113 * C115) * C31224 +
                (C47411 * C136 - C113 * C123) * C31222 +
                (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                   C15947 +
               ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
                C10698 * C31225 + C10699 * C47525) *
                   C47492) *
                  C47226 * C47208 * C108 +
              (((C145 - C144) * C31224 + (C147 - C146) * C31222 +
                C10704 * C31225 + C10705 * C47525) *
                   C15947 +
               ((C149 - C148) * C31224 + (C151 - C150) * C31222 +
                C546 * C31225 + C547 * C47525) *
                   C47492) *
                  C47226 * C47208 * C109 +
              ((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
                C10711 * C47525) *
                   C15947 +
               ((C153 - C152) * C31224 + (C155 - C154) * C31222 +
                C777 * C31225 + C778 * C47525) *
                   C47492) *
                  C47226 * C47208 * C110 +
              ((C166 * C31224 + C167 * C31222 + C10974 * C31225 +
                C10975 * C47525) *
                   C15947 +
               ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
                (C779 - C780) * C31225 + (C781 - C782) * C47525) *
                   C47492) *
                  C47226 * C47208 * C111 +
              ((C168 * C31224 + C169 * C31222 + (C780 - C779) * C31225 +
                (C782 - C781) * C47525) *
                   C15947 +
               ((C161 - C160) * C31224 + (C163 - C162) * C31222 +
                (C47411 * C773 - C113 * C772) * C31225 +
                (C47411 * C775 - C113 * C774) * C47525) *
                   C47492) *
                  C47226 * C47208 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C47411 * C122 - C113 * C115) * C31224 +
                 (C47411 * C136 - C113 * C123) * C31222 +
                 (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                    C15947 +
                ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
                 C10698 * C31225 + C10699 * C47525) *
                    C47492) *
                   C47226 * C47544 +
               (((C113 * C294 - C47411 * C304) * C31224 +
                 (C113 * C305 - C47411 * C324) * C31222 +
                 (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                    C15947 +
                ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
                 C11174 * C31225 + C11175 * C47525) *
                    C47492) *
                   C47226 * C47532 +
               (((C47411 * C310 - C113 * C297) * C31224 +
                 (C47411 * C327 - C113 * C311) * C31222 +
                 (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                    C15947 +
                ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
                 C11898 * C31225 + C11899 * C47525) *
                    C47492) *
                   C47226 * C47505) *
                  C291 +
              ((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
                 C10704 * C31225 + C10705 * C47525) *
                    C15947 +
                ((C149 - C148) * C31224 + (C151 - C150) * C31222 +
                 C546 * C31225 + C547 * C47525) *
                    C47492) *
                   C47226 * C47544 +
               (((C336 - C335) * C31224 + (C338 - C337) * C31222 +
                 C11176 * C31225 + C11177 * C47525) *
                    C15947 +
                ((C340 - C339) * C31224 + (C342 - C341) * C31222 +
                 C964 * C31225 + C965 * C47525) *
                    C47492) *
                   C47226 * C47532 +
               (((C344 - C343) * C31224 + (C346 - C345) * C31222 +
                 C11900 * C31225 + C11901 * C47525) *
                    C15947 +
                ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
                 (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                    C47492) *
                   C47226 * C47505) *
                  C292 +
              (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
                 C10711 * C47525) *
                    C15947 +
                ((C153 - C152) * C31224 + (C155 - C154) * C31222 +
                 C777 * C31225 + C778 * C47525) *
                    C47492) *
                   C47226 * C47544 +
               ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
                 C11179 * C47525) *
                    C15947 +
                ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
                 (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                    C47492) *
                   C47226 * C47532 +
               ((C361 * C31224 + C362 * C31222 + (C1594 - C1593) * C31225 +
                 (C1596 - C1595) * C47525) *
                    C15947 +
                ((C356 - C355) * C31224 + (C358 - C357) * C31222 +
                 (C47411 * C1585 - C113 * C1584) * C31225 +
                 (C47411 * C1587 - C113 * C1586) * C47525) *
                    C47492) *
                   C47226 * C47505) *
                  C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47545 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47534 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C47508) *
              C47208 * C291 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47545 +
           ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
             C10709 * C47525) *
                C15947 +
            (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
             C549 * C47525) *
                C47492) *
               C47534 +
           ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
             C12765 * C47525) *
                C15947 +
            (C10712 * C31224 + C10713 * C31222 + (C2289 - C2290) * C31225 +
             (C2291 - C2292) * C47525) *
                C47492) *
               C47508) *
              C47208 * C292 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47545 +
           ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
             C10713 * C47525) *
                C15947 +
            (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
             (C544 - C545) * C47525) *
                C47492) *
               C47534 +
           ((C548 * C31224 + C549 * C31222 + (C2290 - C2289) * C31225 +
             (C2292 - C2291) * C47525) *
                C15947 +
            ((C543 - C542) * C31224 + (C545 - C544) * C31222 +
             (C47411 * C2281 - C113 * C2280) * C31225 +
             (C47411 * C2283 - C113 * C2282) * C47525) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C1078 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C1079 +
           (((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C1078 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C1079 +
           (((C344 - C343) * C31224 + (C346 - C345) * C31222 + C11900 * C31225 +
             C11901 * C47525) *
                C15947 +
            ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
             (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47226 * C1078 +
           ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
             C11179 * C47525) *
                C15947 +
            ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
             (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                C47492) *
               C47226 * C1079 +
           ((C361 * C31224 + C362 * C31222 + (C1594 - C1593) * C31225 +
             (C1596 - C1595) * C47525) *
                C15947 +
            ((C356 - C355) * C31224 + (C358 - C357) * C31222 +
             (C47411 * C1585 - C113 * C1584) * C31225 +
             (C47411 * C1587 - C113 * C1586) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C31224 +
            (C47411 * C136 - C113 * C123) * C31222 +
            (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
               C15947 +
           ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
            C10699 * C47525) *
               C47492) *
              C47226 * C1146 +
          (((C113 * C294 - C47411 * C304) * C31224 +
            (C113 * C305 - C47411 * C324) * C31222 +
            (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
               C15947 +
           ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
            C11175 * C47525) *
               C47492) *
              C47226 * C1147 +
          (((C47411 * C310 - C113 * C297) * C31224 +
            (C47411 * C327 - C113 * C311) * C31222 +
            (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
               C15947 +
           ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
            C11899 * C47525) *
               C47492) *
              C47226 * C1148 +
          (((C113 * C1152 - C47411 * C1158) * C31224 +
            (C113 * C1159 - C47411 * C1170) * C31222 +
            (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
               C15947 +
           ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
            (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
               C47492) *
              C47226 * C1149 +
          (((C47411 * C1164 - C113 * C1155) * C31224 +
            (C47411 * C1173 - C113 * C1165) * C31222 +
            (C47411 * C6485 - C113 * C6483) * C31225 +
            (C47411 * C6489 - C113 * C6486) * C47525) *
               C15947 +
           ((C47411 * C1166 - C113 * C1156) * C31224 +
            (C47411 * C1174 - C113 * C1167) * C31222 +
            (C47411 * C6487 - C113 * C6484) * C31225 +
            (C47411 * C6490 - C113 * C6488) * C47525) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47545 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47534 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C47508) *
              C1078 +
          ((((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47545 +
           (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
             (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                C15947 +
            (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
             C12625 * C47525) *
                C47492) *
               C47534 +
           (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
             (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                C15947 +
            (C12626 * C31224 + C12627 * C31222 + (C12628 - C12629) * C31225 +
             (C12630 - C12631) * C47525) *
                C47492) *
               C47508) *
              C1079 +
          ((((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47545 +
           (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
             (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                C15947 +
            (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
             (C11568 - C11569) * C47525) *
                C47492) *
               C47534 +
           (((C11563 - C11562) * C31224 + (C11565 - C11564) * C31222 +
             (C47411 * C7345 - C113 * C7343) * C31225 +
             (C47411 * C7349 - C113 * C7346) * C47525) *
                C15947 +
            ((C11567 - C11566) * C31224 + (C11569 - C11568) * C31222 +
             (C47411 * C7347 - C113 * C7344) * C31225 +
             (C47411 * C7350 - C113 * C7348) * C47525) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C1816 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C1817 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C47508) *
              C47208 * C47541 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C1816 +
           ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
             C10709 * C47525) *
                C15947 +
            (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
             C549 * C47525) *
                C47492) *
               C1817 +
           ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
             C12765 * C47525) *
                C15947 +
            (C10712 * C31224 + C10713 * C31222 + (C2289 - C2290) * C31225 +
             (C2291 - C2292) * C47525) *
                C47492) *
               C47508) *
              C47208 * C47528 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C1816 +
           ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
             C10713 * C47525) *
                C15947 +
            (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
             (C544 - C545) * C47525) *
                C47492) *
               C1817 +
           ((C548 * C31224 + C549 * C31222 + (C2290 - C2289) * C31225 +
             (C2292 - C2291) * C47525) *
                C15947 +
            ((C543 - C542) * C31224 + (C545 - C544) * C31222 +
             (C47411 * C2281 - C113 * C2280) * C31225 +
             (C47411 * C2283 - C113 * C2282) * C47525) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C1816 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C1817 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C47508) *
              C47544 +
          ((((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C1816 +
           (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
             (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                C15947 +
            (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
             C12625 * C47525) *
                C47492) *
               C1817 +
           (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
             (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                C15947 +
            (C12626 * C31224 + C12627 * C31222 + (C12628 - C12629) * C31225 +
             (C12630 - C12631) * C47525) *
                C47492) *
               C47508) *
              C47532 +
          ((((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C1816 +
           (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
             (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                C15947 +
            (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
             (C11568 - C11569) * C47525) *
                C47492) *
               C1817 +
           (((C11563 - C11562) * C31224 + (C11565 - C11564) * C31222 +
             (C47411 * C7345 - C113 * C7343) * C31225 +
             (C47411 * C7349 - C113 * C7346) * C47525) *
                C15947 +
            ((C11567 - C11566) * C31224 + (C11569 - C11568) * C31222 +
             (C47411 * C7347 - C113 * C7344) * C31225 +
             (C47411 * C7350 - C113 * C7348) * C47525) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C31224 +
            (C47411 * C136 - C113 * C123) * C31222 +
            (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
               C15947 +
           ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
            C10699 * C47525) *
               C47492) *
              C1991 +
          (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
            (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
               C15947 +
           (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
            C10707 * C47525) *
               C47492) *
              C1992 +
          (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
            (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
               C15947 +
           (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
            C12763 * C47525) *
               C47492) *
              C1993 +
          (((C12419 - C12418) * C31224 + (C12421 - C12420) * C31222 +
            (C12422 - C12423) * C31225 + (C12424 - C12425) * C47525) *
               C15947 +
           (C12764 * C31224 + C12765 * C31222 + (C12426 - C12427) * C31225 +
            (C12428 - C12429) * C47525) *
               C47492) *
              C1994 +
          (((C12423 - C12422) * C31224 + (C12425 - C12424) * C31222 +
            (C47411 * C12411 - C113 * C12409) * C31225 +
            (C47411 * C12415 - C113 * C12412) * C47525) *
               C15947 +
           ((C12427 - C12426) * C31224 + (C12429 - C12428) * C31222 +
            (C47411 * C12413 - C113 * C12410) * C31225 +
            (C47411 * C12416 - C113 * C12414) * C47525) *
               C47492) *
              C1995) *
         C47208 * C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C47474 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C47474 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C47411 * C310 - C113 * C297) * C31224 +
              (C47411 * C327 - C113 * C311) * C31222 +
              (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                 C15947 +
             ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
              C11898 * C31225 + C11899 * C47525) *
                 C47492) *
                C47474 +
            (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
              (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                 C15947 +
             (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
              (C11568 - C11569) * C47525) *
                 C47492) *
                C47313) *
               C47505) *
              C47459 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C47474 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C47474 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C344 - C343) * C31224 + (C346 - C345) * C31222 +
              C11900 * C31225 + C11901 * C47525) *
                 C15947 +
             ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
              (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                 C47492) *
                C47474 +
            ((C11898 * C31224 + C11899 * C31222 + (C11567 - C11566) * C31225 +
              (C11569 - C11568) * C47525) *
                 C15947 +
             ((C1594 - C1593) * C31224 + (C1596 - C1595) * C31222 +
              (C47411 * C1311 - C113 * C1294) * C31225 +
              (C47411 * C1321 - C113 * C1312) * C47525) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47474 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47313) *
              C47208 * C655 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47474 +
           ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
             C10709 * C47525) *
                C15947 +
            (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
             C549 * C47525) *
                C47492) *
               C47313) *
              C47208 * C656 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47474 +
           ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
             C10713 * C47525) *
                C15947 +
            (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
             (C544 - C545) * C47525) *
                C47492) *
               C47313) *
              C47208 * C657 +
          (((C166 * C31224 + C167 * C31222 + C10974 * C31225 +
             C10975 * C47525) *
                C15947 +
            ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
             (C779 - C780) * C31225 + (C781 - C782) * C47525) *
                C47492) *
               C47474 +
           ((C777 * C31224 + C778 * C31222 + (C543 - C542) * C31225 +
             (C545 - C544) * C47525) *
                C15947 +
            ((C780 - C779) * C31224 + (C782 - C781) * C31222 +
             (C47411 * C509 - C113 * C490) * C31225 +
             (C47411 * C520 - C113 * C510) * C47525) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C2276 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C2277 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C2278 +
           (((C12419 - C12418) * C31224 + (C12421 - C12420) * C31222 +
             (C12422 - C12423) * C31225 + (C12424 - C12425) * C47525) *
                C15947 +
            (C12764 * C31224 + C12765 * C31222 + (C12426 - C12427) * C31225 +
             (C12428 - C12429) * C47525) *
                C47492) *
               C47521) *
              C47208 * C47459 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C2276 +
           ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
             C10709 * C47525) *
                C15947 +
            (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
             C549 * C47525) *
                C47492) *
               C2277 +
           ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
             C12765 * C47525) *
                C15947 +
            (C10712 * C31224 + C10713 * C31222 + (C2289 - C2290) * C31225 +
             (C2291 - C2292) * C47525) *
                C47492) *
               C2278 +
           ((C12762 * C31224 + C12763 * C31222 + (C12427 - C12426) * C31225 +
             (C12429 - C12428) * C47525) *
                C15947 +
            ((C2290 - C2289) * C31224 + (C2292 - C2291) * C31222 +
             (C47411 * C2012 - C113 * C2001) * C31225 +
             (C47411 * C2019 - C113 * C2013) * C47525) *
                C47492) *
               C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C47544 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C47532 +
           (((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47226 * C47505) *
              C291 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C47544 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C47532 +
           (((C344 - C343) * C31224 + (C346 - C345) * C31222 + C11900 * C31225 +
             C11901 * C47525) *
                C15947 +
            ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
             (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                C47492) *
               C47226 * C47505) *
              C292 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47226 * C47544 +
           ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
             C11179 * C47525) *
                C15947 +
            ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
             (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                C47492) *
               C47226 * C47532 +
           ((C361 * C31224 + C362 * C31222 + (C1594 - C1593) * C31225 +
             (C1596 - C1595) * C47525) *
                C15947 +
            ((C356 - C355) * C31224 + (C358 - C357) * C31222 +
             (C47411 * C1585 - C113 * C1584) * C31225 +
             (C47411 * C1587 - C113 * C1586) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C31224 +
            (C47411 * C136 - C113 * C123) * C31222 +
            (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
               C15947 +
           ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
            C10699 * C47525) *
               C47492) *
              C47226 * C47208 * C108 +
          (((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
            C10705 * C47525) *
               C15947 +
           ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
            C547 * C47525) *
               C47492) *
              C47226 * C47208 * C109 +
          ((C164 * C31224 + C165 * C31222 + C10710 * C31225 + C10711 * C47525) *
               C15947 +
           ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
            C778 * C47525) *
               C47492) *
              C47226 * C47208 * C110 +
          ((C166 * C31224 + C167 * C31222 + C10974 * C31225 + C10975 * C47525) *
               C15947 +
           ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
            (C779 - C780) * C31225 + (C781 - C782) * C47525) *
               C47492) *
              C47226 * C47208 * C111 +
          ((C168 * C31224 + C169 * C31222 + (C780 - C779) * C31225 +
            (C782 - C781) * C47525) *
               C15947 +
           ((C161 - C160) * C31224 + (C163 - C162) * C31222 +
            (C47411 * C773 - C113 * C772) * C31225 +
            (C47411 * C775 - C113 * C774) * C47525) *
               C47492) *
              C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C1078 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C1079 +
           (((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C1078 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C1079 +
           (((C344 - C343) * C31224 + (C346 - C345) * C31222 + C11900 * C31225 +
             C11901 * C47525) *
                C15947 +
            ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
             (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47226 * C1078 +
           ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
             C11179 * C47525) *
                C15947 +
            ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
             (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                C47492) *
               C47226 * C1079 +
           ((C361 * C31224 + C362 * C31222 + (C1594 - C1593) * C31225 +
             (C1596 - C1595) * C47525) *
                C15947 +
            ((C356 - C355) * C31224 + (C358 - C357) * C31222 +
             (C47411 * C1585 - C113 * C1584) * C31225 +
             (C47411 * C1587 - C113 * C1586) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C31224 +
            (C47411 * C136 - C113 * C123) * C31222 +
            (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
               C15947 +
           ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
            C10699 * C47525) *
               C47492) *
              C47226 * C1146 +
          (((C113 * C294 - C47411 * C304) * C31224 +
            (C113 * C305 - C47411 * C324) * C31222 +
            (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
               C15947 +
           ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
            C11175 * C47525) *
               C47492) *
              C47226 * C1147 +
          (((C47411 * C310 - C113 * C297) * C31224 +
            (C47411 * C327 - C113 * C311) * C31222 +
            (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
               C15947 +
           ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
            C11899 * C47525) *
               C47492) *
              C47226 * C1148 +
          (((C113 * C1152 - C47411 * C1158) * C31224 +
            (C113 * C1159 - C47411 * C1170) * C31222 +
            (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
               C15947 +
           ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
            (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
               C47492) *
              C47226 * C1149 +
          (((C47411 * C1164 - C113 * C1155) * C31224 +
            (C47411 * C1173 - C113 * C1165) * C31222 +
            (C47411 * C6485 - C113 * C6483) * C31225 +
            (C47411 * C6489 - C113 * C6486) * C47525) *
               C15947 +
           ((C47411 * C1166 - C113 * C1156) * C31224 +
            (C47411 * C1174 - C113 * C1167) * C31222 +
            (C47411 * C6487 - C113 * C6484) * C31225 +
            (C47411 * C6490 - C113 * C6488) * C47525) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C1816 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C1817 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C47508) *
              C47208 * C47541 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C1816 +
           ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
             C10709 * C47525) *
                C15947 +
            (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
             C549 * C47525) *
                C47492) *
               C1817 +
           ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
             C12765 * C47525) *
                C15947 +
            (C10712 * C31224 + C10713 * C31222 + (C2289 - C2290) * C31225 +
             (C2291 - C2292) * C47525) *
                C47492) *
               C47508) *
              C47208 * C47528 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C1816 +
           ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
             C10713 * C47525) *
                C15947 +
            (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
             (C544 - C545) * C47525) *
                C47492) *
               C1817 +
           ((C548 * C31224 + C549 * C31222 + (C2290 - C2289) * C31225 +
             (C2292 - C2291) * C47525) *
                C15947 +
            ((C543 - C542) * C31224 + (C545 - C544) * C31222 +
             (C47411 * C2281 - C113 * C2280) * C31225 +
             (C47411 * C2283 - C113 * C2282) * C47525) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C1816 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C1817 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C47508) *
              C47544 +
          ((((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C1816 +
           (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
             (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                C15947 +
            (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
             C12625 * C47525) *
                C47492) *
               C1817 +
           (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
             (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                C15947 +
            (C12626 * C31224 + C12627 * C31222 + (C12628 - C12629) * C31225 +
             (C12630 - C12631) * C47525) *
                C47492) *
               C47508) *
              C47532 +
          ((((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C1816 +
           (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
             (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                C15947 +
            (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
             (C11568 - C11569) * C47525) *
                C47492) *
               C1817 +
           (((C11563 - C11562) * C31224 + (C11565 - C11564) * C31222 +
             (C47411 * C7345 - C113 * C7343) * C31225 +
             (C47411 * C7349 - C113 * C7346) * C47525) *
                C15947 +
            ((C11567 - C11566) * C31224 + (C11569 - C11568) * C31222 +
             (C47411 * C7347 - C113 * C7344) * C31225 +
             (C47411 * C7350 - C113 * C7348) * C47525) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C3262 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C3262 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47185 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C3262 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C3262 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47194 +
          ((((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
              C10711 * C47525) *
                 C15947 +
             ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
              C778 * C47525) *
                 C47492) *
                C3262 +
            ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
              C10713 * C47525) *
                 C15947 +
             (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
              (C544 - C545) * C47525) *
                 C47492) *
                C47313) *
               C47473 +
           (((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
              C11179 * C47525) *
                 C15947 +
             ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
              (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                 C47492) *
                C3262 +
            ((C964 * C31224 + C965 * C31222 + (C2176 - C2175) * C31225 +
              (C2178 - C2177) * C47525) *
                 C15947 +
             ((C961 - C960) * C31224 + (C963 - C962) * C31222 +
              (C47411 * C2167 - C113 * C2166) * C31225 +
              (C47411 * C2169 - C113 * C2168) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C47309 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47316 +
            (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
              (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                 C15947 +
             (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
              C12763 * C47525) *
                 C47492) *
                C3770) *
               C47473 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C47309 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47316 +
            (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
              (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                 C15947 +
             (C12626 * C31224 + C12627 * C31222 + (C12628 - C12629) * C31225 +
              (C12630 - C12631) * C47525) *
                 C47492) *
                C3770) *
               C47271) *
              C2608 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C47309 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47316 +
            ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
              C12765 * C47525) *
                 C15947 +
             (C10712 * C31224 + C10713 * C31222 + (C2289 - C2290) * C31225 +
              (C2291 - C2292) * C47525) *
                 C47492) *
                C3770) *
               C47473 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C47309 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47316 +
            ((C12624 * C31224 + C12625 * C31222 + (C12629 - C12628) * C31225 +
              (C12631 - C12630) * C47525) *
                 C15947 +
             ((C2176 - C2175) * C31224 + (C2178 - C2177) * C31222 +
              (C47411 * C2397 - C113 * C2392) * C31225 +
              (C47411 * C2401 - C113 * C2398) * C47525) *
                 C47492) *
                C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C3262 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C3262 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C47411 * C310 - C113 * C297) * C31224 +
              (C47411 * C327 - C113 * C311) * C31222 +
              (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                 C15947 +
             ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
              C11898 * C31225 + C11899 * C47525) *
                 C47492) *
                C3262 +
            (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
              (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                 C15947 +
             (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
              (C11568 - C11569) * C47525) *
                 C47492) *
                C47313) *
               C47505) *
              C2608 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C3262 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C3262 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C344 - C343) * C31224 + (C346 - C345) * C31222 +
              C11900 * C31225 + C11901 * C47525) *
                 C15947 +
             ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
              (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                 C47492) *
                C3262 +
            ((C11898 * C31224 + C11899 * C31222 + (C11567 - C11566) * C31225 +
              (C11569 - C11568) * C47525) *
                 C15947 +
             ((C1594 - C1593) * C31224 + (C1596 - C1595) * C31222 +
              (C47411 * C1311 - C113 * C1294) * C31225 +
              (C47411 * C1321 - C113 * C1312) * C47525) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C3262 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47313) *
              C47208 * C47550 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C3262 +
           ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
             C10709 * C47525) *
                C15947 +
            (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
             C549 * C47525) *
                C47492) *
               C47313) *
              C47208 * C47543 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C3262 +
           ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
             C10713 * C47525) *
                C15947 +
            (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
             (C544 - C545) * C47525) *
                C47492) *
               C47313) *
              C47208 * C47530 +
          (((C166 * C31224 + C167 * C31222 + C10974 * C31225 +
             C10975 * C47525) *
                C15947 +
            ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
             (C779 - C780) * C31225 + (C781 - C782) * C47525) *
                C47492) *
               C3262 +
           ((C777 * C31224 + C778 * C31222 + (C543 - C542) * C31225 +
             (C545 - C544) * C47525) *
                C15947 +
            ((C780 - C779) * C31224 + (C782 - C781) * C31222 +
             (C47411 * C509 - C113 * C490) * C31225 +
             (C47411 * C520 - C113 * C510) * C47525) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47552 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47549 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C47540 +
           (((C12419 - C12418) * C31224 + (C12421 - C12420) * C31222 +
             (C12422 - C12423) * C31225 + (C12424 - C12425) * C47525) *
                C15947 +
            (C12764 * C31224 + C12765 * C31222 + (C12426 - C12427) * C31225 +
             (C12428 - C12429) * C47525) *
                C47492) *
               C47521) *
              C47208 * C2608 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47552 +
           ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
             C10709 * C47525) *
                C15947 +
            (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
             C549 * C47525) *
                C47492) *
               C47549 +
           ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
             C12765 * C47525) *
                C15947 +
            (C10712 * C31224 + C10713 * C31222 + (C2289 - C2290) * C31225 +
             (C2291 - C2292) * C47525) *
                C47492) *
               C47540 +
           ((C12762 * C31224 + C12763 * C31222 + (C12427 - C12426) * C31225 +
             (C12429 - C12428) * C47525) *
                C15947 +
            ((C2290 - C2289) * C31224 + (C2292 - C2291) * C31222 +
             (C47411 * C2012 - C113 * C2001) * C31225 +
             (C47411 * C2019 - C113 * C2013) * C47525) *
                C47492) *
               C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C47411 * C122 - C113 * C115) * C31224 +
                      (C47411 * C136 - C113 * C123) * C31222 +
                      (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                         C15947 +
                     ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
                      C10698 * C31225 + C10699 * C47525) *
                         C47492) *
                        C47309 +
                    (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
                      (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                         C15947 +
                     (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
                      C10707 * C47525) *
                         C47492) *
                        C47316 +
                    (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
                      (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                         C15947 +
                     (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
                      C12763 * C47525) *
                         C47492) *
                        C3770) *
                       C47208 * C47185 +
                   ((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
                      C10704 * C31225 + C10705 * C47525) *
                         C15947 +
                     ((C149 - C148) * C31224 + (C151 - C150) * C31222 +
                      C546 * C31225 + C547 * C47525) *
                         C47492) *
                        C47309 +
                    ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
                      C10709 * C47525) *
                         C15947 +
                     (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
                      C549 * C47525) *
                         C47492) *
                        C47316 +
                    ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
                      C12765 * C47525) *
                         C15947 +
                     (C10712 * C31224 + C10713 * C31222 +
                      (C2289 - C2290) * C31225 + (C2291 - C2292) * C47525) *
                         C47492) *
                        C3770) *
                       C47208 * C47194 +
                   (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
                      C10711 * C47525) *
                         C15947 +
                     ((C153 - C152) * C31224 + (C155 - C154) * C31222 +
                      C777 * C31225 + C778 * C47525) *
                         C47492) *
                        C47309 +
                    ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
                      C10713 * C47525) *
                         C15947 +
                     (C10974 * C31224 + C10975 * C31222 +
                      (C542 - C543) * C31225 + (C544 - C545) * C47525) *
                         C47492) *
                        C47316 +
                    ((C548 * C31224 + C549 * C31222 + (C2290 - C2289) * C31225 +
                      (C2292 - C2291) * C47525) *
                         C15947 +
                     ((C543 - C542) * C31224 + (C545 - C544) * C31222 +
                      (C47411 * C2281 - C113 * C2280) * C31225 +
                      (C47411 * C2283 - C113 * C2282) * C47525) *
                         C47492) *
                        C3770) *
                       C47208 * C2871)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C3262 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47313) *
              C47208 * C47550 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C3262 +
           ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
             C10709 * C47525) *
                C15947 +
            (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
             C549 * C47525) *
                C47492) *
               C47313) *
              C47208 * C47543 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C3262 +
           ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
             C10713 * C47525) *
                C15947 +
            (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
             (C544 - C545) * C47525) *
                C47492) *
               C47313) *
              C47208 * C47530 +
          (((C166 * C31224 + C167 * C31222 + C10974 * C31225 +
             C10975 * C47525) *
                C15947 +
            ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
             (C779 - C780) * C31225 + (C781 - C782) * C47525) *
                C47492) *
               C3262 +
           ((C777 * C31224 + C778 * C31222 + (C543 - C542) * C31225 +
             (C545 - C544) * C47525) *
                C15947 +
            ((C780 - C779) * C31224 + (C782 - C781) * C31222 +
             (C47411 * C509 - C113 * C490) * C31225 +
             (C47411 * C520 - C113 * C510) * C47525) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C3262 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C3262 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C47411 * C310 - C113 * C297) * C31224 +
              (C47411 * C327 - C113 * C311) * C31222 +
              (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                 C15947 +
             ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
              C11898 * C31225 + C11899 * C47525) *
                 C47492) *
                C3262 +
            (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
              (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                 C15947 +
             (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
              (C11568 - C11569) * C47525) *
                 C47492) *
                C47313) *
               C47505) *
              C2608 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C3262 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C47544 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C3262 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C47532 +
           ((((C344 - C343) * C31224 + (C346 - C345) * C31222 +
              C11900 * C31225 + C11901 * C47525) *
                 C15947 +
             ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
              (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                 C47492) *
                C3262 +
            ((C11898 * C31224 + C11899 * C31222 + (C11567 - C11566) * C31225 +
              (C11569 - C11568) * C47525) *
                 C15947 +
             ((C1594 - C1593) * C31224 + (C1596 - C1595) * C31222 +
              (C47411 * C1311 - C113 * C1294) * C31225 +
              (C47411 * C1321 - C113 * C1312) * C47525) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47411 * C122 - C113 * C115) * C31224 +
                      (C47411 * C136 - C113 * C123) * C31222 +
                      (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                         C15947 +
                     ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
                      C10698 * C31225 + C10699 * C47525) *
                         C47492) *
                        C47226 * C47473 +
                    (((C113 * C294 - C47411 * C304) * C31224 +
                      (C113 * C305 - C47411 * C324) * C31222 +
                      (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                         C15947 +
                     ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
                      C11174 * C31225 + C11175 * C47525) *
                         C47492) *
                        C47226 * C47271) *
                       C655 +
                   ((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
                      C10704 * C31225 + C10705 * C47525) *
                         C15947 +
                     ((C149 - C148) * C31224 + (C151 - C150) * C31222 +
                      C546 * C31225 + C547 * C47525) *
                         C47492) *
                        C47226 * C47473 +
                    (((C336 - C335) * C31224 + (C338 - C337) * C31222 +
                      C11176 * C31225 + C11177 * C47525) *
                         C15947 +
                     ((C340 - C339) * C31224 + (C342 - C341) * C31222 +
                      C964 * C31225 + C965 * C47525) *
                         C47492) *
                        C47226 * C47271) *
                       C656 +
                   (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
                      C10711 * C47525) *
                         C15947 +
                     ((C153 - C152) * C31224 + (C155 - C154) * C31222 +
                      C777 * C31225 + C778 * C47525) *
                         C47492) *
                        C47226 * C47473 +
                    ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
                      C11179 * C47525) *
                         C15947 +
                     ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
                      (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                         C47492) *
                        C47226 * C47271) *
                       C657 +
                   (((C166 * C31224 + C167 * C31222 + C10974 * C31225 +
                      C10975 * C47525) *
                         C15947 +
                     ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
                      (C779 - C780) * C31225 + (C781 - C782) * C47525) *
                         C47492) *
                        C47226 * C47473 +
                    ((C664 * C31224 + C665 * C31222 + (C961 - C960) * C31225 +
                      (C963 - C962) * C47525) *
                         C15947 +
                     ((C667 - C666) * C31224 + (C669 - C668) * C31222 +
                      (C47411 * C944 - C113 * C935) * C31225 +
                      (C47411 * C950 - C113 * C945) * C47525) *
                         C47492) *
                        C47226 * C47271) *
                       C47509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C47411 * C122 - C113 * C115) * C31224 +
                      (C47411 * C136 - C113 * C123) * C31222 +
                      (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                         C15947 +
                     ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
                      C10698 * C31225 + C10699 * C47525) *
                         C47492) *
                        C47226 * C1420 +
                    (((C113 * C294 - C47411 * C304) * C31224 +
                      (C113 * C305 - C47411 * C324) * C31222 +
                      (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                         C15947 +
                     ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
                      C11174 * C31225 + C11175 * C47525) *
                         C47492) *
                        C47226 * C1421 +
                    (((C47411 * C310 - C113 * C297) * C31224 +
                      (C47411 * C327 - C113 * C311) * C31222 +
                      (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                         C15947 +
                     ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
                      C11898 * C31225 + C11899 * C47525) *
                         C47492) *
                        C47226 * C1422 +
                    (((C113 * C1152 - C47411 * C1158) * C31224 +
                      (C113 * C1159 - C47411 * C1170) * C31222 +
                      (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
                         C15947 +
                     ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
                      (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
                         C47492) *
                        C47226 * C47515) *
                       C47459 +
                   ((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
                      C10704 * C31225 + C10705 * C47525) *
                         C15947 +
                     ((C149 - C148) * C31224 + (C151 - C150) * C31222 +
                      C546 * C31225 + C547 * C47525) *
                         C47492) *
                        C47226 * C1420 +
                    (((C336 - C335) * C31224 + (C338 - C337) * C31222 +
                      C11176 * C31225 + C11177 * C47525) *
                         C15947 +
                     ((C340 - C339) * C31224 + (C342 - C341) * C31222 +
                      C964 * C31225 + C965 * C47525) *
                         C47492) *
                        C47226 * C1421 +
                    (((C344 - C343) * C31224 + (C346 - C345) * C31222 +
                      C11900 * C31225 + C11901 * C47525) *
                         C15947 +
                     ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
                      (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                         C47492) *
                        C47226 * C1422 +
                    (((C1432 - C1431) * C31224 + (C1434 - C1433) * C31222 +
                      (C11701 - C11700) * C31225 + (C11703 - C11702) * C47525) *
                         C15947 +
                     ((C1436 - C1435) * C31224 + (C1438 - C1437) * C31222 +
                      (C47411 * C1701 - C113 * C1696) * C31225 +
                      (C47411 * C1705 - C113 * C1702) * C47525) *
                         C47492) *
                        C47226 * C47515) *
                       C47191)) /
                     (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C47474 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C47474 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C291 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C47474 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C47473 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C47474 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C292 +
          ((((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
              C10711 * C47525) *
                 C15947 +
             ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
              C778 * C47525) *
                 C47492) *
                C47474 +
            ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
              C10713 * C47525) *
                 C15947 +
             (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
              (C544 - C545) * C47525) *
                 C47492) *
                C47313) *
               C47473 +
           (((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
              C11179 * C47525) *
                 C15947 +
             ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
              (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                 C47492) *
                C47474 +
            ((C964 * C31224 + C965 * C31222 + (C2176 - C2175) * C31225 +
              (C2178 - C2177) * C47525) *
                 C15947 +
             ((C961 - C960) * C31224 + (C963 - C962) * C31222 +
              (C47411 * C2167 - C113 * C2166) * C31225 +
              (C47411 * C2169 - C113 * C2168) * C47525) *
                 C47492) *
                C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47474 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47313) *
              C1420 +
          ((((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47474 +
           (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
             (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                C15947 +
            (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
             C12625 * C47525) *
                C47492) *
               C47313) *
              C1421 +
          ((((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47474 +
           (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
             (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                C15947 +
            (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
             (C11568 - C11569) * C47525) *
                C47492) *
               C47313) *
              C1422 +
          ((((C113 * C1152 - C47411 * C1158) * C31224 +
             (C113 * C1159 - C47411 * C1170) * C31222 +
             (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
                C15947 +
            ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
             (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
                C47492) *
               C47474 +
           (((C12033 - C12032) * C31224 + (C12035 - C12034) * C31222 +
             (C47411 * C6007 - C113 * C6005) * C31225 +
             (C47411 * C6011 - C113 * C6008) * C47525) *
                C15947 +
            ((C11701 - C11700) * C31224 + (C11703 - C11702) * C31222 +
             (C47411 * C6009 - C113 * C6006) * C31225 +
             (C47411 * C6012 - C113 * C6010) * C47525) *
                C47492) *
               C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C47544 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C47532 +
           (((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47226 * C47505) *
              C291 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C47544 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C47532 +
           (((C344 - C343) * C31224 + (C346 - C345) * C31222 + C11900 * C31225 +
             C11901 * C47525) *
                C15947 +
            ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
             (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                C47492) *
               C47226 * C47505) *
              C292 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47226 * C47544 +
           ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
             C11179 * C47525) *
                C15947 +
            ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
             (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                C47492) *
               C47226 * C47532 +
           ((C361 * C31224 + C362 * C31222 + (C1594 - C1593) * C31225 +
             (C1596 - C1595) * C47525) *
                C15947 +
            ((C356 - C355) * C31224 + (C358 - C357) * C31222 +
             (C47411 * C1585 - C113 * C1584) * C31225 +
             (C47411 * C1587 - C113 * C1586) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C31224 +
            (C47411 * C136 - C113 * C123) * C31222 +
            (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
               C15947 +
           ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
            C10699 * C47525) *
               C47492) *
              C47226 * C47208 * C108 +
          (((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
            C10705 * C47525) *
               C15947 +
           ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
            C547 * C47525) *
               C47492) *
              C47226 * C47208 * C109 +
          ((C164 * C31224 + C165 * C31222 + C10710 * C31225 + C10711 * C47525) *
               C15947 +
           ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
            C778 * C47525) *
               C47492) *
              C47226 * C47208 * C110 +
          ((C166 * C31224 + C167 * C31222 + C10974 * C31225 + C10975 * C47525) *
               C15947 +
           ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
            (C779 - C780) * C31225 + (C781 - C782) * C47525) *
               C47492) *
              C47226 * C47208 * C111 +
          ((C168 * C31224 + C169 * C31222 + (C780 - C779) * C31225 +
            (C782 - C781) * C47525) *
               C15947 +
           ((C161 - C160) * C31224 + (C163 - C162) * C31222 +
            (C47411 * C773 - C113 * C772) * C31225 +
            (C47411 * C775 - C113 * C774) * C47525) *
               C47492) *
              C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47545 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47534 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C47508) *
              C47208 * C291 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47545 +
           ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
             C10709 * C47525) *
                C15947 +
            (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
             C549 * C47525) *
                C47492) *
               C47534 +
           ((C10706 * C31224 + C10707 * C31222 + C12764 * C31225 +
             C12765 * C47525) *
                C15947 +
            (C10712 * C31224 + C10713 * C31222 + (C2289 - C2290) * C31225 +
             (C2291 - C2292) * C47525) *
                C47492) *
               C47508) *
              C47208 * C292 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47545 +
           ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
             C10713 * C47525) *
                C15947 +
            (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
             (C544 - C545) * C47525) *
                C47492) *
               C47534 +
           ((C548 * C31224 + C549 * C31222 + (C2290 - C2289) * C31225 +
             (C2292 - C2291) * C47525) *
                C15947 +
            ((C543 - C542) * C31224 + (C545 - C544) * C31222 +
             (C47411 * C2281 - C113 * C2280) * C31225 +
             (C47411 * C2283 - C113 * C2282) * C47525) *
                C47492) *
               C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C1078 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C1079 +
           (((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C1078 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C1079 +
           (((C344 - C343) * C31224 + (C346 - C345) * C31222 + C11900 * C31225 +
             C11901 * C47525) *
                C15947 +
            ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
             (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47226 * C1078 +
           ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
             C11179 * C47525) *
                C15947 +
            ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
             (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                C47492) *
               C47226 * C1079 +
           ((C361 * C31224 + C362 * C31222 + (C1594 - C1593) * C31225 +
             (C1596 - C1595) * C47525) *
                C15947 +
            ((C356 - C355) * C31224 + (C358 - C357) * C31222 +
             (C47411 * C1585 - C113 * C1584) * C31225 +
             (C47411 * C1587 - C113 * C1586) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C31224 +
            (C47411 * C136 - C113 * C123) * C31222 +
            (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
               C15947 +
           ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
            C10699 * C47525) *
               C47492) *
              C47226 * C1146 +
          (((C113 * C294 - C47411 * C304) * C31224 +
            (C113 * C305 - C47411 * C324) * C31222 +
            (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
               C15947 +
           ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
            C11175 * C47525) *
               C47492) *
              C47226 * C1147 +
          (((C47411 * C310 - C113 * C297) * C31224 +
            (C47411 * C327 - C113 * C311) * C31222 +
            (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
               C15947 +
           ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
            C11899 * C47525) *
               C47492) *
              C47226 * C1148 +
          (((C113 * C1152 - C47411 * C1158) * C31224 +
            (C113 * C1159 - C47411 * C1170) * C31222 +
            (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
               C15947 +
           ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
            (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
               C47492) *
              C47226 * C1149 +
          (((C47411 * C1164 - C113 * C1155) * C31224 +
            (C47411 * C1173 - C113 * C1165) * C31222 +
            (C47411 * C6485 - C113 * C6483) * C31225 +
            (C47411 * C6489 - C113 * C6486) * C47525) *
               C15947 +
           ((C47411 * C1166 - C113 * C1156) * C31224 +
            (C47411 * C1174 - C113 * C1167) * C31222 +
            (C47411 * C6487 - C113 * C6484) * C31225 +
            (C47411 * C6490 - C113 * C6488) * C47525) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47545 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47534 +
           (((C10701 - C10700) * C31224 + (C10703 - C10702) * C31222 +
             (C12418 - C12419) * C31225 + (C12420 - C12421) * C47525) *
                C15947 +
            (C10708 * C31224 + C10709 * C31222 + C12762 * C31225 +
             C12763 * C47525) *
                C47492) *
               C47508) *
              C1078 +
          ((((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47545 +
           (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
             (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                C15947 +
            (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
             C12625 * C47525) *
                C47492) *
               C47534 +
           (((C11555 - C11554) * C31224 + (C11557 - C11556) * C31222 +
             (C12896 - C12897) * C31225 + (C12898 - C12899) * C47525) *
                C15947 +
            (C12626 * C31224 + C12627 * C31222 + (C12628 - C12629) * C31225 +
             (C12630 - C12631) * C47525) *
                C47492) *
               C47508) *
              C1079 +
          ((((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47545 +
           (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
             (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                C15947 +
            (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
             (C11568 - C11569) * C47525) *
                C47492) *
               C47534 +
           (((C11563 - C11562) * C31224 + (C11565 - C11564) * C31222 +
             (C47411 * C7345 - C113 * C7343) * C31225 +
             (C47411 * C7349 - C113 * C7346) * C47525) *
                C15947 +
            ((C11567 - C11566) * C31224 + (C11569 - C11568) * C31222 +
             (C47411 * C7347 - C113 * C7344) * C31225 +
             (C47411 * C7350 - C113 * C7348) * C47525) *
                C47492) *
               C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47474 +
           (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
             (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                C15947 +
            (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
             C10707 * C47525) *
                C47492) *
               C47313) *
              C47208 * C655 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47474 +
           ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
             C10709 * C47525) *
                C15947 +
            (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
             C549 * C47525) *
                C47492) *
               C47313) *
              C47208 * C656 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47474 +
           ((C546 * C31224 + C547 * C31222 + C10712 * C31225 +
             C10713 * C47525) *
                C15947 +
            (C10974 * C31224 + C10975 * C31222 + (C542 - C543) * C31225 +
             (C544 - C545) * C47525) *
                C47492) *
               C47313) *
              C47208 * C657 +
          (((C166 * C31224 + C167 * C31222 + C10974 * C31225 +
             C10975 * C47525) *
                C15947 +
            ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
             (C779 - C780) * C31225 + (C781 - C782) * C47525) *
                C47492) *
               C47474 +
           ((C777 * C31224 + C778 * C31222 + (C543 - C542) * C31225 +
             (C545 - C544) * C47525) *
                C15947 +
            ((C780 - C779) * C31224 + (C782 - C781) * C31222 +
             (C47411 * C509 - C113 * C490) * C31225 +
             (C47411 * C520 - C113 * C510) * C47525) *
                C47492) *
               C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C47411 * C122 - C113 * C115) * C31224 +
              (C47411 * C136 - C113 * C123) * C31222 +
              (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                 C15947 +
             ((C144 - C145) * C31224 + (C146 - C147) * C31222 +
              C10698 * C31225 + C10699 * C47525) *
                 C47492) *
                C47474 +
            (((C10695 - C10694) * C31224 + (C10697 - C10696) * C31222 +
              (C10700 - C10701) * C31225 + (C10702 - C10703) * C47525) *
                 C15947 +
             (C10704 * C31224 + C10705 * C31222 + C10706 * C31225 +
              C10707 * C47525) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C113 * C294 - C47411 * C304) * C31224 +
              (C113 * C305 - C47411 * C324) * C31222 +
              (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                 C15947 +
             ((C335 - C336) * C31224 + (C337 - C338) * C31222 +
              C11174 * C31225 + C11175 * C47525) *
                 C47492) *
                C47474 +
            (((C11171 - C11170) * C31224 + (C11173 - C11172) * C31222 +
              (C11554 - C11555) * C31225 + (C11556 - C11557) * C47525) *
                 C15947 +
             (C11176 * C31224 + C11177 * C31222 + C12624 * C31225 +
              C12625 * C47525) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C47411 * C310 - C113 * C297) * C31224 +
              (C47411 * C327 - C113 * C311) * C31222 +
              (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                 C15947 +
             ((C343 - C344) * C31224 + (C345 - C346) * C31222 +
              C11898 * C31225 + C11899 * C47525) *
                 C47492) *
                C47474 +
            (((C11559 - C11558) * C31224 + (C11561 - C11560) * C31222 +
              (C11562 - C11563) * C31225 + (C11564 - C11565) * C47525) *
                 C15947 +
             (C11900 * C31224 + C11901 * C31222 + (C11566 - C11567) * C31225 +
              (C11568 - C11569) * C47525) *
                 C47492) *
                C47313) *
               C47505) *
              C47459 +
          (((((C145 - C144) * C31224 + (C147 - C146) * C31222 +
              C10704 * C31225 + C10705 * C47525) *
                 C15947 +
             ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
              C547 * C47525) *
                 C47492) *
                C47474 +
            ((C10698 * C31224 + C10699 * C31222 + C10708 * C31225 +
              C10709 * C47525) *
                 C15947 +
             (C10710 * C31224 + C10711 * C31222 + C548 * C31225 +
              C549 * C47525) *
                 C47492) *
                C47313) *
               C1078 +
           ((((C336 - C335) * C31224 + (C338 - C337) * C31222 +
              C11176 * C31225 + C11177 * C47525) *
                 C15947 +
             ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
              C965 * C47525) *
                 C47492) *
                C47474 +
            ((C11174 * C31224 + C11175 * C31222 + C12626 * C31225 +
              C12627 * C47525) *
                 C15947 +
             (C11178 * C31224 + C11179 * C31222 + (C2175 - C2176) * C31225 +
              (C2177 - C2178) * C47525) *
                 C47492) *
                C47313) *
               C1079 +
           ((((C344 - C343) * C31224 + (C346 - C345) * C31222 +
              C11900 * C31225 + C11901 * C47525) *
                 C15947 +
             ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
              (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                 C47492) *
                C47474 +
            ((C11898 * C31224 + C11899 * C31222 + (C11567 - C11566) * C31225 +
              (C11569 - C11568) * C47525) *
                 C15947 +
             ((C1594 - C1593) * C31224 + (C1596 - C1595) * C31222 +
              (C47411 * C1311 - C113 * C1294) * C31225 +
              (C47411 * C1321 - C113 * C1312) * C47525) *
                 C47492) *
                C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C31224 +
            (C47411 * C136 - C113 * C123) * C31222 +
            (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
               C15947 +
           ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
            C10699 * C47525) *
               C47492) *
              C47226 * C47208 * C108 +
          (((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
            C10705 * C47525) *
               C15947 +
           ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
            C547 * C47525) *
               C47492) *
              C47226 * C47208 * C109 +
          ((C164 * C31224 + C165 * C31222 + C10710 * C31225 + C10711 * C47525) *
               C15947 +
           ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
            C778 * C47525) *
               C47492) *
              C47226 * C47208 * C110 +
          ((C166 * C31224 + C167 * C31222 + C10974 * C31225 + C10975 * C47525) *
               C15947 +
           ((C157 - C156) * C31224 + (C159 - C158) * C31222 +
            (C779 - C780) * C31225 + (C781 - C782) * C47525) *
               C47492) *
              C47226 * C47208 * C111 +
          ((C168 * C31224 + C169 * C31222 + (C780 - C779) * C31225 +
            (C782 - C781) * C47525) *
               C15947 +
           ((C161 - C160) * C31224 + (C163 - C162) * C31222 +
            (C47411 * C773 - C113 * C772) * C31225 +
            (C47411 * C775 - C113 * C774) * C47525) *
               C47492) *
              C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C47544 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C47532 +
           (((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47226 * C47505) *
              C291 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C47544 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C47532 +
           (((C344 - C343) * C31224 + (C346 - C345) * C31222 + C11900 * C31225 +
             C11901 * C47525) *
                C15947 +
            ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
             (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                C47492) *
               C47226 * C47505) *
              C292 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47226 * C47544 +
           ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
             C11179 * C47525) *
                C15947 +
            ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
             (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                C47492) *
               C47226 * C47532 +
           ((C361 * C31224 + C362 * C31222 + (C1594 - C1593) * C31225 +
             (C1596 - C1595) * C47525) *
                C15947 +
            ((C356 - C355) * C31224 + (C358 - C357) * C31222 +
             (C47411 * C1585 - C113 * C1584) * C31225 +
             (C47411 * C1587 - C113 * C1586) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C31224 +
             (C47411 * C136 - C113 * C123) * C31222 +
             (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
                C15947 +
            ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
             C10699 * C47525) *
                C47492) *
               C47226 * C1078 +
           (((C113 * C294 - C47411 * C304) * C31224 +
             (C113 * C305 - C47411 * C324) * C31222 +
             (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
                C15947 +
            ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
             C11175 * C47525) *
                C47492) *
               C47226 * C1079 +
           (((C47411 * C310 - C113 * C297) * C31224 +
             (C47411 * C327 - C113 * C311) * C31222 +
             (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
                C15947 +
            ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
             C11899 * C47525) *
                C47492) *
               C47226 * C47505) *
              C47541 +
          ((((C145 - C144) * C31224 + (C147 - C146) * C31222 + C10704 * C31225 +
             C10705 * C47525) *
                C15947 +
            ((C149 - C148) * C31224 + (C151 - C150) * C31222 + C546 * C31225 +
             C547 * C47525) *
                C47492) *
               C47226 * C1078 +
           (((C336 - C335) * C31224 + (C338 - C337) * C31222 + C11176 * C31225 +
             C11177 * C47525) *
                C15947 +
            ((C340 - C339) * C31224 + (C342 - C341) * C31222 + C964 * C31225 +
             C965 * C47525) *
                C47492) *
               C47226 * C1079 +
           (((C344 - C343) * C31224 + (C346 - C345) * C31222 + C11900 * C31225 +
             C11901 * C47525) *
                C15947 +
            ((C348 - C347) * C31224 + (C350 - C349) * C31222 +
             (C1593 - C1594) * C31225 + (C1595 - C1596) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47528 +
          (((C164 * C31224 + C165 * C31222 + C10710 * C31225 +
             C10711 * C47525) *
                C15947 +
            ((C153 - C152) * C31224 + (C155 - C154) * C31222 + C777 * C31225 +
             C778 * C47525) *
                C47492) *
               C47226 * C1078 +
           ((C359 * C31224 + C360 * C31222 + C11178 * C31225 +
             C11179 * C47525) *
                C15947 +
            ((C352 - C351) * C31224 + (C354 - C353) * C31222 +
             (C960 - C961) * C31225 + (C962 - C963) * C47525) *
                C47492) *
               C47226 * C1079 +
           ((C361 * C31224 + C362 * C31222 + (C1594 - C1593) * C31225 +
             (C1596 - C1595) * C47525) *
                C15947 +
            ((C356 - C355) * C31224 + (C358 - C357) * C31222 +
             (C47411 * C1585 - C113 * C1584) * C31225 +
             (C47411 * C1587 - C113 * C1586) * C47525) *
                C47492) *
               C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C31224 +
            (C47411 * C136 - C113 * C123) * C31222 +
            (C10694 - C10695) * C31225 + (C10696 - C10697) * C47525) *
               C15947 +
           ((C144 - C145) * C31224 + (C146 - C147) * C31222 + C10698 * C31225 +
            C10699 * C47525) *
               C47492) *
              C47226 * C1146 +
          (((C113 * C294 - C47411 * C304) * C31224 +
            (C113 * C305 - C47411 * C324) * C31222 +
            (C11170 - C11171) * C31225 + (C11172 - C11173) * C47525) *
               C15947 +
           ((C335 - C336) * C31224 + (C337 - C338) * C31222 + C11174 * C31225 +
            C11175 * C47525) *
               C47492) *
              C47226 * C1147 +
          (((C47411 * C310 - C113 * C297) * C31224 +
            (C47411 * C327 - C113 * C311) * C31222 +
            (C11558 - C11559) * C31225 + (C11560 - C11561) * C47525) *
               C15947 +
           ((C343 - C344) * C31224 + (C345 - C346) * C31222 + C11898 * C31225 +
            C11899 * C47525) *
               C47492) *
              C47226 * C1148 +
          (((C113 * C1152 - C47411 * C1158) * C31224 +
            (C113 * C1159 - C47411 * C1170) * C31222 +
            (C12032 - C12033) * C31225 + (C12034 - C12035) * C47525) *
               C15947 +
           ((C1431 - C1432) * C31224 + (C1433 - C1434) * C31222 +
            (C11700 - C11701) * C31225 + (C11702 - C11703) * C47525) *
               C47492) *
              C47226 * C1149 +
          (((C47411 * C1164 - C113 * C1155) * C31224 +
            (C47411 * C1173 - C113 * C1165) * C31222 +
            (C47411 * C6485 - C113 * C6483) * C31225 +
            (C47411 * C6489 - C113 * C6486) * C47525) *
               C15947 +
           ((C47411 * C1166 - C113 * C1156) * C31224 +
            (C47411 * C1174 - C113 * C1167) * C31222 +
            (C47411 * C6487 - C113 * C6484) * C31225 +
            (C47411 * C6490 - C113 * C6488) * C47525) *
               C47492) *
              C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C47267 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C47274 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C47226 * C2868) *
              C47185 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C47267 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C47274 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C2868) *
              C47194 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C47267 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C47274 +
           ((C4953 - C4952 + C4955 - C4954) * C31224 +
            (C4957 - C4956 + C4959 - C4958) * C31222 +
            (C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                C31225 +
            (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                C47525) *
               C47157 * C47226 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C47474 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C47267 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C47474 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47313) *
               C47274 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C31224 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C31222 +
             (C37827 - C37828 + C37829 - C37830) * C31225 +
             (C37831 - C37832 + C37833 - C37834) * C47525) *
                C47157 * C47474 +
            ((C37828 - C37827 + C37830 - C37829) * C31224 +
             (C37832 - C37831 + C37834 - C37833) * C31222 +
             (C37835 - C37836 + C37837 - C37838) * C31225 +
             (C37839 - C37840 + C37841 - C37842) * C47525) *
                C47157 * C47313) *
               C2868) *
              C2608 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C47474 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C47267 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C47474 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C47274 +
           (((C4937 - C4936 + C4939 - C4938) * C31224 +
             (C4941 - C4940 + C4943 - C4942) * C31222 +
             (C6346 - C6347 + C6348 - C6349) * C31225 +
             (C6350 - C6351 + C6352 - C6353) * C47525) *
                C47157 * C47474 +
            ((C6347 - C6346 + C6349 - C6348) * C31224 +
             (C6351 - C6350 + C6353 - C6352) * C31222 +
             (C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C31225 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C47551 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C47547 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C47226 * C47537 +
           ((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C31224 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C31222 +
            (C38297 - C38298 + C38299 - C38300) * C31225 +
            (C38301 - C38302 + C38303 - C38304) * C47525) *
               C47157 * C47226 * C47515) *
              C2608 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C47551 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C47547 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C47537 +
           ((C6145 - C6144 + C6147 - C6146) * C31224 +
            (C6149 - C6148 + C6151 - C6150) * C31222 +
            (C4743 * C1699 - C4747 * C1695 + C47523 * C6487 - C4748 * C6484) *
                C31225 +
            (C4743 * C1704 - C4747 * C1700 + C47523 * C6490 - C4748 * C6488) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C2500 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C47271) *
              C47550 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C2500 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C47271) *
              C47543 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C2500 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C47271) *
              C47530 +
          (((C4767 - C4766 + C4769 - C4768) * C31224 +
            (C4771 - C4770 + C4773 - C4772) * C31222 +
            (C5406 - C5407 + C5408 - C5409) * C31225 +
            (C5410 - C5411 + C5412 - C5413) * C47525) *
               C47157 * C47226 * C2500 +
           ((C5269 - C5268 + C5271 - C5270) * C31224 +
            (C5273 - C5272 + C5275 - C5274) * C31222 +
            (C4743 * C942 - C4747 * C934 + C47523 * C1585 - C4748 * C1584) *
                C31225 +
            (C4743 * C949 - C4747 * C943 + C47523 * C1587 - C4748 * C1586) *
                C47525) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C47545 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47534 +
            ((C36976 - C36975 + C36978 - C36977) * C31224 +
             (C36980 - C36979 + C36982 - C36981) * C31222 +
             (C38679 - C38680 + C38681 - C38682) * C31225 +
             (C38683 - C38684 + C38685 - C38686) * C47525) *
                C47157 * C47508) *
               C2500 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C47545 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47534 +
            ((C37820 - C37819 + C37822 - C37821) * C31224 +
             (C37824 - C37823 + C37826 - C37825) * C31222 +
             (C39149 - C39150 + C39151 - C39152) * C31225 +
             (C39153 - C39154 + C39155 - C39156) * C47525) *
                C47157 * C47508) *
               C47271) *
              C2608 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C47545 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47534 +
            ((C5115 - C5114 + C5117 - C5116) * C31224 +
             (C5119 - C5118 + C5121 - C5120) * C31222 +
             (C7206 - C7207 + C7208 - C7209) * C31225 +
             (C7210 - C7211 + C7212 - C7213) * C47525) *
                C47157 * C47508) *
               C2500 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C47545 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47534 +
            ((C7069 - C7068 + C7071 - C7070) * C31224 +
             (C7073 - C7072 + C7075 - C7074) * C31222 +
             (C4743 * C2395 - C4747 * C2391 + C47523 * C7347 - C4748 * C7344) *
                 C31225 +
             (C4743 * C2400 - C4747 * C2396 + C47523 * C7350 - C4748 * C7348) *
                 C47525) *
                C47157 * C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C47474 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C47474 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47185 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C47474 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C47474 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47194 +
          ((((C4759 - C4758 + C4761 - C4760) * C31224 +
             (C4763 - C4762 + C4765 - C4764) * C31222 +
             (C5122 - C5123 + C5124 - C5125) * C31225 +
             (C5126 - C5127 + C5128 - C5129) * C47525) *
                C47157 * C47474 +
            ((C5123 - C5122 + C5125 - C5124) * C31224 +
             (C5127 - C5126 + C5129 - C5128) * C31222 +
             (C5130 - C5131 + C5132 - C5133) * C31225 +
             (C5134 - C5135 + C5136 - C5137) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C4945 - C4944 + C4947 - C4946) * C31224 +
             (C4949 - C4948 + C4951 - C4950) * C31222 +
             (C5616 - C5617 + C5618 - C5619) * C31225 +
             (C5620 - C5621 + C5622 - C5623) * C47525) *
                C47157 * C47474 +
            ((C5617 - C5616 + C5619 - C5618) * C31224 +
             (C5621 - C5620 + C5623 - C5622) * C31222 +
             (C4743 * C1299 - C4747 * C1288 + C47523 * C1311 - C4748 * C1294) *
                 C31225 +
             (C4743 * C1315 - C4747 * C1300 + C47523 * C1321 - C4748 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C2500 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C47271) *
              C47550 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C2500 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C47271) *
              C47543 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C2500 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C47271) *
              C47530 +
          (((C4767 - C4766 + C4769 - C4768) * C31224 +
            (C4771 - C4770 + C4773 - C4772) * C31222 +
            (C5406 - C5407 + C5408 - C5409) * C31225 +
            (C5410 - C5411 + C5412 - C5413) * C47525) *
               C47157 * C47226 * C2500 +
           ((C5269 - C5268 + C5271 - C5270) * C31224 +
            (C5273 - C5272 + C5275 - C5274) * C31222 +
            (C4743 * C942 - C4747 * C934 + C47523 * C1585 - C4748 * C1584) *
                C31225 +
            (C4743 * C949 - C4747 * C943 + C47523 * C1587 - C4748 * C1586) *
                C47525) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C47551 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C47547 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C47226 * C47537 +
           ((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C31224 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C31222 +
            (C38297 - C38298 + C38299 - C38300) * C31225 +
            (C38301 - C38302 + C38303 - C38304) * C47525) *
               C47157 * C47226 * C47515) *
              C2608 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C47551 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C47547 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C47537 +
           ((C6145 - C6144 + C6147 - C6146) * C31224 +
            (C6149 - C6148 + C6151 - C6150) * C31222 +
            (C4743 * C1699 - C4747 * C1695 + C47523 * C6487 - C4748 * C6484) *
                C31225 +
            (C4743 * C1704 - C4747 * C1700 + C47523 * C6490 - C4748 * C6488) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C3262 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C47267 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C3262 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47313) *
               C47274 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C31224 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C31222 +
             (C37827 - C37828 + C37829 - C37830) * C31225 +
             (C37831 - C37832 + C37833 - C37834) * C47525) *
                C47157 * C3262 +
            ((C37828 - C37827 + C37830 - C37829) * C31224 +
             (C37832 - C37831 + C37834 - C37833) * C31222 +
             (C37835 - C37836 + C37837 - C37838) * C31225 +
             (C37839 - C37840 + C37841 - C37842) * C47525) *
                C47157 * C47313) *
               C2868) *
              C47459 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C3262 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C47267 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C3262 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C47274 +
           (((C4937 - C4936 + C4939 - C4938) * C31224 +
             (C4941 - C4940 + C4943 - C4942) * C31222 +
             (C6346 - C6347 + C6348 - C6349) * C31225 +
             (C6350 - C6351 + C6352 - C6353) * C47525) *
                C47157 * C3262 +
            ((C6347 - C6346 + C6349 - C6348) * C31224 +
             (C6351 - C6350 + C6353 - C6352) * C31222 +
             (C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C31225 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47309 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47316 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C38679 - C38680 + C38681 - C38682) * C31225 +
            (C38683 - C38684 + C38685 - C38686) * C47525) *
               C47157 * C3770) *
              C47267 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47309 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C47316 +
           ((C37820 - C37819 + C37822 - C37821) * C31224 +
            (C37824 - C37823 + C37826 - C37825) * C31222 +
            (C39149 - C39150 + C39151 - C39152) * C31225 +
            (C39153 - C39154 + C39155 - C39156) * C47525) *
               C47157 * C3770) *
              C47274 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C47309 +
           ((C37828 - C37827 + C37830 - C37829) * C31224 +
            (C37832 - C37831 + C37834 - C37833) * C31222 +
            (C37835 - C37836 + C37837 - C37838) * C31225 +
            (C37839 - C37840 + C37841 - C37842) * C47525) *
               C47157 * C47316 +
           ((C37836 - C37835 + C37838 - C37837) * C31224 +
            (C37840 - C37839 + C37842 - C37841) * C31222 +
            (C4743 * C7345 - C4747 * C7343 + C47523 * C23373 - C4748 * C23372) *
                C31225 +
            (C4743 * C7349 - C4747 * C7346 + C47523 * C23375 - C4748 * C23374) *
                C47525) *
               C47157 * C3770) *
              C2868) *
         C47180) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C3262 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47313) *
              C47551 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C3262 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C47313) *
              C47547 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C3262 +
           ((C37828 - C37827 + C37830 - C37829) * C31224 +
            (C37832 - C37831 + C37834 - C37833) * C31222 +
            (C37835 - C37836 + C37837 - C37838) * C31225 +
            (C37839 - C37840 + C37841 - C37842) * C47525) *
               C47157 * C47313) *
              C47537 +
          (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C31224 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C31222 +
            (C38297 - C38298 + C38299 - C38300) * C31225 +
            (C38301 - C38302 + C38303 - C38304) * C47525) *
               C47157 * C3262 +
           ((C38298 - C38297 + C38300 - C38299) * C31224 +
            (C38302 - C38301 + C38304 - C38303) * C31222 +
            (C4743 * C6007 - C4747 * C6005 + C47523 * C22395 - C4748 * C22394) *
                C31225 +
            (C4743 * C6011 - C4747 * C6008 + C47523 * C22397 - C4748 * C22396) *
                C47525) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C3262 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C3262 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47541 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C3262 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C3262 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47528 +
          ((((C4759 - C4758 + C4761 - C4760) * C31224 +
             (C4763 - C4762 + C4765 - C4764) * C31222 +
             (C5122 - C5123 + C5124 - C5125) * C31225 +
             (C5126 - C5127 + C5128 - C5129) * C47525) *
                C47157 * C3262 +
            ((C5123 - C5122 + C5125 - C5124) * C31224 +
             (C5127 - C5126 + C5129 - C5128) * C31222 +
             (C5130 - C5131 + C5132 - C5133) * C31225 +
             (C5134 - C5135 + C5136 - C5137) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C4945 - C4944 + C4947 - C4946) * C31224 +
             (C4949 - C4948 + C4951 - C4950) * C31222 +
             (C5616 - C5617 + C5618 - C5619) * C31225 +
             (C5620 - C5621 + C5622 - C5623) * C47525) *
                C47157 * C3262 +
            ((C5617 - C5616 + C5619 - C5618) * C31224 +
             (C5621 - C5620 + C5623 - C5622) * C31222 +
             (C4743 * C1299 - C4747 * C1288 + C47523 * C1311 - C4748 * C1294) *
                 C31225 +
             (C4743 * C1315 - C4747 * C1300 + C47523 * C1321 - C4748 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47552 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47549 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C38679 - C38680 + C38681 - C38682) * C31225 +
            (C38683 - C38684 + C38685 - C38686) * C47525) *
               C47157 * C47540 +
           ((C38680 - C38679 + C38682 - C38681) * C31224 +
            (C38684 - C38683 + C38686 - C38685) * C31222 +
            (C38687 - C38688 + C38689 - C38690) * C31225 +
            (C38691 - C38692 + C38693 - C38694) * C47525) *
               C47157 * C47521) *
              C2500 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47552 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C47549 +
           ((C37820 - C37819 + C37822 - C37821) * C31224 +
            (C37824 - C37823 + C37826 - C37825) * C31222 +
            (C39149 - C39150 + C39151 - C39152) * C31225 +
            (C39153 - C39154 + C39155 - C39156) * C47525) *
               C47157 * C47540 +
           ((C39150 - C39149 + C39152 - C39151) * C31224 +
            (C39154 - C39153 + C39156 - C39155) * C31222 +
            (C4743 * C6867 - C4747 * C6865 + C47523 * C23027 - C4748 * C23026) *
                C31225 +
            (C4743 * C6871 - C4747 * C6868 + C47523 * C23029 - C4748 * C23028) *
                C47525) *
               C47157 * C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C47309 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47316 +
            ((C36976 - C36975 + C36978 - C36977) * C31224 +
             (C36980 - C36979 + C36982 - C36981) * C31222 +
             (C38679 - C38680 + C38681 - C38682) * C31225 +
             (C38683 - C38684 + C38685 - C38686) * C47525) *
                C47157 * C3770) *
               C2500 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C47309 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47316 +
            ((C37820 - C37819 + C37822 - C37821) * C31224 +
             (C37824 - C37823 + C37826 - C37825) * C31222 +
             (C39149 - C39150 + C39151 - C39152) * C31225 +
             (C39153 - C39154 + C39155 - C39156) * C47525) *
                C47157 * C3770) *
               C47271) *
              C47459 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C47309 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47316 +
            ((C5115 - C5114 + C5117 - C5116) * C31224 +
             (C5119 - C5118 + C5121 - C5120) * C31222 +
             (C7206 - C7207 + C7208 - C7209) * C31225 +
             (C7210 - C7211 + C7212 - C7213) * C47525) *
                C47157 * C3770) *
               C2500 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C47309 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47316 +
            ((C7069 - C7068 + C7071 - C7070) * C31224 +
             (C7073 - C7072 + C7075 - C7074) * C31222 +
             (C4743 * C2395 - C4747 * C2391 + C47523 * C7347 - C4748 * C7344) *
                 C31225 +
             (C4743 * C2400 - C4747 * C2396 + C47523 * C7350 - C4748 * C7348) *
                 C47525) *
                C47157 * C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C3262 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C3262 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47541 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C3262 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C3262 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47528 +
          ((((C4759 - C4758 + C4761 - C4760) * C31224 +
             (C4763 - C4762 + C4765 - C4764) * C31222 +
             (C5122 - C5123 + C5124 - C5125) * C31225 +
             (C5126 - C5127 + C5128 - C5129) * C47525) *
                C47157 * C3262 +
            ((C5123 - C5122 + C5125 - C5124) * C31224 +
             (C5127 - C5126 + C5129 - C5128) * C31222 +
             (C5130 - C5131 + C5132 - C5133) * C31225 +
             (C5134 - C5135 + C5136 - C5137) * C47525) *
                C47157 * C47313) *
               C2500 +
           (((C4945 - C4944 + C4947 - C4946) * C31224 +
             (C4949 - C4948 + C4951 - C4950) * C31222 +
             (C5616 - C5617 + C5618 - C5619) * C31225 +
             (C5620 - C5621 + C5622 - C5623) * C47525) *
                C47157 * C3262 +
            ((C5617 - C5616 + C5619 - C5618) * C31224 +
             (C5621 - C5620 + C5623 - C5622) * C31222 +
             (C4743 * C1299 - C4747 * C1288 + C47523 * C1311 - C4748 * C1294) *
                 C31225 +
             (C4743 * C1315 - C4747 * C1300 + C47523 * C1321 - C4748 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C3262 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47313) *
              C47551 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C3262 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C47313) *
              C47547 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C3262 +
           ((C37828 - C37827 + C37830 - C37829) * C31224 +
            (C37832 - C37831 + C37834 - C37833) * C31222 +
            (C37835 - C37836 + C37837 - C37838) * C31225 +
            (C37839 - C37840 + C37841 - C37842) * C47525) *
               C47157 * C47313) *
              C47537 +
          (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C31224 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C31222 +
            (C38297 - C38298 + C38299 - C38300) * C31225 +
            (C38301 - C38302 + C38303 - C38304) * C47525) *
               C47157 * C3262 +
           ((C38298 - C38297 + C38300 - C38299) * C31224 +
            (C38302 - C38301 + C38304 - C38303) * C31222 +
            (C4743 * C6007 - C4747 * C6005 + C47523 * C22395 - C4748 * C22394) *
                C31225 +
            (C4743 * C6011 - C4747 * C6008 + C47523 * C22397 - C4748 * C22396) *
                C47525) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C1420 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C1421 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C47226 * C1422 +
           ((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C31224 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C31222 +
            (C4747 * C1694 - C4743 * C1697 + C4748 * C6483 - C47523 * C6485) *
                C31225 +
            (C4747 * C1698 - C4743 * C1703 + C4748 * C6486 - C47523 * C6489) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47459 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C1420 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C1421 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C1422 +
           ((C6145 - C6144 + C6147 - C6146) * C31224 +
            (C6149 - C6148 + C6151 - C6150) * C31222 +
            (C4743 * C1699 - C4747 * C1695 + C47523 * C6487 - C4748 * C6484) *
                C31225 +
            (C4743 * C1704 - C4747 * C1700 + C47523 * C6490 - C4748 * C6488) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C47473 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C4747 * C931 - C4743 * C936 + C4748 * C1289 - C47523 * C1301) *
                C31225 +
            (C4747 * C937 - C4743 * C946 + C4748 * C1302 - C47523 * C1316) *
                C47525) *
               C47157 * C47226 * C47271) *
              C655 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C47473 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C47271) *
              C656 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C47473 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C47271) *
              C657 +
          (((C4767 - C4766 + C4769 - C4768) * C31224 +
            (C4771 - C4770 + C4773 - C4772) * C31222 +
            (C5406 - C5407 + C5408 - C5409) * C31225 +
            (C5410 - C5411 + C5412 - C5413) * C47525) *
               C47157 * C47226 * C47473 +
           ((C5269 - C5268 + C5271 - C5270) * C31224 +
            (C5273 - C5272 + C5275 - C5274) * C31222 +
            (C4743 * C942 - C4747 * C934 + C47523 * C1585 - C4748 * C1584) *
                C31225 +
            (C4743 * C949 - C4747 * C943 + C47523 * C1587 - C4748 * C1586) *
                C47525) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C1816 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C1817 +
            ((C36976 - C36975 + C36978 - C36977) * C31224 +
             (C36980 - C36979 + C36982 - C36981) * C31222 +
             (C38679 - C38680 + C38681 - C38682) * C31225 +
             (C38683 - C38684 + C38685 - C38686) * C47525) *
                C47157 * C47508) *
               C47473 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C1816 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C1817 +
            ((C37820 - C37819 + C37822 - C37821) * C31224 +
             (C37824 - C37823 + C37826 - C37825) * C31222 +
             (C4747 * C2390 - C4743 * C2393 + C4748 * C7343 - C47523 * C7345) *
                 C31225 +
             (C4747 * C2394 - C4743 * C2399 + C4748 * C7346 - C47523 * C7349) *
                 C47525) *
                C47157 * C47508) *
               C47271) *
              C47459 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C1816 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C1817 +
            ((C5115 - C5114 + C5117 - C5116) * C31224 +
             (C5119 - C5118 + C5121 - C5120) * C31222 +
             (C7206 - C7207 + C7208 - C7209) * C31225 +
             (C7210 - C7211 + C7212 - C7213) * C47525) *
                C47157 * C47508) *
               C47473 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C1816 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C1817 +
            ((C7069 - C7068 + C7071 - C7070) * C31224 +
             (C7073 - C7072 + C7075 - C7074) * C31222 +
             (C4743 * C2395 - C4747 * C2391 + C47523 * C7347 - C4748 * C7344) *
                 C31225 +
             (C4743 * C2400 - C4747 * C2396 + C47523 * C7350 - C4748 * C7348) *
                 C47525) *
                C47157 * C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47474 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47313) *
              C1420 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47474 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C47313) *
              C1421 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C47474 +
           ((C37828 - C37827 + C37830 - C37829) * C31224 +
            (C37832 - C37831 + C37834 - C37833) * C31222 +
            (C37835 - C37836 + C37837 - C37838) * C31225 +
            (C37839 - C37840 + C37841 - C37842) * C47525) *
               C47157 * C47313) *
              C1422 +
          (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C31224 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C31222 +
            (C38297 - C38298 + C38299 - C38300) * C31225 +
            (C38301 - C38302 + C38303 - C38304) * C47525) *
               C47157 * C47474 +
           ((C38298 - C38297 + C38300 - C38299) * C31224 +
            (C38302 - C38301 + C38304 - C38303) * C31222 +
            (C4743 * C6007 - C4747 * C6005 + C47523 * C22395 - C4748 * C22394) *
                C31225 +
            (C4743 * C6011 - C4747 * C6008 + C47523 * C22397 - C4748 * C22396) *
                C47525) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C47474 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C47474 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C4743 * C1295 - C4747 * C1286 + C47523 * C1307 - C4748 * C1292) *
                 C31225 +
             (C4743 * C1313 - C4747 * C1296 + C47523 * C1319 - C4748 * C1308) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C291 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C47474 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C47474 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C47271) *
              C292 +
          ((((C4759 - C4758 + C4761 - C4760) * C31224 +
             (C4763 - C4762 + C4765 - C4764) * C31222 +
             (C5122 - C5123 + C5124 - C5125) * C31225 +
             (C5126 - C5127 + C5128 - C5129) * C47525) *
                C47157 * C47474 +
            ((C5123 - C5122 + C5125 - C5124) * C31224 +
             (C5127 - C5126 + C5129 - C5128) * C31222 +
             (C5130 - C5131 + C5132 - C5133) * C31225 +
             (C5134 - C5135 + C5136 - C5137) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C4945 - C4944 + C4947 - C4946) * C31224 +
             (C4949 - C4948 + C4951 - C4950) * C31222 +
             (C5616 - C5617 + C5618 - C5619) * C31225 +
             (C5620 - C5621 + C5622 - C5623) * C47525) *
                C47157 * C47474 +
            ((C5617 - C5616 + C5619 - C5618) * C31224 +
             (C5621 - C5620 + C5623 - C5622) * C31222 +
             (C4743 * C1299 - C4747 * C1288 + C47523 * C1311 - C4748 * C1294) *
                 C31225 +
             (C4743 * C1315 - C4747 * C1300 + C47523 * C1321 - C4748 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C2276 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C2277 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C38679 - C38680 + C38681 - C38682) * C31225 +
            (C38683 - C38684 + C38685 - C38686) * C47525) *
               C47157 * C2278 +
           ((C38680 - C38679 + C38682 - C38681) * C31224 +
            (C38684 - C38683 + C38686 - C38685) * C31222 +
            (C38687 - C38688 + C38689 - C38690) * C31225 +
            (C38691 - C38692 + C38693 - C38694) * C47525) *
               C47157 * C47521) *
              C47473 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C2276 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C2277 +
           ((C37820 - C37819 + C37822 - C37821) * C31224 +
            (C37824 - C37823 + C37826 - C37825) * C31222 +
            (C39149 - C39150 + C39151 - C39152) * C31225 +
            (C39153 - C39154 + C39155 - C39156) * C47525) *
               C47157 * C2278 +
           ((C39150 - C39149 + C39152 - C39151) * C31224 +
            (C39154 - C39153 + C39156 - C39155) * C31222 +
            (C4743 * C6867 - C4747 * C6865 + C47523 * C23027 - C4748 * C23026) *
                C31225 +
            (C4743 * C6871 - C4747 * C6868 + C47523 * C23029 - C4748 * C23028) *
                C47525) *
               C47157 * C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                   C31224 +
               (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                   C31222 +
               (C4743 * C491 - C4747 * C481 + C47523 * C936 - C4748 * C931) *
                   C31225 +
               (C4743 * C511 - C4747 * C492 + C47523 * C946 - C4748 * C937) *
                   C47525) *
                  C47157 * C47226 * C47208 * C108 +
              ((C4751 - C4750 + C4753 - C4752) * C31224 +
               (C4755 - C4754 + C4757 - C4756) * C31222 +
               (C5106 - C5107 + C5108 - C5109) * C31225 +
               (C5110 - C5111 + C5112 - C5113) * C47525) *
                  C47157 * C47226 * C47208 * C109 +
              ((C4759 - C4758 + C4761 - C4760) * C31224 +
               (C4763 - C4762 + C4765 - C4764) * C31222 +
               (C5122 - C5123 + C5124 - C5125) * C31225 +
               (C5126 - C5127 + C5128 - C5129) * C47525) *
                  C47157 * C47226 * C47208 * C110 +
              ((C4767 - C4766 + C4769 - C4768) * C31224 +
               (C4771 - C4770 + C4773 - C4772) * C31222 +
               (C5406 - C5407 + C5408 - C5409) * C31225 +
               (C5410 - C5411 + C5412 - C5413) * C47525) *
                  C47157 * C47226 * C47208 * C111 +
              ((C4775 - C4774 + C4777 - C4776) * C31224 +
               (C4779 - C4778 + C4781 - C4780) * C31222 +
               (C4743 * C507 - C4747 * C489 + C47523 * C944 - C4748 * C935) *
                   C31225 +
               (C4743 * C519 - C4747 * C508 + C47523 * C950 - C4748 * C945) *
                   C47525) *
                  C47157 * C47226 * C47208 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                    C31224 +
                (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                    C31222 +
                (C4743 * C491 - C4747 * C481 + C47523 * C936 - C4748 * C931) *
                    C31225 +
                (C4743 * C511 - C4747 * C492 + C47523 * C946 - C4748 * C937) *
                    C47525) *
                   C47157 * C47226 * C47544 +
               ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                    C31224 +
                (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                    C31222 +
                (C4747 * C931 - C4743 * C936 + C4748 * C1289 - C47523 * C1301) *
                    C31225 +
                (C4747 * C937 - C4743 * C946 + C4748 * C1302 - C47523 * C1316) *
                    C47525) *
                   C47157 * C47226 * C47532 +
               ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                    C31224 +
                (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                    C31222 +
                (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 -
                 C4748 * C1694) *
                    C31225 +
                (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 -
                 C4748 * C1698) *
                    C47525) *
                   C47157 * C47226 * C47505) *
                  C291 +
              (((C4751 - C4750 + C4753 - C4752) * C31224 +
                (C4755 - C4754 + C4757 - C4756) * C31222 +
                (C5106 - C5107 + C5108 - C5109) * C31225 +
                (C5110 - C5111 + C5112 - C5113) * C47525) *
                   C47157 * C47226 * C47544 +
               ((C4929 - C4928 + C4931 - C4930) * C31224 +
                (C4933 - C4932 + C4935 - C4934) * C31222 +
                (C5608 - C5609 + C5610 - C5611) * C31225 +
                (C5612 - C5613 + C5614 - C5615) * C47525) *
                   C47157 * C47226 * C47532 +
               ((C4937 - C4936 + C4939 - C4938) * C31224 +
                (C4941 - C4940 + C4943 - C4942) * C31222 +
                (C6346 - C6347 + C6348 - C6349) * C31225 +
                (C6350 - C6351 + C6352 - C6353) * C47525) *
                   C47157 * C47226 * C47505) *
                  C292 +
              (((C4759 - C4758 + C4761 - C4760) * C31224 +
                (C4763 - C4762 + C4765 - C4764) * C31222 +
                (C5122 - C5123 + C5124 - C5125) * C31225 +
                (C5126 - C5127 + C5128 - C5129) * C47525) *
                   C47157 * C47226 * C47544 +
               ((C4945 - C4944 + C4947 - C4946) * C31224 +
                (C4949 - C4948 + C4951 - C4950) * C31222 +
                (C5616 - C5617 + C5618 - C5619) * C31225 +
                (C5620 - C5621 + C5622 - C5623) * C47525) *
                   C47157 * C47226 * C47532 +
               ((C4953 - C4952 + C4955 - C4954) * C31224 +
                (C4957 - C4956 + C4959 - C4958) * C31222 +
                (C4743 * C1305 - C4747 * C1291 + C47523 * C1701 -
                 C4748 * C1696) *
                    C31225 +
                (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 -
                 C4748 * C1702) *
                    C47525) *
                   C47157 * C47226 * C47505) *
                  C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47545 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47534 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C4743 * C2002 - C4747 * C1996 + C47523 * C2393 - C4748 * C2390) *
                C31225 +
            (C4743 * C2014 - C4747 * C2003 + C47523 * C2399 - C4748 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47208 * C291 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47545 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C47534 +
           ((C5115 - C5114 + C5117 - C5116) * C31224 +
            (C5119 - C5118 + C5121 - C5120) * C31222 +
            (C7206 - C7207 + C7208 - C7209) * C31225 +
            (C7210 - C7211 + C7212 - C7213) * C47525) *
               C47157 * C47508) *
              C47208 * C292 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47545 +
           ((C5123 - C5122 + C5125 - C5124) * C31224 +
            (C5127 - C5126 + C5129 - C5128) * C31222 +
            (C5130 - C5131 + C5132 - C5133) * C31225 +
            (C5134 - C5135 + C5136 - C5137) * C47525) *
               C47157 * C47534 +
           ((C5131 - C5130 + C5133 - C5132) * C31224 +
            (C5135 - C5134 + C5137 - C5136) * C31222 +
            (C4743 * C2006 - C4747 * C1998 + C47523 * C2397 - C4748 * C2392) *
                C31225 +
            (C4743 * C2016 - C4747 * C2007 + C47523 * C2401 - C4748 * C2398) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
                C31225 +
            (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C47505) *
              C47528 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4953 - C4952 + C4955 - C4954) * C31224 +
            (C4957 - C4956 + C4959 - C4958) * C31222 +
            (C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                C31225 +
            (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
               C31224 +
           (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
               C31222 +
           (C36967 - C36968 + C36969 - C36970) * C31225 +
           (C36971 - C36972 + C36973 - C36974) * C47525) *
              C47157 * C47226 * C1146 +
          ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
               C31224 +
           (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
               C31222 +
           (C37437 - C37438 + C37439 - C37440) * C31225 +
           (C37441 - C37442 + C37443 - C37444) * C47525) *
              C47157 * C47226 * C1147 +
          ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
               C31224 +
           (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
               C31222 +
           (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
               C31225 +
           (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
               C47525) *
              C47157 * C47226 * C1148 +
          ((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
               C31224 +
           (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
               C31222 +
           (C4747 * C1694 - C4743 * C1697 + C4748 * C6483 - C47523 * C6485) *
               C31225 +
           (C4747 * C1698 - C4743 * C1703 + C4748 * C6486 - C47523 * C6489) *
               C47525) *
              C47157 * C47226 * C1149 +
          ((C4743 * C1164 - C4747 * C1155 + C47523 * C5853 - C4748 * C5851) *
               C31224 +
           (C4743 * C1173 - C4747 * C1165 + C47523 * C5857 - C4748 * C5854) *
               C31222 +
           (C4743 * C6485 - C4747 * C6483 + C47523 * C22741 - C4748 * C22740) *
               C31225 +
           (C4743 * C6489 - C4747 * C6486 + C47523 * C22743 - C4748 * C22742) *
               C47525) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47545 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47534 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C4743 * C2002 - C4747 * C1996 + C47523 * C2393 - C4748 * C2390) *
                C31225 +
            (C4743 * C2014 - C4747 * C2003 + C47523 * C2399 - C4748 * C2394) *
                C47525) *
               C47157 * C47508) *
              C1078 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47545 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C47534 +
           ((C37820 - C37819 + C37822 - C37821) * C31224 +
            (C37824 - C37823 + C37826 - C37825) * C31222 +
            (C4747 * C2390 - C4743 * C2393 + C4748 * C7343 - C47523 * C7345) *
                C31225 +
            (C4747 * C2394 - C4743 * C2399 + C4748 * C7346 - C47523 * C7349) *
                C47525) *
               C47157 * C47508) *
              C1079 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C47545 +
           ((C37828 - C37827 + C37830 - C37829) * C31224 +
            (C37832 - C37831 + C37834 - C37833) * C31222 +
            (C37835 - C37836 + C37837 - C37838) * C31225 +
            (C37839 - C37840 + C37841 - C37842) * C47525) *
               C47157 * C47534 +
           ((C37836 - C37835 + C37838 - C37837) * C31224 +
            (C37840 - C37839 + C37842 - C37841) * C31222 +
            (C4743 * C7345 - C4747 * C7343 + C47523 * C23373 - C4748 * C23372) *
                C31225 +
            (C4743 * C7349 - C4747 * C7346 + C47523 * C23375 - C4748 * C23374) *
                C47525) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C1816 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C1817 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C4743 * C2002 - C4747 * C1996 + C47523 * C2393 - C4748 * C2390) *
                C31225 +
            (C4743 * C2014 - C4747 * C2003 + C47523 * C2399 - C4748 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47541 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C1816 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C1817 +
           ((C5115 - C5114 + C5117 - C5116) * C31224 +
            (C5119 - C5118 + C5121 - C5120) * C31222 +
            (C7206 - C7207 + C7208 - C7209) * C31225 +
            (C7210 - C7211 + C7212 - C7213) * C47525) *
               C47157 * C47508) *
              C47208 * C47528 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C1816 +
           ((C5123 - C5122 + C5125 - C5124) * C31224 +
            (C5127 - C5126 + C5129 - C5128) * C31222 +
            (C5130 - C5131 + C5132 - C5133) * C31225 +
            (C5134 - C5135 + C5136 - C5137) * C47525) *
               C47157 * C1817 +
           ((C5131 - C5130 + C5133 - C5132) * C31224 +
            (C5135 - C5134 + C5137 - C5136) * C31222 +
            (C4743 * C2006 - C4747 * C1998 + C47523 * C2397 - C4748 * C2392) *
                C31225 +
            (C4743 * C2016 - C4747 * C2007 + C47523 * C2401 - C4748 * C2398) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C1816 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C1817 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C4743 * C2002 - C4747 * C1996 + C47523 * C2393 - C4748 * C2390) *
                C31225 +
            (C4743 * C2014 - C4747 * C2003 + C47523 * C2399 - C4748 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47544 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C1816 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C1817 +
           ((C37820 - C37819 + C37822 - C37821) * C31224 +
            (C37824 - C37823 + C37826 - C37825) * C31222 +
            (C4747 * C2390 - C4743 * C2393 + C4748 * C7343 - C47523 * C7345) *
                C31225 +
            (C4747 * C2394 - C4743 * C2399 + C4748 * C7346 - C47523 * C7349) *
                C47525) *
               C47157 * C47508) *
              C47532 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C1816 +
           ((C37828 - C37827 + C37830 - C37829) * C31224 +
            (C37832 - C37831 + C37834 - C37833) * C31222 +
            (C37835 - C37836 + C37837 - C37838) * C31225 +
            (C37839 - C37840 + C37841 - C37842) * C47525) *
               C47157 * C1817 +
           ((C37836 - C37835 + C37838 - C37837) * C31224 +
            (C37840 - C37839 + C37842 - C37841) * C31222 +
            (C4743 * C7345 - C4747 * C7343 + C47523 * C23373 - C4748 * C23372) *
                C31225 +
            (C4743 * C7349 - C4747 * C7346 + C47523 * C23375 - C4748 * C23374) *
                C47525) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
               C31224 +
           (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
               C31222 +
           (C36967 - C36968 + C36969 - C36970) * C31225 +
           (C36971 - C36972 + C36973 - C36974) * C47525) *
              C47157 * C1991 +
          ((C36968 - C36967 + C36970 - C36969) * C31224 +
           (C36972 - C36971 + C36974 - C36973) * C31222 +
           (C36975 - C36976 + C36977 - C36978) * C31225 +
           (C36979 - C36980 + C36981 - C36982) * C47525) *
              C47157 * C1992 +
          ((C36976 - C36975 + C36978 - C36977) * C31224 +
           (C36980 - C36979 + C36982 - C36981) * C31222 +
           (C38679 - C38680 + C38681 - C38682) * C31225 +
           (C38683 - C38684 + C38685 - C38686) * C47525) *
              C47157 * C1993 +
          ((C38680 - C38679 + C38682 - C38681) * C31224 +
           (C38684 - C38683 + C38686 - C38685) * C31222 +
           (C38687 - C38688 + C38689 - C38690) * C31225 +
           (C38691 - C38692 + C38693 - C38694) * C47525) *
              C47157 * C1994 +
          ((C38688 - C38687 + C38690 - C38689) * C31224 +
           (C38692 - C38691 + C38694 - C38693) * C31222 +
           (C4743 * C12411 - C4747 * C12409 + C47523 * C27695 -
            C4748 * C27694) *
               C31225 +
           (C4743 * C12415 - C4747 * C12412 + C47523 * C27697 -
            C4748 * C27696) *
               C47525) *
              C47157 * C1995) *
         C47208 * C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C47474 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C1078 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C47474 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47313) *
               C1079 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C31224 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C31222 +
             (C37827 - C37828 + C37829 - C37830) * C31225 +
             (C37831 - C37832 + C37833 - C37834) * C47525) *
                C47157 * C47474 +
            ((C37828 - C37827 + C37830 - C37829) * C31224 +
             (C37832 - C37831 + C37834 - C37833) * C31222 +
             (C37835 - C37836 + C37837 - C37838) * C31225 +
             (C37839 - C37840 + C37841 - C37842) * C47525) *
                C47157 * C47313) *
               C47505) *
              C47459 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C47474 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C1078 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C47474 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C1079 +
           (((C4937 - C4936 + C4939 - C4938) * C31224 +
             (C4941 - C4940 + C4943 - C4942) * C31222 +
             (C6346 - C6347 + C6348 - C6349) * C31225 +
             (C6350 - C6351 + C6352 - C6353) * C47525) *
                C47157 * C47474 +
            ((C6347 - C6346 + C6349 - C6348) * C31224 +
             (C6351 - C6350 + C6353 - C6352) * C31222 +
             (C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C31225 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47474 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47313) *
              C47208 * C655 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47474 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C47313) *
              C47208 * C656 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47474 +
           ((C5123 - C5122 + C5125 - C5124) * C31224 +
            (C5127 - C5126 + C5129 - C5128) * C31222 +
            (C5130 - C5131 + C5132 - C5133) * C31225 +
            (C5134 - C5135 + C5136 - C5137) * C47525) *
               C47157 * C47313) *
              C47208 * C657 +
          (((C4767 - C4766 + C4769 - C4768) * C31224 +
            (C4771 - C4770 + C4773 - C4772) * C31222 +
            (C5406 - C5407 + C5408 - C5409) * C31225 +
            (C5410 - C5411 + C5412 - C5413) * C47525) *
               C47157 * C47474 +
           ((C5407 - C5406 + C5409 - C5408) * C31224 +
            (C5411 - C5410 + C5413 - C5412) * C31222 +
            (C4743 * C505 - C4747 * C488 + C47523 * C2167 - C4748 * C2166) *
                C31225 +
            (C4743 * C518 - C4747 * C506 + C47523 * C2169 - C4748 * C2168) *
                C47525) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C2276 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C2277 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C38679 - C38680 + C38681 - C38682) * C31225 +
            (C38683 - C38684 + C38685 - C38686) * C47525) *
               C47157 * C2278 +
           ((C38680 - C38679 + C38682 - C38681) * C31224 +
            (C38684 - C38683 + C38686 - C38685) * C31222 +
            (C38687 - C38688 + C38689 - C38690) * C31225 +
            (C38691 - C38692 + C38693 - C38694) * C47525) *
               C47157 * C47521) *
              C47208 * C47459 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C2276 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C2277 +
           ((C5115 - C5114 + C5117 - C5116) * C31224 +
            (C5119 - C5118 + C5121 - C5120) * C31222 +
            (C7206 - C7207 + C7208 - C7209) * C31225 +
            (C7210 - C7211 + C7212 - C7213) * C47525) *
               C47157 * C2278 +
           ((C7207 - C7206 + C7209 - C7208) * C31224 +
            (C7211 - C7210 + C7213 - C7212) * C31222 +
            (C4743 * C2010 - C4747 * C2000 + C47523 * C6869 - C4748 * C6866) *
                C31225 +
            (C4743 * C2018 - C4747 * C2011 + C47523 * C6872 - C4748 * C6870) *
                C47525) *
               C47157 * C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C4743 * C491 - C4747 * C481 + C47523 * C936 - C4748 * C931) *
                C31225 +
            (C4743 * C511 - C4747 * C492 + C47523 * C946 - C4748 * C937) *
                C47525) *
               C47157 * C47226 * C47544 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C4747 * C931 - C4743 * C936 + C4748 * C1289 - C47523 * C1301) *
                C31225 +
            (C4747 * C937 - C4743 * C946 + C4748 * C1302 - C47523 * C1316) *
                C47525) *
               C47157 * C47226 * C47532 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
                C31225 +
            (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C291 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C47544 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C47532 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C47505) *
              C292 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C47544 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C47532 +
           ((C4953 - C4952 + C4955 - C4954) * C31224 +
            (C4957 - C4956 + C4959 - C4958) * C31222 +
            (C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                C31225 +
            (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
               C31224 +
           (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
               C31222 +
           (C4743 * C491 - C4747 * C481 + C47523 * C936 - C4748 * C931) *
               C31225 +
           (C4743 * C511 - C4747 * C492 + C47523 * C946 - C4748 * C937) *
               C47525) *
              C47157 * C47226 * C47208 * C108 +
          ((C4751 - C4750 + C4753 - C4752) * C31224 +
           (C4755 - C4754 + C4757 - C4756) * C31222 +
           (C5106 - C5107 + C5108 - C5109) * C31225 +
           (C5110 - C5111 + C5112 - C5113) * C47525) *
              C47157 * C47226 * C47208 * C109 +
          ((C4759 - C4758 + C4761 - C4760) * C31224 +
           (C4763 - C4762 + C4765 - C4764) * C31222 +
           (C5122 - C5123 + C5124 - C5125) * C31225 +
           (C5126 - C5127 + C5128 - C5129) * C47525) *
              C47157 * C47226 * C47208 * C110 +
          ((C4767 - C4766 + C4769 - C4768) * C31224 +
           (C4771 - C4770 + C4773 - C4772) * C31222 +
           (C5406 - C5407 + C5408 - C5409) * C31225 +
           (C5410 - C5411 + C5412 - C5413) * C47525) *
              C47157 * C47226 * C47208 * C111 +
          ((C4775 - C4774 + C4777 - C4776) * C31224 +
           (C4779 - C4778 + C4781 - C4780) * C31222 +
           (C4743 * C507 - C4747 * C489 + C47523 * C944 - C4748 * C935) *
               C31225 +
           (C4743 * C519 - C4747 * C508 + C47523 * C950 - C4748 * C945) *
               C47525) *
              C47157 * C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
                C31225 +
            (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C47505) *
              C47528 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4953 - C4952 + C4955 - C4954) * C31224 +
            (C4957 - C4956 + C4959 - C4958) * C31222 +
            (C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                C31225 +
            (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
               C31224 +
           (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
               C31222 +
           (C36967 - C36968 + C36969 - C36970) * C31225 +
           (C36971 - C36972 + C36973 - C36974) * C47525) *
              C47157 * C47226 * C1146 +
          ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
               C31224 +
           (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
               C31222 +
           (C37437 - C37438 + C37439 - C37440) * C31225 +
           (C37441 - C37442 + C37443 - C37444) * C47525) *
              C47157 * C47226 * C1147 +
          ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
               C31224 +
           (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
               C31222 +
           (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
               C31225 +
           (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
               C47525) *
              C47157 * C47226 * C1148 +
          ((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
               C31224 +
           (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
               C31222 +
           (C4747 * C1694 - C4743 * C1697 + C4748 * C6483 - C47523 * C6485) *
               C31225 +
           (C4747 * C1698 - C4743 * C1703 + C4748 * C6486 - C47523 * C6489) *
               C47525) *
              C47157 * C47226 * C1149 +
          ((C4743 * C1164 - C4747 * C1155 + C47523 * C5853 - C4748 * C5851) *
               C31224 +
           (C4743 * C1173 - C4747 * C1165 + C47523 * C5857 - C4748 * C5854) *
               C31222 +
           (C4743 * C6485 - C4747 * C6483 + C47523 * C22741 - C4748 * C22740) *
               C31225 +
           (C4743 * C6489 - C4747 * C6486 + C47523 * C22743 - C4748 * C22742) *
               C47525) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C1816 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C1817 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C4743 * C2002 - C4747 * C1996 + C47523 * C2393 - C4748 * C2390) *
                C31225 +
            (C4743 * C2014 - C4747 * C2003 + C47523 * C2399 - C4748 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47541 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C1816 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C1817 +
           ((C5115 - C5114 + C5117 - C5116) * C31224 +
            (C5119 - C5118 + C5121 - C5120) * C31222 +
            (C7206 - C7207 + C7208 - C7209) * C31225 +
            (C7210 - C7211 + C7212 - C7213) * C47525) *
               C47157 * C47508) *
              C47208 * C47528 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C1816 +
           ((C5123 - C5122 + C5125 - C5124) * C31224 +
            (C5127 - C5126 + C5129 - C5128) * C31222 +
            (C5130 - C5131 + C5132 - C5133) * C31225 +
            (C5134 - C5135 + C5136 - C5137) * C47525) *
               C47157 * C1817 +
           ((C5131 - C5130 + C5133 - C5132) * C31224 +
            (C5135 - C5134 + C5137 - C5136) * C31222 +
            (C4743 * C2006 - C4747 * C1998 + C47523 * C2397 - C4748 * C2392) *
                C31225 +
            (C4743 * C2016 - C4747 * C2007 + C47523 * C2401 - C4748 * C2398) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C1816 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C1817 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C4743 * C2002 - C4747 * C1996 + C47523 * C2393 - C4748 * C2390) *
                C31225 +
            (C4743 * C2014 - C4747 * C2003 + C47523 * C2399 - C4748 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47544 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C1816 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C1817 +
           ((C37820 - C37819 + C37822 - C37821) * C31224 +
            (C37824 - C37823 + C37826 - C37825) * C31222 +
            (C4747 * C2390 - C4743 * C2393 + C4748 * C7343 - C47523 * C7345) *
                C31225 +
            (C4747 * C2394 - C4743 * C2399 + C4748 * C7346 - C47523 * C7349) *
                C47525) *
               C47157 * C47508) *
              C47532 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C1816 +
           ((C37828 - C37827 + C37830 - C37829) * C31224 +
            (C37832 - C37831 + C37834 - C37833) * C31222 +
            (C37835 - C37836 + C37837 - C37838) * C31225 +
            (C37839 - C37840 + C37841 - C37842) * C47525) *
               C47157 * C1817 +
           ((C37836 - C37835 + C37838 - C37837) * C31224 +
            (C37840 - C37839 + C37842 - C37841) * C31222 +
            (C4743 * C7345 - C4747 * C7343 + C47523 * C23373 - C4748 * C23372) *
                C31225 +
            (C4743 * C7349 - C4747 * C7346 + C47523 * C23375 - C4748 * C23374) *
                C47525) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C3262 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C3262 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47185 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C3262 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C3262 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C47271) *
              C47194 +
          ((((C4759 - C4758 + C4761 - C4760) * C31224 +
             (C4763 - C4762 + C4765 - C4764) * C31222 +
             (C5122 - C5123 + C5124 - C5125) * C31225 +
             (C5126 - C5127 + C5128 - C5129) * C47525) *
                C47157 * C3262 +
            ((C5123 - C5122 + C5125 - C5124) * C31224 +
             (C5127 - C5126 + C5129 - C5128) * C31222 +
             (C5130 - C5131 + C5132 - C5133) * C31225 +
             (C5134 - C5135 + C5136 - C5137) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C4945 - C4944 + C4947 - C4946) * C31224 +
             (C4949 - C4948 + C4951 - C4950) * C31222 +
             (C5616 - C5617 + C5618 - C5619) * C31225 +
             (C5620 - C5621 + C5622 - C5623) * C47525) *
                C47157 * C3262 +
            ((C5617 - C5616 + C5619 - C5618) * C31224 +
             (C5621 - C5620 + C5623 - C5622) * C31222 +
             (C4743 * C1299 - C4747 * C1288 + C47523 * C1311 - C4748 * C1294) *
                 C31225 +
             (C4743 * C1315 - C4747 * C1300 + C47523 * C1321 - C4748 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C47309 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47316 +
            ((C36976 - C36975 + C36978 - C36977) * C31224 +
             (C36980 - C36979 + C36982 - C36981) * C31222 +
             (C38679 - C38680 + C38681 - C38682) * C31225 +
             (C38683 - C38684 + C38685 - C38686) * C47525) *
                C47157 * C3770) *
               C47473 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C47309 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47316 +
            ((C37820 - C37819 + C37822 - C37821) * C31224 +
             (C37824 - C37823 + C37826 - C37825) * C31222 +
             (C39149 - C39150 + C39151 - C39152) * C31225 +
             (C39153 - C39154 + C39155 - C39156) * C47525) *
                C47157 * C3770) *
               C47271) *
              C2608 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C47309 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47316 +
            ((C5115 - C5114 + C5117 - C5116) * C31224 +
             (C5119 - C5118 + C5121 - C5120) * C31222 +
             (C7206 - C7207 + C7208 - C7209) * C31225 +
             (C7210 - C7211 + C7212 - C7213) * C47525) *
                C47157 * C3770) *
               C47473 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C47309 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47316 +
            ((C7069 - C7068 + C7071 - C7070) * C31224 +
             (C7073 - C7072 + C7075 - C7074) * C31222 +
             (C4743 * C2395 - C4747 * C2391 + C47523 * C7347 - C4748 * C7344) *
                 C31225 +
             (C4743 * C2400 - C4747 * C2396 + C47523 * C7350 - C4748 * C7348) *
                 C47525) *
                C47157 * C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C3262 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C47544 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C3262 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47313) *
               C47532 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C31224 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C31222 +
             (C37827 - C37828 + C37829 - C37830) * C31225 +
             (C37831 - C37832 + C37833 - C37834) * C47525) *
                C47157 * C3262 +
            ((C37828 - C37827 + C37830 - C37829) * C31224 +
             (C37832 - C37831 + C37834 - C37833) * C31222 +
             (C37835 - C37836 + C37837 - C37838) * C31225 +
             (C37839 - C37840 + C37841 - C37842) * C47525) *
                C47157 * C47313) *
               C47505) *
              C2608 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C3262 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C47544 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C3262 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C47532 +
           (((C4937 - C4936 + C4939 - C4938) * C31224 +
             (C4941 - C4940 + C4943 - C4942) * C31222 +
             (C6346 - C6347 + C6348 - C6349) * C31225 +
             (C6350 - C6351 + C6352 - C6353) * C47525) *
                C47157 * C3262 +
            ((C6347 - C6346 + C6349 - C6348) * C31224 +
             (C6351 - C6350 + C6353 - C6352) * C31222 +
             (C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C31225 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C3262 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47313) *
              C47208 * C47550 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C3262 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C47313) *
              C47208 * C47543 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C3262 +
           ((C5123 - C5122 + C5125 - C5124) * C31224 +
            (C5127 - C5126 + C5129 - C5128) * C31222 +
            (C5130 - C5131 + C5132 - C5133) * C31225 +
            (C5134 - C5135 + C5136 - C5137) * C47525) *
               C47157 * C47313) *
              C47208 * C47530 +
          (((C4767 - C4766 + C4769 - C4768) * C31224 +
            (C4771 - C4770 + C4773 - C4772) * C31222 +
            (C5406 - C5407 + C5408 - C5409) * C31225 +
            (C5410 - C5411 + C5412 - C5413) * C47525) *
               C47157 * C3262 +
           ((C5407 - C5406 + C5409 - C5408) * C31224 +
            (C5411 - C5410 + C5413 - C5412) * C31222 +
            (C4743 * C505 - C4747 * C488 + C47523 * C2167 - C4748 * C2166) *
                C31225 +
            (C4743 * C518 - C4747 * C506 + C47523 * C2169 - C4748 * C2168) *
                C47525) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47552 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47549 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C38679 - C38680 + C38681 - C38682) * C31225 +
            (C38683 - C38684 + C38685 - C38686) * C47525) *
               C47157 * C47540 +
           ((C38680 - C38679 + C38682 - C38681) * C31224 +
            (C38684 - C38683 + C38686 - C38685) * C31222 +
            (C38687 - C38688 + C38689 - C38690) * C31225 +
            (C38691 - C38692 + C38693 - C38694) * C47525) *
               C47157 * C47521) *
              C47208 * C2608 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47552 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C47549 +
           ((C5115 - C5114 + C5117 - C5116) * C31224 +
            (C5119 - C5118 + C5121 - C5120) * C31222 +
            (C7206 - C7207 + C7208 - C7209) * C31225 +
            (C7210 - C7211 + C7212 - C7213) * C47525) *
               C47157 * C47540 +
           ((C7207 - C7206 + C7209 - C7208) * C31224 +
            (C7211 - C7210 + C7213 - C7212) * C31222 +
            (C4743 * C2010 - C4747 * C2000 + C47523 * C6869 - C4748 * C6866) *
                C31225 +
            (C4743 * C2018 - C4747 * C2011 + C47523 * C6872 - C4748 * C6870) *
                C47525) *
               C47157 * C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47309 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47316 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C38679 - C38680 + C38681 - C38682) * C31225 +
            (C38683 - C38684 + C38685 - C38686) * C47525) *
               C47157 * C3770) *
              C47208 * C47185 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47309 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C47316 +
           ((C5115 - C5114 + C5117 - C5116) * C31224 +
            (C5119 - C5118 + C5121 - C5120) * C31222 +
            (C7206 - C7207 + C7208 - C7209) * C31225 +
            (C7210 - C7211 + C7212 - C7213) * C47525) *
               C47157 * C3770) *
              C47208 * C47194 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47309 +
           ((C5123 - C5122 + C5125 - C5124) * C31224 +
            (C5127 - C5126 + C5129 - C5128) * C31222 +
            (C5130 - C5131 + C5132 - C5133) * C31225 +
            (C5134 - C5135 + C5136 - C5137) * C47525) *
               C47157 * C47316 +
           ((C5131 - C5130 + C5133 - C5132) * C31224 +
            (C5135 - C5134 + C5137 - C5136) * C31222 +
            (C4743 * C2006 - C4747 * C1998 + C47523 * C2397 - C4748 * C2392) *
                C31225 +
            (C4743 * C2016 - C4747 * C2007 + C47523 * C2401 - C4748 * C2398) *
                C47525) *
               C47157 * C3770) *
              C47208 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C3262 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47313) *
              C47208 * C47550 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C3262 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C47313) *
              C47208 * C47543 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C3262 +
           ((C5123 - C5122 + C5125 - C5124) * C31224 +
            (C5127 - C5126 + C5129 - C5128) * C31222 +
            (C5130 - C5131 + C5132 - C5133) * C31225 +
            (C5134 - C5135 + C5136 - C5137) * C47525) *
               C47157 * C47313) *
              C47208 * C47530 +
          (((C4767 - C4766 + C4769 - C4768) * C31224 +
            (C4771 - C4770 + C4773 - C4772) * C31222 +
            (C5406 - C5407 + C5408 - C5409) * C31225 +
            (C5410 - C5411 + C5412 - C5413) * C47525) *
               C47157 * C3262 +
           ((C5407 - C5406 + C5409 - C5408) * C31224 +
            (C5411 - C5410 + C5413 - C5412) * C31222 +
            (C4743 * C505 - C4747 * C488 + C47523 * C2167 - C4748 * C2166) *
                C31225 +
            (C4743 * C518 - C4747 * C506 + C47523 * C2169 - C4748 * C2168) *
                C47525) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C3262 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C47544 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C3262 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47313) *
               C47532 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C31224 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C31222 +
             (C37827 - C37828 + C37829 - C37830) * C31225 +
             (C37831 - C37832 + C37833 - C37834) * C47525) *
                C47157 * C3262 +
            ((C37828 - C37827 + C37830 - C37829) * C31224 +
             (C37832 - C37831 + C37834 - C37833) * C31222 +
             (C37835 - C37836 + C37837 - C37838) * C31225 +
             (C37839 - C37840 + C37841 - C37842) * C47525) *
                C47157 * C47313) *
               C47505) *
              C2608 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C3262 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C47544 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C3262 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C47532 +
           (((C4937 - C4936 + C4939 - C4938) * C31224 +
             (C4941 - C4940 + C4943 - C4942) * C31222 +
             (C6346 - C6347 + C6348 - C6349) * C31225 +
             (C6350 - C6351 + C6352 - C6353) * C47525) *
                C47157 * C3262 +
            ((C6347 - C6346 + C6349 - C6348) * C31224 +
             (C6351 - C6350 + C6353 - C6352) * C31222 +
             (C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C31225 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C47473 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C4747 * C931 - C4743 * C936 + C4748 * C1289 - C47523 * C1301) *
                C31225 +
            (C4747 * C937 - C4743 * C946 + C4748 * C1302 - C47523 * C1316) *
                C47525) *
               C47157 * C47226 * C47271) *
              C655 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C47473 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C47271) *
              C656 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C47473 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C47271) *
              C657 +
          (((C4767 - C4766 + C4769 - C4768) * C31224 +
            (C4771 - C4770 + C4773 - C4772) * C31222 +
            (C5406 - C5407 + C5408 - C5409) * C31225 +
            (C5410 - C5411 + C5412 - C5413) * C47525) *
               C47157 * C47226 * C47473 +
           ((C5269 - C5268 + C5271 - C5270) * C31224 +
            (C5273 - C5272 + C5275 - C5274) * C31222 +
            (C4743 * C942 - C4747 * C934 + C47523 * C1585 - C4748 * C1584) *
                C31225 +
            (C4743 * C949 - C4747 * C943 + C47523 * C1587 - C4748 * C1586) *
                C47525) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C1420 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C1421 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C47226 * C1422 +
           ((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C31224 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C31222 +
            (C4747 * C1694 - C4743 * C1697 + C4748 * C6483 - C47523 * C6485) *
                C31225 +
            (C4747 * C1698 - C4743 * C1703 + C4748 * C6486 - C47523 * C6489) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47459 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C1420 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C1421 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C1422 +
           ((C6145 - C6144 + C6147 - C6146) * C31224 +
            (C6149 - C6148 + C6151 - C6150) * C31222 +
            (C4743 * C1699 - C4747 * C1695 + C47523 * C6487 - C4748 * C6484) *
                C31225 +
            (C4743 * C1704 - C4747 * C1700 + C47523 * C6490 - C4748 * C6488) *
                C47525) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C47474 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C47474 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C4743 * C1295 - C4747 * C1286 + C47523 * C1307 - C4748 * C1292) *
                 C31225 +
             (C4743 * C1313 - C4747 * C1296 + C47523 * C1319 - C4748 * C1308) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C291 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C47474 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C47474 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C47271) *
              C292 +
          ((((C4759 - C4758 + C4761 - C4760) * C31224 +
             (C4763 - C4762 + C4765 - C4764) * C31222 +
             (C5122 - C5123 + C5124 - C5125) * C31225 +
             (C5126 - C5127 + C5128 - C5129) * C47525) *
                C47157 * C47474 +
            ((C5123 - C5122 + C5125 - C5124) * C31224 +
             (C5127 - C5126 + C5129 - C5128) * C31222 +
             (C5130 - C5131 + C5132 - C5133) * C31225 +
             (C5134 - C5135 + C5136 - C5137) * C47525) *
                C47157 * C47313) *
               C47473 +
           (((C4945 - C4944 + C4947 - C4946) * C31224 +
             (C4949 - C4948 + C4951 - C4950) * C31222 +
             (C5616 - C5617 + C5618 - C5619) * C31225 +
             (C5620 - C5621 + C5622 - C5623) * C47525) *
                C47157 * C47474 +
            ((C5617 - C5616 + C5619 - C5618) * C31224 +
             (C5621 - C5620 + C5623 - C5622) * C31222 +
             (C4743 * C1299 - C4747 * C1288 + C47523 * C1311 - C4748 * C1294) *
                 C31225 +
             (C4743 * C1315 - C4747 * C1300 + C47523 * C1321 - C4748 * C1312) *
                 C47525) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47474 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47313) *
              C1420 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47474 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C47313) *
              C1421 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C47474 +
           ((C37828 - C37827 + C37830 - C37829) * C31224 +
            (C37832 - C37831 + C37834 - C37833) * C31222 +
            (C37835 - C37836 + C37837 - C37838) * C31225 +
            (C37839 - C37840 + C37841 - C37842) * C47525) *
               C47157 * C47313) *
              C1422 +
          (((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
                C31224 +
            (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
                C31222 +
            (C38297 - C38298 + C38299 - C38300) * C31225 +
            (C38301 - C38302 + C38303 - C38304) * C47525) *
               C47157 * C47474 +
           ((C38298 - C38297 + C38300 - C38299) * C31224 +
            (C38302 - C38301 + C38304 - C38303) * C31222 +
            (C4743 * C6007 - C4747 * C6005 + C47523 * C22395 - C4748 * C22394) *
                C31225 +
            (C4743 * C6011 - C4747 * C6008 + C47523 * C22397 - C4748 * C22396) *
                C47525) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C4743 * C491 - C4747 * C481 + C47523 * C936 - C4748 * C931) *
                C31225 +
            (C4743 * C511 - C4747 * C492 + C47523 * C946 - C4748 * C937) *
                C47525) *
               C47157 * C47226 * C47544 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C4747 * C931 - C4743 * C936 + C4748 * C1289 - C47523 * C1301) *
                C31225 +
            (C4747 * C937 - C4743 * C946 + C4748 * C1302 - C47523 * C1316) *
                C47525) *
               C47157 * C47226 * C47532 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
                C31225 +
            (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C291 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C47544 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C47532 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C47505) *
              C292 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C47544 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C47532 +
           ((C4953 - C4952 + C4955 - C4954) * C31224 +
            (C4957 - C4956 + C4959 - C4958) * C31222 +
            (C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                C31225 +
            (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
               C31224 +
           (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
               C31222 +
           (C4743 * C491 - C4747 * C481 + C47523 * C936 - C4748 * C931) *
               C31225 +
           (C4743 * C511 - C4747 * C492 + C47523 * C946 - C4748 * C937) *
               C47525) *
              C47157 * C47226 * C47208 * C108 +
          ((C4751 - C4750 + C4753 - C4752) * C31224 +
           (C4755 - C4754 + C4757 - C4756) * C31222 +
           (C5106 - C5107 + C5108 - C5109) * C31225 +
           (C5110 - C5111 + C5112 - C5113) * C47525) *
              C47157 * C47226 * C47208 * C109 +
          ((C4759 - C4758 + C4761 - C4760) * C31224 +
           (C4763 - C4762 + C4765 - C4764) * C31222 +
           (C5122 - C5123 + C5124 - C5125) * C31225 +
           (C5126 - C5127 + C5128 - C5129) * C47525) *
              C47157 * C47226 * C47208 * C110 +
          ((C4767 - C4766 + C4769 - C4768) * C31224 +
           (C4771 - C4770 + C4773 - C4772) * C31222 +
           (C5406 - C5407 + C5408 - C5409) * C31225 +
           (C5410 - C5411 + C5412 - C5413) * C47525) *
              C47157 * C47226 * C47208 * C111 +
          ((C4775 - C4774 + C4777 - C4776) * C31224 +
           (C4779 - C4778 + C4781 - C4780) * C31222 +
           (C4743 * C507 - C4747 * C489 + C47523 * C944 - C4748 * C935) *
               C31225 +
           (C4743 * C519 - C4747 * C508 + C47523 * C950 - C4748 * C945) *
               C47525) *
              C47157 * C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47545 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47534 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C4743 * C2002 - C4747 * C1996 + C47523 * C2393 - C4748 * C2390) *
                C31225 +
            (C4743 * C2014 - C4747 * C2003 + C47523 * C2399 - C4748 * C2394) *
                C47525) *
               C47157 * C47508) *
              C47208 * C291 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47545 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C47534 +
           ((C5115 - C5114 + C5117 - C5116) * C31224 +
            (C5119 - C5118 + C5121 - C5120) * C31222 +
            (C7206 - C7207 + C7208 - C7209) * C31225 +
            (C7210 - C7211 + C7212 - C7213) * C47525) *
               C47157 * C47508) *
              C47208 * C292 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47545 +
           ((C5123 - C5122 + C5125 - C5124) * C31224 +
            (C5127 - C5126 + C5129 - C5128) * C31222 +
            (C5130 - C5131 + C5132 - C5133) * C31225 +
            (C5134 - C5135 + C5136 - C5137) * C47525) *
               C47157 * C47534 +
           ((C5131 - C5130 + C5133 - C5132) * C31224 +
            (C5135 - C5134 + C5137 - C5136) * C31222 +
            (C4743 * C2006 - C4747 * C1998 + C47523 * C2397 - C4748 * C2392) *
                C31225 +
            (C4743 * C2016 - C4747 * C2007 + C47523 * C2401 - C4748 * C2398) *
                C47525) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
                C31225 +
            (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C47505) *
              C47528 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4953 - C4952 + C4955 - C4954) * C31224 +
            (C4957 - C4956 + C4959 - C4958) * C31222 +
            (C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                C31225 +
            (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
               C31224 +
           (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
               C31222 +
           (C36967 - C36968 + C36969 - C36970) * C31225 +
           (C36971 - C36972 + C36973 - C36974) * C47525) *
              C47157 * C47226 * C1146 +
          ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
               C31224 +
           (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
               C31222 +
           (C37437 - C37438 + C37439 - C37440) * C31225 +
           (C37441 - C37442 + C37443 - C37444) * C47525) *
              C47157 * C47226 * C1147 +
          ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
               C31224 +
           (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
               C31222 +
           (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
               C31225 +
           (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
               C47525) *
              C47157 * C47226 * C1148 +
          ((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
               C31224 +
           (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
               C31222 +
           (C4747 * C1694 - C4743 * C1697 + C4748 * C6483 - C47523 * C6485) *
               C31225 +
           (C4747 * C1698 - C4743 * C1703 + C4748 * C6486 - C47523 * C6489) *
               C47525) *
              C47157 * C47226 * C1149 +
          ((C4743 * C1164 - C4747 * C1155 + C47523 * C5853 - C4748 * C5851) *
               C31224 +
           (C4743 * C1173 - C4747 * C1165 + C47523 * C5857 - C4748 * C5854) *
               C31222 +
           (C4743 * C6485 - C4747 * C6483 + C47523 * C22741 - C4748 * C22740) *
               C31225 +
           (C4743 * C6489 - C4747 * C6486 + C47523 * C22743 - C4748 * C22742) *
               C47525) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47545 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47534 +
           ((C36976 - C36975 + C36978 - C36977) * C31224 +
            (C36980 - C36979 + C36982 - C36981) * C31222 +
            (C4743 * C2002 - C4747 * C1996 + C47523 * C2393 - C4748 * C2390) *
                C31225 +
            (C4743 * C2014 - C4747 * C2003 + C47523 * C2399 - C4748 * C2394) *
                C47525) *
               C47157 * C47508) *
              C1078 +
          (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47545 +
           ((C37438 - C37437 + C37440 - C37439) * C31224 +
            (C37442 - C37441 + C37444 - C37443) * C31222 +
            (C37819 - C37820 + C37821 - C37822) * C31225 +
            (C37823 - C37824 + C37825 - C37826) * C47525) *
               C47157 * C47534 +
           ((C37820 - C37819 + C37822 - C37821) * C31224 +
            (C37824 - C37823 + C37826 - C37825) * C31222 +
            (C4747 * C2390 - C4743 * C2393 + C4748 * C7343 - C47523 * C7345) *
                C31225 +
            (C4747 * C2394 - C4743 * C2399 + C4748 * C7346 - C47523 * C7349) *
                C47525) *
               C47157 * C47508) *
              C1079 +
          (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C37827 - C37828 + C37829 - C37830) * C31225 +
            (C37831 - C37832 + C37833 - C37834) * C47525) *
               C47157 * C47545 +
           ((C37828 - C37827 + C37830 - C37829) * C31224 +
            (C37832 - C37831 + C37834 - C37833) * C31222 +
            (C37835 - C37836 + C37837 - C37838) * C31225 +
            (C37839 - C37840 + C37841 - C37842) * C47525) *
               C47157 * C47534 +
           ((C37836 - C37835 + C37838 - C37837) * C31224 +
            (C37840 - C37839 + C37842 - C37841) * C31222 +
            (C4743 * C7345 - C4747 * C7343 + C47523 * C23373 - C4748 * C23372) *
                C31225 +
            (C4743 * C7349 - C4747 * C7346 + C47523 * C23375 - C4748 * C23374) *
                C47525) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47474 +
           ((C36968 - C36967 + C36970 - C36969) * C31224 +
            (C36972 - C36971 + C36974 - C36973) * C31222 +
            (C36975 - C36976 + C36977 - C36978) * C31225 +
            (C36979 - C36980 + C36981 - C36982) * C47525) *
               C47157 * C47313) *
              C47208 * C655 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47474 +
           ((C5107 - C5106 + C5109 - C5108) * C31224 +
            (C5111 - C5110 + C5113 - C5112) * C31222 +
            (C5114 - C5115 + C5116 - C5117) * C31225 +
            (C5118 - C5119 + C5120 - C5121) * C47525) *
               C47157 * C47313) *
              C47208 * C656 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47474 +
           ((C5123 - C5122 + C5125 - C5124) * C31224 +
            (C5127 - C5126 + C5129 - C5128) * C31222 +
            (C5130 - C5131 + C5132 - C5133) * C31225 +
            (C5134 - C5135 + C5136 - C5137) * C47525) *
               C47157 * C47313) *
              C47208 * C657 +
          (((C4767 - C4766 + C4769 - C4768) * C31224 +
            (C4771 - C4770 + C4773 - C4772) * C31222 +
            (C5406 - C5407 + C5408 - C5409) * C31225 +
            (C5410 - C5411 + C5412 - C5413) * C47525) *
               C47157 * C47474 +
           ((C5407 - C5406 + C5409 - C5408) * C31224 +
            (C5411 - C5410 + C5413 - C5412) * C31222 +
            (C4743 * C505 - C4747 * C488 + C47523 * C2167 - C4748 * C2166) *
                C31225 +
            (C4743 * C518 - C4747 * C506 + C47523 * C2169 - C4748 * C2168) *
                C47525) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                 C31224 +
             (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                 C31222 +
             (C36967 - C36968 + C36969 - C36970) * C31225 +
             (C36971 - C36972 + C36973 - C36974) * C47525) *
                C47157 * C47474 +
            ((C36968 - C36967 + C36970 - C36969) * C31224 +
             (C36972 - C36971 + C36974 - C36973) * C31222 +
             (C36975 - C36976 + C36977 - C36978) * C31225 +
             (C36979 - C36980 + C36981 - C36982) * C47525) *
                C47157 * C47313) *
               C1078 +
           (((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                 C31224 +
             (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                 C31222 +
             (C37437 - C37438 + C37439 - C37440) * C31225 +
             (C37441 - C37442 + C37443 - C37444) * C47525) *
                C47157 * C47474 +
            ((C37438 - C37437 + C37440 - C37439) * C31224 +
             (C37442 - C37441 + C37444 - C37443) * C31222 +
             (C37819 - C37820 + C37821 - C37822) * C31225 +
             (C37823 - C37824 + C37825 - C37826) * C47525) *
                C47157 * C47313) *
               C1079 +
           (((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                 C31224 +
             (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                 C31222 +
             (C37827 - C37828 + C37829 - C37830) * C31225 +
             (C37831 - C37832 + C37833 - C37834) * C47525) *
                C47157 * C47474 +
            ((C37828 - C37827 + C37830 - C37829) * C31224 +
             (C37832 - C37831 + C37834 - C37833) * C31222 +
             (C37835 - C37836 + C37837 - C37838) * C31225 +
             (C37839 - C37840 + C37841 - C37842) * C47525) *
                C47157 * C47313) *
               C47505) *
              C47459 +
          ((((C4751 - C4750 + C4753 - C4752) * C31224 +
             (C4755 - C4754 + C4757 - C4756) * C31222 +
             (C5106 - C5107 + C5108 - C5109) * C31225 +
             (C5110 - C5111 + C5112 - C5113) * C47525) *
                C47157 * C47474 +
            ((C5107 - C5106 + C5109 - C5108) * C31224 +
             (C5111 - C5110 + C5113 - C5112) * C31222 +
             (C5114 - C5115 + C5116 - C5117) * C31225 +
             (C5118 - C5119 + C5120 - C5121) * C47525) *
                C47157 * C47313) *
               C1078 +
           (((C4929 - C4928 + C4931 - C4930) * C31224 +
             (C4933 - C4932 + C4935 - C4934) * C31222 +
             (C5608 - C5609 + C5610 - C5611) * C31225 +
             (C5612 - C5613 + C5614 - C5615) * C47525) *
                C47157 * C47474 +
            ((C5609 - C5608 + C5611 - C5610) * C31224 +
             (C5613 - C5612 + C5615 - C5614) * C31222 +
             (C7068 - C7069 + C7070 - C7071) * C31225 +
             (C7072 - C7073 + C7074 - C7075) * C47525) *
                C47157 * C47313) *
               C1079 +
           (((C4937 - C4936 + C4939 - C4938) * C31224 +
             (C4941 - C4940 + C4943 - C4942) * C31222 +
             (C6346 - C6347 + C6348 - C6349) * C31225 +
             (C6350 - C6351 + C6352 - C6353) * C47525) *
                C47157 * C47474 +
            ((C6347 - C6346 + C6349 - C6348) * C31224 +
             (C6351 - C6350 + C6353 - C6352) * C31222 +
             (C4743 * C1309 - C4747 * C1293 + C47523 * C6009 - C4748 * C6006) *
                 C31225 +
             (C4743 * C1320 - C4747 * C1310 + C47523 * C6012 - C4748 * C6010) *
                 C47525) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
               C31224 +
           (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
               C31222 +
           (C4743 * C491 - C4747 * C481 + C47523 * C936 - C4748 * C931) *
               C31225 +
           (C4743 * C511 - C4747 * C492 + C47523 * C946 - C4748 * C937) *
               C47525) *
              C47157 * C47226 * C47208 * C108 +
          ((C4751 - C4750 + C4753 - C4752) * C31224 +
           (C4755 - C4754 + C4757 - C4756) * C31222 +
           (C5106 - C5107 + C5108 - C5109) * C31225 +
           (C5110 - C5111 + C5112 - C5113) * C47525) *
              C47157 * C47226 * C47208 * C109 +
          ((C4759 - C4758 + C4761 - C4760) * C31224 +
           (C4763 - C4762 + C4765 - C4764) * C31222 +
           (C5122 - C5123 + C5124 - C5125) * C31225 +
           (C5126 - C5127 + C5128 - C5129) * C47525) *
              C47157 * C47226 * C47208 * C110 +
          ((C4767 - C4766 + C4769 - C4768) * C31224 +
           (C4771 - C4770 + C4773 - C4772) * C31222 +
           (C5406 - C5407 + C5408 - C5409) * C31225 +
           (C5410 - C5411 + C5412 - C5413) * C47525) *
              C47157 * C47226 * C47208 * C111 +
          ((C4775 - C4774 + C4777 - C4776) * C31224 +
           (C4779 - C4778 + C4781 - C4780) * C31222 +
           (C4743 * C507 - C4747 * C489 + C47523 * C944 - C4748 * C935) *
               C31225 +
           (C4743 * C519 - C4747 * C508 + C47523 * C950 - C4748 * C945) *
               C47525) *
              C47157 * C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C4743 * C491 - C4747 * C481 + C47523 * C936 - C4748 * C931) *
                C31225 +
            (C4743 * C511 - C4747 * C492 + C47523 * C946 - C4748 * C937) *
                C47525) *
               C47157 * C47226 * C47544 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C4747 * C931 - C4743 * C936 + C4748 * C1289 - C47523 * C1301) *
                C31225 +
            (C4747 * C937 - C4743 * C946 + C4748 * C1302 - C47523 * C1316) *
                C47525) *
               C47157 * C47226 * C47532 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
                C31225 +
            (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C291 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C47544 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C47532 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C47505) *
              C292 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C47544 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C47532 +
           ((C4953 - C4952 + C4955 - C4954) * C31224 +
            (C4957 - C4956 + C4959 - C4958) * C31222 +
            (C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                C31225 +
            (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
                C31224 +
            (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
                C31222 +
            (C36967 - C36968 + C36969 - C36970) * C31225 +
            (C36971 - C36972 + C36973 - C36974) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
                C31224 +
            (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
                C31222 +
            (C37437 - C37438 + C37439 - C37440) * C31225 +
            (C37441 - C37442 + C37443 - C37444) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
                C31224 +
            (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
                C31222 +
            (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
                C31225 +
            (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C4751 - C4750 + C4753 - C4752) * C31224 +
            (C4755 - C4754 + C4757 - C4756) * C31222 +
            (C5106 - C5107 + C5108 - C5109) * C31225 +
            (C5110 - C5111 + C5112 - C5113) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4929 - C4928 + C4931 - C4930) * C31224 +
            (C4933 - C4932 + C4935 - C4934) * C31222 +
            (C5608 - C5609 + C5610 - C5611) * C31225 +
            (C5612 - C5613 + C5614 - C5615) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4937 - C4936 + C4939 - C4938) * C31224 +
            (C4941 - C4940 + C4943 - C4942) * C31222 +
            (C6346 - C6347 + C6348 - C6349) * C31225 +
            (C6350 - C6351 + C6352 - C6353) * C47525) *
               C47157 * C47226 * C47505) *
              C47528 +
          (((C4759 - C4758 + C4761 - C4760) * C31224 +
            (C4763 - C4762 + C4765 - C4764) * C31222 +
            (C5122 - C5123 + C5124 - C5125) * C31225 +
            (C5126 - C5127 + C5128 - C5129) * C47525) *
               C47157 * C47226 * C1078 +
           ((C4945 - C4944 + C4947 - C4946) * C31224 +
            (C4949 - C4948 + C4951 - C4950) * C31222 +
            (C5616 - C5617 + C5618 - C5619) * C31225 +
            (C5620 - C5621 + C5622 - C5623) * C47525) *
               C47157 * C47226 * C1079 +
           ((C4953 - C4952 + C4955 - C4954) * C31224 +
            (C4957 - C4956 + C4959 - C4958) * C31222 +
            (C4743 * C1305 - C4747 * C1291 + C47523 * C1701 - C4748 * C1696) *
                C31225 +
            (C4743 * C1318 - C4747 * C1306 + C47523 * C1705 - C4748 * C1702) *
                C47525) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4743 * C122 - C4747 * C115 + C47523 * C304 - C4748 * C294) *
               C31224 +
           (C4743 * C136 - C4747 * C123 + C47523 * C324 - C4748 * C305) *
               C31222 +
           (C36967 - C36968 + C36969 - C36970) * C31225 +
           (C36971 - C36972 + C36973 - C36974) * C47525) *
              C47157 * C47226 * C1146 +
          ((C4747 * C294 - C4743 * C304 + C4748 * C297 - C47523 * C310) *
               C31224 +
           (C4747 * C305 - C4743 * C324 + C4748 * C311 - C47523 * C327) *
               C31222 +
           (C37437 - C37438 + C37439 - C37440) * C31225 +
           (C37441 - C37442 + C37443 - C37444) * C47525) *
              C47157 * C47226 * C1147 +
          ((C4743 * C310 - C4747 * C297 + C47523 * C1158 - C4748 * C1152) *
               C31224 +
           (C4743 * C327 - C4747 * C311 + C47523 * C1170 - C4748 * C1159) *
               C31222 +
           (C4743 * C1301 - C4747 * C1289 + C47523 * C1697 - C4748 * C1694) *
               C31225 +
           (C4743 * C1316 - C4747 * C1302 + C47523 * C1703 - C4748 * C1698) *
               C47525) *
              C47157 * C47226 * C1148 +
          ((C4747 * C1152 - C4743 * C1158 + C4748 * C1155 - C47523 * C1164) *
               C31224 +
           (C4747 * C1159 - C4743 * C1170 + C4748 * C1165 - C47523 * C1173) *
               C31222 +
           (C4747 * C1694 - C4743 * C1697 + C4748 * C6483 - C47523 * C6485) *
               C31225 +
           (C4747 * C1698 - C4743 * C1703 + C4748 * C6486 - C47523 * C6489) *
               C47525) *
              C47157 * C47226 * C1149 +
          ((C4743 * C1164 - C4747 * C1155 + C47523 * C5853 - C4748 * C5851) *
               C31224 +
           (C4743 * C1173 - C4747 * C1165 + C47523 * C5857 - C4748 * C5854) *
               C31222 +
           (C4743 * C6485 - C4747 * C6483 + C47523 * C22741 - C4748 * C22740) *
               C31225 +
           (C4743 * C6489 - C4747 * C6486 + C47523 * C22743 - C4748 * C22742) *
               C47525) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C47267 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47226 * C47274 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C47226 * C2868) *
              C47185 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C47267 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C47274 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C2868) *
              C47194 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C47267 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C47274 +
           (C361 * C42185 + C362 * C42182 + (C1594 - C1593) * C42186 +
            (C1596 - C1595) * C42183 +
            (C47411 * C1311 - C113 * C1294) * C42187 +
            (C47411 * C1321 - C113 * C1312) * C42184) *
               C47157 * C47226 * C2868) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C47474 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47313) *
               C47267 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C47474 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47313) *
               C47274 +
           (((C47411 * C310 - C113 * C297) * C42185 +
             (C47411 * C327 - C113 * C311) * C42182 +
             (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
             C43037 * C42187 + C43038 * C42184) *
                C47157 * C47474 +
            ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
             (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
             (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
                C47157 * C47313) *
               C2868) *
              C2608 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C47474 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C47267 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C47474 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C47274 +
           (((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
             C11901 * C42183 + (C11566 - C11567) * C42187 +
             (C11568 - C11569) * C42184) *
                C47157 * C47474 +
            (C11898 * C42185 + C11899 * C42182 + (C11567 - C11566) * C42186 +
             (C11569 - C11568) * C42183 +
             (C47411 * C7347 - C113 * C7344) * C42187 +
             (C47411 * C7350 - C113 * C7348) * C42184) *
                C47157 * C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C47551 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47226 * C47547 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C47226 * C47537 +
           ((C113 * C1152 - C47411 * C1158) * C42185 +
            (C113 * C1159 - C47411 * C1170) * C42182 +
            (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
            (C43385 - C43386) * C42187 + (C43387 - C43388) * C42184) *
               C47157 * C47226 * C47515) *
              C2608 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C47551 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C47547 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C47537 +
           ((C1432 - C1431) * C42185 + (C1434 - C1433) * C42182 +
            (C11701 - C11700) * C42186 + (C11703 - C11702) * C42183 +
            (C47411 * C6009 - C113 * C6006) * C42187 +
            (C47411 * C6012 - C113 * C6010) * C42184) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C2500 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47226 * C47271) *
              C47550 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C2500 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C47271) *
              C47543 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C2500 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C47271) *
              C47530 +
          ((C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
            (C542 - C543) * C42187 + (C544 - C545) * C42184) *
               C47157 * C47226 * C2500 +
           (C664 * C42185 + C665 * C42182 + (C961 - C960) * C42186 +
            (C963 - C962) * C42183 + (C47411 * C2167 - C113 * C2166) * C42187 +
            (C47411 * C2169 - C113 * C2168) * C42184) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C47545 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47534 +
            (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
             (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
                C47157 * C47508) *
               C2500 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C47545 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47534 +
            (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
             (C12898 - C12899) * C42183 + (C44027 - C44028) * C42187 +
             (C44029 - C44030) * C42184) *
                C47157 * C47508) *
               C47271) *
              C2608 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C47545 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47534 +
            (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
             C12765 * C42183 + (C12426 - C12427) * C42187 +
             (C12428 - C12429) * C42184) *
                C47157 * C47508) *
               C2500 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C47545 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47534 +
            (C12624 * C42185 + C12625 * C42182 + (C12629 - C12628) * C42186 +
             (C12631 - C12630) * C42183 +
             (C47411 * C6869 - C113 * C6866) * C42187 +
             (C47411 * C6872 - C113 * C6870) * C42184) *
                C47157 * C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C47474 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47313) *
               C2500 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C47474 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47313) *
               C47271) *
              C47185 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C47474 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C2500 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C47474 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C47271) *
              C47194 +
          (((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
             C548 * C42187 + C549 * C42184) *
                C47157 * C47474 +
            (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
             (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
                C47157 * C47313) *
               C2500 +
           ((C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
             (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
                C47157 * C47474 +
            (C964 * C42185 + C965 * C42182 + (C2176 - C2175) * C42186 +
             (C2178 - C2177) * C42183 +
             (C47411 * C2397 - C113 * C2392) * C42187 +
             (C47411 * C2401 - C113 * C2398) * C42184) *
                C47157 * C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C2500 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47226 * C47271) *
              C47550 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C2500 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C47271) *
              C47543 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C2500 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C47271) *
              C47530 +
          ((C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
            (C542 - C543) * C42187 + (C544 - C545) * C42184) *
               C47157 * C47226 * C2500 +
           (C664 * C42185 + C665 * C42182 + (C961 - C960) * C42186 +
            (C963 - C962) * C42183 + (C47411 * C2167 - C113 * C2166) * C42187 +
            (C47411 * C2169 - C113 * C2168) * C42184) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C47551 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47226 * C47547 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C47226 * C47537 +
           ((C113 * C1152 - C47411 * C1158) * C42185 +
            (C113 * C1159 - C47411 * C1170) * C42182 +
            (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
            (C43385 - C43386) * C42187 + (C43387 - C43388) * C42184) *
               C47157 * C47226 * C47515) *
              C2608 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C47551 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C47547 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C47537 +
           ((C1432 - C1431) * C42185 + (C1434 - C1433) * C42182 +
            (C11701 - C11700) * C42186 + (C11703 - C11702) * C42183 +
            (C47411 * C6009 - C113 * C6006) * C42187 +
            (C47411 * C6012 - C113 * C6010) * C42184) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C3262 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47313) *
               C47267 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C3262 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47313) *
               C47274 +
           (((C47411 * C310 - C113 * C297) * C42185 +
             (C47411 * C327 - C113 * C311) * C42182 +
             (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
             C43037 * C42187 + C43038 * C42184) *
                C47157 * C3262 +
            ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
             (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
             (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
                C47157 * C47313) *
               C2868) *
              C47459 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C3262 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C47267 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C3262 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C47274 +
           (((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
             C11901 * C42183 + (C11566 - C11567) * C42187 +
             (C11568 - C11569) * C42184) *
                C47157 * C3262 +
            (C11898 * C42185 + C11899 * C42182 + (C11567 - C11566) * C42186 +
             (C11569 - C11568) * C42183 +
             (C47411 * C7347 - C113 * C7344) * C42187 +
             (C47411 * C7350 - C113 * C7348) * C42184) *
                C47157 * C47313) *
               C2868) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47309 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47157 * C47316 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47157 * C3770) *
              C47267 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47309 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            C44025 * C42187 + C44026 * C42184) *
               C47157 * C47316 +
           (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
            (C12898 - C12899) * C42183 + (C44027 - C44028) * C42187 +
            (C44029 - C44030) * C42184) *
               C47157 * C3770) *
              C47274 +
          (((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C47309 +
           ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
            (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
            (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
               C47157 * C47316 +
           (C43037 * C42185 + C43038 * C42182 + (C43040 - C43039) * C42186 +
            (C43042 - C43041) * C42183 +
            (C47411 * C23027 - C113 * C23026) * C42187 +
            (C47411 * C23029 - C113 * C23028) * C42184) *
               C47157 * C3770) *
              C2868) *
         C47180) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C3262 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47157 * C47313) *
              C47551 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C3262 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            C44025 * C42187 + C44026 * C42184) *
               C47157 * C47313) *
              C47547 +
          (((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C3262 +
           ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
            (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
            (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
               C47157 * C47313) *
              C47537 +
          (((C113 * C1152 - C47411 * C1158) * C42185 +
            (C113 * C1159 - C47411 * C1170) * C42182 +
            (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
            (C43385 - C43386) * C42187 + (C43387 - C43388) * C42184) *
               C47157 * C3262 +
           ((C12033 - C12032) * C42185 + (C12035 - C12034) * C42182 +
            (C43386 - C43385) * C42186 + (C43388 - C43387) * C42183 +
            (C47411 * C23373 - C113 * C23372) * C42187 +
            (C47411 * C23375 - C113 * C23374) * C42184) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C3262 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47313) *
               C2500 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C3262 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47313) *
               C47271) *
              C47541 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C3262 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C2500 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C3262 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C47271) *
              C47528 +
          (((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
             C548 * C42187 + C549 * C42184) *
                C47157 * C3262 +
            (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
             (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
                C47157 * C47313) *
               C2500 +
           ((C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
             (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
                C47157 * C3262 +
            (C964 * C42185 + C965 * C42182 + (C2176 - C2175) * C42186 +
             (C2178 - C2177) * C42183 +
             (C47411 * C2397 - C113 * C2392) * C42187 +
             (C47411 * C2401 - C113 * C2398) * C42184) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47552 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47157 * C47549 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47157 * C47540 +
           (C43675 * C42185 + C43676 * C42182 + (C12422 - C12423) * C42186 +
            (C12424 - C12425) * C42183 + (C43679 - C43680) * C42187 +
            (C43681 - C43682) * C42184) *
               C47157 * C47521) *
              C2500 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47552 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            C44025 * C42187 + C44026 * C42184) *
               C47157 * C47549 +
           (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
            (C12898 - C12899) * C42183 + (C44027 - C44028) * C42187 +
            (C44029 - C44030) * C42184) *
               C47157 * C47540 +
           (C44025 * C42185 + C44026 * C42182 + (C44028 - C44027) * C42186 +
            (C44030 - C44029) * C42183 +
            (C47411 * C27695 - C113 * C27694) * C42187 +
            (C47411 * C27697 - C113 * C27696) * C42184) *
               C47157 * C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C47309 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47316 +
            (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
             (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
                C47157 * C3770) *
               C2500 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C47309 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47316 +
            (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
             (C12898 - C12899) * C42183 + (C44027 - C44028) * C42187 +
             (C44029 - C44030) * C42184) *
                C47157 * C3770) *
               C47271) *
              C47459 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C47309 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47316 +
            (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
             C12765 * C42183 + (C12426 - C12427) * C42187 +
             (C12428 - C12429) * C42184) *
                C47157 * C3770) *
               C2500 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C47309 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47316 +
            (C12624 * C42185 + C12625 * C42182 + (C12629 - C12628) * C42186 +
             (C12631 - C12630) * C42183 +
             (C47411 * C6869 - C113 * C6866) * C42187 +
             (C47411 * C6872 - C113 * C6870) * C42184) *
                C47157 * C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C3262 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47313) *
               C2500 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C3262 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47313) *
               C47271) *
              C47541 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C3262 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C2500 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C3262 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C47271) *
              C47528 +
          (((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
             C548 * C42187 + C549 * C42184) *
                C47157 * C3262 +
            (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
             (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
                C47157 * C47313) *
               C2500 +
           ((C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
             (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
                C47157 * C3262 +
            (C964 * C42185 + C965 * C42182 + (C2176 - C2175) * C42186 +
             (C2178 - C2177) * C42183 +
             (C47411 * C2397 - C113 * C2392) * C42187 +
             (C47411 * C2401 - C113 * C2398) * C42184) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C3262 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47157 * C47313) *
              C47551 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C3262 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            C44025 * C42187 + C44026 * C42184) *
               C47157 * C47313) *
              C47547 +
          (((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C3262 +
           ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
            (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
            (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
               C47157 * C47313) *
              C47537 +
          (((C113 * C1152 - C47411 * C1158) * C42185 +
            (C113 * C1159 - C47411 * C1170) * C42182 +
            (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
            (C43385 - C43386) * C42187 + (C43387 - C43388) * C42184) *
               C47157 * C3262 +
           ((C12033 - C12032) * C42185 + (C12035 - C12034) * C42182 +
            (C43386 - C43385) * C42186 + (C43388 - C43387) * C42183 +
            (C47411 * C23373 - C113 * C23372) * C42187 +
            (C47411 * C23375 - C113 * C23374) * C42184) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C1420 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47226 * C1421 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C47226 * C1422 +
           ((C113 * C1152 - C47411 * C1158) * C42185 +
            (C113 * C1159 - C47411 * C1170) * C42182 +
            (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
            (C113 * C6005 - C47411 * C6007) * C42187 +
            (C113 * C6008 - C47411 * C6011) * C42184) *
               C47157 * C47226 * C47515) *
              C47459 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C1420 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C1421 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C1422 +
           ((C1432 - C1431) * C42185 + (C1434 - C1433) * C42182 +
            (C11701 - C11700) * C42186 + (C11703 - C11702) * C42183 +
            (C47411 * C6009 - C113 * C6006) * C42187 +
            (C47411 * C6012 - C113 * C6010) * C42184) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C47473 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
               C47157 * C47226 * C47271) *
              C655 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C47473 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C47271) *
              C656 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C47473 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C47271) *
              C657 +
          ((C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
            (C542 - C543) * C42187 + (C544 - C545) * C42184) *
               C47157 * C47226 * C47473 +
           (C664 * C42185 + C665 * C42182 + (C961 - C960) * C42186 +
            (C963 - C962) * C42183 + (C47411 * C2167 - C113 * C2166) * C42187 +
            (C47411 * C2169 - C113 * C2168) * C42184) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C1816 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C1817 +
            (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
             (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
                C47157 * C47508) *
               C47473 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C1816 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
                C47157 * C1817 +
            (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
             (C12898 - C12899) * C42183 +
             (C113 * C6865 - C47411 * C6867) * C42187 +
             (C113 * C6868 - C47411 * C6871) * C42184) *
                C47157 * C47508) *
               C47271) *
              C47459 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C1816 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C1817 +
            (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
             C12765 * C42183 + (C12426 - C12427) * C42187 +
             (C12428 - C12429) * C42184) *
                C47157 * C47508) *
               C47473 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C1816 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C1817 +
            (C12624 * C42185 + C12625 * C42182 + (C12629 - C12628) * C42186 +
             (C12631 - C12630) * C42183 +
             (C47411 * C6869 - C113 * C6866) * C42187 +
             (C47411 * C6872 - C113 * C6870) * C42184) *
                C47157 * C47508) *
               C47271) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47474 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C47313) *
              C1420 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47474 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
               C47157 * C47313) *
              C1421 +
          (((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C47474 +
           ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
            (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
            (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
               C47157 * C47313) *
              C1422 +
          (((C113 * C1152 - C47411 * C1158) * C42185 +
            (C113 * C1159 - C47411 * C1170) * C42182 +
            (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
            (C43385 - C43386) * C42187 + (C43387 - C43388) * C42184) *
               C47157 * C47474 +
           ((C12033 - C12032) * C42185 + (C12035 - C12034) * C42182 +
            (C43386 - C43385) * C42186 + (C43388 - C43387) * C42183 +
            (C47411 * C23373 - C113 * C23372) * C42187 +
            (C47411 * C23375 - C113 * C23374) * C42184) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C47474 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
                C47157 * C47313) *
               C47473 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
                C47157 * C47474 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
                C47157 * C47313) *
               C47271) *
              C291 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C47474 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C47473 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C47474 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C47271) *
              C292 +
          (((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
             C548 * C42187 + C549 * C42184) *
                C47157 * C47474 +
            (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
             (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
                C47157 * C47313) *
               C47473 +
           ((C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
             (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
                C47157 * C47474 +
            (C964 * C42185 + C965 * C42182 + (C2176 - C2175) * C42186 +
             (C2178 - C2177) * C42183 +
             (C47411 * C2397 - C113 * C2392) * C42187 +
             (C47411 * C2401 - C113 * C2398) * C42184) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C2276 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47157 * C2277 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47157 * C2278 +
           (C43675 * C42185 + C43676 * C42182 + (C12422 - C12423) * C42186 +
            (C12424 - C12425) * C42183 + (C43679 - C43680) * C42187 +
            (C43681 - C43682) * C42184) *
               C47157 * C47521) *
              C47473 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C2276 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            C44025 * C42187 + C44026 * C42184) *
               C47157 * C2277 +
           (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
            (C12898 - C12899) * C42183 + (C44027 - C44028) * C42187 +
            (C44029 - C44030) * C42184) *
               C47157 * C2278 +
           (C44025 * C42185 + C44026 * C42182 + (C44028 - C44027) * C42186 +
            (C44030 - C44029) * C42183 +
            (C47411 * C27695 - C113 * C27694) * C42187 +
            (C47411 * C27697 - C113 * C27696) * C42184) *
               C47157 * C47521) *
              C47271) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C47411 * C122 - C113 * C115) * C42185 +
               (C47411 * C136 - C113 * C123) * C42182 +
               (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
               (C10701 - C10700) * C42187 + (C10703 - C10702) * C42184) *
                  C47157 * C47226 * C47208 * C108 +
              ((C145 - C144) * C42185 + (C147 - C146) * C42182 +
               C10704 * C42186 + C10705 * C42183 + C10706 * C42187 +
               C10707 * C42184) *
                  C47157 * C47226 * C47208 * C109 +
              (C164 * C42185 + C165 * C42182 + C10710 * C42186 +
               C10711 * C42183 + C548 * C42187 + C549 * C42184) *
                  C47157 * C47226 * C47208 * C110 +
              (C166 * C42185 + C167 * C42182 + C10974 * C42186 +
               C10975 * C42183 + (C542 - C543) * C42187 +
               (C544 - C545) * C42184) *
                  C47157 * C47226 * C47208 * C111 +
              (C168 * C42185 + C169 * C42182 + (C780 - C779) * C42186 +
               (C782 - C781) * C42183 + (C47411 * C509 - C113 * C490) * C42187 +
               (C47411 * C520 - C113 * C510) * C42184) *
                  C47157 * C47226 * C47208 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C47411 * C122 - C113 * C115) * C42185 +
                (C47411 * C136 - C113 * C123) * C42182 +
                (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
                (C10701 - C10700) * C42187 + (C10703 - C10702) * C42184) *
                   C47157 * C47226 * C47544 +
               ((C113 * C294 - C47411 * C304) * C42185 +
                (C113 * C305 - C47411 * C324) * C42182 +
                (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
                (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
                   C47157 * C47226 * C47532 +
               ((C47411 * C310 - C113 * C297) * C42185 +
                (C47411 * C327 - C113 * C311) * C42182 +
                (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
                (C11563 - C11562) * C42187 + (C11565 - C11564) * C42184) *
                   C47157 * C47226 * C47505) *
                  C291 +
              (((C145 - C144) * C42185 + (C147 - C146) * C42182 +
                C10704 * C42186 + C10705 * C42183 + C10706 * C42187 +
                C10707 * C42184) *
                   C47157 * C47226 * C47544 +
               ((C336 - C335) * C42185 + (C338 - C337) * C42182 +
                C11176 * C42186 + C11177 * C42183 + C12624 * C42187 +
                C12625 * C42184) *
                   C47157 * C47226 * C47532 +
               ((C344 - C343) * C42185 + (C346 - C345) * C42182 +
                C11900 * C42186 + C11901 * C42183 + (C11566 - C11567) * C42187 +
                (C11568 - C11569) * C42184) *
                   C47157 * C47226 * C47505) *
                  C292 +
              ((C164 * C42185 + C165 * C42182 + C10710 * C42186 +
                C10711 * C42183 + C548 * C42187 + C549 * C42184) *
                   C47157 * C47226 * C47544 +
               (C359 * C42185 + C360 * C42182 + C11178 * C42186 +
                C11179 * C42183 + (C2175 - C2176) * C42187 +
                (C2177 - C2178) * C42184) *
                   C47157 * C47226 * C47532 +
               (C361 * C42185 + C362 * C42182 + (C1594 - C1593) * C42186 +
                (C1596 - C1595) * C42183 +
                (C47411 * C1311 - C113 * C1294) * C42187 +
                (C47411 * C1321 - C113 * C1312) * C42184) *
                   C47157 * C47226 * C47505) *
                  C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47545 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C47534 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + (C12423 - C12422) * C42187 +
            (C12425 - C12424) * C42184) *
               C47157 * C47508) *
              C47208 * C291 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47545 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C47534 +
           (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
            C12765 * C42183 + (C12426 - C12427) * C42187 +
            (C12428 - C12429) * C42184) *
               C47157 * C47508) *
              C47208 * C292 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47545 +
           (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
            (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
               C47157 * C47534 +
           (C548 * C42185 + C549 * C42182 + (C2290 - C2289) * C42186 +
            (C2292 - C2291) * C42183 +
            (C47411 * C2012 - C113 * C2001) * C42187 +
            (C47411 * C2019 - C113 * C2013) * C42184) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C1078 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
               C47157 * C47226 * C1079 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            (C11563 - C11562) * C42187 + (C11565 - C11564) * C42184) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C1078 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C1079 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C47505) *
              C47528 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C1078 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C1079 +
           (C361 * C42185 + C362 * C42182 + (C1594 - C1593) * C42186 +
            (C1596 - C1595) * C42183 +
            (C47411 * C1311 - C113 * C1294) * C42187 +
            (C47411 * C1321 - C113 * C1312) * C42184) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C47411 * C122 - C113 * C115) * C42185 +
           (C47411 * C136 - C113 * C123) * C42182 + (C10694 - C10695) * C42186 +
           (C10696 - C10697) * C42183 + C42409 * C42187 + C42410 * C42184) *
              C47157 * C47226 * C1146 +
          ((C113 * C294 - C47411 * C304) * C42185 +
           (C113 * C305 - C47411 * C324) * C42182 + (C11170 - C11171) * C42186 +
           (C11172 - C11173) * C42183 + (C11555 - C11554) * C42187 +
           (C11557 - C11556) * C42184) *
              C47157 * C47226 * C1147 +
          ((C47411 * C310 - C113 * C297) * C42185 +
           (C47411 * C327 - C113 * C311) * C42182 + (C11558 - C11559) * C42186 +
           (C11560 - C11561) * C42183 + (C11563 - C11562) * C42187 +
           (C11565 - C11564) * C42184) *
              C47157 * C47226 * C1148 +
          ((C113 * C1152 - C47411 * C1158) * C42185 +
           (C113 * C1159 - C47411 * C1170) * C42182 +
           (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
           (C113 * C6005 - C47411 * C6007) * C42187 +
           (C113 * C6008 - C47411 * C6011) * C42184) *
              C47157 * C47226 * C1149 +
          ((C47411 * C1164 - C113 * C1155) * C42185 +
           (C47411 * C1173 - C113 * C1165) * C42182 +
           (C47411 * C6485 - C113 * C6483) * C42186 +
           (C47411 * C6489 - C113 * C6486) * C42183 +
           (C47411 * C22395 - C113 * C22394) * C42187 +
           (C47411 * C22397 - C113 * C22396) * C42184) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47545 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C47534 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + (C12423 - C12422) * C42187 +
            (C12425 - C12424) * C42184) *
               C47157 * C47508) *
              C1078 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47545 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
               C47157 * C47534 +
           (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
            (C12898 - C12899) * C42183 +
            (C113 * C6865 - C47411 * C6867) * C42187 +
            (C113 * C6868 - C47411 * C6871) * C42184) *
               C47157 * C47508) *
              C1079 +
          (((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C47545 +
           ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
            (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
            (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
               C47157 * C47534 +
           (C43037 * C42185 + C43038 * C42182 + (C43040 - C43039) * C42186 +
            (C43042 - C43041) * C42183 +
            (C47411 * C23027 - C113 * C23026) * C42187 +
            (C47411 * C23029 - C113 * C23028) * C42184) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C1816 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C1817 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + (C12423 - C12422) * C42187 +
            (C12425 - C12424) * C42184) *
               C47157 * C47508) *
              C47208 * C47541 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C1816 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C1817 +
           (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
            C12765 * C42183 + (C12426 - C12427) * C42187 +
            (C12428 - C12429) * C42184) *
               C47157 * C47508) *
              C47208 * C47528 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C1816 +
           (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
            (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
               C47157 * C1817 +
           (C548 * C42185 + C549 * C42182 + (C2290 - C2289) * C42186 +
            (C2292 - C2291) * C42183 +
            (C47411 * C2012 - C113 * C2001) * C42187 +
            (C47411 * C2019 - C113 * C2013) * C42184) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C1816 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C1817 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + (C12423 - C12422) * C42187 +
            (C12425 - C12424) * C42184) *
               C47157 * C47508) *
              C47544 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C1816 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
               C47157 * C1817 +
           (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
            (C12898 - C12899) * C42183 +
            (C113 * C6865 - C47411 * C6867) * C42187 +
            (C113 * C6868 - C47411 * C6871) * C42184) *
               C47157 * C47508) *
              C47532 +
          (((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C1816 +
           ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
            (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
            (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
               C47157 * C1817 +
           (C43037 * C42185 + C43038 * C42182 + (C43040 - C43039) * C42186 +
            (C43042 - C43041) * C42183 +
            (C47411 * C23027 - C113 * C23026) * C42187 +
            (C47411 * C23029 - C113 * C23028) * C42184) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C47411 * C122 - C113 * C115) * C42185 +
           (C47411 * C136 - C113 * C123) * C42182 + (C10694 - C10695) * C42186 +
           (C10696 - C10697) * C42183 + C42409 * C42187 + C42410 * C42184) *
              C47157 * C1991 +
          ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
           (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
           C43675 * C42187 + C43676 * C42184) *
              C47157 * C1992 +
          (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
           (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
              C47157 * C1993 +
          (C43675 * C42185 + C43676 * C42182 + (C12422 - C12423) * C42186 +
           (C12424 - C12425) * C42183 + (C43679 - C43680) * C42187 +
           (C43681 - C43682) * C42184) *
              C47157 * C1994 +
          (C43677 * C42185 + C43678 * C42182 + (C43680 - C43679) * C42186 +
           (C43682 - C43681) * C42183 +
           (C47411 * C43671 - C113 * C43670) * C42187 +
           (C47411 * C43673 - C113 * C43672) * C42184) *
              C47157 * C1995) *
         C47208 * C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C47474 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
                C47157 * C47313) *
               C1078 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C47474 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
                C47157 * C47313) *
               C1079 +
           (((C47411 * C310 - C113 * C297) * C42185 +
             (C47411 * C327 - C113 * C311) * C42182 +
             (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
             C43037 * C42187 + C43038 * C42184) *
                C47157 * C47474 +
            ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
             (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
             (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
                C47157 * C47313) *
               C47505) *
              C47459 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C47474 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C1078 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C47474 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C1079 +
           (((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
             C11901 * C42183 + (C11566 - C11567) * C42187 +
             (C11568 - C11569) * C42184) *
                C47157 * C47474 +
            (C11898 * C42185 + C11899 * C42182 + (C11567 - C11566) * C42186 +
             (C11569 - C11568) * C42183 +
             (C47411 * C7347 - C113 * C7344) * C42187 +
             (C47411 * C7350 - C113 * C7348) * C42184) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47474 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C47313) *
              C47208 * C655 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47474 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C47313) *
              C47208 * C656 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47474 +
           (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
            (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
               C47157 * C47313) *
              C47208 * C657 +
          ((C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
            (C542 - C543) * C42187 + (C544 - C545) * C42184) *
               C47157 * C47474 +
           (C777 * C42185 + C778 * C42182 + (C543 - C542) * C42186 +
            (C545 - C544) * C42183 + (C47411 * C2281 - C113 * C2280) * C42187 +
            (C47411 * C2283 - C113 * C2282) * C42184) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C2276 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47157 * C2277 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47157 * C2278 +
           (C43675 * C42185 + C43676 * C42182 + (C12422 - C12423) * C42186 +
            (C12424 - C12425) * C42183 + (C43679 - C43680) * C42187 +
            (C43681 - C43682) * C42184) *
               C47157 * C47521) *
              C47208 * C47459 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C2276 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C2277 +
           (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
            C12765 * C42183 + (C12426 - C12427) * C42187 +
            (C12428 - C12429) * C42184) *
               C47157 * C2278 +
           (C12762 * C42185 + C12763 * C42182 + (C12427 - C12426) * C42186 +
            (C12429 - C12428) * C42183 +
            (C47411 * C12413 - C113 * C12410) * C42187 +
            (C47411 * C12416 - C113 * C12414) * C42184) *
               C47157 * C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            (C10701 - C10700) * C42187 + (C10703 - C10702) * C42184) *
               C47157 * C47226 * C47544 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
               C47157 * C47226 * C47532 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            (C11563 - C11562) * C42187 + (C11565 - C11564) * C42184) *
               C47157 * C47226 * C47505) *
              C291 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C47544 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C47532 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C47505) *
              C292 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C47544 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C47532 +
           (C361 * C42185 + C362 * C42182 + (C1594 - C1593) * C42186 +
            (C1596 - C1595) * C42183 +
            (C47411 * C1311 - C113 * C1294) * C42187 +
            (C47411 * C1321 - C113 * C1312) * C42184) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47411 * C122 - C113 * C115) * C42185 +
           (C47411 * C136 - C113 * C123) * C42182 + (C10694 - C10695) * C42186 +
           (C10696 - C10697) * C42183 + (C10701 - C10700) * C42187 +
           (C10703 - C10702) * C42184) *
              C47157 * C47226 * C47208 * C108 +
          ((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
           C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
              C47157 * C47226 * C47208 * C109 +
          (C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
           C548 * C42187 + C549 * C42184) *
              C47157 * C47226 * C47208 * C110 +
          (C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
           (C542 - C543) * C42187 + (C544 - C545) * C42184) *
              C47157 * C47226 * C47208 * C111 +
          (C168 * C42185 + C169 * C42182 + (C780 - C779) * C42186 +
           (C782 - C781) * C42183 + (C47411 * C509 - C113 * C490) * C42187 +
           (C47411 * C520 - C113 * C510) * C42184) *
              C47157 * C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C1078 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
               C47157 * C47226 * C1079 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            (C11563 - C11562) * C42187 + (C11565 - C11564) * C42184) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C1078 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C1079 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C47505) *
              C47528 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C1078 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C1079 +
           (C361 * C42185 + C362 * C42182 + (C1594 - C1593) * C42186 +
            (C1596 - C1595) * C42183 +
            (C47411 * C1311 - C113 * C1294) * C42187 +
            (C47411 * C1321 - C113 * C1312) * C42184) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47411 * C122 - C113 * C115) * C42185 +
           (C47411 * C136 - C113 * C123) * C42182 + (C10694 - C10695) * C42186 +
           (C10696 - C10697) * C42183 + C42409 * C42187 + C42410 * C42184) *
              C47157 * C47226 * C1146 +
          ((C113 * C294 - C47411 * C304) * C42185 +
           (C113 * C305 - C47411 * C324) * C42182 + (C11170 - C11171) * C42186 +
           (C11172 - C11173) * C42183 + (C11555 - C11554) * C42187 +
           (C11557 - C11556) * C42184) *
              C47157 * C47226 * C1147 +
          ((C47411 * C310 - C113 * C297) * C42185 +
           (C47411 * C327 - C113 * C311) * C42182 + (C11558 - C11559) * C42186 +
           (C11560 - C11561) * C42183 + (C11563 - C11562) * C42187 +
           (C11565 - C11564) * C42184) *
              C47157 * C47226 * C1148 +
          ((C113 * C1152 - C47411 * C1158) * C42185 +
           (C113 * C1159 - C47411 * C1170) * C42182 +
           (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
           (C113 * C6005 - C47411 * C6007) * C42187 +
           (C113 * C6008 - C47411 * C6011) * C42184) *
              C47157 * C47226 * C1149 +
          ((C47411 * C1164 - C113 * C1155) * C42185 +
           (C47411 * C1173 - C113 * C1165) * C42182 +
           (C47411 * C6485 - C113 * C6483) * C42186 +
           (C47411 * C6489 - C113 * C6486) * C42183 +
           (C47411 * C22395 - C113 * C22394) * C42187 +
           (C47411 * C22397 - C113 * C22396) * C42184) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C1816 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C1817 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + (C12423 - C12422) * C42187 +
            (C12425 - C12424) * C42184) *
               C47157 * C47508) *
              C47208 * C47541 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C1816 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C1817 +
           (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
            C12765 * C42183 + (C12426 - C12427) * C42187 +
            (C12428 - C12429) * C42184) *
               C47157 * C47508) *
              C47208 * C47528 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C1816 +
           (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
            (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
               C47157 * C1817 +
           (C548 * C42185 + C549 * C42182 + (C2290 - C2289) * C42186 +
            (C2292 - C2291) * C42183 +
            (C47411 * C2012 - C113 * C2001) * C42187 +
            (C47411 * C2019 - C113 * C2013) * C42184) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C1816 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C1817 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + (C12423 - C12422) * C42187 +
            (C12425 - C12424) * C42184) *
               C47157 * C47508) *
              C47544 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C1816 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
               C47157 * C1817 +
           (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
            (C12898 - C12899) * C42183 +
            (C113 * C6865 - C47411 * C6867) * C42187 +
            (C113 * C6868 - C47411 * C6871) * C42184) *
               C47157 * C47508) *
              C47532 +
          (((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C1816 +
           ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
            (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
            (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
               C47157 * C1817 +
           (C43037 * C42185 + C43038 * C42182 + (C43040 - C43039) * C42186 +
            (C43042 - C43041) * C42183 +
            (C47411 * C23027 - C113 * C23026) * C42187 +
            (C47411 * C23029 - C113 * C23028) * C42184) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C3262 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47313) *
               C47473 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C3262 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47313) *
               C47271) *
              C47185 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C3262 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C47473 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C3262 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C47271) *
              C47194 +
          (((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
             C548 * C42187 + C549 * C42184) *
                C47157 * C3262 +
            (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
             (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
                C47157 * C47313) *
               C47473 +
           ((C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
             (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
                C47157 * C3262 +
            (C964 * C42185 + C965 * C42182 + (C2176 - C2175) * C42186 +
             (C2178 - C2177) * C42183 +
             (C47411 * C2397 - C113 * C2392) * C42187 +
             (C47411 * C2401 - C113 * C2398) * C42184) *
                C47157 * C47313) *
               C47271) *
              C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C47309 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47316 +
            (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
             (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
                C47157 * C3770) *
               C47473 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C47309 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47316 +
            (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
             (C12898 - C12899) * C42183 + (C44027 - C44028) * C42187 +
             (C44029 - C44030) * C42184) *
                C47157 * C3770) *
               C47271) *
              C2608 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C47309 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47316 +
            (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
             C12765 * C42183 + (C12426 - C12427) * C42187 +
             (C12428 - C12429) * C42184) *
                C47157 * C3770) *
               C47473 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C47309 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47316 +
            (C12624 * C42185 + C12625 * C42182 + (C12629 - C12628) * C42186 +
             (C12631 - C12630) * C42183 +
             (C47411 * C6869 - C113 * C6866) * C42187 +
             (C47411 * C6872 - C113 * C6870) * C42184) *
                C47157 * C3770) *
               C47271) *
              C47191)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C3262 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47313) *
               C47544 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C3262 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47313) *
               C47532 +
           (((C47411 * C310 - C113 * C297) * C42185 +
             (C47411 * C327 - C113 * C311) * C42182 +
             (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
             C43037 * C42187 + C43038 * C42184) *
                C47157 * C3262 +
            ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
             (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
             (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
                C47157 * C47313) *
               C47505) *
              C2608 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C3262 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C47544 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C3262 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C47532 +
           (((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
             C11901 * C42183 + (C11566 - C11567) * C42187 +
             (C11568 - C11569) * C42184) *
                C47157 * C3262 +
            (C11898 * C42185 + C11899 * C42182 + (C11567 - C11566) * C42186 +
             (C11569 - C11568) * C42183 +
             (C47411 * C7347 - C113 * C7344) * C42187 +
             (C47411 * C7350 - C113 * C7348) * C42184) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C3262 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47157 * C47313) *
              C47208 * C47550 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C3262 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C47313) *
              C47208 * C47543 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C3262 +
           (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
            (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
               C47157 * C47313) *
              C47208 * C47530 +
          ((C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
            (C542 - C543) * C42187 + (C544 - C545) * C42184) *
               C47157 * C3262 +
           (C777 * C42185 + C778 * C42182 + (C543 - C542) * C42186 +
            (C545 - C544) * C42183 + (C47411 * C2281 - C113 * C2280) * C42187 +
            (C47411 * C2283 - C113 * C2282) * C42184) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47552 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47157 * C47549 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47157 * C47540 +
           (C43675 * C42185 + C43676 * C42182 + (C12422 - C12423) * C42186 +
            (C12424 - C12425) * C42183 + (C43679 - C43680) * C42187 +
            (C43681 - C43682) * C42184) *
               C47157 * C47521) *
              C47208 * C2608 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47552 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C47549 +
           (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
            C12765 * C42183 + (C12426 - C12427) * C42187 +
            (C12428 - C12429) * C42184) *
               C47157 * C47540 +
           (C12762 * C42185 + C12763 * C42182 + (C12427 - C12426) * C42186 +
            (C12429 - C12428) * C42183 +
            (C47411 * C12413 - C113 * C12410) * C42187 +
            (C47411 * C12416 - C113 * C12414) * C42184) *
               C47157 * C47521) *
              C47208 * C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47309 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47157 * C47316 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + C43677 * C42187 + C43678 * C42184) *
               C47157 * C3770) *
              C47208 * C47185 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47309 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C47316 +
           (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
            C12765 * C42183 + (C12426 - C12427) * C42187 +
            (C12428 - C12429) * C42184) *
               C47157 * C3770) *
              C47208 * C47194 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47309 +
           (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
            (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
               C47157 * C47316 +
           (C548 * C42185 + C549 * C42182 + (C2290 - C2289) * C42186 +
            (C2292 - C2291) * C42183 +
            (C47411 * C2012 - C113 * C2001) * C42187 +
            (C47411 * C2019 - C113 * C2013) * C42184) *
               C47157 * C3770) *
              C47208 * C2871)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C3262 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            C43675 * C42187 + C43676 * C42184) *
               C47157 * C47313) *
              C47208 * C47550 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C3262 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C47313) *
              C47208 * C47543 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C3262 +
           (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
            (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
               C47157 * C47313) *
              C47208 * C47530 +
          ((C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
            (C542 - C543) * C42187 + (C544 - C545) * C42184) *
               C47157 * C3262 +
           (C777 * C42185 + C778 * C42182 + (C543 - C542) * C42186 +
            (C545 - C544) * C42183 + (C47411 * C2281 - C113 * C2280) * C42187 +
            (C47411 * C2283 - C113 * C2282) * C42184) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C3262 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             C43675 * C42187 + C43676 * C42184) *
                C47157 * C47313) *
               C47544 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C3262 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             C44025 * C42187 + C44026 * C42184) *
                C47157 * C47313) *
               C47532 +
           (((C47411 * C310 - C113 * C297) * C42185 +
             (C47411 * C327 - C113 * C311) * C42182 +
             (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
             C43037 * C42187 + C43038 * C42184) *
                C47157 * C3262 +
            ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
             (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
             (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
                C47157 * C47313) *
               C47505) *
              C2608 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C3262 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C47544 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C3262 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C47532 +
           (((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
             C11901 * C42183 + (C11566 - C11567) * C42187 +
             (C11568 - C11569) * C42184) *
                C47157 * C3262 +
            (C11898 * C42185 + C11899 * C42182 + (C11567 - C11566) * C42186 +
             (C11569 - C11568) * C42183 +
             (C47411 * C7347 - C113 * C7344) * C42187 +
             (C47411 * C7350 - C113 * C7348) * C42184) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C47473 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
               C47157 * C47226 * C47271) *
              C655 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C47473 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C47271) *
              C656 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C47473 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C47271) *
              C657 +
          ((C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
            (C542 - C543) * C42187 + (C544 - C545) * C42184) *
               C47157 * C47226 * C47473 +
           (C664 * C42185 + C665 * C42182 + (C961 - C960) * C42186 +
            (C963 - C962) * C42183 + (C47411 * C2167 - C113 * C2166) * C42187 +
            (C47411 * C2169 - C113 * C2168) * C42184) *
               C47157 * C47226 * C47271) *
              C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C1420 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47226 * C1421 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C47226 * C1422 +
           ((C113 * C1152 - C47411 * C1158) * C42185 +
            (C113 * C1159 - C47411 * C1170) * C42182 +
            (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
            (C113 * C6005 - C47411 * C6007) * C42187 +
            (C113 * C6008 - C47411 * C6011) * C42184) *
               C47157 * C47226 * C47515) *
              C47459 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C1420 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C1421 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C1422 +
           ((C1432 - C1431) * C42185 + (C1434 - C1433) * C42182 +
            (C11701 - C11700) * C42186 + (C11703 - C11702) * C42183 +
            (C47411 * C6009 - C113 * C6006) * C42187 +
            (C47411 * C6012 - C113 * C6010) * C42184) *
               C47157 * C47226 * C47515) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C47474 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
                C47157 * C47313) *
               C47473 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
                C47157 * C47474 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
                C47157 * C47313) *
               C47271) *
              C291 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C47474 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C47473 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C47474 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C47271) *
              C292 +
          (((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
             C548 * C42187 + C549 * C42184) *
                C47157 * C47474 +
            (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
             (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
                C47157 * C47313) *
               C47473 +
           ((C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
             (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
                C47157 * C47474 +
            (C964 * C42185 + C965 * C42182 + (C2176 - C2175) * C42186 +
             (C2178 - C2177) * C42183 +
             (C47411 * C2397 - C113 * C2392) * C42187 +
             (C47411 * C2401 - C113 * C2398) * C42184) *
                C47157 * C47313) *
               C47271) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47474 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C47313) *
              C1420 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47474 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
               C47157 * C47313) *
              C1421 +
          (((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C47474 +
           ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
            (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
            (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
               C47157 * C47313) *
              C1422 +
          (((C113 * C1152 - C47411 * C1158) * C42185 +
            (C113 * C1159 - C47411 * C1170) * C42182 +
            (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
            (C43385 - C43386) * C42187 + (C43387 - C43388) * C42184) *
               C47157 * C47474 +
           ((C12033 - C12032) * C42185 + (C12035 - C12034) * C42182 +
            (C43386 - C43385) * C42186 + (C43388 - C43387) * C42183 +
            (C47411 * C23373 - C113 * C23372) * C42187 +
            (C47411 * C23375 - C113 * C23374) * C42184) *
               C47157 * C47313) *
              C47515) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            (C10701 - C10700) * C42187 + (C10703 - C10702) * C42184) *
               C47157 * C47226 * C47544 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
               C47157 * C47226 * C47532 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            (C11563 - C11562) * C42187 + (C11565 - C11564) * C42184) *
               C47157 * C47226 * C47505) *
              C291 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C47544 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C47532 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C47505) *
              C292 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C47544 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C47532 +
           (C361 * C42185 + C362 * C42182 + (C1594 - C1593) * C42186 +
            (C1596 - C1595) * C42183 +
            (C47411 * C1311 - C113 * C1294) * C42187 +
            (C47411 * C1321 - C113 * C1312) * C42184) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47411 * C122 - C113 * C115) * C42185 +
           (C47411 * C136 - C113 * C123) * C42182 + (C10694 - C10695) * C42186 +
           (C10696 - C10697) * C42183 + (C10701 - C10700) * C42187 +
           (C10703 - C10702) * C42184) *
              C47157 * C47226 * C47208 * C108 +
          ((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
           C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
              C47157 * C47226 * C47208 * C109 +
          (C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
           C548 * C42187 + C549 * C42184) *
              C47157 * C47226 * C47208 * C110 +
          (C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
           (C542 - C543) * C42187 + (C544 - C545) * C42184) *
              C47157 * C47226 * C47208 * C111 +
          (C168 * C42185 + C169 * C42182 + (C780 - C779) * C42186 +
           (C782 - C781) * C42183 + (C47411 * C509 - C113 * C490) * C42187 +
           (C47411 * C520 - C113 * C510) * C42184) *
              C47157 * C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47545 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C47534 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + (C12423 - C12422) * C42187 +
            (C12425 - C12424) * C42184) *
               C47157 * C47508) *
              C47208 * C291 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47545 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C47534 +
           (C10706 * C42185 + C10707 * C42182 + C12764 * C42186 +
            C12765 * C42183 + (C12426 - C12427) * C42187 +
            (C12428 - C12429) * C42184) *
               C47157 * C47508) *
              C47208 * C292 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47545 +
           (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
            (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
               C47157 * C47534 +
           (C548 * C42185 + C549 * C42182 + (C2290 - C2289) * C42186 +
            (C2292 - C2291) * C42183 +
            (C47411 * C2012 - C113 * C2001) * C42187 +
            (C47411 * C2019 - C113 * C2013) * C42184) *
               C47157 * C47508) *
              C47208 * C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C1078 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
               C47157 * C47226 * C1079 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            (C11563 - C11562) * C42187 + (C11565 - C11564) * C42184) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C1078 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C1079 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C47505) *
              C47528 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C1078 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C1079 +
           (C361 * C42185 + C362 * C42182 + (C1594 - C1593) * C42186 +
            (C1596 - C1595) * C42183 +
            (C47411 * C1311 - C113 * C1294) * C42187 +
            (C47411 * C1321 - C113 * C1312) * C42184) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C47411 * C122 - C113 * C115) * C42185 +
           (C47411 * C136 - C113 * C123) * C42182 + (C10694 - C10695) * C42186 +
           (C10696 - C10697) * C42183 + C42409 * C42187 + C42410 * C42184) *
              C47157 * C47226 * C1146 +
          ((C113 * C294 - C47411 * C304) * C42185 +
           (C113 * C305 - C47411 * C324) * C42182 + (C11170 - C11171) * C42186 +
           (C11172 - C11173) * C42183 + (C11555 - C11554) * C42187 +
           (C11557 - C11556) * C42184) *
              C47157 * C47226 * C1147 +
          ((C47411 * C310 - C113 * C297) * C42185 +
           (C47411 * C327 - C113 * C311) * C42182 + (C11558 - C11559) * C42186 +
           (C11560 - C11561) * C42183 + (C11563 - C11562) * C42187 +
           (C11565 - C11564) * C42184) *
              C47157 * C47226 * C1148 +
          ((C113 * C1152 - C47411 * C1158) * C42185 +
           (C113 * C1159 - C47411 * C1170) * C42182 +
           (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
           (C113 * C6005 - C47411 * C6007) * C42187 +
           (C113 * C6008 - C47411 * C6011) * C42184) *
              C47157 * C47226 * C1149 +
          ((C47411 * C1164 - C113 * C1155) * C42185 +
           (C47411 * C1173 - C113 * C1165) * C42182 +
           (C47411 * C6485 - C113 * C6483) * C42186 +
           (C47411 * C6489 - C113 * C6486) * C42183 +
           (C47411 * C22395 - C113 * C22394) * C42187 +
           (C47411 * C22397 - C113 * C22396) * C42184) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47545 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C47534 +
           (C42409 * C42185 + C42410 * C42182 + (C12418 - C12419) * C42186 +
            (C12420 - C12421) * C42183 + (C12423 - C12422) * C42187 +
            (C12425 - C12424) * C42184) *
               C47157 * C47508) *
              C1078 +
          (((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            C43035 * C42187 + C43036 * C42184) *
               C47157 * C47545 +
           ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
            (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
            (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
               C47157 * C47534 +
           (C43035 * C42185 + C43036 * C42182 + (C12896 - C12897) * C42186 +
            (C12898 - C12899) * C42183 +
            (C113 * C6865 - C47411 * C6867) * C42187 +
            (C113 * C6868 - C47411 * C6871) * C42184) *
               C47157 * C47508) *
              C1079 +
          (((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            C43037 * C42187 + C43038 * C42184) *
               C47157 * C47545 +
           ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
            (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
            (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
               C47157 * C47534 +
           (C43037 * C42185 + C43038 * C42182 + (C43040 - C43039) * C42186 +
            (C43042 - C43041) * C42183 +
            (C47411 * C23027 - C113 * C23026) * C42187 +
            (C47411 * C23029 - C113 * C23028) * C42184) *
               C47157 * C47508) *
              C47505) *
         C47180) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47474 +
           ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
            (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
            (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
               C47157 * C47313) *
              C47208 * C655 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47474 +
           (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
            C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
               C47157 * C47313) *
              C47208 * C656 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47474 +
           (C546 * C42185 + C547 * C42182 + C10712 * C42186 + C10713 * C42183 +
            (C2289 - C2290) * C42187 + (C2291 - C2292) * C42184) *
               C47157 * C47313) *
              C47208 * C657 +
          ((C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
            (C542 - C543) * C42187 + (C544 - C545) * C42184) *
               C47157 * C47474 +
           (C777 * C42185 + C778 * C42182 + (C543 - C542) * C42186 +
            (C545 - C544) * C42183 + (C47411 * C2281 - C113 * C2280) * C42187 +
            (C47411 * C2283 - C113 * C2282) * C42184) *
               C47157 * C47313) *
              C47208 * C47509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47411 * C122 - C113 * C115) * C42185 +
             (C47411 * C136 - C113 * C123) * C42182 +
             (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
             C42409 * C42187 + C42410 * C42184) *
                C47157 * C47474 +
            ((C10695 - C10694) * C42185 + (C10697 - C10696) * C42182 +
             (C10700 - C10701) * C42186 + (C10702 - C10703) * C42183 +
             (C12419 - C12418) * C42187 + (C12421 - C12420) * C42184) *
                C47157 * C47313) *
               C1078 +
           (((C113 * C294 - C47411 * C304) * C42185 +
             (C113 * C305 - C47411 * C324) * C42182 +
             (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
             C43035 * C42187 + C43036 * C42184) *
                C47157 * C47474 +
            ((C11171 - C11170) * C42185 + (C11173 - C11172) * C42182 +
             (C11554 - C11555) * C42186 + (C11556 - C11557) * C42183 +
             (C12897 - C12896) * C42187 + (C12899 - C12898) * C42184) *
                C47157 * C47313) *
               C1079 +
           (((C47411 * C310 - C113 * C297) * C42185 +
             (C47411 * C327 - C113 * C311) * C42182 +
             (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
             C43037 * C42187 + C43038 * C42184) *
                C47157 * C47474 +
            ((C11559 - C11558) * C42185 + (C11561 - C11560) * C42182 +
             (C11562 - C11563) * C42186 + (C11564 - C11565) * C42183 +
             (C43039 - C43040) * C42187 + (C43041 - C43042) * C42184) *
                C47157 * C47313) *
               C47505) *
              C47459 +
          ((((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
             C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
                C47157 * C47474 +
            (C10698 * C42185 + C10699 * C42182 + C10708 * C42186 +
             C10709 * C42183 + C12762 * C42187 + C12763 * C42184) *
                C47157 * C47313) *
               C1078 +
           (((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
             C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
                C47157 * C47474 +
            (C11174 * C42185 + C11175 * C42182 + C12626 * C42186 +
             C12627 * C42183 + (C12628 - C12629) * C42187 +
             (C12630 - C12631) * C42184) *
                C47157 * C47313) *
               C1079 +
           (((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
             C11901 * C42183 + (C11566 - C11567) * C42187 +
             (C11568 - C11569) * C42184) *
                C47157 * C47474 +
            (C11898 * C42185 + C11899 * C42182 + (C11567 - C11566) * C42186 +
             (C11569 - C11568) * C42183 +
             (C47411 * C7347 - C113 * C7344) * C42187 +
             (C47411 * C7350 - C113 * C7348) * C42184) *
                C47157 * C47313) *
               C47505) *
              C47191)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C47411 * C122 - C113 * C115) * C42185 +
           (C47411 * C136 - C113 * C123) * C42182 + (C10694 - C10695) * C42186 +
           (C10696 - C10697) * C42183 + (C10701 - C10700) * C42187 +
           (C10703 - C10702) * C42184) *
              C47157 * C47226 * C47208 * C108 +
          ((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
           C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
              C47157 * C47226 * C47208 * C109 +
          (C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
           C548 * C42187 + C549 * C42184) *
              C47157 * C47226 * C47208 * C110 +
          (C166 * C42185 + C167 * C42182 + C10974 * C42186 + C10975 * C42183 +
           (C542 - C543) * C42187 + (C544 - C545) * C42184) *
              C47157 * C47226 * C47208 * C111 +
          (C168 * C42185 + C169 * C42182 + (C780 - C779) * C42186 +
           (C782 - C781) * C42183 + (C47411 * C509 - C113 * C490) * C42187 +
           (C47411 * C520 - C113 * C510) * C42184) *
              C47157 * C47226 * C47208 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            (C10701 - C10700) * C42187 + (C10703 - C10702) * C42184) *
               C47157 * C47226 * C47544 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
               C47157 * C47226 * C47532 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            (C11563 - C11562) * C42187 + (C11565 - C11564) * C42184) *
               C47157 * C47226 * C47505) *
              C291 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C47544 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C47532 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C47505) *
              C292 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C47544 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C47532 +
           (C361 * C42185 + C362 * C42182 + (C1594 - C1593) * C42186 +
            (C1596 - C1595) * C42183 +
            (C47411 * C1311 - C113 * C1294) * C42187 +
            (C47411 * C1321 - C113 * C1312) * C42184) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C47411 * C122 - C113 * C115) * C42185 +
            (C47411 * C136 - C113 * C123) * C42182 +
            (C10694 - C10695) * C42186 + (C10696 - C10697) * C42183 +
            C42409 * C42187 + C42410 * C42184) *
               C47157 * C47226 * C1078 +
           ((C113 * C294 - C47411 * C304) * C42185 +
            (C113 * C305 - C47411 * C324) * C42182 +
            (C11170 - C11171) * C42186 + (C11172 - C11173) * C42183 +
            (C11555 - C11554) * C42187 + (C11557 - C11556) * C42184) *
               C47157 * C47226 * C1079 +
           ((C47411 * C310 - C113 * C297) * C42185 +
            (C47411 * C327 - C113 * C311) * C42182 +
            (C11558 - C11559) * C42186 + (C11560 - C11561) * C42183 +
            (C11563 - C11562) * C42187 + (C11565 - C11564) * C42184) *
               C47157 * C47226 * C47505) *
              C47541 +
          (((C145 - C144) * C42185 + (C147 - C146) * C42182 + C10704 * C42186 +
            C10705 * C42183 + C10706 * C42187 + C10707 * C42184) *
               C47157 * C47226 * C1078 +
           ((C336 - C335) * C42185 + (C338 - C337) * C42182 + C11176 * C42186 +
            C11177 * C42183 + C12624 * C42187 + C12625 * C42184) *
               C47157 * C47226 * C1079 +
           ((C344 - C343) * C42185 + (C346 - C345) * C42182 + C11900 * C42186 +
            C11901 * C42183 + (C11566 - C11567) * C42187 +
            (C11568 - C11569) * C42184) *
               C47157 * C47226 * C47505) *
              C47528 +
          ((C164 * C42185 + C165 * C42182 + C10710 * C42186 + C10711 * C42183 +
            C548 * C42187 + C549 * C42184) *
               C47157 * C47226 * C1078 +
           (C359 * C42185 + C360 * C42182 + C11178 * C42186 + C11179 * C42183 +
            (C2175 - C2176) * C42187 + (C2177 - C2178) * C42184) *
               C47157 * C47226 * C1079 +
           (C361 * C42185 + C362 * C42182 + (C1594 - C1593) * C42186 +
            (C1596 - C1595) * C42183 +
            (C47411 * C1311 - C113 * C1294) * C42187 +
            (C47411 * C1321 - C113 * C1312) * C42184) *
               C47157 * C47226 * C47505) *
              C47499)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C47411 * C122 - C113 * C115) * C42185 +
           (C47411 * C136 - C113 * C123) * C42182 + (C10694 - C10695) * C42186 +
           (C10696 - C10697) * C42183 + C42409 * C42187 + C42410 * C42184) *
              C47157 * C47226 * C1146 +
          ((C113 * C294 - C47411 * C304) * C42185 +
           (C113 * C305 - C47411 * C324) * C42182 + (C11170 - C11171) * C42186 +
           (C11172 - C11173) * C42183 + (C11555 - C11554) * C42187 +
           (C11557 - C11556) * C42184) *
              C47157 * C47226 * C1147 +
          ((C47411 * C310 - C113 * C297) * C42185 +
           (C47411 * C327 - C113 * C311) * C42182 + (C11558 - C11559) * C42186 +
           (C11560 - C11561) * C42183 + (C11563 - C11562) * C42187 +
           (C11565 - C11564) * C42184) *
              C47157 * C47226 * C1148 +
          ((C113 * C1152 - C47411 * C1158) * C42185 +
           (C113 * C1159 - C47411 * C1170) * C42182 +
           (C12032 - C12033) * C42186 + (C12034 - C12035) * C42183 +
           (C113 * C6005 - C47411 * C6007) * C42187 +
           (C113 * C6008 - C47411 * C6011) * C42184) *
              C47157 * C47226 * C1149 +
          ((C47411 * C1164 - C113 * C1155) * C42185 +
           (C47411 * C1173 - C113 * C1165) * C42182 +
           (C47411 * C6485 - C113 * C6483) * C42186 +
           (C47411 * C6489 - C113 * C6486) * C42183 +
           (C47411 * C22395 - C113 * C22394) * C42187 +
           (C47411 * C22397 - C113 * C22396) * C42184) *
              C47157 * C47226 * C1150) *
         C47180) /
            (p * q * std::sqrt(p + q));
}
