/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AB_zz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_12_33(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46789 = ae + be;
    const double C46788 = ae * be;
    const double C46787 = zA - zB;
    const double C46814 = 0 * be;
    const double C46837 = p + q;
    const double C46836 = p * q;
    const double C46843 = bs[3];
    const double C46842 = zP - zQ;
    const double C46850 = bs[4];
    const double C46848 = xP - xQ;
    const double C46858 = bs[5];
    const double C46867 = bs[6];
    const double C46878 = bs[7];
    const double C46905 = bs[2];
    const double C46991 = yP - yQ;
    const double C115 = bs[0];
    const double C47813 = xA - xB;
    const double C47832 = ce + de;
    const double C47831 = ce * de;
    const double C47830 = xC - xD;
    const double C47864 = yC - yD;
    const double C47882 = zC - zD;
    const double C48048 = yA - yB;
    const double C46815 = std::pow(C46789, 2);
    const double C47823 = 2 * C46789;
    const double C46820 = 2 * C46788;
    const double C46795 = C46788 * C46787;
    const double C48086 = std::pow(C46787, 2);
    const double C48142 = C46787 * be;
    const double C48140 = C46787 * ae;
    const double C46838 = 2 * C46836;
    const double C46845 = std::pow(C46842, 2);
    const double C46901 = C46842 * ae;
    const double C46900 = C46842 * be;
    const double C46860 = std::pow(C46848, 2);
    const double C47001 = std::pow(C46991, 2);
    const double C47814 = std::pow(C47813, 2);
    const double C48107 = C47813 * be;
    const double C48106 = C47813 * ae;
    const double C47836 = 2 * C47832;
    const double C47835 = std::pow(C47832, 2);
    const double C47837 = C47830 * de;
    const double C47834 = C47830 * ce;
    const double C47833 = std::pow(C47830, 2);
    const double C47865 = std::pow(C47864, 2);
    const double C47924 = C47864 * de;
    const double C47922 = C47864 * ce;
    const double C47883 = std::pow(C47882, 2);
    const double C47966 = C47882 * de;
    const double C47964 = C47882 * ce;
    const double C48069 = std::pow(C48048, 2);
    const double C48141 = C48048 * be;
    const double C48139 = C48048 * ae;
    const double C46816 = 2 * C46815;
    const double C48108 = std::pow(C47823, -1);
    const double C48087 = C48086 * C46788;
    const double C46840 = C46838 / C46837;
    const double C136 =
        ((std::pow(zP - zQ, 2) * bs[2] * std::pow(C46838 / C46837, 2) -
          (bs[1] * C46838) / C46837) *
         C46788) /
        C46815;
    const double C116 = -(C46848 * bs[1] * C46838) / C46837;
    const double C301 = -(C46991 * bs[1] * C46838) / C46837;
    const double C502 = -(C46842 * bs[1] * C46838) / C46837;
    const double C46852 = C46845 * C46850;
    const double C46861 = C46845 * C46858;
    const double C46869 = C46845 * C46867;
    const double C46881 = C46845 * C46878;
    const double C46909 = C46843 * C46901;
    const double C46915 = C46850 * C46901;
    const double C46923 = C46858 * C46901;
    const double C46938 = C46867 * C46901;
    const double C46965 = C46878 * C46901;
    const double C123 = (-(bs[1] * C46901 * C46838) / C46837) / C46789;
    const double C46908 = C46843 * C46900;
    const double C46913 = C46850 * C46900;
    const double C46921 = C46858 * C46900;
    const double C46934 = C46867 * C46900;
    const double C46959 = C46878 * C46900;
    const double C122 = (-(bs[1] * C46900 * C46838) / C46837) / C46789;
    const double C47815 = C47814 * C46788;
    const double C47849 = std::pow(C47836, -1);
    const double C48116 = std::pow(C47836, -2);
    const double C47850 = 2 * C47835;
    const double C48120 = C47835 * C47836;
    const double C48119 = 4 * C47835;
    const double C48109 = std::pow(C47834, 2);
    const double C47838 = C47833 * C47831;
    const double C47866 = C47865 * C47831;
    const double C48121 = std::pow(C47922, 2);
    const double C47884 = C47883 * C47831;
    const double C48123 = std::pow(C47964, 2);
    const double C48070 = C48069 * C46788;
    const double C48088 = C48087 / C46789;
    const double C46844 = -C46840;
    const double C46851 = std::pow(C46840, 4);
    const double C46868 = std::pow(C46840, 6);
    const double C46904 = std::pow(C46840, 2);
    const double C137 = ((xP - xQ) *
                         (bs[2] * std::pow(C46840, 2) +
                          std::pow(zP - zQ, 2) * bs[3] * std::pow(-C46840, 3)) *
                         C46788) /
                        C46815;
    const double C47816 = C47815 / C46789;
    const double C48154 = 4 * C48120;
    const double C48153 = C47832 * C48119;
    const double C47839 = C47838 / C47832;
    const double C47867 = C47866 / C47832;
    const double C47885 = C47884 / C47832;
    const double C48071 = C48070 / C46789;
    const double C48089 = -C48088;
    const double C46846 = std::pow(C46844, 3);
    const double C46859 = std::pow(C46844, 5);
    const double C46879 = std::pow(C46844, 7);
    const double C46853 = C46852 * C46851;
    const double C46857 = C46850 * C46851;
    const double C46917 = C46851 * C46915;
    const double C46916 = C46851 * C46913;
    const double C46870 = C46869 * C46868;
    const double C46877 = C46867 * C46868;
    const double C46944 = C46868 * C46938;
    const double C46940 = C46868 * C46934;
    const double C46907 = C46905 * C46904;
    const double C124 = (C46848 * C46904 * C46905 * C46900) / C46789;
    const double C125 = (C46848 * C46904 * C46905 * C46901) / C46789;
    const double C313 = (C46991 * C46904 * C46905 * C46900) / C46789;
    const double C314 = (C46991 * C46904 * C46905 * C46901) / C46789;
    const double C514 = (C46842 * C46904 * C46905 * C46900) / C46789 -
                        (be * bs[1] * C46838) / (C46837 * C46789);
    const double C515 = (C46842 * C46904 * C46905 * C46901) / C46789 -
                        (ae * bs[1] * C46838) / (C46837 * C46789);
    const double C47817 = -C47816;
    const double C47840 = -C47839;
    const double C47868 = -C47867;
    const double C47886 = -C47885;
    const double C48072 = -C48071;
    const double C48090 = std::exp(C48089);
    const double C46849 = C46843 * C46846;
    const double C46911 = C46846 * C46909;
    const double C46910 = C46846 * C46908;
    const double C138 =
        ((bs[2] * std::pow(C46840, 2) + C46845 * C46843 * C46846) * C46788 +
         (C46843 * C46846 + C46845 * bs[4] * std::pow(C46840, 4)) * C46788 *
             std::pow(xP - xQ, 2)) /
        C46815;
    const double C331 =
        ((yP - yQ) * (bs[2] * std::pow(C46840, 2) + C46845 * C46843 * C46846) *
         C46788) /
        C46815;
    const double C532 =
        (ae * C46904 * C46905 * C46900 + be * C46904 * C46905 * C46901 +
         C46842 * (C46905 * C46904 + C46845 * C46843 * C46846) * C46788) /
        C46815;
    const double C46862 = C46861 * C46859;
    const double C46866 = C46858 * C46859;
    const double C46926 = C46859 * C46923;
    const double C46924 = C46859 * C46921;
    const double C46882 = C46881 * C46879;
    const double C46971 = C46879 * C46965;
    const double C46967 = C46879 * C46959;
    const double C46922 = C46857 * C46860;
    const double C46935 = C46848 * C46857;
    const double C47021 = C46857 * C47001;
    const double C47078 = C46857 * ae;
    const double C47076 = C46857 * C46845;
    const double C47075 = C46842 * C46857;
    const double C47074 = C46857 * be;
    const double C47153 = C46991 * C46857;
    const double C46919 = C46848 * C46917;
    const double C47015 = C46991 * C46917;
    const double C47065 = C46842 * C46917;
    const double C47071 = be * C46917;
    const double C46918 = C46848 * C46916;
    const double C47013 = C46991 * C46916;
    const double C47062 = C46842 * C46916;
    const double C47070 = ae * C46916;
    const double C46962 = C46877 * C46860;
    const double C47213 = C46848 * C46877;
    const double C47396 = C46877 * C47001;
    const double C47455 = C46991 * C46877;
    const double C47513 = C46877 * ae;
    const double C47507 = C46877 * C46845;
    const double C47506 = C46842 * C46877;
    const double C47505 = C46877 * be;
    const double C46947 = C46944 * C46860;
    const double C46964 = C46848 * C46944;
    const double C47199 = C46944 * C47001;
    const double C47236 = C46991 * C46944;
    const double C47313 = C46842 * C46944;
    const double C47500 = be * C46944;
    const double C46945 = C46940 * C46860;
    const double C46958 = C46848 * C46940;
    const double C47195 = C46940 * C47001;
    const double C47234 = C46991 * C46940;
    const double C47307 = C46842 * C46940;
    const double C47499 = ae * C46940;
    const double C117 = C46907 * C46860 - (bs[1] * C46838) / C46837;
    const double C300 = C46991 * C46848 * C46907;
    const double C302 = C46907 * C47001 - (bs[1] * C46838) / C46837;
    const double C501 = C46842 * C46848 * C46907;
    const double C503 = C46907 * C46845 - (bs[1] * C46838) / C46837;
    const double C962 = C46842 * C46991 * C46907;
    const double C47818 = std::exp(C47817);
    const double C47841 = std::exp(C47840);
    const double C47869 = std::exp(C47868);
    const double C47887 = std::exp(C47886);
    const double C48073 = std::exp(C48072);
    const double C147 = C48090 * C137;
    const double C46796 = C46795 * C48090;
    const double C113 = -(2 * ae * be * (zA - zB) * C48090) / (ae + be);
    const double C114 =
        -((C48090 - (C46787 * 2 * C46788 * C46787 * C48090) / C46789) * 2 *
          C46788) /
        C46789;
    const double C10445 =
        ((C48090 - (C46787 * 2 * C46788 * C46787 * C48090) / C46789) * ae) /
            C46789 -
        (0 * be) / (2 * std::pow(C46789, 2));
    const double C48177 = C48108 * C48090;
    const double C48176 = C48090 * C48140;
    const double C31425 = -(C48090 * C48142) / C46789;
    const double C46854 = C46849 + C46853;
    const double C46914 = C46848 * C46849;
    const double C47014 = C46991 * C46849;
    const double C47066 = C46849 * ae;
    const double C47064 = C46842 * C46849;
    const double C47063 = C46849 * be;
    const double C118 =
        2 * C46848 * C46907 + C46848 * (C46907 + C46849 * C46860);
    const double C299 = C46991 * (C46907 + C46849 * C46860);
    const double C500 = C46842 * (C46907 + C46849 * C46860);
    const double C1192 =
        2 * C46991 * C46907 + C46991 * (C46907 + C46849 * C47001);
    const double C1329 = C46842 * (C46907 + C46849 * C47001);
    const double C2052 =
        2 * C46842 * C46907 + C46842 * (C46907 + C46849 * C46845);
    const double C127 = (C46904 * C46905 * C46901 + C46911 * C46860) / C46789;
    const double C129 =
        (2 * C46848 * C46911 + C46848 * (C46911 + C46917 * C46860)) / C46789;
    const double C310 = (C46991 * (C46911 + C46917 * C46860)) / C46789;
    const double C312 = (C46991 * C46848 * C46911) / C46789;
    const double C316 = (C46904 * C46905 * C46901 + C46911 * C47001) / C46789;
    const double C511 = (C46842 * (C46911 + C46917 * C46860) +
                         (C46907 + C46849 * C46860) * ae) /
                        C46789;
    const double C513 =
        (C46842 * C46848 * C46911 + C46848 * C46907 * ae) / C46789;
    const double C517 =
        (C46904 * C46905 * C46901 + C46842 * (C46842 * C46911 + C46907 * ae) +
         C46842 * C46907 * ae) /
        C46789;
    const double C968 =
        (C46842 * C46991 * C46911 + C46991 * C46907 * ae) / C46789;
    const double C1201 =
        (2 * C46991 * C46911 + C46991 * (C46911 + C46917 * C47001)) / C46789;
    const double C1344 = (C46842 * (C46911 + C46917 * C47001) +
                          (C46907 + C46849 * C47001) * ae) /
                         C46789;
    const double C126 = (C46904 * C46905 * C46900 + C46910 * C46860) / C46789;
    const double C128 =
        (2 * C46848 * C46910 + C46848 * (C46910 + C46916 * C46860)) / C46789;
    const double C309 = (C46991 * (C46910 + C46916 * C46860)) / C46789;
    const double C311 = (C46991 * C46848 * C46910) / C46789;
    const double C315 = (C46904 * C46905 * C46900 + C46910 * C47001) / C46789;
    const double C510 = (C46842 * (C46910 + C46916 * C46860) +
                         (C46907 + C46849 * C46860) * be) /
                        C46789;
    const double C512 =
        (C46842 * C46848 * C46910 + C46848 * C46907 * be) / C46789;
    const double C516 =
        (C46904 * C46905 * C46900 + C46842 * (C46842 * C46910 + C46907 * be) +
         C46842 * C46907 * be) /
        C46789;
    const double C967 =
        (C46842 * C46991 * C46910 + C46991 * C46907 * be) / C46789;
    const double C1200 =
        (2 * C46991 * C46910 + C46991 * (C46910 + C46916 * C47001)) / C46789;
    const double C1343 = (C46842 * (C46910 + C46916 * C47001) +
                          (C46907 + C46849 * C47001) * be) /
                         C46789;
    const double C151 = C48090 * C138;
    const double C4975 = C48090 * C331;
    const double C46863 = C46857 + C46862;
    const double C46871 = C46866 + C46870;
    const double C46936 = C46866 * C46860;
    const double C46961 = C46848 * C46866;
    const double C47197 = C46866 * C47001;
    const double C47235 = C46991 * C46866;
    const double C47314 = C46866 * ae;
    const double C47310 = C46866 * C46845;
    const double C47309 = C46842 * C46866;
    const double C47308 = C46866 * be;
    const double C46928 = C46926 * C46860;
    const double C46937 = C46848 * C46926;
    const double C47022 = C46926 * C47001;
    const double C47077 = C46842 * C46926;
    const double C47154 = C46991 * C46926;
    const double C47304 = be * C46926;
    const double C46927 = C46924 * C46860;
    const double C46933 = C46848 * C46924;
    const double C47020 = C46924 * C47001;
    const double C47073 = C46842 * C46924;
    const double C47152 = C46991 * C46924;
    const double C47303 = ae * C46924;
    const double C46883 = C46877 + C46882;
    const double C46974 = C46971 * C46860;
    const double C47215 = C46848 * C46971;
    const double C47399 = C46971 * C47001;
    const double C47458 = C46991 * C46971;
    const double C47512 = C46842 * C46971;
    const double C46972 = C46967 * C46860;
    const double C47211 = C46848 * C46967;
    const double C47393 = C46967 * C47001;
    const double C47454 = C46991 * C46967;
    const double C47504 = C46842 * C46967;
    const double C46925 = C46849 + C46922;
    const double C46941 = 2 * C46935;
    const double C47010 = C46991 * C46935;
    const double C47058 = C46935 * ae;
    const double C47056 = C46842 * C46935;
    const double C47055 = C46935 * be;
    const double C47024 = C46849 + C47021;
    const double C47082 = C46849 + C47076;
    const double C47084 = C47075 * ae;
    const double C47081 = C47075 * be;
    const double C47311 = 2 * C47075;
    const double C47159 = C47153 * ae;
    const double C47157 = C46842 * C47153;
    const double C47156 = C47153 * be;
    const double C47196 = 2 * C47153;
    const double C318 = (C46848 * C46911 + C46919 * C47001) / C46789;
    const double C317 = (C46848 * C46910 + C46918 * C47001) / C46789;
    const double C47079 = C47070 + C47071;
    const double C46969 = C46866 + C46962;
    const double C47217 = C47213 * C47001;
    const double C47262 = C46991 * C47213;
    const double C47356 = C47213 * ae;
    const double C47352 = C47213 * C46845;
    const double C47351 = C46842 * C47213;
    const double C47350 = C47213 * be;
    const double C47401 = C46866 + C47396;
    const double C47467 = C47455 * ae;
    const double C47465 = C47455 * C46845;
    const double C47464 = C46842 * C47455;
    const double C47463 = C47455 * be;
    const double C47519 = C46866 + C47507;
    const double C47521 = C47506 * ae;
    const double C47518 = C47506 * be;
    const double C46950 = C46926 + C46947;
    const double C46970 = 2 * C46964;
    const double C47029 = C46964 * C47001;
    const double C47100 = C46842 * C46964;
    const double C47166 = C46991 * C46964;
    const double C47346 = be * C46964;
    const double C47202 = C46926 + C47199;
    const double C47243 = C46842 * C47236;
    const double C47398 = 2 * C47236;
    const double C47451 = be * C47236;
    const double C46948 = C46924 + C46945;
    const double C46966 = 2 * C46958;
    const double C47027 = C46958 * C47001;
    const double C47096 = C46842 * C46958;
    const double C47164 = C46991 * C46958;
    const double C47345 = ae * C46958;
    const double C47200 = C46924 + C47195;
    const double C47239 = C46842 * C47234;
    const double C47392 = 2 * C47234;
    const double C47450 = ae * C47234;
    const double C47516 = C47499 + C47500;
    const double C48144 = C48108 * C47818;
    const double C48143 = C47818 * C48106;
    const double C4815 = -(C47818 * C48107) / C46789;
    const double C47843 = C47841 * C47834;
    const double C47842 = C47841 / C47836;
    const double C47852 = C47849 * C47841;
    const double C48112 = C47841 * C47837;
    const double C48151 = C48116 * C47841;
    const double C48145 = C47841 * C48109;
    const double C47923 = C47869 / C47836;
    const double C47925 = C47869 * C47922;
    const double C47932 = C47849 * C47869;
    const double C48127 = C47869 * C47924;
    const double C48157 = C48116 * C47869;
    const double C48155 = C47869 * C48121;
    const double C47965 = C47887 / C47836;
    const double C47967 = C47887 * C47964;
    const double C47974 = C47849 * C47887;
    const double C48133 = C47887 * C47966;
    const double C48160 = C48116 * C47887;
    const double C48158 = C47887 * C48123;
    const double C48175 = C48108 * C48073;
    const double C48174 = C48073 * C48139;
    const double C16185 = -(C48073 * C48141) / C46789;
    const double C46819 = 2 * C46796;
    const double C10446 =
        (((-4 * C46796) / C46789 -
          (C46787 * (C48090 - (C46787 * 2 * C46796) / C46789) * 2 * C46788) /
              C46789) *
         ae) /
        C46789;
    const double C10447 = (0 * ae) / C46789 - C46796 / std::pow(C46789, 2);
    const double C10448 =
        (-((C48090 - (C46787 * 2 * C46796) / C46789) * 2 * C46788) / C46789) /
        (2 * C46789);
    const double C31427 =
        (-(0 * be) / C46789) / (2 * C46789) -
        ((C48090 - (C46787 * 2 * C46796) / C46789) * be) / C46789;
    const double C31428 =
        -(((-4 * C46796) / C46789 -
           (C46787 * (C48090 - (C46787 * 2 * C46796) / C46789) * 2 * C46788) /
               C46789) *
          be) /
        C46789;
    const double C31429 =
        (-(2 * C46796) / C46789) / (2 * C46789) - (0 * be) / C46789;
    const double C31430 =
        (-((C48090 - (C46787 * 2 * C46796) / C46789) * 2 * C46788) / C46789) /
        (2 * C46789);
    const double C42734 = ((0 * ae) / C46789 - C46796 / C46815) / (2 * C46789) -
                          (0 * be) / C46789;
    const double C146 = C113 * C125;
    const double C144 = C113 * C124;
    const double C4974 = C113 * C314;
    const double C4972 = C113 * C313;
    const double C149 = C114 * C117;
    const double C145 = C114 * C116;
    const double C345 = C114 * C300;
    const double C546 = C114 * C501;
    const double C4979 = C114 * C302;
    const double C4973 = C114 * C301;
    const double C5607 = C114 * C962;
    const double C10452 = C10445 * C125;
    const double C10450 = C10445 * C124;
    const double C25982 = C10445 * C314;
    const double C25980 = C10445 * C313;
    const double C42729 = C48177 / C47823;
    const double C10443 = C48176 / C46789;
    const double C42727 = C48090 / C47823 - (C48176 * C48142) / C46815;
    const double C42728 = C48176 / C46816 - (C48177 * C48142) / C46789;
    const double C31447 = C31425 * C138;
    const double C31435 = C31425 * C137;
    const double C37309 = C31425 * C331;
    const double C46855 = C46854 * C46788;
    const double C518 =
        (C46848 * C46910 + C46842 * (C46842 * C46918 + C46914 * be) +
         C46842 * C46914 * be) /
        C46789;
    const double C519 =
        (C46848 * C46911 + C46842 * (C46842 * C46919 + C46914 * ae) +
         C46842 * C46914 * ae) /
        C46789;
    const double C969 =
        (C46842 * C46991 * C46918 + C46991 * C46914 * be) / C46789;
    const double C970 =
        (C46842 * C46991 * C46919 + C46991 * C46914 * ae) / C46789;
    const double C303 = C46848 * C46907 + C46914 * C47001;
    const double C504 = C46848 * C46907 + C46914 * C46845;
    const double C963 = C46842 * C46991 * C46914;
    const double C1191 =
        2 * C46991 * C46914 + C46991 * (C46914 + C46935 * C47001);
    const double C1328 = C46842 * (C46914 + C46935 * C47001);
    const double C2051 =
        2 * C46842 * C46914 + C46842 * (C46914 + C46935 * C46845);
    const double C1337 =
        (C46991 * C46910 + C46842 * (C46842 * C47013 + C47014 * be) +
         C46842 * C47014 * be) /
        C46789;
    const double C1338 =
        (C46991 * C46911 + C46842 * (C46842 * C47015 + C47014 * ae) +
         C46842 * C47014 * ae) /
        C46789;
    const double C1326 = C46991 * C46907 + C47014 * C46845;
    const double C2460 =
        2 * C46842 * C47014 + C46842 * (C47014 + C47153 * C46845);
    const double C47068 = C47065 + C47066;
    const double C47067 = C47062 + C47063;
    const double C153 = C114 * C118;
    const double C341 = C114 * C299;
    const double C542 = C114 * C500;
    const double C5854 = C114 * C1192;
    const double C6033 = C114 * C1329;
    const double C150 = C113 * C127;
    const double C10464 = C10445 * C127;
    const double C154 = C113 * C129;
    const double C10468 = C10445 * C129;
    const double C342 = C113 * C310;
    const double C10670 = C10445 * C310;
    const double C346 = C113 * C312;
    const double C10658 = C10445 * C312;
    const double C4980 = C113 * C316;
    const double C25994 = C10445 * C316;
    const double C543 = C113 * C511;
    const double C10872 = C10445 * C511;
    const double C547 = C113 * C513;
    const double C10860 = C10445 * C513;
    const double C5608 = C113 * C968;
    const double C26614 = C10445 * C968;
    const double C5855 = C113 * C1201;
    const double C26852 = C10445 * C1201;
    const double C6034 = C113 * C1344;
    const double C27034 = C10445 * C1344;
    const double C148 = C113 * C126;
    const double C10462 = C10445 * C126;
    const double C152 = C113 * C128;
    const double C10466 = C10445 * C128;
    const double C340 = C113 * C309;
    const double C10668 = C10445 * C309;
    const double C344 = C113 * C311;
    const double C10656 = C10445 * C311;
    const double C4978 = C113 * C315;
    const double C25992 = C10445 * C315;
    const double C541 = C113 * C510;
    const double C10870 = C10445 * C510;
    const double C545 = C113 * C512;
    const double C10858 = C10445 * C512;
    const double C5606 = C113 * C967;
    const double C26612 = C10445 * C967;
    const double C5853 = C113 * C1200;
    const double C26850 = C10445 * C1200;
    const double C6032 = C113 * C1343;
    const double C27032 = C10445 * C1343;
    const double C46864 = C46863 * C46788;
    const double C46872 = C46871 * C46788;
    const double C46942 = C46857 + C46936;
    const double C46968 = 2 * C46961;
    const double C47028 = C46961 * C47001;
    const double C47101 = C46961 * ae;
    const double C47099 = C46961 * C46845;
    const double C47098 = C46842 * C46961;
    const double C47097 = C46961 * be;
    const double C47165 = C46991 * C46961;
    const double C47201 = C46857 + C47197;
    const double C47244 = C47235 * ae;
    const double C47242 = C47235 * C46845;
    const double C47241 = C46842 * C47235;
    const double C47240 = C47235 * be;
    const double C47395 = 2 * C47235;
    const double C47320 = C47313 + C47314;
    const double C47319 = C46857 + C47310;
    const double C47321 = C47309 * ae;
    const double C47318 = C47309 * be;
    const double C47508 = 2 * C47309;
    const double C47317 = C47307 + C47308;
    const double C46930 = C46917 + C46928;
    const double C46943 = 2 * C46937;
    const double C47011 = C46991 * C46937;
    const double C47057 = C46842 * C46937;
    const double C47094 = be * C46937;
    const double C1199 =
        (2 * C46991 * C46919 + C46991 * (C46919 + C46937 * C47001)) / C46789;
    const double C1342 = (C46842 * (C46919 + C46937 * C47001) +
                          (C46914 + C46935 * C47001) * ae) /
                         C46789;
    const double C47025 = C46917 + C47022;
    const double C47083 = C47077 + C47078;
    const double C47158 = C46842 * C47154;
    const double C47198 = 2 * C47154;
    const double C47232 = be * C47154;
    const double C46929 = C46916 + C46927;
    const double C46939 = 2 * C46933;
    const double C47009 = C46991 * C46933;
    const double C47054 = C46842 * C46933;
    const double C47093 = ae * C46933;
    const double C1198 =
        (2 * C46991 * C46918 + C46991 * (C46918 + C46933 * C47001)) / C46789;
    const double C1341 = (C46842 * (C46918 + C46933 * C47001) +
                          (C46914 + C46935 * C47001) * be) /
                         C46789;
    const double C47023 = C46916 + C47020;
    const double C47080 = C47073 + C47074;
    const double C47155 = C46842 * C47152;
    const double C47194 = 2 * C47152;
    const double C47231 = ae * C47152;
    const double C47316 = C47303 + C47304;
    const double C46884 = C46883 * C46788;
    const double C46977 = C46944 + C46974;
    const double C47218 = C47215 * C47001;
    const double C47263 = C46991 * C47215;
    const double C47355 = C46842 * C47215;
    const double C47402 = C46944 + C47399;
    const double C47466 = C46842 * C47458;
    const double C47520 = C47512 + C47513;
    const double C46975 = C46940 + C46972;
    const double C47216 = C47211 * C47001;
    const double C47261 = C46991 * C47211;
    const double C47349 = C46842 * C47211;
    const double C47400 = C46940 + C47393;
    const double C47462 = C46842 * C47454;
    const double C47517 = C47504 + C47505;
    const double C119 = 3 * (C46907 + C46849 * C46860) +
                        C46848 * (2 * C46914 + C46848 * C46925);
    const double C304 = C46907 + C46849 * C46860 + C46925 * C47001;
    const double C305 = C46991 * (2 * C46914 + C46848 * C46925);
    const double C505 = C46907 + C46849 * C46860 + C46925 * C46845;
    const double C506 = C46842 * (2 * C46914 + C46848 * C46925);
    const double C964 = C46842 * C46991 * C46925;
    const double C1325 = C46991 * C46914 + C47010 * C46845;
    const double C1193 = 3 * (C46907 + C46849 * C47001) +
                         C46991 * (2 * C47014 + C46991 * C47024);
    const double C1330 = C46907 + C46849 * C47001 + C47024 * C46845;
    const double C1748 = C46842 * (2 * C47014 + C46991 * C47024);
    const double C2053 = 3 * (C46907 + C46849 * C46845) +
                         C46842 * (2 * C47064 + C46842 * C47082);
    const double C350 = C113 * C318;
    const double C10662 = C10445 * C318;
    const double C348 = C113 * C317;
    const double C10660 = C10445 * C317;
    const double C46973 = C46848 * C46969;
    const double C47035 = C46969 * C47001;
    const double C47124 = C46969 * ae;
    const double C47122 = C46969 * C46845;
    const double C47121 = C46842 * C46969;
    const double C47120 = C46969 * be;
    const double C47177 = C46991 * C46969;
    const double C47220 = C46961 + C47217;
    const double C47271 = C47262 * ae;
    const double C47269 = C47262 * C46845;
    const double C47268 = C46842 * C47262;
    const double C47267 = C47262 * be;
    const double C47361 = C46961 + C47352;
    const double C47363 = C47351 * ae;
    const double C47360 = C47351 * be;
    const double C47404 = C46991 * C47401;
    const double C47425 = C47401 * ae;
    const double C47423 = C47401 * C46845;
    const double C47422 = C46842 * C47401;
    const double C47421 = C47401 * be;
    const double C47472 = C47235 + C47465;
    const double C47474 = C47464 * ae;
    const double C47471 = C47464 * be;
    const double C47529 = C47519 * ae;
    const double C47527 = C46842 * C47519;
    const double C47526 = C47519 * be;
    const double C46952 = C46848 * C46950;
    const double C46963 = 3 * C46950;
    const double C47007 = C46991 * C46950;
    const double C47049 = C46842 * C46950;
    const double C47117 = be * C46950;
    const double C47032 = C46937 + C47029;
    const double C47170 = C46842 * C47166;
    const double C47214 = 2 * C47166;
    const double C47259 = be * C47166;
    const double C47205 = C46991 * C47202;
    const double C47288 = C46842 * C47202;
    const double C47397 = 3 * C47202;
    const double C47418 = be * C47202;
    const double C46951 = C46848 * C46948;
    const double C46957 = 3 * C46948;
    const double C47005 = C46991 * C46948;
    const double C47046 = C46842 * C46948;
    const double C47116 = ae * C46948;
    const double C47030 = C46933 + C47027;
    const double C47167 = C46842 * C47164;
    const double C47210 = 2 * C47164;
    const double C47258 = ae * C47164;
    const double C47358 = C47345 + C47346;
    const double C47203 = C46991 * C47200;
    const double C47285 = C46842 * C47200;
    const double C47391 = 3 * C47200;
    const double C47417 = ae * C47200;
    const double C47460 = C47450 + C47451;
    const double C105 = C48144 / C47823;
    const double C103 = C47818 / C47823 - (C48143 * C48107) / C46815;
    const double C104 = C48143 / C46816 - (C48144 * C48107) / C46789;
    const double C16187 = C48143 / C46789;
    const double C47844 = C47843 * C47837;
    const double C47851 = C47843 / C47850;
    const double C48113 = C47849 * C47843;
    const double C48111 = C47843 / C47832;
    const double C296 = (C47841 * std::pow(C47837, 2)) / C47835 + C47842;
    const double C47853 = C47852 * C47837;
    const double C48117 = C47834 * C47852;
    const double C48115 = 2 * C47852;
    const double C48161 = C47852 / C48119;
    const double C112 = C47852 / C48154;
    const double C2941 = C47852 / C47836;
    const double C48147 = C48112 / C47832;
    const double C297 = (-2 * C47849 * C48112) / C47832;
    const double C48178 = C48145 / C47835;
    const double C1116 = (C47869 * std::pow(C47924, 2)) / C47835 + C47923;
    const double C47926 = C47925 * C47924;
    const double C47931 = C47925 / C47850;
    const double C48125 = C47925 / C47832;
    const double C48122 = C47849 * C47925;
    const double C47933 = C47932 * C47924;
    const double C48131 = C47922 * C47932;
    const double C48130 = 2 * C47932;
    const double C48167 = C47932 / C48119;
    const double C1188 = C47932 / C48154;
    const double C2938 = C47932 / C47836;
    const double C48163 = C48127 / C47832;
    const double C1117 = (-2 * C47849 * C48127) / C47832;
    const double C48183 = C48155 / C47835;
    const double C1870 = (C47887 * std::pow(C47966, 2)) / C47835 + C47965;
    const double C47968 = C47967 * C47966;
    const double C47973 = C47967 / C47850;
    const double C48126 = C47967 / C47832;
    const double C48124 = C47849 * C47967;
    const double C47975 = C47974 * C47966;
    const double C48137 = C47964 * C47974;
    const double C48136 = 2 * C47974;
    const double C48173 = C47974 / C48119;
    const double C2049 = C47974 / C48154;
    const double C3840 = C47974 / C47836;
    const double C48169 = C48133 / C47832;
    const double C1871 = (-2 * C47849 * C48133) / C47832;
    const double C48185 = C48158 / C47835;
    const double C21659 = C48175 / C47823;
    const double C4813 = C48174 / C46789;
    const double C21657 = C48073 / C47823 - (C48174 * C48141) / C46815;
    const double C21658 = C48174 / C46816 - (C48175 * C48141) / C46789;
    const double C46821 = C46787 * C46819;
    const double C10467 = C10446 * C118;
    const double C10463 = C10446 * C117;
    const double C10451 = C10446 * C116;
    const double C10669 = C10446 * C299;
    const double C10657 = C10446 * C300;
    const double C10871 = C10446 * C500;
    const double C10859 = C10446 * C501;
    const double C25993 = C10446 * C302;
    const double C25981 = C10446 * C301;
    const double C26613 = C10446 * C962;
    const double C26851 = C10446 * C1192;
    const double C27033 = C10446 * C1329;
    const double C10460 = C10447 * C511;
    const double C10458 = C10447 * C510;
    const double C10456 = C10447 * C513;
    const double C10454 = C10447 * C512;
    const double C25990 = C10447 * C1344;
    const double C25988 = C10447 * C1343;
    const double C25986 = C10447 * C968;
    const double C25984 = C10447 * C967;
    const double C10459 = C10448 * C500;
    const double C10455 = C10448 * C501;
    const double C25989 = C10448 * C1329;
    const double C25985 = C10448 * C962;
    const double C31450 = C31427 * C129;
    const double C31448 = C31427 * C128;
    const double C31446 = C31427 * C127;
    const double C31444 = C31427 * C126;
    const double C31434 = C31427 * C125;
    const double C31432 = C31427 * C124;
    const double C31652 = C31427 * C310;
    const double C31650 = C31427 * C309;
    const double C31644 = C31427 * C318;
    const double C31642 = C31427 * C317;
    const double C31640 = C31427 * C312;
    const double C31638 = C31427 * C311;
    const double C31854 = C31427 * C511;
    const double C31852 = C31427 * C510;
    const double C31842 = C31427 * C513;
    const double C31840 = C31427 * C512;
    const double C37320 = C31427 * C316;
    const double C37318 = C31427 * C315;
    const double C37308 = C31427 * C314;
    const double C37306 = C31427 * C313;
    const double C37940 = C31427 * C968;
    const double C37938 = C31427 * C967;
    const double C38178 = C31427 * C1201;
    const double C38176 = C31427 * C1200;
    const double C38360 = C31427 * C1344;
    const double C38358 = C31427 * C1343;
    const double C31449 = C31428 * C118;
    const double C31445 = C31428 * C117;
    const double C31433 = C31428 * C116;
    const double C31651 = C31428 * C299;
    const double C31639 = C31428 * C300;
    const double C31853 = C31428 * C500;
    const double C31841 = C31428 * C501;
    const double C37319 = C31428 * C302;
    const double C37307 = C31428 * C301;
    const double C37939 = C31428 * C962;
    const double C38177 = C31428 * C1192;
    const double C38359 = C31428 * C1329;
    const double C31442 = C31429 * C511;
    const double C31440 = C31429 * C510;
    const double C31438 = C31429 * C513;
    const double C31436 = C31429 * C512;
    const double C37316 = C31429 * C1344;
    const double C37314 = C31429 * C1343;
    const double C37312 = C31429 * C968;
    const double C37310 = C31429 * C967;
    const double C31441 = C31430 * C500;
    const double C31437 = C31430 * C501;
    const double C37315 = C31430 * C1329;
    const double C37311 = C31430 * C962;
    const double C164 = C144 - C145;
    const double C4988 = C4972 - C4973;
    const double C10465 = C10443 * C138;
    const double C10453 = C10443 * C137;
    const double C25983 = C10443 * C331;
    const double C42730 =
        (((0 - (C46787 * C46814) / C46789) * ae) / C46789 - (0 * be) / C46816) /
            (2 * C46789) -
        ((C46787 * (((C48090 - (C46787 * 2 * C46796) / C46789) * ae) / C46789 -
                    C46814 / C46816) +
          C10443) *
         be) /
            C46789 +
        (0 * ae) / C46789 - C46796 / C46815;
    const double C139 =
        (2 * C46848 * C46855 +
         C46848 * (C46855 +
                   (C46850 * C46851 + C46845 * bs[5] * std::pow(C46844, 5)) *
                       C46788 * std::pow(C46848, 2))) /
        C46815;
    const double C330 = ((yP - yQ) * C46848 * C46855) / C46815;
    const double C332 =
        ((bs[2] * std::pow(C46840, 2) + C46845 * C46843 * C46846) * C46788 +
         C46855 * std::pow(yP - yQ, 2)) /
        C46815;
    const double C531 =
        (ae * C46848 * C46846 * C46843 * C46900 +
         be * C46848 * C46846 * C46843 * C46901 + C46842 * C46848 * C46855) /
        C46815;
    const double C533 =
        ((C46907 + C46845 * C46843 * C46846) * C46788 +
         ae * (C46842 * C46910 + C46907 * be) +
         be * (C46842 * C46911 + C46907 * ae) +
         C46842 * (ae * C46910 + be * C46911 + C46842 * C46855)) /
        C46815;
    const double C977 = (ae * C46991 * C46910 + be * C46991 * C46911 +
                         C46842 * C46991 * C46855) /
                        C46815;
    const double C549 = C113 * C518;
    const double C10862 = C10445 * C518;
    const double C10854 = C10447 * C518;
    const double C31844 = C31427 * C518;
    const double C31836 = C31429 * C518;
    const double C551 = C113 * C519;
    const double C10864 = C10445 * C519;
    const double C10856 = C10447 * C519;
    const double C31846 = C31427 * C519;
    const double C31838 = C31429 * C519;
    const double C983 = C113 * C969;
    const double C10652 = C10447 * C969;
    const double C11392 = C10445 * C969;
    const double C31634 = C31429 * C969;
    const double C32374 = C31427 * C969;
    const double C985 = C113 * C970;
    const double C10654 = C10447 * C970;
    const double C11394 = C10445 * C970;
    const double C31636 = C31429 * C970;
    const double C32376 = C31427 * C970;
    const double C349 = C114 * C303;
    const double C10661 = C10446 * C303;
    const double C31643 = C31428 * C303;
    const double C550 = C114 * C504;
    const double C10863 = C10446 * C504;
    const double C10855 = C10448 * C504;
    const double C31845 = C31428 * C504;
    const double C31837 = C31430 * C504;
    const double C984 = C114 * C963;
    const double C10653 = C10448 * C963;
    const double C11393 = C10446 * C963;
    const double C31635 = C31430 * C963;
    const double C32375 = C31428 * C963;
    const double C1474 = C114 * C1191;
    const double C11929 = C10446 * C1191;
    const double C32911 = C31428 * C1191;
    const double C1640 = C114 * C1328;
    const double C10665 = C10448 * C1328;
    const double C12137 = C10446 * C1328;
    const double C31647 = C31430 * C1328;
    const double C33119 = C31428 * C1328;
    const double C2352 = C114 * C2051;
    const double C10867 = C10448 * C2051;
    const double C13001 = C10446 * C2051;
    const double C31849 = C31430 * C2051;
    const double C33975 = C31428 * C2051;
    const double C6028 = C113 * C1337;
    const double C26608 = C10447 * C1337;
    const double C27024 = C10445 * C1337;
    const double C37934 = C31429 * C1337;
    const double C38350 = C31427 * C1337;
    const double C6030 = C113 * C1338;
    const double C26610 = C10447 * C1338;
    const double C27026 = C10445 * C1338;
    const double C37936 = C31429 * C1338;
    const double C38352 = C31427 * C1338;
    const double C6029 = C114 * C1326;
    const double C26609 = C10448 * C1326;
    const double C27025 = C10446 * C1326;
    const double C37935 = C31430 * C1326;
    const double C38351 = C31428 * C1326;
    const double C7392 = C114 * C2460;
    const double C27029 = C10448 * C2460;
    const double C28371 = C10446 * C2460;
    const double C38355 = C31430 * C2460;
    const double C39693 = C31428 * C2460;
    const double C2061 = (2 * (C46842 * C46911 + C46907 * ae) +
                          C46842 * (C46911 + C46842 * C47068 + C47064 * ae) +
                          (C46907 + C46849 * C46845) * ae) /
                         C46789;
    const double C2060 = (2 * (C46842 * C46910 + C46907 * be) +
                          C46842 * (C46910 + C46842 * C47067 + C47064 * be) +
                          (C46907 + C46849 * C46845) * be) /
                         C46789;
    const double C165 = C148 - C149;
    const double C166 = C152 - C153;
    const double C364 = C340 - C341;
    const double C365 = C344 - C345;
    const double C4989 = C4978 - C4979;
    const double C565 = C541 - C542;
    const double C566 = C545 - C546;
    const double C5614 = C5606 - C5607;
    const double C5865 = C5853 - C5854;
    const double C6045 = C6032 - C6033;
    const double C46998 = C46848 * C46864;
    const double C47072 = C46842 * C46864;
    const double C47151 = C46991 * C46864;
    const double C140 =
        (3 * (C46855 + C46864 * C46860) +
         C46848 * (2 * C46848 * C46864 +
                   C46848 * (C46864 + (C46858 * C46859 +
                                       C46845 * bs[6] * std::pow(C46840, 6)) *
                                          C46788 * C46860))) /
        C46815;
    const double C329 = ((yP - yQ) * (C46855 + C46864 * C46860)) / C46815;
    const double C333 =
        (C46848 * C46855 + C46848 * C46864 * std::pow(yP - yQ, 2)) / C46815;
    const double C530 =
        (ae * (C46846 * C46843 * C46900 + C46851 * C46850 * C46900 * C46860) +
         be * (C46846 * C46843 * C46901 + C46851 * C46850 * C46901 * C46860) +
         C46842 * (C46855 + C46864 * C46860)) /
        C46815;
    const double C534 =
        (C46848 * C46855 + ae * (C46842 * C46918 + C46914 * be) +
         be * (C46842 * C46919 + C46914 * ae) +
         C46842 * (ae * C46918 + be * C46919 + C46842 * C46848 * C46864)) /
        C46815;
    const double C978 = (ae * C46991 * C46918 + be * C46991 * C46919 +
                         C46842 * C46991 * C46848 * C46864) /
                        C46815;
    const double C1210 = (2 * C46991 * C46855 +
                          C46991 * (C46855 + C46864 * std::pow(C46991, 2))) /
                         C46815;
    const double C1353 =
        (C46991 * C46855 + ae * (C46842 * C47013 + C47014 * be) +
         be * (C46842 * C47015 + C47014 * ae) +
         C46842 * (ae * C47013 + be * C47015 + C46842 * C46991 * C46864)) /
        C46815;
    const double C1356 =
        (ae * (C46910 + C46916 * C47001) + be * (C46911 + C46917 * C47001) +
         C46842 * (C46855 + C46864 * C47001)) /
        C46815;
    const double C2070 =
        (2 * (ae * C46910 + be * C46911 + C46842 * C46855) +
         ae * (C46910 + C46842 * C47067 + C47064 * be) +
         be * (C46911 + C46842 * C47068 + C47064 * ae) +
         C46842 * (C46855 + ae * C47067 + be * C47068 +
                   C46842 * (ae * C46916 + be * C46917 + C46842 * C46864))) /
        C46815;
    const double C46873 = C46872 * C46860;
    const double C46876 = C46848 * C46872;
    const double C47187 = C46872 * C47001;
    const double C47233 = C46991 * C46872;
    const double C47305 = C46842 * C46872;
    const double C1211 =
        (3 * (C46855 + C46864 * C47001) +
         C46991 * (2 * C46991 * C46864 + C46991 * (C46864 + C46872 * C47001))) /
        C46815;
    const double C46946 = C46848 * C46942;
    const double C46960 = 3 * C46942;
    const double C47006 = C46991 * C46942;
    const double C47050 = C46942 * ae;
    const double C47048 = C46842 * C46942;
    const double C47047 = C46942 * be;
    const double C1190 =
        2 * C46991 * C46925 + C46991 * (C46925 + C46942 * C47001);
    const double C1327 = C46842 * (C46925 + C46942 * C47001);
    const double C2050 =
        2 * C46842 * C46925 + C46842 * (C46925 + C46942 * C46845);
    const double C47031 = C46935 + C47028;
    const double C47106 = C47100 + C47101;
    const double C47105 = C46935 + C47099;
    const double C47107 = C47098 * ae;
    const double C47104 = C47098 * be;
    const double C47353 = 2 * C47098;
    const double C47103 = C47096 + C47097;
    const double C47171 = C47165 * ae;
    const double C47169 = C46842 * C47165;
    const double C47168 = C47165 * be;
    const double C47212 = 2 * C47165;
    const double C2461 =
        2 * C46842 * C47010 + C46842 * (C47010 + C47165 * C46845);
    const double C47204 = C46991 * C47201;
    const double C47289 = C47201 * ae;
    const double C47287 = C46842 * C47201;
    const double C47286 = C47201 * be;
    const double C47394 = 3 * C47201;
    const double C7382 =
        2 * C46842 * C47024 + C46842 * (C47024 + C47201 * C46845);
    const double C47249 = C47243 + C47244;
    const double C47248 = C47153 + C47242;
    const double C47250 = C47241 * ae;
    const double C47247 = C47241 * be;
    const double C47456 = 2 * C47241;
    const double C47246 = C47239 + C47240;
    const double C47327 = C46842 * C47320;
    const double C47511 = 2 * C47320;
    const double C47498 = be * C47320;
    const double C47328 = C47319 * ae;
    const double C47326 = C46842 * C47319;
    const double C47325 = C47319 * be;
    const double C47509 = 3 * C47319;
    const double C47324 = C46842 * C47317;
    const double C47503 = 2 * C47317;
    const double C47497 = ae * C47317;
    const double C131 = (3 * (C46911 + C46917 * C46860) +
                         C46848 * (2 * C46919 + C46848 * C46930)) /
                        C46789;
    const double C320 = (C46911 + C46917 * C46860 + C46930 * C47001) / C46789;
    const double C322 = (C46991 * (2 * C46919 + C46848 * C46930)) / C46789;
    const double C521 =
        (C46911 + C46917 * C46860 + C46842 * (C46842 * C46930 + C46925 * ae) +
         C46842 * C46925 * ae) /
        C46789;
    const double C523 = (C46842 * (2 * C46919 + C46848 * C46930) +
                         (2 * C46914 + C46848 * C46925) * ae) /
                        C46789;
    const double C972 =
        (C46842 * C46991 * C46930 + C46991 * C46925 * ae) / C46789;
    const double C1197 =
        (2 * C46991 * C46930 + C46991 * (C46930 + C46950 * C47001)) / C46789;
    const double C1340 = (C46842 * (C46930 + C46950 * C47001) +
                          (C46925 + C46942 * C47001) * ae) /
                         C46789;
    const double C1336 =
        (C46991 * C46919 + C46842 * (C46842 * C47011 + C47010 * ae) +
         C46842 * C47010 * ae) /
        C46789;
    const double C47060 = C47057 + C47058;
    const double C1475 = C113 * C1199;
    const double C11930 = C10445 * C1199;
    const double C32912 = C31427 * C1199;
    const double C1641 = C113 * C1342;
    const double C10666 = C10447 * C1342;
    const double C12138 = C10445 * C1342;
    const double C31648 = C31429 * C1342;
    const double C33120 = C31427 * C1342;
    const double C1203 = (3 * (C46911 + C46917 * C47001) +
                          C46991 * (2 * C47015 + C46991 * C47025)) /
                         C46789;
    const double C1346 =
        (C46911 + C46917 * C47001 + C46842 * (C46842 * C47025 + C47024 * ae) +
         C46842 * C47024 * ae) /
        C46789;
    const double C1752 = (C46842 * (2 * C47015 + C46991 * C47025) +
                          (2 * C47014 + C46991 * C47024) * ae) /
                         C46789;
    const double C47087 = C46842 * C47083;
    const double C47312 = 2 * C47083;
    const double C47302 = be * C47083;
    const double C47161 = C47158 + C47159;
    const double C130 = (3 * (C46910 + C46916 * C46860) +
                         C46848 * (2 * C46918 + C46848 * C46929)) /
                        C46789;
    const double C319 = (C46910 + C46916 * C46860 + C46929 * C47001) / C46789;
    const double C321 = (C46991 * (2 * C46918 + C46848 * C46929)) / C46789;
    const double C520 =
        (C46910 + C46916 * C46860 + C46842 * (C46842 * C46929 + C46925 * be) +
         C46842 * C46925 * be) /
        C46789;
    const double C522 = (C46842 * (2 * C46918 + C46848 * C46929) +
                         (2 * C46914 + C46848 * C46925) * be) /
                        C46789;
    const double C971 =
        (C46842 * C46991 * C46929 + C46991 * C46925 * be) / C46789;
    const double C1196 =
        (2 * C46991 * C46929 + C46991 * (C46929 + C46948 * C47001)) / C46789;
    const double C1339 = (C46842 * (C46929 + C46948 * C47001) +
                          (C46925 + C46942 * C47001) * be) /
                         C46789;
    const double C1335 =
        (C46991 * C46918 + C46842 * (C46842 * C47009 + C47010 * be) +
         C46842 * C47010 * be) /
        C46789;
    const double C47059 = C47054 + C47055;
    const double C47102 = C47093 + C47094;
    const double C1473 = C113 * C1198;
    const double C11928 = C10445 * C1198;
    const double C32910 = C31427 * C1198;
    const double C1639 = C113 * C1341;
    const double C10664 = C10447 * C1341;
    const double C12136 = C10445 * C1341;
    const double C31646 = C31429 * C1341;
    const double C33118 = C31427 * C1341;
    const double C1357 =
        (C46855 + C46864 * C47001 + ae * (C46842 * C47023 + C47024 * be) +
         be * (C46842 * C47025 + C47024 * ae) +
         C46842 * (ae * C47023 + be * C47025 +
                   C46842 * (C46864 + C46872 * C47001))) /
        C46815;
    const double C1757 =
        (ae * (2 * C47013 + C46991 * C47023) +
         be * (2 * C47015 + C46991 * C47025) +
         C46842 * (2 * C46991 * C46864 + C46991 * (C46864 + C46872 * C47001))) /
        C46815;
    const double C1202 = (3 * (C46910 + C46916 * C47001) +
                          C46991 * (2 * C47013 + C46991 * C47023)) /
                         C46789;
    const double C1345 =
        (C46910 + C46916 * C47001 + C46842 * (C46842 * C47023 + C47024 * be) +
         C46842 * C47024 * be) /
        C46789;
    const double C1751 = (C46842 * (2 * C47013 + C46991 * C47023) +
                          (2 * C47014 + C46991 * C47024) * be) /
                         C46789;
    const double C47086 = C46842 * C47080;
    const double C47306 = 2 * C47080;
    const double C47301 = ae * C47080;
    const double C47160 = C47155 + C47156;
    const double C47237 = C47231 + C47232;
    const double C46885 = C46884 * C46860;
    const double C47190 = C46848 * C46884;
    const double C47386 = C46884 * C47001;
    const double C47452 = C46991 * C46884;
    const double C47501 = C46842 * C46884;
    const double C46980 = C46848 * C46977;
    const double C47036 = C46977 * C47001;
    const double C47123 = C46842 * C46977;
    const double C47178 = C46991 * C46977;
    const double C47221 = C46964 + C47218;
    const double C47270 = C46842 * C47263;
    const double C47362 = C47355 + C47356;
    const double C47405 = C46991 * C47402;
    const double C47424 = C46842 * C47402;
    const double C47473 = C47466 + C47467;
    const double C47528 = C46842 * C47520;
    const double C46978 = C46848 * C46975;
    const double C47034 = C46975 * C47001;
    const double C47119 = C46842 * C46975;
    const double C47176 = C46991 * C46975;
    const double C47219 = C46958 + C47216;
    const double C47266 = C46842 * C47261;
    const double C47359 = C47349 + C47350;
    const double C47403 = C46991 * C47400;
    const double C47420 = C46842 * C47400;
    const double C47470 = C47462 + C47463;
    const double C47525 = C46842 * C47517;
    const double C157 = C114 * C119;
    const double C10479 = C10446 * C119;
    const double C31461 = C31428 * C119;
    const double C353 = C114 * C304;
    const double C10681 = C10446 * C304;
    const double C31663 = C31428 * C304;
    const double C357 = C114 * C305;
    const double C11045 = C10446 * C305;
    const double C32027 = C31428 * C305;
    const double C554 = C114 * C505;
    const double C10883 = C10446 * C505;
    const double C10875 = C10448 * C505;
    const double C31865 = C31428 * C505;
    const double C31857 = C31430 * C505;
    const double C558 = C114 * C506;
    const double C10471 = C10448 * C506;
    const double C11189 = C10446 * C506;
    const double C31453 = C31430 * C506;
    const double C32171 = C31428 * C506;
    const double C988 = C114 * C964;
    const double C10673 = C10448 * C964;
    const double C11405 = C10446 * C964;
    const double C31655 = C31430 * C964;
    const double C32387 = C31428 * C964;
    const double C2230 = C114 * C1325;
    const double C11397 = C10448 * C1325;
    const double C12857 = C10446 * C1325;
    const double C32379 = C31430 * C1325;
    const double C33831 = C31428 * C1325;
    const double C5862 = C114 * C1193;
    const double C26863 = C10446 * C1193;
    const double C38189 = C31428 * C1193;
    const double C6041 = C114 * C1330;
    const double C27045 = C10446 * C1330;
    const double C27037 = C10448 * C1330;
    const double C38371 = C31428 * C1330;
    const double C38363 = C31430 * C1330;
    const double C6530 = C114 * C1748;
    const double C26855 = C10448 * C1748;
    const double C27525 = C10446 * C1748;
    const double C38181 = C31430 * C1748;
    const double C38851 = C31428 * C1748;
    const double C46976 = C46968 + C46973;
    const double C47038 = C46942 + C47035;
    const double C47128 = C46942 + C47122;
    const double C47130 = C47121 * ae;
    const double C47127 = C47121 * be;
    const double C47183 = C47177 * ae;
    const double C47181 = C46842 * C47177;
    const double C47180 = C47177 * be;
    const double C47223 = C46991 * C47220;
    const double C47297 = C47220 * ae;
    const double C47295 = C46842 * C47220;
    const double C47294 = C47220 * be;
    const double C47275 = C47165 + C47269;
    const double C47277 = C47268 * ae;
    const double C47274 = C47268 * be;
    const double C47370 = C47361 * ae;
    const double C47368 = C46842 * C47361;
    const double C47367 = C47361 * be;
    const double C47407 = C47395 + C47404;
    const double C47429 = C47201 + C47423;
    const double C47431 = C47422 * ae;
    const double C47428 = C47422 * be;
    const double C47480 = C47472 * ae;
    const double C47478 = C46842 * C47472;
    const double C47477 = C47472 * be;
    const double C47532 = C47508 + C47527;
    const double C46954 = C46943 + C46952;
    const double C1205 = (3 * (C46919 + C46937 * C47001) +
                          C46991 * (2 * C47011 + C46991 * C47032)) /
                         C46789;
    const double C47208 = C47198 + C47205;
    const double C46953 = C46939 + C46951;
    const double C47125 = C47116 + C47117;
    const double C1204 = (3 * (C46918 + C46933 * C47001) +
                          C46991 * (2 * C47009 + C46991 * C47030)) /
                         C46789;
    const double C47264 = C47258 + C47259;
    const double C47206 = C47194 + C47203;
    const double C47426 = C47417 + C47418;
    const double C47845 = C47844 / C47835;
    const double C48148 = 2 * C48113;
    const double C47854 = C47853 / C47832;
    const double C48152 = C48117 / C47850;
    const double C48179 = C48111 - C48147;
    const double C2678 = -C48147;
    const double C48193 = C48178 + C47842;
    const double C47927 = C47926 / C47835;
    const double C48156 = 2 * C48122;
    const double C47934 = C47933 / C47832;
    const double C48166 = C48131 / C47850;
    const double C48187 = C48125 - C48163;
    const double C2570 = -C48163;
    const double C48196 = C48183 + C47923;
    const double C47969 = C47968 / C47835;
    const double C48159 = 2 * C48124;
    const double C47976 = C47975 / C47832;
    const double C48172 = C48137 / C47850;
    const double C48190 = C48126 - C48169;
    const double C3332 = -C48169;
    const double C48197 = C48185 + C47965;
    const double C46822 = C46821 / C46789;
    const double C10486 = C10466 - C10467;
    const double C10485 = C10462 - C10463;
    const double C10482 = C10450 - C10451;
    const double C10688 = C10668 - C10669;
    const double C10685 = C10656 - C10657;
    const double C10890 = C10870 - C10871;
    const double C10887 = C10858 - C10859;
    const double C25999 = C25992 - C25993;
    const double C25996 = C25980 - C25981;
    const double C26617 = C26612 - C26613;
    const double C26866 = C26850 - C26851;
    const double C27050 = C27032 - C27033;
    const double C10484 = C10458 - C10459;
    const double C10483 = C10454 - C10455;
    const double C25998 = C25988 - C25989;
    const double C25997 = C25984 - C25985;
    const double C31468 = C31448 - C31449;
    const double C31467 = C31444 - C31445;
    const double C31464 = C31432 - C31433;
    const double C31670 = C31650 - C31651;
    const double C31667 = C31638 - C31639;
    const double C31872 = C31852 - C31853;
    const double C31869 = C31840 - C31841;
    const double C37325 = C37318 - C37319;
    const double C37322 = C37306 - C37307;
    const double C37943 = C37938 - C37939;
    const double C38192 = C38176 - C38177;
    const double C38376 = C38358 - C38359;
    const double C31466 = C31440 - C31441;
    const double C31465 = C31436 - C31437;
    const double C37324 = C37314 - C37315;
    const double C37323 = C37310 - C37311;
    const double C169 = C164 - C146;
    const double C4990 = C4988 - C4974;
    const double C155 = C48090 * C139;
    const double C10469 = C10443 * C139;
    const double C31451 = C31425 * C139;
    const double C347 = C48090 * C330;
    const double C10659 = C10443 * C330;
    const double C31641 = C31425 * C330;
    const double C4981 = C48090 * C332;
    const double C25995 = C10443 * C332;
    const double C37321 = C31425 * C332;
    const double C548 = C48090 * C531;
    const double C10457 = C48177 * C531;
    const double C10861 = C10443 * C531;
    const double C31439 = C48177 * C531;
    const double C31843 = C31425 * C531;
    const double C5609 = C48090 * C977;
    const double C25987 = C48177 * C977;
    const double C26615 = C10443 * C977;
    const double C37313 = C48177 * C977;
    const double C37941 = C31425 * C977;
    const double C366 = C348 - C349;
    const double C10686 = C10660 - C10661;
    const double C31668 = C31642 - C31643;
    const double C567 = C549 - C550;
    const double C10888 = C10862 - C10863;
    const double C10886 = C10854 - C10855;
    const double C31870 = C31844 - C31845;
    const double C31868 = C31836 - C31837;
    const double C995 = C983 - C984;
    const double C10684 = C10652 - C10653;
    const double C11408 = C11392 - C11393;
    const double C31666 = C31634 - C31635;
    const double C32390 = C32374 - C32375;
    const double C6044 = C6028 - C6029;
    const double C26616 = C26608 - C26609;
    const double C27048 = C27024 - C27025;
    const double C37942 = C37934 - C37935;
    const double C38374 = C38350 - C38351;
    const double C170 = C165 - C150;
    const double C171 = C166 - C154;
    const double C370 = C364 - C342;
    const double C371 = C365 - C346;
    const double C4991 = C4989 - C4980;
    const double C571 = C565 - C543;
    const double C572 = C566 - C547;
    const double C5615 = C5614 - C5608;
    const double C5868 = C5865 - C5855;
    const double C6049 = C6045 - C6034;
    const double C47085 = C47079 + C47072;
    const double C159 = C48090 * C140;
    const double C10481 = C10443 * C140;
    const double C31463 = C31425 * C140;
    const double C343 = C48090 * C329;
    const double C10671 = C10443 * C329;
    const double C31653 = C31425 * C329;
    const double C351 = C48090 * C333;
    const double C10663 = C10443 * C333;
    const double C31645 = C31425 * C333;
    const double C544 = C48090 * C530;
    const double C10461 = C48177 * C530;
    const double C10873 = C10443 * C530;
    const double C31443 = C48177 * C530;
    const double C31855 = C31425 * C530;
    const double C552 = C48090 * C534;
    const double C10865 = C10443 * C534;
    const double C10857 = C48177 * C534;
    const double C31847 = C31425 * C534;
    const double C31839 = C48177 * C534;
    const double C986 = C48090 * C978;
    const double C10655 = C48177 * C978;
    const double C11395 = C10443 * C978;
    const double C31637 = C48177 * C978;
    const double C32377 = C31425 * C978;
    const double C5856 = C48090 * C1210;
    const double C26853 = C10443 * C1210;
    const double C38179 = C31425 * C1210;
    const double C6031 = C48090 * C1353;
    const double C26611 = C48177 * C1353;
    const double C27027 = C10443 * C1353;
    const double C37937 = C48177 * C1353;
    const double C38353 = C31425 * C1353;
    const double C6035 = C48090 * C1356;
    const double C25991 = C48177 * C1356;
    const double C27035 = C10443 * C1356;
    const double C37317 = C48177 * C1356;
    const double C38361 = C31425 * C1356;
    const double C46874 = C46864 + C46873;
    const double C46880 = 2 * C46876;
    const double C47095 = C46842 * C46876;
    const double C47163 = C46991 * C46876;
    const double C1209 = (2 * C46991 * C46998 +
                          C46991 * (C46998 + C46876 * std::pow(C46991, 2))) /
                         C46815;
    const double C1212 =
        (3 * (C46998 + C46876 * C47001) +
         C46991 * (2 * C46991 * C46876 +
                   C46991 * (C46876 + C46848 * C46884 * C47001))) /
        C46815;
    const double C1352 =
        (C46991 * C46998 + ae * (C46842 * C47009 + C47010 * be) +
         be * (C46842 * C47011 + C47010 * ae) +
         C46842 * (ae * C47009 + be * C47011 + C46842 * C46991 * C46876)) /
        C46815;
    const double C1355 =
        (ae * (C46918 + C46933 * C47001) + be * (C46919 + C46937 * C47001) +
         C46842 * (C46998 + C46876 * C47001)) /
        C46815;
    const double C1758 =
        (ae * (2 * C47009 + C46991 * C47030) +
         be * (2 * C47011 + C46991 * C47032) +
         C46842 * (2 * C46991 * C46876 +
                   C46991 * (C46876 + C46848 * C46884 * C47001))) /
        C46815;
    const double C47188 = C46864 + C47187;
    const double C47238 = C46842 * C47233;
    const double C47385 = 2 * C47233;
    const double C47323 = C47316 + C47305;
    const double C5864 = C48090 * C1211;
    const double C26865 = C10443 * C1211;
    const double C38191 = C31425 * C1211;
    const double C46949 = C46941 + C46946;
    const double C1333 =
        (C46991 * C46929 + C46842 * (C46842 * C47005 + C47006 * be) +
         C46842 * C47006 * be) /
        C46789;
    const double C1334 =
        (C46991 * C46930 + C46842 * (C46842 * C47007 + C47006 * ae) +
         C46842 * C47006 * ae) /
        C46789;
    const double C1324 = C46991 * C46925 + C47006 * C46845;
    const double C2462 =
        2 * C46842 * C47006 + C46842 * (C47006 + C47177 * C46845);
    const double C47052 = C47049 + C47050;
    const double C47051 = C47046 + C47047;
    const double C1470 = C114 * C1190;
    const double C1636 = C114 * C1327;
    const double C10677 = C10448 * C1327;
    const double C31659 = C31430 * C1327;
    const double C2348 = C114 * C2050;
    const double C10879 = C10448 * C2050;
    const double C31861 = C31430 * C2050;
    const double C1358 =
        (C46998 + C46876 * C47001 + ae * (C46842 * C47030 + C47031 * be) +
         be * (C46842 * C47032 + C47031 * ae) +
         C46842 * (ae * C47030 + be * C47032 +
                   C46842 * (C46876 + C46848 * C46884 * C47001))) /
        C46815;
    const double C1347 =
        (C46918 + C46933 * C47001 + C46842 * (C46842 * C47030 + C47031 * be) +
         C46842 * C47031 * be) /
        C46789;
    const double C1348 =
        (C46919 + C46937 * C47001 + C46842 * (C46842 * C47032 + C47031 * ae) +
         C46842 * C47031 * ae) /
        C46789;
    const double C1753 = (C46842 * (2 * C47009 + C46991 * C47030) +
                          (2 * C47010 + C46991 * C47031) * be) /
                         C46789;
    const double C1754 = (C46842 * (2 * C47011 + C46991 * C47032) +
                          (2 * C47010 + C46991 * C47031) * ae) /
                         C46789;
    const double C1194 = 3 * (C46914 + C46935 * C47001) +
                         C46991 * (2 * C47010 + C46991 * C47031);
    const double C1331 = C46914 + C46935 * C47001 + C47031 * C46845;
    const double C1749 = C46842 * (2 * C47010 + C46991 * C47031);
    const double C7383 =
        2 * C46842 * C47031 + C46842 * (C47031 + C47220 * C46845);
    const double C47110 = C46842 * C47106;
    const double C47354 = 2 * C47106;
    const double C47344 = be * C47106;
    const double C2054 = 3 * (C46914 + C46935 * C46845) +
                         C46842 * (2 * C47056 + C46842 * C47105);
    const double C47109 = C46842 * C47103;
    const double C47348 = 2 * C47103;
    const double C47343 = ae * C47103;
    const double C47173 = C47170 + C47171;
    const double C47172 = C47167 + C47168;
    const double C7245 = C114 * C2461;
    const double C12853 = C10448 * C2461;
    const double C33827 = C31430 * C2461;
    const double C47207 = C47196 + C47204;
    const double C47291 = C47288 + C47289;
    const double C47290 = C47285 + C47286;
    const double C23514 = C114 * C7382;
    const double C27041 = C10448 * C7382;
    const double C38367 = C31430 * C7382;
    const double C47252 = C46842 * C47249;
    const double C47457 = 2 * C47249;
    const double C47449 = be * C47249;
    const double C6909 = 3 * (C47014 + C47153 * C46845) +
                         C46842 * (2 * C47157 + C46842 * C47248);
    const double C47251 = C46842 * C47246;
    const double C47453 = 2 * C47246;
    const double C47448 = ae * C47246;
    const double C47332 = C46926 + C47327;
    const double C47331 = C47311 + C47326;
    const double C47330 = C46924 + C47324;
    const double C47515 = C46872 + C47497;
    const double C158 = C113 * C131;
    const double C10480 = C10445 * C131;
    const double C31462 = C31427 * C131;
    const double C354 = C113 * C320;
    const double C10682 = C10445 * C320;
    const double C31664 = C31427 * C320;
    const double C358 = C113 * C322;
    const double C11046 = C10445 * C322;
    const double C32028 = C31427 * C322;
    const double C555 = C113 * C521;
    const double C10884 = C10445 * C521;
    const double C10876 = C10447 * C521;
    const double C31866 = C31427 * C521;
    const double C31858 = C31429 * C521;
    const double C559 = C113 * C523;
    const double C10472 = C10447 * C523;
    const double C11190 = C10445 * C523;
    const double C31454 = C31429 * C523;
    const double C32172 = C31427 * C523;
    const double C989 = C113 * C972;
    const double C10674 = C10447 * C972;
    const double C11406 = C10445 * C972;
    const double C31656 = C31429 * C972;
    const double C32388 = C31427 * C972;
    const double C1471 = C113 * C1197;
    const double C1637 = C113 * C1340;
    const double C10678 = C10447 * C1340;
    const double C31660 = C31429 * C1340;
    const double C2231 = C113 * C1336;
    const double C11398 = C10447 * C1336;
    const double C12858 = C10445 * C1336;
    const double C32380 = C31429 * C1336;
    const double C33832 = C31427 * C1336;
    const double C2059 = (2 * (C46842 * C46919 + C46914 * ae) +
                          C46842 * (C46919 + C46842 * C47060 + C47056 * ae) +
                          (C46914 + C46935 * C46845) * ae) /
                         C46789;
    const double C5863 = C113 * C1203;
    const double C26864 = C10445 * C1203;
    const double C38190 = C31427 * C1203;
    const double C6042 = C113 * C1346;
    const double C27046 = C10445 * C1346;
    const double C27038 = C10447 * C1346;
    const double C38372 = C31427 * C1346;
    const double C38364 = C31429 * C1346;
    const double C6531 = C113 * C1752;
    const double C26856 = C10447 * C1752;
    const double C27526 = C10445 * C1752;
    const double C38182 = C31429 * C1752;
    const double C38852 = C31427 * C1752;
    const double C47089 = C46917 + C47087;
    const double C2464 = (2 * (C46842 * C47015 + C47014 * ae) +
                          C46842 * (C47015 + C46842 * C47161 + C47157 * ae) +
                          (C47014 + C47153 * C46845) * ae) /
                         C46789;
    const double C156 = C113 * C130;
    const double C10478 = C10445 * C130;
    const double C31460 = C31427 * C130;
    const double C352 = C113 * C319;
    const double C10680 = C10445 * C319;
    const double C31662 = C31427 * C319;
    const double C356 = C113 * C321;
    const double C11044 = C10445 * C321;
    const double C32026 = C31427 * C321;
    const double C553 = C113 * C520;
    const double C10882 = C10445 * C520;
    const double C10874 = C10447 * C520;
    const double C31864 = C31427 * C520;
    const double C31856 = C31429 * C520;
    const double C557 = C113 * C522;
    const double C10470 = C10447 * C522;
    const double C11188 = C10445 * C522;
    const double C31452 = C31429 * C522;
    const double C32170 = C31427 * C522;
    const double C987 = C113 * C971;
    const double C10672 = C10447 * C971;
    const double C11404 = C10445 * C971;
    const double C31654 = C31429 * C971;
    const double C32386 = C31427 * C971;
    const double C1469 = C113 * C1196;
    const double C1635 = C113 * C1339;
    const double C10676 = C10447 * C1339;
    const double C31658 = C31429 * C1339;
    const double C2229 = C113 * C1335;
    const double C11396 = C10447 * C1335;
    const double C12856 = C10445 * C1335;
    const double C32378 = C31429 * C1335;
    const double C33830 = C31427 * C1335;
    const double C2069 =
        (2 * (ae * C46918 + be * C46919 + C46842 * C46998) +
         ae * (C46918 + C46842 * C47059 + C47056 * be) +
         be * (C46919 + C46842 * C47060 + C47056 * ae) +
         C46842 * (C46998 + ae * C47059 + be * C47060 +
                   C46842 * (ae * C46933 + be * C46937 + C46842 * C46876))) /
        C46815;
    const double C2058 = (2 * (C46842 * C46918 + C46914 * be) +
                          C46842 * (C46918 + C46842 * C47059 + C47056 * be) +
                          (C46914 + C46935 * C46845) * be) /
                         C46789;
    const double C1478 = C1473 - C1474;
    const double C11933 = C11928 - C11929;
    const double C32915 = C32910 - C32911;
    const double C1644 = C1639 - C1640;
    const double C10687 = C10664 - C10665;
    const double C12141 = C12136 - C12137;
    const double C31669 = C31646 - C31647;
    const double C33123 = C33118 - C33119;
    const double C6043 = C48090 * C1357;
    const double C27047 = C10443 * C1357;
    const double C27039 = C48177 * C1357;
    const double C38373 = C31425 * C1357;
    const double C38365 = C48177 * C1357;
    const double C6532 = C48090 * C1757;
    const double C26857 = C48177 * C1757;
    const double C27527 = C10443 * C1757;
    const double C38183 = C48177 * C1757;
    const double C38853 = C31425 * C1757;
    const double C5861 = C113 * C1202;
    const double C26862 = C10445 * C1202;
    const double C38188 = C31427 * C1202;
    const double C6040 = C113 * C1345;
    const double C27044 = C10445 * C1345;
    const double C27036 = C10447 * C1345;
    const double C38370 = C31427 * C1345;
    const double C38362 = C31429 * C1345;
    const double C6529 = C113 * C1751;
    const double C26854 = C10447 * C1751;
    const double C27524 = C10445 * C1751;
    const double C38180 = C31429 * C1751;
    const double C38850 = C31427 * C1751;
    const double C47088 = C46916 + C47086;
    const double C47315 = C46864 + C47301;
    const double C2469 = (2 * (ae * C47013 + be * C47015 + C46842 * C47151) +
                          ae * (C47013 + C46842 * C47160 + C47157 * be) +
                          be * (C47015 + C46842 * C47161 + C47157 * ae) +
                          C46842 * (C47151 + ae * C47160 + be * C47161 +
                                    C46842 * (ae * C47152 + be * C47154 +
                                              C46842 * C46991 * C46872))) /
                         C46815;
    const double C2463 = (2 * (C46842 * C47013 + C47014 * be) +
                          C46842 * (C47013 + C46842 * C47160 + C47157 * be) +
                          (C47014 + C47153 * C46845) * be) /
                         C46789;
    const double C46886 = C46872 + C46885;
    const double C47191 = C47190 * C47001;
    const double C47260 = C46991 * C47190;
    const double C47347 = C46842 * C47190;
    const double C47387 = C46872 + C47386;
    const double C47461 = C46842 * C47452;
    const double C47524 = C47516 + C47501;
    const double C46983 = C46970 + C46980;
    const double C47039 = C46950 + C47036;
    const double C47129 = C47123 + C47124;
    const double C47182 = C46842 * C47178;
    const double C47224 = C46991 * C47221;
    const double C47296 = C46842 * C47221;
    const double C47276 = C47270 + C47271;
    const double C47369 = C46842 * C47362;
    const double C47408 = C47398 + C47405;
    const double C47430 = C47424 + C47425;
    const double C47479 = C46842 * C47473;
    const double C47533 = C46944 + C47528;
    const double C46981 = C46966 + C46978;
    const double C47037 = C46948 + C47034;
    const double C47126 = C47119 + C47120;
    const double C47179 = C46842 * C47176;
    const double C47222 = C46991 * C47219;
    const double C47293 = C46842 * C47219;
    const double C47273 = C47266 + C47267;
    const double C47366 = C46842 * C47359;
    const double C47406 = C47392 + C47403;
    const double C47427 = C47420 + C47421;
    const double C47476 = C46842 * C47470;
    const double C47531 = C46940 + C47525;
    const double C46979 = C46848 * C46976;
    const double C47140 = C46991 * C46976;
    const double C47147 = C46976 * ae;
    const double C47145 = C46842 * C46976;
    const double C47144 = C46976 * be;
    const double C1195 = 3 * (C46925 + C46942 * C47001) +
                         C46991 * (2 * C47006 + C46991 * C47038);
    const double C1332 = C46925 + C46942 * C47001 + C47038 * C46845;
    const double C1750 = C46842 * (2 * C47006 + C46991 * C47038);
    const double C2055 = 3 * (C46925 + C46942 * C46845) +
                         C46842 * (2 * C47048 + C46842 * C47128);
    const double C47226 = C47212 + C47223;
    const double C6910 = 3 * (C47010 + C47165 * C46845) +
                         C46842 * (2 * C47169 + C46842 * C47275);
    const double C47373 = C47353 + C47368;
    const double C47410 = C46991 * C47407;
    const double C47444 = C47407 * ae;
    const double C47442 = C46842 * C47407;
    const double C47441 = C47407 * be;
    const double C23162 = 3 * (C47024 + C47201 * C46845) +
                          C46842 * (2 * C47287 + C46842 * C47429);
    const double C47483 = C47456 + C47478;
    const double C47539 = C47532 * ae;
    const double C47537 = C46842 * C47532;
    const double C47536 = C47532 * be;
    const double C133 = (4 * (2 * C46919 + C46848 * C46930) +
                         C46848 * (3 * C46930 + C46848 * C46954)) /
                        C46789;
    const double C324 =
        (2 * C46919 + C46848 * C46930 + C46954 * C47001) / C46789;
    const double C326 = (C46991 * (3 * C46930 + C46848 * C46954)) / C46789;
    const double C5859 = C113 * C1205;
    const double C5847 = (4 * (2 * C47015 + C46991 * C47025) +
                          C46991 * (3 * C47025 + C46991 * C47208)) /
                         C46789;
    const double C132 = (4 * (2 * C46918 + C46848 * C46929) +
                         C46848 * (3 * C46929 + C46848 * C46953)) /
                        C46789;
    const double C323 =
        (2 * C46918 + C46848 * C46929 + C46953 * C47001) / C46789;
    const double C325 = (C46991 * (3 * C46929 + C46848 * C46953)) / C46789;
    const double C5857 = C113 * C1204;
    const double C5846 = (4 * (2 * C47013 + C46991 * C47023) +
                          C46991 * (3 * C47023 + C46991 * C47206)) /
                         C46789;
    const double C47846 = C47842 - C47845;
    const double C48180 = C48148 / C47832;
    const double C47855 = C47851 - C47854;
    const double C48194 = C48179 / C47836;
    const double C47928 = C47923 - C47927;
    const double C48184 = C48156 / C47832;
    const double C47935 = C47931 - C47934;
    const double C48198 = C48187 / C47836;
    const double C47970 = C47965 - C47969;
    const double C48186 = C48159 / C47832;
    const double C47977 = C47973 - C47976;
    const double C48200 = C48190 / C47836;
    const double C46823 = C48090 - C46822;
    const double C10494 = C10486 - C10468;
    const double C10493 = C10485 - C10464;
    const double C10490 = C10482 - C10452;
    const double C10696 = C10688 - C10670;
    const double C10693 = C10685 - C10658;
    const double C10898 = C10890 - C10872;
    const double C10895 = C10887 - C10860;
    const double C26003 = C25999 - C25994;
    const double C26000 = C25996 - C25982;
    const double C26619 = C26617 - C26614;
    const double C26870 = C26866 - C26852;
    const double C27056 = C27050 - C27034;
    const double C10492 = C10484 - C10460;
    const double C10491 = C10483 - C10456;
    const double C26002 = C25998 - C25990;
    const double C26001 = C25997 - C25986;
    const double C31476 = C31468 - C31450;
    const double C31475 = C31467 - C31446;
    const double C31472 = C31464 - C31434;
    const double C31678 = C31670 - C31652;
    const double C31675 = C31667 - C31640;
    const double C31880 = C31872 - C31854;
    const double C31877 = C31869 - C31842;
    const double C37329 = C37325 - C37320;
    const double C37326 = C37322 - C37308;
    const double C37945 = C37943 - C37940;
    const double C38196 = C38192 - C38178;
    const double C38382 = C38376 - C38360;
    const double C31474 = C31466 - C31442;
    const double C31473 = C31465 - C31438;
    const double C37328 = C37324 - C37316;
    const double C37327 = C37323 - C37312;
    const double C174 = C169 + C147;
    const double C4992 = C4990 + C4975;
    const double C372 = C366 - C350;
    const double C10694 = C10686 - C10662;
    const double C31676 = C31668 - C31644;
    const double C573 = C567 - C551;
    const double C10896 = C10888 - C10864;
    const double C10894 = C10886 - C10856;
    const double C31878 = C31870 - C31846;
    const double C31876 = C31868 - C31838;
    const double C998 = C995 - C985;
    const double C10692 = C10684 - C10654;
    const double C11412 = C11408 - C11394;
    const double C31674 = C31666 - C31636;
    const double C32394 = C32390 - C32376;
    const double C6048 = C6044 - C6030;
    const double C26618 = C26616 - C26610;
    const double C27054 = C27048 - C27026;
    const double C37944 = C37942 - C37936;
    const double C38380 = C38374 - C38352;
    const double C175 = C170 + C151;
    const double C176 = C171 + C155;
    const double C377 = C371 + C347;
    const double C4993 = C4991 + C4981;
    const double C578 = C572 + C548;
    const double C5616 = C5615 + C5609;
    const double C376 = C370 + C343;
    const double C577 = C571 + C544;
    const double C5871 = C5868 + C5856;
    const double C6053 = C6049 + C6035;
    const double C141 =
        (4 * (2 * C46848 * C46864 + C46848 * C46874) +
         C46848 * (3 * C46874 +
                   C46848 * (2 * C46848 * C46872 +
                             C46848 * (C46872 +
                                       (C46867 * C46868 +
                                        C46845 * bs[7] * std::pow(C46844, 7)) *
                                           C46788 * C46860)))) /
        C46815;
    const double C334 =
        (C46855 + C46864 * C46860 + C46874 * std::pow(yP - yQ, 2)) / C46815;
    const double C335 =
        ((yP - yQ) * (2 * C46848 * C46864 + C46848 * C46874)) / C46815;
    const double C535 =
        (C46855 + C46864 * C46860 + ae * (C46842 * C46929 + C46925 * be) +
         be * (C46842 * C46930 + C46925 * ae) +
         C46842 * (ae * C46929 + be * C46930 + C46842 * C46874)) /
        C46815;
    const double C536 = (ae * (2 * C46918 + C46848 * C46929) +
                         be * (2 * C46919 + C46848 * C46930) +
                         C46842 * (2 * C46848 * C46864 + C46848 * C46874)) /
                        C46815;
    const double C979 = (ae * C46991 * C46929 + be * C46991 * C46930 +
                         C46842 * C46991 * C46874) /
                        C46815;
    const double C47108 = C47102 + C47095;
    const double C1476 = C48090 * C1209;
    const double C11931 = C10443 * C1209;
    const double C32913 = C31425 * C1209;
    const double C5860 = C48090 * C1212;
    const double C2232 = C48090 * C1352;
    const double C11399 = C48177 * C1352;
    const double C12859 = C10443 * C1352;
    const double C32381 = C48177 * C1352;
    const double C33833 = C31425 * C1352;
    const double C1642 = C48090 * C1355;
    const double C10667 = C48177 * C1355;
    const double C12139 = C10443 * C1355;
    const double C31649 = C48177 * C1355;
    const double C33121 = C31425 * C1355;
    const double C6385 = C48090 * C1758;
    const double C11927 = C48177 * C1758;
    const double C32909 = C48177 * C1758;
    const double C5850 =
        (4 * (2 * C47151 + C46991 * C47188) +
         C46991 *
             (3 * C47188 + C46991 * (2 * C46991 * C46872 +
                                     C46991 * (C46872 + C46884 * C47001)))) /
        C46815;
    const double C6526 =
        (ae * (3 * C47023 + C46991 * C47206) +
         be * (3 * C47025 + C46991 * C47208) +
         C46842 *
             (3 * C47188 + C46991 * (2 * C46991 * C46872 +
                                     C46991 * (C46872 + C46884 * C47001)))) /
        C46815;
    const double C47245 = C47237 + C47238;
    const double C47329 = C46842 * C47323;
    const double C47494 = 2 * C47323;
    const double C524 =
        (2 * C46918 + C46848 * C46929 +
         C46842 * (C46842 * C46953 + C46949 * be) + C46842 * C46949 * be) /
        C46789;
    const double C525 =
        (2 * C46919 + C46848 * C46930 +
         C46842 * (C46842 * C46954 + C46949 * ae) + C46842 * C46949 * ae) /
        C46789;
    const double C526 = (C46842 * (3 * C46929 + C46848 * C46953) +
                         (3 * C46925 + C46848 * C46949) * be) /
                        C46789;
    const double C527 = (C46842 * (3 * C46930 + C46848 * C46954) +
                         (3 * C46925 + C46848 * C46949) * ae) /
                        C46789;
    const double C973 =
        (C46842 * C46991 * C46953 + C46991 * C46949 * be) / C46789;
    const double C974 =
        (C46842 * C46991 * C46954 + C46991 * C46949 * ae) / C46789;
    const double C120 = 4 * (2 * C46914 + C46848 * C46925) +
                        C46848 * (3 * C46925 + C46848 * C46949);
    const double C306 = 2 * C46914 + C46848 * C46925 + C46949 * C47001;
    const double C307 = C46991 * (3 * C46925 + C46848 * C46949);
    const double C507 = 2 * C46914 + C46848 * C46925 + C46949 * C46845;
    const double C508 = C46842 * (3 * C46925 + C46848 * C46949);
    const double C965 = C46842 * C46991 * C46949;
    const double C1464 =
        2 * C46991 * C46949 + C46991 * (C46949 + C46976 * C47001);
    const double C1630 = C46842 * (C46949 + C46976 * C47001);
    const double C2342 =
        2 * C46842 * C46949 + C46842 * (C46949 + C46976 * C46845);
    const double C2225 = C113 * C1333;
    const double C11400 = C10447 * C1333;
    const double C32382 = C31429 * C1333;
    const double C2227 = C113 * C1334;
    const double C11402 = C10447 * C1334;
    const double C32384 = C31429 * C1334;
    const double C2226 = C114 * C1324;
    const double C11401 = C10448 * C1324;
    const double C32383 = C31430 * C1324;
    const double C2057 = (2 * (C46842 * C46930 + C46925 * ae) +
                          C46842 * (C46930 + C46842 * C47052 + C47048 * ae) +
                          (C46925 + C46942 * C46845) * ae) /
                         C46789;
    const double C2056 = (2 * (C46842 * C46929 + C46925 * be) +
                          C46842 * (C46929 + C46842 * C47051 + C47048 * be) +
                          (C46925 + C46942 * C46845) * be) /
                         C46789;
    const double C6039 = C48090 * C1358;
    const double C12135 = C48177 * C1358;
    const double C33117 = C48177 * C1358;
    const double C6036 = C113 * C1347;
    const double C12132 = C10447 * C1347;
    const double C33114 = C31429 * C1347;
    const double C6038 = C113 * C1348;
    const double C12134 = C10447 * C1348;
    const double C33116 = C31429 * C1348;
    const double C6382 = C113 * C1753;
    const double C11924 = C10447 * C1753;
    const double C32906 = C31429 * C1753;
    const double C6384 = C113 * C1754;
    const double C11926 = C10447 * C1754;
    const double C32908 = C31429 * C1754;
    const double C5858 = C114 * C1194;
    const double C6037 = C114 * C1331;
    const double C12133 = C10448 * C1331;
    const double C33115 = C31430 * C1331;
    const double C6383 = C114 * C1749;
    const double C11925 = C10448 * C1749;
    const double C32907 = C31430 * C1749;
    const double C47112 = C46937 + C47110;
    const double C12997 = C10448 * C2054;
    const double C33971 = C31430 * C2054;
    const double C47111 = C46933 + C47109;
    const double C47357 = C46876 + C47343;
    const double C2466 = (2 * (C46842 * C47011 + C47010 * ae) +
                          C46842 * (C47011 + C46842 * C47173 + C47169 * ae) +
                          (C47010 + C47165 * C46845) * ae) /
                         C46789;
    const double C2470 =
        (2 * (ae * C47009 + be * C47011 + C46842 * C47163) +
         ae * (C47009 + C46842 * C47172 + C47169 * be) +
         be * (C47011 + C46842 * C47173 + C47169 * ae) +
         C46842 * (C47163 + ae * C47172 + be * C47173 +
                   C46842 * (ae * C47164 + be * C47166 +
                             C46842 * C46991 * C46848 * C46884))) /
        C46815;
    const double C2465 = (2 * (C46842 * C47009 + C47010 * be) +
                          C46842 * (C47009 + C46842 * C47172 + C47169 * be) +
                          (C47010 + C47165 * C46845) * be) /
                         C46789;
    const double C6025 =
        (2 * C47151 + C46991 * C47188 + ae * (C46842 * C47206 + C47207 * be) +
         be * (C46842 * C47208 + C47207 * ae) +
         C46842 * (ae * C47206 + be * C47208 +
                   C46842 * (2 * C46991 * C46872 +
                             C46991 * (C46872 + C46884 * C47001)))) /
        C46815;
    const double C6021 =
        (2 * C47013 + C46991 * C47023 +
         C46842 * (C46842 * C47206 + C47207 * be) + C46842 * C47207 * be) /
        C46789;
    const double C6022 =
        (2 * C47015 + C46991 * C47025 +
         C46842 * (C46842 * C47208 + C47207 * ae) + C46842 * C47207 * ae) /
        C46789;
    const double C6522 = (C46842 * (3 * C47023 + C46991 * C47206) +
                          (3 * C47024 + C46991 * C47207) * be) /
                         C46789;
    const double C6523 = (C46842 * (3 * C47025 + C46991 * C47208) +
                          (3 * C47024 + C46991 * C47207) * ae) /
                         C46789;
    const double C5844 = 4 * (2 * C47014 + C46991 * C47024) +
                         C46991 * (3 * C47024 + C46991 * C47207);
    const double C6019 = 2 * C47014 + C46991 * C47024 + C47207 * C46845;
    const double C6520 = C46842 * (3 * C47024 + C46991 * C47207);
    const double C23508 =
        2 * C46842 * C47207 + C46842 * (C47207 + C47407 * C46845);
    const double C7385 = (2 * (C46842 * C47025 + C47024 * ae) +
                          C46842 * (C47025 + C46842 * C47291 + C47287 * ae) +
                          (C47024 + C47201 * C46845) * ae) /
                         C46789;
    const double C7388 =
        (2 * (ae * C47023 + be * C47025 + C46842 * C47188) +
         ae * (C47023 + C46842 * C47290 + C47287 * be) +
         be * (C47025 + C46842 * C47291 + C47287 * ae) +
         C46842 * (C47188 + ae * C47290 + be * C47291 +
                   C46842 * (ae * C47200 + be * C47202 +
                             C46842 * (C46872 + C46884 * C47001)))) /
        C46815;
    const double C7384 = (2 * (C46842 * C47023 + C47024 * be) +
                          C46842 * (C47023 + C46842 * C47290 + C47287 * be) +
                          (C47024 + C47201 * C46845) * be) /
                         C46789;
    const double C47254 = C47154 + C47252;
    const double C28367 = C10448 * C6909;
    const double C39689 = C31430 * C6909;
    const double C47253 = C47152 + C47251;
    const double C47459 = C47233 + C47448;
    const double C47335 = C47332 + C47321;
    const double C12649 = 4 * (2 * C47064 + C46842 * C47082) +
                          C46842 * (3 * C47082 + C46842 * C47331);
    const double C47334 = C47330 + C47318;
    const double C47523 = C47515 + C47498;
    const double C2353 = C113 * C2059;
    const double C10868 = C10447 * C2059;
    const double C13002 = C10445 * C2059;
    const double C31850 = C31429 * C2059;
    const double C33976 = C31427 * C2059;
    const double C47091 = C47089 + C47084;
    const double C7393 = C113 * C2464;
    const double C27030 = C10447 * C2464;
    const double C28372 = C10445 * C2464;
    const double C38356 = C31429 * C2464;
    const double C39694 = C31427 * C2464;
    const double C167 = C156 - C157;
    const double C10489 = C10478 - C10479;
    const double C31471 = C31460 - C31461;
    const double C367 = C352 - C353;
    const double C10691 = C10680 - C10681;
    const double C31673 = C31662 - C31663;
    const double C368 = C356 - C357;
    const double C11049 = C11044 - C11045;
    const double C32031 = C32026 - C32027;
    const double C568 = C553 - C554;
    const double C10893 = C10882 - C10883;
    const double C10891 = C10874 - C10875;
    const double C31875 = C31864 - C31865;
    const double C31873 = C31856 - C31857;
    const double C569 = C557 - C558;
    const double C10487 = C10470 - C10471;
    const double C11193 = C11188 - C11189;
    const double C31469 = C31452 - C31453;
    const double C32175 = C32170 - C32171;
    const double C996 = C987 - C988;
    const double C10689 = C10672 - C10673;
    const double C11411 = C11404 - C11405;
    const double C31671 = C31654 - C31655;
    const double C32393 = C32386 - C32387;
    const double C1477 = C1469 - C1470;
    const double C1643 = C1635 - C1636;
    const double C10690 = C10676 - C10677;
    const double C31672 = C31658 - C31659;
    const double C2234 = C2229 - C2230;
    const double C11409 = C11396 - C11397;
    const double C12861 = C12856 - C12857;
    const double C32391 = C32378 - C32379;
    const double C33835 = C33830 - C33831;
    const double C2354 = C48090 * C2069;
    const double C10869 = C48177 * C2069;
    const double C13003 = C10443 * C2069;
    const double C31851 = C48177 * C2069;
    const double C33977 = C31425 * C2069;
    const double C2351 = C113 * C2058;
    const double C10866 = C10447 * C2058;
    const double C13000 = C10445 * C2058;
    const double C31848 = C31429 * C2058;
    const double C33974 = C31427 * C2058;
    const double C1480 = C1478 - C1475;
    const double C11935 = C11933 - C11930;
    const double C32917 = C32915 - C32912;
    const double C1646 = C1644 - C1641;
    const double C10695 = C10687 - C10666;
    const double C12143 = C12141 - C12138;
    const double C31677 = C31669 - C31648;
    const double C33125 = C33123 - C33120;
    const double C5867 = C5861 - C5862;
    const double C26869 = C26862 - C26863;
    const double C38195 = C38188 - C38189;
    const double C6047 = C6040 - C6041;
    const double C27053 = C27044 - C27045;
    const double C27051 = C27036 - C27037;
    const double C38379 = C38370 - C38371;
    const double C38377 = C38362 - C38363;
    const double C6533 = C6529 - C6530;
    const double C26867 = C26854 - C26855;
    const double C27529 = C27524 - C27525;
    const double C38193 = C38180 - C38181;
    const double C38855 = C38850 - C38851;
    const double C47090 = C47088 + C47081;
    const double C47322 = C47315 + C47302;
    const double C7394 = C48090 * C2469;
    const double C27031 = C48177 * C2469;
    const double C28373 = C10443 * C2469;
    const double C38357 = C48177 * C2469;
    const double C39695 = C31425 * C2469;
    const double C7391 = C113 * C2463;
    const double C27028 = C10447 * C2463;
    const double C28370 = C10445 * C2463;
    const double C38354 = C31429 * C2463;
    const double C39692 = C31427 * C2463;
    const double C46887 = C46848 * C46886;
    const double C47118 = C46842 * C46886;
    const double C47175 = C46991 * C46886;
    const double C1208 = (2 * C46991 * C46874 +
                          C46991 * (C46874 + C46886 * std::pow(C46991, 2))) /
                         C46815;
    const double C1213 =
        (3 * (C46874 + C46886 * C47001) +
         C46991 * (2 * C46991 * C46886 +
                   C46991 * (C46886 +
                             (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860) *
                                 C47001))) /
        C46815;
    const double C1351 =
        (C46991 * C46874 + ae * (C46842 * C47005 + C47006 * be) +
         be * (C46842 * C47007 + C47006 * ae) +
         C46842 * (ae * C47005 + be * C47007 + C46842 * C46991 * C46886)) /
        C46815;
    const double C1354 =
        (ae * (C46929 + C46948 * C47001) + be * (C46930 + C46950 * C47001) +
         C46842 * (C46874 + C46886 * C47001)) /
        C46815;
    const double C2068 =
        (2 * (ae * C46929 + be * C46930 + C46842 * C46874) +
         ae * (C46929 + C46842 * C47051 + C47048 * be) +
         be * (C46930 + C46842 * C47052 + C47048 * ae) +
         C46842 * (C46874 + ae * C47051 + be * C47052 +
                   C46842 * (ae * C46948 + be * C46950 + C46842 * C46886))) /
        C46815;
    const double C47192 = C46876 + C47191;
    const double C47265 = C46842 * C47260;
    const double C47365 = C47358 + C47347;
    const double C47388 = C46991 * C47387;
    const double C47419 = C46842 * C47387;
    const double C47469 = C47460 + C47461;
    const double C47530 = C46842 * C47524;
    const double C46985 = C46848 * C46983;
    const double C47141 = C46991 * C46983;
    const double C47146 = C46842 * C46983;
    const double C1466 =
        (2 * C46991 * C46954 + C46991 * (C46954 + C46983 * C47001)) / C46789;
    const double C1632 = (C46842 * (C46954 + C46983 * C47001) +
                          (C46949 + C46976 * C47001) * ae) /
                         C46789;
    const double C1207 = (3 * (C46930 + C46950 * C47001) +
                          C46991 * (2 * C47007 + C46991 * C47039)) /
                         C46789;
    const double C1350 =
        (C46930 + C46950 * C47001 + C46842 * (C46842 * C47039 + C47038 * ae) +
         C46842 * C47038 * ae) /
        C46789;
    const double C1756 = (C46842 * (2 * C47007 + C46991 * C47039) +
                          (2 * C47006 + C46991 * C47038) * ae) /
                         C46789;
    const double C47133 = C46842 * C47129;
    const double C47185 = C47182 + C47183;
    const double C47227 = C47214 + C47224;
    const double C47299 = C47296 + C47297;
    const double C47279 = C46842 * C47276;
    const double C47374 = C46964 + C47369;
    const double C47411 = C46991 * C47408;
    const double C47443 = C46842 * C47408;
    const double C47434 = C46842 * C47430;
    const double C47484 = C47236 + C47479;
    const double C47538 = C47533 + C47521;
    const double C46984 = C46848 * C46981;
    const double C47139 = C46991 * C46981;
    const double C47143 = C46842 * C46981;
    const double C1465 =
        (2 * C46991 * C46953 + C46991 * (C46953 + C46981 * C47001)) / C46789;
    const double C1631 = (C46842 * (C46953 + C46981 * C47001) +
                          (C46949 + C46976 * C47001) * be) /
                         C46789;
    const double C1359 =
        (C46874 + C46886 * C47001 + ae * (C46842 * C47037 + C47038 * be) +
         be * (C46842 * C47039 + C47038 * ae) +
         C46842 * (ae * C47037 + be * C47039 +
                   C46842 * (C46886 +
                             (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860) *
                                 C47001))) /
        C46815;
    const double C1759 =
        (ae * (2 * C47005 + C46991 * C47037) +
         be * (2 * C47007 + C46991 * C47039) +
         C46842 * (2 * C46991 * C46886 +
                   C46991 * (C46886 +
                             (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860) *
                                 C47001))) /
        C46815;
    const double C1206 = (3 * (C46929 + C46948 * C47001) +
                          C46991 * (2 * C47005 + C46991 * C47037)) /
                         C46789;
    const double C1349 =
        (C46929 + C46948 * C47001 + C46842 * (C46842 * C47037 + C47038 * be) +
         C46842 * C47038 * be) /
        C46789;
    const double C1755 = (C46842 * (2 * C47005 + C46991 * C47037) +
                          (2 * C47006 + C46991 * C47038) * be) /
                         C46789;
    const double C47132 = C46842 * C47126;
    const double C47184 = C47179 + C47180;
    const double C47225 = C47210 + C47222;
    const double C47298 = C47293 + C47294;
    const double C47278 = C46842 * C47273;
    const double C47372 = C46958 + C47366;
    const double C47409 = C46991 * C47406;
    const double C47440 = C46842 * C47406;
    const double C47433 = C46842 * C47427;
    const double C47482 = C47234 + C47476;
    const double C47535 = C47531 + C47518;
    const double C46982 = C46960 + C46979;
    const double C2220 = C46991 * C46949 + C47140 * C46845;
    const double C5845 = 4 * (2 * C47010 + C46991 * C47031) +
                         C46991 * (3 * C47031 + C46991 * C47226);
    const double C6020 = 2 * C47010 + C46991 * C47031 + C47226 * C46845;
    const double C6521 = C46842 * (3 * C47031 + C46991 * C47226);
    const double C12650 = 4 * (2 * C47056 + C46842 * C47105) +
                          C46842 * (3 * C47105 + C46842 * C47373);
    const double C47413 = C47394 + C47410;
    const double C27907 = 4 * (2 * C47157 + C46842 * C47248) +
                          C46842 * (3 * C47248 + C46842 * C47483);
    const double C47542 = C47509 + C47537;
    const double C162 = C113 * C133;
    const double C362 = C113 * C324;
    const double C699 = C113 * C326;
    const double C22402 = C113 * C5847;
    const double C160 = C113 * C132;
    const double C360 = C113 * C323;
    const double C697 = C113 * C325;
    const double C22400 = C113 * C5846;
    const double C48110 = C47846 * C47834;
    const double C48150 = C48115 + C47846;
    const double C48118 = C47855 / C47836;
    const double C48114 = C47855 * C47834;
    const double C688 = C48194 - (C47846 * C47837) / C47832;
    const double C48128 = C47928 * C47922;
    const double C48165 = C48130 + C47928;
    const double C48132 = C47935 / C47836;
    const double C48129 = C47935 * C47922;
    const double C1458 = C48198 - (C47928 * C47924) / C47832;
    const double C48134 = C47970 * C47964;
    const double C48171 = C48136 + C47970;
    const double C48138 = C47977 / C47836;
    const double C48135 = C47977 * C47964;
    const double C2338 = C48200 - (C47970 * C47966) / C47832;
    const double C46824 = C46823 * C46820;
    const double C42732 =
        ((C46823 * ae) / C46789 - C46814 / C46816) / (2 * C46789) -
        ((C46787 * ((0 * ae) / C46789 - C46796 / C46815) + C48177) * be) /
            C46789;
    const double C10502 = C10494 + C10469;
    const double C10501 = C10493 + C10465;
    const double C10498 = C10490 + C10453;
    const double C10704 = C10696 + C10671;
    const double C10701 = C10693 + C10659;
    const double C10906 = C10898 + C10873;
    const double C10903 = C10895 + C10861;
    const double C26007 = C26003 + C25995;
    const double C26004 = C26000 + C25983;
    const double C26621 = C26619 + C26615;
    const double C26874 = C26870 + C26853;
    const double C27062 = C27056 + C27035;
    const double C10500 = C10492 + C10461;
    const double C10499 = C10491 + C10457;
    const double C26006 = C26002 + C25991;
    const double C26005 = C26001 + C25987;
    const double C31484 = C31476 + C31451;
    const double C31483 = C31475 + C31447;
    const double C31480 = C31472 + C31435;
    const double C31686 = C31678 + C31653;
    const double C31683 = C31675 + C31641;
    const double C31888 = C31880 + C31855;
    const double C31885 = C31877 + C31843;
    const double C37333 = C37329 + C37321;
    const double C37330 = C37326 + C37309;
    const double C37947 = C37945 + C37941;
    const double C38200 = C38196 + C38179;
    const double C38388 = C38382 + C38361;
    const double C31482 = C31474 + C31443;
    const double C31481 = C31473 + C31439;
    const double C37332 = C37328 + C37317;
    const double C37331 = C37327 + C37313;
    const double C179 = C174 * C48073;
    const double C4818 = C174 * C4813;
    const double C16190 = C174 * C16185;
    const double C378 = C372 + C351;
    const double C10702 = C10694 + C10663;
    const double C31684 = C31676 + C31645;
    const double C579 = C573 + C552;
    const double C10904 = C10896 + C10865;
    const double C10902 = C10894 + C10857;
    const double C31886 = C31878 + C31847;
    const double C31884 = C31876 + C31839;
    const double C1001 = C998 + C986;
    const double C10700 = C10692 + C10655;
    const double C11416 = C11412 + C11395;
    const double C31682 = C31674 + C31637;
    const double C32398 = C32394 + C32377;
    const double C6052 = C6048 + C6031;
    const double C26620 = C26618 + C26611;
    const double C27060 = C27054 + C27027;
    const double C37946 = C37944 + C37937;
    const double C38386 = C38380 + C38353;
    const double C180 = C175 * C48073;
    const double C4821 = C175 * C4813;
    const double C16193 = C175 * C16185;
    const double C181 = C176 * C48073;
    const double C4822 = C176 * C4813;
    const double C16194 = C176 * C16185;
    const double C383 = C377 * C48073;
    const double C4819 = C377 * C48175;
    const double C4977 = C377 * C4813;
    const double C16191 = C377 * C48175;
    const double C16345 = C377 * C16185;
    const double C584 = C578 * C48073;
    const double C5141 = C578 * C4813;
    const double C16499 = C578 * C16185;
    const double C382 = C376 * C48073;
    const double C4820 = C376 * C48175;
    const double C4984 = C376 * C4813;
    const double C16192 = C376 * C48175;
    const double C16348 = C376 * C16185;
    const double C583 = C577 * C48073;
    const double C5144 = C577 * C4813;
    const double C16502 = C577 * C16185;
    const double C163 = C48090 * C141;
    const double C355 = C48090 * C334;
    const double C10683 = C10443 * C334;
    const double C31665 = C31425 * C334;
    const double C359 = C48090 * C335;
    const double C11047 = C10443 * C335;
    const double C32029 = C31425 * C335;
    const double C556 = C48090 * C535;
    const double C10885 = C10443 * C535;
    const double C10877 = C48177 * C535;
    const double C31867 = C31425 * C535;
    const double C31859 = C48177 * C535;
    const double C560 = C48090 * C536;
    const double C10473 = C48177 * C536;
    const double C11191 = C10443 * C536;
    const double C31455 = C48177 * C536;
    const double C32173 = C31425 * C536;
    const double C990 = C48090 * C979;
    const double C10675 = C48177 * C979;
    const double C11407 = C10443 * C979;
    const double C31657 = C48177 * C979;
    const double C32389 = C31425 * C979;
    const double C22403 = C48090 * C5850;
    const double C22877 = C48090 * C6526;
    const double C26861 = C48177 * C6526;
    const double C38187 = C48177 * C6526;
    const double C561 = C113 * C524;
    const double C11184 = C10447 * C524;
    const double C32166 = C31429 * C524;
    const double C563 = C113 * C525;
    const double C11186 = C10447 * C525;
    const double C32168 = C31429 * C525;
    const double C809 = C113 * C526;
    const double C10474 = C10447 * C526;
    const double C31456 = C31429 * C526;
    const double C811 = C113 * C527;
    const double C10476 = C10447 * C527;
    const double C31458 = C31429 * C527;
    const double C991 = C113 * C973;
    const double C11040 = C10447 * C973;
    const double C32022 = C31429 * C973;
    const double C993 = C113 * C974;
    const double C11042 = C10447 * C974;
    const double C32024 = C31429 * C974;
    const double C161 = C114 * C120;
    const double C361 = C114 * C306;
    const double C698 = C114 * C307;
    const double C562 = C114 * C507;
    const double C11185 = C10448 * C507;
    const double C32167 = C31430 * C507;
    const double C810 = C114 * C508;
    const double C10475 = C10448 * C508;
    const double C31457 = C31430 * C508;
    const double C992 = C114 * C965;
    const double C11041 = C10448 * C965;
    const double C32023 = C31430 * C965;
    const double C2233 = C2225 - C2226;
    const double C11410 = C11400 - C11401;
    const double C32392 = C32382 - C32383;
    const double C2349 = C113 * C2057;
    const double C10880 = C10447 * C2057;
    const double C31862 = C31429 * C2057;
    const double C2347 = C113 * C2056;
    const double C10878 = C10447 * C2056;
    const double C31860 = C31429 * C2056;
    const double C5866 = C5857 - C5858;
    const double C6046 = C6036 - C6037;
    const double C12140 = C12132 - C12133;
    const double C33122 = C33114 - C33115;
    const double C6387 = C6382 - C6383;
    const double C11932 = C11924 - C11925;
    const double C32914 = C32906 - C32907;
    const double C47114 = C47112 + C47107;
    const double C47113 = C47111 + C47104;
    const double C47364 = C47357 + C47344;
    const double C7246 = C113 * C2466;
    const double C12854 = C10447 * C2466;
    const double C33828 = C31429 * C2466;
    const double C7247 = C48090 * C2470;
    const double C12855 = C48177 * C2470;
    const double C33829 = C48177 * C2470;
    const double C7244 = C113 * C2465;
    const double C12852 = C10447 * C2465;
    const double C33826 = C31429 * C2465;
    const double C22524 = C48090 * C6025;
    const double C27523 = C48177 * C6025;
    const double C38849 = C48177 * C6025;
    const double C22521 = C113 * C6021;
    const double C27520 = C10447 * C6021;
    const double C38846 = C31429 * C6021;
    const double C22523 = C113 * C6022;
    const double C27522 = C10447 * C6022;
    const double C38848 = C31429 * C6022;
    const double C22874 = C113 * C6522;
    const double C26858 = C10447 * C6522;
    const double C38184 = C31429 * C6522;
    const double C22876 = C113 * C6523;
    const double C26860 = C10447 * C6523;
    const double C38186 = C31429 * C6523;
    const double C22401 = C114 * C5844;
    const double C22522 = C114 * C6019;
    const double C27521 = C10448 * C6019;
    const double C38847 = C31430 * C6019;
    const double C22875 = C114 * C6520;
    const double C26859 = C10448 * C6520;
    const double C38185 = C31430 * C6520;
    const double C23515 = C113 * C7385;
    const double C27042 = C10447 * C7385;
    const double C38368 = C31429 * C7385;
    const double C23516 = C48090 * C7388;
    const double C27043 = C48177 * C7388;
    const double C38369 = C48177 * C7388;
    const double C23513 = C113 * C7384;
    const double C27040 = C10447 * C7384;
    const double C38366 = C31429 * C7384;
    const double C47256 = C47254 + C47250;
    const double C47255 = C47253 + C47247;
    const double C47468 = C47459 + C47449;
    const double C47337 = C46842 * C47335;
    const double C47510 = 3 * C47335;
    const double C47496 = be * C47335;
    const double C47336 = C46842 * C47334;
    const double C47502 = 3 * C47334;
    const double C47495 = ae * C47334;
    const double C2063 =
        (3 * (C46911 + C46842 * C47068 + C47064 * ae) +
         C46842 * (2 * C47068 + C46842 * C47091 + C47082 * ae) +
         (2 * C47064 + C46842 * C47082) * ae) /
        C46789;
    const double C172 = C167 - C158;
    const double C10497 = C10489 - C10480;
    const double C31479 = C31471 - C31462;
    const double C373 = C367 - C354;
    const double C10699 = C10691 - C10682;
    const double C31681 = C31673 - C31664;
    const double C374 = C368 - C358;
    const double C11051 = C11049 - C11046;
    const double C32033 = C32031 - C32028;
    const double C574 = C568 - C555;
    const double C10901 = C10893 - C10884;
    const double C10899 = C10891 - C10876;
    const double C31883 = C31875 - C31866;
    const double C31881 = C31873 - C31858;
    const double C575 = C569 - C559;
    const double C10495 = C10487 - C10472;
    const double C11195 = C11193 - C11190;
    const double C31477 = C31469 - C31454;
    const double C32177 = C32175 - C32172;
    const double C999 = C996 - C989;
    const double C10697 = C10689 - C10674;
    const double C11415 = C11411 - C11406;
    const double C31679 = C31671 - C31656;
    const double C32397 = C32393 - C32388;
    const double C1479 = C1477 - C1471;
    const double C1645 = C1643 - C1637;
    const double C10698 = C10690 - C10678;
    const double C31680 = C31672 - C31660;
    const double C2236 = C2234 - C2231;
    const double C11413 = C11409 - C11398;
    const double C12863 = C12861 - C12858;
    const double C32395 = C32391 - C32380;
    const double C33837 = C33835 - C33832;
    const double C2356 = C2351 - C2352;
    const double C10889 = C10866 - C10867;
    const double C13005 = C13000 - C13001;
    const double C31871 = C31848 - C31849;
    const double C33979 = C33974 - C33975;
    const double C1482 = C1480 + C1476;
    const double C11937 = C11935 + C11931;
    const double C32919 = C32917 + C32913;
    const double C1648 = C1646 + C1642;
    const double C10703 = C10695 + C10667;
    const double C12145 = C12143 + C12139;
    const double C31685 = C31677 + C31649;
    const double C33127 = C33125 + C33121;
    const double C5870 = C5867 - C5863;
    const double C26873 = C26869 - C26864;
    const double C38199 = C38195 - C38190;
    const double C6051 = C6047 - C6042;
    const double C27059 = C27053 - C27046;
    const double C27057 = C27051 - C27038;
    const double C38385 = C38379 - C38372;
    const double C38383 = C38377 - C38364;
    const double C6534 = C6533 - C6531;
    const double C26871 = C26867 - C26856;
    const double C27531 = C27529 - C27526;
    const double C38197 = C38193 - C38182;
    const double C38857 = C38855 - C38852;
    const double C2071 =
        (3 * (C46855 + ae * C47067 + be * C47068 + C46842 * C47085) +
         ae * (2 * C47067 + C46842 * C47090 + C47082 * be) +
         be * (2 * C47068 + C46842 * C47091 + C47082 * ae) +
         C46842 * (2 * C47085 + ae * C47090 + be * C47091 +
                   C46842 * (C46864 + ae * C47080 + be * C47083 +
                             C46842 * (ae * C46924 + be * C46926 +
                                       C46842 * C46872)))) /
        C46815;
    const double C2062 =
        (3 * (C46910 + C46842 * C47067 + C47064 * be) +
         C46842 * (2 * C47067 + C46842 * C47090 + C47082 * be) +
         (2 * C47064 + C46842 * C47082) * be) /
        C46789;
    const double C47333 = C47322 + C47329;
    const double C7395 = C7391 - C7392;
    const double C27049 = C27028 - C27029;
    const double C28375 = C28370 - C28371;
    const double C38375 = C38354 - C38355;
    const double C39697 = C39692 - C39693;
    const double C46888 = C46880 + C46887;
    const double C47131 = C47125 + C47118;
    const double C1472 = C48090 * C1208;
    const double C2228 = C48090 * C1351;
    const double C11403 = C48177 * C1351;
    const double C32385 = C48177 * C1351;
    const double C1638 = C48090 * C1354;
    const double C10679 = C48177 * C1354;
    const double C31661 = C48177 * C1354;
    const double C2350 = C48090 * C2068;
    const double C10881 = C48177 * C2068;
    const double C31863 = C48177 * C2068;
    const double C5851 =
        (4 * (2 * C47163 + C46991 * C47192) +
         C46991 * (3 * C47192 +
                   C46991 * (2 * C46991 * C47190 +
                             C46991 * (C47190 + C46848 *
                                                    (C46878 * C46879 +
                                                     C46845 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46788 * C47001)))) /
        C46815;
    const double C47272 = C47264 + C47265;
    const double C47371 = C46842 * C47365;
    const double C47389 = C47385 + C47388;
    const double C47432 = C47426 + C47419;
    const double C47475 = C46842 * C47469;
    const double C47534 = C47523 + C47530;
    const double C46987 = C46963 + C46985;
    const double C2222 =
        (C46991 * C46954 + C46842 * (C46842 * C47141 + C47140 * ae) +
         C46842 * C47140 * ae) /
        C46789;
    const double C47149 = C47146 + C47147;
    const double C47135 = C46950 + C47133;
    const double C2468 = (2 * (C46842 * C47007 + C47006 * ae) +
                          C46842 * (C47007 + C46842 * C47185 + C47181 * ae) +
                          (C47006 + C47177 * C46845) * ae) /
                         C46789;
    const double C5849 = (4 * (2 * C47011 + C46991 * C47032) +
                          C46991 * (3 * C47032 + C46991 * C47227)) /
                         C46789;
    const double C6024 =
        (2 * C47011 + C46991 * C47032 +
         C46842 * (C46842 * C47227 + C47226 * ae) + C46842 * C47226 * ae) /
        C46789;
    const double C6525 = (C46842 * (3 * C47032 + C46991 * C47227) +
                          (3 * C47031 + C46991 * C47226) * ae) /
                         C46789;
    const double C7387 = (2 * (C46842 * C47032 + C47031 * ae) +
                          C46842 * (C47032 + C46842 * C47299 + C47295 * ae) +
                          (C47031 + C47220 * C46845) * ae) /
                         C46789;
    const double C47281 = C47166 + C47279;
    const double C47377 = C47374 + C47363;
    const double C47414 = C47397 + C47411;
    const double C47446 = C47443 + C47444;
    const double C47436 = C47202 + C47434;
    const double C47486 = C47484 + C47474;
    const double C47543 = C46842 * C47538;
    const double C46986 = C46957 + C46984;
    const double C2221 =
        (C46991 * C46953 + C46842 * (C46842 * C47139 + C47140 * be) +
         C46842 * C47140 * be) /
        C46789;
    const double C47148 = C47143 + C47144;
    const double C47134 = C46948 + C47132;
    const double C2471 =
        (2 * (ae * C47005 + be * C47007 + C46842 * C47175) +
         ae * (C47005 + C46842 * C47184 + C47181 * be) +
         be * (C47007 + C46842 * C47185 + C47181 * ae) +
         C46842 *
             (C47175 + ae * C47184 + be * C47185 +
              C46842 * (ae * C47176 + be * C47178 +
                        C46842 * C46991 *
                            (C46884 + (C46878 * C46879 +
                                       C46845 * bs[8] * std::pow(C46840, 8)) *
                                          C46788 * C46860)))) /
        C46815;
    const double C2467 = (2 * (C46842 * C47005 + C47006 * be) +
                          C46842 * (C47005 + C46842 * C47184 + C47181 * be) +
                          (C47006 + C47177 * C46845) * be) /
                         C46789;
    const double C6026 =
        (2 * C47163 + C46991 * C47192 + ae * (C46842 * C47225 + C47226 * be) +
         be * (C46842 * C47227 + C47226 * ae) +
         C46842 * (ae * C47225 + be * C47227 +
                   C46842 * (2 * C46991 * C47190 +
                             C46991 * (C47190 + C46848 *
                                                    (C46878 * C46879 +
                                                     C46845 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46788 * C47001)))) /
        C46815;
    const double C6527 =
        (ae * (3 * C47030 + C46991 * C47225) +
         be * (3 * C47032 + C46991 * C47227) +
         C46842 * (3 * C47192 +
                   C46991 * (2 * C46991 * C47190 +
                             C46991 * (C47190 + C46848 *
                                                    (C46878 * C46879 +
                                                     C46845 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46788 * C47001)))) /
        C46815;
    const double C5848 = (4 * (2 * C47009 + C46991 * C47030) +
                          C46991 * (3 * C47030 + C46991 * C47225)) /
                         C46789;
    const double C6023 =
        (2 * C47009 + C46991 * C47030 +
         C46842 * (C46842 * C47225 + C47226 * be) + C46842 * C47226 * be) /
        C46789;
    const double C6524 = (C46842 * (3 * C47030 + C46991 * C47225) +
                          (3 * C47031 + C46991 * C47226) * be) /
                         C46789;
    const double C7389 =
        (2 * (ae * C47030 + be * C47032 + C46842 * C47192) +
         ae * (C47030 + C46842 * C47298 + C47295 * be) +
         be * (C47032 + C46842 * C47299 + C47295 * ae) +
         C46842 * (C47192 + ae * C47298 + be * C47299 +
                   C46842 * (ae * C47219 + be * C47221 +
                             C46842 * (C47190 + C46848 *
                                                    (C46878 * C46879 +
                                                     C46845 * bs[8] *
                                                         std::pow(C46840, 8)) *
                                                    C46788 * C47001)))) /
        C46815;
    const double C7386 = (2 * (C46842 * C47030 + C47031 * be) +
                          C46842 * (C47030 + C46842 * C47298 + C47295 * be) +
                          (C47031 + C47220 * C46845) * be) /
                         C46789;
    const double C47280 = C47164 + C47278;
    const double C47376 = C47372 + C47360;
    const double C47412 = C47391 + C47409;
    const double C47445 = C47440 + C47441;
    const double C47435 = C47200 + C47433;
    const double C47485 = C47482 + C47471;
    const double C47541 = C46842 * C47535;
    const double C121 = 5 * (3 * C46925 + C46848 * C46949) +
                        C46848 * (4 * C46949 + C46848 * C46982);
    const double C308 = 3 * C46925 + C46848 * C46949 + C46982 * C47001;
    const double C509 = 3 * C46925 + C46848 * C46949 + C46982 * C46845;
    const double C692 = C46991 * (4 * C46949 + C46848 * C46982);
    const double C804 = C46842 * (4 * C46949 + C46848 * C46982);
    const double C966 = C46842 * C46991 * C46982;
    const double C22395 = 5 * (3 * C47024 + C46991 * C47207) +
                          C46991 * (4 * C47207 + C46991 * C47413);
    const double C22516 = 3 * C47024 + C46991 * C47207 + C47413 * C46845;
    const double C22869 = C46842 * (4 * C47207 + C46991 * C47413);
    const double C44204 = 5 * (3 * C47082 + C46842 * C47331) +
                          C46842 * (4 * C47331 + C46842 * C47542);
    const double C48146 = C48110 / C47832;
    const double C48181 = C48150 / C47836;
    const double C48182 = C48152 + C48118;
    const double C690 = C48118 - C47853 / C47850;
    const double C48149 = C48114 / C47832;
    const double C48162 = C48128 / C47832;
    const double C48188 = C48165 / C47836;
    const double C48189 = C48166 + C48132;
    const double C1460 = C48132 - C47933 / C47850;
    const double C48164 = C48129 / C47832;
    const double C48168 = C48134 / C47832;
    const double C48191 = C48171 / C47836;
    const double C48192 = C48172 + C48138;
    const double C2340 = C48138 - C47975 / C47850;
    const double C48170 = C48135 / C47832;
    const double C46829 = C46787 * C46824;
    const double C42731 =
        (ae * -2 * C46814) / (C46815 * 2 * C46789) -
        (((C46787 * ((-4 * C46796) / C46789 - (C46787 * C46824) / C46789) *
           ae) /
              C46789 +
          2 * ((C46823 * ae) / C46789 - C46814 / C46816)) *
         be) /
            C46789 -
        C46824 / C46816;
    const double C42735 = (-C46824 / C46789) / (4 * C46815);
    const double C384 = C378 * C48073;
    const double C4982 = C378 * C4813;
    const double C4976 = C378 * C48175;
    const double C16346 = C378 * C16185;
    const double C16344 = C378 * C48175;
    const double C585 = C579 * C48073;
    const double C5142 = C579 * C4813;
    const double C16500 = C579 * C16185;
    const double C1004 = C1001 * C48073;
    const double C5140 = C1001 * C48175;
    const double C5610 = C1001 * C4813;
    const double C16498 = C1001 * C48175;
    const double C16964 = C1001 * C16185;
    const double C168 = C160 - C161;
    const double C369 = C360 - C361;
    const double C701 = C697 - C698;
    const double C570 = C561 - C562;
    const double C11192 = C11184 - C11185;
    const double C32174 = C32166 - C32167;
    const double C813 = C809 - C810;
    const double C10488 = C10474 - C10475;
    const double C31470 = C31456 - C31457;
    const double C997 = C991 - C992;
    const double C11048 = C11040 - C11041;
    const double C32030 = C32022 - C32023;
    const double C2235 = C2233 - C2227;
    const double C11414 = C11410 - C11402;
    const double C32396 = C32392 - C32384;
    const double C2355 = C2347 - C2348;
    const double C10892 = C10878 - C10879;
    const double C31874 = C31860 - C31861;
    const double C5869 = C5866 - C5859;
    const double C6050 = C6046 - C6038;
    const double C12142 = C12140 - C12134;
    const double C33124 = C33122 - C33116;
    const double C6388 = C6387 - C6384;
    const double C11934 = C11932 - C11926;
    const double C32916 = C32914 - C32908;
    const double C2065 =
        (3 * (C46919 + C46842 * C47060 + C47056 * ae) +
         C46842 * (2 * C47060 + C46842 * C47114 + C47105 * ae) +
         (2 * C47056 + C46842 * C47105) * ae) /
        C46789;
    const double C2072 =
        (3 * (C46998 + ae * C47059 + be * C47060 + C46842 * C47108) +
         ae * (2 * C47059 + C46842 * C47113 + C47105 * be) +
         be * (2 * C47060 + C46842 * C47114 + C47105 * ae) +
         C46842 * (2 * C47108 + ae * C47113 + be * C47114 +
                   C46842 * (C46876 + ae * C47103 + be * C47106 +
                             C46842 * (ae * C46958 + be * C46964 +
                                       C46842 * C46848 * C46884)))) /
        C46815;
    const double C2064 =
        (3 * (C46918 + C46842 * C47059 + C47056 * be) +
         C46842 * (2 * C47059 + C46842 * C47113 + C47105 * be) +
         (2 * C47056 + C46842 * C47105) * be) /
        C46789;
    const double C7249 = C7244 - C7245;
    const double C12860 = C12852 - C12853;
    const double C33834 = C33826 - C33827;
    const double C22404 = C22400 - C22401;
    const double C22525 = C22521 - C22522;
    const double C27528 = C27520 - C27521;
    const double C38854 = C38846 - C38847;
    const double C22878 = C22874 - C22875;
    const double C26868 = C26858 - C26859;
    const double C38194 = C38184 - C38185;
    const double C23517 = C23513 - C23514;
    const double C27052 = C27040 - C27041;
    const double C38378 = C38366 - C38367;
    const double C6912 =
        (3 * (C47015 + C46842 * C47161 + C47157 * ae) +
         C46842 * (2 * C47161 + C46842 * C47256 + C47248 * ae) +
         (2 * C47157 + C46842 * C47248) * ae) /
        C46789;
    const double C6915 =
        (3 * (C47151 + ae * C47160 + be * C47161 + C46842 * C47245) +
         ae * (2 * C47160 + C46842 * C47255 + C47248 * be) +
         be * (2 * C47161 + C46842 * C47256 + C47248 * ae) +
         C46842 * (2 * C47245 + ae * C47255 + be * C47256 +
                   C46842 * (C47233 + ae * C47246 + be * C47249 +
                             C46842 * (ae * C47234 + be * C47236 +
                                       C46842 * C46991 * C46884)))) /
        C46815;
    const double C6911 =
        (3 * (C47013 + C46842 * C47160 + C47157 * be) +
         C46842 * (2 * C47160 + C46842 * C47255 + C47248 * be) +
         (2 * C47157 + C46842 * C47248) * be) /
        C46789;
    const double C47339 = C47312 + C47337;
    const double C47338 = C47306 + C47336;
    const double C47514 = C47494 + C47495;
    const double C177 = C172 + C159;
    const double C10505 = C10497 + C10481;
    const double C31487 = C31479 + C31463;
    const double C379 = C373 + C355;
    const double C10707 = C10699 + C10683;
    const double C31689 = C31681 + C31665;
    const double C380 = C374 + C359;
    const double C11053 = C11051 + C11047;
    const double C32035 = C32033 + C32029;
    const double C580 = C574 + C556;
    const double C10909 = C10901 + C10885;
    const double C10907 = C10899 + C10877;
    const double C31891 = C31883 + C31867;
    const double C31889 = C31881 + C31859;
    const double C581 = C575 + C560;
    const double C10503 = C10495 + C10473;
    const double C11197 = C11195 + C11191;
    const double C31485 = C31477 + C31455;
    const double C32179 = C32177 + C32173;
    const double C1002 = C999 + C990;
    const double C10705 = C10697 + C10675;
    const double C11419 = C11415 + C11407;
    const double C31687 = C31679 + C31657;
    const double C32401 = C32397 + C32389;
    const double C2238 = C2236 + C2232;
    const double C11417 = C11413 + C11399;
    const double C12865 = C12863 + C12859;
    const double C32399 = C32395 + C32381;
    const double C33839 = C33837 + C33833;
    const double C2358 = C2356 - C2353;
    const double C10897 = C10889 - C10868;
    const double C13007 = C13005 - C13002;
    const double C31879 = C31871 - C31850;
    const double C33981 = C33979 - C33976;
    const double C1484 = C1482 * C48073;
    const double C4983 = C1482 * C48175;
    const double C6187 = C1482 * C4813;
    const double C16347 = C1482 * C48175;
    const double C17473 = C1482 * C16185;
    const double C1650 = C1648 * C48073;
    const double C5611 = C1648 * C48175;
    const double C6386 = C1648 * C4813;
    const double C16965 = C1648 * C48175;
    const double C17669 = C1648 * C16185;
    const double C5873 = C5870 + C5864;
    const double C26877 = C26873 + C26865;
    const double C38203 = C38199 + C38191;
    const double C6055 = C6051 + C6043;
    const double C27065 = C27059 + C27047;
    const double C27063 = C27057 + C27039;
    const double C38391 = C38385 + C38373;
    const double C38389 = C38383 + C38365;
    const double C6535 = C6534 + C6532;
    const double C26875 = C26871 + C26857;
    const double C27533 = C27531 + C27527;
    const double C38201 = C38197 + C38183;
    const double C38859 = C38857 + C38853;
    const double C7396 = C7395 - C7393;
    const double C27055 = C27049 - C27030;
    const double C28377 = C28375 - C28372;
    const double C38381 = C38375 - C38356;
    const double C39699 = C39697 - C39694;
    const double C142 =
        (5 * (3 * C46874 + C46848 * C46888) +
         C46848 *
             (4 * C46888 +
              C46848 * (3 * C46886 +
                        C46848 * (2 * C46848 * C46884 +
                                  C46848 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C46860))))) /
        C46815;
    const double C336 = (2 * C46848 * C46864 + C46848 * C46874 +
                         C46888 * std::pow(yP - yQ, 2)) /
                        C46815;
    const double C337 = ((yP - yQ) * (3 * C46874 + C46848 * C46888)) / C46815;
    const double C338 =
        (3 * C46874 + C46848 * C46888 +
         (3 * C46886 +
          C46848 * (2 * C46848 * C46884 +
                    C46848 * (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860))) *
             std::pow(yP - yQ, 2)) /
        C46815;
    const double C537 =
        (2 * C46848 * C46864 + C46848 * C46874 +
         ae * (C46842 * C46953 + C46949 * be) +
         be * (C46842 * C46954 + C46949 * ae) +
         C46842 * (ae * C46953 + be * C46954 + C46842 * C46888)) /
        C46815;
    const double C538 = (ae * (3 * C46929 + C46848 * C46953) +
                         be * (3 * C46930 + C46848 * C46954) +
                         C46842 * (3 * C46874 + C46848 * C46888)) /
                        C46815;
    const double C695 =
        ((yP - yQ) *
         (4 * C46888 +
          C46848 * (3 * C46886 +
                    C46848 * (2 * C46848 * C46884 +
                              C46848 * (C46884 +
                                        (C46878 * C46879 +
                                         C46845 * bs[8] * std::pow(C46840, 8)) *
                                            C46788 * C46860))))) /
        C46815;
    const double C980 = (ae * C46991 * C46953 + be * C46991 * C46954 +
                         C46842 * C46991 * C46888) /
                        C46815;
    const double C1467 =
        (2 * C46991 * C46888 +
         C46991 * (C46888 +
                   (2 * C46848 * C46884 +
                    C46848 * (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860)) *
                       C47001)) /
        C46815;
    const double C1633 =
        (ae * (C46953 + C46981 * C47001) + be * (C46954 + C46983 * C47001) +
         C46842 * (C46888 +
                   (2 * C46848 * C46884 +
                    C46848 * (C46884 + (C46878 * C46879 +
                                        C46845 * bs[8] * std::pow(C46840, 8)) *
                                           C46788 * C46860)) *
                       C47001)) /
        C46815;
    const double C2223 =
        (C46991 * C46888 + ae * (C46842 * C47139 + C47140 * be) +
         be * (C46842 * C47141 + C47140 * ae) +
         C46842 *
             (ae * C47139 + be * C47141 +
              C46842 * C46991 *
                  (2 * C46848 * C46884 +
                   C46848 * (C46884 + (C46878 * C46879 +
                                       C46845 * bs[8] * std::pow(C46840, 8)) *
                                          C46788 * C46860)))) /
        C46815;
    const double C1481 = C1479 + C1472;
    const double C1647 = C1645 + C1638;
    const double C10706 = C10698 + C10679;
    const double C31688 = C31680 + C31661;
    const double C47375 = C47364 + C47371;
    const double C22398 =
        (5 * (3 * C47188 + C46991 * C47389) +
         C46991 *
             (4 * C47389 +
              C46991 * (3 * C47387 +
                        C46991 * (2 * C46991 * C46884 +
                                  C46991 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C47001))))) /
        C46815;
    const double C47481 = C47468 + C47475;
    const double C47540 = C46842 * C47534;
    const double C135 = (5 * (3 * C46930 + C46848 * C46954) +
                         C46848 * (4 * C46954 + C46848 * C46987)) /
                        C46789;
    const double C328 =
        (3 * C46930 + C46848 * C46954 + C46987 * C47001) / C46789;
    const double C529 =
        (3 * C46930 + C46848 * C46954 +
         C46842 * (C46842 * C46987 + C46982 * ae) + C46842 * C46982 * ae) /
        C46789;
    const double C694 = (C46991 * (4 * C46954 + C46848 * C46987)) / C46789;
    const double C806 = (C46842 * (4 * C46954 + C46848 * C46987) +
                         (4 * C46949 + C46848 * C46982) * ae) /
                        C46789;
    const double C976 =
        (C46842 * C46991 * C46987 + C46991 * C46982 * ae) / C46789;
    const double C2344 = (2 * (C46842 * C46954 + C46949 * ae) +
                          C46842 * (C46954 + C46842 * C47149 + C47145 * ae) +
                          (C46949 + C46976 * C46845) * ae) /
                         C46789;
    const double C47137 = C47135 + C47130;
    const double C47283 = C47281 + C47277;
    const double C47379 = C46842 * C47377;
    const double C22397 = (5 * (3 * C47025 + C46991 * C47208) +
                           C46991 * (4 * C47208 + C46991 * C47414)) /
                          C46789;
    const double C22518 =
        (3 * C47025 + C46991 * C47208 +
         C46842 * (C46842 * C47414 + C47413 * ae) + C46842 * C47413 * ae) /
        C46789;
    const double C22871 = (C46842 * (4 * C47208 + C46991 * C47414) +
                           (4 * C47207 + C46991 * C47413) * ae) /
                          C46789;
    const double C23510 = (2 * (C46842 * C47208 + C47207 * ae) +
                           C46842 * (C47208 + C46842 * C47446 + C47442 * ae) +
                           (C47207 + C47407 * C46845) * ae) /
                          C46789;
    const double C47438 = C47436 + C47431;
    const double C47488 = C46842 * C47486;
    const double C47546 = C47511 + C47543;
    const double C539 =
        (3 * C46874 + C46848 * C46888 + ae * (C46842 * C46986 + C46982 * be) +
         be * (C46842 * C46987 + C46982 * ae) +
         C46842 *
             (ae * C46986 + be * C46987 +
              C46842 * (3 * C46886 +
                        C46848 * (2 * C46848 * C46884 +
                                  C46848 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C46860))))) /
        C46815;
    const double C807 =
        (ae * (4 * C46953 + C46848 * C46986) +
         be * (4 * C46954 + C46848 * C46987) +
         C46842 *
             (4 * C46888 +
              C46848 * (3 * C46886 +
                        C46848 * (2 * C46848 * C46884 +
                                  C46848 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C46860))))) /
        C46815;
    const double C981 =
        (ae * C46991 * C46986 + be * C46991 * C46987 +
         C46842 * C46991 *
             (3 * C46886 +
              C46848 *
                  (2 * C46848 * C46884 +
                   C46848 * (C46884 + (C46878 * C46879 +
                                       C46845 * bs[8] * std::pow(C46840, 8)) *
                                          C46788 * C46860)))) /
        C46815;
    const double C134 = (5 * (3 * C46929 + C46848 * C46953) +
                         C46848 * (4 * C46953 + C46848 * C46986)) /
                        C46789;
    const double C327 =
        (3 * C46929 + C46848 * C46953 + C46986 * C47001) / C46789;
    const double C528 =
        (3 * C46929 + C46848 * C46953 +
         C46842 * (C46842 * C46986 + C46982 * be) + C46842 * C46982 * be) /
        C46789;
    const double C693 = (C46991 * (4 * C46953 + C46848 * C46986)) / C46789;
    const double C805 = (C46842 * (4 * C46953 + C46848 * C46986) +
                         (4 * C46949 + C46848 * C46982) * be) /
                        C46789;
    const double C975 =
        (C46842 * C46991 * C46986 + C46991 * C46982 * be) / C46789;
    const double C2345 =
        (2 * (ae * C46953 + be * C46954 + C46842 * C46888) +
         ae * (C46953 + C46842 * C47148 + C47145 * be) +
         be * (C46954 + C46842 * C47149 + C47145 * ae) +
         C46842 *
             (C46888 + ae * C47148 + be * C47149 +
              C46842 * (ae * C46981 + be * C46983 +
                        C46842 * (2 * C46848 * C46884 +
                                  C46848 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C46860))))) /
        C46815;
    const double C2343 = (2 * (C46842 * C46953 + C46949 * be) +
                          C46842 * (C46953 + C46842 * C47148 + C47145 * be) +
                          (C46949 + C46976 * C46845) * be) /
                         C46789;
    const double C47136 = C47134 + C47127;
    const double C47282 = C47280 + C47274;
    const double C47378 = C46842 * C47376;
    const double C22519 =
        (3 * C47188 + C46991 * C47389 + ae * (C46842 * C47412 + C47413 * be) +
         be * (C46842 * C47414 + C47413 * ae) +
         C46842 *
             (ae * C47412 + be * C47414 +
              C46842 * (3 * C47387 +
                        C46991 * (2 * C46991 * C46884 +
                                  C46991 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C47001))))) /
        C46815;
    const double C22872 =
        (ae * (4 * C47206 + C46991 * C47412) +
         be * (4 * C47208 + C46991 * C47414) +
         C46842 *
             (4 * C47389 +
              C46991 * (3 * C47387 +
                        C46991 * (2 * C46991 * C46884 +
                                  C46991 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C47001))))) /
        C46815;
    const double C22396 = (5 * (3 * C47023 + C46991 * C47206) +
                           C46991 * (4 * C47206 + C46991 * C47412)) /
                          C46789;
    const double C22517 =
        (3 * C47023 + C46991 * C47206 +
         C46842 * (C46842 * C47412 + C47413 * be) + C46842 * C47413 * be) /
        C46789;
    const double C22870 = (C46842 * (4 * C47206 + C46991 * C47412) +
                           (4 * C47207 + C46991 * C47413) * be) /
                          C46789;
    const double C23511 =
        (2 * (ae * C47206 + be * C47208 + C46842 * C47389) +
         ae * (C47206 + C46842 * C47445 + C47442 * be) +
         be * (C47208 + C46842 * C47446 + C47442 * ae) +
         C46842 *
             (C47389 + ae * C47445 + be * C47446 +
              C46842 * (ae * C47406 + be * C47408 +
                        C46842 * (2 * C46991 * C46884 +
                                  C46991 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C47001))))) /
        C46815;
    const double C23509 = (2 * (C46842 * C47206 + C47207 * be) +
                           C46842 * (C47206 + C46842 * C47445 + C47442 * be) +
                           (C47207 + C47407 * C46845) * be) /
                          C46789;
    const double C47437 = C47435 + C47428;
    const double C47487 = C46842 * C47485;
    const double C47545 = C47503 + C47541;
    const double C48202 = C48146 + C48194;
    const double C689 = C48181 - (C47855 * C47837) / C47832;
    const double C111 = C48182 / C47836 - C47853 / C48153;
    const double C48195 = C48149 + C48181;
    const double C48203 = C48162 + C48198;
    const double C1459 = C48188 - (C47935 * C47924) / C47832;
    const double C1187 = C48189 / C47836 - C47933 / C48153;
    const double C48199 = C48164 + C48188;
    const double C48204 = C48168 + C48200;
    const double C2339 = C48191 - (C47977 * C47966) / C47832;
    const double C2048 = C48192 / C47836 - C47975 / C48153;
    const double C48201 = C48170 + C48191;
    const double C42733 =
        (((-4 * C46796) / C46789 - C46829 / C46789) * ae) / C46816 -
        ((2 * ((0 * ae) / C46789 - C46796 / C46815) - C46829 / C46816) * be) /
            C46789;
    const double C173 = C168 - C162;
    const double C375 = C369 - C362;
    const double C702 = C701 - C699;
    const double C576 = C570 - C563;
    const double C11194 = C11192 - C11186;
    const double C32176 = C32174 - C32168;
    const double C814 = C813 - C811;
    const double C10496 = C10488 - C10476;
    const double C31478 = C31470 - C31458;
    const double C1000 = C997 - C993;
    const double C11050 = C11048 - C11042;
    const double C32032 = C32030 - C32024;
    const double C2237 = C2235 + C2228;
    const double C11418 = C11414 + C11403;
    const double C32400 = C32396 + C32385;
    const double C2357 = C2355 - C2349;
    const double C10900 = C10892 - C10880;
    const double C31882 = C31874 - C31862;
    const double C5872 = C5869 + C5860;
    const double C6054 = C6050 + C6039;
    const double C12144 = C12142 + C12135;
    const double C33126 = C33124 + C33117;
    const double C6389 = C6388 + C6385;
    const double C11936 = C11934 + C11927;
    const double C32918 = C32916 + C32909;
    const double C12998 = C10447 * C2065;
    const double C33972 = C31429 * C2065;
    const double C12999 = C48177 * C2072;
    const double C33973 = C48177 * C2072;
    const double C12996 = C10447 * C2064;
    const double C33970 = C31429 * C2064;
    const double C7250 = C7249 - C7246;
    const double C12862 = C12860 - C12854;
    const double C33836 = C33834 - C33828;
    const double C22405 = C22404 - C22402;
    const double C22526 = C22525 - C22523;
    const double C27530 = C27528 - C27522;
    const double C38856 = C38854 - C38848;
    const double C22879 = C22878 - C22876;
    const double C26872 = C26868 - C26860;
    const double C38198 = C38194 - C38186;
    const double C23518 = C23517 - C23515;
    const double C27058 = C27052 - C27042;
    const double C38384 = C38378 - C38368;
    const double C28368 = C10447 * C6912;
    const double C39690 = C31429 * C6912;
    const double C28369 = C48177 * C6915;
    const double C39691 = C48177 * C6915;
    const double C28366 = C10447 * C6911;
    const double C39688 = C31429 * C6911;
    const double C47341 = C47339 + C47328;
    const double C47340 = C47338 + C47325;
    const double C47522 = C47514 + C47496;
    const double C182 = C177 * C48073;
    const double C4825 = C177 * C4813;
    const double C16197 = C177 * C16185;
    const double C385 = C379 * C48073;
    const double C4987 = C379 * C4813;
    const double C4985 = C379 * C48175;
    const double C16351 = C379 * C16185;
    const double C16349 = C379 * C48175;
    const double C386 = C380 * C48073;
    const double C4823 = C380 * C48175;
    const double C5279 = C380 * C4813;
    const double C16195 = C380 * C48175;
    const double C16637 = C380 * C16185;
    const double C586 = C580 * C48073;
    const double C5147 = C580 * C4813;
    const double C16505 = C580 * C16185;
    const double C587 = C581 * C48073;
    const double C5411 = C581 * C4813;
    const double C16769 = C581 * C16185;
    const double C1005 = C1002 * C48073;
    const double C5145 = C1002 * C48175;
    const double C5613 = C1002 * C4813;
    const double C16503 = C1002 * C48175;
    const double C16967 = C1002 * C16185;
    const double C2240 = C2238 * C48073;
    const double C5143 = C2238 * C48175;
    const double C7113 = C2238 * C4813;
    const double C16501 = C2238 * C48175;
    const double C18369 = C2238 * C16185;
    const double C2360 = C2358 + C2354;
    const double C10905 = C10897 + C10869;
    const double C13009 = C13007 + C13003;
    const double C31887 = C31879 + C31851;
    const double C33983 = C33981 + C33977;
    const double C7397 = C7396 + C7394;
    const double C27061 = C27055 + C27031;
    const double C28379 = C28377 + C28373;
    const double C38387 = C38381 + C38357;
    const double C39701 = C39699 + C39695;
    const double C363 = C48090 * C336;
    const double C700 = C48090 * C337;
    const double C564 = C48090 * C537;
    const double C11187 = C48177 * C537;
    const double C32169 = C48177 * C537;
    const double C812 = C48090 * C538;
    const double C10477 = C48177 * C538;
    const double C31459 = C48177 * C538;
    const double C994 = C48090 * C980;
    const double C11043 = C48177 * C980;
    const double C32025 = C48177 * C980;
    const double C1483 = C1481 * C48073;
    const double C4986 = C1481 * C48175;
    const double C16350 = C1481 * C48175;
    const double C1649 = C1647 * C48073;
    const double C5612 = C1647 * C48175;
    const double C16966 = C1647 * C48175;
    const double C2067 =
        (3 * (C46930 + C46842 * C47052 + C47048 * ae) +
         C46842 * (2 * C47052 + C46842 * C47137 + C47128 * ae) +
         (2 * C47048 + C46842 * C47128) * ae) /
        C46789;
    const double C6914 =
        (3 * (C47011 + C46842 * C47173 + C47169 * ae) +
         C46842 * (2 * C47173 + C46842 * C47283 + C47275 * ae) +
         (2 * C47169 + C46842 * C47275) * ae) /
        C46789;
    const double C47381 = C47354 + C47379;
    const double C23164 =
        (3 * (C47025 + C46842 * C47291 + C47287 * ae) +
         C46842 * (2 * C47291 + C46842 * C47438 + C47429 * ae) +
         (2 * C47287 + C46842 * C47429) * ae) /
        C46789;
    const double C47490 = C47457 + C47488;
    const double C47548 = C47546 + C47529;
    const double C2073 =
        (3 * (C46874 + ae * C47051 + be * C47052 + C46842 * C47131) +
         ae * (2 * C47051 + C46842 * C47136 + C47128 * be) +
         be * (2 * C47052 + C46842 * C47137 + C47128 * ae) +
         C46842 *
             (2 * C47131 + ae * C47136 + be * C47137 +
              C46842 * (C46886 + ae * C47126 + be * C47129 +
                        C46842 * (ae * C46975 + be * C46977 +
                                  C46842 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C46860))))) /
        C46815;
    const double C2066 =
        (3 * (C46929 + C46842 * C47051 + C47048 * be) +
         C46842 * (2 * C47051 + C46842 * C47136 + C47128 * be) +
         (2 * C47048 + C46842 * C47128) * be) /
        C46789;
    const double C6916 =
        (3 * (C47163 + ae * C47172 + be * C47173 + C46842 * C47272) +
         ae * (2 * C47172 + C46842 * C47282 + C47275 * be) +
         be * (2 * C47173 + C46842 * C47283 + C47275 * ae) +
         C46842 *
             (2 * C47272 + ae * C47282 + be * C47283 +
              C46842 * (C47260 + ae * C47273 + be * C47276 +
                        C46842 * (ae * C47261 + be * C47263 +
                                  C46842 * C46991 * C46848 *
                                      (C46878 * C46879 +
                                       C46845 * bs[8] * std::pow(C46840, 8)) *
                                      C46788)))) /
        C46815;
    const double C6913 =
        (3 * (C47009 + C46842 * C47172 + C47169 * be) +
         C46842 * (2 * C47172 + C46842 * C47282 + C47275 * be) +
         (2 * C47169 + C46842 * C47275) * be) /
        C46789;
    const double C47380 = C47348 + C47378;
    const double C23165 =
        (3 * (C47188 + ae * C47290 + be * C47291 + C46842 * C47432) +
         ae * (2 * C47290 + C46842 * C47437 + C47429 * be) +
         be * (2 * C47291 + C46842 * C47438 + C47429 * ae) +
         C46842 *
             (2 * C47432 + ae * C47437 + be * C47438 +
              C46842 * (C47387 + ae * C47427 + be * C47430 +
                        C46842 * (ae * C47400 + be * C47402 +
                                  C46842 * (C46884 + (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                         C46788 * C47001))))) /
        C46815;
    const double C23163 =
        (3 * (C47023 + C46842 * C47290 + C47287 * be) +
         C46842 * (2 * C47290 + C46842 * C47437 + C47429 * be) +
         (2 * C47287 + C46842 * C47429) * be) /
        C46789;
    const double C47489 = C47453 + C47487;
    const double C47547 = C47545 + C47526;
    const double C108 =
        (C48193 + 2 * C47846) / C47836 - (C48202 * C47837) / C47832;
    const double C109 =
        (C48180 + 2 * C47855 + C48202) / C47836 - (C48195 * C47837) / C47832;
    const double C110 = (C48151 + C47852 / C47832 + C48195) / C47836 -
                        (C48182 * C47837) / C47832;
    const double C1184 =
        (C48196 + 2 * C47928) / C47836 - (C48203 * C47924) / C47832;
    const double C1185 =
        (C48184 + 2 * C47935 + C48203) / C47836 - (C48199 * C47924) / C47832;
    const double C1186 = (C48157 + C47932 / C47832 + C48199) / C47836 -
                         (C48189 * C47924) / C47832;
    const double C2045 =
        (C48197 + 2 * C47970) / C47836 - (C48204 * C47966) / C47832;
    const double C2046 =
        (C48186 + 2 * C47977 + C48204) / C47836 - (C48201 * C47966) / C47832;
    const double C2047 = (C48160 + C47974 / C47832 + C48201) / C47836 -
                         (C48192 * C47966) / C47832;
    const double C178 = C173 + C163;
    const double C2239 = C2237 * C48073;
    const double C5146 = C2237 * C48175;
    const double C16504 = C2237 * C48175;
    const double C2359 = C2357 + C2350;
    const double C10908 = C10900 + C10881;
    const double C31890 = C31882 + C31863;
    const double C6186 = C5872 * C48175;
    const double C17472 = C5872 * C48175;
    const double C7112 = C6054 * C48175;
    const double C18368 = C6054 * C48175;
    const double C6390 = C6389 * C48175;
    const double C17668 = C6389 * C48175;
    const double C13004 = C12996 - C12997;
    const double C33978 = C33970 - C33971;
    const double C7251 = C7250 + C7247;
    const double C12864 = C12862 + C12855;
    const double C33838 = C33836 + C33829;
    const double C22406 = C22405 + C22403;
    const double C22527 = C22526 + C22524;
    const double C27532 = C27530 + C27523;
    const double C38858 = C38856 + C38849;
    const double C22880 = C22879 + C22877;
    const double C26876 = C26872 + C26861;
    const double C38202 = C38198 + C38187;
    const double C23519 = C23518 + C23516;
    const double C27064 = C27058 + C27043;
    const double C38390 = C38384 + C38369;
    const double C28374 = C28366 - C28367;
    const double C39696 = C39688 - C39689;
    const double C12652 =
        (4 * (2 * C47068 + C46842 * C47091 + C47082 * ae) +
         C46842 * (3 * C47091 + C46842 * C47341 + C47331 * ae) +
         (3 * C47082 + C46842 * C47331) * ae) /
        C46789;
    const double C12655 =
        (4 * (2 * C47085 + ae * C47090 + be * C47091 + C46842 * C47333) +
         ae * (3 * C47090 + C46842 * C47340 + C47331 * be) +
         be * (3 * C47091 + C46842 * C47341 + C47331 * ae) +
         C46842 * (3 * C47333 + ae * C47340 + be * C47341 +
                   C46842 * (2 * C47323 + ae * C47334 + be * C47335 +
                             C46842 * (C46872 + ae * C47317 + be * C47320 +
                                       C46842 * (ae * C46940 + be * C46944 +
                                                 C46842 * C46884))))) /
        C46815;
    const double C12651 =
        (4 * (2 * C47067 + C46842 * C47090 + C47082 * be) +
         C46842 * (3 * C47090 + C46842 * C47340 + C47331 * be) +
         (3 * C47082 + C46842 * C47331) * be) /
        C46789;
    const double C47544 = C47522 + C47540;
    const double C2362 = C2360 * C48073;
    const double C7248 = C2360 * C4813;
    const double C18501 = C2360 * C16185;
    const double C381 = C375 + C363;
    const double C703 = C702 + C700;
    const double C582 = C576 + C564;
    const double C11196 = C11194 + C11187;
    const double C32178 = C32176 + C32169;
    const double C815 = C814 + C812;
    const double C10504 = C10496 + C10477;
    const double C31486 = C31478 + C31459;
    const double C1003 = C1000 + C994;
    const double C11052 = C11050 + C11043;
    const double C32034 = C32032 + C32025;
    const double C47383 = C47381 + C47370;
    const double C47492 = C47490 + C47480;
    const double C47550 = C46842 * C47548;
    const double C47382 = C47380 + C47367;
    const double C47491 = C47489 + C47477;
    const double C47549 = C46842 * C47547;
    const double C183 = C178 * C48073;
    const double C2361 = C2359 * C48073;
    const double C13006 = C13004 - C12998;
    const double C33980 = C33978 - C33972;
    const double C7252 = C7251 * C48175;
    const double C18500 = C7251 * C48175;
    const double C28376 = C28374 - C28368;
    const double C39698 = C39696 - C39690;
    const double C387 = C381 * C48073;
    const double C5278 = C381 * C48175;
    const double C16636 = C381 * C48175;
    const double C704 = C703 * C48073;
    const double C4824 = C703 * C48175;
    const double C16196 = C703 * C48175;
    const double C588 = C582 * C48073;
    const double C816 = C815 * C48073;
    const double C1006 = C1003 * C48073;
    const double C5410 = C1003 * C48175;
    const double C16768 = C1003 * C48175;
    const double C12654 =
        (4 * (2 * C47060 + C46842 * C47114 + C47105 * ae) +
         C46842 * (3 * C47114 + C46842 * C47383 + C47373 * ae) +
         (3 * C47105 + C46842 * C47373) * ae) /
        C46789;
    const double C27909 =
        (4 * (2 * C47161 + C46842 * C47256 + C47248 * ae) +
         C46842 * (3 * C47256 + C46842 * C47492 + C47483 * ae) +
         (3 * C47248 + C46842 * C47483) * ae) /
        C46789;
    const double C47552 = C47510 + C47550;
    const double C12656 =
        (4 * (2 * C47108 + ae * C47113 + be * C47114 + C46842 * C47375) +
         ae * (3 * C47113 + C46842 * C47382 + C47373 * be) +
         be * (3 * C47114 + C46842 * C47383 + C47373 * ae) +
         C46842 * (3 * C47375 + ae * C47382 + be * C47383 +
                   C46842 * (2 * C47365 + ae * C47376 + be * C47377 +
                             C46842 * (C47190 + ae * C47359 + be * C47362 +
                                       C46842 * (ae * C47211 + be * C47215 +
                                                 C46842 * C46848 *
                                                     (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                     C46788))))) /
        C46815;
    const double C12653 =
        (4 * (2 * C47059 + C46842 * C47113 + C47105 * be) +
         C46842 * (3 * C47113 + C46842 * C47382 + C47373 * be) +
         (3 * C47105 + C46842 * C47373) * be) /
        C46789;
    const double C27910 =
        (4 * (2 * C47245 + ae * C47255 + be * C47256 + C46842 * C47481) +
         ae * (3 * C47255 + C46842 * C47491 + C47483 * be) +
         be * (3 * C47256 + C46842 * C47492 + C47483 * ae) +
         C46842 * (3 * C47481 + ae * C47491 + be * C47492 +
                   C46842 * (2 * C47469 + ae * C47485 + be * C47486 +
                             C46842 * (C47452 + ae * C47470 + be * C47473 +
                                       C46842 * (ae * C47454 + be * C47458 +
                                                 C46842 * C46991 *
                                                     (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                     C46788))))) /
        C46815;
    const double C27908 =
        (4 * (2 * C47160 + C46842 * C47255 + C47248 * be) +
         C46842 * (3 * C47255 + C46842 * C47491 + C47483 * be) +
         (3 * C47248 + C46842 * C47483) * be) /
        C46789;
    const double C47551 = C47502 + C47549;
    const double C13008 = C13006 + C12999;
    const double C33982 = C33980 + C33973;
    const double C28378 = C28376 + C28369;
    const double C39700 = C39698 + C39691;
    const double C47554 = C47552 + C47539;
    const double C47553 = C47551 + C47536;
    const double C44206 =
        (5 * (3 * C47091 + C46842 * C47341 + C47331 * ae) +
         C46842 * (4 * C47341 + C46842 * C47554 + C47542 * ae) +
         (4 * C47331 + C46842 * C47542) * ae) /
        C46789;
    const double C44207 =
        (5 * (3 * C47333 + ae * C47340 + be * C47341 + C46842 * C47544) +
         ae * (4 * C47340 + C46842 * C47553 + C47542 * be) +
         be * (4 * C47341 + C46842 * C47554 + C47542 * ae) +
         C46842 *
             (4 * C47544 + ae * C47553 + be * C47554 +
              C46842 *
                  (3 * C47534 + ae * C47547 + be * C47548 +
                   C46842 * (2 * C47524 + ae * C47535 + be * C47538 +
                             C46842 * (C46884 + ae * C47517 + be * C47520 +
                                       C46842 * (ae * C46967 + be * C46971 +
                                                 C46842 *
                                                     (C46878 * C46879 +
                                                      C46845 * bs[8] *
                                                          std::pow(C46840, 8)) *
                                                     C46788)))))) /
        C46815;
    const double C44205 =
        (5 * (3 * C47090 + C46842 * C47340 + C47331 * be) +
         C46842 * (4 * C47340 + C46842 * C47553 + C47542 * be) +
         (4 * C47331 + C46842 * C47542) * be) /
        C46789;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                       C48073 * C103 +
                   C179 * C104 + C180 * C105) *
                      C47887 * C47928 -
                  (C382 * C105 + C383 * C104 +
                   (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                       C48073 * C103) *
                      C47887 * C47935 +
                  ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) *
                       C48073 * C103 +
                   C384 * C104 + C385 * C105) *
                      C47887 * C2938) *
                     C47846 +
                 ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C47935 -
                  (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C47928 -
                  (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C2938) *
                     C47855 +
                 ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C47928 -
                  (C704 * C105 + C386 * C104 + C382 * C103) * C47887 * C47935 +
                  (C385 * C103 + C387 * C104 +
                   (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                       C48073 * C105) *
                      C47887 * C2938) *
                     C2941)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C48126 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47974) *
               C47928 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47974 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C48126) *
               C47935 +
           (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) *
                 C48073 * C103 +
             C384 * C104 + C385 * C105) *
                C48126 -
            (C1649 * C105 + C1650 * C104 +
             (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                 C48073 * C103) *
                C47974) *
               C2938) *
              C2678 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C48126) *
               C47928 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C48126 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
               C47935 +
           ((C1650 * C103 + C1649 * C104 +
             (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                 C48073 * C105) *
                C47974 -
            (C387 * C105 + C385 * C104 + C384 * C103) * C48126) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C48203 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C48199 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C48189 -
           (C1483 * C105 + C1484 * C104 +
            (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                C48073 * C103) *
               C47887 * C48167) *
              C2678 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C48199 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C48203 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C48189 +
           (C1484 * C103 + C1483 * C104 +
            (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                C48073 * C105) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C2570 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C47932) *
              C48202 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C47932 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C2570) *
              C48195 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C2570 -
           (C704 * C105 + C386 * C104 + C382 * C103) * C47887 * C47932) *
              C48182 +
          ((C386 * C103 + C704 * C104 +
            (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) * C48073 *
                C105) *
               C47887 * C47932 -
           (C183 * C105 + C182 * C104 + C181 * C103) * C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C48197 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C48186 +
            ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C48073 * C103 +
             C585 * C104 + C586 * C105) *
                C48160) *
               C2570 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C48186 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C48197 -
            (C2239 * C105 + C2240 * C104 +
             (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                 C48073 * C103) *
                C48160) *
               C47932) *
              C2678 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C48186 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C48197 -
            (C588 * C105 + C586 * C104 + C585 * C103) * C48160) *
               C2570 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C48197 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C48186 +
            (C2240 * C103 + C2239 * C104 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48073 * C105) *
                C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                        C48073 * C103 +
                    C179 * C104 + C180 * C105) *
                       C48126 -
                   (C583 * C105 + C584 * C104 +
                    (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                        C48073 * C103) *
                       C47974) *
                      C2570 +
                  (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                        C48073 * C103 +
                    C1004 * C104 + C1005 * C105) *
                       C47974 -
                   (C382 * C105 + C383 * C104 +
                    (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                        C48073 * C103) *
                       C48126) *
                      C47932) *
                     C47846 +
                 (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
                   (C181 * C105 + C180 * C104 + C179 * C103) * C48126) *
                      C2570 +
                  ((C383 * C103 + C382 * C104 + C386 * C105) * C48126 -
                   (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
                      C47932) *
                     C47855 +
                 (((C180 * C103 + C181 * C104 + C182 * C105) * C48126 -
                   (C816 * C105 + C587 * C104 + C583 * C103) * C47974) *
                      C2570 +
                  ((C1005 * C103 + C1006 * C104 +
                    (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                        C48073 * C105) *
                       C47974 -
                   (C704 * C105 + C386 * C104 + C382 * C103) * C48126) *
                      C47932) *
                     C2941)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C2570 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C47932) *
              C48202 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C47932 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C2570) *
              C48195 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C2570 -
           (C704 * C105 + C386 * C104 + C382 * C103) * C47887 * C47932) *
              C48182 +
          ((C386 * C103 + C704 * C104 +
            (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) * C48073 *
                C105) *
               C47887 * C47932 -
           (C183 * C105 + C182 * C104 + C181 * C103) * C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C48203 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C48199 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C48189 -
           (C1483 * C105 + C1484 * C104 +
            (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                C48073 * C103) *
               C47887 * C48167) *
              C2678 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C48199 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C48203 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C48189 +
           (C1484 * C103 + C1483 * C104 +
            (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                C48073 * C105) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C3332 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47974) *
               C47928 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47974 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C3332) *
               C47935 +
           (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) *
                 C48073 * C103 +
             C384 * C104 + C385 * C105) *
                C3332 -
            (C1649 * C105 + C1650 * C104 +
             (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                 C48073 * C103) *
                C47974) *
               C2938) *
              C48111 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C3332) *
               C47928 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C3332 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
               C47935 +
           ((C1650 * C103 + C1649 * C104 +
             (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                 C48073 * C105) *
                C47974 -
            (C387 * C105 + C385 * C104 + C384 * C103) * C3332) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47970 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C47977 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C3840) *
              C47928 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C47977 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47970 -
           (C2239 * C105 + C2240 * C104 +
            (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                C48073 * C103) *
               C3840) *
              C47935 +
          (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47970 -
           (C1649 * C105 + C1650 * C104 +
            (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                C48073 * C103) *
               C47977 +
           ((C113 * C1345 - C114 * C1330 - C113 * C1346 + C48090 * C1357) *
                C48073 * C103 +
            (C113 * C1347 - C114 * C1331 - C113 * C1348 + C48090 * C1358) *
                C48073 * C104 +
            (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                C48073 * C105) *
               C3840) *
              C2938) *
         C47841) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C3332 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C47974) *
              C48203 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C47974 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C3332) *
              C48199 +
          (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C3332 -
           (C1649 * C105 + C1650 * C104 +
            (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                C48073 * C103) *
               C47974) *
              C48189 +
          (((C113 * C1751 - C114 * C1748 - C113 * C1752 + C48090 * C1757) *
                C48073 * C103 +
            (C113 * C1753 - C114 * C1749 - C113 * C1754 + C48090 * C1758) *
                C48073 * C104 +
            (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                C48073 * C105) *
               C47974 -
           (C1483 * C105 + C1484 * C104 +
            (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                C48073 * C103) *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C3332 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47974) *
               C2570 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47974 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C3332) *
               C47932) *
              C48193 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C3332) *
               C2570 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C3332 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
               C47932) *
              C48180 +
          (((C180 * C103 + C181 * C104 + C182 * C105) * C3332 -
            (C816 * C105 + C587 * C104 + C583 * C103) * C47974) *
               C2570 +
           ((C1005 * C103 + C1006 * C104 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48073 * C105) *
                C47974 -
            (C704 * C105 + C386 * C104 + C382 * C103) * C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C48204 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C48201 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C48192 -
           (C2361 * C105 + C2362 * C104 +
            (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                C48073 * C103) *
               C48173) *
              C2570 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C48201 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C48204 -
           (C2239 * C105 + C2240 * C104 +
            (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                C48073 * C103) *
               C48192 +
           ((C113 * C2463 - C114 * C2460 - C113 * C2464 + C48090 * C2469) *
                C48073 * C103 +
            (C113 * C2465 - C114 * C2461 - C113 * C2466 + C48090 * C2470) *
                C48073 * C104 +
            (C113 * C2467 - C114 * C2462 - C113 * C2468 + C48090 * C2471) *
                C48073 * C105) *
               C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C47970 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47977 +
            ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C48073 * C103 +
             C585 * C104 + C586 * C105) *
                C3840) *
               C2570 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47977 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C47970 -
            (C2239 * C105 + C2240 * C104 +
             (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                 C48073 * C103) *
                C3840) *
               C47932) *
              C48111 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47977 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C47970 -
            (C588 * C105 + C586 * C104 + C585 * C103) * C3840) *
               C2570 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C47970 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47977 +
            (C2240 * C103 + C2239 * C104 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48073 * C105) *
                C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C3332 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47974) *
               C2570 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47974 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C3332) *
               C47932) *
              C48193 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C3332) *
               C2570 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C3332 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
               C47932) *
              C48180 +
          (((C180 * C103 + C181 * C104 + C182 * C105) * C3332 -
            (C816 * C105 + C587 * C104 + C583 * C103) * C47974) *
               C2570 +
           ((C1005 * C103 + C1006 * C104 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48073 * C105) *
                C47974 -
            (C704 * C105 + C386 * C104 + C382 * C103) * C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C3332 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C47974) *
              C48203 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C47974 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C3332) *
              C48199 +
          (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C3332 -
           (C1649 * C105 + C1650 * C104 +
            (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                C48073 * C103) *
               C47974) *
              C48189 +
          (((C113 * C1751 - C114 * C1748 - C113 * C1752 + C48090 * C1757) *
                C48073 * C103 +
            (C113 * C1753 - C114 * C1749 - C113 * C1754 + C48090 * C1758) *
                C48073 * C104 +
            (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                C48073 * C105) *
               C47974 -
           (C1483 * C105 + C1484 * C104 +
            (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                C48073 * C103) *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C1458 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C1459 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C1460 -
           (C1483 * C105 + C1484 * C104 +
            (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                C48073 * C103) *
               C47887 * C48167) *
              C48111 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C1459 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C1458 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C1460 +
           (C1484 * C103 + C1483 * C104 +
            (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                C48073 * C105) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C48125 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C47932) *
              C688 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C47932 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C48125) *
              C689 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C48125 -
           (C704 * C105 + C386 * C104 + C382 * C103) * C47887 * C47932) *
              C690 +
          ((C386 * C103 + C704 * C104 +
            (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) * C48073 *
                C105) *
               C47887 * C47932 -
           (C183 * C105 + C182 * C104 + C181 * C103) * C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C1870 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C1871 +
            ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C48073 * C103 +
             C585 * C104 + C586 * C105) *
                C48160) *
               C48125 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C1871 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C1870 -
            (C2239 * C105 + C2240 * C104 +
             (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                 C48073 * C103) *
                C48160) *
               C47932) *
              C48111 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C1871 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C1870 -
            (C588 * C105 + C586 * C104 + C585 * C103) * C48160) *
               C48125 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C1870 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C1871 +
            (C2240 * C103 + C2239 * C104 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48073 * C105) *
                C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C48126 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C47974) *
              C1458 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C47974 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C48126) *
              C1459 +
          (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C48126 -
           (C1649 * C105 + C1650 * C104 +
            (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                C48073 * C103) *
               C47974) *
              C1460 +
          (((C113 * C1751 - C114 * C1748 - C113 * C1752 + C48090 * C1757) *
                C48073 * C103 +
            (C113 * C1753 - C114 * C1749 - C113 * C1754 + C48090 * C1758) *
                C48073 * C104 +
            (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                C48073 * C105) *
               C47974 -
           (C1483 * C105 + C1484 * C104 +
            (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                C48073 * C103) *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C48126 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47974) *
               C48125 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47974 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C48126) *
               C47932) *
              C296 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C48126) *
               C48125 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C48126 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
               C47932) *
              C297 +
          (((C180 * C103 + C181 * C104 + C182 * C105) * C48126 -
            (C816 * C105 + C587 * C104 + C583 * C103) * C47974) *
               C48125 +
           ((C1005 * C103 + C1006 * C104 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48073 * C105) *
                C47974 -
            (C704 * C105 + C386 * C104 + C382 * C103) * C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C2338 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C2339 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C2340 -
           (C2361 * C105 + C2362 * C104 +
            (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                C48073 * C103) *
               C48173) *
              C48125 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C2339 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C2338 -
           (C2239 * C105 + C2240 * C104 +
            (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                C48073 * C103) *
               C2340 +
           ((C113 * C2463 - C114 * C2460 - C113 * C2464 + C48090 * C2469) *
                C48073 * C103 +
            (C113 * C2465 - C114 * C2461 - C113 * C2466 + C48090 * C2470) *
                C48073 * C104 +
            (C113 * C2467 - C114 * C2462 - C113 * C2468 + C48090 * C2471) *
                C48073 * C105) *
               C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                   C48073 * C103 +
               C179 * C104 + C180 * C105) *
                  C47887 * C47869 * C108 -
              (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C47869 *
                  C109 +
              (C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C47869 *
                  C110 -
              (C183 * C105 + C182 * C104 + C181 * C103) * C47887 * C47869 *
                  C111 +
              (C182 * C103 + C183 * C104 +
               (C113 * C134 - C114 * C121 - C113 * C135 + C48090 * C142) *
                   C48073 * C105) *
                  C47887 * C47869 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                    C48073 * C103 +
                C179 * C104 + C180 * C105) *
                   C47887 * C48196 -
               (C382 * C105 + C383 * C104 +
                (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                    C48073 * C103) *
                   C47887 * C48184 +
               ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) *
                    C48073 * C103 +
                C384 * C104 + C385 * C105) *
                   C47887 * C48157) *
                  C296 +
              ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C48184 -
               (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C48196 -
               (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C48157) *
                  C297 +
              ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C48196 -
               ((C113 * C325 - C114 * C307 - C113 * C326 + C48090 * C337) *
                    C48073 * C105 +
                C386 * C104 + C382 * C103) *
                   C47887 * C48184 +
               (C385 * C103 + C387 * C104 +
                (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                    C48073 * C105) *
                   C47887 * C48157) *
                  C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C48197 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C48186 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C48160) *
              C47869 * C296 +
          ((C584 * C103 + C583 * C104 + C587 * C105) * C48186 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C48197 -
           (C588 * C105 + C586 * C104 + C585 * C103) * C48160) *
              C47869 * C297 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C48197 -
           ((C113 * C526 - C114 * C508 - C113 * C527 + C48090 * C538) * C48073 *
                C105 +
            C587 * C104 + C583 * C103) *
               C48186 +
           (C586 * C103 + C588 * C104 +
            (C113 * C528 - C114 * C509 - C113 * C529 + C48090 * C539) * C48073 *
                C105) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C1116 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C1117 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C48157) *
              C48193 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C1117 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C1116 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C48157) *
              C48180 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C1116 -
           (C704 * C105 + C386 * C104 + C382 * C103) * C47887 * C1117 +
           (C385 * C103 + C387 * C104 +
            (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) * C48073 *
                C105) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
               C103 +
           C179 * C104 + C180 * C105) *
              C47887 * C1184 -
          (C382 * C105 + C383 * C104 +
           (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
               C103) *
              C47887 * C1185 +
          ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
               C103 +
           C384 * C104 + C385 * C105) *
              C47887 * C1186 -
          ((C113 * C1196 - C114 * C1190 - C113 * C1197 + C48090 * C1208) *
               C48073 * C105 +
           (C113 * C1198 - C114 * C1191 - C113 * C1199 + C48090 * C1209) *
               C48073 * C104 +
           (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
               C48073 * C103) *
              C47887 * C1187 +
          ((C113 * C1202 - C114 * C1193 - C113 * C1203 + C48090 * C1211) *
               C48073 * C103 +
           (C113 * C1204 - C114 * C1194 - C113 * C1205 + C48090 * C1212) *
               C48073 * C104 +
           (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
               C48073 * C105) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C48197 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C48186 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C48160) *
              C1116 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C48186 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C48197 -
           ((C113 * C1333 - C114 * C1324 - C113 * C1334 + C48090 * C1351) *
                C48073 * C105 +
            (C113 * C1335 - C114 * C1325 - C113 * C1336 + C48090 * C1352) *
                C48073 * C104 +
            (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                C48073 * C103) *
               C48160) *
              C1117 +
          (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C48197 -
           ((C113 * C1339 - C114 * C1327 - C113 * C1340 + C48090 * C1354) *
                C48073 * C105 +
            (C113 * C1341 - C114 * C1328 - C113 * C1342 + C48090 * C1355) *
                C48073 * C104 +
            (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                C48073 * C103) *
               C48186 +
           ((C113 * C1345 - C114 * C1330 - C113 * C1346 + C48090 * C1357) *
                C48073 * C103 +
            (C113 * C1347 - C114 * C1331 - C113 * C1348 + C48090 * C1358) *
                C48073 * C104 +
            (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                C48073 * C105) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C1870 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C1871 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C48160) *
              C47869 * C48193 +
          ((C584 * C103 + C583 * C104 + C587 * C105) * C1871 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C1870 -
           (C588 * C105 + C586 * C104 + C585 * C103) * C48160) *
              C47869 * C48180 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C1870 -
           (C816 * C105 + C587 * C104 + C583 * C103) * C1871 +
           (C586 * C103 + C588 * C104 +
            (C113 * C528 - C114 * C509 - C113 * C529 + C48090 * C539) * C48073 *
                C105) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C1870 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C1871 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C48160) *
              C48196 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C1871 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C1870 -
           ((C113 * C1333 - C114 * C1324 - C113 * C1334 + C48090 * C1351) *
                C48073 * C105 +
            (C113 * C1335 - C114 * C1325 - C113 * C1336 + C48090 * C1352) *
                C48073 * C104 +
            (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                C48073 * C103) *
               C48160) *
              C48184 +
          (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C1870 -
           (C1649 * C105 + C1650 * C104 +
            (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                C48073 * C103) *
               C1871 +
           ((C113 * C1345 - C114 * C1330 - C113 * C1346 + C48090 * C1357) *
                C48073 * C103 +
            (C113 * C1347 - C114 * C1331 - C113 * C1348 + C48090 * C1358) *
                C48073 * C104 +
            (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                C48073 * C105) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
               C103 +
           C179 * C104 + C180 * C105) *
              C2045 -
          (C583 * C105 + C584 * C104 +
           (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
               C103) *
              C2046 +
          ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
               C103 +
           C585 * C104 + C586 * C105) *
              C2047 -
          ((C113 * C2056 - C114 * C2050 - C113 * C2057 + C48090 * C2068) *
               C48073 * C105 +
           (C113 * C2058 - C114 * C2051 - C113 * C2059 + C48090 * C2069) *
               C48073 * C104 +
           (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
               C48073 * C103) *
              C2048 +
          ((C113 * C2062 - C114 * C2053 - C113 * C2063 + C48090 * C2071) *
               C48073 * C103 +
           (C113 * C2064 - C114 * C2054 - C113 * C2065 + C48090 * C2072) *
               C48073 * C104 +
           (C113 * C2066 - C114 * C2055 - C113 * C2067 + C48090 * C2073) *
               C48073 * C105) *
              C2049) *
         C47869 * C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C48126 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47974) *
               C1116 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47974 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C48126) *
               C1117 +
           (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) *
                 C48073 * C103 +
             C384 * C104 + C385 * C105) *
                C48126 -
            (C1649 * C105 + C1650 * C104 +
             (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                 C48073 * C103) *
                C47974) *
               C48157) *
              C48111 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C48126) *
               C1116 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C48126 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
               C1117 +
           ((C1650 * C103 + C1649 * C104 +
             (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                 C48073 * C105) *
                C47974 -
            (C387 * C105 + C385 * C104 + C384 * C103) * C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C48126 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C47974) *
              C47869 * C688 +
          ((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C48126) *
              C47869 * C689 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C48126 -
           (C816 * C105 + C587 * C104 + C583 * C103) * C47974) *
              C47869 * C690 +
          ((C587 * C103 + C816 * C104 +
            (C113 * C805 - C114 * C804 - C113 * C806 + C48090 * C807) * C48073 *
                C105) *
               C47974 -
           (C183 * C105 + C182 * C104 + C181 * C103) * C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C2338 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C2339 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C2340 -
           (C2361 * C105 + C2362 * C104 +
            (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                C48073 * C103) *
               C48173) *
              C47869 * C48111 +
          ((C584 * C103 + C583 * C104 + C587 * C105) * C2339 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C2338 -
           (C588 * C105 + C586 * C104 + C585 * C103) * C2340 +
           (C2362 * C103 + C2361 * C104 +
            (C113 * C2343 - C114 * C2342 - C113 * C2344 + C48090 * C2345) *
                C48073 * C105) *
               C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C48196 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C48184 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C48157) *
              C296 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C48184 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C48196 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C48157) *
              C297 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C48196 -
           ((C113 * C325 - C114 * C307 - C113 * C326 + C48090 * C337) * C48073 *
                C105 +
            C386 * C104 + C382 * C103) *
               C47887 * C48184 +
           (C385 * C103 + C387 * C104 +
            (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) * C48073 *
                C105) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
               C103 +
           C179 * C104 + C180 * C105) *
              C47887 * C47869 * C108 -
          (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C47869 * C109 +
          (C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C47869 * C110 -
          (C183 * C105 + C182 * C104 + C181 * C103) * C47887 * C47869 * C111 +
          (C182 * C103 + C183 * C104 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C48090 * C142) * C48073 *
               C105) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C1116 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C1117 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C48157) *
              C48193 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C1117 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C1116 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C48157) *
              C48180 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C1116 -
           (C704 * C105 + C386 * C104 + C382 * C103) * C47887 * C1117 +
           (C385 * C103 + C387 * C104 +
            (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) * C48073 *
                C105) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
               C103 +
           C179 * C104 + C180 * C105) *
              C47887 * C1184 -
          (C382 * C105 + C383 * C104 +
           (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
               C103) *
              C47887 * C1185 +
          ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
               C103 +
           C384 * C104 + C385 * C105) *
              C47887 * C1186 -
          ((C113 * C1196 - C114 * C1190 - C113 * C1197 + C48090 * C1208) *
               C48073 * C105 +
           (C113 * C1198 - C114 * C1191 - C113 * C1199 + C48090 * C1209) *
               C48073 * C104 +
           (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
               C48073 * C103) *
              C47887 * C1187 +
          ((C113 * C1202 - C114 * C1193 - C113 * C1203 + C48090 * C1211) *
               C48073 * C103 +
           (C113 * C1204 - C114 * C1194 - C113 * C1205 + C48090 * C1212) *
               C48073 * C104 +
           (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
               C48073 * C105) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C1870 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C1871 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C48160) *
              C47869 * C48193 +
          ((C584 * C103 + C583 * C104 + C587 * C105) * C1871 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C1870 -
           (C588 * C105 + C586 * C104 + C585 * C103) * C48160) *
              C47869 * C48180 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C1870 -
           (C816 * C105 + C587 * C104 + C583 * C103) * C1871 +
           (C586 * C103 + C588 * C104 +
            (C113 * C528 - C114 * C509 - C113 * C529 + C48090 * C539) * C48073 *
                C105) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C1870 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C1871 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C48160) *
              C48196 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C1871 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C1870 -
           ((C113 * C1333 - C114 * C1324 - C113 * C1334 + C48090 * C1351) *
                C48073 * C105 +
            (C113 * C1335 - C114 * C1325 - C113 * C1336 + C48090 * C1352) *
                C48073 * C104 +
            (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                C48073 * C103) *
               C48160) *
              C48184 +
          (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C1870 -
           (C1649 * C105 + C1650 * C104 +
            (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                C48073 * C103) *
               C1871 +
           ((C113 * C1345 - C114 * C1330 - C113 * C1346 + C48090 * C1357) *
                C48073 * C103 +
            (C113 * C1347 - C114 * C1331 - C113 * C1348 + C48090 * C1358) *
                C48073 * C104 +
            (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                C48073 * C105) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                         C48073 * C103 +
                     C179 * C104 + C180 * C105) *
                        C3332 -
                    (C583 * C105 + C584 * C104 +
                     (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                         C48073 * C103) *
                        C47974) *
                       C48125 +
                   (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                         C48073 * C103 +
                     C1004 * C104 + C1005 * C105) *
                        C47974 -
                    (C382 * C105 + C383 * C104 +
                     (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                         C48073 * C103) *
                        C3332) *
                       C47932) *
                      C47846 +
                  (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
                    (C181 * C105 + C180 * C104 + C179 * C103) * C3332) *
                       C48125 +
                   ((C383 * C103 + C382 * C104 + C386 * C105) * C3332 -
                    (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
                       C47932) *
                      C47855 +
                  (((C180 * C103 + C181 * C104 + C182 * C105) * C3332 -
                    (C816 * C105 + C587 * C104 + C583 * C103) * C47974) *
                       C48125 +
                   ((C1005 * C103 + C1006 * C104 +
                     (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                         C48073 * C105) *
                        C47974 -
                    (C704 * C105 + C386 * C104 + C382 * C103) * C3332) *
                       C47932) *
                      C2941)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C47970 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47977 +
            ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C48073 * C103 +
             C585 * C104 + C586 * C105) *
                C3840) *
               C48125 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47977 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C47970 -
            (C2239 * C105 + C2240 * C104 +
             (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                 C48073 * C103) *
                C3840) *
               C47932) *
              C2678 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47977 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C47970 -
            (C588 * C105 + C586 * C104 + C585 * C103) * C3840) *
               C48125 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C47970 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47977 +
            (C2240 * C103 + C2239 * C104 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48073 * C105) *
                C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C3332 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47974) *
               C48196 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47974 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C3332) *
               C48184 +
           (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) *
                 C48073 * C103 +
             C384 * C104 + C385 * C105) *
                C3332 -
            (C1649 * C105 + C1650 * C104 +
             (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                 C48073 * C103) *
                C47974) *
               C48157) *
              C2678 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C3332) *
               C48196 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C3332 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
               C48184 +
           ((C1650 * C103 + C1649 * C104 +
             (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                 C48073 * C105) *
                C47974 -
            (C387 * C105 + C385 * C104 + C384 * C103) * C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C3332 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C47974) *
              C47869 * C48202 +
          ((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C3332) *
              C47869 * C48195 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C3332 -
           (C816 * C105 + C587 * C104 + C583 * C103) * C47974) *
              C47869 * C48182 +
          ((C587 * C103 + C816 * C104 +
            (C113 * C805 - C114 * C804 - C113 * C806 + C48090 * C807) * C48073 *
                C105) *
               C47974 -
           (C183 * C105 + C182 * C104 + C181 * C103) * C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C48204 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C48201 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C48192 -
           (C2361 * C105 + C2362 * C104 +
            (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                C48073 * C103) *
               C48173) *
              C47869 * C2678 +
          ((C584 * C103 + C583 * C104 + C587 * C105) * C48201 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C48204 -
           (C588 * C105 + C586 * C104 + C585 * C103) * C48192 +
           (C2362 * C103 + C2361 * C104 +
            (C113 * C2343 - C114 * C2342 - C113 * C2344 + C48090 * C2345) *
                C48073 * C105) *
               C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                        C48073 * C103 +
                    C179 * C104 + C180 * C105) *
                       C47970 -
                   (C583 * C105 + C584 * C104 +
                    (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                        C48073 * C103) *
                       C47977 +
                   ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                        C48073 * C103 +
                    C585 * C104 + C586 * C105) *
                       C3840) *
                      C47869 * C47846 +
                  ((C584 * C103 + C583 * C104 + C587 * C105) * C47977 -
                   (C181 * C105 + C180 * C104 + C179 * C103) * C47970 -
                   (C588 * C105 + C586 * C104 + C585 * C103) * C3840) *
                      C47869 * C47855 +
                  ((C180 * C103 + C181 * C104 + C182 * C105) * C47970 -
                   (C816 * C105 + C587 * C104 + C583 * C103) * C47977 +
                   (C586 * C103 + C588 * C104 +
                    (C113 * C528 - C114 * C509 - C113 * C529 + C48090 * C539) *
                        C48073 * C105) *
                       C3840) *
                      C47869 * C2941)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C3332 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C47974) *
              C47869 * C48202 +
          ((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C3332) *
              C47869 * C48195 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C3332 -
           (C816 * C105 + C587 * C104 + C583 * C103) * C47974) *
              C47869 * C48182 +
          ((C587 * C103 + C816 * C104 +
            (C113 * C805 - C114 * C804 - C113 * C806 + C48090 * C807) * C48073 *
                C105) *
               C47974 -
           (C183 * C105 + C182 * C104 + C181 * C103) * C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C3332 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47974) *
               C48196 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47974 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C3332) *
               C48184 +
           (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) *
                 C48073 * C103 +
             C384 * C104 + C385 * C105) *
                C3332 -
            (C1649 * C105 + C1650 * C104 +
             (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                 C48073 * C103) *
                C47974) *
               C48157) *
              C2678 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C3332) *
               C48196 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C3332 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
               C48184 +
           ((C1650 * C103 + C1649 * C104 +
             (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                 C48073 * C105) *
                C47974 -
            (C387 * C105 + C385 * C104 + C384 * C103) * C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C48125 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C47932) *
              C688 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C47932 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C48125) *
              C689 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C48125 -
           (C704 * C105 + C386 * C104 + C382 * C103) * C47887 * C47932) *
              C690 +
          ((C386 * C103 + C704 * C104 +
            (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) * C48073 *
                C105) *
               C47887 * C47932 -
           (C183 * C105 + C182 * C104 + C181 * C103) * C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C1458 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C1459 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C1460 -
           (C1483 * C105 + C1484 * C104 +
            (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                C48073 * C103) *
               C47887 * C48167) *
              C48111 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C1459 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C1458 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C1460 +
           (C1484 * C103 + C1483 * C104 +
            (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                C48073 * C105) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C48126 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47974) *
               C48125 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47974 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C48126) *
               C47932) *
              C296 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C48126) *
               C48125 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C48126 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
               C47932) *
              C297 +
          (((C180 * C103 + C181 * C104 + C182 * C105) * C48126 -
            (C816 * C105 + C587 * C104 + C583 * C103) * C47974) *
               C48125 +
           ((C1005 * C103 + C1006 * C104 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48073 * C105) *
                C47974 -
            (C704 * C105 + C386 * C104 + C382 * C103) * C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C48126 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C47974) *
              C1458 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C47974 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C48126) *
              C1459 +
          (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C48126 -
           (C1649 * C105 + C1650 * C104 +
            (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                C48073 * C103) *
               C47974) *
              C1460 +
          (((C113 * C1751 - C114 * C1748 - C113 * C1752 + C48090 * C1757) *
                C48073 * C103 +
            (C113 * C1753 - C114 * C1749 - C113 * C1754 + C48090 * C1758) *
                C48073 * C104 +
            (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                C48073 * C105) *
               C47974 -
           (C1483 * C105 + C1484 * C104 +
            (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                C48073 * C103) *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C48196 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C48184 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C48157) *
              C296 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C48184 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C48196 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C48157) *
              C297 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C48196 -
           ((C113 * C325 - C114 * C307 - C113 * C326 + C48090 * C337) * C48073 *
                C105 +
            C386 * C104 + C382 * C103) *
               C47887 * C48184 +
           (C385 * C103 + C387 * C104 +
            (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) * C48073 *
                C105) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
               C103 +
           C179 * C104 + C180 * C105) *
              C47887 * C47869 * C108 -
          (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C47869 * C109 +
          (C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C47869 * C110 -
          (C183 * C105 + C182 * C104 + C181 * C103) * C47887 * C47869 * C111 +
          (C182 * C103 + C183 * C104 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C48090 * C142) * C48073 *
               C105) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C48197 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C48186 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C48160) *
              C47869 * C296 +
          ((C584 * C103 + C583 * C104 + C587 * C105) * C48186 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C48197 -
           (C588 * C105 + C586 * C104 + C585 * C103) * C48160) *
              C47869 * C297 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C48197 -
           ((C113 * C526 - C114 * C508 - C113 * C527 + C48090 * C538) * C48073 *
                C105 +
            C587 * C104 + C583 * C103) *
               C48186 +
           (C586 * C103 + C588 * C104 +
            (C113 * C528 - C114 * C509 - C113 * C529 + C48090 * C539) * C48073 *
                C105) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C1116 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C1117 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C48157) *
              C48193 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C1117 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C1116 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C48157) *
              C48180 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C1116 -
           (C704 * C105 + C386 * C104 + C382 * C103) * C47887 * C1117 +
           (C385 * C103 + C387 * C104 +
            (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) * C48073 *
                C105) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
               C103 +
           C179 * C104 + C180 * C105) *
              C47887 * C1184 -
          (C382 * C105 + C383 * C104 +
           (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
               C103) *
              C47887 * C1185 +
          ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
               C103 +
           C384 * C104 + C385 * C105) *
              C47887 * C1186 -
          ((C113 * C1196 - C114 * C1190 - C113 * C1197 + C48090 * C1208) *
               C48073 * C105 +
           (C113 * C1198 - C114 * C1191 - C113 * C1199 + C48090 * C1209) *
               C48073 * C104 +
           (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
               C48073 * C103) *
              C47887 * C1187 +
          ((C113 * C1202 - C114 * C1193 - C113 * C1203 + C48090 * C1211) *
               C48073 * C103 +
           (C113 * C1204 - C114 * C1194 - C113 * C1205 + C48090 * C1212) *
               C48073 * C104 +
           (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
               C48073 * C105) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C48197 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C48186 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C48073 *
                C103 +
            C585 * C104 + C586 * C105) *
               C48160) *
              C1116 +
          (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) * C48073 *
                C103 +
            C1004 * C104 + C1005 * C105) *
               C48186 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C48197 -
           ((C113 * C1333 - C114 * C1324 - C113 * C1334 + C48090 * C1351) *
                C48073 * C105 +
            (C113 * C1335 - C114 * C1325 - C113 * C1336 + C48090 * C1352) *
                C48073 * C104 +
            (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                C48073 * C103) *
               C48160) *
              C1117 +
          (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C48197 -
           ((C113 * C1339 - C114 * C1327 - C113 * C1340 + C48090 * C1354) *
                C48073 * C105 +
            (C113 * C1341 - C114 * C1328 - C113 * C1342 + C48090 * C1355) *
                C48073 * C104 +
            (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                C48073 * C103) *
               C48186 +
           ((C113 * C1345 - C114 * C1330 - C113 * C1346 + C48090 * C1357) *
                C48073 * C103 +
            (C113 * C1347 - C114 * C1331 - C113 * C1348 + C48090 * C1358) *
                C48073 * C104 +
            (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                C48073 * C105) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C48126 -
           (C583 * C105 + C584 * C104 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C48073 *
                C103) *
               C47974) *
              C47869 * C688 +
          ((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C48126) *
              C47869 * C689 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C48126 -
           (C816 * C105 + C587 * C104 + C583 * C103) * C47974) *
              C47869 * C690 +
          ((C587 * C103 + C816 * C104 +
            (C113 * C805 - C114 * C804 - C113 * C806 + C48090 * C807) * C48073 *
                C105) *
               C47974 -
           (C183 * C105 + C182 * C104 + C181 * C103) * C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C48073 * C103 +
             C179 * C104 + C180 * C105) *
                C48126 -
            (C583 * C105 + C584 * C104 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C48073 * C103) *
                C47974) *
               C1116 +
           (((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48073 * C103 +
             C1004 * C104 + C1005 * C105) *
                C47974 -
            (C382 * C105 + C383 * C104 +
             (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                 C48073 * C103) *
                C48126) *
               C1117 +
           (((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) *
                 C48073 * C103 +
             C384 * C104 + C385 * C105) *
                C48126 -
            (C1649 * C105 + C1650 * C104 +
             (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                 C48073 * C103) *
                C47974) *
               C48157) *
              C48111 +
          (((C584 * C103 + C583 * C104 + C587 * C105) * C47974 -
            (C181 * C105 + C180 * C104 + C179 * C103) * C48126) *
               C1116 +
           ((C383 * C103 + C382 * C104 + C386 * C105) * C48126 -
            (C1006 * C105 + C1005 * C104 + C1004 * C103) * C47974) *
               C1117 +
           ((C1650 * C103 + C1649 * C104 +
             (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                 C48073 * C105) *
                C47974 -
            (C387 * C105 + C385 * C104 + C384 * C103) * C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
               C103 +
           C179 * C104 + C180 * C105) *
              C47887 * C47869 * C108 -
          (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C47869 * C109 +
          (C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C47869 * C110 -
          (C183 * C105 + C182 * C104 + C181 * C103) * C47887 * C47869 * C111 +
          (C182 * C103 + C183 * C104 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C48090 * C142) * C48073 *
               C105) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C48196 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C48184 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C48157) *
              C296 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C48184 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C48196 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C48157) *
              C297 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C48196 -
           ((C113 * C325 - C114 * C307 - C113 * C326 + C48090 * C337) * C48073 *
                C105 +
            C386 * C104 + C382 * C103) *
               C47887 * C48184 +
           (C385 * C103 + C387 * C104 +
            (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) * C48073 *
                C105) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
                C103 +
            C179 * C104 + C180 * C105) *
               C47887 * C1116 -
           (C382 * C105 + C383 * C104 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
                C103) *
               C47887 * C1117 +
           ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
                C103 +
            C384 * C104 + C385 * C105) *
               C47887 * C48157) *
              C48193 +
          ((C383 * C103 + C382 * C104 + C386 * C105) * C47887 * C1117 -
           (C181 * C105 + C180 * C104 + C179 * C103) * C47887 * C1116 -
           (C387 * C105 + C385 * C104 + C384 * C103) * C47887 * C48157) *
              C48180 +
          ((C180 * C103 + C181 * C104 + C182 * C105) * C47887 * C1116 -
           (C704 * C105 + C386 * C104 + C382 * C103) * C47887 * C1117 +
           (C385 * C103 + C387 * C104 +
            (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) * C48073 *
                C105) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C48073 *
               C103 +
           C179 * C104 + C180 * C105) *
              C47887 * C1184 -
          (C382 * C105 + C383 * C104 +
           (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) * C48073 *
               C103) *
              C47887 * C1185 +
          ((C113 * C315 - C114 * C302 - C113 * C316 + C48090 * C332) * C48073 *
               C103 +
           C384 * C104 + C385 * C105) *
              C47887 * C1186 -
          ((C113 * C1196 - C114 * C1190 - C113 * C1197 + C48090 * C1208) *
               C48073 * C105 +
           (C113 * C1198 - C114 * C1191 - C113 * C1199 + C48090 * C1209) *
               C48073 * C104 +
           (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
               C48073 * C103) *
              C47887 * C1187 +
          ((C113 * C1202 - C114 * C1193 - C113 * C1203 + C48090 * C1211) *
               C48073 * C103 +
           (C113 * C1204 - C114 * C1194 - C113 * C1205 + C48090 * C1212) *
               C48073 * C104 +
           (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
               C48073 * C105) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C47928 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C47935 +
           ((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C2938) *
              C47846 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C47935 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C47928 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C2938) *
              C47855 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C47928 -
           ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C47887 *
               C47935 +
           ((C4987 + C4986) * C4815 +
            (C381 * C4813 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C2938) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C48126 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C47928 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C48126) *
               C47935 +
           (((C4993 * C4813 + C5871 * C48175) * C4815 +
             (C4982 + C4983) * C48144) *
                C48126 -
            ((C6390 + C6386) * C48144 +
             (C6535 * C48175 + C6053 * C4813) * C4815) *
                C47974) *
               C2938) *
              C2678 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48126) *
               C47928 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C48126 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C47935 +
           (((C6386 + C6390) * C4815 +
             (C1647 * C4813 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C48126) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C48203 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C48199 +
           ((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C48189 -
           ((C6186 + C6187) * C48144 +
            (C5873 * C48175 + C5871 * C4813) * C4815) *
               C47887 * C48167) *
              C2678 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C48199 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C48203 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C48189 +
           ((C6187 + C6186) * C4815 +
            (C1481 * C4813 +
             (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                 C48175) *
                C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C2570 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C47932) *
              C48202 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C47932 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C2570) *
              C48195 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C2570 -
           ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C47887 *
               C47932) *
              C48182 +
          (((C5279 + C5278) * C4815 +
            (C703 * C4813 +
             (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                 C48175) *
                C48144) *
               C47887 * C47932 -
           ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C47887 *
               C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C48197 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C48186 +
            (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                  C4813 +
              C6052 * C48175) *
                 C4815 +
             (C5142 + C5143) * C48144) *
                C48160) *
               C2570 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C48186 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C48197 -
            ((C7112 + C7113) * C48144 +
             (C6055 * C48175 + C6052 * C4813) * C4815) *
                C48160) *
               C47932) *
              C2678 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C48186 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48197 -
            ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C48160) *
               C2570 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C48197 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C48186 +
            ((C7113 + C7112) * C4815 +
             (C2237 * C4813 +
              (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                  C48175) *
                 C48144) *
                C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C48126 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C2570 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C48126) *
               C47932) *
              C47846 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48126) *
               C2570 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C48126 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C47932) *
              C47855 +
          ((((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C48126 -
            ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47974) *
               C2570 +
           (((C5613 + C5612) * C4815 +
             (C1003 * C4813 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C48126) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C2570 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C47932) *
              C48202 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C47932 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C2570) *
              C48195 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C2570 -
           ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C47887 *
               C47932) *
              C48182 +
          (((C5279 + C5278) * C4815 +
            (C703 * C4813 +
             (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                 C48175) *
                C48144) *
               C47887 * C47932 -
           ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C47887 *
               C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C48203 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C48199 +
           ((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C48189 -
           ((C6186 + C6187) * C48144 +
            (C5873 * C48175 + C5871 * C4813) * C4815) *
               C47887 * C48167) *
              C2678 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C48199 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C48203 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C48189 +
           ((C6187 + C6186) * C4815 +
            (C1481 * C4813 +
             (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                 C48175) *
                C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C3332 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C47928 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C3332) *
               C47935 +
           (((C4993 * C4813 + C5871 * C48175) * C4815 +
             (C4982 + C4983) * C48144) *
                C3332 -
            ((C6390 + C6386) * C48144 +
             (C6535 * C48175 + C6053 * C4813) * C4815) *
                C47974) *
               C2938) *
              C48111 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C3332) *
               C47928 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C3332 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C47935 +
           (((C6386 + C6390) * C4815 +
             (C1647 * C4813 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C3332) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47970 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C47977 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C3840) *
              C47928 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C47977 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47970 -
           ((C7112 + C7113) * C48144 +
            (C6055 * C48175 + C6052 * C4813) * C4815) *
               C3840) *
              C47935 +
          (((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C47970 -
           ((C6390 + C6386) * C48144 +
            (C6535 * C48175 + C6053 * C4813) * C4815) *
               C47977 +
           ((C6055 * C4813 +
             (C113 * C6021 - C114 * C6019 - C113 * C6022 + C48090 * C6025) *
                 C48175) *
                C4815 +
            (C6054 * C4813 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C48175) *
                C48144) *
               C3840) *
              C2938) *
         C47841) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C3332 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C47974) *
              C48203 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C47974 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C3332) *
              C48199 +
          (((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C3332 -
           ((C6390 + C6386) * C48144 +
            (C6535 * C48175 + C6053 * C4813) * C4815) *
               C47974) *
              C48189 +
          (((C6535 * C4813 +
             (C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                 C48175) *
                C4815 +
            (C6389 * C4813 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C48175) *
                C48144) *
               C47974 -
           ((C6186 + C6187) * C48144 +
            (C5873 * C48175 + C5871 * C4813) * C4815) *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C3332 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C2570 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C3332) *
               C47932) *
              C48193 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C3332) *
               C2570 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C3332 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C47932) *
              C48180 +
          ((((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C3332 -
            ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47974) *
               C2570 +
           (((C5613 + C5612) * C4815 +
             (C1003 * C4813 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C48204 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C48201 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C48192 -
           ((C7252 + C7248) * C48144 +
            (C7397 * C48175 +
             (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                 C4813) *
                C4815) *
               C48173) *
              C2570 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C48201 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C48204 -
           ((C7112 + C7113) * C48144 +
            (C6055 * C48175 + C6052 * C4813) * C4815) *
               C48192 +
           ((C7397 * C4813 +
             (C113 * C7384 - C114 * C7382 - C113 * C7385 + C48090 * C7388) *
                 C48175) *
                C4815 +
            (C7251 * C4813 +
             (C113 * C7386 - C114 * C7383 - C113 * C7387 + C48090 * C7389) *
                 C48175) *
                C48144) *
               C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C47970 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47977 +
            (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                  C4813 +
              C6052 * C48175) *
                 C4815 +
             (C5142 + C5143) * C48144) *
                C3840) *
               C2570 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47977 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C47970 -
            ((C7112 + C7113) * C48144 +
             (C6055 * C48175 + C6052 * C4813) * C4815) *
                C3840) *
               C47932) *
              C48111 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47977 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47970 -
            ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C3840) *
               C2570 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47970 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47977 +
            ((C7113 + C7112) * C4815 +
             (C2237 * C4813 +
              (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                  C48175) *
                 C48144) *
                C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C3332 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C2570 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C3332) *
               C47932) *
              C48193 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C3332) *
               C2570 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C3332 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C47932) *
              C48180 +
          ((((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C3332 -
            ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47974) *
               C2570 +
           (((C5613 + C5612) * C4815 +
             (C1003 * C4813 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C3332 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C47974) *
              C48203 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C47974 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C3332) *
              C48199 +
          (((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C3332 -
           ((C6390 + C6386) * C48144 +
            (C6535 * C48175 + C6053 * C4813) * C4815) *
               C47974) *
              C48189 +
          (((C6535 * C4813 +
             (C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                 C48175) *
                C4815 +
            (C6389 * C4813 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C48175) *
                C48144) *
               C47974 -
           ((C6186 + C6187) * C48144 +
            (C5873 * C48175 + C5871 * C4813) * C4815) *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C1458 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C1459 +
           ((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C1460 -
           ((C6186 + C6187) * C48144 +
            (C5873 * C48175 + C5871 * C4813) * C4815) *
               C47887 * C48167) *
              C48111 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C1459 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C1458 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C1460 +
           ((C6187 + C6186) * C4815 +
            (C1481 * C4813 +
             (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                 C48175) *
                C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C48125 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C47932) *
              C688 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C47932 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C48125) *
              C689 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C48125 -
           ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C47887 *
               C47932) *
              C690 +
          (((C5279 + C5278) * C4815 +
            (C703 * C4813 +
             (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                 C48175) *
                C48144) *
               C47887 * C47932 -
           ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C47887 *
               C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C1870 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C1871 +
            (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                  C4813 +
              C6052 * C48175) *
                 C4815 +
             (C5142 + C5143) * C48144) *
                C48160) *
               C48125 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C1871 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C1870 -
            ((C7112 + C7113) * C48144 +
             (C6055 * C48175 + C6052 * C4813) * C4815) *
                C48160) *
               C47932) *
              C48111 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C1871 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C1870 -
            ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C48160) *
               C48125 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C1870 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C1871 +
            ((C7113 + C7112) * C4815 +
             (C2237 * C4813 +
              (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                  C48175) *
                 C48144) *
                C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C48126 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C47974) *
              C1458 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C47974 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C48126) *
              C1459 +
          (((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C48126 -
           ((C6390 + C6386) * C48144 +
            (C6535 * C48175 + C6053 * C4813) * C4815) *
               C47974) *
              C1460 +
          (((C6535 * C4813 +
             (C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                 C48175) *
                C4815 +
            (C6389 * C4813 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C48175) *
                C48144) *
               C47974 -
           ((C6186 + C6187) * C48144 +
            (C5873 * C48175 + C5871 * C4813) * C4815) *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C48126 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C48125 +
           (((C5616 * C4813 +
              (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                  C48175) *
                 C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C48126) *
               C47932) *
              C296 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48126) *
               C48125 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C48126 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C47932) *
              C297 +
          ((((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C48126 -
            ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47974) *
               C48125 +
           (((C5613 + C5612) * C4815 +
             (C1003 * C4813 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C2338 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C2339 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C2340 -
           ((C7252 + C7248) * C48144 +
            (C7397 * C48175 +
             (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                 C4813) *
                C4815) *
               C48173) *
              C48125 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C2339 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C2338 -
           ((C7112 + C7113) * C48144 +
            (C6055 * C48175 + C6052 * C4813) * C4815) *
               C2340 +
           ((C7397 * C4813 +
             (C113 * C7384 - C114 * C7382 - C113 * C7385 + C48090 * C7388) *
                 C48175) *
                C4815 +
            (C7251 * C4813 +
             (C113 * C7386 - C114 * C7383 - C113 * C7387 + C48090 * C7389) *
                 C48175) *
                C48144) *
               C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                    C4813 +
                (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                    C48175) *
                   C4815 +
               (C4818 + C4819) * C48144) *
                  C47887 * C47869 * C108 -
              ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
                  C47869 * C109 +
              ((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
                  C47869 * C110 -
              ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C47887 *
                  C47869 * C111 +
              ((C4825 + C4824) * C4815 +
               (C178 * C4813 +
                (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) *
                    C48175) *
                   C48144) *
                  C47887 * C47869 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                     C4813 +
                 C4992 * C48175) *
                    C4815 +
                (C4818 + C4819) * C48144) *
                   C47887 * C48196 -
               ((C4976 + C4977) * C48144 +
                (C4993 * C48175 + C4992 * C4813) * C4815) *
                   C47887 * C48184 +
               ((C4993 * C4813 +
                 (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                     C48175) *
                    C4815 +
                (C4982 + C4983) * C48144) *
                   C47887 * C48157) *
                  C296 +
              (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
                   C48184 -
               ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
                   C48196 -
               ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
                   C48157) *
                  C297 +
              (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
                   C48196 -
               ((C381 * C48175 + C380 * C4813) * C48144 +
                (C4985 + C4984) * C4815) *
                   C47887 * C48184 +
               ((C4987 + C4986) * C4815 +
                (C381 * C4813 +
                 (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                     C48175) *
                    C48144) *
                   C47887 * C48157) *
                  C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C48197 -
           ((C5140 + C5141) * C48144 +
            ((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C48186 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                 C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C48160) *
              C47869 * C296 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C48186 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48197 -
           ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C48160) *
              C47869 * C297 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C48197 -
           ((C1003 * C48175 + C581 * C4813) * C48144 +
            (C5145 + C5144) * C4815) *
               C48186 +
           ((C5147 + C5146) * C4815 +
            (C582 * C4813 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48175) *
                C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C1116 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C1117 +
           ((C4993 * C4813 +
             (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                 C48175) *
                C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C1117 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C1116 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C48157) *
              C48180 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C1116 -
           ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C47887 *
               C1117 +
           ((C4987 + C4986) * C4815 +
            (C381 * C4813 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
            C4992 * C48175) *
               C4815 +
           (C4818 + C4819) * C48144) *
              C47887 * C1184 -
          ((C4976 + C4977) * C48144 +
           (C4993 * C48175 + C4992 * C4813) * C4815) *
              C47887 * C1185 +
          ((C4993 * C4813 + C5871 * C48175) * C4815 +
           (C4982 + C4983) * C48144) *
              C47887 * C1186 -
          ((C5872 * C48175 + C1482 * C4813) * C48144 +
           (C5873 * C48175 + C5871 * C4813) * C4815) *
              C47887 * C1187 +
          ((C5873 * C4813 +
            (C113 * C5846 - C114 * C5844 - C113 * C5847 + C48090 * C5850) *
                C48175) *
               C4815 +
           (C5872 * C4813 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C48175) *
               C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C48197 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C48186 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C48160) *
              C1116 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C48186 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C48197 -
           ((C6054 * C48175 + C2238 * C4813) * C48144 +
            (C6055 * C48175 + C6052 * C4813) * C4815) *
               C48160) *
              C1117 +
          (((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C48197 -
           (((C113 * C1753 - C114 * C1749 - C113 * C1754 + C48090 * C1758) *
                 C48175 +
             C1648 * C4813) *
                C48144 +
            ((C113 * C1751 - C114 * C1748 - C113 * C1752 + C48090 * C1757) *
                 C48175 +
             C6053 * C4813) *
                C4815) *
               C48186 +
           ((C6055 * C4813 +
             (C113 * C6021 - C114 * C6019 - C113 * C6022 + C48090 * C6025) *
                 C48175) *
                C4815 +
            (C6054 * C4813 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C48175) *
                C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C1870 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C1871 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C48160) *
              C47869 * C48193 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C1871 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C1870 -
           ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C48160) *
              C47869 * C48180 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C1870 -
           ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C1871 +
           ((C5147 + C5146) * C4815 +
            (C582 * C4813 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48175) *
                C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C1870 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C1871 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C48160) *
              C48196 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C1871 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C1870 -
           ((C6054 * C48175 + C2238 * C4813) * C48144 +
            (C6055 * C48175 + C6052 * C4813) * C4815) *
               C48160) *
              C48184 +
          (((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C1870 -
           ((C6390 + C6386) * C48144 +
            (C6535 * C48175 + C6053 * C4813) * C4815) *
               C1871 +
           ((C6055 * C4813 +
             (C113 * C6021 - C114 * C6019 - C113 * C6022 + C48090 * C6025) *
                 C48175) *
                C4815 +
            (C6054 * C4813 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C48175) *
                C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
            C4992 * C48175) *
               C4815 +
           (C4818 + C4819) * C48144) *
              C2045 -
          ((C5140 + C5141) * C48144 +
           (C5616 * C48175 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C4813) *
               C4815) *
              C2046 +
          (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
            C6052 * C48175) *
               C4815 +
           (C5142 + C5143) * C48144) *
              C2047 -
          (((C113 * C2465 - C114 * C2461 - C113 * C2466 + C48090 * C2470) *
                C48175 +
            C2360 * C4813) *
               C48144 +
           ((C113 * C2463 - C114 * C2460 - C113 * C2464 + C48090 * C2469) *
                C48175 +
            (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                C4813) *
               C4815) *
              C2048 +
          (((C113 * C2062 - C114 * C2053 - C113 * C2063 + C48090 * C2071) *
                C4813 +
            (C113 * C6911 - C114 * C6909 - C113 * C6912 + C48090 * C6915) *
                C48175) *
               C4815 +
           ((C113 * C2064 - C114 * C2054 - C113 * C2065 + C48090 * C2072) *
                C4813 +
            (C113 * C6913 - C114 * C6910 - C113 * C6914 + C48090 * C6916) *
                C48175) *
               C48144) *
              C2049) *
         C47869 * C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C48126 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C1116 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C48126) *
               C1117 +
           (((C4993 * C4813 + C5871 * C48175) * C4815 +
             (C4982 + C4983) * C48144) *
                C48126 -
            ((C6390 + C6386) * C48144 +
             ((C113 * C1751 - C114 * C1748 - C113 * C1752 + C48090 * C1757) *
                  C48175 +
              C6053 * C4813) *
                 C4815) *
                C47974) *
               C48157) *
              C48111 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48126) *
               C1116 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C48126 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C1117 +
           (((C6386 + C6390) * C4815 +
             (C1647 * C4813 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C48126 -
           ((C5140 + C5141) * C48144 +
            ((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C47974) *
              C47869 * C688 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48126) *
              C47869 * C689 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C48126 -
           ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47974) *
              C47869 * C690 +
          (((C5411 + C5410) * C4815 +
            (C815 * C4813 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48175) *
                C48144) *
               C47974 -
           ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C2338 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C2339 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C2340 -
           ((C7252 + C7248) * C48144 +
            ((C113 * C2463 - C114 * C2460 - C113 * C2464 + C48090 * C2469) *
                 C48175 +
             (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                 C4813) *
                C4815) *
               C48173) *
              C47869 * C48111 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C2339 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C2338 -
           ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C2340 +
           ((C7248 + C7252) * C4815 +
            (C2359 * C4813 +
             (C113 * C2467 - C114 * C2462 - C113 * C2468 + C48090 * C2471) *
                 C48175) *
                C48144) *
               C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C48196 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C48184 +
           ((C4993 * C4813 +
             (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                 C48175) *
                C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C48157) *
              C296 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C48184 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C48196 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C48157) *
              C297 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C48196 -
           ((C381 * C48175 + C380 * C4813) * C48144 + (C4985 + C4984) * C4815) *
               C47887 * C48184 +
           ((C4987 + C4986) * C4815 +
            (C381 * C4813 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                C48175) *
               C4815 +
           (C4818 + C4819) * C48144) *
              C47887 * C47869 * C108 -
          ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
              C47869 * C109 +
          ((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
              C47869 * C110 -
          ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C47887 *
              C47869 * C111 +
          ((C4825 + C4824) * C4815 +
           (C178 * C4813 +
            (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) *
                C48175) *
               C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C1116 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C1117 +
           ((C4993 * C4813 +
             (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                 C48175) *
                C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C1117 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C1116 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C48157) *
              C48180 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C1116 -
           ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C47887 *
               C1117 +
           ((C4987 + C4986) * C4815 +
            (C381 * C4813 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
            C4992 * C48175) *
               C4815 +
           (C4818 + C4819) * C48144) *
              C47887 * C1184 -
          ((C4976 + C4977) * C48144 +
           (C4993 * C48175 + C4992 * C4813) * C4815) *
              C47887 * C1185 +
          ((C4993 * C4813 + C5871 * C48175) * C4815 +
           (C4982 + C4983) * C48144) *
              C47887 * C1186 -
          ((C5872 * C48175 + C1482 * C4813) * C48144 +
           (C5873 * C48175 + C5871 * C4813) * C4815) *
              C47887 * C1187 +
          ((C5873 * C4813 +
            (C113 * C5846 - C114 * C5844 - C113 * C5847 + C48090 * C5850) *
                C48175) *
               C4815 +
           (C5872 * C4813 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C48175) *
               C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C1870 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C1871 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C48160) *
              C47869 * C48193 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C1871 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C1870 -
           ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C48160) *
              C47869 * C48180 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C1870 -
           ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C1871 +
           ((C5147 + C5146) * C4815 +
            (C582 * C4813 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48175) *
                C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C1870 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C1871 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C48160) *
              C48196 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C1871 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C1870 -
           ((C6054 * C48175 + C2238 * C4813) * C48144 +
            (C6055 * C48175 + C6052 * C4813) * C4815) *
               C48160) *
              C48184 +
          (((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C1870 -
           ((C6390 + C6386) * C48144 +
            (C6535 * C48175 + C6053 * C4813) * C4815) *
               C1871 +
           ((C6055 * C4813 +
             (C113 * C6021 - C114 * C6019 - C113 * C6022 + C48090 * C6025) *
                 C48175) *
                C4815 +
            (C6054 * C4813 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C48175) *
                C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C3332 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C48125 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C3332) *
               C47932) *
              C47846 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C3332) *
               C48125 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C3332 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C47932) *
              C47855 +
          ((((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C3332 -
            ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47974) *
               C48125 +
           (((C5613 + C5612) * C4815 +
             (C1003 * C4813 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C3332) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C47970 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47977 +
            (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                  C4813 +
              C6052 * C48175) *
                 C4815 +
             (C5142 + C5143) * C48144) *
                C3840) *
               C48125 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47977 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C47970 -
            ((C7112 + C7113) * C48144 +
             (C6055 * C48175 + C6052 * C4813) * C4815) *
                C3840) *
               C47932) *
              C2678 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47977 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47970 -
            ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C3840) *
               C48125 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47970 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47977 +
            ((C7113 + C7112) * C4815 +
             (C2237 * C4813 +
              (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                  C48175) *
                 C48144) *
                C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C3332 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C48196 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C3332) *
               C48184 +
           (((C4993 * C4813 + C5871 * C48175) * C4815 +
             (C4982 + C4983) * C48144) *
                C3332 -
            ((C6390 + C6386) * C48144 +
             (C6535 * C48175 + C6053 * C4813) * C4815) *
                C47974) *
               C48157) *
              C2678 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C3332) *
               C48196 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C3332 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C48184 +
           (((C6386 + C6390) * C4815 +
             (C1647 * C4813 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C3332 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C47974) *
              C47869 * C48202 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C3332) *
              C47869 * C48195 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C3332 -
           ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47974) *
              C47869 * C48182 +
          (((C5411 + C5410) * C4815 +
            (C815 * C4813 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48175) *
                C48144) *
               C47974 -
           ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C48204 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C48201 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C48192 -
           ((C7252 + C7248) * C48144 +
            (C7397 * C48175 +
             (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                 C4813) *
                C4815) *
               C48173) *
              C47869 * C2678 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C48201 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48204 -
           ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C48192 +
           ((C7248 + C7252) * C4815 +
            (C2359 * C4813 +
             (C113 * C2467 - C114 * C2462 - C113 * C2468 + C48090 * C2471) *
                 C48175) *
                C48144) *
               C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47970 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C47977 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C3840) *
              C47869 * C47846 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47977 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47970 -
           ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C3840) *
              C47869 * C47855 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47970 -
           ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47977 +
           ((C5147 + C5146) * C4815 +
            (C582 * C4813 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48175) *
                C48144) *
               C3840) *
              C47869 * C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C3332 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C47974) *
              C47869 * C48202 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C3332) *
              C47869 * C48195 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C3332 -
           ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47974) *
              C47869 * C48182 +
          (((C5411 + C5410) * C4815 +
            (C815 * C4813 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48175) *
                C48144) *
               C47974 -
           ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C3332 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C48196 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C3332) *
               C48184 +
           (((C4993 * C4813 + C5871 * C48175) * C4815 +
             (C4982 + C4983) * C48144) *
                C3332 -
            ((C6390 + C6386) * C48144 +
             (C6535 * C48175 + C6053 * C4813) * C4815) *
                C47974) *
               C48157) *
              C2678 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C3332) *
               C48196 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C3332 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C48184 +
           (((C6386 + C6390) * C4815 +
             (C1647 * C4813 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C48125 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C47932) *
              C688 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C47932 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C48125) *
              C689 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C48125 -
           ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C47887 *
               C47932) *
              C690 +
          (((C5279 + C5278) * C4815 +
            (C703 * C4813 +
             (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                 C48175) *
                C48144) *
               C47887 * C47932 -
           ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C47887 *
               C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C1458 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C1459 +
           ((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C1460 -
           ((C6186 + C6187) * C48144 +
            (C5873 * C48175 + C5871 * C4813) * C4815) *
               C47887 * C48167) *
              C48111 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C1459 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C1458 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C1460 +
           ((C6187 + C6186) * C4815 +
            (C1481 * C4813 +
             (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                 C48175) *
                C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C48126 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C48125 +
           (((C5616 * C4813 +
              (C113 * C1343 - C114 * C1329 - C113 * C1344 + C48090 * C1356) *
                  C48175) *
                 C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C48126) *
               C47932) *
              C296 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48126) *
               C48125 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C48126 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C47932) *
              C297 +
          ((((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C48126 -
            ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47974) *
               C48125 +
           (((C5613 + C5612) * C4815 +
             (C1003 * C4813 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C48126 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C47974) *
              C1458 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C47974 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C48126) *
              C1459 +
          (((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C48126 -
           ((C6390 + C6386) * C48144 +
            (C6535 * C48175 + C6053 * C4813) * C4815) *
               C47974) *
              C1460 +
          (((C6535 * C4813 +
             (C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                 C48175) *
                C4815 +
            (C6389 * C4813 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C48175) *
                C48144) *
               C47974 -
           ((C6186 + C6187) * C48144 +
            (C5873 * C48175 + C5871 * C4813) * C4815) *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C48196 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C48184 +
           ((C4993 * C4813 +
             (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                 C48175) *
                C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C48157) *
              C296 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C48184 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C48196 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C48157) *
              C297 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C48196 -
           ((C381 * C48175 + C380 * C4813) * C48144 + (C4985 + C4984) * C4815) *
               C47887 * C48184 +
           ((C4987 + C4986) * C4815 +
            (C381 * C4813 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                C48175) *
               C4815 +
           (C4818 + C4819) * C48144) *
              C47887 * C47869 * C108 -
          ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
              C47869 * C109 +
          ((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
              C47869 * C110 -
          ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C47887 *
              C47869 * C111 +
          ((C4825 + C4824) * C4815 +
           (C178 * C4813 +
            (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) *
                C48175) *
               C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C48197 -
           ((C5140 + C5141) * C48144 +
            ((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C48186 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             (C113 * C1337 - C114 * C1326 - C113 * C1338 + C48090 * C1353) *
                 C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C48160) *
              C47869 * C296 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C48186 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48197 -
           ((C5146 + C5147) * C48144 + (C5143 + C5142) * C4815) * C48160) *
              C47869 * C297 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C48197 -
           ((C1003 * C48175 + C581 * C4813) * C48144 +
            (C5145 + C5144) * C4815) *
               C48186 +
           ((C5147 + C5146) * C4815 +
            (C582 * C4813 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48175) *
                C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C1116 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C1117 +
           ((C4993 * C4813 +
             (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                 C48175) *
                C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C1117 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C1116 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C48157) *
              C48180 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C1116 -
           ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C47887 *
               C1117 +
           ((C4987 + C4986) * C4815 +
            (C381 * C4813 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
            C4992 * C48175) *
               C4815 +
           (C4818 + C4819) * C48144) *
              C47887 * C1184 -
          ((C4976 + C4977) * C48144 +
           (C4993 * C48175 + C4992 * C4813) * C4815) *
              C47887 * C1185 +
          ((C4993 * C4813 + C5871 * C48175) * C4815 +
           (C4982 + C4983) * C48144) *
              C47887 * C1186 -
          ((C5872 * C48175 + C1482 * C4813) * C48144 +
           (C5873 * C48175 + C5871 * C4813) * C4815) *
              C47887 * C1187 +
          ((C5873 * C4813 +
            (C113 * C5846 - C114 * C5844 - C113 * C5847 + C48090 * C5850) *
                C48175) *
               C4815 +
           (C5872 * C4813 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C48175) *
               C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C48197 -
           ((C5140 + C5141) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C48186 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C4813 +
             C6052 * C48175) *
                C4815 +
            (C5142 + C5143) * C48144) *
               C48160) *
              C1116 +
          (((C5616 * C4813 + C6053 * C48175) * C4815 +
            (C5610 + C5611) * C48144) *
               C48186 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C48197 -
           ((C6054 * C48175 + C2238 * C4813) * C48144 +
            (C6055 * C48175 + C6052 * C4813) * C4815) *
               C48160) *
              C1117 +
          (((C4993 * C4813 + C5871 * C48175) * C4815 +
            (C4982 + C4983) * C48144) *
               C48197 -
           (((C113 * C1753 - C114 * C1749 - C113 * C1754 + C48090 * C1758) *
                 C48175 +
             C1648 * C4813) *
                C48144 +
            ((C113 * C1751 - C114 * C1748 - C113 * C1752 + C48090 * C1757) *
                 C48175 +
             C6053 * C4813) *
                C4815) *
               C48186 +
           ((C6055 * C4813 +
             (C113 * C6021 - C114 * C6019 - C113 * C6022 + C48090 * C6025) *
                 C48175) *
                C4815 +
            (C6054 * C4813 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C48175) *
                C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C48126 -
           ((C5140 + C5141) * C48144 +
            ((C113 * C967 - C114 * C962 - C113 * C968 + C48090 * C977) *
                 C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C4813) *
                C4815) *
               C47974) *
              C47869 * C688 +
          (((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48126) *
              C47869 * C689 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C48126 -
           ((C5410 + C5411) * C48144 + (C5145 + C5144) * C4815) * C47974) *
              C47869 * C690 +
          (((C5411 + C5410) * C4815 +
            (C815 * C4813 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48175) *
                C48144) *
               C47974 -
           ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C4813 +
              C4992 * C48175) *
                 C4815 +
             (C4818 + C4819) * C48144) *
                C48126 -
            ((C5140 + C5141) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C4813) *
                 C4815) *
                C47974) *
               C1116 +
           (((C5616 * C4813 + C6053 * C48175) * C4815 +
             (C5610 + C5611) * C48144) *
                C47974 -
            ((C4976 + C4977) * C48144 +
             (C4993 * C48175 + C4992 * C4813) * C4815) *
                C48126) *
               C1117 +
           (((C4993 * C4813 + C5871 * C48175) * C4815 +
             (C4982 + C4983) * C48144) *
                C48126 -
            ((C6390 + C6386) * C48144 +
             ((C113 * C1751 - C114 * C1748 - C113 * C1752 + C48090 * C1757) *
                  C48175 +
              C6053 * C4813) *
                 C4815) *
                C47974) *
               C48157) *
              C48111 +
          ((((C5141 + C5140) * C4815 + (C5144 + C5145) * C48144) * C47974 -
            ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C48126) *
               C1116 +
           (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C48126 -
            ((C5612 + C5613) * C48144 + (C5611 + C5610) * C4815) * C47974) *
               C1117 +
           (((C6386 + C6390) * C4815 +
             (C1647 * C4813 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
            (C113 * C313 - C114 * C301 - C113 * C314 + C48090 * C331) *
                C48175) *
               C4815 +
           (C4818 + C4819) * C48144) *
              C47887 * C47869 * C108 -
          ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
              C47869 * C109 +
          ((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
              C47869 * C110 -
          ((C4824 + C4825) * C48144 + (C4823 + C4822) * C4815) * C47887 *
              C47869 * C111 +
          ((C4825 + C4824) * C4815 +
           (C178 * C4813 +
            (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) *
                C48175) *
               C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C48196 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C48184 +
           ((C4993 * C4813 +
             (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                 C48175) *
                C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C48157) *
              C296 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C48184 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C48196 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C48157) *
              C297 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C48196 -
           ((C381 * C48175 + C380 * C4813) * C48144 + (C4985 + C4984) * C4815) *
               C47887 * C48184 +
           ((C4987 + C4986) * C4815 +
            (C381 * C4813 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
             C4992 * C48175) *
                C4815 +
            (C4818 + C4819) * C48144) *
               C47887 * C1116 -
           ((C4976 + C4977) * C48144 +
            (C4993 * C48175 + C4992 * C4813) * C4815) *
               C47887 * C1117 +
           ((C4993 * C4813 +
             (C113 * C1200 - C114 * C1192 - C113 * C1201 + C48090 * C1210) *
                 C48175) *
                C4815 +
            (C4982 + C4983) * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C4977 + C4976) * C4815 + (C4984 + C4985) * C48144) * C47887 *
               C1117 -
           ((C4820 + C4821) * C48144 + (C4819 + C4818) * C4815) * C47887 *
               C1116 -
           ((C4986 + C4987) * C48144 + (C4983 + C4982) * C4815) * C47887 *
               C48157) *
              C48180 +
          (((C4821 + C4820) * C4815 + (C4822 + C4823) * C48144) * C47887 *
               C1116 -
           ((C5278 + C5279) * C48144 + (C4985 + C4984) * C4815) * C47887 *
               C1117 +
           ((C4987 + C4986) * C4815 +
            (C381 * C4813 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C4813 +
            C4992 * C48175) *
               C4815 +
           (C4818 + C4819) * C48144) *
              C47887 * C1184 -
          ((C4976 + C4977) * C48144 +
           (C4993 * C48175 + C4992 * C4813) * C4815) *
              C47887 * C1185 +
          ((C4993 * C4813 + C5871 * C48175) * C4815 +
           (C4982 + C4983) * C48144) *
              C47887 * C1186 -
          ((C5872 * C48175 + C1482 * C4813) * C48144 +
           (C5873 * C48175 + C5871 * C4813) * C4815) *
              C47887 * C1187 +
          ((C5873 * C4813 +
            (C113 * C5846 - C114 * C5844 - C113 * C5847 + C48090 * C5850) *
                C48175) *
               C4815 +
           (C5872 * C4813 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C48175) *
               C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C47928 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C47935 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C2938) *
              C47846 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C47935 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C47928 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C2938) *
              C47855 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C47928 -
           ((C11052 + C11053) * C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C47935 +
           ((C10707 + C10706) * C48073 * C4815 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C2938) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C48126 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C47928 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C48126) *
               C47935 +
           (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
              C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
              C48177 * C1356) *
                 C48073 * C4815 +
             (C10702 + C10703) * C48073 * C48144) *
                C48126 -
            ((C12144 + C12145) * C48073 * C48144 +
             (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 +
              C48177 * C1357 + C10445 * C1343 - C10446 * C1329 -
              C10445 * C1344 + C10443 * C1356) *
                 C48073 * C4815) *
                C47974) *
               C2938) *
              C2678 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C48126) *
               C47928 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C48126 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C47935 +
           (((C12145 + C12144) * C48073 * C4815 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C10706 + C10707) * C48073 * C48144 +
             (C10703 + C10702) * C48073 * C4815) *
                C48126) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C48203 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C48199 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C48189 -
           ((C11936 + C11937) * C48073 * C48144 +
            (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
             C10445 * C1200 - C10446 * C1192 - C10445 * C1201 +
             C10443 * C1210) *
                C48073 * C4815) *
               C47887 * C48167) *
              C2678 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C48199 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C48203 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C48189 +
           ((C11937 + C11936) * C48073 * C4815 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48073 * C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C2570 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C47932) *
              C48202 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C47932 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C2570) *
              C48195 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C2570 -
           ((C11052 + C11053) * C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C47932) *
              C48182 +
          (((C11053 + C11052) * C48073 * C4815 +
            (C10445 * C325 - C10446 * C307 - C10445 * C326 + C10443 * C337 +
             C10447 * C975 - C10448 * C966 - C10447 * C976 + C48177 * C981) *
                C48073 * C48144) *
               C47887 * C47932 -
           ((C10504 + C10505) * C48073 * C48144 +
            (C10503 + C10502) * C48073 * C4815) *
               C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C48197 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C48186 +
            ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
              C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
              C48177 * C2070) *
                 C48073 * C4815 +
             (C10904 + C10905) * C48073 * C48144) *
                C48160) *
               C2570 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C48186 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C48197 -
            ((C12864 + C12865) * C48073 * C48144 +
             (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 +
              C48177 * C2469 + C10445 * C1337 - C10446 * C1326 -
              C10445 * C1338 + C10443 * C1353) *
                 C48073 * C4815) *
                C48160) *
               C47932) *
              C2678 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C48186 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C48197 -
            ((C10908 + C10909) * C48073 * C48144 +
             (C10905 + C10904) * C48073 * C4815) *
                C48160) *
               C2570 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C48197 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C48186 +
            ((C12865 + C12864) * C48073 * C4815 +
             (C10445 * C1333 - C10446 * C1324 - C10445 * C1334 +
              C10443 * C1351 + C10447 * C2467 - C10448 * C2462 -
              C10447 * C2468 + C48177 * C2471) *
                 C48073 * C48144) *
                C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C48126 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C2570 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C48126) *
               C47932) *
              C47846 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C48126) *
               C2570 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C48126 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C47932) *
              C47855 +
          ((((C10501 + C10500) * C48073 * C4815 +
             (C10502 + C10503) * C48073 * C48144) *
                C48126 -
            ((C11196 + C11197) * C48073 * C48144 +
             (C10907 + C10906) * C48073 * C4815) *
                C47974) *
               C2570 +
           (((C11419 + C11418) * C48073 * C4815 +
             (C10445 * C973 - C10446 * C965 - C10445 * C974 + C10443 * C980 +
              C10447 * C2221 - C10448 * C2220 - C10447 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C11052 + C11053) * C48073 * C48144 +
             (C10705 + C10704) * C48073 * C4815) *
                C48126) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C2570 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C47932) *
              C48202 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C47932 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C2570) *
              C48195 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C2570 -
           ((C11052 + C11053) * C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C47932) *
              C48182 +
          (((C11053 + C11052) * C48073 * C4815 +
            (C10445 * C325 - C10446 * C307 - C10445 * C326 + C10443 * C337 +
             C10447 * C975 - C10448 * C966 - C10447 * C976 + C48177 * C981) *
                C48073 * C48144) *
               C47887 * C47932 -
           ((C10504 + C10505) * C48073 * C48144 +
            (C10503 + C10502) * C48073 * C4815) *
               C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C48203 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C48199 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C48189 -
           ((C11936 + C11937) * C48073 * C48144 +
            (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
             C10445 * C1200 - C10446 * C1192 - C10445 * C1201 +
             C10443 * C1210) *
                C48073 * C4815) *
               C47887 * C48167) *
              C2678 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C48199 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C48203 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C48189 +
           ((C11937 + C11936) * C48073 * C4815 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48073 * C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C3332 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C47928 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C3332) *
               C47935 +
           (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
              C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
              C48177 * C1356) *
                 C48073 * C4815 +
             (C10702 + C10703) * C48073 * C48144) *
                C3332 -
            ((C12144 + C12145) * C48073 * C48144 +
             (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 +
              C48177 * C1357 + C10445 * C1343 - C10446 * C1329 -
              C10445 * C1344 + C10443 * C1356) *
                 C48073 * C4815) *
                C47974) *
               C2938) *
              C48111 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C3332) *
               C47928 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C3332 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C47935 +
           (((C12145 + C12144) * C48073 * C4815 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C10706 + C10707) * C48073 * C48144 +
             (C10703 + C10702) * C48073 * C4815) *
                C3332) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47970 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C47977 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C3840) *
              C47928 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C47977 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47970 -
           ((C12864 + C12865) * C48073 * C48144 +
            (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 + C48177 * C2469 +
             C10445 * C1337 - C10446 * C1326 - C10445 * C1338 +
             C10443 * C1353) *
                C48073 * C4815) *
               C3840) *
              C47935 +
          (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47970 -
           ((C12144 + C12145) * C48073 * C48144 +
            (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 + C48177 * C1357 +
             C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
             C10443 * C1356) *
                C48073 * C4815) *
               C47977 +
           ((C10445 * C1345 - C10446 * C1330 - C10445 * C1346 + C10443 * C1357 +
             C10447 * C7384 - C10448 * C7382 - C10447 * C7385 +
             C48177 * C7388) *
                C48073 * C4815 +
            (C10445 * C1347 - C10446 * C1331 - C10445 * C1348 + C10443 * C1358 +
             C10447 * C7386 - C10448 * C7383 - C10447 * C7387 +
             C48177 * C7389) *
                C48073 * C48144) *
               C3840) *
              C2938) *
         C47841) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C3332 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C47974) *
              C48203 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C47974 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C3332) *
              C48199 +
          (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C3332 -
           ((C12144 + C12145) * C48073 * C48144 +
            (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 + C48177 * C1357 +
             C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
             C10443 * C1356) *
                C48073 * C4815) *
               C47974) *
              C48189 +
          (((C10445 * C1751 - C10446 * C1748 - C10445 * C1752 + C10443 * C1757 +
             C10447 * C6021 - C10448 * C6019 - C10447 * C6022 +
             C48177 * C6025) *
                C48073 * C4815 +
            (C10445 * C1753 - C10446 * C1749 - C10445 * C1754 + C10443 * C1758 +
             C10447 * C6023 - C10448 * C6020 - C10447 * C6024 +
             C48177 * C6026) *
                C48073 * C48144) *
               C47974 -
           ((C11936 + C11937) * C48073 * C48144 +
            (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
             C10445 * C1200 - C10446 * C1192 - C10445 * C1201 +
             C10443 * C1210) *
                C48073 * C4815) *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C3332 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C2570 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C3332) *
               C47932) *
              C48193 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C3332) *
               C2570 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C3332 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C47932) *
              C48180 +
          ((((C10501 + C10500) * C48073 * C4815 +
             (C10502 + C10503) * C48073 * C48144) *
                C3332 -
            ((C11196 + C11197) * C48073 * C48144 +
             (C10907 + C10906) * C48073 * C4815) *
                C47974) *
               C2570 +
           (((C11419 + C11418) * C48073 * C4815 +
             (C10445 * C973 - C10446 * C965 - C10445 * C974 + C10443 * C980 +
              C10447 * C2221 - C10448 * C2220 - C10447 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C11052 + C11053) * C48073 * C48144 +
             (C10705 + C10704) * C48073 * C4815) *
                C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C48204 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C48201 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C48192 -
           ((C13008 + C13009) * C48073 * C48144 +
            (C10447 * C2062 - C10448 * C2053 - C10447 * C2063 + C48177 * C2071 +
             C10445 * C2060 - C10446 * C2052 - C10445 * C2061 +
             C10443 * C2070) *
                C48073 * C4815) *
               C48173) *
              C2570 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C48201 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C48204 -
           ((C12864 + C12865) * C48073 * C48144 +
            (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 + C48177 * C2469 +
             C10445 * C1337 - C10446 * C1326 - C10445 * C1338 +
             C10443 * C1353) *
                C48073 * C4815) *
               C48192 +
           ((C10445 * C2463 - C10446 * C2460 - C10445 * C2464 + C10443 * C2469 +
             C10447 * C6911 - C10448 * C6909 - C10447 * C6912 +
             C48177 * C6915) *
                C48073 * C4815 +
            (C10445 * C2465 - C10446 * C2461 - C10445 * C2466 + C10443 * C2470 +
             C10447 * C6913 - C10448 * C6910 - C10447 * C6914 +
             C48177 * C6916) *
                C48073 * C48144) *
               C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C47970 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47977 +
            ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
              C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
              C48177 * C2070) *
                 C48073 * C4815 +
             (C10904 + C10905) * C48073 * C48144) *
                C3840) *
               C2570 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47977 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C47970 -
            ((C12864 + C12865) * C48073 * C48144 +
             (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 +
              C48177 * C2469 + C10445 * C1337 - C10446 * C1326 -
              C10445 * C1338 + C10443 * C1353) *
                 C48073 * C4815) *
                C3840) *
               C47932) *
              C48111 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47977 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C47970 -
            ((C10908 + C10909) * C48073 * C48144 +
             (C10905 + C10904) * C48073 * C4815) *
                C3840) *
               C2570 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C47970 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47977 +
            ((C12865 + C12864) * C48073 * C4815 +
             (C10445 * C1333 - C10446 * C1324 - C10445 * C1334 +
              C10443 * C1351 + C10447 * C2467 - C10448 * C2462 -
              C10447 * C2468 + C48177 * C2471) *
                 C48073 * C48144) *
                C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C3332 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C2570 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C3332) *
               C47932) *
              C48193 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C3332) *
               C2570 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C3332 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C47932) *
              C48180 +
          ((((C10501 + C10500) * C48073 * C4815 +
             (C10502 + C10503) * C48073 * C48144) *
                C3332 -
            ((C11196 + C11197) * C48073 * C48144 +
             (C10907 + C10906) * C48073 * C4815) *
                C47974) *
               C2570 +
           (((C11419 + C11418) * C48073 * C4815 +
             (C10445 * C973 - C10446 * C965 - C10445 * C974 + C10443 * C980 +
              C10447 * C2221 - C10448 * C2220 - C10447 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C11052 + C11053) * C48073 * C48144 +
             (C10705 + C10704) * C48073 * C4815) *
                C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C3332 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C47974) *
              C48203 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C47974 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C3332) *
              C48199 +
          (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C3332 -
           ((C12144 + C12145) * C48073 * C48144 +
            (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 + C48177 * C1357 +
             C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
             C10443 * C1356) *
                C48073 * C4815) *
               C47974) *
              C48189 +
          (((C10445 * C1751 - C10446 * C1748 - C10445 * C1752 + C10443 * C1757 +
             C10447 * C6021 - C10448 * C6019 - C10447 * C6022 +
             C48177 * C6025) *
                C48073 * C4815 +
            (C10445 * C1753 - C10446 * C1749 - C10445 * C1754 + C10443 * C1758 +
             C10447 * C6023 - C10448 * C6020 - C10447 * C6024 +
             C48177 * C6026) *
                C48073 * C48144) *
               C47974 -
           ((C11936 + C11937) * C48073 * C48144 +
            (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
             C10445 * C1200 - C10446 * C1192 - C10445 * C1201 +
             C10443 * C1210) *
                C48073 * C4815) *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C1458 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C1459 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C1460 -
           ((C11936 + C11937) * C48073 * C48144 +
            (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
             C10445 * C1200 - C10446 * C1192 - C10445 * C1201 +
             C10443 * C1210) *
                C48073 * C4815) *
               C47887 * C48167) *
              C48111 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C1459 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C1458 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C1460 +
           ((C11937 + C11936) * C48073 * C4815 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48073 * C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C48125 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C47932) *
              C688 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C47932 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C48125) *
              C689 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C48125 -
           ((C11052 + C11053) * C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C47932) *
              C690 +
          (((C11053 + C11052) * C48073 * C4815 +
            (C10445 * C325 - C10446 * C307 - C10445 * C326 + C10443 * C337 +
             C10447 * C975 - C10448 * C966 - C10447 * C976 + C48177 * C981) *
                C48073 * C48144) *
               C47887 * C47932 -
           ((C10504 + C10505) * C48073 * C48144 +
            (C10503 + C10502) * C48073 * C4815) *
               C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C1870 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C1871 +
            ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
              C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
              C48177 * C2070) *
                 C48073 * C4815 +
             (C10904 + C10905) * C48073 * C48144) *
                C48160) *
               C48125 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C1871 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C1870 -
            ((C12864 + C12865) * C48073 * C48144 +
             (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 +
              C48177 * C2469 + C10445 * C1337 - C10446 * C1326 -
              C10445 * C1338 + C10443 * C1353) *
                 C48073 * C4815) *
                C48160) *
               C47932) *
              C48111 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C1871 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C1870 -
            ((C10908 + C10909) * C48073 * C48144 +
             (C10905 + C10904) * C48073 * C4815) *
                C48160) *
               C48125 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C1870 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C1871 +
            ((C12865 + C12864) * C48073 * C4815 +
             (C10445 * C1333 - C10446 * C1324 - C10445 * C1334 +
              C10443 * C1351 + C10447 * C2467 - C10448 * C2462 -
              C10447 * C2468 + C48177 * C2471) *
                 C48073 * C48144) *
                C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C48126 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C47974) *
              C1458 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C47974 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C48126) *
              C1459 +
          (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C48126 -
           ((C12144 + C12145) * C48073 * C48144 +
            (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 + C48177 * C1357 +
             C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
             C10443 * C1356) *
                C48073 * C4815) *
               C47974) *
              C1460 +
          (((C10445 * C1751 - C10446 * C1748 - C10445 * C1752 + C10443 * C1757 +
             C10447 * C6021 - C10448 * C6019 - C10447 * C6022 +
             C48177 * C6025) *
                C48073 * C4815 +
            (C10445 * C1753 - C10446 * C1749 - C10445 * C1754 + C10443 * C1758 +
             C10447 * C6023 - C10448 * C6020 - C10447 * C6024 +
             C48177 * C6026) *
                C48073 * C48144) *
               C47974 -
           ((C11936 + C11937) * C48073 * C48144 +
            (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
             C10445 * C1200 - C10446 * C1192 - C10445 * C1201 +
             C10443 * C1210) *
                C48073 * C4815) *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C48126 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C48125 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C48126) *
               C47932) *
              C296 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C48126) *
               C48125 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C48126 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C47932) *
              C297 +
          ((((C10501 + C10500) * C48073 * C4815 +
             (C10502 + C10503) * C48073 * C48144) *
                C48126 -
            ((C11196 + C11197) * C48073 * C48144 +
             (C10907 + C10906) * C48073 * C4815) *
                C47974) *
               C48125 +
           (((C11419 + C11418) * C48073 * C4815 +
             (C10445 * C973 - C10446 * C965 - C10445 * C974 + C10443 * C980 +
              C10447 * C2221 - C10448 * C2220 - C10447 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C11052 + C11053) * C48073 * C48144 +
             (C10705 + C10704) * C48073 * C4815) *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C2338 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C2339 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C2340 -
           ((C13008 + C13009) * C48073 * C48144 +
            (C10447 * C2062 - C10448 * C2053 - C10447 * C2063 + C48177 * C2071 +
             C10445 * C2060 - C10446 * C2052 - C10445 * C2061 +
             C10443 * C2070) *
                C48073 * C4815) *
               C48173) *
              C48125 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C2339 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C2338 -
           ((C12864 + C12865) * C48073 * C48144 +
            (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 + C48177 * C2469 +
             C10445 * C1337 - C10446 * C1326 - C10445 * C1338 +
             C10443 * C1353) *
                C48073 * C4815) *
               C2340 +
           ((C10445 * C2463 - C10446 * C2460 - C10445 * C2464 + C10443 * C2469 +
             C10447 * C6911 - C10448 * C6909 - C10447 * C6912 +
             C48177 * C6915) *
                C48073 * C4815 +
            (C10445 * C2465 - C10446 * C2461 - C10445 * C2466 + C10443 * C2470 +
             C10447 * C6913 - C10448 * C6910 - C10447 * C6914 +
             C48177 * C6916) *
                C48073 * C48144) *
               C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
                C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                   C48073 * C4815 +
               (C10498 + C10499) * C48073 * C48144) *
                  C47887 * C47869 * C108 -
              ((C10500 + C10501) * C48073 * C48144 +
               (C10499 + C10498) * C48073 * C4815) *
                  C47887 * C47869 * C109 +
              ((C10501 + C10500) * C48073 * C4815 +
               (C10502 + C10503) * C48073 * C48144) *
                  C47887 * C47869 * C110 -
              ((C10504 + C10505) * C48073 * C48144 +
               (C10503 + C10502) * C48073 * C4815) *
                  C47887 * C47869 * C111 +
              ((C10505 + C10504) * C48073 * C4815 +
               (C10445 * C132 - C10446 * C120 - C10445 * C133 + C10443 * C141 +
                C10447 * C805 - C10448 * C804 - C10447 * C806 + C48177 * C807) *
                   C48073 * C48144) *
                  C47887 * C47869 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
                 C10447 * C514 - C10448 * C502 - C10447 * C515 +
                 C48177 * C532) *
                    C48073 * C4815 +
                (C10498 + C10499) * C48073 * C48144) *
                   C47887 * C48196 -
               ((C10700 + C10701) * C48073 * C48144 +
                (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
                 C10445 * C313 - C10446 * C301 - C10445 * C314 +
                 C10443 * C331) *
                    C48073 * C4815) *
                   C47887 * C48184 +
               ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
                 C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
                 C48177 * C1356) *
                    C48073 * C4815 +
                (C10702 + C10703) * C48073 * C48144) *
                   C47887 * C48157) *
                  C296 +
              (((C10701 + C10700) * C48073 * C4815 +
                (C10704 + C10705) * C48073 * C48144) *
                   C47887 * C48184 -
               ((C10500 + C10501) * C48073 * C48144 +
                (C10499 + C10498) * C48073 * C4815) *
                   C47887 * C48196 -
               ((C10706 + C10707) * C48073 * C48144 +
                (C10703 + C10702) * C48073 * C4815) *
                   C47887 * C48157) *
                  C297 +
              (((C10501 + C10500) * C48073 * C4815 +
                (C10502 + C10503) * C48073 * C48144) *
                   C47887 * C48196 -
               ((C10447 * C973 - C10448 * C965 - C10447 * C974 + C48177 * C980 +
                 C10445 * C321 - C10446 * C305 - C10445 * C322 +
                 C10443 * C335) *
                    C48073 * C48144 +
                (C10705 + C10704) * C48073 * C4815) *
                   C47887 * C48184 +
               ((C10707 + C10706) * C48073 * C4815 +
                (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
                 C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
                 C48177 * C1633) *
                    C48073 * C48144) *
                   C47887 * C48157) *
                  C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C48197 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C48186 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C48160) *
              C47869 * C296 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C48186 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C48197 -
           ((C10908 + C10909) * C48073 * C48144 +
            (C10905 + C10904) * C48073 * C4815) *
               C48160) *
              C47869 * C297 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C48197 -
           ((C10447 * C524 - C10448 * C507 - C10447 * C525 + C48177 * C537 +
             C10445 * C522 - C10446 * C506 - C10445 * C523 + C10443 * C536) *
                C48073 * C48144 +
            (C10907 + C10906) * C48073 * C4815) *
               C48186 +
           ((C10909 + C10908) * C48073 * C4815 +
            (C10445 * C524 - C10446 * C507 - C10445 * C525 + C10443 * C537 +
             C10447 * C2343 - C10448 * C2342 - C10447 * C2344 +
             C48177 * C2345) *
                C48073 * C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C1116 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C1117 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C1117 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C1116 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C48157) *
              C48180 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C1116 -
           ((C11052 + C11053) * C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C1117 +
           ((C10707 + C10706) * C48073 * C4815 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C48073 * C4815 +
           (C10498 + C10499) * C48073 * C48144) *
              C47887 * C1184 -
          ((C10700 + C10701) * C48073 * C48144 +
           (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
            C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
               C48073 * C4815) *
              C47887 * C1185 +
          ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
            C10447 * C1343 - C10448 * C1329 - C10447 * C1344 + C48177 * C1356) *
               C48073 * C4815 +
           (C10702 + C10703) * C48073 * C48144) *
              C47887 * C1186 -
          ((C10447 * C1753 - C10448 * C1749 - C10447 * C1754 + C48177 * C1758 +
            C10445 * C1198 - C10446 * C1191 - C10445 * C1199 + C10443 * C1209) *
               C48073 * C48144 +
           (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
            C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210) *
               C48073 * C4815) *
              C47887 * C1187 +
          ((C10445 * C1202 - C10446 * C1193 - C10445 * C1203 + C10443 * C1211 +
            C10447 * C6522 - C10448 * C6520 - C10447 * C6523 + C48177 * C6526) *
               C48073 * C4815 +
           (C10445 * C1204 - C10446 * C1194 - C10445 * C1205 + C10443 * C1212 +
            C10447 * C6524 - C10448 * C6521 - C10447 * C6525 + C48177 * C6527) *
               C48073 * C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C48197 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C48186 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C48160) *
              C1116 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C48186 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C48197 -
           ((C10447 * C2465 - C10448 * C2461 - C10447 * C2466 + C48177 * C2470 +
             C10445 * C1335 - C10446 * C1325 - C10445 * C1336 +
             C10443 * C1352) *
                C48073 * C48144 +
            (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 + C48177 * C2469 +
             C10445 * C1337 - C10446 * C1326 - C10445 * C1338 +
             C10443 * C1353) *
                C48073 * C4815) *
               C48160) *
              C1117 +
          (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C48197 -
           ((C10447 * C1347 - C10448 * C1331 - C10447 * C1348 + C48177 * C1358 +
             C10445 * C1341 - C10446 * C1328 - C10445 * C1342 +
             C10443 * C1355) *
                C48073 * C48144 +
            (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 + C48177 * C1357 +
             C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
             C10443 * C1356) *
                C48073 * C4815) *
               C48186 +
           ((C10445 * C1345 - C10446 * C1330 - C10445 * C1346 + C10443 * C1357 +
             C10447 * C7384 - C10448 * C7382 - C10447 * C7385 +
             C48177 * C7388) *
                C48073 * C4815 +
            (C10445 * C1347 - C10446 * C1331 - C10445 * C1348 + C10443 * C1358 +
             C10447 * C7386 - C10448 * C7383 - C10447 * C7387 +
             C48177 * C7389) *
                C48073 * C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C1870 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C1871 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C48160) *
              C47869 * C48193 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C1871 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C1870 -
           ((C10908 + C10909) * C48073 * C48144 +
            (C10905 + C10904) * C48073 * C4815) *
               C48160) *
              C47869 * C48180 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C1870 -
           ((C11196 + C11197) * C48073 * C48144 +
            (C10907 + C10906) * C48073 * C4815) *
               C1871 +
           ((C10909 + C10908) * C48073 * C4815 +
            (C10445 * C524 - C10446 * C507 - C10445 * C525 + C10443 * C537 +
             C10447 * C2343 - C10448 * C2342 - C10447 * C2344 +
             C48177 * C2345) *
                C48073 * C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C1870 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C1871 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C48160) *
              C48196 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C1871 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C1870 -
           ((C10447 * C2465 - C10448 * C2461 - C10447 * C2466 + C48177 * C2470 +
             C10445 * C1335 - C10446 * C1325 - C10445 * C1336 +
             C10443 * C1352) *
                C48073 * C48144 +
            (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 + C48177 * C2469 +
             C10445 * C1337 - C10446 * C1326 - C10445 * C1338 +
             C10443 * C1353) *
                C48073 * C4815) *
               C48160) *
              C48184 +
          (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C1870 -
           ((C12144 + C12145) * C48073 * C48144 +
            (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 + C48177 * C1357 +
             C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
             C10443 * C1356) *
                C48073 * C4815) *
               C1871 +
           ((C10445 * C1345 - C10446 * C1330 - C10445 * C1346 + C10443 * C1357 +
             C10447 * C7384 - C10448 * C7382 - C10447 * C7385 +
             C48177 * C7388) *
                C48073 * C4815 +
            (C10445 * C1347 - C10446 * C1331 - C10445 * C1348 + C10443 * C1358 +
             C10447 * C7386 - C10448 * C7383 - C10447 * C7387 +
             C48177 * C7389) *
                C48073 * C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C48073 * C4815 +
           (C10498 + C10499) * C48073 * C48144) *
              C2045 -
          ((C10902 + C10903) * C48073 * C48144 +
           (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
            C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
               C48073 * C4815) *
              C2046 +
          ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
            C10447 * C2060 - C10448 * C2052 - C10447 * C2061 + C48177 * C2070) *
               C48073 * C4815 +
           (C10904 + C10905) * C48073 * C48144) *
              C2047 -
          ((C10447 * C2064 - C10448 * C2054 - C10447 * C2065 + C48177 * C2072 +
            C10445 * C2058 - C10446 * C2051 - C10445 * C2059 + C10443 * C2069) *
               C48073 * C48144 +
           (C10447 * C2062 - C10448 * C2053 - C10447 * C2063 + C48177 * C2071 +
            C10445 * C2060 - C10446 * C2052 - C10445 * C2061 + C10443 * C2070) *
               C48073 * C4815) *
              C2048 +
          ((C10445 * C2062 - C10446 * C2053 - C10445 * C2063 + C10443 * C2071 +
            C10447 * C12651 - C10448 * C12649 - C10447 * C12652 +
            C48177 * C12655) *
               C48073 * C4815 +
           (C10445 * C2064 - C10446 * C2054 - C10445 * C2065 + C10443 * C2072 +
            C10447 * C12653 - C10448 * C12650 - C10447 * C12654 +
            C48177 * C12656) *
               C48073 * C48144) *
              C2049) *
         C47869 * C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C48126 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C1116 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C48126) *
               C1117 +
           (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
              C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
              C48177 * C1356) *
                 C48073 * C4815 +
             (C10702 + C10703) * C48073 * C48144) *
                C48126 -
            ((C12144 + C12145) * C48073 * C48144 +
             (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 +
              C48177 * C1357 + C10445 * C1343 - C10446 * C1329 -
              C10445 * C1344 + C10443 * C1356) *
                 C48073 * C4815) *
                C47974) *
               C48157) *
              C48111 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C48126) *
               C1116 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C48126 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C1117 +
           (((C12145 + C12144) * C48073 * C4815 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C10706 + C10707) * C48073 * C48144 +
             (C10703 + C10702) * C48073 * C4815) *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C48126 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C47974) *
              C47869 * C688 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C47974 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C48126) *
              C47869 * C689 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C48126 -
           ((C11196 + C11197) * C48073 * C48144 +
            (C10907 + C10906) * C48073 * C4815) *
               C47974) *
              C47869 * C690 +
          (((C11197 + C11196) * C48073 * C4815 +
            (C10445 * C526 - C10446 * C508 - C10445 * C527 + C10443 * C538 +
             C10447 * C528 - C10448 * C509 - C10447 * C529 + C48177 * C539) *
                C48073 * C48144) *
               C47974 -
           ((C10504 + C10505) * C48073 * C48144 +
            (C10503 + C10502) * C48073 * C4815) *
               C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C2338 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C2339 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C2340 -
           ((C13008 + C13009) * C48073 * C48144 +
            (C10447 * C2062 - C10448 * C2053 - C10447 * C2063 + C48177 * C2071 +
             C10445 * C2060 - C10446 * C2052 - C10445 * C2061 +
             C10443 * C2070) *
                C48073 * C4815) *
               C48173) *
              C47869 * C48111 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C2339 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C2338 -
           ((C10908 + C10909) * C48073 * C48144 +
            (C10905 + C10904) * C48073 * C4815) *
               C2340 +
           ((C13009 + C13008) * C48073 * C4815 +
            (C10445 * C2056 - C10446 * C2050 - C10445 * C2057 + C10443 * C2068 +
             C10447 * C2066 - C10448 * C2055 - C10447 * C2067 +
             C48177 * C2073) *
                C48073 * C48144) *
               C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C48196 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C48184 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C48157) *
              C296 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C48184 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C48196 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C48157) *
              C297 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C48196 -
           ((C10447 * C973 - C10448 * C965 - C10447 * C974 + C48177 * C980 +
             C10445 * C321 - C10446 * C305 - C10445 * C322 + C10443 * C335) *
                C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C48184 +
           ((C10707 + C10706) * C48073 * C4815 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C48073 * C4815 +
           (C10498 + C10499) * C48073 * C48144) *
              C47887 * C47869 * C108 -
          ((C10500 + C10501) * C48073 * C48144 +
           (C10499 + C10498) * C48073 * C4815) *
              C47887 * C47869 * C109 +
          ((C10501 + C10500) * C48073 * C4815 +
           (C10502 + C10503) * C48073 * C48144) *
              C47887 * C47869 * C110 -
          ((C10504 + C10505) * C48073 * C48144 +
           (C10503 + C10502) * C48073 * C4815) *
              C47887 * C47869 * C111 +
          ((C10505 + C10504) * C48073 * C4815 +
           (C10445 * C132 - C10446 * C120 - C10445 * C133 + C10443 * C141 +
            C10447 * C805 - C10448 * C804 - C10447 * C806 + C48177 * C807) *
               C48073 * C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C1116 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C1117 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C1117 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C1116 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C48157) *
              C48180 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C1116 -
           ((C11052 + C11053) * C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C1117 +
           ((C10707 + C10706) * C48073 * C4815 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C48073 * C4815 +
           (C10498 + C10499) * C48073 * C48144) *
              C47887 * C1184 -
          ((C10700 + C10701) * C48073 * C48144 +
           (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
            C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
               C48073 * C4815) *
              C47887 * C1185 +
          ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
            C10447 * C1343 - C10448 * C1329 - C10447 * C1344 + C48177 * C1356) *
               C48073 * C4815 +
           (C10702 + C10703) * C48073 * C48144) *
              C47887 * C1186 -
          ((C10447 * C1753 - C10448 * C1749 - C10447 * C1754 + C48177 * C1758 +
            C10445 * C1198 - C10446 * C1191 - C10445 * C1199 + C10443 * C1209) *
               C48073 * C48144 +
           (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
            C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210) *
               C48073 * C4815) *
              C47887 * C1187 +
          ((C10445 * C1202 - C10446 * C1193 - C10445 * C1203 + C10443 * C1211 +
            C10447 * C6522 - C10448 * C6520 - C10447 * C6523 + C48177 * C6526) *
               C48073 * C4815 +
           (C10445 * C1204 - C10446 * C1194 - C10445 * C1205 + C10443 * C1212 +
            C10447 * C6524 - C10448 * C6521 - C10447 * C6525 + C48177 * C6527) *
               C48073 * C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C1870 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C1871 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C48160) *
              C47869 * C48193 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C1871 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C1870 -
           ((C10908 + C10909) * C48073 * C48144 +
            (C10905 + C10904) * C48073 * C4815) *
               C48160) *
              C47869 * C48180 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C1870 -
           ((C11196 + C11197) * C48073 * C48144 +
            (C10907 + C10906) * C48073 * C4815) *
               C1871 +
           ((C10909 + C10908) * C48073 * C4815 +
            (C10445 * C524 - C10446 * C507 - C10445 * C525 + C10443 * C537 +
             C10447 * C2343 - C10448 * C2342 - C10447 * C2344 +
             C48177 * C2345) *
                C48073 * C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C1870 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C1871 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C48160) *
              C48196 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C1871 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C1870 -
           ((C10447 * C2465 - C10448 * C2461 - C10447 * C2466 + C48177 * C2470 +
             C10445 * C1335 - C10446 * C1325 - C10445 * C1336 +
             C10443 * C1352) *
                C48073 * C48144 +
            (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 + C48177 * C2469 +
             C10445 * C1337 - C10446 * C1326 - C10445 * C1338 +
             C10443 * C1353) *
                C48073 * C4815) *
               C48160) *
              C48184 +
          (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C1870 -
           ((C12144 + C12145) * C48073 * C48144 +
            (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 + C48177 * C1357 +
             C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
             C10443 * C1356) *
                C48073 * C4815) *
               C1871 +
           ((C10445 * C1345 - C10446 * C1330 - C10445 * C1346 + C10443 * C1357 +
             C10447 * C7384 - C10448 * C7382 - C10447 * C7385 +
             C48177 * C7388) *
                C48073 * C4815 +
            (C10445 * C1347 - C10446 * C1331 - C10445 * C1348 + C10443 * C1358 +
             C10447 * C7386 - C10448 * C7383 - C10447 * C7387 +
             C48177 * C7389) *
                C48073 * C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C3332 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C48125 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C3332) *
               C47932) *
              C47846 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C3332) *
               C48125 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C3332 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C47932) *
              C47855 +
          ((((C10501 + C10500) * C48073 * C4815 +
             (C10502 + C10503) * C48073 * C48144) *
                C3332 -
            ((C11196 + C11197) * C48073 * C48144 +
             (C10907 + C10906) * C48073 * C4815) *
                C47974) *
               C48125 +
           (((C11419 + C11418) * C48073 * C4815 +
             (C10445 * C973 - C10446 * C965 - C10445 * C974 + C10443 * C980 +
              C10447 * C2221 - C10448 * C2220 - C10447 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C11052 + C11053) * C48073 * C48144 +
             (C10705 + C10704) * C48073 * C4815) *
                C3332) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C47970 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47977 +
            ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
              C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
              C48177 * C2070) *
                 C48073 * C4815 +
             (C10904 + C10905) * C48073 * C48144) *
                C3840) *
               C48125 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47977 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C47970 -
            ((C12864 + C12865) * C48073 * C48144 +
             (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 +
              C48177 * C2469 + C10445 * C1337 - C10446 * C1326 -
              C10445 * C1338 + C10443 * C1353) *
                 C48073 * C4815) *
                C3840) *
               C47932) *
              C2678 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47977 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C47970 -
            ((C10908 + C10909) * C48073 * C48144 +
             (C10905 + C10904) * C48073 * C4815) *
                C3840) *
               C48125 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C47970 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47977 +
            ((C12865 + C12864) * C48073 * C4815 +
             (C10445 * C1333 - C10446 * C1324 - C10445 * C1334 +
              C10443 * C1351 + C10447 * C2467 - C10448 * C2462 -
              C10447 * C2468 + C48177 * C2471) *
                 C48073 * C48144) *
                C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C3332 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C48196 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C3332) *
               C48184 +
           (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
              C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
              C48177 * C1356) *
                 C48073 * C4815 +
             (C10702 + C10703) * C48073 * C48144) *
                C3332 -
            ((C12144 + C12145) * C48073 * C48144 +
             (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 +
              C48177 * C1357 + C10445 * C1343 - C10446 * C1329 -
              C10445 * C1344 + C10443 * C1356) *
                 C48073 * C4815) *
                C47974) *
               C48157) *
              C2678 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C3332) *
               C48196 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C3332 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C48184 +
           (((C12145 + C12144) * C48073 * C4815 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C10706 + C10707) * C48073 * C48144 +
             (C10703 + C10702) * C48073 * C4815) *
                C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C3332 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C47974) *
              C47869 * C48202 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C47974 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C3332) *
              C47869 * C48195 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C3332 -
           ((C11196 + C11197) * C48073 * C48144 +
            (C10907 + C10906) * C48073 * C4815) *
               C47974) *
              C47869 * C48182 +
          (((C11197 + C11196) * C48073 * C4815 +
            (C10445 * C526 - C10446 * C508 - C10445 * C527 + C10443 * C538 +
             C10447 * C528 - C10448 * C509 - C10447 * C529 + C48177 * C539) *
                C48073 * C48144) *
               C47974 -
           ((C10504 + C10505) * C48073 * C48144 +
            (C10503 + C10502) * C48073 * C4815) *
               C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C48204 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C48201 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C48192 -
           ((C13008 + C13009) * C48073 * C48144 +
            (C10447 * C2062 - C10448 * C2053 - C10447 * C2063 + C48177 * C2071 +
             C10445 * C2060 - C10446 * C2052 - C10445 * C2061 +
             C10443 * C2070) *
                C48073 * C4815) *
               C48173) *
              C47869 * C2678 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C48201 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C48204 -
           ((C10908 + C10909) * C48073 * C48144 +
            (C10905 + C10904) * C48073 * C4815) *
               C48192 +
           ((C13009 + C13008) * C48073 * C4815 +
            (C10445 * C2056 - C10446 * C2050 - C10445 * C2057 + C10443 * C2068 +
             C10447 * C2066 - C10448 * C2055 - C10447 * C2067 +
             C48177 * C2073) *
                C48073 * C48144) *
               C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47970 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C47977 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C3840) *
              C47869 * C47846 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C47977 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47970 -
           ((C10908 + C10909) * C48073 * C48144 +
            (C10905 + C10904) * C48073 * C4815) *
               C3840) *
              C47869 * C47855 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47970 -
           ((C11196 + C11197) * C48073 * C48144 +
            (C10907 + C10906) * C48073 * C4815) *
               C47977 +
           ((C10909 + C10908) * C48073 * C4815 +
            (C10445 * C524 - C10446 * C507 - C10445 * C525 + C10443 * C537 +
             C10447 * C2343 - C10448 * C2342 - C10447 * C2344 +
             C48177 * C2345) *
                C48073 * C48144) *
               C3840) *
              C47869 * C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C3332 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C47974) *
              C47869 * C48202 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C47974 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C3332) *
              C47869 * C48195 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C3332 -
           ((C11196 + C11197) * C48073 * C48144 +
            (C10907 + C10906) * C48073 * C4815) *
               C47974) *
              C47869 * C48182 +
          (((C11197 + C11196) * C48073 * C4815 +
            (C10445 * C526 - C10446 * C508 - C10445 * C527 + C10443 * C538 +
             C10447 * C528 - C10448 * C509 - C10447 * C529 + C48177 * C539) *
                C48073 * C48144) *
               C47974 -
           ((C10504 + C10505) * C48073 * C48144 +
            (C10503 + C10502) * C48073 * C4815) *
               C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C3332 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C48196 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C3332) *
               C48184 +
           (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
              C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
              C48177 * C1356) *
                 C48073 * C4815 +
             (C10702 + C10703) * C48073 * C48144) *
                C3332 -
            ((C12144 + C12145) * C48073 * C48144 +
             (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 +
              C48177 * C1357 + C10445 * C1343 - C10446 * C1329 -
              C10445 * C1344 + C10443 * C1356) *
                 C48073 * C4815) *
                C47974) *
               C48157) *
              C2678 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C3332) *
               C48196 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C3332 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C48184 +
           (((C12145 + C12144) * C48073 * C4815 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C10706 + C10707) * C48073 * C48144 +
             (C10703 + C10702) * C48073 * C4815) *
                C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C48125 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C47932) *
              C688 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C47932 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C48125) *
              C689 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C48125 -
           ((C11052 + C11053) * C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C47932) *
              C690 +
          (((C11053 + C11052) * C48073 * C4815 +
            (C10445 * C325 - C10446 * C307 - C10445 * C326 + C10443 * C337 +
             C10447 * C975 - C10448 * C966 - C10447 * C976 + C48177 * C981) *
                C48073 * C48144) *
               C47887 * C47932 -
           ((C10504 + C10505) * C48073 * C48144 +
            (C10503 + C10502) * C48073 * C4815) *
               C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C1458 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C1459 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C1460 -
           ((C11936 + C11937) * C48073 * C48144 +
            (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
             C10445 * C1200 - C10446 * C1192 - C10445 * C1201 +
             C10443 * C1210) *
                C48073 * C4815) *
               C47887 * C48167) *
              C48111 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C1459 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C1458 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C1460 +
           ((C11937 + C11936) * C48073 * C4815 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48073 * C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C48126 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C48125 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C48126) *
               C47932) *
              C296 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C48126) *
               C48125 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C48126 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C47932) *
              C297 +
          ((((C10501 + C10500) * C48073 * C4815 +
             (C10502 + C10503) * C48073 * C48144) *
                C48126 -
            ((C11196 + C11197) * C48073 * C48144 +
             (C10907 + C10906) * C48073 * C4815) *
                C47974) *
               C48125 +
           (((C11419 + C11418) * C48073 * C4815 +
             (C10445 * C973 - C10446 * C965 - C10445 * C974 + C10443 * C980 +
              C10447 * C2221 - C10448 * C2220 - C10447 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C11052 + C11053) * C48073 * C48144 +
             (C10705 + C10704) * C48073 * C4815) *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C48126 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C47974) *
              C1458 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C47974 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C48126) *
              C1459 +
          (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C48126 -
           ((C12144 + C12145) * C48073 * C48144 +
            (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 + C48177 * C1357 +
             C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
             C10443 * C1356) *
                C48073 * C4815) *
               C47974) *
              C1460 +
          (((C10445 * C1751 - C10446 * C1748 - C10445 * C1752 + C10443 * C1757 +
             C10447 * C6021 - C10448 * C6019 - C10447 * C6022 +
             C48177 * C6025) *
                C48073 * C4815 +
            (C10445 * C1753 - C10446 * C1749 - C10445 * C1754 + C10443 * C1758 +
             C10447 * C6023 - C10448 * C6020 - C10447 * C6024 +
             C48177 * C6026) *
                C48073 * C48144) *
               C47974 -
           ((C11936 + C11937) * C48073 * C48144 +
            (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
             C10445 * C1200 - C10446 * C1192 - C10445 * C1201 +
             C10443 * C1210) *
                C48073 * C4815) *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C48196 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C48184 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C48157) *
              C296 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C48184 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C48196 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C48157) *
              C297 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C48196 -
           ((C10447 * C973 - C10448 * C965 - C10447 * C974 + C48177 * C980 +
             C10445 * C321 - C10446 * C305 - C10445 * C322 + C10443 * C335) *
                C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C48184 +
           ((C10707 + C10706) * C48073 * C4815 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C48073 * C4815 +
           (C10498 + C10499) * C48073 * C48144) *
              C47887 * C47869 * C108 -
          ((C10500 + C10501) * C48073 * C48144 +
           (C10499 + C10498) * C48073 * C4815) *
              C47887 * C47869 * C109 +
          ((C10501 + C10500) * C48073 * C4815 +
           (C10502 + C10503) * C48073 * C48144) *
              C47887 * C47869 * C110 -
          ((C10504 + C10505) * C48073 * C48144 +
           (C10503 + C10502) * C48073 * C4815) *
              C47887 * C47869 * C111 +
          ((C10505 + C10504) * C48073 * C4815 +
           (C10445 * C132 - C10446 * C120 - C10445 * C133 + C10443 * C141 +
            C10447 * C805 - C10448 * C804 - C10447 * C806 + C48177 * C807) *
               C48073 * C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C48197 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C48186 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C48160) *
              C47869 * C296 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C48186 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C48197 -
           ((C10908 + C10909) * C48073 * C48144 +
            (C10905 + C10904) * C48073 * C4815) *
               C48160) *
              C47869 * C297 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C48197 -
           ((C10447 * C524 - C10448 * C507 - C10447 * C525 + C48177 * C537 +
             C10445 * C522 - C10446 * C506 - C10445 * C523 + C10443 * C536) *
                C48073 * C48144 +
            (C10907 + C10906) * C48073 * C4815) *
               C48186 +
           ((C10909 + C10908) * C48073 * C4815 +
            (C10445 * C524 - C10446 * C507 - C10445 * C525 + C10443 * C537 +
             C10447 * C2343 - C10448 * C2342 - C10447 * C2344 +
             C48177 * C2345) *
                C48073 * C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C1116 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C1117 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C1117 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C1116 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C48157) *
              C48180 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C1116 -
           ((C11052 + C11053) * C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C1117 +
           ((C10707 + C10706) * C48073 * C4815 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C48073 * C4815 +
           (C10498 + C10499) * C48073 * C48144) *
              C47887 * C1184 -
          ((C10700 + C10701) * C48073 * C48144 +
           (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
            C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
               C48073 * C4815) *
              C47887 * C1185 +
          ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
            C10447 * C1343 - C10448 * C1329 - C10447 * C1344 + C48177 * C1356) *
               C48073 * C4815 +
           (C10702 + C10703) * C48073 * C48144) *
              C47887 * C1186 -
          ((C10447 * C1753 - C10448 * C1749 - C10447 * C1754 + C48177 * C1758 +
            C10445 * C1198 - C10446 * C1191 - C10445 * C1199 + C10443 * C1209) *
               C48073 * C48144 +
           (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
            C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210) *
               C48073 * C4815) *
              C47887 * C1187 +
          ((C10445 * C1202 - C10446 * C1193 - C10445 * C1203 + C10443 * C1211 +
            C10447 * C6522 - C10448 * C6520 - C10447 * C6523 + C48177 * C6526) *
               C48073 * C4815 +
           (C10445 * C1204 - C10446 * C1194 - C10445 * C1205 + C10443 * C1212 +
            C10447 * C6524 - C10448 * C6521 - C10447 * C6525 + C48177 * C6527) *
               C48073 * C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C48197 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C48186 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C48073 * C4815 +
            (C10904 + C10905) * C48073 * C48144) *
               C48160) *
              C1116 +
          (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
             C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
             C48177 * C1353) *
                C48073 * C4815 +
            (C11416 + C11417) * C48073 * C48144) *
               C48186 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C48197 -
           ((C10447 * C2465 - C10448 * C2461 - C10447 * C2466 + C48177 * C2470 +
             C10445 * C1335 - C10446 * C1325 - C10445 * C1336 +
             C10443 * C1352) *
                C48073 * C48144 +
            (C10447 * C2463 - C10448 * C2460 - C10447 * C2464 + C48177 * C2469 +
             C10445 * C1337 - C10446 * C1326 - C10445 * C1338 +
             C10443 * C1353) *
                C48073 * C4815) *
               C48160) *
              C1117 +
          (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C48197 -
           ((C10447 * C1347 - C10448 * C1331 - C10447 * C1348 + C48177 * C1358 +
             C10445 * C1341 - C10446 * C1328 - C10445 * C1342 +
             C10443 * C1355) *
                C48073 * C48144 +
            (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 + C48177 * C1357 +
             C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
             C10443 * C1356) *
                C48073 * C4815) *
               C48186 +
           ((C10445 * C1345 - C10446 * C1330 - C10445 * C1346 + C10443 * C1357 +
             C10447 * C7384 - C10448 * C7382 - C10447 * C7385 +
             C48177 * C7388) *
                C48073 * C4815 +
            (C10445 * C1347 - C10446 * C1331 - C10445 * C1348 + C10443 * C1358 +
             C10447 * C7386 - C10448 * C7383 - C10447 * C7387 +
             C48177 * C7389) *
                C48073 * C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C48126 -
           ((C10902 + C10903) * C48073 * C48144 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C48073 * C4815) *
               C47974) *
              C47869 * C688 +
          (((C10903 + C10902) * C48073 * C4815 +
            (C10906 + C10907) * C48073 * C48144) *
               C47974 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C48126) *
              C47869 * C689 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C48126 -
           ((C11196 + C11197) * C48073 * C48144 +
            (C10907 + C10906) * C48073 * C4815) *
               C47974) *
              C47869 * C690 +
          (((C11197 + C11196) * C48073 * C4815 +
            (C10445 * C526 - C10446 * C508 - C10445 * C527 + C10443 * C538 +
             C10447 * C528 - C10448 * C509 - C10447 * C529 + C48177 * C539) *
                C48073 * C48144) *
               C47974 -
           ((C10504 + C10505) * C48073 * C48144 +
            (C10503 + C10502) * C48073 * C4815) *
               C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C48073 * C4815 +
             (C10498 + C10499) * C48073 * C48144) *
                C48126 -
            ((C10902 + C10903) * C48073 * C48144 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C48073 * C4815) *
                C47974) *
               C1116 +
           (((C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977 +
              C10447 * C1337 - C10448 * C1326 - C10447 * C1338 +
              C48177 * C1353) *
                 C48073 * C4815 +
             (C11416 + C11417) * C48073 * C48144) *
                C47974 -
            ((C10700 + C10701) * C48073 * C48144 +
             (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
              C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                 C48073 * C4815) *
                C48126) *
               C1117 +
           (((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
              C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
              C48177 * C1356) *
                 C48073 * C4815 +
             (C10702 + C10703) * C48073 * C48144) *
                C48126 -
            ((C12144 + C12145) * C48073 * C48144 +
             (C10447 * C1345 - C10448 * C1330 - C10447 * C1346 +
              C48177 * C1357 + C10445 * C1343 - C10446 * C1329 -
              C10445 * C1344 + C10443 * C1356) *
                 C48073 * C4815) *
                C47974) *
               C48157) *
              C48111 +
          ((((C10903 + C10902) * C48073 * C4815 +
             (C10906 + C10907) * C48073 * C48144) *
                C47974 -
            ((C10500 + C10501) * C48073 * C48144 +
             (C10499 + C10498) * C48073 * C4815) *
                C48126) *
               C1116 +
           (((C10701 + C10700) * C48073 * C4815 +
             (C10704 + C10705) * C48073 * C48144) *
                C48126 -
            ((C11418 + C11419) * C48073 * C48144 +
             (C11417 + C11416) * C48073 * C4815) *
                C47974) *
               C1117 +
           (((C12145 + C12144) * C48073 * C4815 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C10706 + C10707) * C48073 * C48144 +
             (C10703 + C10702) * C48073 * C4815) *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C48073 * C4815 +
           (C10498 + C10499) * C48073 * C48144) *
              C47887 * C47869 * C108 -
          ((C10500 + C10501) * C48073 * C48144 +
           (C10499 + C10498) * C48073 * C4815) *
              C47887 * C47869 * C109 +
          ((C10501 + C10500) * C48073 * C4815 +
           (C10502 + C10503) * C48073 * C48144) *
              C47887 * C47869 * C110 -
          ((C10504 + C10505) * C48073 * C48144 +
           (C10503 + C10502) * C48073 * C4815) *
              C47887 * C47869 * C111 +
          ((C10505 + C10504) * C48073 * C4815 +
           (C10445 * C132 - C10446 * C120 - C10445 * C133 + C10443 * C141 +
            C10447 * C805 - C10448 * C804 - C10447 * C806 + C48177 * C807) *
               C48073 * C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C48196 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C48184 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C48157) *
              C296 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C48184 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C48196 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C48157) *
              C297 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C48196 -
           ((C10447 * C973 - C10448 * C965 - C10447 * C974 + C48177 * C980 +
             C10445 * C321 - C10446 * C305 - C10445 * C322 + C10443 * C335) *
                C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C48184 +
           ((C10707 + C10706) * C48073 * C4815 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C48073 * C4815 +
            (C10498 + C10499) * C48073 * C48144) *
               C47887 * C1116 -
           ((C10700 + C10701) * C48073 * C48144 +
            (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
             C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
                C48073 * C4815) *
               C47887 * C1117 +
           ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
             C10447 * C1343 - C10448 * C1329 - C10447 * C1344 +
             C48177 * C1356) *
                C48073 * C4815 +
            (C10702 + C10703) * C48073 * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C10701 + C10700) * C48073 * C4815 +
            (C10704 + C10705) * C48073 * C48144) *
               C47887 * C1117 -
           ((C10500 + C10501) * C48073 * C48144 +
            (C10499 + C10498) * C48073 * C4815) *
               C47887 * C1116 -
           ((C10706 + C10707) * C48073 * C48144 +
            (C10703 + C10702) * C48073 * C4815) *
               C47887 * C48157) *
              C48180 +
          (((C10501 + C10500) * C48073 * C4815 +
            (C10502 + C10503) * C48073 * C48144) *
               C47887 * C1116 -
           ((C11052 + C11053) * C48073 * C48144 +
            (C10705 + C10704) * C48073 * C4815) *
               C47887 * C1117 +
           ((C10707 + C10706) * C48073 * C4815 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C48073 * C4815 +
           (C10498 + C10499) * C48073 * C48144) *
              C47887 * C1184 -
          ((C10700 + C10701) * C48073 * C48144 +
           (C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977 +
            C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331) *
               C48073 * C4815) *
              C47887 * C1185 +
          ((C10445 * C315 - C10446 * C302 - C10445 * C316 + C10443 * C332 +
            C10447 * C1343 - C10448 * C1329 - C10447 * C1344 + C48177 * C1356) *
               C48073 * C4815 +
           (C10702 + C10703) * C48073 * C48144) *
              C47887 * C1186 -
          ((C10447 * C1753 - C10448 * C1749 - C10447 * C1754 + C48177 * C1758 +
            C10445 * C1198 - C10446 * C1191 - C10445 * C1199 + C10443 * C1209) *
               C48073 * C48144 +
           (C10447 * C1751 - C10448 * C1748 - C10447 * C1752 + C48177 * C1757 +
            C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210) *
               C48073 * C4815) *
              C47887 * C1187 +
          ((C10445 * C1202 - C10446 * C1193 - C10445 * C1203 + C10443 * C1211 +
            C10447 * C6522 - C10448 * C6520 - C10447 * C6523 + C48177 * C6526) *
               C48073 * C4815 +
           (C10445 * C1204 - C10446 * C1194 - C10445 * C1205 + C10443 * C1212 +
            C10447 * C6524 - C10448 * C6521 - C10447 * C6525 + C48177 * C6527) *
               C48073 * C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                         C16185 +
                     C4992 * C48175) *
                        C16187 +
                    (C16190 + C16191) * C48144) *
                       C47887 * C47928 -
                   ((C16344 + C16345) * C48144 +
                    (C4993 * C48175 + C4992 * C16185) * C16187) *
                       C47887 * C47935 +
                   ((C4993 * C16185 + C5871 * C48175) * C16187 +
                    (C16346 + C16347) * C48144) *
                       C47887 * C2938) *
                      C47846 +
                  (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) *
                       C47887 * C47935 -
                   ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                       C47887 * C47928 -
                   ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) *
                       C47887 * C2938) *
                      C47855 +
                  (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) *
                       C47887 * C47928 -
                   ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) *
                       C47887 * C47935 +
                   ((C16351 + C16350) * C16187 +
                    (C381 * C16185 + (C113 * C1465 - C114 * C1464 -
                                      C113 * C1466 + C48090 * C1467) *
                                         C48175) *
                        C48144) *
                       C47887 * C2938) *
                      C2941)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C48126 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C47928 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C48126) *
               C47935 +
           (((C4993 * C16185 + C5871 * C48175) * C16187 +
             (C16346 + C16347) * C48144) *
                C48126 -
            ((C17668 + C17669) * C48144 +
             (C6535 * C48175 + C6053 * C16185) * C16187) *
                C47974) *
               C2938) *
              C2678 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                C48126) *
               C47928 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C48126 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C47935 +
           (((C17669 + C17668) * C16187 +
             (C1647 * C16185 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) *
                C48126) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C48203 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C48199 +
           ((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C47887 * C48189 -
           ((C17472 + C17473) * C48144 +
            (C5873 * C48175 + C5871 * C16185) * C16187) *
               C47887 * C48167) *
              C2678 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C48199 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C48203 -
           ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C47887 *
               C48189 +
           ((C17473 + C17472) * C16187 +
            (C1481 * C16185 +
             (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                 C48175) *
                C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C2570 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C47932) *
              C48202 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C47932 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C2570) *
              C48195 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
               C2570 -
           ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) * C47887 *
               C47932) *
              C48182 +
          (((C16637 + C16636) * C16187 +
            (C703 * C16185 +
             (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                 C48175) *
                C48144) *
               C47887 * C47932 -
           ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) * C47887 *
               C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C48197 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C48186 +
            (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                  C16185 +
              C6052 * C48175) *
                 C16187 +
             (C16500 + C16501) * C48144) *
                C48160) *
               C2570 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C48186 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C48197 -
            ((C18368 + C18369) * C48144 +
             (C6055 * C48175 + C6052 * C16185) * C16187) *
                C48160) *
               C47932) *
              C2678 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C48186 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C48197 -
            ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) *
                C48160) *
               C2570 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C48197 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) * C48186 +
            ((C18369 + C18368) * C16187 +
             (C2237 * C16185 +
              (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                  C48175) *
                 C48144) *
                C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C48126 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C2570 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C48126) *
               C47932) *
              C47846 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                C48126) *
               C2570 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C48126 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C47932) *
              C47855 +
          ((((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C48126 -
            ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) *
                C47974) *
               C2570 +
           (((C16967 + C16966) * C16187 +
             (C1003 * C16185 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) *
                C48126) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                         C16185 +
                     C4992 * C48175) *
                        C16187 +
                    (C16190 + C16191) * C48144) *
                       C47887 * C2570 -
                   ((C16344 + C16345) * C48144 +
                    (C4993 * C48175 + C4992 * C16185) * C16187) *
                       C47887 * C47932) *
                      C48202 +
                  (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) *
                       C47887 * C47932 -
                   ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                       C47887 * C2570) *
                      C48195 +
                  (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) *
                       C47887 * C2570 -
                   ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) *
                       C47887 * C47932) *
                      C48182 +
                  (((C16637 + C16636) * C16187 +
                    (C703 * C16185 +
                     (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                         C48175) *
                        C48144) *
                       C47887 * C47932 -
                   ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) *
                       C47887 * C2570) *
                      C48161)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                         C16185 +
                     C4992 * C48175) *
                        C16187 +
                    (C16190 + C16191) * C48144) *
                       C47887 * C48203 -
                   ((C16344 + C16345) * C48144 +
                    (C4993 * C48175 + C4992 * C16185) * C16187) *
                       C47887 * C48199 +
                   ((C4993 * C16185 + C5871 * C48175) * C16187 +
                    (C16346 + C16347) * C48144) *
                       C47887 * C48189 -
                   ((C17472 + C17473) * C48144 +
                    (C5873 * C48175 + C5871 * C16185) * C16187) *
                       C47887 * C48167) *
                      C2678 +
                  (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) *
                       C47887 * C48199 -
                   ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                       C47887 * C48203 -
                   ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) *
                       C47887 * C48189 +
                   ((C17473 + C17472) * C16187 +
                    (C1481 * C16185 + (C113 * C1206 - C114 * C1195 -
                                       C113 * C1207 + C48090 * C1213) *
                                          C48175) *
                        C48144) *
                       C47887 * C48167) *
                      C47852)) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C3332 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C47928 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C3332) *
               C47935 +
           (((C4993 * C16185 + C5871 * C48175) * C16187 +
             (C16346 + C16347) * C48144) *
                C3332 -
            ((C17668 + C17669) * C48144 +
             (C6535 * C48175 + C6053 * C16185) * C16187) *
                C47974) *
               C2938) *
              C48111 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C3332) *
               C47928 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C3332 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C47935 +
           (((C17669 + C17668) * C16187 +
             (C1647 * C16185 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C3332) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47970 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C47977 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C3840) *
              C47928 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C47977 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47970 -
           ((C18368 + C18369) * C48144 +
            (C6055 * C48175 + C6052 * C16185) * C16187) *
               C3840) *
              C47935 +
          (((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C47970 -
           ((C17668 + C17669) * C48144 +
            (C6535 * C48175 + C6053 * C16185) * C16187) *
               C47977 +
           ((C6055 * C16185 +
             (C113 * C6021 - C114 * C6019 - C113 * C6022 + C48090 * C6025) *
                 C48175) *
                C16187 +
            (C6054 * C16185 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C48175) *
                C48144) *
               C3840) *
              C2938) *
         C47841) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C3332 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C47974) *
              C48203 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C47974 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C3332) *
              C48199 +
          (((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C3332 -
           ((C17668 + C17669) * C48144 +
            (C6535 * C48175 + C6053 * C16185) * C16187) *
               C47974) *
              C48189 +
          (((C6535 * C16185 +
             (C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                 C48175) *
                C16187 +
            (C6389 * C16185 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C48175) *
                C48144) *
               C47974 -
           ((C17472 + C17473) * C48144 +
            (C5873 * C48175 + C5871 * C16185) * C16187) *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C3332 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C2570 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C3332) *
               C47932) *
              C48193 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C3332) *
               C2570 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C3332 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C47932) *
              C48180 +
          ((((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C3332 -
            ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) *
                C47974) *
               C2570 +
           (((C16967 + C16966) * C16187 +
             (C1003 * C16185 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) * C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C48204 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C48201 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C48192 -
           ((C18500 + C18501) * C48144 +
            (C7397 * C48175 +
             (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                 C16185) *
                C16187) *
               C48173) *
              C2570 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C48201 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C48204 -
           ((C18368 + C18369) * C48144 +
            (C6055 * C48175 + C6052 * C16185) * C16187) *
               C48192 +
           ((C7397 * C16185 +
             (C113 * C7384 - C114 * C7382 - C113 * C7385 + C48090 * C7388) *
                 C48175) *
                C16187 +
            (C7251 * C16185 +
             (C113 * C7386 - C114 * C7383 - C113 * C7387 + C48090 * C7389) *
                 C48175) *
                C48144) *
               C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C47970 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47977 +
            (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                  C16185 +
              C6052 * C48175) *
                 C16187 +
             (C16500 + C16501) * C48144) *
                C3840) *
               C2570 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47977 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C47970 -
            ((C18368 + C18369) * C48144 +
             (C6055 * C48175 + C6052 * C16185) * C16187) *
                C3840) *
               C47932) *
              C48111 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47977 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47970 -
            ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) * C3840) *
               C2570 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47970 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) * C47977 +
            ((C18369 + C18368) * C16187 +
             (C2237 * C16185 +
              (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                  C48175) *
                 C48144) *
                C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C3332 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C2570 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C3332) *
               C47932) *
              C48193 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C3332) *
               C2570 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C3332 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C47932) *
              C48180 +
          ((((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C3332 -
            ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) *
                C47974) *
               C2570 +
           (((C16967 + C16966) * C16187 +
             (C1003 * C16185 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) * C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C3332 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C47974) *
              C48203 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C47974 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C3332) *
              C48199 +
          (((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C3332 -
           ((C17668 + C17669) * C48144 +
            (C6535 * C48175 + C6053 * C16185) * C16187) *
               C47974) *
              C48189 +
          (((C6535 * C16185 +
             (C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                 C48175) *
                C16187 +
            (C6389 * C16185 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C48175) *
                C48144) *
               C47974 -
           ((C17472 + C17473) * C48144 +
            (C5873 * C48175 + C5871 * C16185) * C16187) *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C1458 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C1459 +
           ((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C47887 * C1460 -
           ((C17472 + C17473) * C48144 +
            (C5873 * C48175 + C5871 * C16185) * C16187) *
               C47887 * C48167) *
              C48111 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C1459 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C1458 -
           ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C47887 *
               C1460 +
           ((C17473 + C17472) * C16187 +
            (C1481 * C16185 +
             (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                 C48175) *
                C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C48125 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C47932) *
              C688 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C47932 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C48125) *
              C689 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
               C48125 -
           ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) * C47887 *
               C47932) *
              C690 +
          (((C16637 + C16636) * C16187 +
            (C703 * C16185 +
             (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                 C48175) *
                C48144) *
               C47887 * C47932 -
           ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) * C47887 *
               C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C1870 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C1871 +
            (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                  C16185 +
              C6052 * C48175) *
                 C16187 +
             (C16500 + C16501) * C48144) *
                C48160) *
               C48125 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C1871 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C1870 -
            ((C18368 + C18369) * C48144 +
             (C6055 * C48175 + C6052 * C16185) * C16187) *
                C48160) *
               C47932) *
              C48111 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C1871 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C1870 -
            ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) *
                C48160) *
               C48125 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C1870 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) * C1871 +
            ((C18369 + C18368) * C16187 +
             (C2237 * C16185 +
              (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                  C48175) *
                 C48144) *
                C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C48126 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C47974) *
              C1458 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C47974 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C48126) *
              C1459 +
          (((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C48126 -
           ((C17668 + C17669) * C48144 +
            (C6535 * C48175 + C6053 * C16185) * C16187) *
               C47974) *
              C1460 +
          (((C6535 * C16185 +
             (C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                 C48175) *
                C16187 +
            (C6389 * C16185 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C48175) *
                C48144) *
               C47974 -
           ((C17472 + C17473) * C48144 +
            (C5873 * C48175 + C5871 * C16185) * C16187) *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C48126 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C48125 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C48126) *
               C47932) *
              C296 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                C48126) *
               C48125 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C48126 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C47932) *
              C297 +
          ((((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C48126 -
            ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) *
                C47974) *
               C48125 +
           (((C16967 + C16966) * C16187 +
             (C1003 * C16185 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C2338 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C2339 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C2340 -
           ((C18500 + C18501) * C48144 +
            (C7397 * C48175 +
             (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                 C16185) *
                C16187) *
               C48173) *
              C48125 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C2339 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C2338 -
           ((C18368 + C18369) * C48144 +
            (C6055 * C48175 + C6052 * C16185) * C16187) *
               C2340 +
           ((C7397 * C16185 +
             (C113 * C7384 - C114 * C7382 - C113 * C7385 + C48090 * C7388) *
                 C48175) *
                C16187 +
            (C7251 * C16185 +
             (C113 * C7386 - C114 * C7383 - C113 * C7387 + C48090 * C7389) *
                 C48175) *
                C48144) *
               C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                    C16185 +
                C4992 * C48175) *
                   C16187 +
               (C16190 + C16191) * C48144) *
                  C47887 * C47869 * C108 -
              ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                  C47887 * C47869 * C109 +
              ((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) *
                  C47887 * C47869 * C110 -
              ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) *
                  C47887 * C47869 * C111 +
              ((C16197 + C16196) * C16187 +
               (C178 * C16185 +
                (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) *
                    C48175) *
                   C48144) *
                  C47887 * C47869 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                     C16185 +
                 C4992 * C48175) *
                    C16187 +
                (C16190 + C16191) * C48144) *
                   C47887 * C48196 -
               ((C16344 + C16345) * C48144 +
                (C4993 * C48175 + C4992 * C16185) * C16187) *
                   C47887 * C48184 +
               ((C4993 * C16185 + C5871 * C48175) * C16187 +
                (C16346 + C16347) * C48144) *
                   C47887 * C48157) *
                  C296 +
              (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) *
                   C47887 * C48184 -
               ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                   C47887 * C48196 -
               ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) *
                   C47887 * C48157) *
                  C297 +
              (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) *
                   C47887 * C48196 -
               ((C381 * C48175 + C380 * C16185) * C48144 +
                (C16349 + C16348) * C16187) *
                   C47887 * C48184 +
               ((C16351 + C16350) * C16187 +
                (C381 * C16185 +
                 (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                     C48175) *
                    C48144) *
                   C47887 * C48157) *
                  C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C48197 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C48186 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C48160) *
              C47869 * C296 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C48186 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C48197 -
           ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) * C48160) *
              C47869 * C297 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C48197 -
           ((C1003 * C48175 + C581 * C16185) * C48144 +
            (C16503 + C16502) * C16187) *
               C48186 +
           ((C16505 + C16504) * C16187 +
            (C582 * C16185 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48175) *
                C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C1116 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C1117 +
           ((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C1117 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C1116 -
           ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C47887 *
               C48157) *
              C48180 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
               C1116 -
           ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) * C47887 *
               C1117 +
           ((C16351 + C16350) * C16187 +
            (C381 * C16185 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C16185 +
            C4992 * C48175) *
               C16187 +
           (C16190 + C16191) * C48144) *
              C47887 * C1184 -
          ((C16344 + C16345) * C48144 +
           (C4993 * C48175 + C4992 * C16185) * C16187) *
              C47887 * C1185 +
          ((C4993 * C16185 + C5871 * C48175) * C16187 +
           (C16346 + C16347) * C48144) *
              C47887 * C1186 -
          ((C5872 * C48175 + C1482 * C16185) * C48144 +
           (C5873 * C48175 + C5871 * C16185) * C16187) *
              C47887 * C1187 +
          ((C5873 * C16185 +
            (C113 * C5846 - C114 * C5844 - C113 * C5847 + C48090 * C5850) *
                C48175) *
               C16187 +
           (C5872 * C16185 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C48175) *
               C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C48197 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C48186 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C48160) *
              C1116 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C48186 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C48197 -
           ((C6054 * C48175 + C2238 * C16185) * C48144 +
            (C6055 * C48175 + C6052 * C16185) * C16187) *
               C48160) *
              C1117 +
          (((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C48197 -
           ((C6389 * C48175 + C1648 * C16185) * C48144 +
            (C6535 * C48175 + C6053 * C16185) * C16187) *
               C48186 +
           ((C6055 * C16185 +
             (C113 * C6021 - C114 * C6019 - C113 * C6022 + C48090 * C6025) *
                 C48175) *
                C16187 +
            (C6054 * C16185 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C48175) *
                C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C1870 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C1871 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C48160) *
              C47869 * C48193 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C1871 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C1870 -
           ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) * C48160) *
              C47869 * C48180 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C1870 -
           ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) * C1871 +
           ((C16505 + C16504) * C16187 +
            (C582 * C16185 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48175) *
                C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C1870 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C1871 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C48160) *
              C48196 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C1871 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C1870 -
           ((C6054 * C48175 + C2238 * C16185) * C48144 +
            (C6055 * C48175 + C6052 * C16185) * C16187) *
               C48160) *
              C48184 +
          (((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C1870 -
           ((C17668 + C17669) * C48144 +
            (C6535 * C48175 + C6053 * C16185) * C16187) *
               C1871 +
           ((C6055 * C16185 +
             (C113 * C6021 - C114 * C6019 - C113 * C6022 + C48090 * C6025) *
                 C48175) *
                C16187 +
            (C6054 * C16185 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C48175) *
                C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C16185 +
            C4992 * C48175) *
               C16187 +
           (C16190 + C16191) * C48144) *
              C2045 -
          ((C16498 + C16499) * C48144 +
           (C5616 * C48175 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C16185) *
               C16187) *
              C2046 +
          (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C16185 +
            C6052 * C48175) *
               C16187 +
           (C16500 + C16501) * C48144) *
              C2047 -
          ((C7251 * C48175 + C2360 * C16185) * C48144 +
           (C7397 * C48175 +
            (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                C16185) *
               C16187) *
              C2048 +
          (((C113 * C2062 - C114 * C2053 - C113 * C2063 + C48090 * C2071) *
                C16185 +
            (C113 * C6911 - C114 * C6909 - C113 * C6912 + C48090 * C6915) *
                C48175) *
               C16187 +
           ((C113 * C2064 - C114 * C2054 - C113 * C2065 + C48090 * C2072) *
                C16185 +
            (C113 * C6913 - C114 * C6910 - C113 * C6914 + C48090 * C6916) *
                C48175) *
               C48144) *
              C2049) *
         C47869 * C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C48126 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C1116 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C48126) *
               C1117 +
           (((C4993 * C16185 + C5871 * C48175) * C16187 +
             (C16346 + C16347) * C48144) *
                C48126 -
            ((C17668 + C17669) * C48144 +
             (C6535 * C48175 + C6053 * C16185) * C16187) *
                C47974) *
               C48157) *
              C48111 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                C48126) *
               C1116 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C48126 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C1117 +
           (((C17669 + C17668) * C16187 +
             (C1647 * C16185 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C48126 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C47974) *
              C47869 * C688 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C48126) *
              C47869 * C689 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C48126 -
           ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) * C47974) *
              C47869 * C690 +
          (((C16769 + C16768) * C16187 +
            (C815 * C16185 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48175) *
                C48144) *
               C47974 -
           ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) * C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C2338 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C2339 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C2340 -
           ((C18500 + C18501) * C48144 +
            (C7397 * C48175 +
             (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                 C16185) *
                C16187) *
               C48173) *
              C47869 * C48111 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C2339 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C2338 -
           ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) * C2340 +
           ((C18501 + C18500) * C16187 +
            (C2359 * C16185 +
             (C113 * C2467 - C114 * C2462 - C113 * C2468 + C48090 * C2471) *
                 C48175) *
                C48144) *
               C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C48196 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C48184 +
           ((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C47887 * C48157) *
              C296 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C48184 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C48196 -
           ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C47887 *
               C48157) *
              C297 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
               C48196 -
           ((C381 * C48175 + C380 * C16185) * C48144 +
            (C16349 + C16348) * C16187) *
               C47887 * C48184 +
           ((C16351 + C16350) * C16187 +
            (C381 * C16185 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C16185 +
            C4992 * C48175) *
               C16187 +
           (C16190 + C16191) * C48144) *
              C47887 * C47869 * C108 -
          ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
              C47869 * C109 +
          ((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
              C47869 * C110 -
          ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) * C47887 *
              C47869 * C111 +
          ((C16197 + C16196) * C16187 +
           (C178 * C16185 +
            (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) *
                C48175) *
               C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C1116 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C1117 +
           ((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C1117 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C1116 -
           ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C47887 *
               C48157) *
              C48180 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
               C1116 -
           ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) * C47887 *
               C1117 +
           ((C16351 + C16350) * C16187 +
            (C381 * C16185 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C16185 +
            C4992 * C48175) *
               C16187 +
           (C16190 + C16191) * C48144) *
              C47887 * C1184 -
          ((C16344 + C16345) * C48144 +
           (C4993 * C48175 + C4992 * C16185) * C16187) *
              C47887 * C1185 +
          ((C4993 * C16185 + C5871 * C48175) * C16187 +
           (C16346 + C16347) * C48144) *
              C47887 * C1186 -
          ((C5872 * C48175 + C1482 * C16185) * C48144 +
           (C5873 * C48175 + C5871 * C16185) * C16187) *
              C47887 * C1187 +
          ((C5873 * C16185 +
            (C113 * C5846 - C114 * C5844 - C113 * C5847 + C48090 * C5850) *
                C48175) *
               C16187 +
           (C5872 * C16185 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C48175) *
               C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C1870 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C1871 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C48160) *
              C47869 * C48193 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C1871 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C1870 -
           ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) * C48160) *
              C47869 * C48180 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C1870 -
           ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) * C1871 +
           ((C16505 + C16504) * C16187 +
            (C582 * C16185 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48175) *
                C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C1870 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C1871 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C48160) *
              C48196 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C1871 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C1870 -
           ((C6054 * C48175 + C2238 * C16185) * C48144 +
            (C6055 * C48175 + C6052 * C16185) * C16187) *
               C48160) *
              C48184 +
          (((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C1870 -
           ((C17668 + C17669) * C48144 +
            (C6535 * C48175 + C6053 * C16185) * C16187) *
               C1871 +
           ((C6055 * C16185 +
             (C113 * C6021 - C114 * C6019 - C113 * C6022 + C48090 * C6025) *
                 C48175) *
                C16187 +
            (C6054 * C16185 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C48175) *
                C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C3332 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C48125 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C3332) *
               C47932) *
              C47846 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C3332) *
               C48125 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C3332 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C47932) *
              C47855 +
          ((((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C3332 -
            ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) *
                C47974) *
               C48125 +
           (((C16967 + C16966) * C16187 +
             (C1003 * C16185 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) * C3332) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C47970 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47977 +
            (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                  C16185 +
              C6052 * C48175) *
                 C16187 +
             (C16500 + C16501) * C48144) *
                C3840) *
               C48125 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47977 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C47970 -
            ((C18368 + C18369) * C48144 +
             (C6055 * C48175 + C6052 * C16185) * C16187) *
                C3840) *
               C47932) *
              C2678 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47977 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47970 -
            ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) * C3840) *
               C48125 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47970 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) * C47977 +
            ((C18369 + C18368) * C16187 +
             (C2237 * C16185 +
              (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                  C48175) *
                 C48144) *
                C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C3332 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C48196 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C3332) *
               C48184 +
           (((C4993 * C16185 + C5871 * C48175) * C16187 +
             (C16346 + C16347) * C48144) *
                C3332 -
            ((C17668 + C17669) * C48144 +
             (C6535 * C48175 + C6053 * C16185) * C16187) *
                C47974) *
               C48157) *
              C2678 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C3332) *
               C48196 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C3332 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C48184 +
           (((C17669 + C17668) * C16187 +
             (C1647 * C16185 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C3332 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C47974) *
              C47869 * C48202 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C3332) *
              C47869 * C48195 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C3332 -
           ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) * C47974) *
              C47869 * C48182 +
          (((C16769 + C16768) * C16187 +
            (C815 * C16185 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48175) *
                C48144) *
               C47974 -
           ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) * C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C48204 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C48201 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C48192 -
           ((C18500 + C18501) * C48144 +
            (C7397 * C48175 +
             (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                 C16185) *
                C16187) *
               C48173) *
              C47869 * C2678 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C48201 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C48204 -
           ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) * C48192 +
           ((C18501 + C18500) * C16187 +
            (C2359 * C16185 +
             (C113 * C2467 - C114 * C2462 - C113 * C2468 + C48090 * C2471) *
                 C48175) *
                C48144) *
               C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47970 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C47977 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C3840) *
              C47869 * C47846 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47977 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47970 -
           ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) * C3840) *
              C47869 * C47855 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47970 -
           ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) * C47977 +
           ((C16505 + C16504) * C16187 +
            (C582 * C16185 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48175) *
                C48144) *
               C3840) *
              C47869 * C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C3332 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C47974) *
              C47869 * C48202 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C3332) *
              C47869 * C48195 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C3332 -
           ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) * C47974) *
              C47869 * C48182 +
          (((C16769 + C16768) * C16187 +
            (C815 * C16185 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48175) *
                C48144) *
               C47974 -
           ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) * C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C3332 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C48196 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C3332) *
               C48184 +
           (((C4993 * C16185 + C5871 * C48175) * C16187 +
             (C16346 + C16347) * C48144) *
                C3332 -
            ((C17668 + C17669) * C48144 +
             (C6535 * C48175 + C6053 * C16185) * C16187) *
                C47974) *
               C48157) *
              C2678 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C3332) *
               C48196 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C3332 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C48184 +
           (((C17669 + C17668) * C16187 +
             (C1647 * C16185 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                         C16185 +
                     C4992 * C48175) *
                        C16187 +
                    (C16190 + C16191) * C48144) *
                       C47887 * C48125 -
                   ((C16344 + C16345) * C48144 +
                    (C4993 * C48175 + C4992 * C16185) * C16187) *
                       C47887 * C47932) *
                      C688 +
                  (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) *
                       C47887 * C47932 -
                   ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                       C47887 * C48125) *
                      C689 +
                  (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) *
                       C47887 * C48125 -
                   ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) *
                       C47887 * C47932) *
                      C690 +
                  (((C16637 + C16636) * C16187 +
                    (C703 * C16185 +
                     (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                         C48175) *
                        C48144) *
                       C47887 * C47932 -
                   ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) *
                       C47887 * C48125) *
                      C48161)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                         C16185 +
                     C4992 * C48175) *
                        C16187 +
                    (C16190 + C16191) * C48144) *
                       C47887 * C1458 -
                   ((C16344 + C16345) * C48144 +
                    (C4993 * C48175 + C4992 * C16185) * C16187) *
                       C47887 * C1459 +
                   ((C4993 * C16185 + C5871 * C48175) * C16187 +
                    (C16346 + C16347) * C48144) *
                       C47887 * C1460 -
                   ((C17472 + C17473) * C48144 +
                    (C5873 * C48175 + C5871 * C16185) * C16187) *
                       C47887 * C48167) *
                      C48111 +
                  (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) *
                       C47887 * C1459 -
                   ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                       C47887 * C1458 -
                   ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) *
                       C47887 * C1460 +
                   ((C17473 + C17472) * C16187 +
                    (C1481 * C16185 + (C113 * C1206 - C114 * C1195 -
                                       C113 * C1207 + C48090 * C1213) *
                                          C48175) *
                        C48144) *
                       C47887 * C48167) *
                      C47852)) /
                    (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C48126 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C48125 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C48126) *
               C47932) *
              C296 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                C48126) *
               C48125 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C48126 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C47932) *
              C297 +
          ((((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C48126 -
            ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) *
                C47974) *
               C48125 +
           (((C16967 + C16966) * C16187 +
             (C1003 * C16185 +
              (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C48126 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C47974) *
              C1458 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C47974 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C48126) *
              C1459 +
          (((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C48126 -
           ((C17668 + C17669) * C48144 +
            (C6535 * C48175 + C6053 * C16185) * C16187) *
               C47974) *
              C1460 +
          (((C6535 * C16185 +
             (C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                 C48175) *
                C16187 +
            (C6389 * C16185 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C48175) *
                C48144) *
               C47974 -
           ((C17472 + C17473) * C48144 +
            (C5873 * C48175 + C5871 * C16185) * C16187) *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C48196 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C48184 +
           ((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C47887 * C48157) *
              C296 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C48184 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C48196 -
           ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C47887 *
               C48157) *
              C297 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
               C48196 -
           ((C381 * C48175 + C380 * C16185) * C48144 +
            (C16349 + C16348) * C16187) *
               C47887 * C48184 +
           ((C16351 + C16350) * C16187 +
            (C381 * C16185 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C16185 +
            C4992 * C48175) *
               C16187 +
           (C16190 + C16191) * C48144) *
              C47887 * C47869 * C108 -
          ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
              C47869 * C109 +
          ((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
              C47869 * C110 -
          ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) * C47887 *
              C47869 * C111 +
          ((C16197 + C16196) * C16187 +
           (C178 * C16185 +
            (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) *
                C48175) *
               C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C48197 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C48186 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C48160) *
              C47869 * C296 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C48186 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C48197 -
           ((C16504 + C16505) * C48144 + (C16501 + C16500) * C16187) * C48160) *
              C47869 * C297 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C48197 -
           ((C1003 * C48175 + C581 * C16185) * C48144 +
            (C16503 + C16502) * C16187) *
               C48186 +
           ((C16505 + C16504) * C16187 +
            (C582 * C16185 +
             (C113 * C2221 - C114 * C2220 - C113 * C2222 + C48090 * C2223) *
                 C48175) *
                C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C1116 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C1117 +
           ((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C1117 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C1116 -
           ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C47887 *
               C48157) *
              C48180 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
               C1116 -
           ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) * C47887 *
               C1117 +
           ((C16351 + C16350) * C16187 +
            (C381 * C16185 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C16185 +
            C4992 * C48175) *
               C16187 +
           (C16190 + C16191) * C48144) *
              C47887 * C1184 -
          ((C16344 + C16345) * C48144 +
           (C4993 * C48175 + C4992 * C16185) * C16187) *
              C47887 * C1185 +
          ((C4993 * C16185 + C5871 * C48175) * C16187 +
           (C16346 + C16347) * C48144) *
              C47887 * C1186 -
          ((C5872 * C48175 + C1482 * C16185) * C48144 +
           (C5873 * C48175 + C5871 * C16185) * C16187) *
              C47887 * C1187 +
          ((C5873 * C16185 +
            (C113 * C5846 - C114 * C5844 - C113 * C5847 + C48090 * C5850) *
                C48175) *
               C16187 +
           (C5872 * C16185 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C48175) *
               C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C48197 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C48186 +
           (((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C16185 +
             C6052 * C48175) *
                C16187 +
            (C16500 + C16501) * C48144) *
               C48160) *
              C1116 +
          (((C5616 * C16185 + C6053 * C48175) * C16187 +
            (C16964 + C16965) * C48144) *
               C48186 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C48197 -
           ((C6054 * C48175 + C2238 * C16185) * C48144 +
            (C6055 * C48175 + C6052 * C16185) * C16187) *
               C48160) *
              C1117 +
          (((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C48197 -
           ((C6389 * C48175 + C1648 * C16185) * C48144 +
            (C6535 * C48175 + C6053 * C16185) * C16187) *
               C48186 +
           ((C6055 * C16185 +
             (C113 * C6021 - C114 * C6019 - C113 * C6022 + C48090 * C6025) *
                 C48175) *
                C16187 +
            (C6054 * C16185 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C48175) *
                C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C48126 -
           ((C16498 + C16499) * C48144 +
            (C5616 * C48175 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C16185) *
                C16187) *
               C47974) *
              C47869 * C688 +
          (((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C48126) *
              C47869 * C689 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C48126 -
           ((C16768 + C16769) * C48144 + (C16503 + C16502) * C16187) * C47974) *
              C47869 * C690 +
          (((C16769 + C16768) * C16187 +
            (C815 * C16185 +
             (C113 * C975 - C114 * C966 - C113 * C976 + C48090 * C981) *
                 C48175) *
                C48144) *
               C47974 -
           ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) * C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                  C16185 +
              C4992 * C48175) *
                 C16187 +
             (C16190 + C16191) * C48144) *
                C48126 -
            ((C16498 + C16499) * C48144 +
             (C5616 * C48175 +
              (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                  C16185) *
                 C16187) *
                C47974) *
               C1116 +
           (((C5616 * C16185 + C6053 * C48175) * C16187 +
             (C16964 + C16965) * C48144) *
                C47974 -
            ((C16344 + C16345) * C48144 +
             (C4993 * C48175 + C4992 * C16185) * C16187) *
                C48126) *
               C1117 +
           (((C4993 * C16185 + C5871 * C48175) * C16187 +
             (C16346 + C16347) * C48144) *
                C48126 -
            ((C17668 + C17669) * C48144 +
             (C6535 * C48175 + C6053 * C16185) * C16187) *
                C47974) *
               C48157) *
              C48111 +
          ((((C16499 + C16498) * C16187 + (C16502 + C16503) * C48144) * C47974 -
            ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) *
                C48126) *
               C1116 +
           (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C48126 -
            ((C16966 + C16967) * C48144 + (C16965 + C16964) * C16187) *
                C47974) *
               C1117 +
           (((C17669 + C17668) * C16187 +
             (C1647 * C16185 +
              (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                  C48175) *
                 C48144) *
                C47974 -
            ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C16185 +
            C4992 * C48175) *
               C16187 +
           (C16190 + C16191) * C48144) *
              C47887 * C47869 * C108 -
          ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
              C47869 * C109 +
          ((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
              C47869 * C110 -
          ((C16196 + C16197) * C48144 + (C16195 + C16194) * C16187) * C47887 *
              C47869 * C111 +
          ((C16197 + C16196) * C16187 +
           (C178 * C16185 +
            (C113 * C693 - C114 * C692 - C113 * C694 + C48090 * C695) *
                C48175) *
               C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C48196 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C48184 +
           ((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C47887 * C48157) *
              C296 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C48184 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C48196 -
           ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C47887 *
               C48157) *
              C297 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
               C48196 -
           ((C381 * C48175 + C380 * C16185) * C48144 +
            (C16349 + C16348) * C16187) *
               C47887 * C48184 +
           ((C16351 + C16350) * C16187 +
            (C381 * C16185 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C16185 +
             C4992 * C48175) *
                C16187 +
            (C16190 + C16191) * C48144) *
               C47887 * C1116 -
           ((C16344 + C16345) * C48144 +
            (C4993 * C48175 + C4992 * C16185) * C16187) *
               C47887 * C1117 +
           ((C4993 * C16185 + C5871 * C48175) * C16187 +
            (C16346 + C16347) * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C16345 + C16344) * C16187 + (C16348 + C16349) * C48144) * C47887 *
               C1117 -
           ((C16192 + C16193) * C48144 + (C16191 + C16190) * C16187) * C47887 *
               C1116 -
           ((C16350 + C16351) * C48144 + (C16347 + C16346) * C16187) * C47887 *
               C48157) *
              C48180 +
          (((C16193 + C16192) * C16187 + (C16194 + C16195) * C48144) * C47887 *
               C1116 -
           ((C16636 + C16637) * C48144 + (C16349 + C16348) * C16187) * C47887 *
               C1117 +
           ((C16351 + C16350) * C16187 +
            (C381 * C16185 +
             (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                 C48175) *
                C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C16185 +
            C4992 * C48175) *
               C16187 +
           (C16190 + C16191) * C48144) *
              C47887 * C1184 -
          ((C16344 + C16345) * C48144 +
           (C4993 * C48175 + C4992 * C16185) * C16187) *
              C47887 * C1185 +
          ((C4993 * C16185 + C5871 * C48175) * C16187 +
           (C16346 + C16347) * C48144) *
              C47887 * C1186 -
          ((C5872 * C48175 + C1482 * C16185) * C48144 +
           (C5873 * C48175 + C5871 * C16185) * C16187) *
              C47887 * C1187 +
          ((C5873 * C16185 +
            (C113 * C5846 - C114 * C5844 - C113 * C5847 + C48090 * C5850) *
                C48175) *
               C16187 +
           (C5872 * C16185 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C48175) *
               C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C47928 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C47935 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C2938) *
              C47846 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C47935 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C47928 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C2938) *
              C47855 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C47928 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C47935 +
           (C379 * C21657 + C1481 * C21658 +
            (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                C21659) *
               C47818 * C47887 * C2938) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C48126 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C47928 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C48126) *
               C47935 +
           ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
                C48126 -
            (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
                C47974) *
               C2938) *
              C2678 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48126) *
               C47928 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C48126 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C47935 +
           ((C1648 * C21657 + C6389 * C21658 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C21659) *
                C47818 * C47974 -
            (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 *
                C48126) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C48203 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C48199 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C48189 -
           (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
               C47887 * C48167) *
              C2678 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C48199 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C48203 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C48189 +
           (C1482 * C21657 + C5872 * C21658 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C21659) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C2570 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C47932) *
              C48202 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C47932 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C2570) *
              C48195 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C2570 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C47932) *
              C48182 +
          ((C380 * C21657 + C381 * C21658 +
            (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                C21659) *
               C47818 * C47887 * C47932 -
           (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C47887 *
               C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C48197 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C48186 +
            ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C21657 +
             C6052 * C21658 + C6055 * C21659) *
                C47818 * C48160) *
               C2570 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C48186 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C48197 -
            (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
                C48160) *
               C47932) *
              C2678 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C48186 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48197 -
            (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 *
                C48160) *
               C2570 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C48197 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C48186 +
            (C2238 * C21657 + C6054 * C21658 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C21659) *
                C47818 * C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C48126 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C2570 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C48126) *
               C47932) *
              C47846 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48126) *
               C2570 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C48126 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C47932) *
              C47855 +
          (((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C48126 -
            (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 *
                C47974) *
               C2570 +
           ((C1002 * C21657 + C1647 * C21658 +
             (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                 C21659) *
                C47818 * C47974 -
            (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 *
                C48126) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C2570 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C47932) *
              C48202 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C47932 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C2570) *
              C48195 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C2570 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C47932) *
              C48182 +
          ((C380 * C21657 + C381 * C21658 +
            (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                C21659) *
               C47818 * C47887 * C47932 -
           (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C47887 *
               C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C48203 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C48199 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C48189 -
           (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
               C47887 * C48167) *
              C2678 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C48199 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C48203 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C48189 +
           (C1482 * C21657 + C5872 * C21658 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C21659) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C3332 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C47928 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C3332) *
               C47935 +
           ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
                C3332 -
            (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
                C47974) *
               C2938) *
              C48111 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C3332) *
               C47928 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C3332 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C47935 +
           ((C1648 * C21657 + C6389 * C21658 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C21659) *
                C47818 * C47974 -
            (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 *
                C3332) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47970 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C47977 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C3840) *
              C47928 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
               C47977 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47970 -
           (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
               C3840) *
              C47935 +
          ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47970 -
           (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
               C47977 +
           (C6055 * C21657 + C22527 * C21658 +
            (C113 * C22517 - C114 * C22516 - C113 * C22518 + C48090 * C22519) *
                C21659) *
               C47818 * C3840) *
              C2938) *
         C47841) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C3332 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C47974) *
              C48203 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
               C47974 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C3332) *
              C48199 +
          ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 * C3332 -
           (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
               C47974) *
              C48189 +
          ((C6535 * C21657 + C22880 * C21658 +
            (C113 * C22870 - C114 * C22869 - C113 * C22871 + C48090 * C22872) *
                C21659) *
               C47818 * C47974 -
           (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C3332 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C2570 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C3332) *
               C47932) *
              C48193 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C3332) *
               C2570 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C3332 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C47932) *
              C48180 +
          (((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C3332 -
            (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 *
                C47974) *
               C2570 +
           ((C1002 * C21657 + C1647 * C21658 +
             (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                 C21659) *
                C47818 * C47974 -
            (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C48204 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C48201 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C48192 -
           (C23519 * C21659 + C7397 * C21658 +
            (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                C21657) *
               C47818 * C48173) *
              C2570 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
               C48201 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C48204 -
           (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
               C48192 +
           (C7397 * C21657 + C23519 * C21658 +
            (C113 * C23509 - C114 * C23508 - C113 * C23510 + C48090 * C23511) *
                C21659) *
               C47818 * C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C47970 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47977 +
            ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C21657 +
             C6052 * C21658 + C6055 * C21659) *
                C47818 * C3840) *
               C2570 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47977 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C47970 -
            (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
                C3840) *
               C47932) *
              C48111 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47977 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47970 -
            (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 *
                C3840) *
               C2570 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47970 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47977 +
            (C2238 * C21657 + C6054 * C21658 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C21659) *
                C47818 * C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C3332 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C2570 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C3332) *
               C47932) *
              C48193 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C3332) *
               C2570 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C3332 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C47932) *
              C48180 +
          (((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C3332 -
            (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 *
                C47974) *
               C2570 +
           ((C1002 * C21657 + C1647 * C21658 +
             (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                 C21659) *
                C47818 * C47974 -
            (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C3332 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C47974) *
              C48203 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
               C47974 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C3332) *
              C48199 +
          ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 * C3332 -
           (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
               C47974) *
              C48189 +
          ((C6535 * C21657 + C22880 * C21658 +
            (C113 * C22870 - C114 * C22869 - C113 * C22871 + C48090 * C22872) *
                C21659) *
               C47818 * C47974 -
           (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C1458 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C1459 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C1460 -
           (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
               C47887 * C48167) *
              C48111 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C1459 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C1458 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C1460 +
           (C1482 * C21657 + C5872 * C21658 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C21659) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C48125 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C47932) *
              C688 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C47932 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C48125) *
              C689 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C48125 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C47932) *
              C690 +
          ((C380 * C21657 + C381 * C21658 +
            (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                C21659) *
               C47818 * C47887 * C47932 -
           (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C47887 *
               C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C1870 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C1871 +
            ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C21657 +
             C6052 * C21658 + C6055 * C21659) *
                C47818 * C48160) *
               C48125 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C1871 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C1870 -
            (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
                C48160) *
               C47932) *
              C48111 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C1871 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C1870 -
            (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 *
                C48160) *
               C48125 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C1870 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C1871 +
            (C2238 * C21657 + C6054 * C21658 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C21659) *
                C47818 * C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C48126 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C47974) *
              C1458 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
               C47974 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C48126) *
              C1459 +
          ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C48126 -
           (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
               C47974) *
              C1460 +
          ((C6535 * C21657 + C22880 * C21658 +
            (C113 * C22870 - C114 * C22869 - C113 * C22871 + C48090 * C22872) *
                C21659) *
               C47818 * C47974 -
           (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C48126 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C48125 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C48126) *
               C47932) *
              C296 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48126) *
               C48125 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C48126 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C47932) *
              C297 +
          (((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C48126 -
            (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 *
                C47974) *
               C48125 +
           ((C1002 * C21657 + C1647 * C21658 +
             (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                 C21659) *
                C47818 * C47974 -
            (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C2338 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C2339 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C2340 -
           (C23519 * C21659 + C7397 * C21658 +
            (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                C21657) *
               C47818 * C48173) *
              C48125 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 * C2339 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 * C2338 -
           (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
               C2340 +
           (C7397 * C21657 + C23519 * C21658 +
            (C113 * C23509 - C114 * C23508 - C113 * C23510 + C48090 * C23511) *
                C21659) *
               C47818 * C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                   C21657 +
               C4992 * C21658 + C4993 * C21659) *
                  C47818 * C47887 * C47869 * C108 -
              (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 *
                  C47887 * C47869 * C109 +
              (C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 *
                  C47887 * C47869 * C110 -
              (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 *
                  C47887 * C47869 * C111 +
              (C177 * C21657 + C703 * C21658 +
               (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) *
                   C21659) *
                  C47818 * C47887 * C47869 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                    C21657 +
                C4992 * C21658 + C4993 * C21659) *
                   C47818 * C47887 * C48196 -
               (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                   C47887 * C48184 +
               (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
                   C47887 * C48157) *
                  C296 +
              ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 *
                   C47887 * C48184 -
               (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 *
                   C47887 * C48196 -
               (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 *
                   C47887 * C48157) *
                  C297 +
              ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 *
                   C47887 * C48196 -
               (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 *
                   C47887 * C48184 +
               (C379 * C21657 + C1481 * C21658 +
                (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                    C21659) *
                   C47818 * C47887 * C48157) *
                  C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C48197 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C48186 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C48160) *
              C47869 * C296 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C48186 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48197 -
           (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 *
               C48160) *
              C47869 * C297 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C48197 -
           (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 * C48186 +
           (C580 * C21657 + C2237 * C21658 +
            (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                C21659) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C1116 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C1117 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C48157) *
              C48193 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C1117 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C1116 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C48157) *
              C48180 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C1116 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C1117 +
           (C379 * C21657 + C1481 * C21658 +
            (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                C21659) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
           C4992 * C21658 + C4993 * C21659) *
              C47818 * C47887 * C1184 -
          (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 * C47887 *
              C1185 +
          (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 * C47887 *
              C1186 -
          (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
              C47887 * C1187 +
          (C5873 * C21657 + C22406 * C21658 +
           (C113 * C22396 - C114 * C22395 - C113 * C22397 + C48090 * C22398) *
               C21659) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C48197 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C48186 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C48160) *
              C1116 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
               C48186 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C48197 -
           (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
               C48160) *
              C1117 +
          ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C48197 -
           ((C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                C21659 +
            C6535 * C21658 + C6053 * C21657) *
               C47818 * C48186 +
           (C6055 * C21657 + C22527 * C21658 +
            (C113 * C22517 - C114 * C22516 - C113 * C22518 + C48090 * C22519) *
                C21659) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C1870 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C1871 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C48160) *
              C47869 * C48193 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C1871 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C1870 -
           (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 *
               C48160) *
              C47869 * C48180 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C1870 -
           (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 * C1871 +
           (C580 * C21657 + C2237 * C21658 +
            (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                C21659) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C1870 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C1871 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C48160) *
              C48196 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 * C1871 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 * C1870 -
           (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
               C48160) *
              C48184 +
          ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 * C1870 -
           (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
               C1871 +
           (C6055 * C21657 + C22527 * C21658 +
            (C113 * C22517 - C114 * C22516 - C113 * C22518 + C48090 * C22519) *
                C21659) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
           C4992 * C21658 + C4993 * C21659) *
              C47818 * C2045 -
          (C6053 * C21659 + C5616 * C21658 +
           (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) * C21657) *
              C47818 * C2046 +
          ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
           C6052 * C21658 + C6055 * C21659) *
              C47818 * C2047 -
          ((C113 * C7384 - C114 * C7382 - C113 * C7385 + C48090 * C7388) *
               C21659 +
           C7397 * C21658 +
           (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
               C21657) *
              C47818 * C2048 +
          ((C113 * C2062 - C114 * C2053 - C113 * C2063 + C48090 * C2071) *
               C21657 +
           (C113 * C6911 - C114 * C6909 - C113 * C6912 + C48090 * C6915) *
               C21658 +
           (C113 * C23163 - C114 * C23162 - C113 * C23164 + C48090 * C23165) *
               C21659) *
              C47818 * C2049) *
         C47869 * C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C48126 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C1116 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C48126) *
               C1117 +
           ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
                C48126 -
            ((C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                 C21659 +
             C6535 * C21658 + C6053 * C21657) *
                C47818 * C47974) *
               C48157) *
              C48111 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48126) *
               C1116 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C48126 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C1117 +
           ((C1648 * C21657 + C6389 * C21658 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C21659) *
                C47818 * C47974 -
            (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C48126 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C47974) *
              C47869 * C688 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C47974 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48126) *
              C47869 * C689 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C48126 -
           (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 *
               C47974) *
              C47869 * C690 +
          ((C581 * C21657 + C1003 * C21658 +
            (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                C21659) *
               C47818 * C47974 -
           (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C2338 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C2339 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C2340 -
           ((C113 * C7384 - C114 * C7382 - C113 * C7385 + C48090 * C7388) *
                C21659 +
            C7397 * C21658 +
            (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                C21657) *
               C47818 * C48173) *
              C47869 * C48111 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C2339 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C2338 -
           (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 * C2340 +
           (C2360 * C21657 + C7251 * C21658 +
            (C113 * C7386 - C114 * C7383 - C113 * C7387 + C48090 * C7389) *
                C21659) *
               C47818 * C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C48196 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C48184 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C48157) *
              C296 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C48184 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C48196 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C48157) *
              C297 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C48196 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C48184 +
           (C379 * C21657 + C1481 * C21658 +
            (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                C21659) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
           C4992 * C21658 + C4993 * C21659) *
              C47818 * C47887 * C47869 * C108 -
          (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
              C47869 * C109 +
          (C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
              C47869 * C110 -
          (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C47887 *
              C47869 * C111 +
          (C177 * C21657 + C703 * C21658 +
           (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) * C21659) *
              C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C1116 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C1117 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C48157) *
              C48193 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C1117 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C1116 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C48157) *
              C48180 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C1116 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C1117 +
           (C379 * C21657 + C1481 * C21658 +
            (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                C21659) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
           C4992 * C21658 + C4993 * C21659) *
              C47818 * C47887 * C1184 -
          (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 * C47887 *
              C1185 +
          (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 * C47887 *
              C1186 -
          (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
              C47887 * C1187 +
          (C5873 * C21657 + C22406 * C21658 +
           (C113 * C22396 - C114 * C22395 - C113 * C22397 + C48090 * C22398) *
               C21659) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C1870 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C1871 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C48160) *
              C47869 * C48193 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C1871 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C1870 -
           (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 *
               C48160) *
              C47869 * C48180 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C1870 -
           (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 * C1871 +
           (C580 * C21657 + C2237 * C21658 +
            (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                C21659) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C1870 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C1871 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C48160) *
              C48196 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 * C1871 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 * C1870 -
           (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
               C48160) *
              C48184 +
          ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 * C1870 -
           (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
               C1871 +
           (C6055 * C21657 + C22527 * C21658 +
            (C113 * C22517 - C114 * C22516 - C113 * C22518 + C48090 * C22519) *
                C21659) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C3332 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C48125 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C3332) *
               C47932) *
              C47846 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C3332) *
               C48125 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C3332 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C47932) *
              C47855 +
          (((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C3332 -
            (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 *
                C47974) *
               C48125 +
           ((C1002 * C21657 + C1647 * C21658 +
             (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                 C21659) *
                C47818 * C47974 -
            (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C3332) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C47970 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47977 +
            ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) *
                 C21657 +
             C6052 * C21658 + C6055 * C21659) *
                C47818 * C3840) *
               C48125 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47977 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C47970 -
            (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
                C3840) *
               C47932) *
              C2678 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47977 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47970 -
            (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 *
                C3840) *
               C48125 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47970 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47977 +
            (C2238 * C21657 + C6054 * C21658 +
             (C113 * C6023 - C114 * C6020 - C113 * C6024 + C48090 * C6026) *
                 C21659) *
                C47818 * C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C3332 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C48196 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C3332) *
               C48184 +
           ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
                C3332 -
            (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
                C47974) *
               C48157) *
              C2678 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C3332) *
               C48196 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C3332 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C48184 +
           ((C1648 * C21657 + C6389 * C21658 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C21659) *
                C47818 * C47974 -
            (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 *
                C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C3332 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C47974) *
              C47869 * C48202 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C47974 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C3332) *
              C47869 * C48195 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C3332 -
           (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 *
               C47974) *
              C47869 * C48182 +
          ((C581 * C21657 + C1003 * C21658 +
            (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                C21659) *
               C47818 * C47974 -
           (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C48204 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C48201 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C48192 -
           (C23519 * C21659 + C7397 * C21658 +
            (C113 * C2060 - C114 * C2052 - C113 * C2061 + C48090 * C2070) *
                C21657) *
               C47818 * C48173) *
              C47869 * C2678 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C48201 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48204 -
           (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 * C48192 +
           (C2360 * C21657 + C7251 * C21658 +
            (C113 * C7386 - C114 * C7383 - C113 * C7387 + C48090 * C7389) *
                C21659) *
               C47818 * C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47970 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C47977 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C3840) *
              C47869 * C47846 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C47977 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47970 -
           (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 * C3840) *
              C47869 * C47855 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47970 -
           (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 * C47977 +
           (C580 * C21657 + C2237 * C21658 +
            (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                C21659) *
               C47818 * C3840) *
              C47869 * C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C3332 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C47974) *
              C47869 * C48202 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C47974 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C3332) *
              C47869 * C48195 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C3332 -
           (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 *
               C47974) *
              C47869 * C48182 +
          ((C581 * C21657 + C1003 * C21658 +
            (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                C21659) *
               C47818 * C47974 -
           (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C3332 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C48196 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C3332) *
               C48184 +
           ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
                C3332 -
            (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
                C47974) *
               C48157) *
              C2678 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C3332) *
               C48196 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C3332 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C48184 +
           ((C1648 * C21657 + C6389 * C21658 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C21659) *
                C47818 * C47974 -
            (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 *
                C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C48125 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C47932) *
              C688 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C47932 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C48125) *
              C689 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C48125 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C47932) *
              C690 +
          ((C380 * C21657 + C381 * C21658 +
            (C113 * C1465 - C114 * C1464 - C113 * C1466 + C48090 * C1467) *
                C21659) *
               C47818 * C47887 * C47932 -
           (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C47887 *
               C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C1458 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C1459 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C1460 -
           (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
               C47887 * C48167) *
              C48111 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C1459 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C1458 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C1460 +
           (C1482 * C21657 + C5872 * C21658 +
            (C113 * C5848 - C114 * C5845 - C113 * C5849 + C48090 * C5851) *
                C21659) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C48126 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C48125 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C48126) *
               C47932) *
              C296 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48126) *
               C48125 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C48126 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C47932) *
              C297 +
          (((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C48126 -
            (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 *
                C47974) *
               C48125 +
           ((C1002 * C21657 + C1647 * C21658 +
             (C113 * C1755 - C114 * C1750 - C113 * C1756 + C48090 * C1759) *
                 C21659) *
                C47818 * C47974 -
            (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C48126 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C47974) *
              C1458 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
               C47974 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C48126) *
              C1459 +
          ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C48126 -
           (C22880 * C21659 + C6535 * C21658 + C6053 * C21657) * C47818 *
               C47974) *
              C1460 +
          ((C6535 * C21657 + C22880 * C21658 +
            (C113 * C22870 - C114 * C22869 - C113 * C22871 + C48090 * C22872) *
                C21659) *
               C47818 * C47974 -
           (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C48196 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C48184 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C48157) *
              C296 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C48184 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C48196 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C48157) *
              C297 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C48196 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C48184 +
           (C379 * C21657 + C1481 * C21658 +
            (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                C21659) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
           C4992 * C21658 + C4993 * C21659) *
              C47818 * C47887 * C47869 * C108 -
          (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
              C47869 * C109 +
          (C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
              C47869 * C110 -
          (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C47887 *
              C47869 * C111 +
          (C177 * C21657 + C703 * C21658 +
           (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) * C21659) *
              C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C48197 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C48186 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C48160) *
              C47869 * C296 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C48186 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48197 -
           (C6054 * C21659 + C2238 * C21658 + C579 * C21657) * C47818 *
               C48160) *
              C47869 * C297 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C48197 -
           (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 * C48186 +
           (C580 * C21657 + C2237 * C21658 +
            (C113 * C1349 - C114 * C1332 - C113 * C1350 + C48090 * C1359) *
                C21659) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C1116 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C1117 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C48157) *
              C48193 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C1117 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C1116 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C48157) *
              C48180 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C1116 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C1117 +
           (C379 * C21657 + C1481 * C21658 +
            (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                C21659) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
           C4992 * C21658 + C4993 * C21659) *
              C47818 * C47887 * C1184 -
          (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 * C47887 *
              C1185 +
          (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 * C47887 *
              C1186 -
          (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
              C47887 * C1187 +
          (C5873 * C21657 + C22406 * C21658 +
           (C113 * C22396 - C114 * C22395 - C113 * C22397 + C48090 * C22398) *
               C21659) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C48197 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C48186 +
           ((C113 * C516 - C114 * C503 - C113 * C517 + C48090 * C533) * C21657 +
            C6052 * C21658 + C6055 * C21659) *
               C47818 * C48160) *
              C1116 +
          ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
               C48186 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C48197 -
           (C22527 * C21659 + C6055 * C21658 + C6052 * C21657) * C47818 *
               C48160) *
              C1117 +
          ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C48197 -
           ((C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                C21659 +
            C6535 * C21658 + C6053 * C21657) *
               C47818 * C48186 +
           (C6055 * C21657 + C22527 * C21658 +
            (C113 * C22517 - C114 * C22516 - C113 * C22518 + C48090 * C22519) *
                C21659) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C48126 -
           (C6053 * C21659 + C5616 * C21658 +
            (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                C21657) *
               C47818 * C47974) *
              C47869 * C688 +
          ((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 * C47974 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48126) *
              C47869 * C689 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C48126 -
           (C1647 * C21659 + C1002 * C21658 + C577 * C21657) * C47818 *
               C47974) *
              C47869 * C690 +
          ((C581 * C21657 + C1003 * C21658 +
            (C113 * C1631 - C114 * C1630 - C113 * C1632 + C48090 * C1633) *
                C21659) *
               C47818 * C47974 -
           (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) *
                 C21657 +
             C4992 * C21658 + C4993 * C21659) *
                C47818 * C48126 -
            (C6053 * C21659 + C5616 * C21658 +
             (C113 * C514 - C114 * C502 - C113 * C515 + C48090 * C532) *
                 C21657) *
                C47818 * C47974) *
               C1116 +
           ((C5616 * C21657 + C6053 * C21658 + C6535 * C21659) * C47818 *
                C47974 -
            (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
                C48126) *
               C1117 +
           ((C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
                C48126 -
            ((C113 * C6522 - C114 * C6520 - C113 * C6523 + C48090 * C6526) *
                 C21659 +
             C6535 * C21658 + C6053 * C21657) *
                C47818 * C47974) *
               C48157) *
              C48111 +
          (((C578 * C21657 + C1001 * C21658 + C1648 * C21659) * C47818 *
                C47974 -
            (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C48126) *
               C1116 +
           ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C48126 -
            (C6389 * C21659 + C1648 * C21658 + C1001 * C21657) * C47818 *
                C47974) *
               C1117 +
           ((C1648 * C21657 + C6389 * C21658 +
             (C113 * C6524 - C114 * C6521 - C113 * C6525 + C48090 * C6527) *
                 C21659) *
                C47818 * C47974 -
            (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
           C4992 * C21658 + C4993 * C21659) *
              C47818 * C47887 * C47869 * C108 -
          (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
              C47869 * C109 +
          (C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
              C47869 * C110 -
          (C381 * C21659 + C380 * C21658 + C176 * C21657) * C47818 * C47887 *
              C47869 * C111 +
          (C177 * C21657 + C703 * C21658 +
           (C113 * C327 - C114 * C308 - C113 * C328 + C48090 * C338) * C21659) *
              C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C48196 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C48184 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C48157) *
              C296 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C48184 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C48196 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C48157) *
              C297 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C48196 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C48184 +
           (C379 * C21657 + C1481 * C21658 +
            (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                C21659) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
            C4992 * C21658 + C4993 * C21659) *
               C47818 * C47887 * C1116 -
           (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 *
               C47887 * C1117 +
           (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 *
               C47887 * C48157) *
              C48193 +
          ((C377 * C21657 + C378 * C21658 + C1482 * C21659) * C47818 * C47887 *
               C1117 -
           (C378 * C21659 + C377 * C21658 + C174 * C21657) * C47818 * C47887 *
               C1116 -
           (C5872 * C21659 + C1482 * C21658 + C378 * C21657) * C47818 * C47887 *
               C48157) *
              C48180 +
          ((C175 * C21657 + C376 * C21658 + C379 * C21659) * C47818 * C47887 *
               C1116 -
           (C1481 * C21659 + C379 * C21658 + C376 * C21657) * C47818 * C47887 *
               C1117 +
           (C379 * C21657 + C1481 * C21658 +
            (C113 * C1206 - C114 * C1195 - C113 * C1207 + C48090 * C1213) *
                C21659) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C48090 * C136) * C21657 +
           C4992 * C21658 + C4993 * C21659) *
              C47818 * C47887 * C1184 -
          (C5871 * C21659 + C4993 * C21658 + C4992 * C21657) * C47818 * C47887 *
              C1185 +
          (C4993 * C21657 + C5871 * C21658 + C5873 * C21659) * C47818 * C47887 *
              C1186 -
          (C22406 * C21659 + C5873 * C21658 + C5871 * C21657) * C47818 *
              C47887 * C1187 +
          (C5873 * C21657 + C22406 * C21658 +
           (C113 * C22396 - C114 * C22395 - C113 * C22397 + C48090 * C22398) *
               C21659) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C47928 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C47935 +
           ((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C47887 * C2938) *
              C47846 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C47935 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C47928 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C2938) *
              C47855 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C47928 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C47935 +
           ((C10707 + C10706) * C16185 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C2938) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C48126 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C47928 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C48126) *
               C47935 +
           (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
                C48126 -
            ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
                C47974) *
               C2938) *
              C2678 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C48126) *
               C47928 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C48126 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C47935 +
           (((C12145 + C12144) * C16185 +
             (C10445 * C1753 - C10446 * C1749 - C10445 * C1754 +
              C10443 * C1758 + C10447 * C6023 - C10448 * C6020 -
              C10447 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
                C48126) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C48203 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C48199 +
           ((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C47887 * C48189 -
           ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
               C47887 * C48167) *
              C2678 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C48199 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C48203 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C48189 +
           ((C11937 + C11936) * C16185 +
            (C10445 * C1204 - C10446 * C1194 - C10445 * C1205 + C10443 * C1212 +
             C10447 * C6524 - C10448 * C6521 - C10447 * C6525 +
             C48177 * C6527) *
                C48175) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C2570 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C47932) *
              C48202 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C47932 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C2570) *
              C48195 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C2570 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C47932) *
              C48182 +
          (((C11053 + C11052) * C16185 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48175) *
               C47818 * C47887 * C47932 -
           ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
               C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C48197 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C48186 +
            ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
              C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
              C48177 * C2070) *
                 C16185 +
             (C27060 + C27061) * C48175) *
                C47818 * C48160) *
               C2570 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C48186 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C48197 -
            ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
                C48160) *
               C47932) *
              C2678 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C48186 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C48197 -
            ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
                C48160) *
               C2570 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C48197 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C48186 +
            ((C12865 + C12864) * C16185 +
             (C10445 * C1347 - C10446 * C1331 - C10445 * C1348 +
              C10443 * C1358 + C10447 * C7386 - C10448 * C7383 -
              C10447 * C7387 + C48177 * C7389) *
                 C48175) *
                C47818 * C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C48126 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C2570 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C48126) *
               C47932) *
              C47846 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C48126) *
               C2570 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C48126 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C47932) *
              C47855 +
          ((((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
                C48126 -
            ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
                C47974) *
               C2570 +
           (((C11419 + C11418) * C16185 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
                C48126) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C2570 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C47932) *
              C48202 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C47932 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C2570) *
              C48195 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C2570 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C47932) *
              C48182 +
          (((C11053 + C11052) * C16185 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48175) *
               C47818 * C47887 * C47932 -
           ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
               C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C48203 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C48199 +
           ((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C47887 * C48189 -
           ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
               C47887 * C48167) *
              C2678 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C48199 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C48203 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C48189 +
           ((C11937 + C11936) * C16185 +
            (C10445 * C1204 - C10446 * C1194 - C10445 * C1205 + C10443 * C1212 +
             C10447 * C6524 - C10448 * C6521 - C10447 * C6525 +
             C48177 * C6527) *
                C48175) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C3332 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C47928 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C3332) *
               C47935 +
           (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
                C3332 -
            ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
                C47974) *
               C2938) *
              C48111 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C3332) *
               C47928 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C3332 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C47935 +
           (((C12145 + C12144) * C16185 +
             (C10445 * C1753 - C10446 * C1749 - C10445 * C1754 +
              C10443 * C1758 + C10447 * C6023 - C10448 * C6020 -
              C10447 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
                C3332) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47970 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C47977 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C3840) *
              C47928 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C47977 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47970 -
           ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
               C3840) *
              C47935 +
          (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C47970 -
           ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
               C47977 +
           ((C27065 + C27064) * C16185 +
            (C10445 * C6021 - C10446 * C6019 - C10445 * C6022 + C10443 * C6025 +
             C10447 * C23509 - C10448 * C23508 - C10447 * C23510 +
             C48177 * C23511) *
                C48175) *
               C47818 * C3840) *
              C2938) *
         C47841) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C3332 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C47974) *
              C48203 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C47974 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C3332) *
              C48199 +
          (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C3332 -
           ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
               C47974) *
              C48189 +
          (((C27533 + C27532) * C16185 +
            (C10445 * C6522 - C10446 * C6520 - C10445 * C6523 + C10443 * C6526 +
             C10447 * C22517 - C10448 * C22516 - C10447 * C22518 +
             C48177 * C22519) *
                C48175) *
               C47818 * C47974 -
           ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C3332 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C2570 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C3332) *
               C47932) *
              C48193 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C3332) *
               C2570 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C3332 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C47932) *
              C48180 +
          ((((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
                C3332 -
            ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
                C47974) *
               C2570 +
           (((C11419 + C11418) * C16185 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
                C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C48204 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C48201 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C48192 -
           ((C28378 + C28379) * C48175 +
            (C10447 * C2062 - C10448 * C2053 - C10447 * C2063 + C48177 * C2071 +
             C10445 * C2060 - C10446 * C2052 - C10445 * C2061 +
             C10443 * C2070) *
                C16185) *
               C47818 * C48173) *
              C2570 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C48201 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C48204 -
           ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
               C48192 +
           ((C28379 + C28378) * C16185 +
            (C10445 * C7384 - C10446 * C7382 - C10445 * C7385 + C10443 * C7388 +
             C10447 * C23163 - C10448 * C23162 - C10447 * C23164 +
             C48177 * C23165) *
                C48175) *
               C47818 * C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C47970 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47977 +
            ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
              C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
              C48177 * C2070) *
                 C16185 +
             (C27060 + C27061) * C48175) *
                C47818 * C3840) *
               C2570 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47977 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C47970 -
            ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
                C3840) *
               C47932) *
              C48111 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47977 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C47970 -
            ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
                C3840) *
               C2570 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C47970 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47977 +
            ((C12865 + C12864) * C16185 +
             (C10445 * C1347 - C10446 * C1331 - C10445 * C1348 +
              C10443 * C1358 + C10447 * C7386 - C10448 * C7383 -
              C10447 * C7387 + C48177 * C7389) *
                 C48175) *
                C47818 * C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C3332 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C2570 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C3332) *
               C47932) *
              C48193 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C3332) *
               C2570 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C3332 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C47932) *
              C48180 +
          ((((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
                C3332 -
            ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
                C47974) *
               C2570 +
           (((C11419 + C11418) * C16185 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
                C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C3332 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C47974) *
              C48203 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C47974 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C3332) *
              C48199 +
          (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C3332 -
           ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
               C47974) *
              C48189 +
          (((C27533 + C27532) * C16185 +
            (C10445 * C6522 - C10446 * C6520 - C10445 * C6523 + C10443 * C6526 +
             C10447 * C22517 - C10448 * C22516 - C10447 * C22518 +
             C48177 * C22519) *
                C48175) *
               C47818 * C47974 -
           ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C1458 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C1459 +
           ((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C47887 * C1460 -
           ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
               C47887 * C48167) *
              C48111 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C1459 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C1458 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C1460 +
           ((C11937 + C11936) * C16185 +
            (C10445 * C1204 - C10446 * C1194 - C10445 * C1205 + C10443 * C1212 +
             C10447 * C6524 - C10448 * C6521 - C10447 * C6525 +
             C48177 * C6527) *
                C48175) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C48125 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C47932) *
              C688 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C47932 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C48125) *
              C689 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C48125 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C47932) *
              C690 +
          (((C11053 + C11052) * C16185 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48175) *
               C47818 * C47887 * C47932 -
           ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
               C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C1870 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C1871 +
            ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
              C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
              C48177 * C2070) *
                 C16185 +
             (C27060 + C27061) * C48175) *
                C47818 * C48160) *
               C48125 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C1871 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C1870 -
            ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
                C48160) *
               C47932) *
              C48111 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C1871 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C1870 -
            ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
                C48160) *
               C48125 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C1870 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C1871 +
            ((C12865 + C12864) * C16185 +
             (C10445 * C1347 - C10446 * C1331 - C10445 * C1348 +
              C10443 * C1358 + C10447 * C7386 - C10448 * C7383 -
              C10447 * C7387 + C48177 * C7389) *
                 C48175) *
                C47818 * C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C48126 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C47974) *
              C1458 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C47974 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C48126) *
              C1459 +
          (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C48126 -
           ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
               C47974) *
              C1460 +
          (((C27533 + C27532) * C16185 +
            (C10445 * C6522 - C10446 * C6520 - C10445 * C6523 + C10443 * C6526 +
             C10447 * C22517 - C10448 * C22516 - C10447 * C22518 +
             C48177 * C22519) *
                C48175) *
               C47818 * C47974 -
           ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C48126 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C48125 +
           (((C26621 + C26620) * C16185 +
             (C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
              C10443 * C1356 + C10447 * C1345 - C10448 * C1330 -
              C10447 * C1346 + C48177 * C1357) *
                 C48175) *
                C47818 * C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C48126) *
               C47932) *
              C296 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C48126) *
               C48125 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C48126 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C47932) *
              C297 +
          ((((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
                C48126 -
            ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
                C47974) *
               C48125 +
           (((C11419 + C11418) * C16185 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C2338 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C2339 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C2340 -
           ((C28378 + C28379) * C48175 +
            (C10447 * C2062 - C10448 * C2053 - C10447 * C2063 + C48177 * C2071 +
             C10445 * C2060 - C10446 * C2052 - C10445 * C2061 +
             C10443 * C2070) *
                C16185) *
               C47818 * C48173) *
              C48125 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C2339 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C2338 -
           ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
               C2340 +
           ((C28379 + C28378) * C16185 +
            (C10445 * C7384 - C10446 * C7382 - C10445 * C7385 + C10443 * C7388 +
             C10447 * C23163 - C10448 * C23162 - C10447 * C23164 +
             C48177 * C23165) *
                C48175) *
               C47818 * C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
                C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                   C16185 +
               (C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331 +
                C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977) *
                   C48175) *
                  C47818 * C47887 * C47869 * C108 -
              ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) *
                  C47818 * C47887 * C47869 * C109 +
              ((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) *
                  C47818 * C47887 * C47869 * C110 -
              ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) *
                  C47818 * C47887 * C47869 * C111 +
              ((C10505 + C10504) * C16185 +
               (C10445 * C325 - C10446 * C307 - C10445 * C326 + C10443 * C337 +
                C10447 * C975 - C10448 * C966 - C10447 * C976 + C48177 * C981) *
                   C48175) *
                  C47818 * C47887 * C47869 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
                 C10447 * C514 - C10448 * C502 - C10447 * C515 +
                 C48177 * C532) *
                    C16185 +
                (C26004 + C26005) * C48175) *
                   C47818 * C47887 * C48196 -
               ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) *
                   C47818 * C47887 * C48184 +
               ((C26007 + C26006) * C16185 +
                (C10445 * C1200 - C10446 * C1192 - C10445 * C1201 +
                 C10443 * C1210 + C10447 * C1751 - C10448 * C1748 -
                 C10447 * C1752 + C48177 * C1757) *
                    C48175) *
                   C47818 * C47887 * C48157) *
                  C296 +
              (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) *
                   C47818 * C47887 * C48184 -
               ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) *
                   C47818 * C47887 * C48196 -
               ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) *
                   C47818 * C47887 * C48157) *
                  C297 +
              (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) *
                   C47818 * C47887 * C48196 -
               ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) *
                   C47818 * C47887 * C48184 +
               ((C10707 + C10706) * C16185 +
                (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 +
                 C10443 * C1208 + C10447 * C1755 - C10448 * C1750 -
                 C10447 * C1756 + C48177 * C1759) *
                    C48175) *
                   C47818 * C47887 * C48157) *
                  C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C48197 -
           ((C10447 * C1337 - C10448 * C1326 - C10447 * C1338 + C48177 * C1353 +
             C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977) *
                C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C48186 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C10445 * C1337 - C10446 * C1326 - C10445 * C1338 + C10443 * C1353 +
             C10447 * C2463 - C10448 * C2460 - C10447 * C2464 +
             C48177 * C2469) *
                C48175) *
               C47818 * C48160) *
              C47869 * C296 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C48186 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C48197 -
           ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
               C48160) *
              C47869 * C297 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C48197 -
           ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
               C48186 +
           ((C10909 + C10908) * C16185 +
            (C10445 * C1333 - C10446 * C1324 - C10445 * C1334 + C10443 * C1351 +
             C10447 * C2467 - C10448 * C2462 - C10447 * C2468 +
             C48177 * C2471) *
                C48175) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C1116 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C1117 +
           ((C26007 + C26006) * C16185 +
            (C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210 +
             C10447 * C1751 - C10448 * C1748 - C10447 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48193 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C1117 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C1116 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C48157) *
              C48180 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C1116 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C1117 +
           ((C10707 + C10706) * C16185 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C16185 +
           (C26004 + C26005) * C48175) *
              C47818 * C47887 * C1184 -
          ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
              C47887 * C1185 +
          ((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
              C47887 * C1186 -
          ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
              C47887 * C1187 +
          ((C26877 + C26876) * C16185 +
           (C10445 * C5846 - C10446 * C5844 - C10445 * C5847 + C10443 * C5850 +
            C10447 * C22870 - C10448 * C22869 - C10447 * C22871 +
            C48177 * C22872) *
               C48175) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C48197 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C48186 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C48160) *
              C1116 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C48186 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C48197 -
           ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
               C48160) *
              C1117 +
          (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C48197 -
           ((C10447 * C6021 - C10448 * C6019 - C10447 * C6022 + C48177 * C6025 +
             C10445 * C1751 - C10446 * C1748 - C10445 * C1752 +
             C10443 * C1757) *
                C48175 +
            (C27063 + C27062) * C16185) *
               C47818 * C48186 +
           ((C27065 + C27064) * C16185 +
            (C10445 * C6021 - C10446 * C6019 - C10445 * C6022 + C10443 * C6025 +
             C10447 * C23509 - C10448 * C23508 - C10447 * C23510 +
             C48177 * C23511) *
                C48175) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C1870 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C1871 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C48160) *
              C47869 * C48193 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C1871 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C1870 -
           ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
               C48160) *
              C47869 * C48180 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C1870 -
           ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
               C1871 +
           ((C10909 + C10908) * C16185 +
            (C10445 * C1333 - C10446 * C1324 - C10445 * C1334 + C10443 * C1351 +
             C10447 * C2467 - C10448 * C2462 - C10447 * C2468 +
             C48177 * C2471) *
                C48175) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C1870 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C1871 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C48160) *
              C48196 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C1871 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C1870 -
           ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
               C48160) *
              C48184 +
          (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C1870 -
           ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
               C1871 +
           ((C27065 + C27064) * C16185 +
            (C10445 * C6021 - C10446 * C6019 - C10445 * C6022 + C10443 * C6025 +
             C10447 * C23509 - C10448 * C23508 - C10447 * C23510 +
             C48177 * C23511) *
                C48175) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C16185 +
           (C26004 + C26005) * C48175) *
              C47818 * C2045 -
          ((C26620 + C26621) * C48175 +
           (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
            C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
               C16185) *
              C47818 * C2046 +
          ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
            C10447 * C2060 - C10448 * C2052 - C10447 * C2061 + C48177 * C2070) *
               C16185 +
           (C27060 + C27061) * C48175) *
              C47818 * C2047 -
          ((C10447 * C6911 - C10448 * C6909 - C10447 * C6912 + C48177 * C6915 +
            C10445 * C2463 - C10446 * C2460 - C10445 * C2464 + C10443 * C2469) *
               C48175 +
           (C10447 * C2062 - C10448 * C2053 - C10447 * C2063 + C48177 * C2071 +
            C10445 * C2060 - C10446 * C2052 - C10445 * C2061 + C10443 * C2070) *
               C16185) *
              C47818 * C2048 +
          ((C10445 * C2062 - C10446 * C2053 - C10445 * C2063 + C10443 * C2071 +
            C10447 * C12651 - C10448 * C12649 - C10447 * C12652 +
            C48177 * C12655) *
               C16185 +
           (C10445 * C6911 - C10446 * C6909 - C10445 * C6912 + C10443 * C6915 +
            C10447 * C27908 - C10448 * C27907 - C10447 * C27909 +
            C48177 * C27910) *
               C48175) *
              C47818 * C2049) *
         C47869 * C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C48126 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C1116 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C48126) *
               C1117 +
           (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
                C48126 -
            ((C10447 * C6021 - C10448 * C6019 - C10447 * C6022 +
              C48177 * C6025 + C10445 * C1751 - C10446 * C1748 -
              C10445 * C1752 + C10443 * C1757) *
                 C48175 +
             (C27063 + C27062) * C16185) *
                C47818 * C47974) *
               C48157) *
              C48111 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C48126) *
               C1116 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C48126 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C1117 +
           (((C12145 + C12144) * C16185 +
             (C10445 * C1753 - C10446 * C1749 - C10445 * C1754 +
              C10443 * C1758 + C10447 * C6023 - C10448 * C6020 -
              C10447 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C48126 -
           ((C10447 * C1337 - C10448 * C1326 - C10447 * C1338 + C48177 * C1353 +
             C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977) *
                C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C47974) *
              C47869 * C688 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C47974 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C48126) *
              C47869 * C689 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C48126 -
           ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
               C47974) *
              C47869 * C690 +
          (((C11197 + C11196) * C16185 +
            (C10445 * C973 - C10446 * C965 - C10445 * C974 + C10443 * C980 +
             C10447 * C2221 - C10448 * C2220 - C10447 * C2222 +
             C48177 * C2223) *
                C48175) *
               C47818 * C47974 -
           ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
               C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C2338 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C2339 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C2340 -
           ((C10447 * C6911 - C10448 * C6909 - C10447 * C6912 + C48177 * C6915 +
             C10445 * C2463 - C10446 * C2460 - C10445 * C2464 +
             C10443 * C2469) *
                C48175 +
            (C10447 * C2062 - C10448 * C2053 - C10447 * C2063 + C48177 * C2071 +
             C10445 * C2060 - C10446 * C2052 - C10445 * C2061 +
             C10443 * C2070) *
                C16185) *
               C47818 * C48173) *
              C47869 * C48111 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C2339 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C2338 -
           ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
               C2340 +
           ((C13009 + C13008) * C16185 +
            (C10445 * C2465 - C10446 * C2461 - C10445 * C2466 + C10443 * C2470 +
             C10447 * C6913 - C10448 * C6910 - C10447 * C6914 +
             C48177 * C6916) *
                C48175) *
               C47818 * C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C48196 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C48184 +
           ((C26007 + C26006) * C16185 +
            (C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210 +
             C10447 * C1751 - C10448 * C1748 - C10447 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C296 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C48184 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C48196 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C48157) *
              C297 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C48196 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C48184 +
           ((C10707 + C10706) * C16185 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C16185 +
           (C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331 +
            C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977) *
               C48175) *
              C47818 * C47887 * C47869 * C108 -
          ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
              C47887 * C47869 * C109 +
          ((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
              C47887 * C47869 * C110 -
          ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
              C47887 * C47869 * C111 +
          ((C10505 + C10504) * C16185 +
           (C10445 * C325 - C10446 * C307 - C10445 * C326 + C10443 * C337 +
            C10447 * C975 - C10448 * C966 - C10447 * C976 + C48177 * C981) *
               C48175) *
              C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C1116 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C1117 +
           ((C26007 + C26006) * C16185 +
            (C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210 +
             C10447 * C1751 - C10448 * C1748 - C10447 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48193 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C1117 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C1116 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C48157) *
              C48180 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C1116 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C1117 +
           ((C10707 + C10706) * C16185 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C16185 +
           (C26004 + C26005) * C48175) *
              C47818 * C47887 * C1184 -
          ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
              C47887 * C1185 +
          ((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
              C47887 * C1186 -
          ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
              C47887 * C1187 +
          ((C26877 + C26876) * C16185 +
           (C10445 * C5846 - C10446 * C5844 - C10445 * C5847 + C10443 * C5850 +
            C10447 * C22870 - C10448 * C22869 - C10447 * C22871 +
            C48177 * C22872) *
               C48175) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C1870 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C1871 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C48160) *
              C47869 * C48193 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C1871 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C1870 -
           ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
               C48160) *
              C47869 * C48180 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C1870 -
           ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
               C1871 +
           ((C10909 + C10908) * C16185 +
            (C10445 * C1333 - C10446 * C1324 - C10445 * C1334 + C10443 * C1351 +
             C10447 * C2467 - C10448 * C2462 - C10447 * C2468 +
             C48177 * C2471) *
                C48175) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C1870 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C1871 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C48160) *
              C48196 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C1871 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C1870 -
           ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
               C48160) *
              C48184 +
          (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C1870 -
           ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
               C1871 +
           ((C27065 + C27064) * C16185 +
            (C10445 * C6021 - C10446 * C6019 - C10445 * C6022 + C10443 * C6025 +
             C10447 * C23509 - C10448 * C23508 - C10447 * C23510 +
             C48177 * C23511) *
                C48175) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C3332 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C48125 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C3332) *
               C47932) *
              C47846 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C3332) *
               C48125 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C3332 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C47932) *
              C47855 +
          ((((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
                C3332 -
            ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
                C47974) *
               C48125 +
           (((C11419 + C11418) * C16185 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
                C3332) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C47970 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47977 +
            ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
              C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
              C48177 * C2070) *
                 C16185 +
             (C27060 + C27061) * C48175) *
                C47818 * C3840) *
               C48125 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47977 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C47970 -
            ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
                C3840) *
               C47932) *
              C2678 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47977 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C47970 -
            ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
                C3840) *
               C48125 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C47970 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47977 +
            ((C12865 + C12864) * C16185 +
             (C10445 * C1347 - C10446 * C1331 - C10445 * C1348 +
              C10443 * C1358 + C10447 * C7386 - C10448 * C7383 -
              C10447 * C7387 + C48177 * C7389) *
                 C48175) *
                C47818 * C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C3332 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C48196 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C3332) *
               C48184 +
           (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
                C3332 -
            ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
                C47974) *
               C48157) *
              C2678 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C3332) *
               C48196 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C3332 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C48184 +
           (((C12145 + C12144) * C16185 +
             (C10445 * C1753 - C10446 * C1749 - C10445 * C1754 +
              C10443 * C1758 + C10447 * C6023 - C10448 * C6020 -
              C10447 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
                C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C3332 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C47974) *
              C47869 * C48202 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C47974 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C3332) *
              C47869 * C48195 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C3332 -
           ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
               C47974) *
              C47869 * C48182 +
          (((C11197 + C11196) * C16185 +
            (C10445 * C973 - C10446 * C965 - C10445 * C974 + C10443 * C980 +
             C10447 * C2221 - C10448 * C2220 - C10447 * C2222 +
             C48177 * C2223) *
                C48175) *
               C47818 * C47974 -
           ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
               C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C48204 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C48201 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C48192 -
           ((C28378 + C28379) * C48175 +
            (C10447 * C2062 - C10448 * C2053 - C10447 * C2063 + C48177 * C2071 +
             C10445 * C2060 - C10446 * C2052 - C10445 * C2061 +
             C10443 * C2070) *
                C16185) *
               C47818 * C48173) *
              C47869 * C2678 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C48201 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C48204 -
           ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
               C48192 +
           ((C13009 + C13008) * C16185 +
            (C10445 * C2465 - C10446 * C2461 - C10445 * C2466 + C10443 * C2470 +
             C10447 * C6913 - C10448 * C6910 - C10447 * C6914 +
             C48177 * C6916) *
                C48175) *
               C47818 * C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47970 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C47977 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C3840) *
              C47869 * C47846 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C47977 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47970 -
           ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
               C3840) *
              C47869 * C47855 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47970 -
           ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
               C47977 +
           ((C10909 + C10908) * C16185 +
            (C10445 * C1333 - C10446 * C1324 - C10445 * C1334 + C10443 * C1351 +
             C10447 * C2467 - C10448 * C2462 - C10447 * C2468 +
             C48177 * C2471) *
                C48175) *
               C47818 * C3840) *
              C47869 * C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C3332 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C47974) *
              C47869 * C48202 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C47974 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C3332) *
              C47869 * C48195 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C3332 -
           ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
               C47974) *
              C47869 * C48182 +
          (((C11197 + C11196) * C16185 +
            (C10445 * C973 - C10446 * C965 - C10445 * C974 + C10443 * C980 +
             C10447 * C2221 - C10448 * C2220 - C10447 * C2222 +
             C48177 * C2223) *
                C48175) *
               C47818 * C47974 -
           ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
               C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C3332 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C48196 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C3332) *
               C48184 +
           (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
                C3332 -
            ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
                C47974) *
               C48157) *
              C2678 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C3332) *
               C48196 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C3332 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C48184 +
           (((C12145 + C12144) * C16185 +
             (C10445 * C1753 - C10446 * C1749 - C10445 * C1754 +
              C10443 * C1758 + C10447 * C6023 - C10448 * C6020 -
              C10447 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
                C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C48125 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C47932) *
              C688 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C47932 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C48125) *
              C689 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C48125 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C47932) *
              C690 +
          (((C11053 + C11052) * C16185 +
            (C10445 * C323 - C10446 * C306 - C10445 * C324 + C10443 * C336 +
             C10447 * C1631 - C10448 * C1630 - C10447 * C1632 +
             C48177 * C1633) *
                C48175) *
               C47818 * C47887 * C47932 -
           ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
               C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C1458 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C1459 +
           ((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C47887 * C1460 -
           ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
               C47887 * C48167) *
              C48111 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C1459 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C1458 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C1460 +
           ((C11937 + C11936) * C16185 +
            (C10445 * C1204 - C10446 * C1194 - C10445 * C1205 + C10443 * C1212 +
             C10447 * C6524 - C10448 * C6521 - C10447 * C6525 +
             C48177 * C6527) *
                C48175) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C48126 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C48125 +
           (((C26621 + C26620) * C16185 +
             (C10445 * C1343 - C10446 * C1329 - C10445 * C1344 +
              C10443 * C1356 + C10447 * C1345 - C10448 * C1330 -
              C10447 * C1346 + C48177 * C1357) *
                 C48175) *
                C47818 * C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C48126) *
               C47932) *
              C296 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C48126) *
               C48125 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C48126 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C47932) *
              C297 +
          ((((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
                C48126 -
            ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
                C47974) *
               C48125 +
           (((C11419 + C11418) * C16185 +
             (C10445 * C1339 - C10446 * C1327 - C10445 * C1340 +
              C10443 * C1354 + C10447 * C1349 - C10448 * C1332 -
              C10447 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C48126 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C47974) *
              C1458 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C47974 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C48126) *
              C1459 +
          (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C48126 -
           ((C27532 + C27533) * C48175 + (C27063 + C27062) * C16185) * C47818 *
               C47974) *
              C1460 +
          (((C27533 + C27532) * C16185 +
            (C10445 * C6522 - C10446 * C6520 - C10445 * C6523 + C10443 * C6526 +
             C10447 * C22517 - C10448 * C22516 - C10447 * C22518 +
             C48177 * C22519) *
                C48175) *
               C47818 * C47974 -
           ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C48196 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C48184 +
           ((C26007 + C26006) * C16185 +
            (C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210 +
             C10447 * C1751 - C10448 * C1748 - C10447 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C296 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C48184 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C48196 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C48157) *
              C297 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C48196 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C48184 +
           ((C10707 + C10706) * C16185 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C16185 +
           (C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331 +
            C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977) *
               C48175) *
              C47818 * C47887 * C47869 * C108 -
          ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
              C47887 * C47869 * C109 +
          ((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
              C47887 * C47869 * C110 -
          ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
              C47887 * C47869 * C111 +
          ((C10505 + C10504) * C16185 +
           (C10445 * C325 - C10446 * C307 - C10445 * C326 + C10443 * C337 +
            C10447 * C975 - C10448 * C966 - C10447 * C976 + C48177 * C981) *
               C48175) *
              C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C48197 -
           ((C10447 * C1337 - C10448 * C1326 - C10447 * C1338 + C48177 * C1353 +
             C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977) *
                C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C48186 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C10445 * C1337 - C10446 * C1326 - C10445 * C1338 + C10443 * C1353 +
             C10447 * C2463 - C10448 * C2460 - C10447 * C2464 +
             C48177 * C2469) *
                C48175) *
               C47818 * C48160) *
              C47869 * C296 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C48186 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C48197 -
           ((C12864 + C12865) * C48175 + (C10905 + C10904) * C16185) * C47818 *
               C48160) *
              C47869 * C297 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C48197 -
           ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
               C48186 +
           ((C10909 + C10908) * C16185 +
            (C10445 * C1333 - C10446 * C1324 - C10445 * C1334 + C10443 * C1351 +
             C10447 * C2467 - C10448 * C2462 - C10447 * C2468 +
             C48177 * C2471) *
                C48175) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C1116 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C1117 +
           ((C26007 + C26006) * C16185 +
            (C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210 +
             C10447 * C1751 - C10448 * C1748 - C10447 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48193 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C1117 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C1116 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C48157) *
              C48180 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C1116 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C1117 +
           ((C10707 + C10706) * C16185 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C16185 +
           (C26004 + C26005) * C48175) *
              C47818 * C47887 * C1184 -
          ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
              C47887 * C1185 +
          ((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
              C47887 * C1186 -
          ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
              C47887 * C1187 +
          ((C26877 + C26876) * C16185 +
           (C10445 * C5846 - C10446 * C5844 - C10445 * C5847 + C10443 * C5850 +
            C10447 * C22870 - C10448 * C22869 - C10447 * C22871 +
            C48177 * C22872) *
               C48175) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C48197 -
           ((C26620 + C26621) * C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C48186 +
           ((C10445 * C516 - C10446 * C503 - C10445 * C517 + C10443 * C533 +
             C10447 * C2060 - C10448 * C2052 - C10447 * C2061 +
             C48177 * C2070) *
                C16185 +
            (C27060 + C27061) * C48175) *
               C47818 * C48160) *
              C1116 +
          (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
               C48186 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C48197 -
           ((C27064 + C27065) * C48175 + (C27061 + C27060) * C16185) * C47818 *
               C48160) *
              C1117 +
          (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
               C48197 -
           ((C10447 * C6021 - C10448 * C6019 - C10447 * C6022 + C48177 * C6025 +
             C10445 * C1751 - C10446 * C1748 - C10445 * C1752 +
             C10443 * C1757) *
                C48175 +
            (C27063 + C27062) * C16185) *
               C47818 * C48186 +
           ((C27065 + C27064) * C16185 +
            (C10445 * C6021 - C10446 * C6019 - C10445 * C6022 + C10443 * C6025 +
             C10447 * C23509 - C10448 * C23508 - C10447 * C23510 +
             C48177 * C23511) *
                C48175) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C48126 -
           ((C10447 * C1337 - C10448 * C1326 - C10447 * C1338 + C48177 * C1353 +
             C10445 * C967 - C10446 * C962 - C10445 * C968 + C10443 * C977) *
                C48175 +
            (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
             C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                C16185) *
               C47818 * C47974) *
              C47869 * C688 +
          (((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
               C47974 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C48126) *
              C47869 * C689 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C48126 -
           ((C11418 + C11419) * C48175 + (C10907 + C10906) * C16185) * C47818 *
               C47974) *
              C47869 * C690 +
          (((C11197 + C11196) * C16185 +
            (C10445 * C973 - C10446 * C965 - C10445 * C974 + C10443 * C980 +
             C10447 * C2221 - C10448 * C2220 - C10447 * C2222 +
             C48177 * C2223) *
                C48175) *
               C47818 * C47974 -
           ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
               C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
              C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                 C16185 +
             (C26004 + C26005) * C48175) *
                C47818 * C48126 -
            ((C26620 + C26621) * C48175 +
             (C10447 * C516 - C10448 * C503 - C10447 * C517 + C48177 * C533 +
              C10445 * C514 - C10446 * C502 - C10445 * C515 + C10443 * C532) *
                 C16185) *
                C47818 * C47974) *
               C1116 +
           (((C26621 + C26620) * C16185 + (C27062 + C27063) * C48175) * C47818 *
                C47974 -
            ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
                C48126) *
               C1117 +
           (((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
                C48126 -
            ((C10447 * C6021 - C10448 * C6019 - C10447 * C6022 +
              C48177 * C6025 + C10445 * C1751 - C10446 * C1748 -
              C10445 * C1752 + C10443 * C1757) *
                 C48175 +
             (C27063 + C27062) * C16185) *
                C47818 * C47974) *
               C48157) *
              C48111 +
          ((((C10903 + C10902) * C16185 + (C11416 + C11417) * C48175) * C47818 *
                C47974 -
            ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
                C48126) *
               C1116 +
           (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
                C48126 -
            ((C12144 + C12145) * C48175 + (C11417 + C11416) * C16185) * C47818 *
                C47974) *
               C1117 +
           (((C12145 + C12144) * C16185 +
             (C10445 * C1753 - C10446 * C1749 - C10445 * C1754 +
              C10443 * C1758 + C10447 * C6023 - C10448 * C6020 -
              C10447 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C16185 +
           (C10445 * C313 - C10446 * C301 - C10445 * C314 + C10443 * C331 +
            C10447 * C967 - C10448 * C962 - C10447 * C968 + C48177 * C977) *
               C48175) *
              C47818 * C47887 * C47869 * C108 -
          ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
              C47887 * C47869 * C109 +
          ((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
              C47887 * C47869 * C110 -
          ((C11052 + C11053) * C48175 + (C10503 + C10502) * C16185) * C47818 *
              C47887 * C47869 * C111 +
          ((C10505 + C10504) * C16185 +
           (C10445 * C325 - C10446 * C307 - C10445 * C326 + C10443 * C337 +
            C10447 * C975 - C10448 * C966 - C10447 * C976 + C48177 * C981) *
               C48175) *
              C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C48196 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C48184 +
           ((C26007 + C26006) * C16185 +
            (C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210 +
             C10447 * C1751 - C10448 * C1748 - C10447 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C296 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C48184 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C48196 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C48157) *
              C297 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C48196 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C48184 +
           ((C10707 + C10706) * C16185 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
             C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
                C16185 +
            (C26004 + C26005) * C48175) *
               C47818 * C47887 * C1116 -
           ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
               C47887 * C1117 +
           ((C26007 + C26006) * C16185 +
            (C10445 * C1200 - C10446 * C1192 - C10445 * C1201 + C10443 * C1210 +
             C10447 * C1751 - C10448 * C1748 - C10447 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48193 +
          (((C10701 + C10700) * C16185 + (C10702 + C10703) * C48175) * C47818 *
               C47887 * C1117 -
           ((C10700 + C10701) * C48175 + (C10499 + C10498) * C16185) * C47818 *
               C47887 * C1116 -
           ((C11936 + C11937) * C48175 + (C10703 + C10702) * C16185) * C47818 *
               C47887 * C48157) *
              C48180 +
          (((C10501 + C10500) * C16185 + (C10704 + C10705) * C48175) * C47818 *
               C47887 * C1116 -
           ((C10706 + C10707) * C48175 + (C10705 + C10704) * C16185) * C47818 *
               C47887 * C1117 +
           ((C10707 + C10706) * C16185 +
            (C10445 * C1196 - C10446 * C1190 - C10445 * C1197 + C10443 * C1208 +
             C10447 * C1755 - C10448 * C1750 - C10447 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10445 * C122 - C10446 * C115 - C10445 * C123 + C10443 * C136 +
            C10447 * C514 - C10448 * C502 - C10447 * C515 + C48177 * C532) *
               C16185 +
           (C26004 + C26005) * C48175) *
              C47818 * C47887 * C1184 -
          ((C26006 + C26007) * C48175 + (C26005 + C26004) * C16185) * C47818 *
              C47887 * C1185 +
          ((C26007 + C26006) * C16185 + (C26874 + C26875) * C48175) * C47818 *
              C47887 * C1186 -
          ((C26876 + C26877) * C48175 + (C26875 + C26874) * C16185) * C47818 *
              C47887 * C1187 +
          ((C26877 + C26876) * C16185 +
           (C10445 * C5846 - C10446 * C5844 - C10445 * C5847 + C10443 * C5850 +
            C10447 * C22870 - C10448 * C22869 - C10447 * C22871 +
            C48177 * C22872) *
               C48175) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C47928 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C47935 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C2938) *
              C47846 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C47935 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C47928 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C2938) *
              C47855 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C47928 -
           ((C32034 + C32035) * C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C47935 +
           ((C31689 + C31688) * C48073 * C16187 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C2938) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C48126 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C47928 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C48126) *
               C47935 +
           (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
              C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
              C48177 * C1356) *
                 C48073 * C16187 +
             (C31684 + C31685) * C48073 * C48144) *
                C48126 -
            ((C33126 + C33127) * C48073 * C48144 +
             (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 +
              C48177 * C1357 + C31427 * C1343 - C31428 * C1329 -
              C31427 * C1344 + C31425 * C1356) *
                 C48073 * C16187) *
                C47974) *
               C2938) *
              C2678 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C48126) *
               C47928 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C48126 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C47935 +
           (((C33127 + C33126) * C48073 * C16187 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C31688 + C31689) * C48073 * C48144 +
             (C31685 + C31684) * C48073 * C16187) *
                C48126) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C48203 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C48199 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C48189 -
           ((C32918 + C32919) * C48073 * C48144 +
            (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
             C31427 * C1200 - C31428 * C1192 - C31427 * C1201 +
             C31425 * C1210) *
                C48073 * C16187) *
               C47887 * C48167) *
              C2678 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C48199 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C48203 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C48189 +
           ((C32919 + C32918) * C48073 * C16187 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48073 * C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C2570 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C47932) *
              C48202 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C47932 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C2570) *
              C48195 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C2570 -
           ((C32034 + C32035) * C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C47932) *
              C48182 +
          (((C32035 + C32034) * C48073 * C16187 +
            (C31427 * C325 - C31428 * C307 - C31427 * C326 + C31425 * C337 +
             C31429 * C975 - C31430 * C966 - C31429 * C976 + C48177 * C981) *
                C48073 * C48144) *
               C47887 * C47932 -
           ((C31486 + C31487) * C48073 * C48144 +
            (C31485 + C31484) * C48073 * C16187) *
               C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C48197 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C48186 +
            ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
              C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
              C48177 * C2070) *
                 C48073 * C16187 +
             (C31886 + C31887) * C48073 * C48144) *
                C48160) *
               C2570 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C48186 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C48197 -
            ((C33838 + C33839) * C48073 * C48144 +
             (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 +
              C48177 * C2469 + C31427 * C1337 - C31428 * C1326 -
              C31427 * C1338 + C31425 * C1353) *
                 C48073 * C16187) *
                C48160) *
               C47932) *
              C2678 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C48186 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C48197 -
            ((C31890 + C31891) * C48073 * C48144 +
             (C31887 + C31886) * C48073 * C16187) *
                C48160) *
               C2570 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C48197 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C48186 +
            ((C33839 + C33838) * C48073 * C16187 +
             (C31427 * C1333 - C31428 * C1324 - C31427 * C1334 +
              C31425 * C1351 + C31429 * C2467 - C31430 * C2462 -
              C31429 * C2468 + C48177 * C2471) *
                 C48073 * C48144) *
                C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C48126 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C2570 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C48126) *
               C47932) *
              C47846 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C48126) *
               C2570 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C48126 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C47932) *
              C47855 +
          ((((C31483 + C31482) * C48073 * C16187 +
             (C31484 + C31485) * C48073 * C48144) *
                C48126 -
            ((C32178 + C32179) * C48073 * C48144 +
             (C31889 + C31888) * C48073 * C16187) *
                C47974) *
               C2570 +
           (((C32401 + C32400) * C48073 * C16187 +
             (C31427 * C973 - C31428 * C965 - C31427 * C974 + C31425 * C980 +
              C31429 * C2221 - C31430 * C2220 - C31429 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C32034 + C32035) * C48073 * C48144 +
             (C31687 + C31686) * C48073 * C16187) *
                C48126) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C2570 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C47932) *
              C48202 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C47932 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C2570) *
              C48195 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C2570 -
           ((C32034 + C32035) * C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C47932) *
              C48182 +
          (((C32035 + C32034) * C48073 * C16187 +
            (C31427 * C325 - C31428 * C307 - C31427 * C326 + C31425 * C337 +
             C31429 * C975 - C31430 * C966 - C31429 * C976 + C48177 * C981) *
                C48073 * C48144) *
               C47887 * C47932 -
           ((C31486 + C31487) * C48073 * C48144 +
            (C31485 + C31484) * C48073 * C16187) *
               C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C48203 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C48199 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C48189 -
           ((C32918 + C32919) * C48073 * C48144 +
            (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
             C31427 * C1200 - C31428 * C1192 - C31427 * C1201 +
             C31425 * C1210) *
                C48073 * C16187) *
               C47887 * C48167) *
              C2678 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C48199 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C48203 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C48189 +
           ((C32919 + C32918) * C48073 * C16187 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48073 * C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C3332 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C47928 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C3332) *
               C47935 +
           (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
              C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
              C48177 * C1356) *
                 C48073 * C16187 +
             (C31684 + C31685) * C48073 * C48144) *
                C3332 -
            ((C33126 + C33127) * C48073 * C48144 +
             (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 +
              C48177 * C1357 + C31427 * C1343 - C31428 * C1329 -
              C31427 * C1344 + C31425 * C1356) *
                 C48073 * C16187) *
                C47974) *
               C2938) *
              C48111 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C3332) *
               C47928 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C3332 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C47935 +
           (((C33127 + C33126) * C48073 * C16187 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C31688 + C31689) * C48073 * C48144 +
             (C31685 + C31684) * C48073 * C16187) *
                C3332) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47970 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C47977 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C3840) *
              C47928 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C47977 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47970 -
           ((C33838 + C33839) * C48073 * C48144 +
            (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 + C48177 * C2469 +
             C31427 * C1337 - C31428 * C1326 - C31427 * C1338 +
             C31425 * C1353) *
                C48073 * C16187) *
               C3840) *
              C47935 +
          (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47970 -
           ((C33126 + C33127) * C48073 * C48144 +
            (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 + C48177 * C1357 +
             C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
             C31425 * C1356) *
                C48073 * C16187) *
               C47977 +
           ((C31427 * C1345 - C31428 * C1330 - C31427 * C1346 + C31425 * C1357 +
             C31429 * C7384 - C31430 * C7382 - C31429 * C7385 +
             C48177 * C7388) *
                C48073 * C16187 +
            (C31427 * C1347 - C31428 * C1331 - C31427 * C1348 + C31425 * C1358 +
             C31429 * C7386 - C31430 * C7383 - C31429 * C7387 +
             C48177 * C7389) *
                C48073 * C48144) *
               C3840) *
              C2938) *
         C47841) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C3332 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C47974) *
              C48203 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C47974 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C3332) *
              C48199 +
          (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C3332 -
           ((C33126 + C33127) * C48073 * C48144 +
            (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 + C48177 * C1357 +
             C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
             C31425 * C1356) *
                C48073 * C16187) *
               C47974) *
              C48189 +
          (((C31427 * C1751 - C31428 * C1748 - C31427 * C1752 + C31425 * C1757 +
             C31429 * C6021 - C31430 * C6019 - C31429 * C6022 +
             C48177 * C6025) *
                C48073 * C16187 +
            (C31427 * C1753 - C31428 * C1749 - C31427 * C1754 + C31425 * C1758 +
             C31429 * C6023 - C31430 * C6020 - C31429 * C6024 +
             C48177 * C6026) *
                C48073 * C48144) *
               C47974 -
           ((C32918 + C32919) * C48073 * C48144 +
            (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
             C31427 * C1200 - C31428 * C1192 - C31427 * C1201 +
             C31425 * C1210) *
                C48073 * C16187) *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C3332 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C2570 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C3332) *
               C47932) *
              C48193 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C3332) *
               C2570 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C3332 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C47932) *
              C48180 +
          ((((C31483 + C31482) * C48073 * C16187 +
             (C31484 + C31485) * C48073 * C48144) *
                C3332 -
            ((C32178 + C32179) * C48073 * C48144 +
             (C31889 + C31888) * C48073 * C16187) *
                C47974) *
               C2570 +
           (((C32401 + C32400) * C48073 * C16187 +
             (C31427 * C973 - C31428 * C965 - C31427 * C974 + C31425 * C980 +
              C31429 * C2221 - C31430 * C2220 - C31429 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C32034 + C32035) * C48073 * C48144 +
             (C31687 + C31686) * C48073 * C16187) *
                C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C48204 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C48201 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C48192 -
           ((C33982 + C33983) * C48073 * C48144 +
            (C31429 * C2062 - C31430 * C2053 - C31429 * C2063 + C48177 * C2071 +
             C31427 * C2060 - C31428 * C2052 - C31427 * C2061 +
             C31425 * C2070) *
                C48073 * C16187) *
               C48173) *
              C2570 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C48201 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C48204 -
           ((C33838 + C33839) * C48073 * C48144 +
            (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 + C48177 * C2469 +
             C31427 * C1337 - C31428 * C1326 - C31427 * C1338 +
             C31425 * C1353) *
                C48073 * C16187) *
               C48192 +
           ((C31427 * C2463 - C31428 * C2460 - C31427 * C2464 + C31425 * C2469 +
             C31429 * C6911 - C31430 * C6909 - C31429 * C6912 +
             C48177 * C6915) *
                C48073 * C16187 +
            (C31427 * C2465 - C31428 * C2461 - C31427 * C2466 + C31425 * C2470 +
             C31429 * C6913 - C31430 * C6910 - C31429 * C6914 +
             C48177 * C6916) *
                C48073 * C48144) *
               C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C47970 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47977 +
            ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
              C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
              C48177 * C2070) *
                 C48073 * C16187 +
             (C31886 + C31887) * C48073 * C48144) *
                C3840) *
               C2570 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47977 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C47970 -
            ((C33838 + C33839) * C48073 * C48144 +
             (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 +
              C48177 * C2469 + C31427 * C1337 - C31428 * C1326 -
              C31427 * C1338 + C31425 * C1353) *
                 C48073 * C16187) *
                C3840) *
               C47932) *
              C48111 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47977 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C47970 -
            ((C31890 + C31891) * C48073 * C48144 +
             (C31887 + C31886) * C48073 * C16187) *
                C3840) *
               C2570 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C47970 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47977 +
            ((C33839 + C33838) * C48073 * C16187 +
             (C31427 * C1333 - C31428 * C1324 - C31427 * C1334 +
              C31425 * C1351 + C31429 * C2467 - C31430 * C2462 -
              C31429 * C2468 + C48177 * C2471) *
                 C48073 * C48144) *
                C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C3332 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C2570 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C3332) *
               C47932) *
              C48193 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C3332) *
               C2570 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C3332 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C47932) *
              C48180 +
          ((((C31483 + C31482) * C48073 * C16187 +
             (C31484 + C31485) * C48073 * C48144) *
                C3332 -
            ((C32178 + C32179) * C48073 * C48144 +
             (C31889 + C31888) * C48073 * C16187) *
                C47974) *
               C2570 +
           (((C32401 + C32400) * C48073 * C16187 +
             (C31427 * C973 - C31428 * C965 - C31427 * C974 + C31425 * C980 +
              C31429 * C2221 - C31430 * C2220 - C31429 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C32034 + C32035) * C48073 * C48144 +
             (C31687 + C31686) * C48073 * C16187) *
                C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C3332 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C47974) *
              C48203 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C47974 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C3332) *
              C48199 +
          (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C3332 -
           ((C33126 + C33127) * C48073 * C48144 +
            (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 + C48177 * C1357 +
             C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
             C31425 * C1356) *
                C48073 * C16187) *
               C47974) *
              C48189 +
          (((C31427 * C1751 - C31428 * C1748 - C31427 * C1752 + C31425 * C1757 +
             C31429 * C6021 - C31430 * C6019 - C31429 * C6022 +
             C48177 * C6025) *
                C48073 * C16187 +
            (C31427 * C1753 - C31428 * C1749 - C31427 * C1754 + C31425 * C1758 +
             C31429 * C6023 - C31430 * C6020 - C31429 * C6024 +
             C48177 * C6026) *
                C48073 * C48144) *
               C47974 -
           ((C32918 + C32919) * C48073 * C48144 +
            (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
             C31427 * C1200 - C31428 * C1192 - C31427 * C1201 +
             C31425 * C1210) *
                C48073 * C16187) *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C1458 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C1459 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C1460 -
           ((C32918 + C32919) * C48073 * C48144 +
            (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
             C31427 * C1200 - C31428 * C1192 - C31427 * C1201 +
             C31425 * C1210) *
                C48073 * C16187) *
               C47887 * C48167) *
              C48111 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C1459 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C1458 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C1460 +
           ((C32919 + C32918) * C48073 * C16187 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48073 * C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C48125 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C47932) *
              C688 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C47932 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C48125) *
              C689 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C48125 -
           ((C32034 + C32035) * C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C47932) *
              C690 +
          (((C32035 + C32034) * C48073 * C16187 +
            (C31427 * C325 - C31428 * C307 - C31427 * C326 + C31425 * C337 +
             C31429 * C975 - C31430 * C966 - C31429 * C976 + C48177 * C981) *
                C48073 * C48144) *
               C47887 * C47932 -
           ((C31486 + C31487) * C48073 * C48144 +
            (C31485 + C31484) * C48073 * C16187) *
               C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C1870 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C1871 +
            ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
              C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
              C48177 * C2070) *
                 C48073 * C16187 +
             (C31886 + C31887) * C48073 * C48144) *
                C48160) *
               C48125 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C1871 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C1870 -
            ((C33838 + C33839) * C48073 * C48144 +
             (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 +
              C48177 * C2469 + C31427 * C1337 - C31428 * C1326 -
              C31427 * C1338 + C31425 * C1353) *
                 C48073 * C16187) *
                C48160) *
               C47932) *
              C48111 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C1871 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C1870 -
            ((C31890 + C31891) * C48073 * C48144 +
             (C31887 + C31886) * C48073 * C16187) *
                C48160) *
               C48125 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C1870 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C1871 +
            ((C33839 + C33838) * C48073 * C16187 +
             (C31427 * C1333 - C31428 * C1324 - C31427 * C1334 +
              C31425 * C1351 + C31429 * C2467 - C31430 * C2462 -
              C31429 * C2468 + C48177 * C2471) *
                 C48073 * C48144) *
                C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C48126 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C47974) *
              C1458 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C47974 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C48126) *
              C1459 +
          (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C48126 -
           ((C33126 + C33127) * C48073 * C48144 +
            (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 + C48177 * C1357 +
             C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
             C31425 * C1356) *
                C48073 * C16187) *
               C47974) *
              C1460 +
          (((C31427 * C1751 - C31428 * C1748 - C31427 * C1752 + C31425 * C1757 +
             C31429 * C6021 - C31430 * C6019 - C31429 * C6022 +
             C48177 * C6025) *
                C48073 * C16187 +
            (C31427 * C1753 - C31428 * C1749 - C31427 * C1754 + C31425 * C1758 +
             C31429 * C6023 - C31430 * C6020 - C31429 * C6024 +
             C48177 * C6026) *
                C48073 * C48144) *
               C47974 -
           ((C32918 + C32919) * C48073 * C48144 +
            (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
             C31427 * C1200 - C31428 * C1192 - C31427 * C1201 +
             C31425 * C1210) *
                C48073 * C16187) *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C48126 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C48125 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C48126) *
               C47932) *
              C296 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C48126) *
               C48125 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C48126 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C47932) *
              C297 +
          ((((C31483 + C31482) * C48073 * C16187 +
             (C31484 + C31485) * C48073 * C48144) *
                C48126 -
            ((C32178 + C32179) * C48073 * C48144 +
             (C31889 + C31888) * C48073 * C16187) *
                C47974) *
               C48125 +
           (((C32401 + C32400) * C48073 * C16187 +
             (C31427 * C973 - C31428 * C965 - C31427 * C974 + C31425 * C980 +
              C31429 * C2221 - C31430 * C2220 - C31429 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C32034 + C32035) * C48073 * C48144 +
             (C31687 + C31686) * C48073 * C16187) *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C2338 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C2339 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C2340 -
           ((C33982 + C33983) * C48073 * C48144 +
            (C31429 * C2062 - C31430 * C2053 - C31429 * C2063 + C48177 * C2071 +
             C31427 * C2060 - C31428 * C2052 - C31427 * C2061 +
             C31425 * C2070) *
                C48073 * C16187) *
               C48173) *
              C48125 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C2339 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C2338 -
           ((C33838 + C33839) * C48073 * C48144 +
            (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 + C48177 * C2469 +
             C31427 * C1337 - C31428 * C1326 - C31427 * C1338 +
             C31425 * C1353) *
                C48073 * C16187) *
               C2340 +
           ((C31427 * C2463 - C31428 * C2460 - C31427 * C2464 + C31425 * C2469 +
             C31429 * C6911 - C31430 * C6909 - C31429 * C6912 +
             C48177 * C6915) *
                C48073 * C16187 +
            (C31427 * C2465 - C31428 * C2461 - C31427 * C2466 + C31425 * C2470 +
             C31429 * C6913 - C31430 * C6910 - C31429 * C6914 +
             C48177 * C6916) *
                C48073 * C48144) *
               C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
                C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                   C48073 * C16187 +
               (C31480 + C31481) * C48073 * C48144) *
                  C47887 * C47869 * C108 -
              ((C31482 + C31483) * C48073 * C48144 +
               (C31481 + C31480) * C48073 * C16187) *
                  C47887 * C47869 * C109 +
              ((C31483 + C31482) * C48073 * C16187 +
               (C31484 + C31485) * C48073 * C48144) *
                  C47887 * C47869 * C110 -
              ((C31486 + C31487) * C48073 * C48144 +
               (C31485 + C31484) * C48073 * C16187) *
                  C47887 * C47869 * C111 +
              ((C31487 + C31486) * C48073 * C16187 +
               (C31427 * C132 - C31428 * C120 - C31427 * C133 + C31425 * C141 +
                C31429 * C805 - C31430 * C804 - C31429 * C806 + C48177 * C807) *
                   C48073 * C48144) *
                  C47887 * C47869 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
                 C31429 * C514 - C31430 * C502 - C31429 * C515 +
                 C48177 * C532) *
                    C48073 * C16187 +
                (C31480 + C31481) * C48073 * C48144) *
                   C47887 * C48196 -
               ((C31682 + C31683) * C48073 * C48144 +
                (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
                 C31427 * C313 - C31428 * C301 - C31427 * C314 +
                 C31425 * C331) *
                    C48073 * C16187) *
                   C47887 * C48184 +
               ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
                 C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
                 C48177 * C1356) *
                    C48073 * C16187 +
                (C31684 + C31685) * C48073 * C48144) *
                   C47887 * C48157) *
                  C296 +
              (((C31683 + C31682) * C48073 * C16187 +
                (C31686 + C31687) * C48073 * C48144) *
                   C47887 * C48184 -
               ((C31482 + C31483) * C48073 * C48144 +
                (C31481 + C31480) * C48073 * C16187) *
                   C47887 * C48196 -
               ((C31688 + C31689) * C48073 * C48144 +
                (C31685 + C31684) * C48073 * C16187) *
                   C47887 * C48157) *
                  C297 +
              (((C31483 + C31482) * C48073 * C16187 +
                (C31484 + C31485) * C48073 * C48144) *
                   C47887 * C48196 -
               ((C31429 * C973 - C31430 * C965 - C31429 * C974 + C48177 * C980 +
                 C31427 * C321 - C31428 * C305 - C31427 * C322 +
                 C31425 * C335) *
                    C48073 * C48144 +
                (C31687 + C31686) * C48073 * C16187) *
                   C47887 * C48184 +
               ((C31689 + C31688) * C48073 * C16187 +
                (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
                 C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
                 C48177 * C1633) *
                    C48073 * C48144) *
                   C47887 * C48157) *
                  C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C48197 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C48186 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C48160) *
              C47869 * C296 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C48186 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C48197 -
           ((C31890 + C31891) * C48073 * C48144 +
            (C31887 + C31886) * C48073 * C16187) *
               C48160) *
              C47869 * C297 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C48197 -
           ((C31429 * C524 - C31430 * C507 - C31429 * C525 + C48177 * C537 +
             C31427 * C522 - C31428 * C506 - C31427 * C523 + C31425 * C536) *
                C48073 * C48144 +
            (C31889 + C31888) * C48073 * C16187) *
               C48186 +
           ((C31891 + C31890) * C48073 * C16187 +
            (C31427 * C524 - C31428 * C507 - C31427 * C525 + C31425 * C537 +
             C31429 * C2343 - C31430 * C2342 - C31429 * C2344 +
             C48177 * C2345) *
                C48073 * C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C1116 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C1117 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C1117 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C1116 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C48157) *
              C48180 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C1116 -
           ((C32034 + C32035) * C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C1117 +
           ((C31689 + C31688) * C48073 * C16187 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C48073 * C16187 +
           (C31480 + C31481) * C48073 * C48144) *
              C47887 * C1184 -
          ((C31682 + C31683) * C48073 * C48144 +
           (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
            C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
               C48073 * C16187) *
              C47887 * C1185 +
          ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
            C31429 * C1343 - C31430 * C1329 - C31429 * C1344 + C48177 * C1356) *
               C48073 * C16187 +
           (C31684 + C31685) * C48073 * C48144) *
              C47887 * C1186 -
          ((C31429 * C1753 - C31430 * C1749 - C31429 * C1754 + C48177 * C1758 +
            C31427 * C1198 - C31428 * C1191 - C31427 * C1199 + C31425 * C1209) *
               C48073 * C48144 +
           (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
            C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210) *
               C48073 * C16187) *
              C47887 * C1187 +
          ((C31427 * C1202 - C31428 * C1193 - C31427 * C1203 + C31425 * C1211 +
            C31429 * C6522 - C31430 * C6520 - C31429 * C6523 + C48177 * C6526) *
               C48073 * C16187 +
           (C31427 * C1204 - C31428 * C1194 - C31427 * C1205 + C31425 * C1212 +
            C31429 * C6524 - C31430 * C6521 - C31429 * C6525 + C48177 * C6527) *
               C48073 * C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C48197 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C48186 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C48160) *
              C1116 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C48186 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C48197 -
           ((C31429 * C2465 - C31430 * C2461 - C31429 * C2466 + C48177 * C2470 +
             C31427 * C1335 - C31428 * C1325 - C31427 * C1336 +
             C31425 * C1352) *
                C48073 * C48144 +
            (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 + C48177 * C2469 +
             C31427 * C1337 - C31428 * C1326 - C31427 * C1338 +
             C31425 * C1353) *
                C48073 * C16187) *
               C48160) *
              C1117 +
          (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C48197 -
           ((C31429 * C1347 - C31430 * C1331 - C31429 * C1348 + C48177 * C1358 +
             C31427 * C1341 - C31428 * C1328 - C31427 * C1342 +
             C31425 * C1355) *
                C48073 * C48144 +
            (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 + C48177 * C1357 +
             C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
             C31425 * C1356) *
                C48073 * C16187) *
               C48186 +
           ((C31427 * C1345 - C31428 * C1330 - C31427 * C1346 + C31425 * C1357 +
             C31429 * C7384 - C31430 * C7382 - C31429 * C7385 +
             C48177 * C7388) *
                C48073 * C16187 +
            (C31427 * C1347 - C31428 * C1331 - C31427 * C1348 + C31425 * C1358 +
             C31429 * C7386 - C31430 * C7383 - C31429 * C7387 +
             C48177 * C7389) *
                C48073 * C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C1870 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C1871 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C48160) *
              C47869 * C48193 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C1871 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C1870 -
           ((C31890 + C31891) * C48073 * C48144 +
            (C31887 + C31886) * C48073 * C16187) *
               C48160) *
              C47869 * C48180 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C1870 -
           ((C32178 + C32179) * C48073 * C48144 +
            (C31889 + C31888) * C48073 * C16187) *
               C1871 +
           ((C31891 + C31890) * C48073 * C16187 +
            (C31427 * C524 - C31428 * C507 - C31427 * C525 + C31425 * C537 +
             C31429 * C2343 - C31430 * C2342 - C31429 * C2344 +
             C48177 * C2345) *
                C48073 * C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C1870 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C1871 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C48160) *
              C48196 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C1871 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C1870 -
           ((C31429 * C2465 - C31430 * C2461 - C31429 * C2466 + C48177 * C2470 +
             C31427 * C1335 - C31428 * C1325 - C31427 * C1336 +
             C31425 * C1352) *
                C48073 * C48144 +
            (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 + C48177 * C2469 +
             C31427 * C1337 - C31428 * C1326 - C31427 * C1338 +
             C31425 * C1353) *
                C48073 * C16187) *
               C48160) *
              C48184 +
          (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C1870 -
           ((C33126 + C33127) * C48073 * C48144 +
            (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 + C48177 * C1357 +
             C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
             C31425 * C1356) *
                C48073 * C16187) *
               C1871 +
           ((C31427 * C1345 - C31428 * C1330 - C31427 * C1346 + C31425 * C1357 +
             C31429 * C7384 - C31430 * C7382 - C31429 * C7385 +
             C48177 * C7388) *
                C48073 * C16187 +
            (C31427 * C1347 - C31428 * C1331 - C31427 * C1348 + C31425 * C1358 +
             C31429 * C7386 - C31430 * C7383 - C31429 * C7387 +
             C48177 * C7389) *
                C48073 * C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C48073 * C16187 +
           (C31480 + C31481) * C48073 * C48144) *
              C2045 -
          ((C31884 + C31885) * C48073 * C48144 +
           (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
            C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
               C48073 * C16187) *
              C2046 +
          ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
            C31429 * C2060 - C31430 * C2052 - C31429 * C2061 + C48177 * C2070) *
               C48073 * C16187 +
           (C31886 + C31887) * C48073 * C48144) *
              C2047 -
          ((C31429 * C2064 - C31430 * C2054 - C31429 * C2065 + C48177 * C2072 +
            C31427 * C2058 - C31428 * C2051 - C31427 * C2059 + C31425 * C2069) *
               C48073 * C48144 +
           (C31429 * C2062 - C31430 * C2053 - C31429 * C2063 + C48177 * C2071 +
            C31427 * C2060 - C31428 * C2052 - C31427 * C2061 + C31425 * C2070) *
               C48073 * C16187) *
              C2048 +
          ((C31427 * C2062 - C31428 * C2053 - C31427 * C2063 + C31425 * C2071 +
            C31429 * C12651 - C31430 * C12649 - C31429 * C12652 +
            C48177 * C12655) *
               C48073 * C16187 +
           (C31427 * C2064 - C31428 * C2054 - C31427 * C2065 + C31425 * C2072 +
            C31429 * C12653 - C31430 * C12650 - C31429 * C12654 +
            C48177 * C12656) *
               C48073 * C48144) *
              C2049) *
         C47869 * C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C48126 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C1116 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C48126) *
               C1117 +
           (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
              C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
              C48177 * C1356) *
                 C48073 * C16187 +
             (C31684 + C31685) * C48073 * C48144) *
                C48126 -
            ((C33126 + C33127) * C48073 * C48144 +
             (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 +
              C48177 * C1357 + C31427 * C1343 - C31428 * C1329 -
              C31427 * C1344 + C31425 * C1356) *
                 C48073 * C16187) *
                C47974) *
               C48157) *
              C48111 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C48126) *
               C1116 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C48126 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C1117 +
           (((C33127 + C33126) * C48073 * C16187 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C31688 + C31689) * C48073 * C48144 +
             (C31685 + C31684) * C48073 * C16187) *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C48126 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C47974) *
              C47869 * C688 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C47974 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C48126) *
              C47869 * C689 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C48126 -
           ((C32178 + C32179) * C48073 * C48144 +
            (C31889 + C31888) * C48073 * C16187) *
               C47974) *
              C47869 * C690 +
          (((C32179 + C32178) * C48073 * C16187 +
            (C31427 * C526 - C31428 * C508 - C31427 * C527 + C31425 * C538 +
             C31429 * C528 - C31430 * C509 - C31429 * C529 + C48177 * C539) *
                C48073 * C48144) *
               C47974 -
           ((C31486 + C31487) * C48073 * C48144 +
            (C31485 + C31484) * C48073 * C16187) *
               C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C2338 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C2339 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C2340 -
           ((C33982 + C33983) * C48073 * C48144 +
            (C31429 * C2062 - C31430 * C2053 - C31429 * C2063 + C48177 * C2071 +
             C31427 * C2060 - C31428 * C2052 - C31427 * C2061 +
             C31425 * C2070) *
                C48073 * C16187) *
               C48173) *
              C47869 * C48111 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C2339 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C2338 -
           ((C31890 + C31891) * C48073 * C48144 +
            (C31887 + C31886) * C48073 * C16187) *
               C2340 +
           ((C33983 + C33982) * C48073 * C16187 +
            (C31427 * C2056 - C31428 * C2050 - C31427 * C2057 + C31425 * C2068 +
             C31429 * C2066 - C31430 * C2055 - C31429 * C2067 +
             C48177 * C2073) *
                C48073 * C48144) *
               C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C48196 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C48184 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C48157) *
              C296 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C48184 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C48196 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C48157) *
              C297 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C48196 -
           ((C31429 * C973 - C31430 * C965 - C31429 * C974 + C48177 * C980 +
             C31427 * C321 - C31428 * C305 - C31427 * C322 + C31425 * C335) *
                C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C48184 +
           ((C31689 + C31688) * C48073 * C16187 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C48073 * C16187 +
           (C31480 + C31481) * C48073 * C48144) *
              C47887 * C47869 * C108 -
          ((C31482 + C31483) * C48073 * C48144 +
           (C31481 + C31480) * C48073 * C16187) *
              C47887 * C47869 * C109 +
          ((C31483 + C31482) * C48073 * C16187 +
           (C31484 + C31485) * C48073 * C48144) *
              C47887 * C47869 * C110 -
          ((C31486 + C31487) * C48073 * C48144 +
           (C31485 + C31484) * C48073 * C16187) *
              C47887 * C47869 * C111 +
          ((C31487 + C31486) * C48073 * C16187 +
           (C31427 * C132 - C31428 * C120 - C31427 * C133 + C31425 * C141 +
            C31429 * C805 - C31430 * C804 - C31429 * C806 + C48177 * C807) *
               C48073 * C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C1116 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C1117 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C1117 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C1116 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C48157) *
              C48180 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C1116 -
           ((C32034 + C32035) * C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C1117 +
           ((C31689 + C31688) * C48073 * C16187 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C48073 * C16187 +
           (C31480 + C31481) * C48073 * C48144) *
              C47887 * C1184 -
          ((C31682 + C31683) * C48073 * C48144 +
           (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
            C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
               C48073 * C16187) *
              C47887 * C1185 +
          ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
            C31429 * C1343 - C31430 * C1329 - C31429 * C1344 + C48177 * C1356) *
               C48073 * C16187 +
           (C31684 + C31685) * C48073 * C48144) *
              C47887 * C1186 -
          ((C31429 * C1753 - C31430 * C1749 - C31429 * C1754 + C48177 * C1758 +
            C31427 * C1198 - C31428 * C1191 - C31427 * C1199 + C31425 * C1209) *
               C48073 * C48144 +
           (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
            C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210) *
               C48073 * C16187) *
              C47887 * C1187 +
          ((C31427 * C1202 - C31428 * C1193 - C31427 * C1203 + C31425 * C1211 +
            C31429 * C6522 - C31430 * C6520 - C31429 * C6523 + C48177 * C6526) *
               C48073 * C16187 +
           (C31427 * C1204 - C31428 * C1194 - C31427 * C1205 + C31425 * C1212 +
            C31429 * C6524 - C31430 * C6521 - C31429 * C6525 + C48177 * C6527) *
               C48073 * C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C1870 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C1871 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C48160) *
              C47869 * C48193 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C1871 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C1870 -
           ((C31890 + C31891) * C48073 * C48144 +
            (C31887 + C31886) * C48073 * C16187) *
               C48160) *
              C47869 * C48180 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C1870 -
           ((C32178 + C32179) * C48073 * C48144 +
            (C31889 + C31888) * C48073 * C16187) *
               C1871 +
           ((C31891 + C31890) * C48073 * C16187 +
            (C31427 * C524 - C31428 * C507 - C31427 * C525 + C31425 * C537 +
             C31429 * C2343 - C31430 * C2342 - C31429 * C2344 +
             C48177 * C2345) *
                C48073 * C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C1870 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C1871 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C48160) *
              C48196 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C1871 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C1870 -
           ((C31429 * C2465 - C31430 * C2461 - C31429 * C2466 + C48177 * C2470 +
             C31427 * C1335 - C31428 * C1325 - C31427 * C1336 +
             C31425 * C1352) *
                C48073 * C48144 +
            (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 + C48177 * C2469 +
             C31427 * C1337 - C31428 * C1326 - C31427 * C1338 +
             C31425 * C1353) *
                C48073 * C16187) *
               C48160) *
              C48184 +
          (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C1870 -
           ((C33126 + C33127) * C48073 * C48144 +
            (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 + C48177 * C1357 +
             C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
             C31425 * C1356) *
                C48073 * C16187) *
               C1871 +
           ((C31427 * C1345 - C31428 * C1330 - C31427 * C1346 + C31425 * C1357 +
             C31429 * C7384 - C31430 * C7382 - C31429 * C7385 +
             C48177 * C7388) *
                C48073 * C16187 +
            (C31427 * C1347 - C31428 * C1331 - C31427 * C1348 + C31425 * C1358 +
             C31429 * C7386 - C31430 * C7383 - C31429 * C7387 +
             C48177 * C7389) *
                C48073 * C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C3332 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C48125 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C3332) *
               C47932) *
              C47846 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C3332) *
               C48125 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C3332 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C47932) *
              C47855 +
          ((((C31483 + C31482) * C48073 * C16187 +
             (C31484 + C31485) * C48073 * C48144) *
                C3332 -
            ((C32178 + C32179) * C48073 * C48144 +
             (C31889 + C31888) * C48073 * C16187) *
                C47974) *
               C48125 +
           (((C32401 + C32400) * C48073 * C16187 +
             (C31427 * C973 - C31428 * C965 - C31427 * C974 + C31425 * C980 +
              C31429 * C2221 - C31430 * C2220 - C31429 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C32034 + C32035) * C48073 * C48144 +
             (C31687 + C31686) * C48073 * C16187) *
                C3332) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C47970 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47977 +
            ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
              C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
              C48177 * C2070) *
                 C48073 * C16187 +
             (C31886 + C31887) * C48073 * C48144) *
                C3840) *
               C48125 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47977 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C47970 -
            ((C33838 + C33839) * C48073 * C48144 +
             (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 +
              C48177 * C2469 + C31427 * C1337 - C31428 * C1326 -
              C31427 * C1338 + C31425 * C1353) *
                 C48073 * C16187) *
                C3840) *
               C47932) *
              C2678 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47977 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C47970 -
            ((C31890 + C31891) * C48073 * C48144 +
             (C31887 + C31886) * C48073 * C16187) *
                C3840) *
               C48125 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C47970 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47977 +
            ((C33839 + C33838) * C48073 * C16187 +
             (C31427 * C1333 - C31428 * C1324 - C31427 * C1334 +
              C31425 * C1351 + C31429 * C2467 - C31430 * C2462 -
              C31429 * C2468 + C48177 * C2471) *
                 C48073 * C48144) *
                C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C3332 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C48196 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C3332) *
               C48184 +
           (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
              C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
              C48177 * C1356) *
                 C48073 * C16187 +
             (C31684 + C31685) * C48073 * C48144) *
                C3332 -
            ((C33126 + C33127) * C48073 * C48144 +
             (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 +
              C48177 * C1357 + C31427 * C1343 - C31428 * C1329 -
              C31427 * C1344 + C31425 * C1356) *
                 C48073 * C16187) *
                C47974) *
               C48157) *
              C2678 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C3332) *
               C48196 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C3332 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C48184 +
           (((C33127 + C33126) * C48073 * C16187 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C31688 + C31689) * C48073 * C48144 +
             (C31685 + C31684) * C48073 * C16187) *
                C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C3332 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C47974) *
              C47869 * C48202 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C47974 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C3332) *
              C47869 * C48195 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C3332 -
           ((C32178 + C32179) * C48073 * C48144 +
            (C31889 + C31888) * C48073 * C16187) *
               C47974) *
              C47869 * C48182 +
          (((C32179 + C32178) * C48073 * C16187 +
            (C31427 * C526 - C31428 * C508 - C31427 * C527 + C31425 * C538 +
             C31429 * C528 - C31430 * C509 - C31429 * C529 + C48177 * C539) *
                C48073 * C48144) *
               C47974 -
           ((C31486 + C31487) * C48073 * C48144 +
            (C31485 + C31484) * C48073 * C16187) *
               C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C48204 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C48201 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C48192 -
           ((C33982 + C33983) * C48073 * C48144 +
            (C31429 * C2062 - C31430 * C2053 - C31429 * C2063 + C48177 * C2071 +
             C31427 * C2060 - C31428 * C2052 - C31427 * C2061 +
             C31425 * C2070) *
                C48073 * C16187) *
               C48173) *
              C47869 * C2678 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C48201 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C48204 -
           ((C31890 + C31891) * C48073 * C48144 +
            (C31887 + C31886) * C48073 * C16187) *
               C48192 +
           ((C33983 + C33982) * C48073 * C16187 +
            (C31427 * C2056 - C31428 * C2050 - C31427 * C2057 + C31425 * C2068 +
             C31429 * C2066 - C31430 * C2055 - C31429 * C2067 +
             C48177 * C2073) *
                C48073 * C48144) *
               C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47970 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C47977 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C3840) *
              C47869 * C47846 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C47977 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47970 -
           ((C31890 + C31891) * C48073 * C48144 +
            (C31887 + C31886) * C48073 * C16187) *
               C3840) *
              C47869 * C47855 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47970 -
           ((C32178 + C32179) * C48073 * C48144 +
            (C31889 + C31888) * C48073 * C16187) *
               C47977 +
           ((C31891 + C31890) * C48073 * C16187 +
            (C31427 * C524 - C31428 * C507 - C31427 * C525 + C31425 * C537 +
             C31429 * C2343 - C31430 * C2342 - C31429 * C2344 +
             C48177 * C2345) *
                C48073 * C48144) *
               C3840) *
              C47869 * C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C3332 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C47974) *
              C47869 * C48202 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C47974 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C3332) *
              C47869 * C48195 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C3332 -
           ((C32178 + C32179) * C48073 * C48144 +
            (C31889 + C31888) * C48073 * C16187) *
               C47974) *
              C47869 * C48182 +
          (((C32179 + C32178) * C48073 * C16187 +
            (C31427 * C526 - C31428 * C508 - C31427 * C527 + C31425 * C538 +
             C31429 * C528 - C31430 * C509 - C31429 * C529 + C48177 * C539) *
                C48073 * C48144) *
               C47974 -
           ((C31486 + C31487) * C48073 * C48144 +
            (C31485 + C31484) * C48073 * C16187) *
               C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C3332 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C48196 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C3332) *
               C48184 +
           (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
              C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
              C48177 * C1356) *
                 C48073 * C16187 +
             (C31684 + C31685) * C48073 * C48144) *
                C3332 -
            ((C33126 + C33127) * C48073 * C48144 +
             (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 +
              C48177 * C1357 + C31427 * C1343 - C31428 * C1329 -
              C31427 * C1344 + C31425 * C1356) *
                 C48073 * C16187) *
                C47974) *
               C48157) *
              C2678 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C3332) *
               C48196 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C3332 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C48184 +
           (((C33127 + C33126) * C48073 * C16187 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C31688 + C31689) * C48073 * C48144 +
             (C31685 + C31684) * C48073 * C16187) *
                C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C48125 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C47932) *
              C688 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C47932 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C48125) *
              C689 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C48125 -
           ((C32034 + C32035) * C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C47932) *
              C690 +
          (((C32035 + C32034) * C48073 * C16187 +
            (C31427 * C325 - C31428 * C307 - C31427 * C326 + C31425 * C337 +
             C31429 * C975 - C31430 * C966 - C31429 * C976 + C48177 * C981) *
                C48073 * C48144) *
               C47887 * C47932 -
           ((C31486 + C31487) * C48073 * C48144 +
            (C31485 + C31484) * C48073 * C16187) *
               C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C1458 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C1459 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C1460 -
           ((C32918 + C32919) * C48073 * C48144 +
            (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
             C31427 * C1200 - C31428 * C1192 - C31427 * C1201 +
             C31425 * C1210) *
                C48073 * C16187) *
               C47887 * C48167) *
              C48111 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C1459 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C1458 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C1460 +
           ((C32919 + C32918) * C48073 * C16187 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48073 * C48144) *
               C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C48126 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C48125 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C48126) *
               C47932) *
              C296 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C48126) *
               C48125 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C48126 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C47932) *
              C297 +
          ((((C31483 + C31482) * C48073 * C16187 +
             (C31484 + C31485) * C48073 * C48144) *
                C48126 -
            ((C32178 + C32179) * C48073 * C48144 +
             (C31889 + C31888) * C48073 * C16187) *
                C47974) *
               C48125 +
           (((C32401 + C32400) * C48073 * C16187 +
             (C31427 * C973 - C31428 * C965 - C31427 * C974 + C31425 * C980 +
              C31429 * C2221 - C31430 * C2220 - C31429 * C2222 +
              C48177 * C2223) *
                 C48073 * C48144) *
                C47974 -
            ((C32034 + C32035) * C48073 * C48144 +
             (C31687 + C31686) * C48073 * C16187) *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C48126 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C47974) *
              C1458 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C47974 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C48126) *
              C1459 +
          (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C48126 -
           ((C33126 + C33127) * C48073 * C48144 +
            (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 + C48177 * C1357 +
             C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
             C31425 * C1356) *
                C48073 * C16187) *
               C47974) *
              C1460 +
          (((C31427 * C1751 - C31428 * C1748 - C31427 * C1752 + C31425 * C1757 +
             C31429 * C6021 - C31430 * C6019 - C31429 * C6022 +
             C48177 * C6025) *
                C48073 * C16187 +
            (C31427 * C1753 - C31428 * C1749 - C31427 * C1754 + C31425 * C1758 +
             C31429 * C6023 - C31430 * C6020 - C31429 * C6024 +
             C48177 * C6026) *
                C48073 * C48144) *
               C47974 -
           ((C32918 + C32919) * C48073 * C48144 +
            (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
             C31427 * C1200 - C31428 * C1192 - C31427 * C1201 +
             C31425 * C1210) *
                C48073 * C16187) *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C48196 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C48184 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C48157) *
              C296 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C48184 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C48196 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C48157) *
              C297 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C48196 -
           ((C31429 * C973 - C31430 * C965 - C31429 * C974 + C48177 * C980 +
             C31427 * C321 - C31428 * C305 - C31427 * C322 + C31425 * C335) *
                C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C48184 +
           ((C31689 + C31688) * C48073 * C16187 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C48073 * C16187 +
           (C31480 + C31481) * C48073 * C48144) *
              C47887 * C47869 * C108 -
          ((C31482 + C31483) * C48073 * C48144 +
           (C31481 + C31480) * C48073 * C16187) *
              C47887 * C47869 * C109 +
          ((C31483 + C31482) * C48073 * C16187 +
           (C31484 + C31485) * C48073 * C48144) *
              C47887 * C47869 * C110 -
          ((C31486 + C31487) * C48073 * C48144 +
           (C31485 + C31484) * C48073 * C16187) *
              C47887 * C47869 * C111 +
          ((C31487 + C31486) * C48073 * C16187 +
           (C31427 * C132 - C31428 * C120 - C31427 * C133 + C31425 * C141 +
            C31429 * C805 - C31430 * C804 - C31429 * C806 + C48177 * C807) *
               C48073 * C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C48197 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C48186 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C48160) *
              C47869 * C296 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C48186 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C48197 -
           ((C31890 + C31891) * C48073 * C48144 +
            (C31887 + C31886) * C48073 * C16187) *
               C48160) *
              C47869 * C297 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C48197 -
           ((C31429 * C524 - C31430 * C507 - C31429 * C525 + C48177 * C537 +
             C31427 * C522 - C31428 * C506 - C31427 * C523 + C31425 * C536) *
                C48073 * C48144 +
            (C31889 + C31888) * C48073 * C16187) *
               C48186 +
           ((C31891 + C31890) * C48073 * C16187 +
            (C31427 * C524 - C31428 * C507 - C31427 * C525 + C31425 * C537 +
             C31429 * C2343 - C31430 * C2342 - C31429 * C2344 +
             C48177 * C2345) *
                C48073 * C48144) *
               C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C1116 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C1117 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C1117 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C1116 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C48157) *
              C48180 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C1116 -
           ((C32034 + C32035) * C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C1117 +
           ((C31689 + C31688) * C48073 * C16187 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C48073 * C16187 +
           (C31480 + C31481) * C48073 * C48144) *
              C47887 * C1184 -
          ((C31682 + C31683) * C48073 * C48144 +
           (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
            C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
               C48073 * C16187) *
              C47887 * C1185 +
          ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
            C31429 * C1343 - C31430 * C1329 - C31429 * C1344 + C48177 * C1356) *
               C48073 * C16187 +
           (C31684 + C31685) * C48073 * C48144) *
              C47887 * C1186 -
          ((C31429 * C1753 - C31430 * C1749 - C31429 * C1754 + C48177 * C1758 +
            C31427 * C1198 - C31428 * C1191 - C31427 * C1199 + C31425 * C1209) *
               C48073 * C48144 +
           (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
            C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210) *
               C48073 * C16187) *
              C47887 * C1187 +
          ((C31427 * C1202 - C31428 * C1193 - C31427 * C1203 + C31425 * C1211 +
            C31429 * C6522 - C31430 * C6520 - C31429 * C6523 + C48177 * C6526) *
               C48073 * C16187 +
           (C31427 * C1204 - C31428 * C1194 - C31427 * C1205 + C31425 * C1212 +
            C31429 * C6524 - C31430 * C6521 - C31429 * C6525 + C48177 * C6527) *
               C48073 * C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C48197 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C48186 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C48073 * C16187 +
            (C31886 + C31887) * C48073 * C48144) *
               C48160) *
              C1116 +
          (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
             C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
             C48177 * C1353) *
                C48073 * C16187 +
            (C32398 + C32399) * C48073 * C48144) *
               C48186 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C48197 -
           ((C31429 * C2465 - C31430 * C2461 - C31429 * C2466 + C48177 * C2470 +
             C31427 * C1335 - C31428 * C1325 - C31427 * C1336 +
             C31425 * C1352) *
                C48073 * C48144 +
            (C31429 * C2463 - C31430 * C2460 - C31429 * C2464 + C48177 * C2469 +
             C31427 * C1337 - C31428 * C1326 - C31427 * C1338 +
             C31425 * C1353) *
                C48073 * C16187) *
               C48160) *
              C1117 +
          (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C48197 -
           ((C31429 * C1347 - C31430 * C1331 - C31429 * C1348 + C48177 * C1358 +
             C31427 * C1341 - C31428 * C1328 - C31427 * C1342 +
             C31425 * C1355) *
                C48073 * C48144 +
            (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 + C48177 * C1357 +
             C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
             C31425 * C1356) *
                C48073 * C16187) *
               C48186 +
           ((C31427 * C1345 - C31428 * C1330 - C31427 * C1346 + C31425 * C1357 +
             C31429 * C7384 - C31430 * C7382 - C31429 * C7385 +
             C48177 * C7388) *
                C48073 * C16187 +
            (C31427 * C1347 - C31428 * C1331 - C31427 * C1348 + C31425 * C1358 +
             C31429 * C7386 - C31430 * C7383 - C31429 * C7387 +
             C48177 * C7389) *
                C48073 * C48144) *
               C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C48126 -
           ((C31884 + C31885) * C48073 * C48144 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C48073 * C16187) *
               C47974) *
              C47869 * C688 +
          (((C31885 + C31884) * C48073 * C16187 +
            (C31888 + C31889) * C48073 * C48144) *
               C47974 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C48126) *
              C47869 * C689 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C48126 -
           ((C32178 + C32179) * C48073 * C48144 +
            (C31889 + C31888) * C48073 * C16187) *
               C47974) *
              C47869 * C690 +
          (((C32179 + C32178) * C48073 * C16187 +
            (C31427 * C526 - C31428 * C508 - C31427 * C527 + C31425 * C538 +
             C31429 * C528 - C31430 * C509 - C31429 * C529 + C48177 * C539) *
                C48073 * C48144) *
               C47974 -
           ((C31486 + C31487) * C48073 * C48144 +
            (C31485 + C31484) * C48073 * C16187) *
               C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C48073 * C16187 +
             (C31480 + C31481) * C48073 * C48144) *
                C48126 -
            ((C31884 + C31885) * C48073 * C48144 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C48073 * C16187) *
                C47974) *
               C1116 +
           (((C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977 +
              C31429 * C1337 - C31430 * C1326 - C31429 * C1338 +
              C48177 * C1353) *
                 C48073 * C16187 +
             (C32398 + C32399) * C48073 * C48144) *
                C47974 -
            ((C31682 + C31683) * C48073 * C48144 +
             (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
              C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                 C48073 * C16187) *
                C48126) *
               C1117 +
           (((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
              C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
              C48177 * C1356) *
                 C48073 * C16187 +
             (C31684 + C31685) * C48073 * C48144) *
                C48126 -
            ((C33126 + C33127) * C48073 * C48144 +
             (C31429 * C1345 - C31430 * C1330 - C31429 * C1346 +
              C48177 * C1357 + C31427 * C1343 - C31428 * C1329 -
              C31427 * C1344 + C31425 * C1356) *
                 C48073 * C16187) *
                C47974) *
               C48157) *
              C48111 +
          ((((C31885 + C31884) * C48073 * C16187 +
             (C31888 + C31889) * C48073 * C48144) *
                C47974 -
            ((C31482 + C31483) * C48073 * C48144 +
             (C31481 + C31480) * C48073 * C16187) *
                C48126) *
               C1116 +
           (((C31683 + C31682) * C48073 * C16187 +
             (C31686 + C31687) * C48073 * C48144) *
                C48126 -
            ((C32400 + C32401) * C48073 * C48144 +
             (C32399 + C32398) * C48073 * C16187) *
                C47974) *
               C1117 +
           (((C33127 + C33126) * C48073 * C16187 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48073 * C48144) *
                C47974 -
            ((C31688 + C31689) * C48073 * C48144 +
             (C31685 + C31684) * C48073 * C16187) *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C48073 * C16187 +
           (C31480 + C31481) * C48073 * C48144) *
              C47887 * C47869 * C108 -
          ((C31482 + C31483) * C48073 * C48144 +
           (C31481 + C31480) * C48073 * C16187) *
              C47887 * C47869 * C109 +
          ((C31483 + C31482) * C48073 * C16187 +
           (C31484 + C31485) * C48073 * C48144) *
              C47887 * C47869 * C110 -
          ((C31486 + C31487) * C48073 * C48144 +
           (C31485 + C31484) * C48073 * C16187) *
              C47887 * C47869 * C111 +
          ((C31487 + C31486) * C48073 * C16187 +
           (C31427 * C132 - C31428 * C120 - C31427 * C133 + C31425 * C141 +
            C31429 * C805 - C31430 * C804 - C31429 * C806 + C48177 * C807) *
               C48073 * C48144) *
              C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C48196 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C48184 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C48157) *
              C296 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C48184 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C48196 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C48157) *
              C297 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C48196 -
           ((C31429 * C973 - C31430 * C965 - C31429 * C974 + C48177 * C980 +
             C31427 * C321 - C31428 * C305 - C31427 * C322 + C31425 * C335) *
                C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C48184 +
           ((C31689 + C31688) * C48073 * C16187 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C48073 * C16187 +
            (C31480 + C31481) * C48073 * C48144) *
               C47887 * C1116 -
           ((C31682 + C31683) * C48073 * C48144 +
            (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
             C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
                C48073 * C16187) *
               C47887 * C1117 +
           ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
             C31429 * C1343 - C31430 * C1329 - C31429 * C1344 +
             C48177 * C1356) *
                C48073 * C16187 +
            (C31684 + C31685) * C48073 * C48144) *
               C47887 * C48157) *
              C48193 +
          (((C31683 + C31682) * C48073 * C16187 +
            (C31686 + C31687) * C48073 * C48144) *
               C47887 * C1117 -
           ((C31482 + C31483) * C48073 * C48144 +
            (C31481 + C31480) * C48073 * C16187) *
               C47887 * C1116 -
           ((C31688 + C31689) * C48073 * C48144 +
            (C31685 + C31684) * C48073 * C16187) *
               C47887 * C48157) *
              C48180 +
          (((C31483 + C31482) * C48073 * C16187 +
            (C31484 + C31485) * C48073 * C48144) *
               C47887 * C1116 -
           ((C32034 + C32035) * C48073 * C48144 +
            (C31687 + C31686) * C48073 * C16187) *
               C47887 * C1117 +
           ((C31689 + C31688) * C48073 * C16187 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48073 * C48144) *
               C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C48073 * C16187 +
           (C31480 + C31481) * C48073 * C48144) *
              C47887 * C1184 -
          ((C31682 + C31683) * C48073 * C48144 +
           (C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977 +
            C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331) *
               C48073 * C16187) *
              C47887 * C1185 +
          ((C31427 * C315 - C31428 * C302 - C31427 * C316 + C31425 * C332 +
            C31429 * C1343 - C31430 * C1329 - C31429 * C1344 + C48177 * C1356) *
               C48073 * C16187 +
           (C31684 + C31685) * C48073 * C48144) *
              C47887 * C1186 -
          ((C31429 * C1753 - C31430 * C1749 - C31429 * C1754 + C48177 * C1758 +
            C31427 * C1198 - C31428 * C1191 - C31427 * C1199 + C31425 * C1209) *
               C48073 * C48144 +
           (C31429 * C1751 - C31430 * C1748 - C31429 * C1752 + C48177 * C1757 +
            C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210) *
               C48073 * C16187) *
              C47887 * C1187 +
          ((C31427 * C1202 - C31428 * C1193 - C31427 * C1203 + C31425 * C1211 +
            C31429 * C6522 - C31430 * C6520 - C31429 * C6523 + C48177 * C6526) *
               C48073 * C16187 +
           (C31427 * C1204 - C31428 * C1194 - C31427 * C1205 + C31425 * C1212 +
            C31429 * C6524 - C31430 * C6521 - C31429 * C6525 + C48177 * C6527) *
               C48073 * C48144) *
              C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C47928 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C47935 +
           ((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C47887 * C2938) *
              C47846 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C47935 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C47928 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C2938) *
              C47855 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C47928 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C47935 +
           ((C31689 + C31688) * C4813 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C2938) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C48126 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C47928 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C48126) *
               C47935 +
           (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
                C48126 -
            ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
                C47974) *
               C2938) *
              C2678 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C48126) *
               C47928 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C48126 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C47935 +
           (((C33127 + C33126) * C4813 +
             (C31427 * C1753 - C31428 * C1749 - C31427 * C1754 +
              C31425 * C1758 + C31429 * C6023 - C31430 * C6020 -
              C31429 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
                C48126) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C48203 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C48199 +
           ((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C47887 * C48189 -
           ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
               C47887 * C48167) *
              C2678 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C48199 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C48203 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C48189 +
           ((C32919 + C32918) * C4813 +
            (C31427 * C1204 - C31428 * C1194 - C31427 * C1205 + C31425 * C1212 +
             C31429 * C6524 - C31430 * C6521 - C31429 * C6525 +
             C48177 * C6527) *
                C48175) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C2570 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C47932) *
              C48202 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C47932 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C2570) *
              C48195 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C2570 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C47932) *
              C48182 +
          (((C32035 + C32034) * C4813 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48175) *
               C47818 * C47887 * C47932 -
           ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
               C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C48197 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C48186 +
            ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
              C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
              C48177 * C2070) *
                 C4813 +
             (C38386 + C38387) * C48175) *
                C47818 * C48160) *
               C2570 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C48186 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C48197 -
            ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
                C48160) *
               C47932) *
              C2678 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C48186 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C48197 -
            ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
                C48160) *
               C2570 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C48197 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C48186 +
            ((C33839 + C33838) * C4813 +
             (C31427 * C1347 - C31428 * C1331 - C31427 * C1348 +
              C31425 * C1358 + C31429 * C7386 - C31430 * C7383 -
              C31429 * C7387 + C48177 * C7389) *
                 C48175) *
                C47818 * C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C48126 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C2570 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C48126) *
               C47932) *
              C47846 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C48126) *
               C2570 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C48126 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C47932) *
              C47855 +
          ((((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
                C48126 -
            ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
                C47974) *
               C2570 +
           (((C32401 + C32400) * C4813 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
                C48126) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C2570 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C47932) *
              C48202 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C47932 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C2570) *
              C48195 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C2570 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C47932) *
              C48182 +
          (((C32035 + C32034) * C4813 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48175) *
               C47818 * C47887 * C47932 -
           ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
               C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C48203 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C48199 +
           ((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C47887 * C48189 -
           ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
               C47887 * C48167) *
              C2678 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C48199 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C48203 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C48189 +
           ((C32919 + C32918) * C4813 +
            (C31427 * C1204 - C31428 * C1194 - C31427 * C1205 + C31425 * C1212 +
             C31429 * C6524 - C31430 * C6521 - C31429 * C6525 +
             C48177 * C6527) *
                C48175) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C3332 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C47928 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C3332) *
               C47935 +
           (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
                C3332 -
            ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
                C47974) *
               C2938) *
              C48111 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C3332) *
               C47928 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C3332 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C47935 +
           (((C33127 + C33126) * C4813 +
             (C31427 * C1753 - C31428 * C1749 - C31427 * C1754 +
              C31425 * C1758 + C31429 * C6023 - C31430 * C6020 -
              C31429 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
                C3332) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47970 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C47977 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C3840) *
              C47928 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C47977 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47970 -
           ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
               C3840) *
              C47935 +
          (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C47970 -
           ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
               C47977 +
           ((C38391 + C38390) * C4813 +
            (C31427 * C6021 - C31428 * C6019 - C31427 * C6022 + C31425 * C6025 +
             C31429 * C23509 - C31430 * C23508 - C31429 * C23510 +
             C48177 * C23511) *
                C48175) *
               C47818 * C3840) *
              C2938) *
         C47841) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C3332 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C47974) *
              C48203 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C47974 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C3332) *
              C48199 +
          (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C3332 -
           ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
               C47974) *
              C48189 +
          (((C38859 + C38858) * C4813 +
            (C31427 * C6522 - C31428 * C6520 - C31427 * C6523 + C31425 * C6526 +
             C31429 * C22517 - C31430 * C22516 - C31429 * C22518 +
             C48177 * C22519) *
                C48175) *
               C47818 * C47974 -
           ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C3332 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C2570 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C3332) *
               C47932) *
              C48193 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C3332) *
               C2570 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C3332 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C47932) *
              C48180 +
          ((((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
                C3332 -
            ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
                C47974) *
               C2570 +
           (((C32401 + C32400) * C4813 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
                C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C48204 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C48201 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C48192 -
           ((C39700 + C39701) * C48175 +
            (C31429 * C2062 - C31430 * C2053 - C31429 * C2063 + C48177 * C2071 +
             C31427 * C2060 - C31428 * C2052 - C31427 * C2061 +
             C31425 * C2070) *
                C4813) *
               C47818 * C48173) *
              C2570 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C48201 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C48204 -
           ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
               C48192 +
           ((C39701 + C39700) * C4813 +
            (C31427 * C7384 - C31428 * C7382 - C31427 * C7385 + C31425 * C7388 +
             C31429 * C23163 - C31430 * C23162 - C31429 * C23164 +
             C48177 * C23165) *
                C48175) *
               C47818 * C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C47970 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47977 +
            ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
              C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
              C48177 * C2070) *
                 C4813 +
             (C38386 + C38387) * C48175) *
                C47818 * C3840) *
               C2570 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47977 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C47970 -
            ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
                C3840) *
               C47932) *
              C48111 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47977 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C47970 -
            ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
                C3840) *
               C2570 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C47970 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47977 +
            ((C33839 + C33838) * C4813 +
             (C31427 * C1347 - C31428 * C1331 - C31427 * C1348 +
              C31425 * C1358 + C31429 * C7386 - C31430 * C7383 -
              C31429 * C7387 + C48177 * C7389) *
                 C48175) *
                C47818 * C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C3332 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C2570 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C3332) *
               C47932) *
              C48193 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C3332) *
               C2570 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C3332 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C47932) *
              C48180 +
          ((((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
                C3332 -
            ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
                C47974) *
               C2570 +
           (((C32401 + C32400) * C4813 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
                C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C3332 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C47974) *
              C48203 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C47974 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C3332) *
              C48199 +
          (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C3332 -
           ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
               C47974) *
              C48189 +
          (((C38859 + C38858) * C4813 +
            (C31427 * C6522 - C31428 * C6520 - C31427 * C6523 + C31425 * C6526 +
             C31429 * C22517 - C31430 * C22516 - C31429 * C22518 +
             C48177 * C22519) *
                C48175) *
               C47818 * C47974 -
           ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
               C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C1458 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C1459 +
           ((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C47887 * C1460 -
           ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
               C47887 * C48167) *
              C48111 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C1459 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C1458 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C1460 +
           ((C32919 + C32918) * C4813 +
            (C31427 * C1204 - C31428 * C1194 - C31427 * C1205 + C31425 * C1212 +
             C31429 * C6524 - C31430 * C6521 - C31429 * C6525 +
             C48177 * C6527) *
                C48175) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C48125 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C47932) *
              C688 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C47932 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C48125) *
              C689 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C48125 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C47932) *
              C690 +
          (((C32035 + C32034) * C4813 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48175) *
               C47818 * C47887 * C47932 -
           ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
               C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C1870 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C1871 +
            ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
              C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
              C48177 * C2070) *
                 C4813 +
             (C38386 + C38387) * C48175) *
                C47818 * C48160) *
               C48125 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C1871 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C1870 -
            ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
                C48160) *
               C47932) *
              C48111 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C1871 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C1870 -
            ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
                C48160) *
               C48125 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C1870 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C1871 +
            ((C33839 + C33838) * C4813 +
             (C31427 * C1347 - C31428 * C1331 - C31427 * C1348 +
              C31425 * C1358 + C31429 * C7386 - C31430 * C7383 -
              C31429 * C7387 + C48177 * C7389) *
                 C48175) *
                C47818 * C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C48126 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C47974) *
              C1458 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C47974 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C48126) *
              C1459 +
          (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C48126 -
           ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
               C47974) *
              C1460 +
          (((C38859 + C38858) * C4813 +
            (C31427 * C6522 - C31428 * C6520 - C31427 * C6523 + C31425 * C6526 +
             C31429 * C22517 - C31430 * C22516 - C31429 * C22518 +
             C48177 * C22519) *
                C48175) *
               C47818 * C47974 -
           ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C48126 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C48125 +
           (((C37947 + C37946) * C4813 +
             (C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
              C31425 * C1356 + C31429 * C1345 - C31430 * C1330 -
              C31429 * C1346 + C48177 * C1357) *
                 C48175) *
                C47818 * C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C48126) *
               C47932) *
              C296 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C48126) *
               C48125 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C48126 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C47932) *
              C297 +
          ((((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
                C48126 -
            ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
                C47974) *
               C48125 +
           (((C32401 + C32400) * C4813 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C2338 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C2339 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C2340 -
           ((C39700 + C39701) * C48175 +
            (C31429 * C2062 - C31430 * C2053 - C31429 * C2063 + C48177 * C2071 +
             C31427 * C2060 - C31428 * C2052 - C31427 * C2061 +
             C31425 * C2070) *
                C4813) *
               C47818 * C48173) *
              C48125 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C2339 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C2338 -
           ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
               C2340 +
           ((C39701 + C39700) * C4813 +
            (C31427 * C7384 - C31428 * C7382 - C31427 * C7385 + C31425 * C7388 +
             C31429 * C23163 - C31430 * C23162 - C31429 * C23164 +
             C48177 * C23165) *
                C48175) *
               C47818 * C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
                C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                   C4813 +
               (C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331 +
                C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977) *
                   C48175) *
                  C47818 * C47887 * C47869 * C108 -
              ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) *
                  C47818 * C47887 * C47869 * C109 +
              ((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) *
                  C47818 * C47887 * C47869 * C110 -
              ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) *
                  C47818 * C47887 * C47869 * C111 +
              ((C31487 + C31486) * C4813 +
               (C31427 * C325 - C31428 * C307 - C31427 * C326 + C31425 * C337 +
                C31429 * C975 - C31430 * C966 - C31429 * C976 + C48177 * C981) *
                   C48175) *
                  C47818 * C47887 * C47869 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
                 C31429 * C514 - C31430 * C502 - C31429 * C515 +
                 C48177 * C532) *
                    C4813 +
                (C37330 + C37331) * C48175) *
                   C47818 * C47887 * C48196 -
               ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) *
                   C47818 * C47887 * C48184 +
               ((C37333 + C37332) * C4813 +
                (C31427 * C1200 - C31428 * C1192 - C31427 * C1201 +
                 C31425 * C1210 + C31429 * C1751 - C31430 * C1748 -
                 C31429 * C1752 + C48177 * C1757) *
                    C48175) *
                   C47818 * C47887 * C48157) *
                  C296 +
              (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) *
                   C47818 * C47887 * C48184 -
               ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) *
                   C47818 * C47887 * C48196 -
               ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) *
                   C47818 * C47887 * C48157) *
                  C297 +
              (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) *
                   C47818 * C47887 * C48196 -
               ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) *
                   C47818 * C47887 * C48184 +
               ((C31689 + C31688) * C4813 +
                (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 +
                 C31425 * C1208 + C31429 * C1755 - C31430 * C1750 -
                 C31429 * C1756 + C48177 * C1759) *
                    C48175) *
                   C47818 * C47887 * C48157) *
                  C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C48197 -
           ((C31429 * C1337 - C31430 * C1326 - C31429 * C1338 + C48177 * C1353 +
             C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977) *
                C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C48186 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C31427 * C1337 - C31428 * C1326 - C31427 * C1338 + C31425 * C1353 +
             C31429 * C2463 - C31430 * C2460 - C31429 * C2464 +
             C48177 * C2469) *
                C48175) *
               C47818 * C48160) *
              C47869 * C296 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C48186 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C48197 -
           ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
               C48160) *
              C47869 * C297 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C48197 -
           ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
               C48186 +
           ((C31891 + C31890) * C4813 +
            (C31427 * C1333 - C31428 * C1324 - C31427 * C1334 + C31425 * C1351 +
             C31429 * C2467 - C31430 * C2462 - C31429 * C2468 +
             C48177 * C2471) *
                C48175) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C1116 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C1117 +
           ((C37333 + C37332) * C4813 +
            (C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210 +
             C31429 * C1751 - C31430 * C1748 - C31429 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48193 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C1117 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C1116 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C48157) *
              C48180 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C1116 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C1117 +
           ((C31689 + C31688) * C4813 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C4813 +
           (C37330 + C37331) * C48175) *
              C47818 * C47887 * C1184 -
          ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
              C47887 * C1185 +
          ((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
              C47887 * C1186 -
          ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
              C47887 * C1187 +
          ((C38203 + C38202) * C4813 +
           (C31427 * C5846 - C31428 * C5844 - C31427 * C5847 + C31425 * C5850 +
            C31429 * C22870 - C31430 * C22869 - C31429 * C22871 +
            C48177 * C22872) *
               C48175) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C48197 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C48186 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C48160) *
              C1116 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C48186 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C48197 -
           ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
               C48160) *
              C1117 +
          (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C48197 -
           ((C31429 * C6021 - C31430 * C6019 - C31429 * C6022 + C48177 * C6025 +
             C31427 * C1751 - C31428 * C1748 - C31427 * C1752 +
             C31425 * C1757) *
                C48175 +
            (C38389 + C38388) * C4813) *
               C47818 * C48186 +
           ((C38391 + C38390) * C4813 +
            (C31427 * C6021 - C31428 * C6019 - C31427 * C6022 + C31425 * C6025 +
             C31429 * C23509 - C31430 * C23508 - C31429 * C23510 +
             C48177 * C23511) *
                C48175) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C1870 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C1871 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C48160) *
              C47869 * C48193 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C1871 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C1870 -
           ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
               C48160) *
              C47869 * C48180 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C1870 -
           ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
               C1871 +
           ((C31891 + C31890) * C4813 +
            (C31427 * C1333 - C31428 * C1324 - C31427 * C1334 + C31425 * C1351 +
             C31429 * C2467 - C31430 * C2462 - C31429 * C2468 +
             C48177 * C2471) *
                C48175) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C1870 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C1871 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C48160) *
              C48196 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C1871 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C1870 -
           ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
               C48160) *
              C48184 +
          (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C1870 -
           ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
               C1871 +
           ((C38391 + C38390) * C4813 +
            (C31427 * C6021 - C31428 * C6019 - C31427 * C6022 + C31425 * C6025 +
             C31429 * C23509 - C31430 * C23508 - C31429 * C23510 +
             C48177 * C23511) *
                C48175) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C4813 +
           (C37330 + C37331) * C48175) *
              C47818 * C2045 -
          ((C37946 + C37947) * C48175 +
           (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
            C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
               C4813) *
              C47818 * C2046 +
          ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
            C31429 * C2060 - C31430 * C2052 - C31429 * C2061 + C48177 * C2070) *
               C4813 +
           (C38386 + C38387) * C48175) *
              C47818 * C2047 -
          ((C31429 * C6911 - C31430 * C6909 - C31429 * C6912 + C48177 * C6915 +
            C31427 * C2463 - C31428 * C2460 - C31427 * C2464 + C31425 * C2469) *
               C48175 +
           (C31429 * C2062 - C31430 * C2053 - C31429 * C2063 + C48177 * C2071 +
            C31427 * C2060 - C31428 * C2052 - C31427 * C2061 + C31425 * C2070) *
               C4813) *
              C47818 * C2048 +
          ((C31427 * C2062 - C31428 * C2053 - C31427 * C2063 + C31425 * C2071 +
            C31429 * C12651 - C31430 * C12649 - C31429 * C12652 +
            C48177 * C12655) *
               C4813 +
           (C31427 * C6911 - C31428 * C6909 - C31427 * C6912 + C31425 * C6915 +
            C31429 * C27908 - C31430 * C27907 - C31429 * C27909 +
            C48177 * C27910) *
               C48175) *
              C47818 * C2049) *
         C47869 * C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C48126 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C1116 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C48126) *
               C1117 +
           (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
                C48126 -
            ((C31429 * C6021 - C31430 * C6019 - C31429 * C6022 +
              C48177 * C6025 + C31427 * C1751 - C31428 * C1748 -
              C31427 * C1752 + C31425 * C1757) *
                 C48175 +
             (C38389 + C38388) * C4813) *
                C47818 * C47974) *
               C48157) *
              C48111 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C48126) *
               C1116 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C48126 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C1117 +
           (((C33127 + C33126) * C4813 +
             (C31427 * C1753 - C31428 * C1749 - C31427 * C1754 +
              C31425 * C1758 + C31429 * C6023 - C31430 * C6020 -
              C31429 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C48126 -
           ((C31429 * C1337 - C31430 * C1326 - C31429 * C1338 + C48177 * C1353 +
             C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977) *
                C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C47974) *
              C47869 * C688 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C47974 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C48126) *
              C47869 * C689 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C48126 -
           ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
               C47974) *
              C47869 * C690 +
          (((C32179 + C32178) * C4813 +
            (C31427 * C973 - C31428 * C965 - C31427 * C974 + C31425 * C980 +
             C31429 * C2221 - C31430 * C2220 - C31429 * C2222 +
             C48177 * C2223) *
                C48175) *
               C47818 * C47974 -
           ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
               C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C2338 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C2339 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C2340 -
           ((C31429 * C6911 - C31430 * C6909 - C31429 * C6912 + C48177 * C6915 +
             C31427 * C2463 - C31428 * C2460 - C31427 * C2464 +
             C31425 * C2469) *
                C48175 +
            (C31429 * C2062 - C31430 * C2053 - C31429 * C2063 + C48177 * C2071 +
             C31427 * C2060 - C31428 * C2052 - C31427 * C2061 +
             C31425 * C2070) *
                C4813) *
               C47818 * C48173) *
              C47869 * C48111 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C2339 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C2338 -
           ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
               C2340 +
           ((C33983 + C33982) * C4813 +
            (C31427 * C2465 - C31428 * C2461 - C31427 * C2466 + C31425 * C2470 +
             C31429 * C6913 - C31430 * C6910 - C31429 * C6914 +
             C48177 * C6916) *
                C48175) *
               C47818 * C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C48196 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C48184 +
           ((C37333 + C37332) * C4813 +
            (C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210 +
             C31429 * C1751 - C31430 * C1748 - C31429 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C296 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C48184 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C48196 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C48157) *
              C297 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C48196 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C48184 +
           ((C31689 + C31688) * C4813 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C4813 +
           (C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331 +
            C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977) *
               C48175) *
              C47818 * C47887 * C47869 * C108 -
          ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
              C47887 * C47869 * C109 +
          ((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
              C47887 * C47869 * C110 -
          ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
              C47887 * C47869 * C111 +
          ((C31487 + C31486) * C4813 +
           (C31427 * C325 - C31428 * C307 - C31427 * C326 + C31425 * C337 +
            C31429 * C975 - C31430 * C966 - C31429 * C976 + C48177 * C981) *
               C48175) *
              C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C1116 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C1117 +
           ((C37333 + C37332) * C4813 +
            (C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210 +
             C31429 * C1751 - C31430 * C1748 - C31429 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48193 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C1117 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C1116 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C48157) *
              C48180 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C1116 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C1117 +
           ((C31689 + C31688) * C4813 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C4813 +
           (C37330 + C37331) * C48175) *
              C47818 * C47887 * C1184 -
          ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
              C47887 * C1185 +
          ((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
              C47887 * C1186 -
          ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
              C47887 * C1187 +
          ((C38203 + C38202) * C4813 +
           (C31427 * C5846 - C31428 * C5844 - C31427 * C5847 + C31425 * C5850 +
            C31429 * C22870 - C31430 * C22869 - C31429 * C22871 +
            C48177 * C22872) *
               C48175) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C1870 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C1871 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C48160) *
              C47869 * C48193 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C1871 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C1870 -
           ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
               C48160) *
              C47869 * C48180 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C1870 -
           ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
               C1871 +
           ((C31891 + C31890) * C4813 +
            (C31427 * C1333 - C31428 * C1324 - C31427 * C1334 + C31425 * C1351 +
             C31429 * C2467 - C31430 * C2462 - C31429 * C2468 +
             C48177 * C2471) *
                C48175) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C1870 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C1871 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C48160) *
              C48196 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C1871 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C1870 -
           ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
               C48160) *
              C48184 +
          (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C1870 -
           ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
               C1871 +
           ((C38391 + C38390) * C4813 +
            (C31427 * C6021 - C31428 * C6019 - C31427 * C6022 + C31425 * C6025 +
             C31429 * C23509 - C31430 * C23508 - C31429 * C23510 +
             C48177 * C23511) *
                C48175) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C3332 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C48125 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C3332) *
               C47932) *
              C47846 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C3332) *
               C48125 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C3332 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C47932) *
              C47855 +
          ((((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
                C3332 -
            ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
                C47974) *
               C48125 +
           (((C32401 + C32400) * C4813 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
                C3332) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C47970 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47977 +
            ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
              C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
              C48177 * C2070) *
                 C4813 +
             (C38386 + C38387) * C48175) *
                C47818 * C3840) *
               C48125 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47977 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C47970 -
            ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
                C3840) *
               C47932) *
              C2678 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47977 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C47970 -
            ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
                C3840) *
               C48125 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C47970 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47977 +
            ((C33839 + C33838) * C4813 +
             (C31427 * C1347 - C31428 * C1331 - C31427 * C1348 +
              C31425 * C1358 + C31429 * C7386 - C31430 * C7383 -
              C31429 * C7387 + C48177 * C7389) *
                 C48175) *
                C47818 * C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C3332 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C48196 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C3332) *
               C48184 +
           (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
                C3332 -
            ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
                C47974) *
               C48157) *
              C2678 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C3332) *
               C48196 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C3332 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C48184 +
           (((C33127 + C33126) * C4813 +
             (C31427 * C1753 - C31428 * C1749 - C31427 * C1754 +
              C31425 * C1758 + C31429 * C6023 - C31430 * C6020 -
              C31429 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
                C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C3332 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C47974) *
              C47869 * C48202 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C47974 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C3332) *
              C47869 * C48195 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C3332 -
           ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
               C47974) *
              C47869 * C48182 +
          (((C32179 + C32178) * C4813 +
            (C31427 * C973 - C31428 * C965 - C31427 * C974 + C31425 * C980 +
             C31429 * C2221 - C31430 * C2220 - C31429 * C2222 +
             C48177 * C2223) *
                C48175) *
               C47818 * C47974 -
           ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
               C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C48204 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C48201 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C48192 -
           ((C39700 + C39701) * C48175 +
            (C31429 * C2062 - C31430 * C2053 - C31429 * C2063 + C48177 * C2071 +
             C31427 * C2060 - C31428 * C2052 - C31427 * C2061 +
             C31425 * C2070) *
                C4813) *
               C47818 * C48173) *
              C47869 * C2678 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C48201 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C48204 -
           ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
               C48192 +
           ((C33983 + C33982) * C4813 +
            (C31427 * C2465 - C31428 * C2461 - C31427 * C2466 + C31425 * C2470 +
             C31429 * C6913 - C31430 * C6910 - C31429 * C6914 +
             C48177 * C6916) *
                C48175) *
               C47818 * C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47970 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C47977 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C3840) *
              C47869 * C47846 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C47977 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47970 -
           ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
               C3840) *
              C47869 * C47855 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47970 -
           ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
               C47977 +
           ((C31891 + C31890) * C4813 +
            (C31427 * C1333 - C31428 * C1324 - C31427 * C1334 + C31425 * C1351 +
             C31429 * C2467 - C31430 * C2462 - C31429 * C2468 +
             C48177 * C2471) *
                C48175) *
               C47818 * C3840) *
              C47869 * C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C3332 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C47974) *
              C47869 * C48202 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C47974 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C3332) *
              C47869 * C48195 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C3332 -
           ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
               C47974) *
              C47869 * C48182 +
          (((C32179 + C32178) * C4813 +
            (C31427 * C973 - C31428 * C965 - C31427 * C974 + C31425 * C980 +
             C31429 * C2221 - C31430 * C2220 - C31429 * C2222 +
             C48177 * C2223) *
                C48175) *
               C47818 * C47974 -
           ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
               C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C3332 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C48196 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C3332) *
               C48184 +
           (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
                C3332 -
            ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
                C47974) *
               C48157) *
              C2678 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C3332) *
               C48196 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C3332 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C48184 +
           (((C33127 + C33126) * C4813 +
             (C31427 * C1753 - C31428 * C1749 - C31427 * C1754 +
              C31425 * C1758 + C31429 * C6023 - C31430 * C6020 -
              C31429 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
                C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C48125 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C47932) *
              C688 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C47932 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C48125) *
              C689 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C48125 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C47932) *
              C690 +
          (((C32035 + C32034) * C4813 +
            (C31427 * C323 - C31428 * C306 - C31427 * C324 + C31425 * C336 +
             C31429 * C1631 - C31430 * C1630 - C31429 * C1632 +
             C48177 * C1633) *
                C48175) *
               C47818 * C47887 * C47932 -
           ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
               C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C1458 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C1459 +
           ((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C47887 * C1460 -
           ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
               C47887 * C48167) *
              C48111 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C1459 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C1458 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C1460 +
           ((C32919 + C32918) * C4813 +
            (C31427 * C1204 - C31428 * C1194 - C31427 * C1205 + C31425 * C1212 +
             C31429 * C6524 - C31430 * C6521 - C31429 * C6525 +
             C48177 * C6527) *
                C48175) *
               C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C48126 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C48125 +
           (((C37947 + C37946) * C4813 +
             (C31427 * C1343 - C31428 * C1329 - C31427 * C1344 +
              C31425 * C1356 + C31429 * C1345 - C31430 * C1330 -
              C31429 * C1346 + C48177 * C1357) *
                 C48175) *
                C47818 * C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C48126) *
               C47932) *
              C296 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C48126) *
               C48125 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C48126 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C47932) *
              C297 +
          ((((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
                C48126 -
            ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
                C47974) *
               C48125 +
           (((C32401 + C32400) * C4813 +
             (C31427 * C1339 - C31428 * C1327 - C31427 * C1340 +
              C31425 * C1354 + C31429 * C1349 - C31430 * C1332 -
              C31429 * C1350 + C48177 * C1359) *
                 C48175) *
                C47818 * C47974 -
            ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
                C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C48126 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C47974) *
              C1458 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C47974 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C48126) *
              C1459 +
          (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C48126 -
           ((C38858 + C38859) * C48175 + (C38389 + C38388) * C4813) * C47818 *
               C47974) *
              C1460 +
          (((C38859 + C38858) * C4813 +
            (C31427 * C6522 - C31428 * C6520 - C31427 * C6523 + C31425 * C6526 +
             C31429 * C22517 - C31430 * C22516 - C31429 * C22518 +
             C48177 * C22519) *
                C48175) *
               C47818 * C47974 -
           ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
               C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C48196 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C48184 +
           ((C37333 + C37332) * C4813 +
            (C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210 +
             C31429 * C1751 - C31430 * C1748 - C31429 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C296 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C48184 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C48196 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C48157) *
              C297 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C48196 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C48184 +
           ((C31689 + C31688) * C4813 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C4813 +
           (C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331 +
            C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977) *
               C48175) *
              C47818 * C47887 * C47869 * C108 -
          ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
              C47887 * C47869 * C109 +
          ((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
              C47887 * C47869 * C110 -
          ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
              C47887 * C47869 * C111 +
          ((C31487 + C31486) * C4813 +
           (C31427 * C325 - C31428 * C307 - C31427 * C326 + C31425 * C337 +
            C31429 * C975 - C31430 * C966 - C31429 * C976 + C48177 * C981) *
               C48175) *
              C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C48197 -
           ((C31429 * C1337 - C31430 * C1326 - C31429 * C1338 + C48177 * C1353 +
             C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977) *
                C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C48186 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C31427 * C1337 - C31428 * C1326 - C31427 * C1338 + C31425 * C1353 +
             C31429 * C2463 - C31430 * C2460 - C31429 * C2464 +
             C48177 * C2469) *
                C48175) *
               C47818 * C48160) *
              C47869 * C296 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C48186 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C48197 -
           ((C33838 + C33839) * C48175 + (C31887 + C31886) * C4813) * C47818 *
               C48160) *
              C47869 * C297 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C48197 -
           ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
               C48186 +
           ((C31891 + C31890) * C4813 +
            (C31427 * C1333 - C31428 * C1324 - C31427 * C1334 + C31425 * C1351 +
             C31429 * C2467 - C31430 * C2462 - C31429 * C2468 +
             C48177 * C2471) *
                C48175) *
               C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C1116 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C1117 +
           ((C37333 + C37332) * C4813 +
            (C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210 +
             C31429 * C1751 - C31430 * C1748 - C31429 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48193 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C1117 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C1116 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C48157) *
              C48180 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C1116 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C1117 +
           ((C31689 + C31688) * C4813 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C4813 +
           (C37330 + C37331) * C48175) *
              C47818 * C47887 * C1184 -
          ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
              C47887 * C1185 +
          ((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
              C47887 * C1186 -
          ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
              C47887 * C1187 +
          ((C38203 + C38202) * C4813 +
           (C31427 * C5846 - C31428 * C5844 - C31427 * C5847 + C31425 * C5850 +
            C31429 * C22870 - C31430 * C22869 - C31429 * C22871 +
            C48177 * C22872) *
               C48175) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C48197 -
           ((C37946 + C37947) * C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C48186 +
           ((C31427 * C516 - C31428 * C503 - C31427 * C517 + C31425 * C533 +
             C31429 * C2060 - C31430 * C2052 - C31429 * C2061 +
             C48177 * C2070) *
                C4813 +
            (C38386 + C38387) * C48175) *
               C47818 * C48160) *
              C1116 +
          (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
               C48186 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C48197 -
           ((C38390 + C38391) * C48175 + (C38387 + C38386) * C4813) * C47818 *
               C48160) *
              C1117 +
          (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
               C48197 -
           ((C31429 * C6021 - C31430 * C6019 - C31429 * C6022 + C48177 * C6025 +
             C31427 * C1751 - C31428 * C1748 - C31427 * C1752 +
             C31425 * C1757) *
                C48175 +
            (C38389 + C38388) * C4813) *
               C47818 * C48186 +
           ((C38391 + C38390) * C4813 +
            (C31427 * C6021 - C31428 * C6019 - C31427 * C6022 + C31425 * C6025 +
             C31429 * C23509 - C31430 * C23508 - C31429 * C23510 +
             C48177 * C23511) *
                C48175) *
               C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C48126 -
           ((C31429 * C1337 - C31430 * C1326 - C31429 * C1338 + C48177 * C1353 +
             C31427 * C967 - C31428 * C962 - C31427 * C968 + C31425 * C977) *
                C48175 +
            (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
             C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                C4813) *
               C47818 * C47974) *
              C47869 * C688 +
          (((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
               C47974 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C48126) *
              C47869 * C689 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C48126 -
           ((C32400 + C32401) * C48175 + (C31889 + C31888) * C4813) * C47818 *
               C47974) *
              C47869 * C690 +
          (((C32179 + C32178) * C4813 +
            (C31427 * C973 - C31428 * C965 - C31427 * C974 + C31425 * C980 +
             C31429 * C2221 - C31430 * C2220 - C31429 * C2222 +
             C48177 * C2223) *
                C48175) *
               C47818 * C47974 -
           ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
               C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
              C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                 C4813 +
             (C37330 + C37331) * C48175) *
                C47818 * C48126 -
            ((C37946 + C37947) * C48175 +
             (C31429 * C516 - C31430 * C503 - C31429 * C517 + C48177 * C533 +
              C31427 * C514 - C31428 * C502 - C31427 * C515 + C31425 * C532) *
                 C4813) *
                C47818 * C47974) *
               C1116 +
           (((C37947 + C37946) * C4813 + (C38388 + C38389) * C48175) * C47818 *
                C47974 -
            ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
                C48126) *
               C1117 +
           (((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
                C48126 -
            ((C31429 * C6021 - C31430 * C6019 - C31429 * C6022 +
              C48177 * C6025 + C31427 * C1751 - C31428 * C1748 -
              C31427 * C1752 + C31425 * C1757) *
                 C48175 +
             (C38389 + C38388) * C4813) *
                C47818 * C47974) *
               C48157) *
              C48111 +
          ((((C31885 + C31884) * C4813 + (C32398 + C32399) * C48175) * C47818 *
                C47974 -
            ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
                C48126) *
               C1116 +
           (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
                C48126 -
            ((C33126 + C33127) * C48175 + (C32399 + C32398) * C4813) * C47818 *
                C47974) *
               C1117 +
           (((C33127 + C33126) * C4813 +
             (C31427 * C1753 - C31428 * C1749 - C31427 * C1754 +
              C31425 * C1758 + C31429 * C6023 - C31430 * C6020 -
              C31429 * C6024 + C48177 * C6026) *
                 C48175) *
                C47818 * C47974 -
            ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
                C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C4813 +
           (C31427 * C313 - C31428 * C301 - C31427 * C314 + C31425 * C331 +
            C31429 * C967 - C31430 * C962 - C31429 * C968 + C48177 * C977) *
               C48175) *
              C47818 * C47887 * C47869 * C108 -
          ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
              C47887 * C47869 * C109 +
          ((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
              C47887 * C47869 * C110 -
          ((C32034 + C32035) * C48175 + (C31485 + C31484) * C4813) * C47818 *
              C47887 * C47869 * C111 +
          ((C31487 + C31486) * C4813 +
           (C31427 * C325 - C31428 * C307 - C31427 * C326 + C31425 * C337 +
            C31429 * C975 - C31430 * C966 - C31429 * C976 + C48177 * C981) *
               C48175) *
              C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C48196 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C48184 +
           ((C37333 + C37332) * C4813 +
            (C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210 +
             C31429 * C1751 - C31430 * C1748 - C31429 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C296 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C48184 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C48196 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C48157) *
              C297 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C48196 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C48184 +
           ((C31689 + C31688) * C4813 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
             C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
                C4813 +
            (C37330 + C37331) * C48175) *
               C47818 * C47887 * C1116 -
           ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
               C47887 * C1117 +
           ((C37333 + C37332) * C4813 +
            (C31427 * C1200 - C31428 * C1192 - C31427 * C1201 + C31425 * C1210 +
             C31429 * C1751 - C31430 * C1748 - C31429 * C1752 +
             C48177 * C1757) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48193 +
          (((C31683 + C31682) * C4813 + (C31684 + C31685) * C48175) * C47818 *
               C47887 * C1117 -
           ((C31682 + C31683) * C48175 + (C31481 + C31480) * C4813) * C47818 *
               C47887 * C1116 -
           ((C32918 + C32919) * C48175 + (C31685 + C31684) * C4813) * C47818 *
               C47887 * C48157) *
              C48180 +
          (((C31483 + C31482) * C4813 + (C31686 + C31687) * C48175) * C47818 *
               C47887 * C1116 -
           ((C31688 + C31689) * C48175 + (C31687 + C31686) * C4813) * C47818 *
               C47887 * C1117 +
           ((C31689 + C31688) * C4813 +
            (C31427 * C1196 - C31428 * C1190 - C31427 * C1197 + C31425 * C1208 +
             C31429 * C1755 - C31430 * C1750 - C31429 * C1756 +
             C48177 * C1759) *
                C48175) *
               C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31427 * C122 - C31428 * C115 - C31427 * C123 + C31425 * C136 +
            C31429 * C514 - C31430 * C502 - C31429 * C515 + C48177 * C532) *
               C4813 +
           (C37330 + C37331) * C48175) *
              C47818 * C47887 * C1184 -
          ((C37332 + C37333) * C48175 + (C37331 + C37330) * C4813) * C47818 *
              C47887 * C1185 +
          ((C37333 + C37332) * C4813 + (C38200 + C38201) * C48175) * C47818 *
              C47887 * C1186 -
          ((C38202 + C38203) * C48175 + (C38201 + C38200) * C4813) * C47818 *
              C47887 * C1187 +
          ((C38203 + C38202) * C4813 +
           (C31427 * C5846 - C31428 * C5844 - C31427 * C5847 + C31425 * C5850 +
            C31429 * C22870 - C31430 * C22869 - C31429 * C22871 +
            C48177 * C22872) *
               C48175) *
              C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C47928 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C47935 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C2938) *
              C47846 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C47935 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C47928 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C2938) *
              C47855 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C47928 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C47935 +
           (C42730 * C319 - C42731 * C304 - C42730 * C320 + C42727 * C334 +
            C42732 * C1339 - C42733 * C1327 - C42732 * C1340 + C42728 * C1354 +
            C42734 * C1349 - C42735 * C1332 - C42734 * C1350 + C42729 * C1359) *
               C48073 * C47818 * C47887 * C2938) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C48126 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C47928 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C48126) *
               C47935 +
           ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
             C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
             C42734 * C1345 - C42735 * C1330 - C42734 * C1346 +
             C42729 * C1357) *
                C48073 * C47818 * C48126 -
            (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
             C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
             C42730 * C1343 - C42731 * C1329 - C42730 * C1344 +
             C42727 * C1356) *
                C48073 * C47818 * C47974) *
               C2938) *
              C2678 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C48126) *
               C47928 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C48126 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C47935 +
           ((C42730 * C1341 - C42731 * C1328 - C42730 * C1342 + C42727 * C1355 +
             C42732 * C1347 - C42733 * C1331 - C42732 * C1348 + C42728 * C1358 +
             C42734 * C7386 - C42735 * C7383 - C42734 * C7387 +
             C42729 * C7389) *
                C48073 * C47818 * C47974 -
            (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
             C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
             C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
                C48073 * C47818 * C48126) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C48203 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C48199 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C48189 -
           (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
            C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
            C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
               C48073 * C47818 * C47887 * C48167) *
              C2678 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C48199 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C48203 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C48189 +
           (C42730 * C1198 - C42731 * C1191 - C42730 * C1199 + C42727 * C1209 +
            C42732 * C1753 - C42733 * C1749 - C42732 * C1754 + C42728 * C1758 +
            C42734 * C6023 - C42735 * C6020 - C42734 * C6024 + C42729 * C6026) *
               C48073 * C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C2570 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C47932) *
              C48202 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C47932 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C2570) *
              C48195 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C2570 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C47932) *
              C48182 +
          ((C42730 * C321 - C42731 * C305 - C42730 * C322 + C42727 * C335 +
            C42732 * C973 - C42733 * C965 - C42732 * C974 + C42728 * C980 +
            C42734 * C2221 - C42735 * C2220 - C42734 * C2222 + C42729 * C2223) *
               C48073 * C47818 * C47887 * C47932 -
           (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
            C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
            C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
               C48073 * C47818 * C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C48197 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C48186 +
            (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
             C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
             C42734 * C2062 - C42735 * C2053 - C42734 * C2063 +
             C42729 * C2071) *
                C48073 * C47818 * C48160) *
               C2570 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C48186 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C48197 -
            (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
             C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
             C42730 * C1337 - C42731 * C1326 - C42730 * C1338 +
             C42727 * C1353) *
                C48073 * C47818 * C48160) *
               C47932) *
              C2678 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C48186 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C48197 -
            (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
             C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
             C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
                C48073 * C47818 * C48160) *
               C2570 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C48197 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C48186 +
            (C42730 * C1335 - C42731 * C1325 - C42730 * C1336 + C42727 * C1352 +
             C42732 * C2465 - C42733 * C2461 - C42732 * C2466 + C42728 * C2470 +
             C42734 * C6913 - C42735 * C6910 - C42734 * C6914 +
             C42729 * C6916) *
                C48073 * C47818 * C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C48126 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C2570 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C48126) *
               C47932) *
              C47846 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C48126) *
               C2570 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C48126 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C47932) *
              C47855 +
          (((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
             C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
             C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
                C48073 * C47818 * C48126 -
            (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
             C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
             C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
                C48073 * C47818 * C47974) *
               C2570 +
           ((C42730 * C971 - C42731 * C964 - C42730 * C972 + C42727 * C979 +
             C42732 * C1333 - C42733 * C1324 - C42732 * C1334 + C42728 * C1351 +
             C42734 * C2467 - C42735 * C2462 - C42734 * C2468 +
             C42729 * C2471) *
                C48073 * C47818 * C47974 -
            (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
             C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
             C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
                C48073 * C47818 * C48126) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C2570 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C47932) *
              C48202 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C47932 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C2570) *
              C48195 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C2570 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C47932) *
              C48182 +
          ((C42730 * C321 - C42731 * C305 - C42730 * C322 + C42727 * C335 +
            C42732 * C973 - C42733 * C965 - C42732 * C974 + C42728 * C980 +
            C42734 * C2221 - C42735 * C2220 - C42734 * C2222 + C42729 * C2223) *
               C48073 * C47818 * C47887 * C47932 -
           (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
            C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
            C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
               C48073 * C47818 * C47887 * C2570) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C48203 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C48199 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C48189 -
           (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
            C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
            C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
               C48073 * C47818 * C47887 * C48167) *
              C2678 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C48199 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C48203 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C48189 +
           (C42730 * C1198 - C42731 * C1191 - C42730 * C1199 + C42727 * C1209 +
            C42732 * C1753 - C42733 * C1749 - C42732 * C1754 + C42728 * C1758 +
            C42734 * C6023 - C42735 * C6020 - C42734 * C6024 + C42729 * C6026) *
               C48073 * C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C3332 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C47928 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C3332) *
               C47935 +
           ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
             C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
             C42734 * C1345 - C42735 * C1330 - C42734 * C1346 +
             C42729 * C1357) *
                C48073 * C47818 * C3332 -
            (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
             C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
             C42730 * C1343 - C42731 * C1329 - C42730 * C1344 +
             C42727 * C1356) *
                C48073 * C47818 * C47974) *
               C2938) *
              C48111 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C3332) *
               C47928 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C3332 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C47935 +
           ((C42730 * C1341 - C42731 * C1328 - C42730 * C1342 + C42727 * C1355 +
             C42732 * C1347 - C42733 * C1331 - C42732 * C1348 + C42728 * C1358 +
             C42734 * C7386 - C42735 * C7383 - C42734 * C7387 +
             C42729 * C7389) *
                C48073 * C47818 * C47974 -
            (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
             C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
             C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
                C48073 * C47818 * C3332) *
               C2938) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47970 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C47977 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C3840) *
              C47928 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C47977 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47970 -
           (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
            C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
            C42730 * C1337 - C42731 * C1326 - C42730 * C1338 + C42727 * C1353) *
               C48073 * C47818 * C3840) *
              C47935 +
          ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47970 -
           (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
            C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
            C42730 * C1343 - C42731 * C1329 - C42730 * C1344 + C42727 * C1356) *
               C48073 * C47818 * C47977 +
           (C42730 * C1345 - C42731 * C1330 - C42730 * C1346 + C42727 * C1357 +
            C42732 * C7384 - C42733 * C7382 - C42732 * C7385 + C42728 * C7388 +
            C42734 * C23163 - C42735 * C23162 - C42734 * C23164 +
            C42729 * C23165) *
               C48073 * C47818 * C3840) *
              C2938) *
         C47841) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C3332 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C47974) *
              C48203 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C47974 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C3332) *
              C48199 +
          ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C3332 -
           (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
            C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
            C42730 * C1343 - C42731 * C1329 - C42730 * C1344 + C42727 * C1356) *
               C48073 * C47818 * C47974) *
              C48189 +
          ((C42730 * C1751 - C42731 * C1748 - C42730 * C1752 + C42727 * C1757 +
            C42732 * C6021 - C42733 * C6019 - C42732 * C6022 + C42728 * C6025 +
            C42734 * C23509 - C42735 * C23508 - C42734 * C23510 +
            C42729 * C23511) *
               C48073 * C47818 * C47974 -
           (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
            C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
            C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
               C48073 * C47818 * C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C3332 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C2570 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C3332) *
               C47932) *
              C48193 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C3332) *
               C2570 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C3332 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C47932) *
              C48180 +
          (((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
             C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
             C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
                C48073 * C47818 * C3332 -
            (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
             C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
             C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
                C48073 * C47818 * C47974) *
               C2570 +
           ((C42730 * C971 - C42731 * C964 - C42730 * C972 + C42727 * C979 +
             C42732 * C1333 - C42733 * C1324 - C42732 * C1334 + C42728 * C1351 +
             C42734 * C2467 - C42735 * C2462 - C42734 * C2468 +
             C42729 * C2471) *
                C48073 * C47818 * C47974 -
            (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
             C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
             C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
                C48073 * C47818 * C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C48204 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C48201 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C48192 -
           (C42734 * C12651 - C42735 * C12649 - C42734 * C12652 +
            C42729 * C12655 + C42732 * C2062 - C42733 * C2053 - C42732 * C2063 +
            C42728 * C2071 + C42730 * C2060 - C42731 * C2052 - C42730 * C2061 +
            C42727 * C2070) *
               C48073 * C47818 * C48173) *
              C2570 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C48201 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C48204 -
           (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
            C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
            C42730 * C1337 - C42731 * C1326 - C42730 * C1338 + C42727 * C1353) *
               C48073 * C47818 * C48192 +
           (C42730 * C2463 - C42731 * C2460 - C42730 * C2464 + C42727 * C2469 +
            C42732 * C6911 - C42733 * C6909 - C42732 * C6912 + C42728 * C6915 +
            C42734 * C27908 - C42735 * C27907 - C42734 * C27909 +
            C42729 * C27910) *
               C48073 * C47818 * C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C47970 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47977 +
            (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
             C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
             C42734 * C2062 - C42735 * C2053 - C42734 * C2063 +
             C42729 * C2071) *
                C48073 * C47818 * C3840) *
               C2570 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47977 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C47970 -
            (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
             C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
             C42730 * C1337 - C42731 * C1326 - C42730 * C1338 +
             C42727 * C1353) *
                C48073 * C47818 * C3840) *
               C47932) *
              C48111 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47977 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C47970 -
            (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
             C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
             C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
                C48073 * C47818 * C3840) *
               C2570 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C47970 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47977 +
            (C42730 * C1335 - C42731 * C1325 - C42730 * C1336 + C42727 * C1352 +
             C42732 * C2465 - C42733 * C2461 - C42732 * C2466 + C42728 * C2470 +
             C42734 * C6913 - C42735 * C6910 - C42734 * C6914 +
             C42729 * C6916) *
                C48073 * C47818 * C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C3332 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C2570 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C3332) *
               C47932) *
              C48193 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C3332) *
               C2570 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C3332 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C47932) *
              C48180 +
          (((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
             C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
             C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
                C48073 * C47818 * C3332 -
            (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
             C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
             C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
                C48073 * C47818 * C47974) *
               C2570 +
           ((C42730 * C971 - C42731 * C964 - C42730 * C972 + C42727 * C979 +
             C42732 * C1333 - C42733 * C1324 - C42732 * C1334 + C42728 * C1351 +
             C42734 * C2467 - C42735 * C2462 - C42734 * C2468 +
             C42729 * C2471) *
                C48073 * C47818 * C47974 -
            (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
             C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
             C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
                C48073 * C47818 * C3332) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C3332 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C47974) *
              C48203 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C47974 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C3332) *
              C48199 +
          ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C3332 -
           (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
            C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
            C42730 * C1343 - C42731 * C1329 - C42730 * C1344 + C42727 * C1356) *
               C48073 * C47818 * C47974) *
              C48189 +
          ((C42730 * C1751 - C42731 * C1748 - C42730 * C1752 + C42727 * C1757 +
            C42732 * C6021 - C42733 * C6019 - C42732 * C6022 + C42728 * C6025 +
            C42734 * C23509 - C42735 * C23508 - C42734 * C23510 +
            C42729 * C23511) *
               C48073 * C47818 * C47974 -
           (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
            C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
            C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
               C48073 * C47818 * C3332) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C1458 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C1459 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C1460 -
           (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
            C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
            C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
               C48073 * C47818 * C47887 * C48167) *
              C48111 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C1459 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C1458 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C1460 +
           (C42730 * C1198 - C42731 * C1191 - C42730 * C1199 + C42727 * C1209 +
            C42732 * C1753 - C42733 * C1749 - C42732 * C1754 + C42728 * C1758 +
            C42734 * C6023 - C42735 * C6020 - C42734 * C6024 + C42729 * C6026) *
               C48073 * C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C48125 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C47932) *
              C688 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C47932 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C48125) *
              C689 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C48125 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C47932) *
              C690 +
          ((C42730 * C321 - C42731 * C305 - C42730 * C322 + C42727 * C335 +
            C42732 * C973 - C42733 * C965 - C42732 * C974 + C42728 * C980 +
            C42734 * C2221 - C42735 * C2220 - C42734 * C2222 + C42729 * C2223) *
               C48073 * C47818 * C47887 * C47932 -
           (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
            C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
            C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
               C48073 * C47818 * C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C1870 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C1871 +
            (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
             C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
             C42734 * C2062 - C42735 * C2053 - C42734 * C2063 +
             C42729 * C2071) *
                C48073 * C47818 * C48160) *
               C48125 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C1871 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C1870 -
            (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
             C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
             C42730 * C1337 - C42731 * C1326 - C42730 * C1338 +
             C42727 * C1353) *
                C48073 * C47818 * C48160) *
               C47932) *
              C48111 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C1871 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C1870 -
            (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
             C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
             C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
                C48073 * C47818 * C48160) *
               C48125 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C1870 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C1871 +
            (C42730 * C1335 - C42731 * C1325 - C42730 * C1336 + C42727 * C1352 +
             C42732 * C2465 - C42733 * C2461 - C42732 * C2466 + C42728 * C2470 +
             C42734 * C6913 - C42735 * C6910 - C42734 * C6914 +
             C42729 * C6916) *
                C48073 * C47818 * C48160) *
               C47932) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C48126 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C47974) *
              C1458 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C47974 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C48126) *
              C1459 +
          ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C48126 -
           (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
            C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
            C42730 * C1343 - C42731 * C1329 - C42730 * C1344 + C42727 * C1356) *
               C48073 * C47818 * C47974) *
              C1460 +
          ((C42730 * C1751 - C42731 * C1748 - C42730 * C1752 + C42727 * C1757 +
            C42732 * C6021 - C42733 * C6019 - C42732 * C6022 + C42728 * C6025 +
            C42734 * C23509 - C42735 * C23508 - C42734 * C23510 +
            C42729 * C23511) *
               C48073 * C47818 * C47974 -
           (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
            C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
            C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
               C48073 * C47818 * C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C48126 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C48125 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C48126) *
               C47932) *
              C296 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C48126) *
               C48125 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C48126 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C47932) *
              C297 +
          (((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
             C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
             C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
                C48073 * C47818 * C48126 -
            (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
             C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
             C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
                C48073 * C47818 * C47974) *
               C48125 +
           ((C42730 * C971 - C42731 * C964 - C42730 * C972 + C42727 * C979 +
             C42732 * C1333 - C42733 * C1324 - C42732 * C1334 + C42728 * C1351 +
             C42734 * C2467 - C42735 * C2462 - C42734 * C2468 +
             C42729 * C2471) *
                C48073 * C47818 * C47974 -
            (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
             C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
             C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
                C48073 * C47818 * C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C2338 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C2339 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C2340 -
           (C42734 * C12651 - C42735 * C12649 - C42734 * C12652 +
            C42729 * C12655 + C42732 * C2062 - C42733 * C2053 - C42732 * C2063 +
            C42728 * C2071 + C42730 * C2060 - C42731 * C2052 - C42730 * C2061 +
            C42727 * C2070) *
               C48073 * C47818 * C48173) *
              C48125 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C2339 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C2338 -
           (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
            C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
            C42730 * C1337 - C42731 * C1326 - C42730 * C1338 + C42727 * C1353) *
               C48073 * C47818 * C2340 +
           (C42730 * C2463 - C42731 * C2460 - C42730 * C2464 + C42727 * C2469 +
            C42732 * C6911 - C42733 * C6909 - C42732 * C6912 + C42728 * C6915 +
            C42734 * C27908 - C42735 * C27907 - C42734 * C27909 +
            C42729 * C27910) *
               C48073 * C47818 * C48173) *
              C47932) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
               C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
               C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                  C48073 * C47818 * C47887 * C47869 * C108 -
              (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
               C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
               C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                  C48073 * C47818 * C47887 * C47869 * C109 +
              (C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
               C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
               C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
                  C48073 * C47818 * C47887 * C47869 * C110 -
              (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
               C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
               C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
                  C48073 * C47818 * C47887 * C47869 * C111 +
              (C42730 * C130 - C42731 * C119 - C42730 * C131 + C42727 * C140 +
               C42732 * C526 - C42733 * C508 - C42732 * C527 + C42728 * C538 +
               C42734 * C528 - C42735 * C509 - C42734 * C529 + C42729 * C539) *
                  C48073 * C47818 * C47887 * C47869 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
                C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
                C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                   C48073 * C47818 * C47887 * C48196 -
               (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 +
                C42729 * C1353 + C42732 * C967 - C42733 * C962 - C42732 * C968 +
                C42728 * C977 + C42730 * C313 - C42731 * C301 - C42730 * C314 +
                C42727 * C331) *
                   C48073 * C47818 * C47887 * C48184 +
               (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
                C42732 * C1343 - C42733 * C1329 - C42732 * C1344 +
                C42728 * C1356 + C42734 * C1345 - C42735 * C1330 -
                C42734 * C1346 + C42729 * C1357) *
                   C48073 * C47818 * C47887 * C48157) *
                  C296 +
              ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
                C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
                C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
                C42729 * C1352) *
                   C48073 * C47818 * C47887 * C48184 -
               (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
                C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
                C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                   C48073 * C47818 * C47887 * C48196 -
               (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 +
                C42729 * C1358 + C42732 * C1341 - C42733 * C1328 -
                C42732 * C1342 + C42728 * C1355 + C42730 * C317 -
                C42731 * C303 - C42730 * C318 + C42727 * C333) *
                   C48073 * C47818 * C47887 * C48157) *
                  C297 +
              ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
                C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
                C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
                   C48073 * C47818 * C47887 * C48196 -
               (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 +
                C42729 * C1351 + C42732 * C971 - C42733 * C964 - C42732 * C972 +
                C42728 * C979 + C42730 * C309 - C42731 * C299 - C42730 * C310 +
                C42727 * C329) *
                   C48073 * C47818 * C47887 * C48184 +
               (C42730 * C319 - C42731 * C304 - C42730 * C320 + C42727 * C334 +
                C42732 * C1339 - C42733 * C1327 - C42732 * C1340 +
                C42728 * C1354 + C42734 * C1349 - C42735 * C1332 -
                C42734 * C1350 + C42729 * C1359) *
                   C48073 * C47818 * C47887 * C48157) *
                  C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C48197 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C48186 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C48160) *
              C47869 * C296 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C48186 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C48197 -
           (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
            C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
            C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
               C48073 * C47818 * C48160) *
              C47869 * C297 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C48197 -
           (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
            C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
            C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
               C48073 * C47818 * C48186 +
           (C42730 * C520 - C42731 * C505 - C42730 * C521 + C42727 * C535 +
            C42732 * C2056 - C42733 * C2050 - C42732 * C2057 + C42728 * C2068 +
            C42734 * C2066 - C42735 * C2055 - C42734 * C2067 + C42729 * C2073) *
               C48073 * C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C1117 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C48157) *
              C48193 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C1117 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C48157) *
              C48180 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C1117 +
           (C42730 * C319 - C42731 * C304 - C42730 * C320 + C42727 * C334 +
            C42732 * C1339 - C42733 * C1327 - C42732 * C1340 + C42728 * C1354 +
            C42734 * C1349 - C42735 * C1332 - C42734 * C1350 + C42729 * C1359) *
               C48073 * C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
           C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
           C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
              C48073 * C47818 * C47887 * C1184 -
          (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
           C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
           C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
              C48073 * C47818 * C47887 * C1185 +
          (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
           C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
           C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
              C48073 * C47818 * C47887 * C1186 -
          (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
           C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
           C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
              C48073 * C47818 * C47887 * C1187 +
          (C42730 * C1202 - C42731 * C1193 - C42730 * C1203 + C42727 * C1211 +
           C42732 * C6522 - C42733 * C6520 - C42732 * C6523 + C42728 * C6526 +
           C42734 * C22517 - C42735 * C22516 - C42734 * C22518 +
           C42729 * C22519) *
              C48073 * C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C48197 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C48186 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C48160) *
              C1116 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C48186 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C48197 -
           (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
            C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
            C42730 * C1337 - C42731 * C1326 - C42730 * C1338 + C42727 * C1353) *
               C48073 * C47818 * C48160) *
              C1117 +
          ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C48197 -
           (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
            C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
            C42730 * C1343 - C42731 * C1329 - C42730 * C1344 + C42727 * C1356) *
               C48073 * C47818 * C48186 +
           (C42730 * C1345 - C42731 * C1330 - C42730 * C1346 + C42727 * C1357 +
            C42732 * C7384 - C42733 * C7382 - C42732 * C7385 + C42728 * C7388 +
            C42734 * C23163 - C42735 * C23162 - C42734 * C23164 +
            C42729 * C23165) *
               C48073 * C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C1870 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C1871 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C48160) *
              C47869 * C48193 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C1871 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C1870 -
           (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
            C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
            C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
               C48073 * C47818 * C48160) *
              C47869 * C48180 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C1870 -
           (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
            C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
            C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
               C48073 * C47818 * C1871 +
           (C42730 * C520 - C42731 * C505 - C42730 * C521 + C42727 * C535 +
            C42732 * C2056 - C42733 * C2050 - C42732 * C2057 + C42728 * C2068 +
            C42734 * C2066 - C42735 * C2055 - C42734 * C2067 + C42729 * C2073) *
               C48073 * C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C1870 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C1871 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C48160) *
              C48196 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C1871 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C1870 -
           (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
            C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
            C42730 * C1337 - C42731 * C1326 - C42730 * C1338 + C42727 * C1353) *
               C48073 * C47818 * C48160) *
              C48184 +
          ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C1870 -
           (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
            C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
            C42730 * C1343 - C42731 * C1329 - C42730 * C1344 + C42727 * C1356) *
               C48073 * C47818 * C1871 +
           (C42730 * C1345 - C42731 * C1330 - C42730 * C1346 + C42727 * C1357 +
            C42732 * C7384 - C42733 * C7382 - C42732 * C7385 + C42728 * C7388 +
            C42734 * C23163 - C42735 * C23162 - C42734 * C23164 +
            C42729 * C23165) *
               C48073 * C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
           C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
           C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
              C48073 * C47818 * C2045 -
          (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
           C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
           C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
              C48073 * C47818 * C2046 +
          (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
           C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
           C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
              C48073 * C47818 * C2047 -
          (C42734 * C12651 - C42735 * C12649 - C42734 * C12652 +
           C42729 * C12655 + C42732 * C2062 - C42733 * C2053 - C42732 * C2063 +
           C42728 * C2071 + C42730 * C2060 - C42731 * C2052 - C42730 * C2061 +
           C42727 * C2070) *
              C48073 * C47818 * C2048 +
          (C42730 * C2062 - C42731 * C2053 - C42730 * C2063 + C42727 * C2071 +
           C42732 * C12651 - C42733 * C12649 - C42732 * C12652 +
           C42728 * C12655 + C42734 * C44205 - C42735 * C44204 -
           C42734 * C44206 + C42729 * C44207) *
              C48073 * C47818 * C2049) *
         C47869 * C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C48126 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C1116 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C48126) *
               C1117 +
           ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
             C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
             C42734 * C1345 - C42735 * C1330 - C42734 * C1346 +
             C42729 * C1357) *
                C48073 * C47818 * C48126 -
            (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
             C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
             C42730 * C1343 - C42731 * C1329 - C42730 * C1344 +
             C42727 * C1356) *
                C48073 * C47818 * C47974) *
               C48157) *
              C48111 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C48126) *
               C1116 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C48126 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C1117 +
           ((C42730 * C1341 - C42731 * C1328 - C42730 * C1342 + C42727 * C1355 +
             C42732 * C1347 - C42733 * C1331 - C42732 * C1348 + C42728 * C1358 +
             C42734 * C7386 - C42735 * C7383 - C42734 * C7387 +
             C42729 * C7389) *
                C48073 * C47818 * C47974 -
            (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
             C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
             C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
                C48073 * C47818 * C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C48126 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C47974) *
              C47869 * C688 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C47974 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C48126) *
              C47869 * C689 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C48126 -
           (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
            C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
            C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
               C48073 * C47818 * C47974) *
              C47869 * C690 +
          ((C42730 * C522 - C42731 * C506 - C42730 * C523 + C42727 * C536 +
            C42732 * C524 - C42733 * C507 - C42732 * C525 + C42728 * C537 +
            C42734 * C2343 - C42735 * C2342 - C42734 * C2344 + C42729 * C2345) *
               C48073 * C47818 * C47974 -
           (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
            C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
            C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
               C48073 * C47818 * C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C2338 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C2339 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C2340 -
           (C42734 * C12651 - C42735 * C12649 - C42734 * C12652 +
            C42729 * C12655 + C42732 * C2062 - C42733 * C2053 - C42732 * C2063 +
            C42728 * C2071 + C42730 * C2060 - C42731 * C2052 - C42730 * C2061 +
            C42727 * C2070) *
               C48073 * C47818 * C48173) *
              C47869 * C48111 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C2339 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C2338 -
           (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
            C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
            C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
               C48073 * C47818 * C2340 +
           (C42730 * C2058 - C42731 * C2051 - C42730 * C2059 + C42727 * C2069 +
            C42732 * C2064 - C42733 * C2054 - C42732 * C2065 + C42728 * C2072 +
            C42734 * C12653 - C42735 * C12650 - C42734 * C12654 +
            C42729 * C12656) *
               C48073 * C47818 * C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C48196 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C48184 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C48157) *
              C296 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C48184 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C48196 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C48157) *
              C297 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C48196 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C48184 +
           (C42730 * C319 - C42731 * C304 - C42730 * C320 + C42727 * C334 +
            C42732 * C1339 - C42733 * C1327 - C42732 * C1340 + C42728 * C1354 +
            C42734 * C1349 - C42735 * C1332 - C42734 * C1350 + C42729 * C1359) *
               C48073 * C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
           C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
           C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
              C48073 * C47818 * C47887 * C47869 * C108 -
          (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
           C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
           C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
              C48073 * C47818 * C47887 * C47869 * C109 +
          (C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
           C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
           C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
              C48073 * C47818 * C47887 * C47869 * C110 -
          (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
           C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
           C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
              C48073 * C47818 * C47887 * C47869 * C111 +
          (C42730 * C130 - C42731 * C119 - C42730 * C131 + C42727 * C140 +
           C42732 * C526 - C42733 * C508 - C42732 * C527 + C42728 * C538 +
           C42734 * C528 - C42735 * C509 - C42734 * C529 + C42729 * C539) *
              C48073 * C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C1117 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C48157) *
              C48193 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C1117 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C48157) *
              C48180 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C1117 +
           (C42730 * C319 - C42731 * C304 - C42730 * C320 + C42727 * C334 +
            C42732 * C1339 - C42733 * C1327 - C42732 * C1340 + C42728 * C1354 +
            C42734 * C1349 - C42735 * C1332 - C42734 * C1350 + C42729 * C1359) *
               C48073 * C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
           C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
           C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
              C48073 * C47818 * C47887 * C1184 -
          (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
           C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
           C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
              C48073 * C47818 * C47887 * C1185 +
          (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
           C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
           C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
              C48073 * C47818 * C47887 * C1186 -
          (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
           C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
           C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
              C48073 * C47818 * C47887 * C1187 +
          (C42730 * C1202 - C42731 * C1193 - C42730 * C1203 + C42727 * C1211 +
           C42732 * C6522 - C42733 * C6520 - C42732 * C6523 + C42728 * C6526 +
           C42734 * C22517 - C42735 * C22516 - C42734 * C22518 +
           C42729 * C22519) *
              C48073 * C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C1870 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C1871 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C48160) *
              C47869 * C48193 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C1871 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C1870 -
           (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
            C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
            C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
               C48073 * C47818 * C48160) *
              C47869 * C48180 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C1870 -
           (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
            C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
            C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
               C48073 * C47818 * C1871 +
           (C42730 * C520 - C42731 * C505 - C42730 * C521 + C42727 * C535 +
            C42732 * C2056 - C42733 * C2050 - C42732 * C2057 + C42728 * C2068 +
            C42734 * C2066 - C42735 * C2055 - C42734 * C2067 + C42729 * C2073) *
               C48073 * C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C1870 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C1871 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C48160) *
              C48196 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C1871 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C1870 -
           (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
            C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
            C42730 * C1337 - C42731 * C1326 - C42730 * C1338 + C42727 * C1353) *
               C48073 * C47818 * C48160) *
              C48184 +
          ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C1870 -
           (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
            C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
            C42730 * C1343 - C42731 * C1329 - C42730 * C1344 + C42727 * C1356) *
               C48073 * C47818 * C1871 +
           (C42730 * C1345 - C42731 * C1330 - C42730 * C1346 + C42727 * C1357 +
            C42732 * C7384 - C42733 * C7382 - C42732 * C7385 + C42728 * C7388 +
            C42734 * C23163 - C42735 * C23162 - C42734 * C23164 +
            C42729 * C23165) *
               C48073 * C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C3332 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C48125 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C3332) *
               C47932) *
              C47846 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C3332) *
               C48125 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C3332 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C47932) *
              C47855 +
          (((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
             C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
             C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
                C48073 * C47818 * C3332 -
            (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
             C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
             C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
                C48073 * C47818 * C47974) *
               C48125 +
           ((C42730 * C971 - C42731 * C964 - C42730 * C972 + C42727 * C979 +
             C42732 * C1333 - C42733 * C1324 - C42732 * C1334 + C42728 * C1351 +
             C42734 * C2467 - C42735 * C2462 - C42734 * C2468 +
             C42729 * C2471) *
                C48073 * C47818 * C47974 -
            (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
             C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
             C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
                C48073 * C47818 * C3332) *
               C47932) *
              C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C47970 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47977 +
            (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
             C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
             C42734 * C2062 - C42735 * C2053 - C42734 * C2063 +
             C42729 * C2071) *
                C48073 * C47818 * C3840) *
               C48125 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47977 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C47970 -
            (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
             C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
             C42730 * C1337 - C42731 * C1326 - C42730 * C1338 +
             C42727 * C1353) *
                C48073 * C47818 * C3840) *
               C47932) *
              C2678 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47977 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C47970 -
            (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
             C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
             C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
                C48073 * C47818 * C3840) *
               C48125 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C47970 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47977 +
            (C42730 * C1335 - C42731 * C1325 - C42730 * C1336 + C42727 * C1352 +
             C42732 * C2465 - C42733 * C2461 - C42732 * C2466 + C42728 * C2470 +
             C42734 * C6913 - C42735 * C6910 - C42734 * C6914 +
             C42729 * C6916) *
                C48073 * C47818 * C3840) *
               C47932) *
              C47852)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C3332 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C48196 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C3332) *
               C48184 +
           ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
             C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
             C42734 * C1345 - C42735 * C1330 - C42734 * C1346 +
             C42729 * C1357) *
                C48073 * C47818 * C3332 -
            (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
             C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
             C42730 * C1343 - C42731 * C1329 - C42730 * C1344 +
             C42727 * C1356) *
                C48073 * C47818 * C47974) *
               C48157) *
              C2678 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C3332) *
               C48196 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C3332 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C48184 +
           ((C42730 * C1341 - C42731 * C1328 - C42730 * C1342 + C42727 * C1355 +
             C42732 * C1347 - C42733 * C1331 - C42732 * C1348 + C42728 * C1358 +
             C42734 * C7386 - C42735 * C7383 - C42734 * C7387 +
             C42729 * C7389) *
                C48073 * C47818 * C47974 -
            (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
             C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
             C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
                C48073 * C47818 * C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C3332 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C47974) *
              C47869 * C48202 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C47974 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C3332) *
              C47869 * C48195 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C3332 -
           (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
            C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
            C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
               C48073 * C47818 * C47974) *
              C47869 * C48182 +
          ((C42730 * C522 - C42731 * C506 - C42730 * C523 + C42727 * C536 +
            C42732 * C524 - C42733 * C507 - C42732 * C525 + C42728 * C537 +
            C42734 * C2343 - C42735 * C2342 - C42734 * C2344 + C42729 * C2345) *
               C48073 * C47818 * C47974 -
           (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
            C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
            C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
               C48073 * C47818 * C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C48204 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C48201 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C48192 -
           (C42734 * C12651 - C42735 * C12649 - C42734 * C12652 +
            C42729 * C12655 + C42732 * C2062 - C42733 * C2053 - C42732 * C2063 +
            C42728 * C2071 + C42730 * C2060 - C42731 * C2052 - C42730 * C2061 +
            C42727 * C2070) *
               C48073 * C47818 * C48173) *
              C47869 * C2678 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C48201 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C48204 -
           (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
            C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
            C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
               C48073 * C47818 * C48192 +
           (C42730 * C2058 - C42731 * C2051 - C42730 * C2059 + C42727 * C2069 +
            C42732 * C2064 - C42733 * C2054 - C42732 * C2065 + C42728 * C2072 +
            C42734 * C12653 - C42735 * C12650 - C42734 * C12654 +
            C42729 * C12656) *
               C48073 * C47818 * C48173) *
              C47869 * C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47970 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C47977 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C3840) *
              C47869 * C47846 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C47977 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47970 -
           (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
            C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
            C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
               C48073 * C47818 * C3840) *
              C47869 * C47855 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47970 -
           (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
            C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
            C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
               C48073 * C47818 * C47977 +
           (C42730 * C520 - C42731 * C505 - C42730 * C521 + C42727 * C535 +
            C42732 * C2056 - C42733 * C2050 - C42732 * C2057 + C42728 * C2068 +
            C42734 * C2066 - C42735 * C2055 - C42734 * C2067 + C42729 * C2073) *
               C48073 * C47818 * C3840) *
              C47869 * C2941)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C3332 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C47974) *
              C47869 * C48202 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C47974 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C3332) *
              C47869 * C48195 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C3332 -
           (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
            C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
            C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
               C48073 * C47818 * C47974) *
              C47869 * C48182 +
          ((C42730 * C522 - C42731 * C506 - C42730 * C523 + C42727 * C536 +
            C42732 * C524 - C42733 * C507 - C42732 * C525 + C42728 * C537 +
            C42734 * C2343 - C42735 * C2342 - C42734 * C2344 + C42729 * C2345) *
               C48073 * C47818 * C47974 -
           (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
            C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
            C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
               C48073 * C47818 * C3332) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C3332 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C48196 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C3332) *
               C48184 +
           ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
             C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
             C42734 * C1345 - C42735 * C1330 - C42734 * C1346 +
             C42729 * C1357) *
                C48073 * C47818 * C3332 -
            (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
             C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
             C42730 * C1343 - C42731 * C1329 - C42730 * C1344 +
             C42727 * C1356) *
                C48073 * C47818 * C47974) *
               C48157) *
              C2678 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C3332) *
               C48196 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C3332 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C48184 +
           ((C42730 * C1341 - C42731 * C1328 - C42730 * C1342 + C42727 * C1355 +
             C42732 * C1347 - C42733 * C1331 - C42732 * C1348 + C42728 * C1358 +
             C42734 * C7386 - C42735 * C7383 - C42734 * C7387 +
             C42729 * C7389) *
                C48073 * C47818 * C47974 -
            (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
             C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
             C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
                C48073 * C47818 * C3332) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C48125 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C47932) *
              C688 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C47932 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C48125) *
              C689 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C48125 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C47932) *
              C690 +
          ((C42730 * C321 - C42731 * C305 - C42730 * C322 + C42727 * C335 +
            C42732 * C973 - C42733 * C965 - C42732 * C974 + C42728 * C980 +
            C42734 * C2221 - C42735 * C2220 - C42734 * C2222 + C42729 * C2223) *
               C48073 * C47818 * C47887 * C47932 -
           (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
            C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
            C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
               C48073 * C47818 * C47887 * C48125) *
              C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C1458 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C1459 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C1460 -
           (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
            C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
            C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
               C48073 * C47818 * C47887 * C48167) *
              C48111 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C1459 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C1458 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C1460 +
           (C42730 * C1198 - C42731 * C1191 - C42730 * C1199 + C42727 * C1209 +
            C42732 * C1753 - C42733 * C1749 - C42732 * C1754 + C42728 * C1758 +
            C42734 * C6023 - C42735 * C6020 - C42734 * C6024 + C42729 * C6026) *
               C48073 * C47818 * C47887 * C48167) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C48126 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C48125 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C48126) *
               C47932) *
              C296 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C48126) *
               C48125 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C48126 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C47932) *
              C297 +
          (((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
             C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
             C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
                C48073 * C47818 * C48126 -
            (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
             C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
             C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
                C48073 * C47818 * C47974) *
               C48125 +
           ((C42730 * C971 - C42731 * C964 - C42730 * C972 + C42727 * C979 +
             C42732 * C1333 - C42733 * C1324 - C42732 * C1334 + C42728 * C1351 +
             C42734 * C2467 - C42735 * C2462 - C42734 * C2468 +
             C42729 * C2471) *
                C48073 * C47818 * C47974 -
            (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
             C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
             C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
                C48073 * C47818 * C48126) *
               C47932) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C48126 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C47974) *
              C1458 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C47974 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C48126) *
              C1459 +
          ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C48126 -
           (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
            C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
            C42730 * C1343 - C42731 * C1329 - C42730 * C1344 + C42727 * C1356) *
               C48073 * C47818 * C47974) *
              C1460 +
          ((C42730 * C1751 - C42731 * C1748 - C42730 * C1752 + C42727 * C1757 +
            C42732 * C6021 - C42733 * C6019 - C42732 * C6022 + C42728 * C6025 +
            C42734 * C23509 - C42735 * C23508 - C42734 * C23510 +
            C42729 * C23511) *
               C48073 * C47818 * C47974 -
           (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
            C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
            C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
               C48073 * C47818 * C48126) *
              C48167) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C48196 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C48184 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C48157) *
              C296 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C48184 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C48196 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C48157) *
              C297 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C48196 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C48184 +
           (C42730 * C319 - C42731 * C304 - C42730 * C320 + C42727 * C334 +
            C42732 * C1339 - C42733 * C1327 - C42732 * C1340 + C42728 * C1354 +
            C42734 * C1349 - C42735 * C1332 - C42734 * C1350 + C42729 * C1359) *
               C48073 * C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
           C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
           C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
              C48073 * C47818 * C47887 * C47869 * C108 -
          (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
           C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
           C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
              C48073 * C47818 * C47887 * C47869 * C109 +
          (C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
           C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
           C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
              C48073 * C47818 * C47887 * C47869 * C110 -
          (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
           C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
           C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
              C48073 * C47818 * C47887 * C47869 * C111 +
          (C42730 * C130 - C42731 * C119 - C42730 * C131 + C42727 * C140 +
           C42732 * C526 - C42733 * C508 - C42732 * C527 + C42728 * C538 +
           C42734 * C528 - C42735 * C509 - C42734 * C529 + C42729 * C539) *
              C48073 * C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C48197 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C48186 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C48160) *
              C47869 * C296 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C48186 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C48197 -
           (C42734 * C2064 - C42735 * C2054 - C42734 * C2065 + C42729 * C2072 +
            C42732 * C2058 - C42733 * C2051 - C42732 * C2059 + C42728 * C2069 +
            C42730 * C518 - C42731 * C504 - C42730 * C519 + C42727 * C534) *
               C48073 * C47818 * C48160) *
              C47869 * C297 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C48197 -
           (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
            C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
            C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
               C48073 * C47818 * C48186 +
           (C42730 * C520 - C42731 * C505 - C42730 * C521 + C42727 * C535 +
            C42732 * C2056 - C42733 * C2050 - C42732 * C2057 + C42728 * C2068 +
            C42734 * C2066 - C42735 * C2055 - C42734 * C2067 + C42729 * C2073) *
               C48073 * C47818 * C48160) *
              C47869 * C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C1117 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C48157) *
              C48193 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C1117 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C48157) *
              C48180 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C1117 +
           (C42730 * C319 - C42731 * C304 - C42730 * C320 + C42727 * C334 +
            C42732 * C1339 - C42733 * C1327 - C42732 * C1340 + C42728 * C1354 +
            C42734 * C1349 - C42735 * C1332 - C42734 * C1350 + C42729 * C1359) *
               C48073 * C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
           C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
           C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
              C48073 * C47818 * C47887 * C1184 -
          (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
           C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
           C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
              C48073 * C47818 * C47887 * C1185 +
          (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
           C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
           C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
              C48073 * C47818 * C47887 * C1186 -
          (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
           C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
           C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
              C48073 * C47818 * C47887 * C1187 +
          (C42730 * C1202 - C42731 * C1193 - C42730 * C1203 + C42727 * C1211 +
           C42732 * C6522 - C42733 * C6520 - C42732 * C6523 + C42728 * C6526 +
           C42734 * C22517 - C42735 * C22516 - C42734 * C22518 +
           C42729 * C22519) *
              C48073 * C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C48197 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C48186 +
           (C42730 * C516 - C42731 * C503 - C42730 * C517 + C42727 * C533 +
            C42732 * C2060 - C42733 * C2052 - C42732 * C2061 + C42728 * C2070 +
            C42734 * C2062 - C42735 * C2053 - C42734 * C2063 + C42729 * C2071) *
               C48073 * C47818 * C48160) *
              C1116 +
          ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
            C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
            C42734 * C2463 - C42735 * C2460 - C42734 * C2464 + C42729 * C2469) *
               C48073 * C47818 * C48186 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C48197 -
           (C42734 * C6911 - C42735 * C6909 - C42734 * C6912 + C42729 * C6915 +
            C42732 * C2463 - C42733 * C2460 - C42732 * C2464 + C42728 * C2469 +
            C42730 * C1337 - C42731 * C1326 - C42730 * C1338 + C42727 * C1353) *
               C48073 * C47818 * C48160) *
              C1117 +
          ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C48197 -
           (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
            C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
            C42730 * C1343 - C42731 * C1329 - C42730 * C1344 + C42727 * C1356) *
               C48073 * C47818 * C48186 +
           (C42730 * C1345 - C42731 * C1330 - C42730 * C1346 + C42727 * C1357 +
            C42732 * C7384 - C42733 * C7382 - C42732 * C7385 + C42728 * C7388 +
            C42734 * C23163 - C42735 * C23162 - C42734 * C23164 +
            C42729 * C23165) *
               C48073 * C47818 * C48160) *
              C48157) *
         C47841) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C48126 -
           (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
            C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
            C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
               C48073 * C47818 * C47974) *
              C47869 * C688 +
          ((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
            C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
            C42734 * C2058 - C42735 * C2051 - C42734 * C2059 + C42729 * C2069) *
               C48073 * C47818 * C47974 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C48126) *
              C47869 * C689 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C48126 -
           (C42734 * C2056 - C42735 * C2050 - C42734 * C2057 + C42729 * C2068 +
            C42732 * C520 - C42733 * C505 - C42732 * C521 + C42728 * C535 +
            C42730 * C510 - C42731 * C500 - C42730 * C511 + C42727 * C530) *
               C48073 * C47818 * C47974) *
              C47869 * C690 +
          ((C42730 * C522 - C42731 * C506 - C42730 * C523 + C42727 * C536 +
            C42732 * C524 - C42733 * C507 - C42732 * C525 + C42728 * C537 +
            C42734 * C2343 - C42735 * C2342 - C42734 * C2344 + C42729 * C2345) *
               C48073 * C47818 * C47974 -
           (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
            C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
            C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
               C48073 * C47818 * C48126) *
              C47869 * C48161)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
             C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
             C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
                C48073 * C47818 * C48126 -
            (C42734 * C2060 - C42735 * C2052 - C42734 * C2061 + C42729 * C2070 +
             C42732 * C516 - C42733 * C503 - C42732 * C517 + C42728 * C533 +
             C42730 * C514 - C42731 * C502 - C42730 * C515 + C42727 * C532) *
                C48073 * C47818 * C47974) *
               C1116 +
           ((C42730 * C967 - C42731 * C962 - C42730 * C968 + C42727 * C977 +
             C42732 * C1337 - C42733 * C1326 - C42732 * C1338 + C42728 * C1353 +
             C42734 * C2463 - C42735 * C2460 - C42734 * C2464 +
             C42729 * C2469) *
                C48073 * C47818 * C47974 -
            (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
             C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
             C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
                C48073 * C47818 * C48126) *
               C1117 +
           ((C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
             C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
             C42734 * C1345 - C42735 * C1330 - C42734 * C1346 +
             C42729 * C1357) *
                C48073 * C47818 * C48126 -
            (C42734 * C7384 - C42735 * C7382 - C42734 * C7385 + C42729 * C7388 +
             C42732 * C1345 - C42733 * C1330 - C42732 * C1346 + C42728 * C1357 +
             C42730 * C1343 - C42731 * C1329 - C42730 * C1344 +
             C42727 * C1356) *
                C48073 * C47818 * C47974) *
               C48157) *
              C48111 +
          (((C42730 * C512 - C42731 * C501 - C42730 * C513 + C42727 * C531 +
             C42732 * C518 - C42733 * C504 - C42732 * C519 + C42728 * C534 +
             C42734 * C2058 - C42735 * C2051 - C42734 * C2059 +
             C42729 * C2069) *
                C48073 * C47818 * C47974 -
            (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
             C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
             C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
                C48073 * C47818 * C48126) *
               C1116 +
           ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
             C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
             C42734 * C1335 - C42735 * C1325 - C42734 * C1336 +
             C42729 * C1352) *
                C48073 * C47818 * C48126 -
            (C42734 * C2465 - C42735 * C2461 - C42734 * C2466 + C42729 * C2470 +
             C42732 * C1335 - C42733 * C1325 - C42732 * C1336 + C42728 * C1352 +
             C42730 * C969 - C42731 * C963 - C42730 * C970 + C42727 * C978) *
                C48073 * C47818 * C47974) *
               C1117 +
           ((C42730 * C1341 - C42731 * C1328 - C42730 * C1342 + C42727 * C1355 +
             C42732 * C1347 - C42733 * C1331 - C42732 * C1348 + C42728 * C1358 +
             C42734 * C7386 - C42735 * C7383 - C42734 * C7387 +
             C42729 * C7389) *
                C48073 * C47818 * C47974 -
            (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
             C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
             C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
                C48073 * C47818 * C48126) *
               C48157) *
              C47852)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
           C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
           C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
              C48073 * C47818 * C47887 * C47869 * C108 -
          (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
           C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
           C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
              C48073 * C47818 * C47887 * C47869 * C109 +
          (C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
           C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
           C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
              C48073 * C47818 * C47887 * C47869 * C110 -
          (C42734 * C524 - C42735 * C507 - C42734 * C525 + C42729 * C537 +
           C42732 * C522 - C42733 * C506 - C42732 * C523 + C42728 * C536 +
           C42730 * C128 - C42731 * C118 - C42730 * C129 + C42727 * C139) *
              C48073 * C47818 * C47887 * C47869 * C111 +
          (C42730 * C130 - C42731 * C119 - C42730 * C131 + C42727 * C140 +
           C42732 * C526 - C42733 * C508 - C42732 * C527 + C42728 * C538 +
           C42734 * C528 - C42735 * C509 - C42734 * C529 + C42729 * C539) *
              C48073 * C47818 * C47887 * C47869 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C48196 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C48184 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C48157) *
              C296 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C48184 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C48196 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C48157) *
              C297 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C48196 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C48184 +
           (C42730 * C319 - C42731 * C304 - C42730 * C320 + C42727 * C334 +
            C42732 * C1339 - C42733 * C1327 - C42732 * C1340 + C42728 * C1354 +
            C42734 * C1349 - C42735 * C1332 - C42734 * C1350 + C42729 * C1359) *
               C48073 * C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
            C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
            C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
            C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
            C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
               C48073 * C47818 * C47887 * C1117 +
           (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
            C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
            C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
               C48073 * C47818 * C47887 * C48157) *
              C48193 +
          ((C42730 * C311 - C42731 * C300 - C42730 * C312 + C42727 * C330 +
            C42732 * C969 - C42733 * C963 - C42732 * C970 + C42728 * C978 +
            C42734 * C1335 - C42735 * C1325 - C42734 * C1336 + C42729 * C1352) *
               C48073 * C47818 * C47887 * C1117 -
           (C42734 * C518 - C42735 * C504 - C42734 * C519 + C42729 * C534 +
            C42732 * C512 - C42733 * C501 - C42732 * C513 + C42728 * C531 +
            C42730 * C124 - C42731 * C116 - C42730 * C125 + C42727 * C137) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1347 - C42735 * C1331 - C42734 * C1348 + C42729 * C1358 +
            C42732 * C1341 - C42733 * C1328 - C42732 * C1342 + C42728 * C1355 +
            C42730 * C317 - C42731 * C303 - C42730 * C318 + C42727 * C333) *
               C48073 * C47818 * C47887 * C48157) *
              C48180 +
          ((C42730 * C126 - C42731 * C117 - C42730 * C127 + C42727 * C138 +
            C42732 * C510 - C42733 * C500 - C42732 * C511 + C42728 * C530 +
            C42734 * C520 - C42735 * C505 - C42734 * C521 + C42729 * C535) *
               C48073 * C47818 * C47887 * C1116 -
           (C42734 * C1333 - C42735 * C1324 - C42734 * C1334 + C42729 * C1351 +
            C42732 * C971 - C42733 * C964 - C42732 * C972 + C42728 * C979 +
            C42730 * C309 - C42731 * C299 - C42730 * C310 + C42727 * C329) *
               C48073 * C47818 * C47887 * C1117 +
           (C42730 * C319 - C42731 * C304 - C42730 * C320 + C42727 * C334 +
            C42732 * C1339 - C42733 * C1327 - C42732 * C1340 + C42728 * C1354 +
            C42734 * C1349 - C42735 * C1332 - C42734 * C1350 + C42729 * C1359) *
               C48073 * C47818 * C47887 * C48157) *
              C48151)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C42730 * C122 - C42731 * C115 - C42730 * C123 + C42727 * C136 +
           C42732 * C514 - C42733 * C502 - C42732 * C515 + C42728 * C532 +
           C42734 * C516 - C42735 * C503 - C42734 * C517 + C42729 * C533) *
              C48073 * C47818 * C47887 * C1184 -
          (C42734 * C1337 - C42735 * C1326 - C42734 * C1338 + C42729 * C1353 +
           C42732 * C967 - C42733 * C962 - C42732 * C968 + C42728 * C977 +
           C42730 * C313 - C42731 * C301 - C42730 * C314 + C42727 * C331) *
              C48073 * C47818 * C47887 * C1185 +
          (C42730 * C315 - C42731 * C302 - C42730 * C316 + C42727 * C332 +
           C42732 * C1343 - C42733 * C1329 - C42732 * C1344 + C42728 * C1356 +
           C42734 * C1345 - C42735 * C1330 - C42734 * C1346 + C42729 * C1357) *
              C48073 * C47818 * C47887 * C1186 -
          (C42734 * C6021 - C42735 * C6019 - C42734 * C6022 + C42729 * C6025 +
           C42732 * C1751 - C42733 * C1748 - C42732 * C1752 + C42728 * C1757 +
           C42730 * C1200 - C42731 * C1192 - C42730 * C1201 + C42727 * C1210) *
              C48073 * C47818 * C47887 * C1187 +
          (C42730 * C1202 - C42731 * C1193 - C42730 * C1203 + C42727 * C1211 +
           C42732 * C6522 - C42733 * C6520 - C42732 * C6523 + C42728 * C6526 +
           C42734 * C22517 - C42735 * C22516 - C42734 * C22518 +
           C42729 * C22519) *
              C48073 * C47818 * C47887 * C1188) *
         C47841) /
            (p * q * std::sqrt(p + q));
}
