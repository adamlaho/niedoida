/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AC_xx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_13_11(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47080 = ae * be;
    const double C47079 = ae + be;
    const double C47078 = 0 * be;
    const double C47077 = xA - xB;
    const double C47110 = 0 * ce;
    const double C47109 = ce * de;
    const double C47108 = 0 * de;
    const double C47107 = 0 * de;
    const double C47106 = ce + de;
    const double C47105 = 0 * de;
    const double C47104 = xC - xD;
    const double C47165 = 0 * de;
    const double C47233 = p + q;
    const double C47232 = p * q;
    const double C47238 = xP - xQ;
    const double C47237 = bs[2];
    const double C47247 = ae * ce;
    const double C47243 = bs[3];
    const double C47256 = bs[4];
    const double C47277 = bs[5];
    const double C47319 = bs[6];
    const double C47388 = bs[7];
    const double C47469 = yP - yQ;
    const double C47518 = zP - zQ;
    const double C121 = bs[0];
    const double C48080 = yC - yD;
    const double C48092 = zC - zD;
    const double C48262 = yA - yB;
    const double C48267 = zA - zB;
    const double C47081 = std::pow(C47079, 2);
    const double C48035 = 2 * C47079;
    const double C47082 = C47080 * C47077;
    const double C48026 = std::pow(C47077, 2);
    const double C48348 = C47077 * be;
    const double C48347 = C47077 * ae;
    const double C47117 = C47110 / C47106;
    const double C47114 = C47108 / C47106;
    const double C47112 = 2 * C47106;
    const double C47111 = std::pow(C47106, 2);
    const double C47239 = C47106 * C47079;
    const double C47116 = C47109 * C47104;
    const double C47115 = C47104 * C47108;
    const double C47113 = C47104 * C47107;
    const double C48040 = C47104 * de;
    const double C48039 = C47104 * ce;
    const double C48038 = std::pow(C47104, 2);
    const double C47166 = C47165 / C47106;
    const double C47234 = 2 * C47232;
    const double C47248 = C47238 * ae;
    const double C47246 = std::pow(C47238, 2);
    const double C47244 = C47238 * ce;
    const double C47490 = std::pow(C47469, 2);
    const double C47539 = std::pow(C47518, 2);
    const double C48081 = std::pow(C48080, 2);
    const double C48136 = C48080 * de;
    const double C48134 = C48080 * ce;
    const double C48093 = std::pow(C48092, 2);
    const double C48176 = C48092 * de;
    const double C48174 = C48092 * ce;
    const double C48282 = std::pow(C48262, 2);
    const double C48382 = C48262 * be;
    const double C48380 = C48262 * ae;
    const double C48297 = std::pow(C48267, 2);
    const double C48383 = C48267 * be;
    const double C48381 = C48267 * ae;
    const double C47083 = 2 * C47081;
    const double C48349 = std::pow(C48035, -1);
    const double C48027 = C48026 * C47080;
    const double C48052 = std::pow(C47112, -1);
    const double C48357 = std::pow(C47112, -2);
    const double C47118 = 2 * C47111;
    const double C48361 = C47111 * C47112;
    const double C48360 = 4 * C47111;
    const double C47120 = C47115 / C47106;
    const double C47119 = C47113 / C47106;
    const double C48350 = std::pow(C48039, 2);
    const double C48041 = C48038 * C47109;
    const double C47236 = C47234 / C47233;
    const double C142 =
        (-((std::pow(xP - xQ, 2) * bs[2] * std::pow(C47234 / C47233, 2) -
            (bs[1] * C47234) / C47233) *
           ae * ce) /
         C47106) /
        C47079;
    const double C122 = -(C47238 * bs[1] * C47234) / C47233;
    const double C271 = -(C47469 * bs[1] * C47234) / C47233;
    const double C424 = -(C47518 * bs[1] * C47234) / C47233;
    const double C47251 = C47243 * C47248;
    const double C47262 = C47256 * C47248;
    const double C47286 = C47277 * C47248;
    const double C47334 = C47319 * C47248;
    const double C47409 = C47388 * C47248;
    const double C128 = (-(bs[1] * C47248 * C47234) / C47233) / C47079;
    const double C47258 = C47246 * C47256;
    const double C47281 = C47246 * C47277;
    const double C47328 = C47246 * C47319;
    const double C47402 = C47246 * C47388;
    const double C47250 = C47243 * C47244;
    const double C47259 = C47256 * C47244;
    const double C47282 = C47277 * C47244;
    const double C47330 = C47319 * C47244;
    const double C47405 = C47388 * C47244;
    const double C131 = (bs[1] * C47244 * C47234) / (C47233 * C47106);
    const double C48082 = C48081 * C47109;
    const double C48362 = std::pow(C48134, 2);
    const double C48094 = C48093 * C47109;
    const double C48364 = std::pow(C48174, 2);
    const double C48283 = C48282 * C47080;
    const double C48298 = C48297 * C47080;
    const double C48028 = C48027 / C47079;
    const double C47127 = C47108 / C47118;
    const double C47124 = C47107 / C47118;
    const double C47123 = C47105 / C47118;
    const double C48395 = 4 * C48361;
    const double C48394 = C47106 * C48360;
    const double C47125 = 0 - C47120;
    const double C47122 = 0 - C47119;
    const double C48042 = C48041 / C47106;
    const double C47240 = std::pow(C47236, 2);
    const double C47242 = -C47236;
    const double C47257 = std::pow(C47236, 4);
    const double C47320 = std::pow(C47236, 6);
    const double C48083 = C48082 / C47106;
    const double C48095 = C48094 / C47106;
    const double C48284 = C48283 / C47079;
    const double C48299 = C48298 / C47079;
    const double C48029 = -C48028;
    const double C47130 = C47125 * ce;
    const double C47129 = C47122 * ce;
    const double C48043 = -C48042;
    const double C47245 = C47237 * C47240;
    const double C143 =
        (-(C47240 * C47237 * C47238 * ae * ce) / C47106) / C47079 -
        (ae * C47240 * C47237 * C47238 * ce) / C47239 -
        (C47238 *
         (C47237 * C47240 +
          std::pow(C47238, 2) * bs[3] * std::pow(-C47236, 3)) *
         ae * ce) /
            C47239;
    const double C129 = (C47238 * C47240 * C47237 * C47248) / C47079 -
                        (ae * bs[1] * C47234) / (C47233 * C47079);
    const double C132 = (ce * bs[1] * C47234) / (C47233 * C47106) -
                        (C47238 * C47240 * C47237 * C47244) / C47106;
    const double C283 = -(C47469 * C47240 * C47237 * C47244) / C47106;
    const double C284 = (C47469 * C47240 * C47237 * C47248) / C47079;
    const double C436 = -(C47518 * C47240 * C47237 * C47244) / C47106;
    const double C437 = (C47518 * C47240 * C47237 * C47248) / C47079;
    const double C47249 = std::pow(C47242, 3);
    const double C47278 = std::pow(C47242, 5);
    const double C47389 = std::pow(C47242, 7);
    const double C47266 = C47257 * C47262;
    const double C47265 = C47257 * C47259;
    const double C47264 = C47258 * C47257;
    const double C47276 = C47256 * C47257;
    const double C47342 = C47320 * C47334;
    const double C47339 = C47320 * C47330;
    const double C47338 = C47328 * C47320;
    const double C47387 = C47319 * C47320;
    const double C48084 = -C48083;
    const double C48096 = -C48095;
    const double C48285 = -C48284;
    const double C48300 = -C48299;
    const double C48030 = std::exp(C48029);
    const double C47134 = C47130 / C47106;
    const double C47133 = C47129 / C47106;
    const double C48044 = std::exp(C48043);
    const double C123 = C47245 * C47246 - (bs[1] * C47234) / C47233;
    const double C268 = C47469 * C47238 * C47245;
    const double C273 = C47245 * C47490 - (bs[1] * C47234) / C47233;
    const double C421 = C47518 * C47238 * C47245;
    const double C426 = C47245 * C47539 - (bs[1] * C47234) / C47233;
    const double C823 = C47518 * C47469 * C47245;
    const double C47253 = C47249 * C47251;
    const double C47252 = C47249 * C47250;
    const double C47255 = C47243 * C47249;
    const double C300 =
        (-(C47469 * (C47245 + C47246 * C47243 * C47249) * C47247) / C47106) /
        C47079;
    const double C453 =
        (-(C47518 * (C47245 + C47246 * C47243 * C47249) * C47247) / C47106) /
        C47079;
    const double C47293 = C47278 * C47286;
    const double C47290 = C47278 * C47282;
    const double C47289 = C47281 * C47278;
    const double C47318 = C47277 * C47278;
    const double C47418 = C47389 * C47409;
    const double C47415 = C47389 * C47405;
    const double C47414 = C47402 * C47389;
    const double C47269 = C47238 * C47266;
    const double C47274 = C47266 * ce;
    const double C47828 = C47469 * C47266;
    const double C47268 = C47238 * C47265;
    const double C47275 = ae * C47265;
    const double C47834 = C47469 * C47265;
    const double C47287 = C47276 * ae;
    const double C47285 = C47276 * C47246;
    const double C47284 = C47238 * C47276;
    const double C47283 = C47276 * ce;
    const double C47982 = C47276 * C47490;
    const double C47992 = C47469 * C47276;
    const double C47998 = C47276 * C47539;
    const double C48018 = C47518 * C47276;
    const double C47350 = C47238 * C47342;
    const double C47385 = C47342 * ce;
    const double C47499 = C47342 * C47490;
    const double C47548 = C47342 * C47539;
    const double C47570 = C47469 * C47342;
    const double C47597 = C47518 * C47342;
    const double C47347 = C47238 * C47339;
    const double C47386 = ae * C47339;
    const double C47500 = C47339 * C47490;
    const double C47549 = C47339 * C47539;
    const double C47571 = C47469 * C47339;
    const double C47598 = C47518 * C47339;
    const double C47410 = C47387 * ae;
    const double C47408 = C47387 * C47246;
    const double C47407 = C47238 * C47387;
    const double C47406 = C47387 * ce;
    const double C48085 = std::exp(C48084);
    const double C48097 = std::exp(C48096);
    const double C48286 = std::exp(C48285);
    const double C48301 = std::exp(C48300);
    const double C21704 = C48030 * C284;
    const double C26471 = C48030 * C437;
    const double C47084 = C47082 * C48030;
    const double C48385 = C48349 * C48030;
    const double C48384 = C48030 * C48347;
    const double C4601 = -(C48030 * C48348) / C47079;
    const double C47138 = C47134 - C47124;
    const double C47137 = C47133 - C47123;
    const double C47121 = C47116 * C48044;
    const double C48046 = C48044 * C48039;
    const double C48045 = C48044 / C47112;
    const double C48054 = C48052 * C48044;
    const double C48353 = C48044 * C48040;
    const double C48392 = C48357 * C48044;
    const double C48386 = C48044 * C48350;
    const double C130 =
        (C47240 * C47237 * C47248 + C47238 * (C47238 * C47253 + C47245 * ae) +
         C47238 * C47245 * ae) /
        C47079;
    const double C278 = (C47469 * (C47238 * C47253 + C47245 * ae)) / C47079;
    const double C288 = (C47240 * C47237 * C47248 + C47253 * C47490) / C47079;
    const double C431 = (C47518 * (C47238 * C47253 + C47245 * ae)) / C47079;
    const double C441 = (C47240 * C47237 * C47248 + C47253 * C47539) / C47079;
    const double C828 = (C47518 * C47469 * C47253) / C47079;
    const double C1042 =
        (2 * C47469 * C47253 + C47469 * (C47253 + C47266 * C47490)) / C47079;
    const double C1179 = (C47469 * C47253 + C47469 * C47266 * C47539) / C47079;
    const double C1185 = (C47518 * (C47253 + C47266 * C47490)) / C47079;
    const double C1872 =
        (2 * C47518 * C47253 + C47518 * (C47253 + C47266 * C47539)) / C47079;
    const double C144 =
        (-(ae * (C47238 * C47252 + C47245 * ce)) / C47106) / C47079 -
        ((C47245 + C47246 * C47243 * C47249) * C47247) / C47239 -
        ((C47238 * C47253 + C47245 * ae) * ce) / C47239 +
        C47238 * ((-(C47253 * ce) / C47106) / C47079 - (ae * C47252) / C47239 -
                  (C47238 *
                   (C47243 * C47249 + C47246 * bs[4] * std::pow(C47236, 4)) *
                   C47247) /
                      C47239);
    const double C133 = -(C47238 * (C47238 * C47252 + C47245 * ce) +
                          C47240 * C47237 * C47244 + C47238 * C47245 * ce) /
                        C47106;
    const double C282 = -(C47469 * (C47238 * C47252 + C47245 * ce)) / C47106;
    const double C291 = -(C47252 * C47490 + C47240 * C47237 * C47244) / C47106;
    const double C435 = -(C47518 * (C47238 * C47252 + C47245 * ce)) / C47106;
    const double C444 = -(C47252 * C47539 + C47240 * C47237 * C47244) / C47106;
    const double C831 = -(C47518 * C47469 * C47252) / C47106;
    const double C1039 = (-2 * C47469 * C47252) / C47106 -
                         (C47469 * (C47265 * C47490 + C47252)) / C47106;
    const double C1176 = -(C47469 * C47265 * C47539 + C47469 * C47252) / C47106;
    const double C1182 = -(C47518 * (C47265 * C47490 + C47252)) / C47106;
    const double C1869 = (-2 * C47518 * C47252) / C47106 -
                         (C47518 * (C47265 * C47539 + C47252)) / C47106;
    const double C47263 = C47255 * ae;
    const double C47261 = C47238 * C47255;
    const double C47260 = C47255 * ce;
    const double C47267 = C47255 + C47264;
    const double C47976 = C47469 * C47255;
    const double C124 =
        2 * C47238 * C47245 + C47238 * (C47245 + C47255 * C47246);
    const double C269 = C47469 * (C47245 + C47255 * C47246);
    const double C422 = C47518 * (C47245 + C47255 * C47246);
    const double C1033 =
        2 * C47469 * C47245 + C47469 * (C47245 + C47255 * C47490);
    const double C1034 =
        3 * (C47245 + C47255 * C47490) +
        C47469 * (2 * C47469 * C47255 + C47469 * (C47255 + C47276 * C47490));
    const double C1167 = C47469 * C47245 + C47469 * C47255 * C47539;
    const double C1170 = C47518 * (C47245 + C47255 * C47490);
    const double C1171 =
        C47245 + C47255 * C47490 + (C47255 + C47276 * C47490) * C47539;
    const double C1559 =
        C47518 * (2 * C47469 * C47255 + C47469 * (C47255 + C47276 * C47490));
    const double C1863 =
        2 * C47518 * C47245 + C47518 * (C47245 + C47255 * C47539);
    const double C1864 =
        3 * (C47245 + C47255 * C47539) +
        C47518 * (2 * C47518 * C47255 + C47518 * (C47255 + C47276 * C47539));
    const double C21706 = C48030 * C300;
    const double C26473 = C48030 * C453;
    const double C47298 = C47238 * C47293;
    const double C47316 = C47293 * ce;
    const double C47475 = C47469 * C47293;
    const double C47524 = C47518 * C47293;
    const double C47840 = C47293 * C47490;
    const double C47868 = C47293 * C47539;
    const double C1043 =
        (3 * (C47253 + C47266 * C47490) +
         C47469 * (2 * C47469 * C47266 + C47469 * (C47266 + C47293 * C47490))) /
        C47079;
    const double C1186 =
        (C47253 + C47266 * C47490 + (C47266 + C47293 * C47490) * C47539) /
        C47079;
    const double C1562 =
        (C47518 * (2 * C47469 * C47266 + C47469 * (C47266 + C47293 * C47490))) /
        C47079;
    const double C1873 =
        (3 * (C47253 + C47266 * C47539) +
         C47518 * (2 * C47518 * C47266 + C47518 * (C47266 + C47293 * C47539))) /
        C47079;
    const double C47297 = C47238 * C47290;
    const double C47317 = ae * C47290;
    const double C47476 = C47469 * C47290;
    const double C47525 = C47518 * C47290;
    const double C47846 = C47290 * C47490;
    const double C47874 = C47290 * C47539;
    const double C1046 =
        (-3 * (C47265 * C47490 + C47252)) / C47106 +
        C47469 * ((-2 * C47469 * C47265) / C47106 -
                  (C47469 * (C47290 * C47490 + C47265)) / C47106);
    const double C1189 =
        -((C47290 * C47490 + C47265) * C47539 + C47265 * C47490 + C47252) /
        C47106;
    const double C1565 =
        C47518 * ((-2 * C47469 * C47265) / C47106 -
                  (C47469 * (C47290 * C47490 + C47265)) / C47106);
    const double C1876 =
        (-3 * (C47265 * C47539 + C47252)) / C47106 +
        C47518 * ((-2 * C47518 * C47265) / C47106 -
                  (C47518 * (C47290 * C47539 + C47265)) / C47106);
    const double C47296 = C47276 + C47289;
    const double C47335 = C47318 * ae;
    const double C47333 = C47318 * C47246;
    const double C47332 = C47238 * C47318;
    const double C47331 = C47318 * ce;
    const double C47346 = C47318 + C47338;
    const double C48005 = C47318 * C47490;
    const double C48014 = C47469 * C47318;
    const double C48019 = C47318 * C47539;
    const double C47427 = C47238 * C47418;
    const double C47424 = C47238 * C47415;
    const double C47423 = C47387 + C47414;
    const double C47279 = C47274 / C47106;
    const double C47280 = C47275 / C47239;
    const double C47292 = C47255 + C47285;
    const double C47294 = C47284 * ae;
    const double C47291 = C47284 * ce;
    const double C47322 = 2 * C47284;
    const double C47978 = C47469 * C47284;
    const double C47983 = C47255 + C47982;
    const double C48004 = 2 * C47992;
    const double C47999 = C47255 + C47998;
    const double C48020 = 2 * C48018;
    const double C47400 = C47385 / C47106;
    const double C47502 = C47293 + C47499;
    const double C47551 = C47293 + C47548;
    const double C47575 = C47570 * ce;
    const double C47626 = C47518 * C47570;
    const double C47898 = C47570 * C47539;
    const double C47602 = C47597 * ce;
    const double C47401 = C47386 / C47239;
    const double C47503 = C47500 + C47290;
    const double C47552 = C47549 + C47290;
    const double C47576 = ae * C47571;
    const double C47627 = C47518 * C47571;
    const double C47901 = C47571 * C47539;
    const double C47603 = ae * C47598;
    const double C47417 = C47318 + C47408;
    const double C47419 = C47407 * ae;
    const double C47416 = C47407 * ce;
    const double C48135 = C48085 / C47112;
    const double C48137 = C48085 * C48134;
    const double C48144 = C48052 * C48085;
    const double C48368 = C48085 * C48136;
    const double C48398 = C48357 * C48085;
    const double C48396 = C48085 * C48362;
    const double C48175 = C48097 / C47112;
    const double C48177 = C48097 * C48174;
    const double C48184 = C48052 * C48097;
    const double C48374 = C48097 * C48176;
    const double C48401 = C48357 * C48097;
    const double C48399 = C48097 * C48364;
    const double C48416 = C48349 * C48286;
    const double C48415 = C48286 * C48380;
    const double C15915 = -(C48286 * C48382) / C47079;
    const double C48418 = C48349 * C48301;
    const double C48417 = C48301 * C48381;
    const double C31910 = -(C48301 * C48383) / C47079;
    const double C115 = ((0 * ae) / C47079 - C47084 / C47081) / (2 * C47079) -
                        (0 * be) / C47079;
    const double C4605 =
        (-C47078 / C47079) / (2 * C47079) -
        ((C48030 - (C47077 * 2 * C47084) / C47079) * be) / C47079;
    const double C4606 =
        (-(2 * C47084) / C47079) / (2 * C47079) - (0 * be) / C47079;
    const double C15917 =
        ((C48030 - (C47077 * 2 * C47084) / C47079) * ae) / C47079 -
        C47078 / C47083;
    const double C15918 = (0 * ae) / C47079 - C47084 / C47081;
    const double C21591 = -(2 * C47084) / C47079;
    const double C114 =
        (((C48030 - (C47077 * 2 * C47084) / C47079) * ae) / C47079 -
         C47078 / C47083) /
            (2 * C47079) -
        ((C47077 * ((0 * ae) / C47079 - C47084 / C47081) + C48385) * be) /
            C47079;
    const double C103 = C48385 / C48035;
    const double C101 = C48030 / C48035 - (C48384 * C48348) / C47081;
    const double C102 = C48384 / C47083 - (C48385 * C48348) / C47079;
    const double C15913 = C48384 / C47079;
    const double C4759 = C4601 * C300;
    const double C4755 = C4601 * C284;
    const double C10635 = C4601 * C453;
    const double C10631 = C4601 * C437;
    const double C47143 = C47138 / C47112;
    const double C47142 = C47104 * C47138;
    const double C47141 = C47137 + C47114;
    const double C47128 = C47121 / C47111;
    const double C47126 = 2 * C47121;
    const double C48047 = C48046 * C48040;
    const double C48053 = C48046 / C47118;
    const double C48354 = C48052 * C48046;
    const double C48352 = C48046 / C47106;
    const double C259 = (C48044 * std::pow(C48040, 2)) / C47111 + C48045;
    const double C48055 = C48054 * C48040;
    const double C48358 = C48039 * C48054;
    const double C48356 = 2 * C48054;
    const double C48402 = C48054 / C48360;
    const double C108 = C48054 / C48395;
    const double C2723 = C48054 / C47112;
    const double C48388 = C48353 / C47106;
    const double C260 = (-2 * C48052 * C48353) / C47106;
    const double C48419 = C48386 / C47111;
    const double C4765 = C4601 * C278;
    const double C4757 = C48385 * C278;
    const double C16069 = C48385 * C278;
    const double C21708 = C48030 * C278;
    const double C4789 = C4601 * C288;
    const double C21716 = C48030 * C288;
    const double C10641 = C4601 * C431;
    const double C10633 = C48385 * C431;
    const double C26475 = C48030 * C431;
    const double C32208 = C48385 * C431;
    const double C10665 = C4601 * C441;
    const double C26487 = C48030 * C441;
    const double C5449 = C4601 * C828;
    const double C22265 = C48030 * C828;
    const double C5711 = C4601 * C1042;
    const double C21732 = C48030 * C1042;
    const double C5889 = C4601 * C1179;
    const double C22651 = C48030 * C1179;
    const double C5897 = C4601 * C1185;
    const double C22277 = C48030 * C1185;
    const double C12379 = C4601 * C1872;
    const double C28271 = C48030 * C1872;
    const double C47272 = C47269 + C47263;
    const double C274 = C47238 * C47245 + C47261 * C47490;
    const double C427 = C47238 * C47245 + C47261 * C47539;
    const double C824 = C47518 * C47469 * C47261;
    const double C1032 =
        2 * C47469 * C47261 + C47469 * (C47261 + C47284 * C47490);
    const double C1166 = C47469 * C47261 + C47469 * C47284 * C47539;
    const double C1169 = C47518 * (C47261 + C47284 * C47490);
    const double C1862 =
        2 * C47518 * C47261 + C47518 * (C47261 + C47284 * C47539);
    const double C47271 = C47268 + C47260;
    const double C47270 = C47267 * C47247;
    const double C2239 =
        2 * C47518 * C47976 + C47518 * (C47976 + C47469 * C47276 * C47539);
    const double C6795 =
        3 * (C47976 + C47992 * C47539) +
        C47518 * (2 * C47518 * C47992 +
                  C47518 * (C47992 + C47469 * C47318 * C47539));
    const double C47302 = C47298 + C47287;
    const double C47326 = C47316 / C47106;
    const double C47478 = C47475 * ce;
    const double C47880 = 2 * C47475;
    const double C2242 =
        (2 * C47518 * C47828 + C47518 * (C47828 + C47475 * C47539)) / C47079;
    const double C6797 =
        (3 * (C47828 + C47475 * C47539) +
         C47518 * (2 * C47518 * C47475 + C47518 * (C47475 + C47570 * C47539))) /
        C47079;
    const double C47527 = C47524 * ce;
    const double C47904 = 2 * C47524;
    const double C47841 = C47266 + C47840;
    const double C47869 = C47266 + C47868;
    const double C5725 = C4601 * C1043;
    const double C22514 = C48030 * C1043;
    const double C5911 = C4601 * C1186;
    const double C22655 = C48030 * C1186;
    const double C6417 = C4601 * C1562;
    const double C22659 = C48030 * C1562;
    const double C12393 = C4601 * C1873;
    const double C28281 = C48030 * C1873;
    const double C47301 = C47297 + C47283;
    const double C47327 = C47317 / C47239;
    const double C47479 = ae * C47476;
    const double C47884 = -2 * C47476;
    const double C2245 = (-2 * C47518 * C47834) / C47106 -
                         (C47518 * (C47476 * C47539 + C47834)) / C47106;
    const double C6799 =
        (-3 * (C47476 * C47539 + C47834)) / C47106 +
        C47518 * ((-2 * C47518 * C47476) / C47106 -
                  (C47518 * (C47571 * C47539 + C47476)) / C47106);
    const double C47528 = ae * C47525;
    const double C47908 = -2 * C47525;
    const double C47847 = C47846 + C47265;
    const double C47875 = C47874 + C47265;
    const double C47300 = C47296 * C47247;
    const double C47358 = C47350 + C47335;
    const double C47341 = C47276 + C47333;
    const double C47343 = C47332 * ae;
    const double C47340 = C47332 * ce;
    const double C47392 = 2 * C47332;
    const double C47985 = C47332 * C47490;
    const double C47994 = C47469 * C47332;
    const double C48001 = C47332 * C47539;
    const double C1035 =
        3 * (C47261 + C47284 * C47490) +
        C47469 * (2 * C47469 * C47284 + C47469 * (C47284 + C47332 * C47490));
    const double C1172 =
        C47261 + C47284 * C47490 + (C47284 + C47332 * C47490) * C47539;
    const double C1560 =
        C47518 * (2 * C47469 * C47284 + C47469 * (C47284 + C47332 * C47490));
    const double C1865 =
        3 * (C47261 + C47284 * C47539) +
        C47518 * (2 * C47518 * C47284 + C47518 * (C47284 + C47332 * C47539));
    const double C47355 = C47347 + C47331;
    const double C47354 = C47346 * C47247;
    const double C48006 = C47276 + C48005;
    const double C48015 = C48014 * C47539;
    const double C48021 = C47276 + C48019;
    const double C47435 = C47427 + C47410;
    const double C47432 = C47424 + C47406;
    const double C47431 = C47423 * C47247;
    const double C47288 = -C47279;
    const double C125 = 3 * (C47245 + C47255 * C47246) +
                        C47238 * (2 * C47261 + C47238 * C47292);
    const double C270 = C47469 * (2 * C47261 + C47238 * C47292);
    const double C275 = C47245 + C47255 * C47246 + C47292 * C47490;
    const double C423 = C47518 * (2 * C47261 + C47238 * C47292);
    const double C428 = C47245 + C47255 * C47246 + C47292 * C47539;
    const double C825 = C47518 * C47469 * C47292;
    const double C2240 =
        2 * C47518 * C47978 + C47518 * (C47978 + C47469 * C47332 * C47539);
    const double C5701 =
        4 * (2 * C47976 + C47469 * C47983) +
        C47469 * (3 * C47983 + C47469 * (2 * C47469 * C47276 +
                                         C47469 * (C47276 + C47318 * C47490)));
    const double C5879 =
        2 * C47976 + C47469 * C47983 +
        (2 * C47469 * C47276 + C47469 * (C47276 + C47318 * C47490)) * C47539;
    const double C6401 =
        C47518 * (3 * C47983 + C47469 * (2 * C47469 * C47276 +
                                         C47469 * (C47276 + C47318 * C47490)));
    const double C7269 =
        2 * C47518 * C47983 +
        C47518 * (C47983 + (C47276 + C47318 * C47490) * C47539);
    const double C12369 =
        4 * (2 * C47518 * C47255 + C47518 * C47999) +
        C47518 * (3 * C47999 + C47518 * (2 * C47518 * C47276 +
                                         C47518 * (C47276 + C47318 * C47539)));
    const double C47413 = -C47400;
    const double C47505 = C47502 * ce;
    const double C47881 = C47469 * C47502;
    const double C47554 = C47551 * ce;
    const double C47905 = C47518 * C47551;
    const double C47580 = C47575 / C47106;
    const double C47629 = C47626 * ce;
    const double C47899 = C47475 + C47898;
    const double C47607 = C47602 / C47106;
    const double C47506 = ae * C47503;
    const double C47885 = C47469 * C47503;
    const double C47555 = ae * C47552;
    const double C47909 = C47518 * C47552;
    const double C47581 = C47576 / C47239;
    const double C47630 = ae * C47627;
    const double C47902 = C47901 + C47476;
    const double C47608 = C47603 / C47239;
    const double C47428 = C47417 * ae;
    const double C47426 = C47238 * C47417;
    const double C47425 = C47417 * ce;
    const double C956 = (C48085 * std::pow(C48136, 2)) / C47111 + C48135;
    const double C48138 = C48137 * C48136;
    const double C48143 = C48137 / C47118;
    const double C48366 = C48137 / C47106;
    const double C48363 = C48052 * C48137;
    const double C48145 = C48144 * C48136;
    const double C48372 = C48134 * C48144;
    const double C48371 = 2 * C48144;
    const double C48408 = C48144 / C48360;
    const double C1029 = C48144 / C48395;
    const double C2726 = C48144 / C47112;
    const double C48404 = C48368 / C47106;
    const double C957 = (-2 * C48052 * C48368) / C47106;
    const double C48424 = C48396 / C47111;
    const double C1681 = (C48097 * std::pow(C48176, 2)) / C47111 + C48175;
    const double C48178 = C48177 * C48176;
    const double C48183 = C48177 / C47118;
    const double C48367 = C48177 / C47106;
    const double C48365 = C48052 * C48177;
    const double C48185 = C48184 * C48176;
    const double C48378 = C48174 * C48184;
    const double C48377 = 2 * C48184;
    const double C48414 = C48184 / C48360;
    const double C1860 = C48184 / C48395;
    const double C3628 = C48184 / C47112;
    const double C48410 = C48374 / C47106;
    const double C1682 = (-2 * C48052 * C48374) / C47106;
    const double C48426 = C48399 / C47111;
    const double C21590 = C48416 / C48035;
    const double C4603 = C48415 / C47079;
    const double C21588 = C48286 / C48035 - (C48415 * C48382) / C47081;
    const double C21589 = C48415 / C47083 - (C48416 * C48382) / C47079;
    const double C42910 = C48418 / C48035;
    const double C10335 = C48417 / C47079;
    const double C42908 = C48301 / C48035 - (C48417 * C48383) / C47081;
    const double C42909 = C48417 / C47083 - (C48418 * C48383) / C47079;
    const double C4788 = C4605 * C273;
    const double C4784 = C4605 * C291;
    const double C4770 = C4605 * C269;
    const double C4768 = C4605 * C282;
    const double C4764 = C4605 * C268;
    const double C4758 = C4605 * C283;
    const double C4754 = C4605 * C271;
    const double C5448 = C4605 * C823;
    const double C5444 = C4605 * C831;
    const double C5724 = C4605 * C1034;
    const double C5720 = C4605 * C1046;
    const double C5714 = C4605 * C1039;
    const double C5710 = C4605 * C1033;
    const double C5910 = C4605 * C1171;
    const double C5906 = C4605 * C1189;
    const double C5900 = C4605 * C1182;
    const double C5896 = C4605 * C1170;
    const double C5892 = C4605 * C1176;
    const double C5888 = C4605 * C1167;
    const double C6416 = C4605 * C1559;
    const double C6412 = C4605 * C1565;
    const double C10664 = C4605 * C426;
    const double C10660 = C4605 * C444;
    const double C10646 = C4605 * C422;
    const double C10644 = C4605 * C435;
    const double C10640 = C4605 * C421;
    const double C10634 = C4605 * C436;
    const double C10630 = C4605 * C424;
    const double C12392 = C4605 * C1864;
    const double C12388 = C4605 * C1876;
    const double C12382 = C4605 * C1869;
    const double C12378 = C4605 * C1863;
    const double C4762 = C4606 * C269;
    const double C4760 = C4606 * C282;
    const double C4756 = C4606 * C268;
    const double C10638 = C4606 * C422;
    const double C10636 = C4606 * C435;
    const double C10632 = C4606 * C421;
    const double C16100 = C15917 * C273;
    const double C16096 = C15917 * C291;
    const double C16082 = C15917 * C269;
    const double C16080 = C15917 * C282;
    const double C16076 = C15917 * C268;
    const double C16070 = C15917 * C283;
    const double C16066 = C15917 * C271;
    const double C16760 = C15917 * C823;
    const double C16756 = C15917 * C831;
    const double C17028 = C15917 * C1034;
    const double C17024 = C15917 * C1046;
    const double C17018 = C15917 * C1039;
    const double C17014 = C15917 * C1033;
    const double C17206 = C15917 * C1171;
    const double C17202 = C15917 * C1189;
    const double C17196 = C15917 * C1182;
    const double C17192 = C15917 * C1170;
    const double C17188 = C15917 * C1176;
    const double C17184 = C15917 * C1167;
    const double C17704 = C15917 * C1559;
    const double C17700 = C15917 * C1565;
    const double C32239 = C15917 * C426;
    const double C32235 = C15917 * C444;
    const double C32221 = C15917 * C422;
    const double C32219 = C15917 * C435;
    const double C32215 = C15917 * C421;
    const double C32209 = C15917 * C436;
    const double C32205 = C15917 * C424;
    const double C33959 = C15917 * C1864;
    const double C33955 = C15917 * C1876;
    const double C33949 = C15917 * C1869;
    const double C33945 = C15917 * C1863;
    const double C16074 = C15918 * C269;
    const double C16072 = C15918 * C282;
    const double C16068 = C15918 * C268;
    const double C32213 = C15918 * C422;
    const double C32211 = C15918 * C435;
    const double C32207 = C15918 * C421;
    const double C21731 = C21591 * C1033;
    const double C21729 = C21591 * C1039;
    const double C21717 = C21591 * C291;
    const double C21715 = C21591 * C273;
    const double C21711 = C21591 * C269;
    const double C21709 = C21591 * C282;
    const double C21707 = C21591 * C268;
    const double C21705 = C21591 * C283;
    const double C21703 = C21591 * C271;
    const double C22276 = C21591 * C1170;
    const double C22274 = C21591 * C1182;
    const double C22264 = C21591 * C823;
    const double C22262 = C21591 * C831;
    const double C22515 = C21591 * C1046;
    const double C22513 = C21591 * C1034;
    const double C22660 = C21591 * C1565;
    const double C22658 = C21591 * C1559;
    const double C22656 = C21591 * C1189;
    const double C22654 = C21591 * C1171;
    const double C22652 = C21591 * C1176;
    const double C22650 = C21591 * C1167;
    const double C26486 = C21591 * C426;
    const double C26484 = C21591 * C444;
    const double C26478 = C21591 * C422;
    const double C26476 = C21591 * C435;
    const double C26474 = C21591 * C421;
    const double C26472 = C21591 * C436;
    const double C26470 = C21591 * C424;
    const double C28280 = C21591 * C1864;
    const double C28278 = C21591 * C1876;
    const double C28272 = C21591 * C1869;
    const double C28270 = C21591 * C1863;
    const double C16101 = C15913 * C288;
    const double C16077 = C15913 * C278;
    const double C16071 = C15913 * C300;
    const double C16067 = C15913 * C284;
    const double C16761 = C15913 * C828;
    const double C17029 = C15913 * C1043;
    const double C17015 = C15913 * C1042;
    const double C17207 = C15913 * C1186;
    const double C17193 = C15913 * C1185;
    const double C17185 = C15913 * C1179;
    const double C17705 = C15913 * C1562;
    const double C32240 = C15913 * C441;
    const double C32216 = C15913 * C431;
    const double C32210 = C15913 * C453;
    const double C32206 = C15913 * C437;
    const double C33960 = C15913 * C1873;
    const double C33946 = C15913 * C1872;
    const double C113 =
        (((0 - (C47077 * C47078) / C47079) * ae) / C47079 - (0 * be) / C47083) /
            (2 * C47079) -
        ((C47077 * (((C48030 - (C47077 * 2 * C47084) / C47079) * ae) / C47079 -
                    C47078 / C47083) +
          C15913) *
         be) /
            C47079 +
        (0 * ae) / C47079 - C47084 / C47081;
    const double C47147 = C47142 + 0;
    const double C47146 = C47141 / C47112;
    const double C47132 = C47117 - C47128;
    const double C47131 = C47104 * C47126;
    const double C267 =
        ((-C47126 / C47106) / C47112 - (0 * de) / C47106) / C47112 -
        (0 * de) / C47106;
    const double C1030 = -C47126 / C47106;
    const double C2464 = (-C47126 / C47106) / C47112 - (0 * de) / C47106;
    const double C48048 = C48047 / C47111;
    const double C48389 = 2 * C48354;
    const double C48056 = C48055 / C47106;
    const double C48393 = C48358 / C47118;
    const double C48420 = C48352 - C48388;
    const double C2457 = -C48388;
    const double C48434 = C48419 + C48045;
    const double C134 = (2 * (C47238 * C47253 + C47245 * ae) +
                         C47238 * (C47253 + C47238 * C47272 + C47261 * ae) +
                         (C47245 + C47255 * C47246) * ae) /
                        C47079;
    const double C279 =
        (C47469 * (C47253 + C47238 * C47272 + C47261 * ae)) / C47079;
    const double C289 =
        (C47238 * C47253 + C47245 * ae + C47272 * C47490) / C47079;
    const double C432 =
        (C47518 * (C47253 + C47238 * C47272 + C47261 * ae)) / C47079;
    const double C442 =
        (C47238 * C47253 + C47245 * ae + C47272 * C47539) / C47079;
    const double C829 = (C47518 * C47469 * C47272) / C47079;
    const double C4786 = C4606 * C274;
    const double C4778 = C4605 * C274;
    const double C16098 = C15918 * C274;
    const double C16090 = C15917 * C274;
    const double C21719 = C21591 * C274;
    const double C10662 = C4606 * C427;
    const double C10654 = C4605 * C427;
    const double C26482 = C21591 * C427;
    const double C32237 = C15918 * C427;
    const double C32229 = C15917 * C427;
    const double C5446 = C4606 * C824;
    const double C5438 = C4605 * C824;
    const double C16758 = C15918 * C824;
    const double C16750 = C15917 * C824;
    const double C22260 = C21591 * C824;
    const double C5712 = C4606 * C1032;
    const double C6056 = C4605 * C1032;
    const double C17016 = C15918 * C1032;
    const double C17352 = C15917 * C1032;
    const double C21727 = C21591 * C1032;
    const double C5890 = C4606 * C1166;
    const double C7000 = C4605 * C1166;
    const double C17186 = C15918 * C1166;
    const double C18280 = C15917 * C1166;
    const double C23522 = C21591 * C1166;
    const double C5898 = C4606 * C1169;
    const double C6262 = C4605 * C1169;
    const double C17194 = C15918 * C1169;
    const double C17558 = C15917 * C1169;
    const double C22272 = C21591 * C1169;
    const double C12380 = C4606 * C1862;
    const double C12728 = C4605 * C1862;
    const double C28640 = C21591 * C1862;
    const double C33947 = C15918 * C1862;
    const double C34295 = C15917 * C1862;
    const double C135 =
        (-2 * (C47238 * C47252 + C47245 * ce)) / C47106 -
        (C47238 * (C47238 * C47271 + C47252 + C47261 * ce)) / C47106 -
        ((C47245 + C47255 * C47246) * ce) / C47106;
    const double C281 =
        -(C47469 * (C47238 * C47271 + C47252 + C47261 * ce)) / C47106;
    const double C292 =
        -(C47271 * C47490 + C47238 * C47252 + C47245 * ce) / C47106;
    const double C434 =
        -(C47518 * (C47238 * C47271 + C47252 + C47261 * ce)) / C47106;
    const double C445 =
        -(C47271 * C47539 + C47238 * C47252 + C47245 * ce) / C47106;
    const double C832 = -(C47518 * C47469 * C47271) / C47106;
    const double C145 =
        2 * ((-(C47253 * ce) / C47106) / C47079 - (ae * C47252) / C47239 -
             (C47238 * C47270) / C47239) -
        (ae * (C47238 * C47271 + C47252 + C47261 * ce)) / C47239 -
        ((C47253 + C47238 * C47272 + C47261 * ae) * ce) / C47239 +
        C47238 *
            ((-(ae * C47271) / C47106) / C47079 - C47270 / C47239 -
             (C47272 * ce) / C47239 +
             C47238 *
                 ((-(C47266 * ce) / C47106) / C47079 - (ae * C47265) / C47239 -
                  (C47238 *
                   (C47256 * C47257 + C47246 * bs[5] * std::pow(C47242, 5)) *
                   C47247) /
                      C47239));
    const double C299 = (-(C47469 * C47253 * ce) / C47106) / C47079 -
                        (ae * C47469 * C47252) / C47239 -
                        (C47238 * C47469 * C47270) / C47239;
    const double C303 = (-(C47270 * std::pow(C47469, 2)) / C47106) / C47079 -
                        ((C47245 + C47246 * C47243 * C47249) * C47247) / C47239;
    const double C452 = (-(C47518 * C47253 * ce) / C47106) / C47079 -
                        (ae * C47518 * C47252) / C47239 -
                        (C47238 * C47518 * C47270) / C47239;
    const double C456 = (-(C47270 * std::pow(C47518, 2)) / C47106) / C47079 -
                        ((C47245 + C47246 * C47243 * C47249) * C47247) / C47239;
    const double C838 = (-(C47518 * C47469 * C47270) / C47106) / C47079;
    const double C7284 = C4605 * C2239;
    const double C18556 = C15917 * C2239;
    const double C23746 = C21591 * C2239;
    const double C28276 = C21591 * C6795;
    const double C47305 = C47238 * C47302;
    const double C47323 = 2 * C47302;
    const double C47315 = C47302 * ce;
    const double C47830 = C47469 * C47302;
    const double C1041 =
        (2 * C47469 * C47272 + C47469 * (C47272 + C47302 * C47490)) / C47079;
    const double C1178 = (C47469 * C47272 + C47469 * C47302 * C47539) / C47079;
    const double C1184 = (C47518 * (C47272 + C47302 * C47490)) / C47079;
    const double C1871 =
        (2 * C47518 * C47272 + C47518 * (C47272 + C47302 * C47539)) / C47079;
    const double C47337 = -C47326;
    const double C47481 = C47478 / C47106;
    const double C7285 = C4601 * C2242;
    const double C18557 = C15913 * C2242;
    const double C23747 = C48030 * C2242;
    const double C28277 = C48030 * C6797;
    const double C47530 = C47527 / C47106;
    const double C5703 =
        (4 * (2 * C47828 + C47469 * C47841) +
         C47469 * (3 * C47841 + C47469 * (2 * C47475 + C47469 * C47502))) /
        C47079;
    const double C5881 = (2 * C47828 + C47469 * C47841 +
                          (2 * C47475 + C47469 * C47502) * C47539) /
                         C47079;
    const double C6403 =
        (C47518 * (3 * C47841 + C47469 * (2 * C47475 + C47469 * C47502))) /
        C47079;
    const double C7271 =
        (2 * C47518 * C47841 + C47518 * (C47841 + C47502 * C47539)) / C47079;
    const double C23370 =
        (3 * (C47841 + C47502 * C47539) +
         C47518 * (2 * C47518 * C47502 +
                   C47518 * (C47502 + (C47342 + C47418 * C47490) * C47539))) /
        C47079;
    const double C12371 =
        (4 * (2 * C47518 * C47266 + C47518 * C47869) +
         C47518 * (3 * C47869 + C47518 * (2 * C47524 + C47518 * C47551))) /
        C47079;
    const double C47304 = C47238 * C47301;
    const double C47321 = -2 * C47301;
    const double C47313 = ae * C47301;
    const double C47836 = C47469 * C47301;
    const double C1038 = (-2 * C47469 * C47271) / C47106 -
                         (C47469 * (C47301 * C47490 + C47271)) / C47106;
    const double C1175 = -(C47469 * C47301 * C47539 + C47469 * C47271) / C47106;
    const double C1181 = -(C47518 * (C47301 * C47490 + C47271)) / C47106;
    const double C1868 = (-2 * C47518 * C47271) / C47106 -
                         (C47518 * (C47301 * C47539 + C47271)) / C47106;
    const double C47482 = C47479 / C47239;
    const double C47886 = C47884 / C47106;
    const double C7280 = C4605 * C2245;
    const double C18552 = C15917 * C2245;
    const double C23744 = C21591 * C2245;
    const double C28274 = C21591 * C6799;
    const double C47531 = C47528 / C47239;
    const double C47910 = C47908 / C47106;
    const double C5705 =
        4 * ((-2 * C47834) / C47106 - (C47469 * C47847) / C47106) +
        C47469 *
            ((-3 * C47847) / C47106 +
             C47469 * ((-2 * C47476) / C47106 - (C47469 * C47503) / C47106));
    const double C5883 =
        (-2 * C47834) / C47106 - (C47469 * C47847) / C47106 +
        ((-2 * C47476) / C47106 - (C47469 * C47503) / C47106) * C47539;
    const double C6405 =
        C47518 *
        ((-3 * C47847) / C47106 +
         C47469 * ((-2 * C47476) / C47106 - (C47469 * C47503) / C47106));
    const double C7273 = (-2 * C47518 * C47847) / C47106 -
                         (C47518 * (C47503 * C47539 + C47847)) / C47106;
    const double C23371 =
        (-3 * (C47503 * C47539 + C47847)) / C47106 +
        C47518 * ((-2 * C47518 * C47503) / C47106 -
                  (C47518 * ((C47415 * C47490 + C47339) * C47539 + C47503)) /
                      C47106);
    const double C12373 =
        4 * ((-2 * C47518 * C47265) / C47106 - (C47518 * C47875) / C47106) +
        C47518 *
            ((-3 * C47875) / C47106 +
             C47518 * ((-2 * C47525) / C47106 - (C47518 * C47552) / C47106));
    const double C47303 = C47238 * C47300;
    const double C47314 = C47300 / C47239;
    const double C47473 = C47469 * C47300;
    const double C47522 = C47518 * C47300;
    const double C298 = (-(ae * C47469 * C47271) / C47106) / C47079 -
                        (C47469 * C47270) / C47239 -
                        (C47469 * C47272 * ce) / C47239 +
                        C47238 * ((-(C47469 * C47266 * ce) / C47106) / C47079 -
                                  (ae * C47469 * C47265) / C47239 -
                                  (C47238 * C47469 * C47300) / C47239);
    const double C304 =
        (-((C47253 + C47266 * C47490) * ce) / C47106) / C47079 -
        (ae * (C47265 * C47490 + C47252)) / C47239 +
        C47238 * ((-(C47300 * C47490) / C47106) / C47079 - C47270 / C47239);
    const double C451 = (-(ae * C47518 * C47271) / C47106) / C47079 -
                        (C47518 * C47270) / C47239 -
                        (C47518 * C47272 * ce) / C47239 +
                        C47238 * ((-(C47518 * C47266 * ce) / C47106) / C47079 -
                                  (ae * C47518 * C47265) / C47239 -
                                  (C47238 * C47518 * C47300) / C47239);
    const double C457 =
        (-((C47253 + C47266 * C47539) * ce) / C47106) / C47079 -
        (ae * (C47265 * C47539 + C47252)) / C47239 +
        C47238 * ((-(C47300 * C47539) / C47106) / C47079 - C47270 / C47239);
    const double C1051 =
        (-2 * C47469 * C47270) / C47239 +
        C47469 * ((-(C47300 * C47490) / C47106) / C47079 - C47270 / C47239);
    const double C1197 =
        C47518 * ((-(C47300 * C47490) / C47106) / C47079 - C47270 / C47239);
    const double C1881 =
        (-2 * C47518 * C47270) / C47239 +
        C47518 * ((-(C47300 * C47539) / C47106) / C47079 - C47270 / C47239);
    const double C47362 = C47238 * C47358;
    const double C47395 = 2 * C47358;
    const double C47384 = C47358 * ce;
    const double C47569 = C47469 * C47358;
    const double C47596 = C47518 * C47358;
    const double C47843 = C47358 * C47490;
    const double C47871 = C47358 * C47539;
    const double C1044 =
        (3 * (C47272 + C47302 * C47490) +
         C47469 * (2 * C47469 * C47302 + C47469 * (C47302 + C47358 * C47490))) /
        C47079;
    const double C1187 =
        (C47272 + C47302 * C47490 + (C47302 + C47358 * C47490) * C47539) /
        C47079;
    const double C1563 =
        (C47518 * (2 * C47469 * C47302 + C47469 * (C47302 + C47358 * C47490))) /
        C47079;
    const double C1874 =
        (3 * (C47272 + C47302 * C47539) +
         C47518 * (2 * C47518 * C47302 + C47518 * (C47302 + C47358 * C47539))) /
        C47079;
    const double C47351 = C47341 * ae;
    const double C47349 = C47238 * C47341;
    const double C47348 = C47341 * ce;
    const double C47393 = 3 * C47341;
    const double C47980 = C47469 * C47341;
    const double C1031 =
        2 * C47469 * C47292 + C47469 * (C47292 + C47341 * C47490);
    const double C1036 =
        3 * (C47292 + C47341 * C47490) +
        C47469 * (2 * C47469 * C47341 + C47469 * (C47341 + C47417 * C47490));
    const double C1165 = C47469 * C47292 + C47469 * C47341 * C47539;
    const double C1168 = C47518 * (C47292 + C47341 * C47490);
    const double C1173 =
        C47292 + C47341 * C47490 + (C47341 + C47417 * C47490) * C47539;
    const double C1561 =
        C47518 * (2 * C47469 * C47341 + C47469 * (C47341 + C47417 * C47490));
    const double C1861 =
        2 * C47518 * C47292 + C47518 * (C47292 + C47341 * C47539);
    const double C1866 =
        3 * (C47292 + C47341 * C47539) +
        C47518 * (2 * C47518 * C47341 + C47518 * (C47341 + C47417 * C47539));
    const double C47986 = C47284 + C47985;
    const double C6796 =
        3 * (C47978 + C47994 * C47539) +
        C47518 * (2 * C47518 * C47994 +
                  C47518 * (C47994 + C47469 * C47407 * C47539));
    const double C48002 = C47284 + C48001;
    const double C5722 = C4606 * C1035;
    const double C17026 = C15918 * C1035;
    const double C22796 = C21591 * C1035;
    const double C5908 = C4606 * C1172;
    const double C17204 = C15918 * C1172;
    const double C23528 = C21591 * C1172;
    const double C6414 = C4606 * C1560;
    const double C17702 = C15918 * C1560;
    const double C22966 = C21591 * C1560;
    const double C12390 = C4606 * C1865;
    const double C33957 = C15918 * C1865;
    const double C44696 = C21591 * C1865;
    const double C47361 = C47238 * C47355;
    const double C47391 = -2 * C47355;
    const double C47382 = ae * C47355;
    const double C47567 = C47469 * C47355;
    const double C47594 = C47518 * C47355;
    const double C47849 = C47355 * C47490;
    const double C47877 = C47355 * C47539;
    const double C1047 =
        (-3 * (C47301 * C47490 + C47271)) / C47106 +
        C47469 * ((-2 * C47469 * C47301) / C47106 -
                  (C47469 * (C47355 * C47490 + C47301)) / C47106);
    const double C1190 =
        -((C47355 * C47490 + C47301) * C47539 + C47301 * C47490 + C47271) /
        C47106;
    const double C1566 =
        C47518 * ((-2 * C47469 * C47301) / C47106 -
                  (C47469 * (C47355 * C47490 + C47301)) / C47106);
    const double C1877 =
        (-3 * (C47301 * C47539 + C47271)) / C47106 +
        C47518 * ((-2 * C47518 * C47301) / C47106 -
                  (C47518 * (C47355 * C47539 + C47301)) / C47106);
    const double C47360 = C47238 * C47354;
    const double C47383 = C47354 / C47239;
    const double C47477 = C47469 * C47354;
    const double C47493 = C47354 * C47490;
    const double C47526 = C47518 * C47354;
    const double C47542 = C47354 * C47539;
    const double C48007 = C47469 * C48006;
    const double C23369 =
        3 * (C47983 + C48006 * C47539) +
        C47518 * (2 * C47518 * C48006 +
                  C47518 * (C48006 + (C47318 + C47387 * C47490) * C47539));
    const double C48016 = C47992 + C48015;
    const double C48022 = C47518 * C48021;
    const double C47441 = C47238 * C47435;
    const double C47438 = C47238 * C47432;
    const double C47437 = C47238 * C47431;
    const double C47501 = C47431 * C47490;
    const double C47550 = C47431 * C47539;
    const double C47572 = C47469 * C47431;
    const double C47599 = C47518 * C47431;
    const double C47295 = C47288 / C47079;
    const double C4772 = C4606 * C270;
    const double C5104 = C4605 * C270;
    const double C16084 = C15918 * C270;
    const double C16416 = C15917 * C270;
    const double C21994 = C21591 * C270;
    const double C4796 = C4605 * C275;
    const double C4780 = C4606 * C275;
    const double C16108 = C15917 * C275;
    const double C16092 = C15918 * C275;
    const double C21723 = C21591 * C275;
    const double C10648 = C4606 * C423;
    const double C10964 = C4605 * C423;
    const double C26810 = C21591 * C423;
    const double C32223 = C15918 * C423;
    const double C32539 = C15917 * C423;
    const double C10672 = C4605 * C428;
    const double C10656 = C4606 * C428;
    const double C26490 = C21591 * C428;
    const double C32247 = C15917 * C428;
    const double C32231 = C15918 * C428;
    const double C5456 = C4605 * C825;
    const double C5440 = C4606 * C825;
    const double C16768 = C15917 * C825;
    const double C16752 = C15918 * C825;
    const double C22268 = C21591 * C825;
    const double C7282 = C4606 * C2240;
    const double C18554 = C15918 * C2240;
    const double C28496 = C21591 * C2240;
    const double C22519 = C21591 * C5701;
    const double C22664 = C21591 * C5879;
    const double C23082 = C21591 * C6401;
    const double C23742 = C21591 * C7269;
    const double C44436 = C21591 * C12369;
    const double C47422 = C47413 / C47079;
    const double C47508 = C47505 / C47106;
    const double C47882 = C47880 + C47881;
    const double C47557 = C47554 / C47106;
    const double C47906 = C47904 + C47905;
    const double C47584 = -C47580;
    const double C47632 = C47629 / C47106;
    const double C28266 =
        (4 * (2 * C47518 * C47475 + C47518 * C47899) +
         C47518 * (3 * C47899 +
                   C47518 * (2 * C47626 +
                             C47518 * (C47570 + C47469 * C47418 * C47539)))) /
        C47079;
    const double C47611 = -C47607;
    const double C47509 = C47506 / C47239;
    const double C47887 = C47885 / C47106;
    const double C47558 = C47555 / C47239;
    const double C47911 = C47909 / C47106;
    const double C47633 = C47630 / C47239;
    const double C28267 =
        4 * ((-2 * C47518 * C47476) / C47106 - (C47518 * C47902) / C47106) +
        C47518 * ((-3 * C47902) / C47106 +
                  C47518 * ((-2 * C47627) / C47106 -
                            (C47518 * (C47469 * C47415 * C47539 + C47571)) /
                                C47106));
    const double C47434 = C47392 + C47426;
    const double C47433 = C47425 / C47106;
    const double C48139 = C48138 / C47111;
    const double C48397 = 2 * C48363;
    const double C48146 = C48145 / C47106;
    const double C48407 = C48372 / C47118;
    const double C48428 = C48366 - C48404;
    const double C2353 = -C48404;
    const double C48437 = C48424 + C48135;
    const double C48179 = C48178 / C47111;
    const double C48400 = 2 * C48365;
    const double C48186 = C48185 / C47106;
    const double C48413 = C48378 / C47118;
    const double C48431 = C48367 - C48410;
    const double C3120 = -C48410;
    const double C48438 = C48426 + C48175;
    const double C4819 = C4788 + C4789;
    const double C4807 = C4764 + C4765;
    const double C4804 = C4758 + C4759;
    const double C4802 = C4754 + C4755;
    const double C5467 = C5448 + C5449;
    const double C5733 = C5724 + C5725;
    const double C5726 = C5710 + C5711;
    const double C5923 = C5910 + C5911;
    const double C5916 = C5896 + C5897;
    const double C5912 = C5888 + C5889;
    const double C6421 = C6416 + C6417;
    const double C10695 = C10664 + C10665;
    const double C10683 = C10640 + C10641;
    const double C10680 = C10634 + C10635;
    const double C10678 = C10630 + C10631;
    const double C12401 = C12392 + C12393;
    const double C12394 = C12378 + C12379;
    const double C4803 = C4756 + C4757;
    const double C10679 = C10632 + C10633;
    const double C16115 = C16068 + C16069;
    const double C32254 = C32207 + C32208;
    const double C21753 = C21731 + C21732;
    const double C21745 = C21715 + C21716;
    const double C21741 = C21707 + C21708;
    const double C21740 = C21705 + C21706;
    const double C21739 = C21703 + C21704;
    const double C22292 = C22276 + C22277;
    const double C22286 = C22264 + C22265;
    const double C22523 = C22513 + C22514;
    const double C22671 = C22658 + C22659;
    const double C22669 = C22654 + C22655;
    const double C22667 = C22650 + C22651;
    const double C26510 = C26486 + C26487;
    const double C26504 = C26474 + C26475;
    const double C26503 = C26472 + C26473;
    const double C26502 = C26470 + C26471;
    const double C28287 = C28280 + C28281;
    const double C28282 = C28270 + C28271;
    const double C16131 = C16100 + C16101;
    const double C16119 = C16076 + C16077;
    const double C16116 = C16070 + C16071;
    const double C16114 = C16066 + C16067;
    const double C16779 = C16760 + C16761;
    const double C17037 = C17028 + C17029;
    const double C17030 = C17014 + C17015;
    const double C17219 = C17206 + C17207;
    const double C17212 = C17192 + C17193;
    const double C17208 = C17184 + C17185;
    const double C17709 = C17704 + C17705;
    const double C32270 = C32239 + C32240;
    const double C32258 = C32215 + C32216;
    const double C32255 = C32209 + C32210;
    const double C32253 = C32205 + C32206;
    const double C33968 = C33959 + C33960;
    const double C33961 = C33945 + C33946;
    const double C47150 = C47147 * de;
    const double C47136 = C47104 * C47132;
    const double C47164 = C47132 / C47112;
    const double C47135 = C47131 / C47106;
    const double C48049 = C48045 - C48048;
    const double C48421 = C48389 / C47106;
    const double C48057 = C48053 - C48056;
    const double C48435 = C48420 / C47112;
    const double C4771 = C4601 * C279;
    const double C4763 = C48385 * C279;
    const double C16083 = C15913 * C279;
    const double C16075 = C48385 * C279;
    const double C21712 = C48030 * C279;
    const double C4787 = C48385 * C289;
    const double C4779 = C4601 * C289;
    const double C16099 = C48385 * C289;
    const double C16091 = C15913 * C289;
    const double C21720 = C48030 * C289;
    const double C10647 = C4601 * C432;
    const double C10639 = C48385 * C432;
    const double C26479 = C48030 * C432;
    const double C32222 = C15913 * C432;
    const double C32214 = C48385 * C432;
    const double C10663 = C48385 * C442;
    const double C10655 = C4601 * C442;
    const double C26483 = C48030 * C442;
    const double C32238 = C48385 * C442;
    const double C32230 = C15913 * C442;
    const double C5447 = C48385 * C829;
    const double C5439 = C4601 * C829;
    const double C16759 = C48385 * C829;
    const double C16751 = C15913 * C829;
    const double C22261 = C48030 * C829;
    const double C4774 = C4605 * C281;
    const double C4766 = C4606 * C281;
    const double C16086 = C15917 * C281;
    const double C16078 = C15918 * C281;
    const double C21713 = C21591 * C281;
    const double C4790 = C4605 * C292;
    const double C4782 = C4606 * C292;
    const double C16102 = C15917 * C292;
    const double C16094 = C15918 * C292;
    const double C21721 = C21591 * C292;
    const double C10650 = C4605 * C434;
    const double C10642 = C4606 * C434;
    const double C26480 = C21591 * C434;
    const double C32225 = C15917 * C434;
    const double C32217 = C15918 * C434;
    const double C10666 = C4605 * C445;
    const double C10658 = C4606 * C445;
    const double C26488 = C21591 * C445;
    const double C32241 = C15917 * C445;
    const double C32233 = C15918 * C445;
    const double C5450 = C4605 * C832;
    const double C5442 = C4606 * C832;
    const double C16762 = C15917 * C832;
    const double C16754 = C15918 * C832;
    const double C22266 = C21591 * C832;
    const double C4769 = C4601 * C299;
    const double C4761 = C48385 * C299;
    const double C16081 = C15913 * C299;
    const double C16073 = C48385 * C299;
    const double C21710 = C48030 * C299;
    const double C4785 = C4601 * C303;
    const double C16097 = C15913 * C303;
    const double C21718 = C48030 * C303;
    const double C10645 = C4601 * C452;
    const double C10637 = C48385 * C452;
    const double C26477 = C48030 * C452;
    const double C32220 = C15913 * C452;
    const double C32212 = C48385 * C452;
    const double C10661 = C4601 * C456;
    const double C26485 = C48030 * C456;
    const double C32236 = C15913 * C456;
    const double C5445 = C4601 * C838;
    const double C16757 = C15913 * C838;
    const double C22263 = C48030 * C838;
    const double C47308 = C47266 + C47305;
    const double C47325 = C47315 / C47239;
    const double C5713 = C48385 * C1041;
    const double C6057 = C4601 * C1041;
    const double C17017 = C48385 * C1041;
    const double C17353 = C15913 * C1041;
    const double C21728 = C48030 * C1041;
    const double C5891 = C48385 * C1178;
    const double C7001 = C4601 * C1178;
    const double C17187 = C48385 * C1178;
    const double C18281 = C15913 * C1178;
    const double C23523 = C48030 * C1178;
    const double C5899 = C48385 * C1184;
    const double C6263 = C4601 * C1184;
    const double C17195 = C48385 * C1184;
    const double C17559 = C15913 * C1184;
    const double C22273 = C48030 * C1184;
    const double C12381 = C48385 * C1871;
    const double C12729 = C4601 * C1871;
    const double C28641 = C48030 * C1871;
    const double C33948 = C48385 * C1871;
    const double C34296 = C15913 * C1871;
    const double C47345 = C47337 / C47079;
    const double C47484 = -C47481;
    const double C7289 = C7284 + C7285;
    const double C18561 = C18556 + C18557;
    const double C23751 = C23746 + C23747;
    const double C28285 = C28276 + C28277;
    const double C47533 = -C47530;
    const double C22520 = C48030 * C5703;
    const double C22665 = C48030 * C5881;
    const double C23083 = C48030 * C6403;
    const double C23743 = C48030 * C7271;
    const double C44437 = C48030 * C12371;
    const double C47307 = C47304 + C47265;
    const double C47329 = C47321 / C47106;
    const double C47324 = C47313 / C47106;
    const double C5716 = C4606 * C1038;
    const double C6060 = C4605 * C1038;
    const double C17020 = C15918 * C1038;
    const double C17356 = C15917 * C1038;
    const double C21733 = C21591 * C1038;
    const double C5894 = C4606 * C1175;
    const double C7004 = C4605 * C1175;
    const double C17190 = C15918 * C1175;
    const double C18284 = C15917 * C1175;
    const double C23524 = C21591 * C1175;
    const double C5902 = C4606 * C1181;
    const double C6266 = C4605 * C1181;
    const double C17198 = C15918 * C1181;
    const double C17562 = C15917 * C1181;
    const double C22278 = C21591 * C1181;
    const double C12384 = C4606 * C1868;
    const double C12732 = C4605 * C1868;
    const double C28642 = C21591 * C1868;
    const double C33951 = C15918 * C1868;
    const double C34299 = C15917 * C1868;
    const double C22517 = C21591 * C5705;
    const double C22662 = C21591 * C5883;
    const double C23080 = C21591 * C6405;
    const double C23740 = C21591 * C7273;
    const double C44434 = C21591 * C12373;
    const double C47306 = C47303 / C47239;
    const double C305 =
        (-(C47300 * C47490) / C47106) / C47079 - C47270 / C47239 -
        (ae * (C47301 * C47490 + C47271)) / C47239 -
        ((C47272 + C47302 * C47490) * ce) / C47239 +
        C47238 * ((-((C47266 + C47293 * C47490) * ce) / C47106) / C47079 -
                  (ae * (C47290 * C47490 + C47265)) / C47239 +
                  C47238 * ((-(C47354 * C47490) / C47106) / C47079 - C47314));
    const double C458 =
        (-(C47300 * C47539) / C47106) / C47079 - C47270 / C47239 -
        (ae * (C47301 * C47539 + C47271)) / C47239 -
        ((C47272 + C47302 * C47539) * ce) / C47239 +
        C47238 * ((-((C47266 + C47293 * C47539) * ce) / C47106) / C47079 -
                  (ae * (C47290 * C47539 + C47265)) / C47239 +
                  C47238 * ((-(C47354 * C47539) / C47106) / C47079 - C47314));
    const double C839 = (-(C47518 * C47469 * C47266 * ce) / C47106) / C47079 -
                        (ae * C47518 * C47469 * C47265) / C47239 -
                        (C47238 * C47518 * C47473) / C47239;
    const double C1194 =
        (-(C47473 * C47539) / C47106) / C47079 - (C47469 * C47270) / C47239;
    const double C4775 = C4601 * C298;
    const double C4767 = C48385 * C298;
    const double C16087 = C15913 * C298;
    const double C16079 = C48385 * C298;
    const double C21714 = C48030 * C298;
    const double C4791 = C4601 * C304;
    const double C4783 = C48385 * C304;
    const double C16103 = C15913 * C304;
    const double C16095 = C48385 * C304;
    const double C21722 = C48030 * C304;
    const double C10651 = C4601 * C451;
    const double C10643 = C48385 * C451;
    const double C26481 = C48030 * C451;
    const double C32226 = C15913 * C451;
    const double C32218 = C48385 * C451;
    const double C10667 = C4601 * C457;
    const double C10659 = C48385 * C457;
    const double C26489 = C48030 * C457;
    const double C32242 = C15913 * C457;
    const double C32234 = C48385 * C457;
    const double C5715 = C4601 * C1051;
    const double C17019 = C15913 * C1051;
    const double C21730 = C48030 * C1051;
    const double C5901 = C4601 * C1197;
    const double C17197 = C15913 * C1197;
    const double C22275 = C48030 * C1197;
    const double C12383 = C4601 * C1881;
    const double C28273 = C48030 * C1881;
    const double C33950 = C15913 * C1881;
    const double C47365 = C47293 + C47362;
    const double C47399 = C47384 / C47239;
    const double C47574 = C47569 * ce;
    const double C2243 =
        (2 * C47518 * C47830 + C47518 * (C47830 + C47569 * C47539)) / C47079;
    const double C6798 =
        (3 * (C47830 + C47569 * C47539) +
         C47518 * (2 * C47518 * C47569 +
                   C47518 * (C47569 + C47469 * C47435 * C47539))) /
        C47079;
    const double C47601 = C47596 * ce;
    const double C47844 = C47302 + C47843;
    const double C47872 = C47302 + C47871;
    const double C5723 = C48385 * C1044;
    const double C17027 = C48385 * C1044;
    const double C22797 = C48030 * C1044;
    const double C5909 = C48385 * C1187;
    const double C17205 = C48385 * C1187;
    const double C23529 = C48030 * C1187;
    const double C6415 = C48385 * C1563;
    const double C17703 = C48385 * C1563;
    const double C22967 = C48030 * C1563;
    const double C12391 = C48385 * C1874;
    const double C33958 = C48385 * C1874;
    const double C44697 = C48030 * C1874;
    const double C47357 = C47322 + C47349;
    const double C47356 = C47348 / C47106;
    const double C2241 =
        2 * C47518 * C47980 + C47518 * (C47980 + C47469 * C47417 * C47539);
    const double C6054 = C4606 * C1031;
    const double C17350 = C15918 * C1031;
    const double C21735 = C21591 * C1031;
    const double C6998 = C4606 * C1165;
    const double C18278 = C15918 * C1165;
    const double C26498 = C21591 * C1165;
    const double C6260 = C4606 * C1168;
    const double C17556 = C15918 * C1168;
    const double C22280 = C21591 * C1168;
    const double C12726 = C4606 * C1861;
    const double C34293 = C15918 * C1861;
    const double C43137 = C21591 * C1861;
    const double C5702 =
        4 * (2 * C47978 + C47469 * C47986) +
        C47469 * (3 * C47986 + C47469 * (2 * C47469 * C47332 +
                                         C47469 * (C47332 + C47407 * C47490)));
    const double C5880 =
        2 * C47978 + C47469 * C47986 +
        (2 * C47469 * C47332 + C47469 * (C47332 + C47407 * C47490)) * C47539;
    const double C6402 =
        C47518 * (3 * C47986 + C47469 * (2 * C47469 * C47332 +
                                         C47469 * (C47332 + C47407 * C47490)));
    const double C7270 =
        2 * C47518 * C47986 +
        C47518 * (C47986 + (C47332 + C47407 * C47490) * C47539);
    const double C12370 =
        4 * (2 * C47518 * C47284 + C47518 * C48002) +
        C47518 * (3 * C48002 + C47518 * (2 * C47518 * C47332 +
                                         C47518 * (C47332 + C47407 * C47539)));
    const double C47364 = C47361 + C47290;
    const double C47404 = C47391 / C47106;
    const double C47398 = C47382 / C47106;
    const double C47573 = ae * C47567;
    const double C2246 = (-2 * C47518 * C47836) / C47106 -
                         (C47518 * (C47567 * C47539 + C47836)) / C47106;
    const double C6800 =
        (-3 * (C47567 * C47539 + C47836)) / C47106 +
        C47518 * ((-2 * C47518 * C47567) / C47106 -
                  (C47518 * (C47469 * C47432 * C47539 + C47567)) / C47106);
    const double C47600 = ae * C47594;
    const double C47850 = C47849 + C47301;
    const double C47878 = C47877 + C47301;
    const double C5718 = C4606 * C1047;
    const double C17022 = C15918 * C1047;
    const double C22798 = C21591 * C1047;
    const double C5904 = C4606 * C1190;
    const double C17200 = C15918 * C1190;
    const double C23530 = C21591 * C1190;
    const double C6410 = C4606 * C1566;
    const double C17698 = C15918 * C1566;
    const double C22968 = C21591 * C1566;
    const double C12386 = C4606 * C1877;
    const double C33953 = C15918 * C1877;
    const double C44698 = C21591 * C1877;
    const double C47363 = C47360 / C47239;
    const double C47480 = C47238 * C47477;
    const double C47568 = C47477 / C47239;
    const double C47624 = C47518 * C47477;
    const double C47655 = -2 * C47477;
    const double C840 = (-(ae * C47518 * C47469 * C47301) / C47106) / C47079 -
                        (C47518 * C47473) / C47239 -
                        (C47518 * C47469 * C47302 * ce) / C47239 +
                        C47238 * ((-(C47518 * C47475 * ce) / C47106) / C47079 -
                                  (ae * C47518 * C47476) / C47239 -
                                  (C47238 * C47518 * C47477) / C47239);
    const double C1193 =
        (-((C47469 * C47266 + C47475 * C47539) * ce) / C47106) / C47079 -
        (ae * (C47476 * C47539 + C47469 * C47265)) / C47239 +
        C47238 * ((-(C47477 * C47539) / C47106) / C47079 - C47473 / C47239);
    const double C2248 =
        (-2 * C47518 * C47473) / C47239 +
        C47518 * ((-(C47477 * C47539) / C47106) / C47079 - C47473 / C47239);
    const double C47494 = C47493 / C47106;
    const double C47529 = C47238 * C47526;
    const double C47595 = C47526 / C47239;
    const double C47677 = -2 * C47526;
    const double C47543 = C47542 / C47106;
    const double C48008 = C48004 + C48007;
    const double C28265 =
        4 * (2 * C47518 * C47992 + C47518 * C48016) +
        C47518 * (3 * C48016 +
                  C47518 * (2 * C47518 * C48014 +
                            C47518 * (C48014 + C47469 * C47387 * C47539)));
    const double C48023 = C48020 + C48022;
    const double C47447 = C47342 + C47441;
    const double C47444 = C47438 + C47339;
    const double C47443 = C47437 / C47239;
    const double C47504 = C47501 / C47106;
    const double C47553 = C47550 / C47106;
    const double C47577 = C47238 * C47572;
    const double C47628 = C47518 * C47572;
    const double C47671 = C47572 * C47539;
    const double C47604 = C47238 * C47599;
    const double C47299 = C47295 - C47280;
    const double C47430 = C47422 - C47401;
    const double C47511 = -C47508;
    const double C22503 =
        (5 * (3 * C47841 + C47469 * C47882) +
         C47469 * (4 * C47882 +
                   C47469 * (3 * C47502 +
                             C47469 * (2 * C47570 +
                                       C47469 * (C47342 + C47418 * C47490))))) /
        C47079;
    const double C22642 =
        (3 * C47841 + C47469 * C47882 +
         (3 * C47502 +
          C47469 * (2 * C47570 + C47469 * (C47342 + C47418 * C47490))) *
             C47539) /
        C47079;
    const double C23075 =
        (C47518 * (4 * C47882 +
                   C47469 * (3 * C47502 +
                             C47469 * (2 * C47570 +
                                       C47469 * (C47342 + C47418 * C47490))))) /
        C47079;
    const double C23736 =
        (2 * C47518 * C47882 +
         C47518 * (C47882 + (2 * C47570 + C47469 * (C47342 + C47418 * C47490)) *
                                C47539)) /
        C47079;
    const double C47560 = -C47557;
    const double C44428 =
        (5 * (3 * C47869 + C47518 * C47906) +
         C47518 * (4 * C47906 +
                   C47518 * (3 * C47551 +
                             C47518 * (2 * C47597 +
                                       C47518 * (C47342 + C47418 * C47539))))) /
        C47079;
    const double C47586 = C47584 / C47079;
    const double C47635 = -C47632;
    const double C47613 = C47611 / C47079;
    const double C47888 = C47886 - C47887;
    const double C47912 = C47910 - C47911;
    const double C47442 = C47434 * ae;
    const double C47440 = C47238 * C47434;
    const double C47439 = C47434 * ce;
    const double C48140 = C48135 - C48139;
    const double C48425 = C48397 / C47106;
    const double C48147 = C48143 - C48146;
    const double C48439 = C48428 / C47112;
    const double C48180 = C48175 - C48179;
    const double C48427 = C48400 / C47106;
    const double C48187 = C48183 - C48186;
    const double C48441 = C48431 / C47112;
    const double C22512 = C21753 * C1030;
    const double C22509 = C21745 * C1030;
    const double C22784 = C21741 * C47132;
    const double C23970 = C21741 * C2464;
    const double C21758 = C21740 * C259;
    const double C22419 = C21740 * C48434;
    const double C22508 = C21740 * C48044;
    const double C22783 = C21740 * C48352;
    const double C23969 = C21740 * C2457;
    const double C22507 = C21739 * C1030;
    const double C22647 = C22292 * C1030;
    const double C22649 = C22286 * C1030;
    const double C22527 = C22523 * C1030;
    const double C22679 = C22671 * C1030;
    const double C22677 = C22669 * C1030;
    const double C22675 = C22667 * C1030;
    const double C27401 = C26510 * C1030;
    const double C27732 = C26504 * C47132;
    const double C29244 = C26504 * C2464;
    const double C26517 = C26503 * C259;
    const double C27397 = C26503 * C48044;
    const double C27731 = C26503 * C48352;
    const double C28021 = C26503 * C48434;
    const double C29243 = C26503 * C2457;
    const double C27396 = C26502 * C1030;
    const double C28293 = C28287 * C1030;
    const double C28288 = C28282 * C1030;
    const double C47152 = C47150 / C47106;
    const double C47140 = C47136 + C48054;
    const double C47167 = C47164 - C47166;
    const double C961 = C47164 + (0 * ce) / C47106;
    const double C47139 = C48044 - C47135;
    const double C24263 = C21740 * C48049;
    const double C29607 = C26503 * C48049;
    const double C48351 = C48049 * C48039;
    const double C48391 = C48356 + C48049;
    const double C48359 = C48057 / C47112;
    const double C48355 = C48057 * C48039;
    const double C559 = C48435 - (C48049 * C48040) / C47106;
    const double C4810 = C4770 + C4771;
    const double C4806 = C4762 + C4763;
    const double C16122 = C16082 + C16083;
    const double C16118 = C16074 + C16075;
    const double C21743 = C21711 + C21712;
    const double C4818 = C4786 + C4787;
    const double C4814 = C4778 + C4779;
    const double C16130 = C16098 + C16099;
    const double C16126 = C16090 + C16091;
    const double C21747 = C21719 + C21720;
    const double C10686 = C10646 + C10647;
    const double C10682 = C10638 + C10639;
    const double C26506 = C26478 + C26479;
    const double C32261 = C32221 + C32222;
    const double C32257 = C32213 + C32214;
    const double C10694 = C10662 + C10663;
    const double C10690 = C10654 + C10655;
    const double C26508 = C26482 + C26483;
    const double C32269 = C32237 + C32238;
    const double C32265 = C32229 + C32230;
    const double C5466 = C5446 + C5447;
    const double C5462 = C5438 + C5439;
    const double C16778 = C16758 + C16759;
    const double C16774 = C16750 + C16751;
    const double C22284 = C22260 + C22261;
    const double C4809 = C4768 + C4769;
    const double C4805 = C4760 + C4761;
    const double C16121 = C16080 + C16081;
    const double C16117 = C16072 + C16073;
    const double C21742 = C21709 + C21710;
    const double C4817 = C4784 + C4785;
    const double C16129 = C16096 + C16097;
    const double C21746 = C21717 + C21718;
    const double C10685 = C10644 + C10645;
    const double C10681 = C10636 + C10637;
    const double C26505 = C26476 + C26477;
    const double C32260 = C32219 + C32220;
    const double C32256 = C32211 + C32212;
    const double C10693 = C10660 + C10661;
    const double C26509 = C26484 + C26485;
    const double C32268 = C32235 + C32236;
    const double C5465 = C5444 + C5445;
    const double C16777 = C16756 + C16757;
    const double C22285 = C22262 + C22263;
    const double C47311 = C47308 + C47294;
    const double C5727 = C5712 + C5713;
    const double C6063 = C6056 + C6057;
    const double C17031 = C17016 + C17017;
    const double C17359 = C17352 + C17353;
    const double C21751 = C21727 + C21728;
    const double C5913 = C5890 + C5891;
    const double C7007 = C7000 + C7001;
    const double C17209 = C17186 + C17187;
    const double C18287 = C18280 + C18281;
    const double C23532 = C23522 + C23523;
    const double C5917 = C5898 + C5899;
    const double C6269 = C6262 + C6263;
    const double C17213 = C17194 + C17195;
    const double C17565 = C17558 + C17559;
    const double C22290 = C22272 + C22273;
    const double C12395 = C12380 + C12381;
    const double C12735 = C12728 + C12729;
    const double C28644 = C28640 + C28641;
    const double C33962 = C33947 + C33948;
    const double C34302 = C34295 + C34296;
    const double C47353 = C47345 - C47327;
    const double C47485 = C47484 / C47079;
    const double C23755 = C23751 * C1030;
    const double C28291 = C28285 * C1030;
    const double C47534 = C47533 / C47079;
    const double C22526 = C22519 + C22520;
    const double C22674 = C22664 + C22665;
    const double C23085 = C23082 + C23083;
    const double C23749 = C23742 + C23743;
    const double C44441 = C44436 + C44437;
    const double C47310 = C47307 + C47291;
    const double C47336 = -C47324;
    const double C4801 = C4601 * C305;
    const double C4793 = C48385 * C305;
    const double C16113 = C15913 * C305;
    const double C16105 = C48385 * C305;
    const double C21726 = C48030 * C305;
    const double C10677 = C4601 * C458;
    const double C10669 = C48385 * C458;
    const double C26493 = C48030 * C458;
    const double C32252 = C15913 * C458;
    const double C32244 = C48385 * C458;
    const double C5451 = C4601 * C839;
    const double C5443 = C48385 * C839;
    const double C16763 = C15913 * C839;
    const double C16755 = C48385 * C839;
    const double C22267 = C48030 * C839;
    const double C5893 = C4601 * C1194;
    const double C17189 = C15913 * C1194;
    const double C22653 = C48030 * C1194;
    const double C4812 = C4774 + C4775;
    const double C4808 = C4766 + C4767;
    const double C16124 = C16086 + C16087;
    const double C16120 = C16078 + C16079;
    const double C21744 = C21713 + C21714;
    const double C4820 = C4790 + C4791;
    const double C4816 = C4782 + C4783;
    const double C16132 = C16102 + C16103;
    const double C16128 = C16094 + C16095;
    const double C21748 = C21721 + C21722;
    const double C10688 = C10650 + C10651;
    const double C10684 = C10642 + C10643;
    const double C26507 = C26480 + C26481;
    const double C32263 = C32225 + C32226;
    const double C32259 = C32217 + C32218;
    const double C10696 = C10666 + C10667;
    const double C10692 = C10658 + C10659;
    const double C26511 = C26488 + C26489;
    const double C32271 = C32241 + C32242;
    const double C32267 = C32233 + C32234;
    const double C5728 = C5714 + C5715;
    const double C17032 = C17018 + C17019;
    const double C21752 = C21729 + C21730;
    const double C5918 = C5900 + C5901;
    const double C17214 = C17196 + C17197;
    const double C22291 = C22274 + C22275;
    const double C12396 = C12382 + C12383;
    const double C28283 = C28272 + C28273;
    const double C33963 = C33949 + C33950;
    const double C47368 = C47365 + C47343;
    const double C47579 = C47574 / C47239;
    const double C7283 = C48385 * C2243;
    const double C18555 = C48385 * C2243;
    const double C28497 = C48030 * C2243;
    const double C47606 = C47601 / C47239;
    const double C5704 =
        (4 * (2 * C47830 + C47469 * C47844) +
         C47469 *
             (3 * C47844 +
              C47469 * (2 * C47569 + C47469 * (C47358 + C47435 * C47490)))) /
        C47079;
    const double C5882 =
        (2 * C47830 + C47469 * C47844 +
         (2 * C47569 + C47469 * (C47358 + C47435 * C47490)) * C47539) /
        C47079;
    const double C6404 =
        (C47518 *
         (3 * C47844 +
          C47469 * (2 * C47569 + C47469 * (C47358 + C47435 * C47490)))) /
        C47079;
    const double C7272 =
        (2 * C47518 * C47844 +
         C47518 * (C47844 + (C47358 + C47435 * C47490) * C47539)) /
        C47079;
    const double C12372 =
        (4 * (2 * C47518 * C47302 + C47518 * C47872) +
         C47518 *
             (3 * C47872 +
              C47518 * (2 * C47596 + C47518 * (C47358 + C47435 * C47539)))) /
        C47079;
    const double C5732 = C5722 + C5723;
    const double C17036 = C17026 + C17027;
    const double C22802 = C22796 + C22797;
    const double C5922 = C5908 + C5909;
    const double C17218 = C17204 + C17205;
    const double C23534 = C23528 + C23529;
    const double C6420 = C6414 + C6415;
    const double C17708 = C17702 + C17703;
    const double C22971 = C22966 + C22967;
    const double C12400 = C12390 + C12391;
    const double C33967 = C33957 + C33958;
    const double C44701 = C44696 + C44697;
    const double C126 = 4 * (2 * C47261 + C47238 * C47292) +
                        C47238 * (3 * C47292 + C47238 * C47357);
    const double C272 = C47469 * (3 * C47292 + C47238 * C47357);
    const double C276 = 2 * C47261 + C47238 * C47292 + C47357 * C47490;
    const double C425 = C47518 * (3 * C47292 + C47238 * C47357);
    const double C429 = 2 * C47261 + C47238 * C47292 + C47357 * C47539;
    const double C826 = C47518 * C47469 * C47357;
    const double C1307 =
        2 * C47469 * C47357 + C47469 * (C47357 + C47434 * C47490);
    const double C1457 = C47518 * (C47357 + C47434 * C47490);
    const double C2031 = C47469 * C47357 + C47469 * C47434 * C47539;
    const double C2137 =
        2 * C47518 * C47357 + C47518 * (C47357 + C47434 * C47539);
    const double C47367 = C47364 + C47340;
    const double C47412 = -C47398;
    const double C47578 = C47573 / C47106;
    const double C7278 = C4606 * C2246;
    const double C18550 = C15918 * C2246;
    const double C28498 = C21591 * C2246;
    const double C47605 = C47600 / C47106;
    const double C5706 =
        4 * ((-2 * C47836) / C47106 - (C47469 * C47850) / C47106) +
        C47469 * ((-3 * C47850) / C47106 +
                  C47469 * ((-2 * C47567) / C47106 -
                            (C47469 * (C47432 * C47490 + C47355)) / C47106));
    const double C5884 = (-2 * C47836) / C47106 - (C47469 * C47850) / C47106 +
                         ((-2 * C47567) / C47106 -
                          (C47469 * (C47432 * C47490 + C47355)) / C47106) *
                             C47539;
    const double C6406 =
        C47518 * ((-3 * C47850) / C47106 +
                  C47469 * ((-2 * C47567) / C47106 -
                            (C47469 * (C47432 * C47490 + C47355)) / C47106));
    const double C7274 =
        (-2 * C47518 * C47850) / C47106 -
        (C47518 * ((C47432 * C47490 + C47355) * C47539 + C47850)) / C47106;
    const double C12374 =
        4 * ((-2 * C47518 * C47301) / C47106 - (C47518 * C47878) / C47106) +
        C47518 * ((-3 * C47878) / C47106 +
                  C47518 * ((-2 * C47594) / C47106 -
                            (C47518 * (C47432 * C47539 + C47355)) / C47106));
    const double C47483 = C47480 / C47239;
    const double C1192 =
        (-(C47477 * C47539) / C47106) / C47079 - C47473 / C47239 -
        (ae * (C47567 * C47539 + C47469 * C47301)) / C47239 -
        ((C47469 * C47302 + C47569 * C47539) * ce) / C47239 +
        C47238 * ((-((C47475 + C47570 * C47539) * ce) / C47106) / C47079 -
                  (ae * (C47571 * C47539 + C47476)) / C47239 +
                  C47238 * ((-(C47572 * C47539) / C47106) / C47079 - C47568));
    const double C47657 = C47655 / C47239;
    const double C5461 = C4601 * C840;
    const double C5453 = C48385 * C840;
    const double C16773 = C15913 * C840;
    const double C16765 = C48385 * C840;
    const double C22271 = C48030 * C840;
    const double C5895 = C48385 * C1193;
    const double C7005 = C4601 * C1193;
    const double C17191 = C48385 * C1193;
    const double C18285 = C15913 * C1193;
    const double C23525 = C48030 * C1193;
    const double C7281 = C4601 * C2248;
    const double C18553 = C15913 * C2248;
    const double C23745 = C48030 * C2248;
    const double C47495 = -C47494;
    const double C47532 = C47529 / C47239;
    const double C47679 = C47677 / C47239;
    const double C47544 = -C47543;
    const double C22502 =
        5 * (3 * C47983 + C47469 * C48008) +
        C47469 * (4 * C48008 +
                  C47469 * (3 * C48006 +
                            C47469 * (2 * C47469 * C47318 +
                                      C47469 * (C47318 + C47387 * C47490))));
    const double C22641 =
        3 * C47983 + C47469 * C48008 +
        (3 * C48006 +
         C47469 * (2 * C47469 * C47318 + C47469 * (C47318 + C47387 * C47490))) *
            C47539;
    const double C23074 =
        C47518 * (4 * C48008 +
                  C47469 * (3 * C48006 +
                            C47469 * (2 * C47469 * C47318 +
                                      C47469 * (C47318 + C47387 * C47490))));
    const double C23735 =
        2 * C47518 * C48008 +
        C47518 * (C48008 +
                  (2 * C47469 * C47318 + C47469 * (C47318 + C47387 * C47490)) *
                      C47539);
    const double C44427 =
        5 * (3 * C47999 + C47518 * C48023) +
        C47518 * (4 * C48023 +
                  C47518 * (3 * C48021 +
                            C47518 * (2 * C47518 * C47318 +
                                      C47518 * (C47318 + C47387 * C47539))));
    const double C47450 = C47447 + C47419;
    const double C47449 = C47444 + C47416;
    const double C47507 = -C47504;
    const double C47556 = -C47553;
    const double C47582 = C47577 / C47239;
    const double C47631 = C47238 * C47628;
    const double C47672 = C47671 / C47106;
    const double C47609 = C47604 / C47239;
    const double C47309 = C47299 - C47306;
    const double C47448 = C47430 - C47443;
    const double C47513 = C47511 / C47079;
    const double C47562 = C47560 / C47079;
    const double C47588 = C47586 - C47581;
    const double C47636 = C47635 / C47079;
    const double C47615 = C47613 - C47608;
    const double C22504 =
        5 * ((-3 * C47847) / C47106 + C47469 * C47888) +
        C47469 * (4 * C47888 +
                  C47469 * ((-3 * C47503) / C47106 +
                            C47469 * ((-2 * C47571) / C47106 -
                                      (C47469 * (C47415 * C47490 + C47339)) /
                                          C47106)));
    const double C22643 =
        (-3 * C47847) / C47106 + C47469 * C47888 +
        ((-3 * C47503) / C47106 +
         C47469 * ((-2 * C47571) / C47106 -
                   (C47469 * (C47415 * C47490 + C47339)) / C47106)) *
            C47539;
    const double C23076 =
        C47518 *
        (4 * C47888 +
         C47469 * ((-3 * C47503) / C47106 +
                   C47469 * ((-2 * C47571) / C47106 -
                             (C47469 * (C47415 * C47490 + C47339)) / C47106)));
    const double C23737 =
        2 * C47518 * C47888 +
        C47518 * (C47888 + ((-2 * C47571) / C47106 -
                            (C47469 * (C47415 * C47490 + C47339)) / C47106) *
                               C47539);
    const double C44429 =
        5 * ((-3 * C47875) / C47106 + C47518 * C47912) +
        C47518 * (4 * C47912 +
                  C47518 * ((-3 * C47552) / C47106 +
                            C47518 * ((-2 * C47598) / C47106 -
                                      (C47518 * (C47415 * C47539 + C47339)) /
                                          C47106)));
    const double C47446 = C47393 + C47440;
    const double C47445 = C47439 / C47106;
    const double C48369 = C48140 * C48134;
    const double C48406 = C48371 + C48140;
    const double C48373 = C48147 / C47112;
    const double C48370 = C48147 * C48134;
    const double C1301 = C48439 - (C48140 * C48136) / C47106;
    const double C48375 = C48180 * C48174;
    const double C48412 = C48377 + C48180;
    const double C48379 = C48187 / C47112;
    const double C48376 = C48187 * C48174;
    const double C2133 = C48441 - (C48180 * C48176) / C47106;
    const double C47155 = C47146 - C47152;
    const double C47145 = C47140 * de;
    const double C120 =
        (C47167 / C47112 + (0 * ce) / C47106) / C47112 - (0 * de) / C47106;
    const double C568 = C47167 / C47112 - (0 * de) / C47106;
    const double C2358 = C47167 / C47112 + (0 * ce) / C47106;
    const double C47144 = C47139 * ce;
    const double C265 =
        ((-C47107 / C47106) / C47112 - (C47125 * de) / C47106) / C47112 -
        ((C47104 * ((-C47114) / C47112 - (C47139 * de) / C47106) + C2457) *
         de) /
            C47106 +
        (-C47126 / C47106) / C47112 - (0 * de) / C47106;
    const double C266 =
        ((-C47114) / C47112 - (C47139 * de) / C47106) / C47112 -
        ((C47104 * ((-C47126 / C47106) / C47112 - (0 * de) / C47106) + C48054) *
         de) /
            C47106;
    const double C2463 = (-C47114) / C47112 - (C47139 * de) / C47106;
    const double C48387 = C48351 / C47106;
    const double C48422 = C48391 / C47112;
    const double C48423 = C48393 + C48359;
    const double C561 = C48359 - C48055 / C47118;
    const double C48390 = C48355 / C47106;
    const double C21989 = C21740 * C559;
    const double C26805 = C26503 * C559;
    const double C21761 = C21743 * C267;
    const double C22422 = C21743 * C961;
    const double C24266 = C21743 * C47167;
    const double C22788 = C21747 * C47132;
    const double C23974 = C21747 * C2464;
    const double C26520 = C26506 * C267;
    const double C28024 = C26506 * C961;
    const double C29610 = C26506 * C47167;
    const double C28488 = C26508 * C47132;
    const double C29248 = C26508 * C2464;
    const double C22956 = C22284 * C47132;
    const double C24136 = C22284 * C2464;
    const double C21760 = C21742 * C260;
    const double C22421 = C21742 * C48421;
    const double C22785 = C21742 * C48054;
    const double C23971 = C21742 * C48054;
    const double C24265 = C21742 * C48057;
    const double C21764 = C21746 * C259;
    const double C21999 = C21746 * C559;
    const double C22425 = C21746 * C48434;
    const double C22510 = C21746 * C48044;
    const double C22787 = C21746 * C48352;
    const double C23973 = C21746 * C2457;
    const double C24269 = C21746 * C48049;
    const double C26519 = C26505 * C260;
    const double C27733 = C26505 * C48054;
    const double C28023 = C26505 * C48421;
    const double C29245 = C26505 * C48054;
    const double C29609 = C26505 * C48057;
    const double C26523 = C26509 * C259;
    const double C27400 = C26509 * C48044;
    const double C28027 = C26509 * C48434;
    const double C28489 = C26509 * C48352;
    const double C29249 = C26509 * C2457;
    const double C30632 = C26509 * C48049;
    const double C43347 = C26509 * C559;
    const double C22297 = C22285 * C259;
    const double C22648 = C22285 * C48044;
    const double C22957 = C22285 * C48352;
    const double C24137 = C22285 * C2457;
    const double C24432 = C22285 * C48049;
    const double C25487 = C22285 * C48434;
    const double C26661 = C22285 * C559;
    const double C136 = (3 * (C47253 + C47238 * C47272 + C47261 * ae) +
                         C47238 * (2 * C47272 + C47238 * C47311 + C47292 * ae) +
                         (2 * C47261 + C47238 * C47292) * ae) /
                        C47079;
    const double C280 =
        (C47469 * (2 * C47272 + C47238 * C47311 + C47292 * ae)) / C47079;
    const double C290 =
        (C47253 + C47238 * C47272 + C47261 * ae + C47311 * C47490) / C47079;
    const double C433 =
        (C47518 * (2 * C47272 + C47238 * C47311 + C47292 * ae)) / C47079;
    const double C443 =
        (C47253 + C47238 * C47272 + C47261 * ae + C47311 * C47539) / C47079;
    const double C830 = (C47518 * C47469 * C47311) / C47079;
    const double C22790 = C21751 * C47132;
    const double C23976 = C21751 * C2464;
    const double C23536 = C23532 * C47132;
    const double C24146 = C23532 * C2464;
    const double C22960 = C22290 * C47132;
    const double C24140 = C22290 * C2464;
    const double C28646 = C28644 * C47132;
    const double C30289 = C28644 * C2464;
    const double C47366 = C47353 - C47363;
    const double C47486 = C47485 - C47482;
    const double C47535 = C47534 - C47531;
    const double C22530 = C22526 * C1030;
    const double C22682 = C22674 * C1030;
    const double C23087 = C23085 * C1030;
    const double C23753 = C23749 * C1030;
    const double C44443 = C44441 * C1030;
    const double C301 =
        2 * ((-(C47469 * C47266 * ce) / C47106) / C47079 -
             (ae * C47469 * C47265) / C47239 - (C47238 * C47473) / C47239) -
        (ae * C47469 * C47310) / C47239 - (C47469 * C47311 * ce) / C47239 +
        C47238 * ((-(ae * C47469 * C47301) / C47106) / C47079 -
                  C47473 / C47239 - (C47469 * C47302 * ce) / C47239 +
                  C47238 * ((-(C47469 * C47293 * ce) / C47106) / C47079 -
                            (ae * C47469 * C47290) / C47239 -
                            (C47238 * C47469 * C47354) / C47239));
    const double C454 =
        2 * ((-(C47518 * C47266 * ce) / C47106) / C47079 -
             (ae * C47518 * C47265) / C47239 - (C47238 * C47522) / C47239) -
        (ae * C47518 * C47310) / C47239 - (C47518 * C47311 * ce) / C47239 +
        C47238 * ((-(ae * C47518 * C47301) / C47106) / C47079 -
                  C47522 / C47239 - (C47518 * C47302 * ce) / C47239 +
                  C47238 * ((-(C47518 * C47293 * ce) / C47106) / C47079 -
                            (ae * C47518 * C47290) / C47239 -
                            (C47238 * C47518 * C47354) / C47239));
    const double C137 =
        (-3 * (C47238 * C47271 + C47252 + C47261 * ce)) / C47106 +
        C47238 * ((-2 * C47271) / C47106 - (C47238 * C47310) / C47106 -
                  (C47292 * ce) / C47106) -
        ((2 * C47261 + C47238 * C47292) * ce) / C47106;
    const double C285 =
        C47469 * ((-2 * C47271) / C47106 - (C47238 * C47310) / C47106 -
                  (C47292 * ce) / C47106);
    const double C293 =
        -(C47310 * C47490 + C47238 * C47271 + C47252 + C47261 * ce) / C47106;
    const double C438 =
        C47518 * ((-2 * C47271) / C47106 - (C47238 * C47310) / C47106 -
                  (C47292 * ce) / C47106);
    const double C446 =
        -(C47310 * C47539 + C47238 * C47271 + C47252 + C47261 * ce) / C47106;
    const double C833 = -(C47518 * C47469 * C47310) / C47106;
    const double C47344 = C47336 / C47079;
    const double C5468 = C5450 + C5451;
    const double C5464 = C5442 + C5443;
    const double C16780 = C16762 + C16763;
    const double C16776 = C16754 + C16755;
    const double C22287 = C22266 + C22267;
    const double C5914 = C5892 + C5893;
    const double C17210 = C17188 + C17189;
    const double C22668 = C22652 + C22653;
    const double C21762 = C21744 * C48392;
    const double C22423 = C21744 * C48392;
    const double C24267 = C21744 * C2723;
    const double C21766 = C21748 * C260;
    const double C22427 = C21748 * C48421;
    const double C22789 = C21748 * C48054;
    const double C23975 = C21748 * C48054;
    const double C24271 = C21748 * C48057;
    const double C26521 = C26507 * C48392;
    const double C28025 = C26507 * C48392;
    const double C29611 = C26507 * C2723;
    const double C26525 = C26511 * C260;
    const double C28029 = C26511 * C48421;
    const double C28491 = C26511 * C48054;
    const double C29251 = C26511 * C48054;
    const double C30634 = C26511 * C48057;
    const double C21770 = C21752 * C259;
    const double C22431 = C21752 * C48434;
    const double C22511 = C21752 * C48044;
    const double C22791 = C21752 * C48352;
    const double C23977 = C21752 * C2457;
    const double C24275 = C21752 * C48049;
    const double C22303 = C22291 * C259;
    const double C22646 = C22291 * C48044;
    const double C22961 = C22291 * C48352;
    const double C24141 = C22291 * C2457;
    const double C24438 = C22291 * C48049;
    const double C25493 = C22291 * C48434;
    const double C28289 = C28283 * C48044;
    const double C28639 = C28283 * C48352;
    const double C30288 = C28283 * C2457;
    const double C43134 = C28283 * C259;
    const double C44246 = C28283 * C48434;
    const double C46171 = C28283 * C48049;
    const double C47371 = C47238 * C47368;
    const double C47394 = 3 * C47368;
    const double C47381 = C47368 * ce;
    const double C47832 = C47469 * C47368;
    const double C1040 =
        (2 * C47469 * C47311 + C47469 * (C47311 + C47368 * C47490)) / C47079;
    const double C1177 = (C47469 * C47311 + C47469 * C47368 * C47539) / C47079;
    const double C1183 = (C47518 * (C47311 + C47368 * C47490)) / C47079;
    const double C1870 =
        (2 * C47518 * C47311 + C47518 * (C47311 + C47368 * C47539)) / C47079;
    const double C7288 = C7282 + C7283;
    const double C18560 = C18554 + C18555;
    const double C28502 = C28496 + C28497;
    const double C22806 = C22802 * C47132;
    const double C23982 = C22802 * C2464;
    const double C23538 = C23534 * C47132;
    const double C24150 = C23534 * C2464;
    const double C22974 = C22971 * C47132;
    const double C24592 = C22971 * C2464;
    const double C44704 = C44701 * C47132;
    const double C45908 = C44701 * C2464;
    const double C5102 = C4606 * C272;
    const double C16414 = C15918 * C272;
    const double C4794 = C4606 * C276;
    const double C16106 = C15918 * C276;
    const double C22004 = C21591 * C276;
    const double C10962 = C4606 * C425;
    const double C32537 = C15918 * C425;
    const double C10670 = C4606 * C429;
    const double C32245 = C15918 * C429;
    const double C43352 = C21591 * C429;
    const double C5454 = C4606 * C826;
    const double C16766 = C15918 * C826;
    const double C26666 = C21591 * C826;
    const double C47370 = C47238 * C47367;
    const double C47390 = -3 * C47367;
    const double C47380 = ae * C47367;
    const double C841 =
        2 * ((-(C47518 * C47475 * ce) / C47106) / C47079 -
             (ae * C47518 * C47476) / C47239 - (C47238 * C47624) / C47239) -
        (ae * C47518 * C47469 * C47367) / C47239 -
        (C47518 * C47469 * C47368 * ce) / C47239 +
        C47238 * ((-(ae * C47518 * C47567) / C47106) / C47079 -
                  C47624 / C47239 - (C47518 * C47569 * ce) / C47239 +
                  C47238 * ((-(C47518 * C47570 * ce) / C47106) / C47079 -
                            (ae * C47518 * C47571) / C47239 -
                            (C47238 * C47518 * C47572) / C47239));
    const double C47838 = C47469 * C47367;
    const double C1037 = (-2 * C47469 * C47310) / C47106 -
                         (C47469 * (C47367 * C47490 + C47310)) / C47106;
    const double C1174 = -(C47469 * C47367 * C47539 + C47469 * C47310) / C47106;
    const double C1180 = -(C47518 * (C47367 * C47490 + C47310)) / C47106;
    const double C1867 = (-2 * C47518 * C47310) / C47106 -
                         (C47518 * (C47367 * C47539 + C47310)) / C47106;
    const double C47421 = C47412 / C47079;
    const double C47583 = -C47578;
    const double C47610 = -C47605;
    const double C7003 = C48385 * C1192;
    const double C18283 = C48385 * C1192;
    const double C26501 = C48030 * C1192;
    const double C5915 = C5894 + C5895;
    const double C7009 = C7004 + C7005;
    const double C17211 = C17190 + C17191;
    const double C18289 = C18284 + C18285;
    const double C23533 = C23524 + C23525;
    const double C7287 = C7280 + C7281;
    const double C18559 = C18552 + C18553;
    const double C23750 = C23744 + C23745;
    const double C47496 = C47495 / C47079;
    const double C47545 = C47544 / C47079;
    const double C47453 = C47238 * C47450;
    const double C1045 =
        (3 * (C47311 + C47368 * C47490) +
         C47469 * (2 * C47469 * C47368 + C47469 * (C47368 + C47450 * C47490))) /
        C47079;
    const double C1188 =
        (C47311 + C47368 * C47490 + (C47368 + C47450 * C47490) * C47539) /
        C47079;
    const double C1564 =
        (C47518 * (2 * C47469 * C47368 + C47469 * (C47368 + C47450 * C47490))) /
        C47079;
    const double C1875 =
        (3 * (C47311 + C47368 * C47539) +
         C47518 * (2 * C47518 * C47368 + C47518 * (C47368 + C47450 * C47539))) /
        C47079;
    const double C47452 = C47238 * C47449;
    const double C1048 =
        (-3 * (C47367 * C47490 + C47310)) / C47106 +
        C47469 * ((-2 * C47469 * C47367) / C47106 -
                  (C47469 * (C47449 * C47490 + C47367)) / C47106);
    const double C1191 =
        -((C47449 * C47490 + C47367) * C47539 + C47367 * C47490 + C47310) /
        C47106;
    const double C1567 =
        C47518 * ((-2 * C47469 * C47367) / C47106 -
                  (C47469 * (C47449 * C47490 + C47367)) / C47106);
    const double C1878 =
        (-3 * (C47367 * C47539 + C47310)) / C47106 +
        C47518 * ((-2 * C47518 * C47367) / C47106 -
                  (C47518 * (C47449 * C47539 + C47367)) / C47106);
    const double C47510 = C47507 / C47079;
    const double C47559 = C47556 / C47079;
    const double C47634 = C47631 / C47239;
    const double C47673 = -C47672;
    const double C146 =
        3 * ((-(ae * C47271) / C47106) / C47079 - C47270 / C47239 -
             (C47272 * ce) / C47239 + C47238 * C47309) +
        (((-2 * C47271) / C47106 - (C47238 * C47310) / C47106 -
          (C47292 * ce) / C47106) *
         ae) /
            C47079 -
        ((2 * C47272 + C47238 * C47311 + C47292 * ae) * ce) / C47239 +
        C47238 * (2 * C47309 - (ae * C47310) / C47239 - (C47311 * ce) / C47239 +
                  C47238 * ((-(ae * C47301) / C47106) / C47079 -
                            C47300 / C47239 - (C47302 * ce) / C47239 +
                            C47238 * ((-(C47293 * ce) / C47106) / C47079 -
                                      (ae * C47290) / C47239 -
                                      (C47238 *
                                       (C47277 * C47278 +
                                        C47246 * bs[6] * std::pow(C47236, 6)) *
                                       C47247) /
                                          C47239)));
    const double C47451 = C47238 * C47448;
    const double C47515 = C47513 - C47509;
    const double C47564 = C47562 - C47558;
    const double C47590 = C47588 - C47582;
    const double C47637 = C47636 - C47633;
    const double C47617 = C47615 - C47609;
    const double C127 = 5 * (3 * C47292 + C47238 * C47357) +
                        C47238 * (4 * C47357 + C47238 * C47446);
    const double C277 = 3 * C47292 + C47238 * C47357 + C47446 * C47490;
    const double C430 = 3 * C47292 + C47238 * C47357 + C47446 * C47539;
    const double C569 = C47469 * (4 * C47357 + C47238 * C47446);
    const double C673 = C47518 * (4 * C47357 + C47238 * C47446);
    const double C827 = C47518 * C47469 * C47446;
    const double C48403 = C48369 / C47106;
    const double C48429 = C48406 / C47112;
    const double C48430 = C48407 + C48373;
    const double C1303 = C48373 - C48145 / C47118;
    const double C48405 = C48370 / C47106;
    const double C48409 = C48375 / C47106;
    const double C48432 = C48412 / C47112;
    const double C48433 = C48413 + C48379;
    const double C2135 = C48379 - C48185 / C47118;
    const double C48411 = C48376 / C47106;
    const double C47149 = C47145 / C47106;
    const double C47148 = C47144 / C47106;
    const double C21771 = C21753 * C265;
    const double C21763 = C21745 * C265;
    const double C21757 = C21739 * C265;
    const double C22304 = C22292 * C265;
    const double C22298 = C22286 * C265;
    const double C26496 = C22667 * C265;
    const double C26524 = C26510 * C265;
    const double C26516 = C26502 * C265;
    const double C43135 = C28282 * C265;
    const double C21769 = C21751 * C266;
    const double C21765 = C21747 * C266;
    const double C21759 = C21741 * C266;
    const double C22302 = C22290 * C266;
    const double C22296 = C22284 * C266;
    const double C26494 = C23532 * C266;
    const double C26522 = C26508 * C266;
    const double C26518 = C26504 * C266;
    const double C43133 = C28644 * C266;
    const double C23980 = C22523 * C2463;
    const double C23978 = C21753 * C2463;
    const double C23972 = C21745 * C2463;
    const double C23968 = C21739 * C2463;
    const double C24148 = C22669 * C2463;
    const double C24144 = C22667 * C2463;
    const double C24142 = C22292 * C2463;
    const double C24138 = C22286 * C2463;
    const double C24590 = C22671 * C2463;
    const double C29254 = C23751 * C2463;
    const double C29250 = C26510 * C2463;
    const double C29242 = C26502 * C2463;
    const double C30287 = C28282 * C2463;
    const double C45906 = C28287 * C2463;
    const double C48443 = C48387 + C48435;
    const double C560 = C48422 - (C48057 * C48040) / C47106;
    const double C23859 = C21744 * C48423;
    const double C29960 = C26507 * C48423;
    const double C107 = C48423 / C47112 - C48055 / C48394;
    const double C21993 = C21744 * C561;
    const double C26809 = C26507 * C561;
    const double C48436 = C48390 + C48422;
    const double C22521 = C22509 + C22510;
    const double C43788 = C27401 + C27400;
    const double C27402 = C22648 + C22649;
    const double C27398 = C22649 + C22648;
    const double C4773 = C48385 * C280;
    const double C5105 = C4601 * C280;
    const double C16085 = C48385 * C280;
    const double C16417 = C15913 * C280;
    const double C21995 = C48030 * C280;
    const double C4797 = C4601 * C290;
    const double C4781 = C48385 * C290;
    const double C16109 = C15913 * C290;
    const double C16093 = C48385 * C290;
    const double C21724 = C48030 * C290;
    const double C10649 = C48385 * C433;
    const double C10965 = C4601 * C433;
    const double C26811 = C48030 * C433;
    const double C32224 = C48385 * C433;
    const double C32540 = C15913 * C433;
    const double C10673 = C4601 * C443;
    const double C10657 = C48385 * C443;
    const double C26491 = C48030 * C443;
    const double C32248 = C15913 * C443;
    const double C32232 = C48385 * C443;
    const double C5457 = C4601 * C830;
    const double C5441 = C48385 * C830;
    const double C16769 = C15913 * C830;
    const double C16753 = C48385 * C830;
    const double C22269 = C48030 * C830;
    const double C47369 = C47238 * C47366;
    const double C47379 = 2 * C47366;
    const double C47487 = C47486 - C47483;
    const double C47536 = C47535 - C47532;
    const double C4777 = C48385 * C301;
    const double C5109 = C4601 * C301;
    const double C16089 = C48385 * C301;
    const double C16421 = C15913 * C301;
    const double C21997 = C48030 * C301;
    const double C10653 = C48385 * C454;
    const double C10969 = C4601 * C454;
    const double C26813 = C48030 * C454;
    const double C32228 = C48385 * C454;
    const double C32544 = C15913 * C454;
    const double C4776 = C4606 * C285;
    const double C5108 = C4605 * C285;
    const double C16088 = C15918 * C285;
    const double C16420 = C15917 * C285;
    const double C21996 = C21591 * C285;
    const double C4800 = C4605 * C293;
    const double C4792 = C4606 * C293;
    const double C16112 = C15917 * C293;
    const double C16104 = C15918 * C293;
    const double C21725 = C21591 * C293;
    const double C10652 = C4606 * C438;
    const double C10968 = C4605 * C438;
    const double C26812 = C21591 * C438;
    const double C32227 = C15918 * C438;
    const double C32543 = C15917 * C438;
    const double C10676 = C4605 * C446;
    const double C10668 = C4606 * C446;
    const double C26492 = C21591 * C446;
    const double C32251 = C15917 * C446;
    const double C32243 = C15918 * C446;
    const double C5460 = C4605 * C833;
    const double C5452 = C4606 * C833;
    const double C16772 = C15917 * C833;
    const double C16764 = C15918 * C833;
    const double C22270 = C21591 * C833;
    const double C47352 = C47344 - C47314;
    const double C22299 = C22287 * C260;
    const double C22959 = C22287 * C48054;
    const double C24139 = C22287 * C48054;
    const double C24434 = C22287 * C48057;
    const double C25489 = C22287 * C48421;
    const double C22676 = C22668 * C48044;
    const double C23521 = C22668 * C48352;
    const double C24145 = C22668 * C2457;
    const double C26495 = C22668 * C259;
    const double C28033 = C22668 * C48434;
    const double C29615 = C22668 * C48049;
    const double C22522 = C22511 + C22512;
    const double C22666 = C22646 + C22647;
    const double C27404 = C22647 + C22646;
    const double C44432 = C28289 + C28288;
    const double C47374 = C47323 + C47371;
    const double C47397 = C47381 / C47239;
    const double C2244 =
        (2 * C47518 * C47832 + C47518 * (C47832 + C47469 * C47450 * C47539)) /
        C47079;
    const double C6055 = C48385 * C1040;
    const double C17351 = C48385 * C1040;
    const double C21736 = C48030 * C1040;
    const double C6999 = C48385 * C1177;
    const double C18279 = C48385 * C1177;
    const double C26499 = C48030 * C1177;
    const double C6261 = C48385 * C1183;
    const double C17557 = C48385 * C1183;
    const double C22281 = C48030 * C1183;
    const double C12727 = C48385 * C1870;
    const double C34294 = C48385 * C1870;
    const double C43138 = C48030 * C1870;
    const double C28506 = C28502 * C47132;
    const double C29256 = C28502 * C2464;
    const double C47373 = C47370 / C47106;
    const double C47403 = C47390 / C47106;
    const double C47396 = C47380 / C47239;
    const double C5459 = C48385 * C841;
    const double C16771 = C48385 * C841;
    const double C26669 = C48030 * C841;
    const double C2247 =
        (-2 * C47518 * C47838) / C47106 -
        (C47518 * (C47469 * C47449 * C47539 + C47838)) / C47106;
    const double C6058 = C4606 * C1037;
    const double C17354 = C15918 * C1037;
    const double C21737 = C21591 * C1037;
    const double C7002 = C4606 * C1174;
    const double C18282 = C15918 * C1174;
    const double C26500 = C21591 * C1174;
    const double C6264 = C4606 * C1180;
    const double C17560 = C15918 * C1180;
    const double C22282 = C21591 * C1180;
    const double C12730 = C4606 * C1867;
    const double C34297 = C15918 * C1867;
    const double C43139 = C21591 * C1867;
    const double C47429 = C47421 - C47383;
    const double C47585 = C47583 / C47079;
    const double C47612 = C47610 / C47079;
    const double C23537 = C23533 * C48054;
    const double C24147 = C23533 * C48054;
    const double C26497 = C23533 * C260;
    const double C28035 = C23533 * C48421;
    const double C29617 = C23533 * C48057;
    const double C23754 = C23750 * C48044;
    const double C28495 = C23750 * C48352;
    const double C29255 = C23750 * C2457;
    const double C47497 = C47496 - C47314;
    const double C47546 = C47545 - C47314;
    const double C47456 = C47395 + C47453;
    const double C47455 = C47452 / C47106;
    const double C47512 = C47510 - C47383;
    const double C47561 = C47559 - C47383;
    const double C47674 = C47673 / C47079;
    const double C47591 = C47238 * C47590;
    const double C47638 = C47637 - C47634;
    const double C47618 = C47238 * C47617;
    const double C48444 = C48403 + C48439;
    const double C1302 = C48429 - (C48147 * C48136) / C47106;
    const double C1028 = C48430 / C47112 - C48145 / C48394;
    const double C48440 = C48405 + C48429;
    const double C48445 = C48409 + C48441;
    const double C2134 = C48432 - (C48187 * C48176) / C47106;
    const double C1859 = C48433 / C47112 - C48185 / C48394;
    const double C48442 = C48411 + C48432;
    const double C47151 = C47148 - C47127;
    const double C21775 = C21763 + C21764;
    const double C27013 = C22297 + C22298;
    const double C27012 = C22298 + C22297;
    const double C43132 = C26524 + C26523;
    const double C23985 = C23977 + C23978;
    const double C23984 = C23972 + C23973;
    const double C24589 = C24141 + C24142;
    const double C29822 = C24142 + C24141;
    const double C29247 = C24137 + C24138;
    const double C29246 = C24138 + C24137;
    const double C45148 = C29250 + C29249;
    const double C45905 = C30288 + C30287;
    const double C23863 = C21746 * C48443;
    const double C23855 = C21740 * C48443;
    const double C28911 = C22285 * C48443;
    const double C29956 = C26503 * C48443;
    const double C45654 = C26509 * C48443;
    const double C104 =
        (C48434 + 2 * C48049) / C47112 - (C48443 * C48040) / C47106;
    const double C22001 = C21748 * C560;
    const double C21991 = C21742 * C560;
    const double C26663 = C22287 * C560;
    const double C26807 = C26505 * C560;
    const double C43349 = C26511 * C560;
    const double C23865 = C21748 * C48436;
    const double C23857 = C21742 * C48436;
    const double C28913 = C22287 * C48436;
    const double C29958 = C26505 * C48436;
    const double C45656 = C26511 * C48436;
    const double C105 =
        (C48421 + 2 * C48057 + C48443) / C47112 - (C48436 * C48040) / C47106;
    const double C106 = (C48392 + C48054 / C47106 + C48436) / C47112 -
                        (C48423 * C48040) / C47106;
    const double C43791 = C43788 * C48286;
    const double C4811 = C4772 + C4773;
    const double C5111 = C5104 + C5105;
    const double C16123 = C16084 + C16085;
    const double C16423 = C16416 + C16417;
    const double C22008 = C21994 + C21995;
    const double C4823 = C4796 + C4797;
    const double C4815 = C4780 + C4781;
    const double C16135 = C16108 + C16109;
    const double C16127 = C16092 + C16093;
    const double C21749 = C21723 + C21724;
    const double C10687 = C10648 + C10649;
    const double C10971 = C10964 + C10965;
    const double C26814 = C26810 + C26811;
    const double C32262 = C32223 + C32224;
    const double C32546 = C32539 + C32540;
    const double C10699 = C10672 + C10673;
    const double C10691 = C10656 + C10657;
    const double C26512 = C26490 + C26491;
    const double C32274 = C32247 + C32248;
    const double C32266 = C32231 + C32232;
    const double C5471 = C5456 + C5457;
    const double C5463 = C5440 + C5441;
    const double C16783 = C16768 + C16769;
    const double C16775 = C16752 + C16753;
    const double C22288 = C22268 + C22269;
    const double C4813 = C4776 + C4777;
    const double C5113 = C5108 + C5109;
    const double C16125 = C16088 + C16089;
    const double C16425 = C16420 + C16421;
    const double C22009 = C21996 + C21997;
    const double C4825 = C4800 + C4801;
    const double C4821 = C4792 + C4793;
    const double C16137 = C16112 + C16113;
    const double C16133 = C16104 + C16105;
    const double C21750 = C21725 + C21726;
    const double C10689 = C10652 + C10653;
    const double C10973 = C10968 + C10969;
    const double C26815 = C26812 + C26813;
    const double C32264 = C32227 + C32228;
    const double C32548 = C32543 + C32544;
    const double C10701 = C10676 + C10677;
    const double C10697 = C10668 + C10669;
    const double C26513 = C26492 + C26493;
    const double C32276 = C32251 + C32252;
    const double C32272 = C32243 + C32244;
    const double C5473 = C5460 + C5461;
    const double C5469 = C5452 + C5453;
    const double C16785 = C16772 + C16773;
    const double C16781 = C16764 + C16765;
    const double C22289 = C22270 + C22271;
    const double C47359 = C47352 - C47325;
    const double C27403 = C22675 + C22676;
    const double C27399 = C22676 + C22675;
    const double C29253 = C24144 + C24145;
    const double C29252 = C24145 + C24144;
    const double C44438 = C44432 * C48286;
    const double C47376 = C47374 + C47351;
    const double C6062 = C6054 + C6055;
    const double C17358 = C17350 + C17351;
    const double C21755 = C21735 + C21736;
    const double C7006 = C6998 + C6999;
    const double C18286 = C18278 + C18279;
    const double C26514 = C26498 + C26499;
    const double C6268 = C6260 + C6261;
    const double C17564 = C17556 + C17557;
    const double C22294 = C22280 + C22281;
    const double C12734 = C12726 + C12727;
    const double C34301 = C34293 + C34294;
    const double C43142 = C43137 + C43138;
    const double C47375 = C47329 - C47373;
    const double C47411 = C47379 - C47396;
    const double C7008 = C7002 + C7003;
    const double C18288 = C18282 + C18283;
    const double C26515 = C26500 + C26501;
    const double C47436 = C47429 - C47399;
    const double C47587 = C47585 - C47568;
    const double C47614 = C47612 - C47595;
    const double C28779 = C23754 + C23755;
    const double C28778 = C23755 + C23754;
    const double C306 =
        2 * ((-((C47266 + C47293 * C47490) * ce) / C47106) / C47079 -
             (ae * (C47290 * C47490 + C47265)) / C47239 + C47238 * C47497) -
        (ae * (C47367 * C47490 + C47310)) / C47239 -
        ((C47311 + C47368 * C47490) * ce) / C47239 +
        C47238 *
            (C47497 - (ae * (C47355 * C47490 + C47301)) / C47239 -
             ((C47302 + C47358 * C47490) * ce) / C47239 +
             C47238 *
                 ((-((C47293 + C47342 * C47490) * ce) / C47106) / C47079 -
                  (ae * (C47339 * C47490 + C47290)) / C47239 +
                  C47238 * ((-(C47431 * C47490) / C47106) / C47079 - C47383)));
    const double C1050 =
        (((-2 * C47469 * C47265) / C47106 -
          (C47469 * (C47290 * C47490 + C47265)) / C47106) *
         ae) /
            C47079 -
        ((2 * C47469 * C47266 + C47469 * (C47266 + C47293 * C47490)) * ce) /
            C47239 +
        C47238 * ((-2 * C47473) / C47239 + C47469 * C47497);
    const double C1052 =
        3 * ((-(C47300 * C47490) / C47106) / C47079 - C47270 / C47239) +
        C47469 * ((-2 * C47473) / C47239 + C47469 * C47497);
    const double C1196 =
        (-(C47518 * (C47266 + C47293 * C47490) * ce) / C47106) / C47079 -
        (ae * C47518 * (C47290 * C47490 + C47265)) / C47239 +
        C47238 * C47518 * C47497;
    const double C1198 = (-(C47300 * C47490) / C47106) / C47079 -
                         C47270 / C47239 + C47497 * C47539;
    const double C1568 = C47518 * ((-2 * C47473) / C47239 + C47469 * C47497);
    const double C459 =
        2 * ((-((C47266 + C47293 * C47539) * ce) / C47106) / C47079 -
             (ae * (C47290 * C47539 + C47265)) / C47239 + C47238 * C47546) -
        (ae * (C47367 * C47539 + C47310)) / C47239 -
        ((C47311 + C47368 * C47539) * ce) / C47239 +
        C47238 *
            (C47546 - (ae * (C47355 * C47539 + C47301)) / C47239 -
             ((C47302 + C47358 * C47539) * ce) / C47239 +
             C47238 *
                 ((-((C47293 + C47342 * C47539) * ce) / C47106) / C47079 -
                  (ae * (C47339 * C47539 + C47290)) / C47239 +
                  C47238 * ((-(C47431 * C47539) / C47106) / C47079 - C47383)));
    const double C1880 =
        (((-2 * C47518 * C47265) / C47106 -
          (C47518 * (C47290 * C47539 + C47265)) / C47106) *
         ae) /
            C47079 -
        ((2 * C47518 * C47266 + C47518 * (C47266 + C47293 * C47539)) * ce) /
            C47239 +
        C47238 * ((-2 * C47522) / C47239 + C47518 * C47546);
    const double C1882 =
        3 * ((-(C47300 * C47539) / C47106) / C47079 - C47270 / C47239) +
        C47518 * ((-2 * C47522) / C47239 + C47518 * C47546);
    const double C47459 = C47456 + C47428;
    const double C47458 = C47404 - C47455;
    const double C47514 = C47238 * C47512;
    const double C47656 = C47469 * C47512;
    const double C47660 = C47518 * C47512;
    const double C1049 =
        (-2 * C47473) / C47239 + C47469 * C47497 +
        (((-2 * C47469 * C47301) / C47106 -
          (C47469 * (C47355 * C47490 + C47301)) / C47106) *
         ae) /
            C47079 -
        ((2 * C47469 * C47302 + C47469 * (C47302 + C47358 * C47490)) * ce) /
            C47239 +
        C47238 * ((((-2 * C47476) / C47106 - (C47469 * C47503) / C47106) * ae) /
                      C47079 -
                  ((2 * C47475 + C47469 * C47502) * ce) / C47239 +
                  C47238 * ((-2 * C47477) / C47239 + C47469 * C47512));
    const double C1053 =
        (((-3 * (C47290 * C47490 + C47265)) / C47106 +
          C47469 * ((-2 * C47476) / C47106 - (C47469 * C47503) / C47106)) *
         ae) /
            C47079 -
        ((3 * (C47266 + C47293 * C47490) +
          C47469 * (2 * C47475 + C47469 * C47502)) *
         ce) /
            C47239 +
        C47238 *
            (3 * C47497 + C47469 * ((-2 * C47477) / C47239 + C47469 * C47512));
    const double C1054 =
        3 * C47497 + C47469 * ((-2 * C47477) / C47239 + C47469 * C47512) +
        (((-3 * (C47355 * C47490 + C47301)) / C47106 +
          C47469 * ((-2 * C47567) / C47106 -
                    (C47469 * (C47432 * C47490 + C47355)) / C47106)) *
         ae) /
            C47079 -
        ((3 * (C47302 + C47358 * C47490) +
          C47469 * (2 * C47569 + C47469 * (C47358 + C47435 * C47490))) *
         ce) /
            C47239 +
        C47238 *
            ((((-3 * C47503) / C47106 +
               C47469 * ((-2 * C47571) / C47106 -
                         (C47469 * (C47415 * C47490 + C47339)) / C47106)) *
              ae) /
                 C47079 -
             ((3 * C47502 +
               C47469 * (2 * C47570 + C47469 * (C47342 + C47418 * C47490))) *
              ce) /
                 C47239 +
             C47238 *
                 (3 * C47512 +
                  C47469 *
                      ((-2 * C47572) / C47239 +
                       C47469 * ((-((C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47490) /
                                  C47106) /
                                     C47079 -
                                 C47431 / C47239))));
    const double C1195 =
        C47518 * C47497 - (ae * C47518 * (C47355 * C47490 + C47301)) / C47239 -
        (C47518 * (C47302 + C47358 * C47490) * ce) / C47239 +
        C47238 * ((-(C47518 * C47502 * ce) / C47106) / C47079 -
                  (ae * C47518 * C47503) / C47239 + C47238 * C47518 * C47512);
    const double C1199 =
        (-((C47266 + C47293 * C47490 + C47502 * C47539) * ce) / C47106) /
            C47079 -
        (ae * (C47503 * C47539 + C47290 * C47490 + C47265)) / C47239 +
        C47238 * (C47497 + C47512 * C47539);
    const double C1200 =
        C47497 + C47512 * C47539 -
        (ae *
         ((C47432 * C47490 + C47355) * C47539 + C47355 * C47490 + C47301)) /
            C47239 -
        ((C47302 + C47358 * C47490 + (C47358 + C47435 * C47490) * C47539) *
         ce) /
            C47239 +
        C47238 *
            ((-((C47502 + (C47342 + C47418 * C47490) * C47539) * ce) / C47106) /
                 C47079 -
             (ae * ((C47415 * C47490 + C47339) * C47539 + C47503)) / C47239 +
             C47238 *
                 (C47512 +
                  ((-((C47388 * C47389 + C47246 * bs[8] * std::pow(C47236, 8)) *
                      C47247 * C47490) /
                    C47106) /
                       C47079 -
                   C47431 / C47239) *
                      C47539));
    const double C6408 =
        (C47518 *
         ((-3 * C47503) / C47106 +
          C47469 * ((-2 * C47571) / C47106 -
                    (C47469 * (C47415 * C47490 + C47339)) / C47106)) *
         ae) /
            C47079 -
        (C47518 *
         (3 * C47502 +
          C47469 * (2 * C47570 + C47469 * (C47342 + C47418 * C47490))) *
         ce) /
            C47239 +
        C47238 * C47518 *
            (3 * C47512 +
             C47469 * ((-2 * C47572) / C47239 +
                       C47469 * ((-((C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47490) /
                                  C47106) /
                                     C47079 -
                                 C47431 / C47239)));
    const double C7275 =
        2 * C47518 * C47497 + C47518 * (C47497 + C47512 * C47539);
    const double C47563 = C47238 * C47561;
    const double C47678 = C47518 * C47561;
    const double C1879 =
        (-2 * C47522) / C47239 + C47518 * C47546 +
        (((-2 * C47518 * C47301) / C47106 -
          (C47518 * (C47355 * C47539 + C47301)) / C47106) *
         ae) /
            C47079 -
        ((2 * C47518 * C47302 + C47518 * (C47302 + C47358 * C47539)) * ce) /
            C47239 +
        C47238 * ((((-2 * C47525) / C47106 - (C47518 * C47552) / C47106) * ae) /
                      C47079 -
                  ((2 * C47524 + C47518 * C47551) * ce) / C47239 +
                  C47238 * ((-2 * C47526) / C47239 + C47518 * C47561));
    const double C1883 =
        (((-3 * (C47290 * C47539 + C47265)) / C47106 +
          C47518 * ((-2 * C47525) / C47106 - (C47518 * C47552) / C47106)) *
         ae) /
            C47079 -
        ((3 * (C47266 + C47293 * C47539) +
          C47518 * (2 * C47524 + C47518 * C47551)) *
         ce) /
            C47239 +
        C47238 *
            (3 * C47546 + C47518 * ((-2 * C47526) / C47239 + C47518 * C47561));
    const double C1884 =
        3 * C47546 + C47518 * ((-2 * C47526) / C47239 + C47518 * C47561) +
        (((-3 * (C47355 * C47539 + C47301)) / C47106 +
          C47518 * ((-2 * C47594) / C47106 -
                    (C47518 * (C47432 * C47539 + C47355)) / C47106)) *
         ae) /
            C47079 -
        ((3 * (C47302 + C47358 * C47539) +
          C47518 * (2 * C47596 + C47518 * (C47358 + C47435 * C47539))) *
         ce) /
            C47239 +
        C47238 *
            ((((-3 * C47552) / C47106 +
               C47518 * ((-2 * C47598) / C47106 -
                         (C47518 * (C47415 * C47539 + C47339)) / C47106)) *
              ae) /
                 C47079 -
             ((3 * C47551 +
               C47518 * (2 * C47597 + C47518 * (C47342 + C47418 * C47539))) *
              ce) /
                 C47239 +
             C47238 *
                 (3 * C47561 +
                  C47518 *
                      ((-2 * C47599) / C47239 +
                       C47518 * ((-((C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47539) /
                                  C47106) /
                                     C47079 -
                                 C47431 / C47239))));
    const double C47675 = C47674 - C47568;
    const double C1025 =
        (C48437 + 2 * C48140) / C47112 - (C48444 * C48136) / C47106;
    const double C1026 =
        (C48425 + 2 * C48147 + C48444) / C47112 - (C48440 * C48136) / C47106;
    const double C1027 = (C48398 + C48144 / C47106 + C48440) / C47112 -
                         (C48430 * C48136) / C47106;
    const double C1856 =
        (C48438 + 2 * C48180) / C47112 - (C48445 * C48176) / C47106;
    const double C1857 =
        (C48427 + 2 * C48187 + C48445) / C47112 - (C48442 * C48176) / C47106;
    const double C1858 = (C48401 + C48184 / C47106 + C48442) / C47112 -
                         (C48433 * C48176) / C47106;
    const double C22794 = C22523 * C47151;
    const double C22792 = C21753 * C47151;
    const double C22786 = C21745 * C47151;
    const double C22782 = C21739 * C47151;
    const double C22964 = C22671 * C47151;
    const double C22962 = C22292 * C47151;
    const double C22958 = C22286 * C47151;
    const double C23526 = C22669 * C47151;
    const double C23520 = C22667 * C47151;
    const double C27730 = C26502 * C47151;
    const double C28494 = C23751 * C47151;
    const double C28490 = C26510 * C47151;
    const double C28638 = C28282 * C47151;
    const double C44694 = C28287 * C47151;
    const double C47154 = C47151 / C47112;
    const double C47153 = C47104 * C47151;
    const double C21776 = C21775 - C21765;
    const double C27015 = C22296 - C27013;
    const double C27014 = C27012 - C22296;
    const double C43141 = C43132 - C26522;
    const double C23987 = C23976 - C23985;
    const double C23986 = C23984 - C23974;
    const double C24594 = C24140 - C24589;
    const double C29823 = C29822 - C24140;
    const double C29259 = C24136 - C29247;
    const double C29258 = C29246 - C24136;
    const double C45150 = C45148 - C29248;
    const double C45910 = C30289 - C45905;
    const double C22012 = C22008 * C568;
    const double C23860 = C22008 * C2358;
    const double C21767 = C21749 * C267;
    const double C22428 = C21749 * C961;
    const double C24272 = C21749 * C47167;
    const double C26816 = C26814 * C568;
    const double C29961 = C26814 * C2358;
    const double C26526 = C26512 * C267;
    const double C28030 = C26512 * C961;
    const double C30635 = C26512 * C47167;
    const double C22300 = C22288 * C267;
    const double C24435 = C22288 * C47167;
    const double C25490 = C22288 * C961;
    const double C22013 = C22009 * C48402;
    const double C23861 = C22009 * C48402;
    const double C21768 = C21750 * C48392;
    const double C22003 = C21750 * C561;
    const double C22429 = C21750 * C48392;
    const double C23867 = C21750 * C48423;
    const double C24273 = C21750 * C2723;
    const double C26817 = C26815 * C48402;
    const double C29962 = C26815 * C48402;
    const double C26527 = C26513 * C48392;
    const double C28031 = C26513 * C48392;
    const double C30636 = C26513 * C2723;
    const double C43351 = C26513 * C561;
    const double C45658 = C26513 * C48423;
    const double C22301 = C22289 * C48392;
    const double C24436 = C22289 * C2723;
    const double C25491 = C22289 * C48392;
    const double C26665 = C22289 * C561;
    const double C28915 = C22289 * C48423;
    const double C47372 = C47359 + C47369;
    const double C43789 = C27399 * C48286;
    const double C29261 = C29253 - C24146;
    const double C29260 = C24146 - C29252;
    const double C138 = (4 * (2 * C47272 + C47238 * C47311 + C47292 * ae) +
                         C47238 * (3 * C47311 + C47238 * C47376 + C47357 * ae) +
                         (3 * C47292 + C47238 * C47357) * ae) /
                        C47079;
    const double C286 =
        (C47469 * (3 * C47311 + C47238 * C47376 + C47357 * ae)) / C47079;
    const double C294 =
        (2 * C47272 + C47238 * C47311 + C47292 * ae + C47376 * C47490) / C47079;
    const double C439 =
        (C47518 * (3 * C47311 + C47238 * C47376 + C47357 * ae)) / C47079;
    const double C447 =
        (2 * C47272 + C47238 * C47311 + C47292 * ae + C47376 * C47539) / C47079;
    const double C834 = (C47518 * C47469 * C47376) / C47079;
    const double C21773 = C21755 * C267;
    const double C22434 = C21755 * C961;
    const double C24278 = C21755 * C47167;
    const double C26528 = C26514 * C267;
    const double C28036 = C26514 * C961;
    const double C29618 = C26514 * C47167;
    const double C22306 = C22294 * C267;
    const double C24441 = C22294 * C47167;
    const double C25496 = C22294 * C961;
    const double C43145 = C43142 * C267;
    const double C44249 = C43142 * C961;
    const double C46174 = C43142 * C47167;
    const double C47377 = C47375 - C47356;
    const double C47420 = C47411 - C47397;
    const double C26529 = C26515 * C48392;
    const double C28037 = C26515 * C48392;
    const double C29619 = C26515 * C2723;
    const double C47454 = C47436 + C47451;
    const double C47589 = C47587 - C47579;
    const double C47616 = C47614 - C47606;
    const double C44805 = C28778 * C48286;
    const double C4799 = C48385 * C306;
    const double C16111 = C48385 * C306;
    const double C22007 = C48030 * C306;
    const double C5717 = C48385 * C1050;
    const double C6061 = C4601 * C1050;
    const double C17021 = C48385 * C1050;
    const double C17357 = C15913 * C1050;
    const double C21734 = C48030 * C1050;
    const double C5721 = C4601 * C1052;
    const double C17025 = C15913 * C1052;
    const double C22516 = C48030 * C1052;
    const double C5903 = C48385 * C1196;
    const double C6267 = C4601 * C1196;
    const double C17199 = C48385 * C1196;
    const double C17563 = C15913 * C1196;
    const double C22279 = C48030 * C1196;
    const double C5907 = C4601 * C1198;
    const double C17203 = C15913 * C1198;
    const double C22657 = C48030 * C1198;
    const double C6413 = C4601 * C1568;
    const double C17701 = C15913 * C1568;
    const double C22661 = C48030 * C1568;
    const double C10675 = C48385 * C459;
    const double C32250 = C48385 * C459;
    const double C43355 = C48030 * C459;
    const double C12385 = C48385 * C1880;
    const double C12733 = C4601 * C1880;
    const double C28643 = C48030 * C1880;
    const double C33952 = C48385 * C1880;
    const double C34300 = C15913 * C1880;
    const double C12389 = C4601 * C1882;
    const double C28279 = C48030 * C1882;
    const double C33956 = C15913 * C1882;
    const double C47462 = C47238 * C47459;
    const double C1308 =
        (2 * C47469 * C47376 + C47469 * (C47376 + C47459 * C47490)) / C47079;
    const double C1458 = (C47518 * (C47376 + C47459 * C47490)) / C47079;
    const double C2032 = (C47469 * C47376 + C47469 * C47459 * C47539) / C47079;
    const double C2138 =
        (2 * C47518 * C47376 + C47518 * (C47376 + C47459 * C47539)) / C47079;
    const double C47461 = C47458 - C47433;
    const double C47516 = C47515 + C47514;
    const double C47658 = C47657 + C47656;
    const double C1460 =
        2 * ((-(C47518 * C47502 * ce) / C47106) / C47079 -
             (ae * C47518 * C47503) / C47239 + C47238 * C47660) -
        (ae * C47518 * (C47449 * C47490 + C47367)) / C47239 -
        (C47518 * (C47368 + C47450 * C47490) * ce) / C47239 +
        C47238 *
            (C47660 - (ae * C47518 * (C47432 * C47490 + C47355)) / C47239 -
             (C47518 * (C47358 + C47435 * C47490) * ce) / C47239 +
             C47238 * ((-(C47518 * (C47342 + C47418 * C47490) * ce) / C47106) /
                           C47079 -
                       (ae * C47518 * (C47415 * C47490 + C47339)) / C47239 +
                       C47238 * C47518 *
                           ((-((C47388 * C47389 +
                                C47246 * bs[8] * std::pow(C47236, 8)) *
                               C47247 * C47490) /
                             C47106) /
                                C47079 -
                            C47431 / C47239)));
    const double C7276 =
        (((-2 * C47518 * C47503) / C47106 -
          (C47518 * ((C47415 * C47490 + C47339) * C47539 + C47503)) / C47106) *
         ae) /
            C47079 -
        ((2 * C47518 * C47502 +
          C47518 * (C47502 + (C47342 + C47418 * C47490) * C47539)) *
         ce) /
            C47239 +
        C47238 *
            (2 * C47660 +
             C47518 *
                 (C47512 +
                  ((-((C47388 * C47389 + C47246 * bs[8] * std::pow(C47236, 8)) *
                      C47247 * C47490) /
                    C47106) /
                       C47079 -
                   C47431 / C47239) *
                      C47539));
    const double C23372 =
        3 * (C47497 + C47512 * C47539) +
        C47518 *
            (2 * C47660 +
             C47518 *
                 (C47512 +
                  ((-((C47388 * C47389 + C47246 * bs[8] * std::pow(C47236, 8)) *
                      C47247 * C47490) /
                    C47106) /
                       C47079 -
                   C47431 / C47239) *
                      C47539));
    const double C6059 = C48385 * C1049;
    const double C17355 = C48385 * C1049;
    const double C21738 = C48030 * C1049;
    const double C5719 = C48385 * C1053;
    const double C17023 = C48385 * C1053;
    const double C22799 = C48030 * C1053;
    const double C6265 = C48385 * C1195;
    const double C17561 = C48385 * C1195;
    const double C22283 = C48030 * C1195;
    const double C5905 = C48385 * C1199;
    const double C17201 = C48385 * C1199;
    const double C23531 = C48030 * C1199;
    const double C23741 = C48030 * C7275;
    const double C47565 = C47564 + C47563;
    const double C47680 = C47679 + C47678;
    const double C12731 = C48385 * C1879;
    const double C34298 = C48385 * C1879;
    const double C43140 = C48030 * C1879;
    const double C12387 = C48385 * C1883;
    const double C33954 = C48385 * C1883;
    const double C44699 = C48030 * C1883;
    const double C2034 =
        2 * ((-((C47475 + C47570 * C47539) * ce) / C47106) / C47079 -
             (ae * (C47571 * C47539 + C47476)) / C47239 + C47238 * C47675) -
        (ae * (C47469 * C47449 * C47539 + C47469 * C47367)) / C47239 -
        ((C47469 * C47368 + C47469 * C47450 * C47539) * ce) / C47239 +
        C47238 *
            (C47675 - (ae * (C47469 * C47432 * C47539 + C47567)) / C47239 -
             ((C47569 + C47469 * C47435 * C47539) * ce) / C47239 +
             C47238 * ((-((C47570 + C47469 * C47418 * C47539) * ce) / C47106) /
                           C47079 -
                       (ae * (C47469 * C47415 * C47539 + C47571)) / C47239 +
                       C47238 * ((-(C47469 *
                                    (C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47539) /
                                  C47106) /
                                     C47079 -
                                 C47572 / C47239)));
    const double C2249 =
        (((-2 * C47518 * C47476) / C47106 -
          (C47518 * (C47571 * C47539 + C47476)) / C47106) *
         ae) /
            C47079 -
        ((2 * C47518 * C47475 + C47518 * (C47475 + C47570 * C47539)) * ce) /
            C47239 +
        C47238 * ((-2 * C47624) / C47239 + C47518 * C47675);
    const double C2250 =
        (-2 * C47624) / C47239 + C47518 * C47675 +
        (((-2 * C47518 * C47567) / C47106 -
          (C47518 * (C47469 * C47432 * C47539 + C47567)) / C47106) *
         ae) /
            C47079 -
        ((2 * C47518 * C47569 + C47518 * (C47569 + C47469 * C47435 * C47539)) *
         ce) /
            C47239 +
        C47238 *
            ((((-2 * C47627) / C47106 -
               (C47518 * (C47469 * C47415 * C47539 + C47571)) / C47106) *
              ae) /
                 C47079 -
             ((2 * C47626 + C47518 * (C47570 + C47469 * C47418 * C47539)) *
              ce) /
                 C47239 +
             C47238 * ((-2 * C47628) / C47239 +
                       C47518 * ((-(C47469 *
                                    (C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47539) /
                                  C47106) /
                                     C47079 -
                                 C47572 / C47239)));
    const double C6801 =
        3 * ((-(C47477 * C47539) / C47106) / C47079 - C47473 / C47239) +
        C47518 * ((-2 * C47624) / C47239 + C47518 * C47675);
    const double C6802 =
        (((-3 * (C47571 * C47539 + C47476)) / C47106 +
          C47518 * ((-2 * C47627) / C47106 -
                    (C47518 * (C47469 * C47415 * C47539 + C47571)) / C47106)) *
         ae) /
            C47079 -
        ((3 * (C47475 + C47570 * C47539) +
          C47518 *
              (2 * C47626 + C47518 * (C47570 + C47469 * C47418 * C47539))) *
         ce) /
            C47239 +
        C47238 *
            (3 * C47675 +
             C47518 * ((-2 * C47628) / C47239 +
                       C47518 * ((-(C47469 *
                                    (C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47539) /
                                  C47106) /
                                     C47079 -
                                 C47572 / C47239)));
    const double C28268 =
        4 * ((-2 * C47624) / C47239 + C47518 * C47675) +
        C47518 *
            (3 * C47675 +
             C47518 * ((-2 * C47628) / C47239 +
                       C47518 * ((-(C47469 *
                                    (C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47539) /
                                  C47106) /
                                     C47079 -
                                 C47572 / C47239)));
    const double C22801 = C22791 + C22792;
    const double C22800 = C22786 + C22787;
    const double C22970 = C22961 + C22962;
    const double C27736 = C22962 + C22961;
    const double C27735 = C22957 + C22958;
    const double C27734 = C22958 + C22957;
    const double C28493 = C23520 + C23521;
    const double C28492 = C23521 + C23520;
    const double C44590 = C28490 + C28489;
    const double C44693 = C28639 + C28638;
    const double C47157 = C47154 - C47149;
    const double C960 = C47154 + (C47140 * ce) / C47106;
    const double C47156 = C47153 + C48352;
    const double C21777 = C21776 - C21766;
    const double C27017 = C27015 + C22299;
    const double C27016 = C27014 - C22299;
    const double C43144 = C43141 - C26525;
    const double C23988 = C23986 - C23975;
    const double C29263 = C29259 + C24139;
    const double C29262 = C29258 - C24139;
    const double C45151 = C45150 - C29251;
    const double C29265 = C29261 - C24147;
    const double C29264 = C29260 + C24147;
    const double C5103 = C48385 * C286;
    const double C16415 = C48385 * C286;
    const double C4795 = C48385 * C294;
    const double C16107 = C48385 * C294;
    const double C22005 = C48030 * C294;
    const double C10963 = C48385 * C439;
    const double C32538 = C48385 * C439;
    const double C10671 = C48385 * C447;
    const double C32246 = C48385 * C447;
    const double C43353 = C48030 * C447;
    const double C5455 = C48385 * C834;
    const double C16767 = C48385 * C834;
    const double C26667 = C48030 * C834;
    const double C147 =
        4 * (2 * C47309 - (ae * C47310) / C47239 - (C47311 * ce) / C47239 +
             C47238 * C47372) +
        (((-3 * C47310) / C47106 + C47238 * C47377 - (C47357 * ce) / C47106) *
         ae) /
            C47079 -
        ((3 * C47311 + C47238 * C47376 + C47357 * ae) * ce) / C47239 +
        C47238 *
            (3 * C47372 + (C47377 * ae) / C47079 - (C47376 * ce) / C47239 +
             C47238 *
                 (2 * C47366 - (ae * C47367) / C47239 - (C47368 * ce) / C47239 +
                  C47238 * ((-(ae * C47355) / C47106) / C47079 -
                            C47354 / C47239 - (C47358 * ce) / C47239 +
                            C47238 * ((-(C47342 * ce) / C47106) / C47079 -
                                      (ae * C47339) / C47239 -
                                      (C47238 *
                                       (C47319 * C47320 +
                                        C47246 * bs[7] * std::pow(C47242, 7)) *
                                       C47247) /
                                          C47239))));
    const double C302 =
        3 * ((-(ae * C47469 * C47301) / C47106) / C47079 - C47473 / C47239 -
             (C47469 * C47302 * ce) / C47239 + C47238 * C47487) +
        (C47469 * C47377 * ae) / C47079 - (C47469 * C47376 * ce) / C47239 +
        C47238 *
            (2 * C47487 - (ae * C47469 * C47367) / C47239 -
             (C47469 * C47368 * ce) / C47239 +
             C47238 * ((-(ae * C47469 * C47355) / C47106) / C47079 -
                       C47477 / C47239 - (C47469 * C47358 * ce) / C47239 +
                       C47238 * ((-(C47469 * C47342 * ce) / C47106) / C47079 -
                                 (ae * C47469 * C47339) / C47239 -
                                 (C47238 * C47469 * C47431) / C47239)));
    const double C455 =
        3 * ((-(ae * C47518 * C47301) / C47106) / C47079 - C47522 / C47239 -
             (C47518 * C47302 * ce) / C47239 + C47238 * C47536) +
        (C47518 * C47377 * ae) / C47079 - (C47518 * C47376 * ce) / C47239 +
        C47238 *
            (2 * C47536 - (ae * C47518 * C47367) / C47239 -
             (C47518 * C47368 * ce) / C47239 +
             C47238 * ((-(ae * C47518 * C47355) / C47106) / C47079 -
                       C47526 / C47239 - (C47518 * C47358 * ce) / C47239 +
                       C47238 * ((-(C47518 * C47342 * ce) / C47106) / C47079 -
                                 (ae * C47518 * C47339) / C47239 -
                                 (C47238 * C47518 * C47431) / C47239)));
    const double C139 =
        4 * ((-2 * C47271) / C47106 - (C47238 * C47310) / C47106 -
             (C47292 * ce) / C47106) +
        C47238 * ((-3 * C47310) / C47106 + C47238 * C47377 -
                  (C47357 * ce) / C47106) -
        ((3 * C47292 + C47238 * C47357) * ce) / C47106;
    const double C287 = C47469 * ((-3 * C47310) / C47106 + C47238 * C47377 -
                                  (C47357 * ce) / C47106);
    const double C295 = (-2 * C47271) / C47106 - (C47238 * C47310) / C47106 -
                        (C47292 * ce) / C47106 + C47377 * C47490;
    const double C440 = C47518 * ((-3 * C47310) / C47106 + C47238 * C47377 -
                                  (C47357 * ce) / C47106);
    const double C448 = (-2 * C47271) / C47106 - (C47238 * C47310) / C47106 -
                        (C47292 * ce) / C47106 + C47377 * C47539;
    const double C835 = C47518 * C47469 * C47377;
    const double C47457 = C47238 * C47454;
    const double C47592 = C47589 + C47591;
    const double C47619 = C47616 + C47618;
    const double C5729 = C5716 + C5717;
    const double C6065 = C6060 + C6061;
    const double C17033 = C17020 + C17021;
    const double C17361 = C17356 + C17357;
    const double C21754 = C21733 + C21734;
    const double C5731 = C5720 + C5721;
    const double C17035 = C17024 + C17025;
    const double C22524 = C22515 + C22516;
    const double C5919 = C5902 + C5903;
    const double C6271 = C6266 + C6267;
    const double C17215 = C17198 + C17199;
    const double C17567 = C17562 + C17563;
    const double C22293 = C22278 + C22279;
    const double C5921 = C5906 + C5907;
    const double C17217 = C17202 + C17203;
    const double C22670 = C22656 + C22657;
    const double C6419 = C6412 + C6413;
    const double C17707 = C17700 + C17701;
    const double C22672 = C22660 + C22661;
    const double C12397 = C12384 + C12385;
    const double C12737 = C12732 + C12733;
    const double C28645 = C28642 + C28643;
    const double C33964 = C33951 + C33952;
    const double C34304 = C34299 + C34300;
    const double C12399 = C12388 + C12389;
    const double C28286 = C28278 + C28279;
    const double C33966 = C33955 + C33956;
    const double C47464 = C47394 + C47462;
    const double C47463 = C47238 * C47461;
    const double C842 =
        3 * ((-(ae * C47518 * C47567) / C47106) / C47079 - C47624 / C47239 -
             (C47518 * C47569 * ce) / C47239 + C47238 * C47638) +
        (C47518 * C47469 * C47461 * ae) / C47079 -
        (C47518 * C47469 * C47459 * ce) / C47239 +
        C47238 *
            (2 * C47638 - (ae * C47518 * C47469 * C47449) / C47239 -
             (C47518 * C47469 * C47450 * ce) / C47239 +
             C47238 *
                 ((-(ae * C47518 * C47469 * C47432) / C47106) / C47079 -
                  C47628 / C47239 - (C47518 * C47469 * C47435 * ce) / C47239 +
                  C47238 *
                      ((-(C47518 * C47469 * C47418 * ce) / C47106) / C47079 -
                       (ae * C47518 * C47469 * C47415) / C47239 -
                       (C47238 * C47518 * C47469 *
                        (C47388 * C47389 +
                         C47246 * bs[8] * std::pow(C47236, 8)) *
                        C47247) /
                           C47239)));
    const double C1309 =
        2 * C47469 * C47377 + C47469 * (C47377 + C47461 * C47490);
    const double C1459 = C47518 * (C47377 + C47461 * C47490);
    const double C2033 = C47469 * C47377 + C47469 * C47461 * C47539;
    const double C2139 =
        2 * C47518 * C47377 + C47518 * (C47377 + C47461 * C47539);
    const double C307 =
        3 * (C47497 - (ae * (C47355 * C47490 + C47301)) / C47239 -
             ((C47302 + C47358 * C47490) * ce) / C47239 + C47238 * C47516) +
        ((C47377 + C47461 * C47490) * ae) / C47079 -
        ((C47376 + C47459 * C47490) * ce) / C47239 +
        C47238 *
            (2 * C47516 - (ae * (C47449 * C47490 + C47367)) / C47239 -
             ((C47368 + C47450 * C47490) * ce) / C47239 +
             C47238 *
                 (C47512 - (ae * (C47432 * C47490 + C47355)) / C47239 -
                  ((C47358 + C47435 * C47490) * ce) / C47239 +
                  C47238 *
                      ((-((C47342 + C47418 * C47490) * ce) / C47106) / C47079 -
                       (ae * (C47415 * C47490 + C47339)) / C47239 +
                       C47238 * ((-((C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47490) /
                                  C47106) /
                                     C47079 -
                                 C47431 / C47239))));
    const double C1310 =
        2 * ((((-2 * C47476) / C47106 - (C47469 * C47503) / C47106) * ae) /
                 C47079 -
             ((2 * C47475 + C47469 * C47502) * ce) / C47239 + C47238 * C47658) +
        (((-2 * C47469 * C47367) / C47106 -
          (C47469 * (C47449 * C47490 + C47367)) / C47106) *
         ae) /
            C47079 -
        ((2 * C47469 * C47368 + C47469 * (C47368 + C47450 * C47490)) * ce) /
            C47239 +
        C47238 *
            (C47658 +
             (((-2 * C47567) / C47106 -
               (C47469 * (C47432 * C47490 + C47355)) / C47106) *
              ae) /
                 C47079 -
             ((2 * C47569 + C47469 * (C47358 + C47435 * C47490)) * ce) /
                 C47239 +
             C47238 *
                 ((((-2 * C47571) / C47106 -
                    (C47469 * (C47415 * C47490 + C47339)) / C47106) *
                   ae) /
                      C47079 -
                  ((2 * C47570 + C47469 * (C47342 + C47418 * C47490)) * ce) /
                      C47239 +
                  C47238 *
                      ((-2 * C47572) / C47239 +
                       C47469 * ((-((C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47490) /
                                  C47106) /
                                     C47079 -
                                 C47431 / C47239))));
    const double C1569 =
        (C47518 * ((-2 * C47476) / C47106 - (C47469 * C47503) / C47106) * ae) /
            C47079 -
        (C47518 * (2 * C47475 + C47469 * C47502) * ce) / C47239 +
        C47238 * C47518 * C47658;
    const double C1570 =
        C47518 * C47658 +
        (C47518 *
         ((-2 * C47567) / C47106 -
          (C47469 * (C47432 * C47490 + C47355)) / C47106) *
         ae) /
            C47079 -
        (C47518 * (2 * C47569 + C47469 * (C47358 + C47435 * C47490)) * ce) /
            C47239 +
        C47238 * ((C47518 *
                   ((-2 * C47571) / C47106 -
                    (C47469 * (C47415 * C47490 + C47339)) / C47106) *
                   ae) /
                      C47079 -
                  (C47518 * (2 * C47570 + C47469 * (C47342 + C47418 * C47490)) *
                   ce) /
                      C47239 +
                  C47238 * C47518 *
                      ((-2 * C47572) / C47239 +
                       C47469 * ((-((C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47490) /
                                  C47106) /
                                     C47079 -
                                 C47431 / C47239)));
    const double C5707 = 4 * ((-2 * C47473) / C47239 + C47469 * C47497) +
                         C47469 * (3 * C47497 + C47469 * C47658);
    const double C5708 =
        ((4 * ((-2 * C47476) / C47106 - (C47469 * C47503) / C47106) +
          C47469 *
              ((-3 * C47503) / C47106 +
               C47469 * ((-2 * C47571) / C47106 -
                         (C47469 * (C47415 * C47490 + C47339)) / C47106))) *
         ae) /
            C47079 -
        ((4 * (2 * C47475 + C47469 * C47502) +
          C47469 *
              (3 * C47502 +
               C47469 * (2 * C47570 + C47469 * (C47342 + C47418 * C47490)))) *
         ce) /
            C47239 +
        C47238 * (4 * C47658 +
                  C47469 * (3 * C47512 +
                            C47469 * ((-2 * C47572) / C47239 +
                                      C47469 * ((-((C47388 * C47389 +
                                                    C47246 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47247 * C47490) /
                                                 C47106) /
                                                    C47079 -
                                                C47431 / C47239))));
    const double C5885 =
        (-2 * C47473) / C47239 + C47469 * C47497 + C47658 * C47539;
    const double C5886 =
        (((-2 * C47476) / C47106 - (C47469 * C47503) / C47106 +
          ((-2 * C47571) / C47106 -
           (C47469 * (C47415 * C47490 + C47339)) / C47106) *
              C47539) *
         ae) /
            C47079 -
        ((2 * C47475 + C47469 * C47502 +
          (2 * C47570 + C47469 * (C47342 + C47418 * C47490)) * C47539) *
         ce) /
            C47239 +
        C47238 *
            (C47658 +
             ((-2 * C47572) / C47239 +
              C47469 *
                  ((-((C47388 * C47389 + C47246 * bs[8] * std::pow(C47236, 8)) *
                      C47247 * C47490) /
                    C47106) /
                       C47079 -
                   C47431 / C47239)) *
                 C47539);
    const double C6407 = C47518 * (3 * C47497 + C47469 * C47658);
    const double C22505 =
        5 * (3 * C47497 + C47469 * C47658) +
        C47469 * (4 * C47658 +
                  C47469 * (3 * C47512 +
                            C47469 * ((-2 * C47572) / C47239 +
                                      C47469 * ((-((C47388 * C47389 +
                                                    C47246 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47247 * C47490) /
                                                 C47106) /
                                                    C47079 -
                                                C47431 / C47239))));
    const double C22644 =
        3 * C47497 + C47469 * C47658 +
        (3 * C47512 +
         C47469 *
             ((-2 * C47572) / C47239 +
              C47469 *
                  ((-((C47388 * C47389 + C47246 * bs[8] * std::pow(C47236, 8)) *
                      C47247 * C47490) /
                    C47106) /
                       C47079 -
                   C47431 / C47239))) *
            C47539;
    const double C23077 =
        C47518 *
        (4 * C47658 +
         C47469 *
             (3 * C47512 +
              C47469 * ((-2 * C47572) / C47239 +
                        C47469 * ((-((C47388 * C47389 +
                                      C47246 * bs[8] * std::pow(C47236, 8)) *
                                     C47247 * C47490) /
                                   C47106) /
                                      C47079 -
                                  C47431 / C47239))));
    const double C23738 =
        2 * C47518 * C47658 +
        C47518 *
            (C47658 +
             ((-2 * C47572) / C47239 +
              C47469 *
                  ((-((C47388 * C47389 + C47246 * bs[8] * std::pow(C47236, 8)) *
                      C47247 * C47490) /
                    C47106) /
                       C47079 -
                   C47431 / C47239)) *
                 C47539);
    const double C6064 = C6058 + C6059;
    const double C17360 = C17354 + C17355;
    const double C21756 = C21737 + C21738;
    const double C5730 = C5718 + C5719;
    const double C17034 = C17022 + C17023;
    const double C22803 = C22798 + C22799;
    const double C6270 = C6264 + C6265;
    const double C17566 = C17560 + C17561;
    const double C22295 = C22282 + C22283;
    const double C5920 = C5904 + C5905;
    const double C17216 = C17200 + C17201;
    const double C23535 = C23530 + C23531;
    const double C23748 = C23740 + C23741;
    const double C460 =
        3 * (C47546 - (ae * (C47355 * C47539 + C47301)) / C47239 -
             ((C47302 + C47358 * C47539) * ce) / C47239 + C47238 * C47565) +
        ((C47377 + C47461 * C47539) * ae) / C47079 -
        ((C47376 + C47459 * C47539) * ce) / C47239 +
        C47238 *
            (2 * C47565 - (ae * (C47449 * C47539 + C47367)) / C47239 -
             ((C47368 + C47450 * C47539) * ce) / C47239 +
             C47238 *
                 (C47561 - (ae * (C47432 * C47539 + C47355)) / C47239 -
                  ((C47358 + C47435 * C47539) * ce) / C47239 +
                  C47238 *
                      ((-((C47342 + C47418 * C47539) * ce) / C47106) / C47079 -
                       (ae * (C47415 * C47539 + C47339)) / C47239 +
                       C47238 * ((-((C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47539) /
                                  C47106) /
                                     C47079 -
                                 C47431 / C47239))));
    const double C2140 =
        2 * ((((-2 * C47525) / C47106 - (C47518 * C47552) / C47106) * ae) /
                 C47079 -
             ((2 * C47524 + C47518 * C47551) * ce) / C47239 + C47238 * C47680) +
        (((-2 * C47518 * C47367) / C47106 -
          (C47518 * (C47449 * C47539 + C47367)) / C47106) *
         ae) /
            C47079 -
        ((2 * C47518 * C47368 + C47518 * (C47368 + C47450 * C47539)) * ce) /
            C47239 +
        C47238 *
            (C47680 +
             (((-2 * C47594) / C47106 -
               (C47518 * (C47432 * C47539 + C47355)) / C47106) *
              ae) /
                 C47079 -
             ((2 * C47596 + C47518 * (C47358 + C47435 * C47539)) * ce) /
                 C47239 +
             C47238 *
                 ((((-2 * C47598) / C47106 -
                    (C47518 * (C47415 * C47539 + C47339)) / C47106) *
                   ae) /
                      C47079 -
                  ((2 * C47597 + C47518 * (C47342 + C47418 * C47539)) * ce) /
                      C47239 +
                  C47238 *
                      ((-2 * C47599) / C47239 +
                       C47518 * ((-((C47388 * C47389 +
                                     C47246 * bs[8] * std::pow(C47236, 8)) *
                                    C47247 * C47539) /
                                  C47106) /
                                     C47079 -
                                 C47431 / C47239))));
    const double C12375 = 4 * ((-2 * C47522) / C47239 + C47518 * C47546) +
                          C47518 * (3 * C47546 + C47518 * C47680);
    const double C12376 =
        ((4 * ((-2 * C47525) / C47106 - (C47518 * C47552) / C47106) +
          C47518 *
              ((-3 * C47552) / C47106 +
               C47518 * ((-2 * C47598) / C47106 -
                         (C47518 * (C47415 * C47539 + C47339)) / C47106))) *
         ae) /
            C47079 -
        ((4 * (2 * C47524 + C47518 * C47551) +
          C47518 *
              (3 * C47551 +
               C47518 * (2 * C47597 + C47518 * (C47342 + C47418 * C47539)))) *
         ce) /
            C47239 +
        C47238 * (4 * C47680 +
                  C47518 * (3 * C47561 +
                            C47518 * ((-2 * C47599) / C47239 +
                                      C47518 * ((-((C47388 * C47389 +
                                                    C47246 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47247 * C47539) /
                                                 C47106) /
                                                    C47079 -
                                                C47431 / C47239))));
    const double C44430 =
        5 * (3 * C47546 + C47518 * C47680) +
        C47518 * (4 * C47680 +
                  C47518 * (3 * C47561 +
                            C47518 * ((-2 * C47599) / C47239 +
                                      C47518 * ((-((C47388 * C47389 +
                                                    C47246 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47247 * C47539) /
                                                 C47106) /
                                                    C47079 -
                                                C47431 / C47239))));
    const double C12736 = C12730 + C12731;
    const double C34303 = C34297 + C34298;
    const double C43143 = C43139 + C43140;
    const double C12398 = C12386 + C12387;
    const double C33965 = C33953 + C33954;
    const double C44702 = C44698 + C44699;
    const double C7279 = C48385 * C2249;
    const double C18551 = C48385 * C2249;
    const double C28499 = C48030 * C2249;
    const double C28275 = C48030 * C6801;
    const double C22805 = C22790 - C22801;
    const double C22804 = C22800 - C22788;
    const double C22973 = C22960 - C22970;
    const double C27739 = C27736 - C22960;
    const double C27738 = C22956 - C27735;
    const double C27737 = C27734 - C22956;
    const double C28501 = C28493 - C23536;
    const double C28500 = C23536 - C28492;
    const double C44592 = C44590 - C28488;
    const double C44700 = C28646 - C44693;
    const double C24274 = C21751 * C47157;
    const double C24270 = C21747 * C47157;
    const double C24264 = C21741 * C47157;
    const double C24437 = C22290 * C47157;
    const double C24431 = C22284 * C47157;
    const double C29614 = C23532 * C47157;
    const double C29608 = C26504 * C47157;
    const double C30631 = C26508 * C47157;
    const double C46170 = C28644 * C47157;
    const double C119 =
        (C47157 / C47112 + ((C47104 * C47167 + C2723) * ce) / C47106) / C47112 -
        ((C47104 * (C47167 / C47112 + (0 * ce) / C47106) + C48402) * de) /
            C47106;
    const double C567 =
        C47157 / C47112 - ((C47104 * C47167 + C2723) * de) / C47106;
    const double C2357 =
        C47157 / C47112 + ((C47104 * C47167 + C2723) * ce) / C47106;
    const double C22430 = C21751 * C960;
    const double C22426 = C21747 * C960;
    const double C22420 = C21741 * C960;
    const double C25492 = C22290 * C960;
    const double C25486 = C22284 * C960;
    const double C28032 = C23532 * C960;
    const double C28026 = C26508 * C960;
    const double C28022 = C26504 * C960;
    const double C44245 = C28644 * C960;
    const double C47158 = C47156 * de;
    const double C959 = C47143 + (C47156 * ce) / C47106 + C47132;
    const double C21778 = C21777 + C21767;
    const double C27019 = C27017 - C22300;
    const double C27018 = C27016 + C22300;
    const double C43147 = C43144 + C26526;
    const double C45152 = C45151 * C48286;
    const double C45149 = C29264 * C48286;
    const double C5110 = C5102 + C5103;
    const double C16422 = C16414 + C16415;
    const double C4822 = C4794 + C4795;
    const double C16134 = C16106 + C16107;
    const double C22010 = C22004 + C22005;
    const double C10970 = C10962 + C10963;
    const double C32545 = C32537 + C32538;
    const double C10698 = C10670 + C10671;
    const double C32273 = C32245 + C32246;
    const double C43356 = C43352 + C43353;
    const double C5470 = C5454 + C5455;
    const double C16782 = C16766 + C16767;
    const double C26670 = C26666 + C26667;
    const double C5107 = C48385 * C302;
    const double C16419 = C48385 * C302;
    const double C10967 = C48385 * C455;
    const double C32542 = C48385 * C455;
    const double C5106 = C4606 * C287;
    const double C16418 = C15918 * C287;
    const double C4798 = C4606 * C295;
    const double C16110 = C15918 * C295;
    const double C22006 = C21591 * C295;
    const double C10966 = C4606 * C440;
    const double C32541 = C15918 * C440;
    const double C10674 = C4606 * C448;
    const double C32249 = C15918 * C448;
    const double C43354 = C21591 * C448;
    const double C5458 = C4606 * C835;
    const double C16770 = C15918 * C835;
    const double C26668 = C21591 * C835;
    const double C47460 = C47420 + C47457;
    const double C21772 = C21754 * C260;
    const double C22433 = C21754 * C48421;
    const double C22793 = C21754 * C48054;
    const double C23979 = C21754 * C48054;
    const double C24277 = C21754 * C48057;
    const double C22528 = C22524 * C48044;
    const double C22795 = C22524 * C48352;
    const double C23981 = C22524 * C2457;
    const double C22305 = C22293 * C260;
    const double C22963 = C22293 * C48054;
    const double C24143 = C22293 * C48054;
    const double C24440 = C22293 * C48057;
    const double C25495 = C22293 * C48421;
    const double C22678 = C22670 * C48044;
    const double C23527 = C22670 * C48352;
    const double C24149 = C22670 * C2457;
    const double C22680 = C22672 * C48044;
    const double C22965 = C22672 * C48352;
    const double C24591 = C22672 * C2457;
    const double C28647 = C28645 * C48054;
    const double C30290 = C28645 * C48054;
    const double C43136 = C28645 * C260;
    const double C44248 = C28645 * C48421;
    const double C46173 = C28645 * C48057;
    const double C28292 = C28286 * C48044;
    const double C44695 = C28286 * C48352;
    const double C45907 = C28286 * C2457;
    const double C47466 = C47464 + C47442;
    const double C47465 = C47403 + C47463;
    const double C6411 = C48385 * C1569;
    const double C17699 = C48385 * C1569;
    const double C22969 = C48030 * C1569;
    const double C22518 = C48030 * C5707;
    const double C22663 = C48030 * C5885;
    const double C23081 = C48030 * C6407;
    const double C21774 = C21756 * C48392;
    const double C22435 = C21756 * C48392;
    const double C24279 = C21756 * C2723;
    const double C22807 = C22803 * C48054;
    const double C23983 = C22803 * C48054;
    const double C22307 = C22295 * C48392;
    const double C24442 = C22295 * C2723;
    const double C25497 = C22295 * C48392;
    const double C23539 = C23535 * C48054;
    const double C24151 = C23535 * C48054;
    const double C23752 = C23748 * C48044;
    const double C44435 = C48030 * C12375;
    const double C43146 = C43143 * C48392;
    const double C44250 = C43143 * C48392;
    const double C46175 = C43143 * C2723;
    const double C44705 = C44702 * C48054;
    const double C45909 = C44702 * C48054;
    const double C7286 = C7278 + C7279;
    const double C18558 = C18550 + C18551;
    const double C28503 = C28498 + C28499;
    const double C28284 = C28274 + C28275;
    const double C22808 = C22804 - C22789;
    const double C27741 = C27738 + C22959;
    const double C27740 = C27737 - C22959;
    const double C28505 = C28501 - C23537;
    const double C28504 = C28500 + C23537;
    const double C44593 = C44592 - C28491;
    const double C22002 = C21749 * C567;
    const double C21992 = C21743 * C567;
    const double C26664 = C22288 * C567;
    const double C26808 = C26506 * C567;
    const double C43350 = C26512 * C567;
    const double C23866 = C21749 * C2357;
    const double C23858 = C21743 * C2357;
    const double C28914 = C22288 * C2357;
    const double C29959 = C26506 * C2357;
    const double C45657 = C26512 * C2357;
    const double C47159 = C47158 / C47106;
    const double C22432 = C21753 * C959;
    const double C22424 = C21745 * C959;
    const double C22418 = C21739 * C959;
    const double C25494 = C22292 * C959;
    const double C25488 = C22286 * C959;
    const double C28034 = C22667 * C959;
    const double C28028 = C26510 * C959;
    const double C28020 = C26502 * C959;
    const double C44247 = C28282 * C959;
    const double C21779 = C21778 + C21768;
    const double C27021 = C27019 - C22301;
    const double C27020 = C27018 + C22301;
    const double C43148 = C43147 + C26527;
    const double C22014 = C22010 * C568;
    const double C23868 = C22010 * C2358;
    const double C43358 = C43356 * C568;
    const double C45659 = C43356 * C2358;
    const double C26672 = C26670 * C568;
    const double C28916 = C26670 * C2358;
    const double C5112 = C5106 + C5107;
    const double C16424 = C16418 + C16419;
    const double C4824 = C4798 + C4799;
    const double C16136 = C16110 + C16111;
    const double C22011 = C22006 + C22007;
    const double C10972 = C10966 + C10967;
    const double C32547 = C32541 + C32542;
    const double C10700 = C10674 + C10675;
    const double C32275 = C32249 + C32250;
    const double C43357 = C43354 + C43355;
    const double C5472 = C5458 + C5459;
    const double C16784 = C16770 + C16771;
    const double C26671 = C26668 + C26669;
    const double C22809 = C22805 + C22793;
    const double C23989 = C23987 + C23979;
    const double C22531 = C22527 + C22528;
    const double C22976 = C22973 + C22963;
    const double C27742 = C27739 - C22963;
    const double C24595 = C24594 + C24143;
    const double C29824 = C29823 - C24143;
    const double C22683 = C22677 + C22678;
    const double C27405 = C22678 + C22677;
    const double C23079 = C22679 + C22680;
    const double C27873 = C22680 + C22679;
    const double C44703 = C44700 + C28647;
    const double C45911 = C45910 + C30290;
    const double C44433 = C28293 + C28292;
    const double C140 = (5 * (3 * C47311 + C47238 * C47376 + C47357 * ae) +
                         C47238 * (4 * C47376 + C47238 * C47466 + C47446 * ae) +
                         (4 * C47357 + C47238 * C47446) * ae) /
                        C47079;
    const double C296 =
        (3 * C47311 + C47238 * C47376 + C47357 * ae + C47466 * C47490) / C47079;
    const double C449 =
        (3 * C47311 + C47238 * C47376 + C47357 * ae + C47466 * C47539) / C47079;
    const double C570 =
        (C47469 * (4 * C47376 + C47238 * C47466 + C47446 * ae)) / C47079;
    const double C674 =
        (C47518 * (4 * C47376 + C47238 * C47466 + C47446 * ae)) / C47079;
    const double C836 = (C47518 * C47469 * C47466) / C47079;
    const double C47467 = C47465 - C47445;
    const double C6418 = C6410 + C6411;
    const double C17706 = C17698 + C17699;
    const double C22972 = C22968 + C22969;
    const double C22525 = C22517 + C22518;
    const double C22673 = C22662 + C22663;
    const double C23084 = C23080 + C23081;
    const double C44440 = C44434 + C44435;
    const double C28507 = C28503 * C48054;
    const double C29257 = C28503 * C48054;
    const double C28290 = C28284 * C48044;
    const double C44591 = C28504 * C48286;
    const double C44594 = C44593 * C48286;
    const double C47160 = C47143 - C47159;
    const double C22436 = C22424 + C22425;
    const double C31026 = C25487 + C25488;
    const double C31025 = C25488 + C25487;
    const double C44244 = C28028 + C28027;
    const double C43149 = C43148 * C48286;
    const double C22015 = C22011 * C48402;
    const double C23869 = C22011 * C48402;
    const double C43359 = C43357 * C48402;
    const double C45660 = C43357 * C48402;
    const double C26673 = C26671 * C48402;
    const double C28917 = C26671 * C48402;
    const double C43790 = C22683 * C48286;
    const double C44706 = C44703 * C48286;
    const double C45912 = C45911 * C48286;
    const double C44439 = C44433 * C48286;
    const double C148 =
        5 * (3 * C47372 + (C47377 * ae) / C47079 - (C47376 * ce) / C47239 +
             C47238 * C47460) +
        ((4 * C47377 + C47238 * C47467 - (C47446 * ce) / C47106) * ae) /
            C47079 -
        ((4 * C47376 + C47238 * C47466 + C47446 * ae) * ce) / C47239 +
        C47238 *
            (4 * C47460 + (C47467 * ae) / C47079 - (C47466 * ce) / C47239 +
             C47238 *
                 (3 * C47454 + (C47461 * ae) / C47079 - (C47459 * ce) / C47239 +
                  C47238 *
                      (2 * C47448 - (ae * C47449) / C47239 -
                       (C47450 * ce) / C47239 +
                       C47238 *
                           ((-(ae * C47432) / C47106) / C47079 -
                            C47431 / C47239 - (C47435 * ce) / C47239 +
                            C47238 * ((-(C47418 * ce) / C47106) / C47079 -
                                      (ae * C47415) / C47239 -
                                      (C47238 *
                                       (C47388 * C47389 +
                                        C47246 * bs[8] * std::pow(C47236, 8)) *
                                       C47247) /
                                          C47239)))));
    const double C572 =
        4 * (2 * C47487 - (ae * C47469 * C47367) / C47239 -
             (C47469 * C47368 * ce) / C47239 + C47238 * C47592) +
        (C47469 * C47467 * ae) / C47079 - (C47469 * C47466 * ce) / C47239 +
        C47238 *
            (3 * C47592 + (C47469 * C47461 * ae) / C47079 -
             (C47469 * C47459 * ce) / C47239 +
             C47238 *
                 (2 * C47590 - (ae * C47469 * C47449) / C47239 -
                  (C47469 * C47450 * ce) / C47239 +
                  C47238 *
                      ((-(ae * C47469 * C47432) / C47106) / C47079 -
                       C47572 / C47239 - (C47469 * C47435 * ce) / C47239 +
                       C47238 * ((-(C47469 * C47418 * ce) / C47106) / C47079 -
                                 (ae * C47469 * C47415) / C47239 -
                                 (C47238 * C47469 *
                                  (C47388 * C47389 +
                                   C47246 * bs[8] * std::pow(C47236, 8)) *
                                  C47247) /
                                     C47239))));
    const double C676 =
        4 * (2 * C47536 - (ae * C47518 * C47367) / C47239 -
             (C47518 * C47368 * ce) / C47239 + C47238 * C47619) +
        (C47518 * C47467 * ae) / C47079 - (C47518 * C47466 * ce) / C47239 +
        C47238 *
            (3 * C47619 + (C47518 * C47461 * ae) / C47079 -
             (C47518 * C47459 * ce) / C47239 +
             C47238 *
                 (2 * C47617 - (ae * C47518 * C47449) / C47239 -
                  (C47518 * C47450 * ce) / C47239 +
                  C47238 *
                      ((-(ae * C47518 * C47432) / C47106) / C47079 -
                       C47599 / C47239 - (C47518 * C47435 * ce) / C47239 +
                       C47238 * ((-(C47518 * C47418 * ce) / C47106) / C47079 -
                                 (ae * C47518 * C47415) / C47239 -
                                 (C47238 * C47518 *
                                  (C47388 * C47389 +
                                   C47246 * bs[8] * std::pow(C47236, 8)) *
                                  C47247) /
                                     C47239))));
    const double C141 =
        5 * ((-3 * C47310) / C47106 + C47238 * C47377 -
             (C47357 * ce) / C47106) +
        C47238 * (4 * C47377 + C47238 * C47467 - (C47446 * ce) / C47106) -
        ((4 * C47357 + C47238 * C47446) * ce) / C47106;
    const double C297 = (-3 * C47310) / C47106 + C47238 * C47377 -
                        (C47357 * ce) / C47106 + C47467 * C47490;
    const double C450 = (-3 * C47310) / C47106 + C47238 * C47377 -
                        (C47357 * ce) / C47106 + C47467 * C47539;
    const double C571 =
        C47469 * (4 * C47377 + C47238 * C47467 - (C47446 * ce) / C47106);
    const double C675 =
        C47518 * (4 * C47377 + C47238 * C47467 - (C47446 * ce) / C47106);
    const double C837 = C47518 * C47469 * C47467;
    const double C22975 = C22972 * C48054;
    const double C24593 = C22972 * C48054;
    const double C22529 = C22525 * C48044;
    const double C22681 = C22673 * C48044;
    const double C23086 = C23084 * C48044;
    const double C44442 = C44440 * C48044;
    const double C47161 = C47160 + C47132;
    const double C22437 = C22436 - C22426;
    const double C31028 = C25486 - C31026;
    const double C31027 = C31025 - C25486;
    const double C44251 = C44244 - C28026;
    const double C24276 = C21753 * C47161;
    const double C24268 = C21745 * C47161;
    const double C24262 = C21739 * C47161;
    const double C24439 = C22292 * C47161;
    const double C24433 = C22286 * C47161;
    const double C29616 = C22667 * C47161;
    const double C29606 = C26502 * C47161;
    const double C30633 = C26510 * C47161;
    const double C46172 = C28282 * C47161;
    const double C116 =
        (((((0 - (C47104 * C47105) / C47106) * ce) / C47106 -
           (0 * de) / C47118 + (2 * C47107) / C47106) /
              C47112 -
          ((C47104 * C47141 + 0) * de) / C47106 + C47124 - C47134) /
             C47112 +
         ((C47104 * C47155 + 0) * ce) / C47106) /
            C47112 -
        ((C47104 * (C47155 / C47112 +
                    ((C47104 * C47161 + C48049) * ce) / C47106 + C47157) +
          C48443) *
         de) /
            C47106 +
        C47161 / C47112 + ((C47104 * C47157 + C48057) * ce) / C47106 +
        2 * (C47132 / C47112 - (0 * de) / C47106);
    const double C117 =
        (C47155 / C47112 + ((C47104 * C47161 + C48049) * ce) / C47106 +
         C47157) /
            C47112 -
        ((C47104 * (C47161 / C47112 +
                    ((C47104 * C47157 + C48057) * ce) / C47106 + 2 * C47167) +
          C48436) *
         de) /
            C47106 +
        2 * (C47157 / C47112 + ((C47104 * C47167 + C2723) * ce) / C47106);
    const double C118 =
        (C47161 / C47112 + ((C47104 * C47157 + C48057) * ce) / C47106 +
         2 * C47167) /
            C47112 -
        ((C47104 *
              (C47157 / C47112 + ((C47104 * C47167 + C2723) * ce) / C47106) +
          C48423) *
         de) /
            C47106 +
        3 * (C47167 / C47112 + (0 * ce) / C47106);
    const double C565 =
        C47155 / C47112 - ((C47104 * C47161 + C48049) * de) / C47106 + C47157;
    const double C566 = C47161 / C47112 -
                        ((C47104 * C47157 + C48057) * de) / C47106 + 2 * C47167;
    const double C2355 =
        C47155 / C47112 + ((C47104 * C47161 + C48049) * ce) / C47106 + C47157;
    const double C2356 = C47161 / C47112 +
                         ((C47104 * C47157 + C48057) * ce) / C47106 +
                         2 * C47167;
    const double C22438 = C22437 - C22427;
    const double C31030 = C31028 + C25489;
    const double C31029 = C31027 - C25489;
    const double C44252 = C44251 - C28029;
    const double C24280 = C24268 + C24269;
    const double C29613 = C24432 + C24433;
    const double C29612 = C24433 + C24432;
    const double C46169 = C30633 + C30632;
    const double C21998 = C21745 * C565;
    const double C21988 = C21739 * C565;
    const double C26660 = C22286 * C565;
    const double C26804 = C26502 * C565;
    const double C43346 = C26510 * C565;
    const double C22000 = C21747 * C566;
    const double C21990 = C21741 * C566;
    const double C26662 = C22284 * C566;
    const double C26806 = C26504 * C566;
    const double C43348 = C26508 * C566;
    const double C23862 = C21745 * C2355;
    const double C23854 = C21739 * C2355;
    const double C28910 = C22286 * C2355;
    const double C29955 = C26502 * C2355;
    const double C45653 = C26510 * C2355;
    const double C23864 = C21747 * C2356;
    const double C23856 = C21741 * C2356;
    const double C28912 = C22284 * C2356;
    const double C29957 = C26504 * C2356;
    const double C45655 = C26508 * C2356;
    const double C22439 = C22438 + C22428;
    const double C31032 = C31030 - C25490;
    const double C31031 = C31029 + C25490;
    const double C44253 = C44252 + C28030;
    const double C24281 = C24280 - C24270;
    const double C29621 = C24431 - C29613;
    const double C29620 = C29612 - C24431;
    const double C46176 = C46169 - C30631;
    const double C22440 = C22439 + C22429;
    const double C31034 = C31032 - C25491;
    const double C31033 = C31031 + C25491;
    const double C44254 = C44253 + C28031;
    const double C24282 = C24281 - C24271;
    const double C29623 = C29621 + C24434;
    const double C29622 = C29620 - C24434;
    const double C46177 = C46176 - C30634;
    const double C44255 = C44254 * C48286;
    const double C24283 = C24282 + C24272;
    const double C29625 = C29623 - C24435;
    const double C29624 = C29622 + C24435;
    const double C46178 = C46177 + C30635;
    const double C24284 = C24283 + C24273;
    const double C29627 = C29625 - C24436;
    const double C29626 = C29624 + C24436;
    const double C46179 = C46178 + C30636;
    const double C46180 = C46179 * C48286;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                   C115 * C123 + C103 * C130) *
                      C47161 +
                  (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                   C115 * C133 + C103 * C144) *
                      C48049 -
                  (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                   C113 * C122 + C101 * C129) *
                      C47157 -
                  (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                   C113 * C132 + C101 * C143) *
                      C48057 +
                  (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                   C115 * C125 + C103 * C136) *
                      C47167 +
                  (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                   C115 * C137 + C103 * C146) *
                      C2723) *
                     C48286 * C48301 * C48097 * C48140 +
                 ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                   C115 * C270 + C103 * C280) *
                      C47157 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C48049 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C47161) +
                  (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                   C115 * C285 + C103 * C301) *
                      C48057 -
                  (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                   C113 * C269 + C101 * C279) *
                      C47167 -
                  (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                   C113 * C281 + C101 * C298) *
                      C2723) *
                     C48286 * C48301 * C48097 * C48147 +
                 ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                   C115 * C275 + C103 * C290) *
                      C47161 +
                  (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                   C115 * C293 + C103 * C305) *
                      C48049 -
                  (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                   C113 * C274 + C101 * C289) *
                      C47157 -
                  (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                   C113 * C292 + C101 * C304) *
                      C48057 +
                  (C113 * C275 + C101 * C290 + C114 * C276 + C102 * C294 +
                   C115 * C277 + C103 * C296) *
                      C47167 +
                  (C113 * C293 + C101 * C305 + C114 * C295 + C102 * C306 +
                   C115 * C297 + C103 * C307) *
                      C2723) *
                     C48286 * C48301 * C48097 * C2726)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C2463 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C2457 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C2464 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48054) *
                      C48286 * C48301 * C48367 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C2464 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C2457 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C2463) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48054) *
                      C48286 * C48301 * C48184) *
                     C48140 +
                 (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C2464 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C2457 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C2463) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48054) *
                      C48286 * C48301 * C48367 +
                  ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C2463 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C2457 -
                   (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                    C113 * C824 + C101 * C829) *
                       C2464 -
                   (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                    C113 * C832 + C101 * C839) *
                       C48054) *
                      C48286 * C48301 * C48184) *
                     C48147 +
                 (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C2463 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C2457 -
                   (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                    C113 * C274 + C101 * C289) *
                       C2464 -
                   (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                    C113 * C292 + C101 * C304) *
                       C48054) *
                      C48286 * C48301 * C48367 +
                  ((C113 * C1169 + C101 * C1184 + C114 * C1168 + C102 * C1183 +
                    C115 * C1457 + C103 * C1458) *
                       C2464 -
                   ((C115 * C1180 + C103 * C1195 + C114 * C1181 + C102 * C1196 +
                     C113 * C1182 + C101 * C1197) *
                        C2457 +
                    (C115 * C1168 + C103 * C1183 + C114 * C1169 + C102 * C1184 +
                     C113 * C1170 + C101 * C1185) *
                        C2463) +
                   (C113 * C1181 + C101 * C1196 + C114 * C1180 + C102 * C1195 +
                    C115 * C1459 + C103 * C1460) *
                       C48054) *
                      C48286 * C48301 * C48184) *
                     C2726)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                   C115 * C123 + C103 * C130) *
                      C2463 +
                  (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                   C115 * C133 + C103 * C144) *
                      C2457 -
                  (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                   C113 * C122 + C101 * C129) *
                      C2464 -
                  (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                   C113 * C132 + C101 * C143) *
                      C48054) *
                     C48286 * C48301 * C48097 * C48444 +
                 ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                   C115 * C270 + C103 * C280) *
                      C2464 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C2457 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C2463) +
                  (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                   C115 * C285 + C103 * C301) *
                      C48054) *
                     C48286 * C48301 * C48097 * C48440 +
                 ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                   C115 * C275 + C103 * C290) *
                      C2463 +
                  (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                   C115 * C293 + C103 * C305) *
                      C2457 -
                  (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                   C113 * C274 + C101 * C289) *
                      C2464 -
                  (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                   C113 * C292 + C101 * C304) *
                      C48054) *
                     C48286 * C48301 * C48097 * C48430 +
                 ((C113 * C1032 + C101 * C1041 + C114 * C1031 + C102 * C1040 +
                   C115 * C1307 + C103 * C1308) *
                      C2464 -
                  ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                    C113 * C1039 + C101 * C1051) *
                       C2457 +
                   (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                    C113 * C1033 + C101 * C1042) *
                       C2463) +
                  (C113 * C1038 + C101 * C1050 + C114 * C1037 + C102 * C1049 +
                   C115 * C1309 + C103 * C1310) *
                      C48054) *
                     C48286 * C48301 * C48097 * C48408)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                   C115 * C123 + C103 * C130) *
                      C2355 +
                  (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                   C115 * C133 + C103 * C144) *
                      C48443 -
                  (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                   C113 * C122 + C101 * C129) *
                      C2356 -
                  (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                   C113 * C132 + C101 * C143) *
                      C48436 +
                  (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                   C115 * C125 + C103 * C136) *
                      C2357 +
                  (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                   C115 * C137 + C103 * C146) *
                      C48423 -
                  (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                   C113 * C124 + C101 * C134) *
                      C2358 -
                  (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                   C113 * C135 + C101 * C145) *
                      C48402) *
                     C48286 * C48301 * C48097 * C2353 +
                 ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                   C115 * C270 + C103 * C280) *
                      C2356 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C48443 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C2355) +
                  (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                   C115 * C285 + C103 * C301) *
                      C48436 -
                  (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                   C113 * C269 + C101 * C279) *
                      C2357 -
                  (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                   C113 * C281 + C101 * C298) *
                      C48423 +
                  (C113 * C270 + C101 * C280 + C114 * C272 + C102 * C286 +
                   C115 * C569 + C103 * C570) *
                      C2358 +
                  (C113 * C285 + C101 * C301 + C114 * C287 + C102 * C302 +
                   C115 * C571 + C103 * C572) *
                      C48402) *
                     C48286 * C48301 * C48097 * C48144)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C2463 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C2457 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C2464 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48054) *
                      C48286 * C48301 * C48438 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C2464 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C2457 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C2463) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48054) *
                      C48286 * C48301 * C48427 +
                  ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                    C115 * C428 + C103 * C443) *
                       C2463 +
                   (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                    C115 * C446 + C103 * C458) *
                       C2457 -
                   (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
                    C113 * C427 + C101 * C442) *
                       C2464 -
                   (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
                    C113 * C445 + C101 * C457) *
                       C48054) *
                      C48286 * C48301 * C48401) *
                     C2353 +
                 (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C2464 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C2457 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C2463) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48054) *
                      C48286 * C48301 * C48438 +
                  ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C2463 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C2457 -
                   (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                    C113 * C824 + C101 * C829) *
                       C2464 -
                   (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                    C113 * C832 + C101 * C839) *
                       C48054) *
                      C48286 * C48301 * C48427 +
                  ((C113 * C1166 + C101 * C1178 + C114 * C1165 + C102 * C1177 +
                    C115 * C2031 + C103 * C2032) *
                       C2464 -
                   ((C115 * C1174 + C103 * C1192 + C114 * C1175 + C102 * C1193 +
                     C113 * C1176 + C101 * C1194) *
                        C2457 +
                    (C115 * C1165 + C103 * C1177 + C114 * C1166 + C102 * C1178 +
                     C113 * C1167 + C101 * C1179) *
                        C2463) +
                   (C113 * C1175 + C101 * C1193 + C114 * C1174 + C102 * C1192 +
                    C115 * C2033 + C103 * C2034) *
                       C48054) *
                      C48286 * C48301 * C48401) *
                     C48144)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C47161 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48049 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C47157 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48057 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C47167 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C2723) *
                      C48286 * C48301 * C48367 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C47157 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48049 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C47161) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48057 -
                   (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                    C113 * C422 + C101 * C432) *
                       C47167 -
                   (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                    C113 * C434 + C101 * C451) *
                       C2723) *
                      C48286 * C48301 * C48184) *
                     C2353 +
                 (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C47157 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48049 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C47161) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48057 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C47167 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C2723) *
                      C48286 * C48301 * C48367 +
                  ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C47161 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C48049 -
                   (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                    C113 * C824 + C101 * C829) *
                       C47157 -
                   (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                    C113 * C832 + C101 * C839) *
                       C48057 +
                   (C113 * C825 + C101 * C830 + C114 * C826 + C102 * C834 +
                    C115 * C827 + C103 * C836) *
                       C47167 +
                   (C113 * C833 + C101 * C840 + C114 * C835 + C102 * C841 +
                    C115 * C837 + C103 * C842) *
                       C2723) *
                      C48286 * C48301 * C48184) *
                     C48144)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                   C115 * C123 + C103 * C130) *
                      C2355 +
                  (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                   C115 * C133 + C103 * C144) *
                      C48443 -
                  (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                   C113 * C122 + C101 * C129) *
                      C2356 -
                  (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                   C113 * C132 + C101 * C143) *
                      C48436 +
                  (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                   C115 * C125 + C103 * C136) *
                      C2357 +
                  (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                   C115 * C137 + C103 * C146) *
                      C48423 -
                  (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                   C113 * C124 + C101 * C134) *
                      C2358 -
                  (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                   C113 * C135 + C101 * C145) *
                      C48402) *
                     C48286 * C48301 * C48097 * C2353 +
                 ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                   C115 * C270 + C103 * C280) *
                      C2356 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C48443 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C2355) +
                  (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                   C115 * C285 + C103 * C301) *
                      C48436 -
                  (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                   C113 * C269 + C101 * C279) *
                      C2357 -
                  (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                   C113 * C281 + C101 * C298) *
                      C48423 +
                  (C113 * C270 + C101 * C280 + C114 * C272 + C102 * C286 +
                   C115 * C569 + C103 * C570) *
                      C2358 +
                  (C113 * C285 + C101 * C301 + C114 * C287 + C102 * C302 +
                   C115 * C571 + C103 * C572) *
                      C48402) *
                     C48286 * C48301 * C48097 * C48144)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                   C115 * C123 + C103 * C130) *
                      C2463 +
                  (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                   C115 * C133 + C103 * C144) *
                      C2457 -
                  (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                   C113 * C122 + C101 * C129) *
                      C2464 -
                  (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                   C113 * C132 + C101 * C143) *
                      C48054) *
                     C48286 * C48301 * C48097 * C48444 +
                 ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                   C115 * C270 + C103 * C280) *
                      C2464 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C2457 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C2463) +
                  (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                   C115 * C285 + C103 * C301) *
                      C48054) *
                     C48286 * C48301 * C48097 * C48440 +
                 ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                   C115 * C275 + C103 * C290) *
                      C2463 +
                  (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                   C115 * C293 + C103 * C305) *
                      C2457 -
                  (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                   C113 * C274 + C101 * C289) *
                      C2464 -
                  (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                   C113 * C292 + C101 * C304) *
                      C48054) *
                     C48286 * C48301 * C48097 * C48430 +
                 ((C113 * C1032 + C101 * C1041 + C114 * C1031 + C102 * C1040 +
                   C115 * C1307 + C103 * C1308) *
                      C2464 -
                  ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                    C113 * C1039 + C101 * C1051) *
                       C2457 +
                   (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                    C113 * C1033 + C101 * C1042) *
                       C2463) +
                  (C113 * C1038 + C101 * C1050 + C114 * C1037 + C102 * C1049 +
                   C115 * C1309 + C103 * C1310) *
                      C48054) *
                     C48286 * C48301 * C48097 * C48408)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C47151 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48352 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C47132 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48054) *
                      C48286 * C48301 * C3120 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C47132 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48352 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C47151) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48054) *
                      C48286 * C48301 * C48184) *
                     C48140 +
                 (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C47132 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48352 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C47151) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48054) *
                      C48286 * C48301 * C3120 +
                  ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C47151 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C48352 -
                   (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                    C113 * C824 + C101 * C829) *
                       C47132 -
                   (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                    C113 * C832 + C101 * C839) *
                       C48054) *
                      C48286 * C48301 * C48184) *
                     C48147 +
                 (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C47151 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48352 -
                   (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                    C113 * C274 + C101 * C289) *
                       C47132 -
                   (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                    C113 * C292 + C101 * C304) *
                       C48054) *
                      C48286 * C48301 * C3120 +
                  ((C113 * C1169 + C101 * C1184 + C114 * C1168 + C102 * C1183 +
                    C115 * C1457 + C103 * C1458) *
                       C47132 -
                   ((C115 * C1180 + C103 * C1195 + C114 * C1181 + C102 * C1196 +
                     C113 * C1182 + C101 * C1197) *
                        C48352 +
                    (C115 * C1168 + C103 * C1183 + C114 * C1169 + C102 * C1184 +
                     C113 * C1170 + C101 * C1185) *
                        C47151) +
                   (C113 * C1181 + C101 * C1196 + C114 * C1180 + C102 * C1195 +
                    C115 * C1459 + C103 * C1460) *
                       C48054) *
                      C48286 * C48301 * C48184) *
                     C2726)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C1030 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48044) *
                      C48286 * C48301 * C48180 -
                  ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                    C113 * C436 + C101 * C453) *
                       C48044 +
                   (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                    C113 * C424 + C101 * C437) *
                       C1030) *
                      C48286 * C48301 * C48187 +
                  ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                    C115 * C428 + C103 * C443) *
                       C1030 +
                   (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                    C115 * C446 + C103 * C458) *
                       C48044) *
                      C48286 * C48301 * C3628) *
                     C48140 +
                 (((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C1030 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C48044) *
                      C48286 * C48301 * C48187 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C48044 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C1030) *
                      C48286 * C48301 * C48180 -
                  ((C115 * C1174 + C103 * C1192 + C114 * C1175 + C102 * C1193 +
                    C113 * C1176 + C101 * C1194) *
                       C48044 +
                   (C115 * C1165 + C103 * C1177 + C114 * C1166 + C102 * C1178 +
                    C113 * C1167 + C101 * C1179) *
                       C1030) *
                      C48286 * C48301 * C3628) *
                     C48147 +
                 (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C1030 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48044) *
                      C48286 * C48301 * C48180 -
                  ((C115 * C1180 + C103 * C1195 + C114 * C1181 + C102 * C1196 +
                    C113 * C1182 + C101 * C1197) *
                       C48044 +
                   (C115 * C1168 + C103 * C1183 + C114 * C1169 + C102 * C1184 +
                    C113 * C1170 + C101 * C1185) *
                       C1030) *
                      C48286 * C48301 * C48187 +
                  ((C113 * C1171 + C101 * C1186 + C114 * C1172 + C102 * C1187 +
                    C115 * C1173 + C103 * C1188) *
                       C1030 +
                   (C113 * C1189 + C101 * C1198 + C114 * C1190 + C102 * C1199 +
                    C115 * C1191 + C103 * C1200) *
                       C48044) *
                      C48286 * C48301 * C3628) *
                     C2726)) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C1030 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48044) *
                      C48286 * C48301 * C3120 -
                  ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                    C113 * C436 + C101 * C453) *
                       C48044 +
                   (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                    C113 * C424 + C101 * C437) *
                       C1030) *
                      C48286 * C48301 * C48184) *
                     C48444 +
                 (((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C1030 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C48044) *
                      C48286 * C48301 * C48184 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C48044 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C1030) *
                      C48286 * C48301 * C3120) *
                     C48440 +
                 (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C1030 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48044) *
                      C48286 * C48301 * C3120 -
                  ((C115 * C1180 + C103 * C1195 + C114 * C1181 + C102 * C1196 +
                    C113 * C1182 + C101 * C1197) *
                       C48044 +
                   (C115 * C1168 + C103 * C1183 + C114 * C1169 + C102 * C1184 +
                    C113 * C1170 + C101 * C1185) *
                       C1030) *
                      C48286 * C48301 * C48184) *
                     C48430 +
                 (((C113 * C1559 + C101 * C1562 + C114 * C1560 + C102 * C1563 +
                    C115 * C1561 + C103 * C1564) *
                       C1030 +
                   (C113 * C1565 + C101 * C1568 + C114 * C1566 + C102 * C1569 +
                    C115 * C1567 + C103 * C1570) *
                       C48044) *
                      C48286 * C48301 * C48184 -
                  ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                    C113 * C1039 + C101 * C1051) *
                       C48044 +
                   (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                    C113 * C1033 + C101 * C1042) *
                       C1030) *
                      C48286 * C48301 * C3120) *
                     C48408)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C959 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48434 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C960 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48421 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C961 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48392) *
                      C48286 * C48301 * C3120 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C960 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48434 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C959) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48421 -
                   (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                    C113 * C422 + C101 * C432) *
                       C961 -
                   (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                    C113 * C434 + C101 * C451) *
                       C48392) *
                      C48286 * C48301 * C48184) *
                     C2353 +
                 (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C960 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48434 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C959) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48421 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C961 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C48392) *
                      C48286 * C48301 * C3120 +
                  ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C959 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C48434 -
                   (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                    C113 * C824 + C101 * C829) *
                       C960 -
                   (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                    C113 * C832 + C101 * C839) *
                       C48421 +
                   (C113 * C825 + C101 * C830 + C114 * C826 + C102 * C834 +
                    C115 * C827 + C103 * C836) *
                       C961 +
                   (C113 * C833 + C101 * C840 + C114 * C835 + C102 * C841 +
                    C115 * C837 + C103 * C842) *
                       C48392) *
                      C48286 * C48301 * C48184) *
                     C48144)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C1030 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48044) *
                      C48286 * C48301 * C48445 -
                  ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                    C113 * C436 + C101 * C453) *
                       C48044 +
                   (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                    C113 * C424 + C101 * C437) *
                       C1030) *
                      C48286 * C48301 * C48442 +
                  ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                    C115 * C428 + C103 * C443) *
                       C1030 +
                   (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                    C115 * C446 + C103 * C458) *
                       C48044) *
                      C48286 * C48301 * C48433 -
                  ((C115 * C1867 + C103 * C1879 + C114 * C1868 + C102 * C1880 +
                    C113 * C1869 + C101 * C1881) *
                       C48044 +
                   (C115 * C1861 + C103 * C1870 + C114 * C1862 + C102 * C1871 +
                    C113 * C1863 + C101 * C1872) *
                       C1030) *
                      C48286 * C48301 * C48414) *
                     C2353 +
                 (((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C1030 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C48044) *
                      C48286 * C48301 * C48442 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C48044 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C1030) *
                      C48286 * C48301 * C48445 -
                  ((C115 * C1174 + C103 * C1192 + C114 * C1175 + C102 * C1193 +
                    C113 * C1176 + C101 * C1194) *
                       C48044 +
                   (C115 * C1165 + C103 * C1177 + C114 * C1166 + C102 * C1178 +
                    C113 * C1167 + C101 * C1179) *
                       C1030) *
                      C48286 * C48301 * C48433 +
                  ((C113 * C2239 + C101 * C2242 + C114 * C2240 + C102 * C2243 +
                    C115 * C2241 + C103 * C2244) *
                       C1030 +
                   (C113 * C2245 + C101 * C2248 + C114 * C2246 + C102 * C2249 +
                    C115 * C2247 + C103 * C2250) *
                       C48044) *
                      C48286 * C48301 * C48414) *
                     C48144)) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C47151 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48352 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C47132 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48054) *
                      C48286 * C48301 * C48180 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C47132 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48352 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C47151) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48054) *
                      C48286 * C48301 * C48187 +
                  ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                    C115 * C428 + C103 * C443) *
                       C47151 +
                   (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                    C115 * C446 + C103 * C458) *
                       C48352 -
                   (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
                    C113 * C427 + C101 * C442) *
                       C47132 -
                   (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
                    C113 * C445 + C101 * C457) *
                       C48054) *
                      C48286 * C48301 * C3628) *
                     C2353 +
                 (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C47132 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48352 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C47151) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48054) *
                      C48286 * C48301 * C48180 +
                  ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C47151 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C48352 -
                   (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                    C113 * C824 + C101 * C829) *
                       C47132 -
                   (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                    C113 * C832 + C101 * C839) *
                       C48054) *
                      C48286 * C48301 * C48187 +
                  ((C113 * C1166 + C101 * C1178 + C114 * C1165 + C102 * C1177 +
                    C115 * C2031 + C103 * C2032) *
                       C47132 -
                   ((C115 * C1174 + C103 * C1192 + C114 * C1175 + C102 * C1193 +
                     C113 * C1176 + C101 * C1194) *
                        C48352 +
                    (C115 * C1165 + C103 * C1177 + C114 * C1166 + C102 * C1178 +
                     C113 * C1167 + C101 * C1179) *
                        C47151) +
                   (C113 * C1175 + C101 * C1193 + C114 * C1174 + C102 * C1192 +
                    C115 * C2033 + C103 * C2034) *
                       C48054) *
                      C48286 * C48301 * C3628) *
                     C48144)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C959 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48434 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C960 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48421 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C961 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48392) *
                      C48286 * C48301 * C3120 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C960 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48434 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C959) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48421 -
                   (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                    C113 * C422 + C101 * C432) *
                       C961 -
                   (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                    C113 * C434 + C101 * C451) *
                       C48392) *
                      C48286 * C48301 * C48184) *
                     C2353 +
                 (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C960 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48434 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C959) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48421 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C961 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C48392) *
                      C48286 * C48301 * C3120 +
                  ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C959 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C48434 -
                   (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                    C113 * C824 + C101 * C829) *
                       C960 -
                   (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                    C113 * C832 + C101 * C839) *
                       C48421 +
                   (C113 * C825 + C101 * C830 + C114 * C826 + C102 * C834 +
                    C115 * C827 + C103 * C836) *
                       C961 +
                   (C113 * C833 + C101 * C840 + C114 * C835 + C102 * C841 +
                    C115 * C837 + C103 * C842) *
                       C48392) *
                      C48286 * C48301 * C48184) *
                     C48144)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C1030 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48044) *
                      C48286 * C48301 * C3120 -
                  ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                    C113 * C436 + C101 * C453) *
                       C48044 +
                   (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                    C113 * C424 + C101 * C437) *
                       C1030) *
                      C48286 * C48301 * C48184) *
                     C48444 +
                 (((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                    C115 * C825 + C103 * C830) *
                       C1030 +
                   (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                    C115 * C833 + C103 * C840) *
                       C48044) *
                      C48286 * C48301 * C48184 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C48044 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C1030) *
                      C48286 * C48301 * C3120) *
                     C48440 +
                 (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C1030 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48044) *
                      C48286 * C48301 * C3120 -
                  ((C115 * C1180 + C103 * C1195 + C114 * C1181 + C102 * C1196 +
                    C113 * C1182 + C101 * C1197) *
                       C48044 +
                   (C115 * C1168 + C103 * C1183 + C114 * C1169 + C102 * C1184 +
                    C113 * C1170 + C101 * C1185) *
                       C1030) *
                      C48286 * C48301 * C48184) *
                     C48430 +
                 (((C113 * C1559 + C101 * C1562 + C114 * C1560 + C102 * C1563 +
                    C115 * C1561 + C103 * C1564) *
                       C1030 +
                   (C113 * C1565 + C101 * C1568 + C114 * C1566 + C102 * C1569 +
                    C115 * C1567 + C103 * C1570) *
                       C48044) *
                      C48286 * C48301 * C48184 -
                  ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                    C113 * C1039 + C101 * C1051) *
                       C48044 +
                   (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                    C113 * C1033 + C101 * C1042) *
                       C1030) *
                      C48286 * C48301 * C3120) *
                     C48408)) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C47151 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48352 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C47132 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48054) *
                      C48286 * C48301 * C48097 * C1301 +
                  ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C47132 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48352 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C47151) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48054) *
                      C48286 * C48301 * C48097 * C1302 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C47151 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48352 -
                   (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                    C113 * C274 + C101 * C289) *
                       C47132 -
                   (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                    C113 * C292 + C101 * C304) *
                       C48054) *
                      C48286 * C48301 * C48097 * C1303 +
                  ((C113 * C1032 + C101 * C1041 + C114 * C1031 + C102 * C1040 +
                    C115 * C1307 + C103 * C1308) *
                       C47132 -
                   ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                     C113 * C1039 + C101 * C1051) *
                        C48352 +
                    (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                     C113 * C1033 + C101 * C1042) *
                        C47151) +
                   (C113 * C1038 + C101 * C1050 + C114 * C1037 + C102 * C1049 +
                    C115 * C1309 + C103 * C1310) *
                       C48054) *
                      C48286 * C48301 * C48097 * C48408)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C565 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C559 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C566 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C560 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C567 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C561 -
                   (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                    C113 * C124 + C101 * C134) *
                       C568 -
                   (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                    C113 * C135 + C101 * C145) *
                       C48402) *
                      C48286 * C48301 * C48097 * C48366 +
                  ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C566 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C559 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C565) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C560 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C567 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C561 +
                   (C113 * C270 + C101 * C280 + C114 * C272 + C102 * C286 +
                    C115 * C569 + C103 * C570) *
                       C568 +
                   (C113 * C285 + C101 * C301 + C114 * C287 + C102 * C302 +
                    C115 * C571 + C103 * C572) *
                       C48402) *
                      C48286 * C48301 * C48097 * C48144)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C47151 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C48352 -
                    (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                     C113 * C122 + C101 * C129) *
                        C47132 -
                    (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                     C113 * C132 + C101 * C143) *
                        C48054) *
                       C48286 * C48301 * C1681 +
                   ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                     C115 * C423 + C103 * C433) *
                        C47132 -
                    ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                      C113 * C436 + C101 * C453) *
                         C48352 +
                     (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                      C113 * C424 + C101 * C437) *
                         C47151) +
                    (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                     C115 * C438 + C103 * C454) *
                        C48054) *
                       C48286 * C48301 * C1682 +
                   ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                     C115 * C428 + C103 * C443) *
                        C47151 +
                    (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                     C115 * C446 + C103 * C458) *
                        C48352 -
                    (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
                     C113 * C427 + C101 * C442) *
                        C47132 -
                    (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
                     C113 * C445 + C101 * C457) *
                        C48054) *
                       C48286 * C48301 * C48401) *
                      C48366 +
                  (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                     C115 * C270 + C103 * C280) *
                        C47132 -
                    ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                      C113 * C283 + C101 * C300) *
                         C48352 +
                     (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                      C113 * C271 + C101 * C284) *
                         C47151) +
                    (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                     C115 * C285 + C103 * C301) *
                        C48054) *
                       C48286 * C48301 * C1681 +
                   ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C47151 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C48352 -
                    (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                     C113 * C824 + C101 * C829) *
                        C47132 -
                    (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                     C113 * C832 + C101 * C839) *
                        C48054) *
                       C48286 * C48301 * C1682 +
                   ((C113 * C1166 + C101 * C1178 + C114 * C1165 + C102 * C1177 +
                     C115 * C2031 + C103 * C2032) *
                        C47132 -
                    ((C115 * C1174 + C103 * C1192 + C114 * C1175 +
                      C102 * C1193 + C113 * C1176 + C101 * C1194) *
                         C48352 +
                     (C115 * C1165 + C103 * C1177 + C114 * C1166 +
                      C102 * C1178 + C113 * C1167 + C101 * C1179) *
                         C47151) +
                    (C113 * C1175 + C101 * C1193 + C114 * C1174 + C102 * C1192 +
                     C115 * C2033 + C103 * C2034) *
                        C48054) *
                       C48286 * C48301 * C48401) *
                      C48144)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C1030 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C48044) *
                       C48286 * C48301 * C48367 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48044 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C1030) *
                       C48286 * C48301 * C48184) *
                      C1301 +
                  (((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C1030 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C48044) *
                       C48286 * C48301 * C48184 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48044 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C1030) *
                       C48286 * C48301 * C48367) *
                      C1302 +
                  (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                     C115 * C275 + C103 * C290) *
                        C1030 +
                    (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                     C115 * C293 + C103 * C305) *
                        C48044) *
                       C48286 * C48301 * C48367 -
                   ((C115 * C1180 + C103 * C1195 + C114 * C1181 + C102 * C1196 +
                     C113 * C1182 + C101 * C1197) *
                        C48044 +
                    (C115 * C1168 + C103 * C1183 + C114 * C1169 + C102 * C1184 +
                     C113 * C1170 + C101 * C1185) *
                        C1030) *
                       C48286 * C48301 * C48184) *
                      C1303 +
                  (((C113 * C1559 + C101 * C1562 + C114 * C1560 + C102 * C1563 +
                     C115 * C1561 + C103 * C1564) *
                        C1030 +
                    (C113 * C1565 + C101 * C1568 + C114 * C1566 + C102 * C1569 +
                     C115 * C1567 + C103 * C1570) *
                        C48044) *
                       C48286 * C48301 * C48184 -
                   ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                     C113 * C1039 + C101 * C1051) *
                        C48044 +
                    (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                     C113 * C1033 + C101 * C1042) *
                        C1030) *
                       C48286 * C48301 * C48367) *
                      C48408)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C265 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C259 -
                    (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                     C113 * C122 + C101 * C129) *
                        C266 -
                    (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                     C113 * C132 + C101 * C143) *
                        C260 +
                    (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                     C115 * C125 + C103 * C136) *
                        C267 +
                    (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                     C115 * C137 + C103 * C146) *
                        C48392) *
                       C48286 * C48301 * C48367 +
                   ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                     C115 * C423 + C103 * C433) *
                        C266 -
                    ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                      C113 * C436 + C101 * C453) *
                         C259 +
                     (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                      C113 * C424 + C101 * C437) *
                         C265) +
                    (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                     C115 * C438 + C103 * C454) *
                        C260 -
                    (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                     C113 * C422 + C101 * C432) *
                        C267 -
                    (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                     C113 * C434 + C101 * C451) *
                        C48392) *
                       C48286 * C48301 * C48184) *
                      C48366 +
                  (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                     C115 * C270 + C103 * C280) *
                        C266 -
                    ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                      C113 * C283 + C101 * C300) *
                         C259 +
                     (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                      C113 * C271 + C101 * C284) *
                         C265) +
                    (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                     C115 * C285 + C103 * C301) *
                        C260 -
                    (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                     C113 * C269 + C101 * C279) *
                        C267 -
                    (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                     C113 * C281 + C101 * C298) *
                        C48392) *
                       C48286 * C48301 * C48367 +
                   ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C265 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C259 -
                    (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                     C113 * C824 + C101 * C829) *
                        C266 -
                    (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                     C113 * C832 + C101 * C839) *
                        C260 +
                    (C113 * C825 + C101 * C830 + C114 * C826 + C102 * C834 +
                     C115 * C827 + C103 * C836) *
                        C267 +
                    (C113 * C833 + C101 * C840 + C114 * C835 + C102 * C841 +
                     C115 * C837 + C103 * C842) *
                        C48392) *
                       C48286 * C48301 * C48184) *
                      C48144)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C1030 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C48044) *
                       C48286 * C48301 * C2133 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48044 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C1030) *
                       C48286 * C48301 * C2134 +
                   ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                     C115 * C428 + C103 * C443) *
                        C1030 +
                    (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                     C115 * C446 + C103 * C458) *
                        C48044) *
                       C48286 * C48301 * C2135 -
                   ((C115 * C1867 + C103 * C1879 + C114 * C1868 + C102 * C1880 +
                     C113 * C1869 + C101 * C1881) *
                        C48044 +
                    (C115 * C1861 + C103 * C1870 + C114 * C1862 + C102 * C1871 +
                     C113 * C1863 + C101 * C1872) *
                        C1030) *
                       C48286 * C48301 * C48414) *
                      C48366 +
                  (((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C1030 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C48044) *
                       C48286 * C48301 * C2134 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48044 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C1030) *
                       C48286 * C48301 * C2133 -
                   ((C115 * C1174 + C103 * C1192 + C114 * C1175 + C102 * C1193 +
                     C113 * C1176 + C101 * C1194) *
                        C48044 +
                    (C115 * C1165 + C103 * C1177 + C114 * C1166 + C102 * C1178 +
                     C113 * C1167 + C101 * C1179) *
                        C1030) *
                       C48286 * C48301 * C2135 +
                   ((C113 * C2239 + C101 * C2242 + C114 * C2240 + C102 * C2243 +
                     C115 * C2241 + C103 * C2244) *
                        C1030 +
                    (C113 * C2245 + C101 * C2248 + C114 * C2246 + C102 * C2249 +
                     C115 * C2247 + C103 * C2250) *
                        C48044) *
                       C48286 * C48301 * C48414) *
                      C48144)) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
               C115 * C123 + C103 * C130) *
                  C116 +
              (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
               C115 * C133 + C103 * C144) *
                  C104 -
              (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
               C113 * C122 + C101 * C129) *
                  C117 -
              (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
               C113 * C132 + C101 * C143) *
                  C105 +
              (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
               C115 * C125 + C103 * C136) *
                  C118 +
              (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
               C115 * C137 + C103 * C146) *
                  C106 -
              (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
               C113 * C124 + C101 * C134) *
                  C119 -
              (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
               C113 * C135 + C101 * C145) *
                  C107 +
              (C113 * C125 + C101 * C136 + C114 * C126 + C102 * C138 +
               C115 * C127 + C103 * C140) *
                  C120 +
              (C113 * C137 + C101 * C146 + C114 * C139 + C102 * C147 +
               C115 * C141 + C103 * C148) *
                  C108) *
             C48286 * C48301 * C48097 * C48085 +
         0.5 * std::pow(Pi, 2.5) *
             (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                C115 * C123 + C103 * C130) *
                   C265 +
               (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                C115 * C133 + C103 * C144) *
                   C259 -
               (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                C113 * C122 + C101 * C129) *
                   C266 -
               (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                C113 * C132 + C101 * C143) *
                   C260 +
               (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                C115 * C125 + C103 * C136) *
                   C267 +
               (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                C115 * C137 + C103 * C146) *
                   C48392) *
                  C48286 * C48301 * C48097 * C48437 +
              ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                C115 * C270 + C103 * C280) *
                   C266 -
               ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                 C113 * C283 + C101 * C300) *
                    C259 +
                (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                 C113 * C271 + C101 * C284) *
                    C265) +
               (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                C115 * C285 + C103 * C301) *
                   C260 -
               (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                C113 * C269 + C101 * C279) *
                   C267 -
               (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                C113 * C281 + C101 * C298) *
                   C48392) *
                  C48286 * C48301 * C48097 * C48425 +
              ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                C115 * C275 + C103 * C290) *
                   C265 +
               (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                C115 * C293 + C103 * C305) *
                   C259 -
               (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                C113 * C274 + C101 * C289) *
                   C266 -
               (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                C113 * C292 + C101 * C304) *
                   C260 +
               (C113 * C275 + C101 * C290 + C114 * C276 + C102 * C294 +
                C115 * C277 + C103 * C296) *
                   C267 +
               (C113 * C293 + C101 * C305 + C114 * C295 + C102 * C306 +
                C115 * C297 + C103 * C307) *
                   C48392) *
                  C48286 * C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
            C115 * C123 + C103 * C130) *
               C265 +
           (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
            C115 * C133 + C103 * C144) *
               C259 -
           (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
            C113 * C122 + C101 * C129) *
               C266 -
           (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
            C113 * C132 + C101 * C143) *
               C260 +
           (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
            C115 * C125 + C103 * C136) *
               C267 +
           (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
            C115 * C137 + C103 * C146) *
               C48392) *
              C48286 * C48301 * C48438 +
          ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
            C115 * C423 + C103 * C433) *
               C266 -
           ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
             C113 * C436 + C101 * C453) *
                C259 +
            (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
             C113 * C424 + C101 * C437) *
                C265) +
           (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
            C115 * C438 + C103 * C454) *
               C260 -
           (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
            C113 * C422 + C101 * C432) *
               C267 -
           (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
            C113 * C434 + C101 * C451) *
               C48392) *
              C48286 * C48301 * C48427 +
          ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
            C115 * C428 + C103 * C443) *
               C265 +
           (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
            C115 * C446 + C103 * C458) *
               C259 -
           (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
            C113 * C427 + C101 * C442) *
               C266 -
           (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
            C113 * C445 + C101 * C457) *
               C260 +
           (C113 * C428 + C101 * C443 + C114 * C429 + C102 * C447 +
            C115 * C430 + C103 * C449) *
               C267 +
           (C113 * C446 + C101 * C458 + C114 * C448 + C102 * C459 +
            C115 * C450 + C103 * C460) *
               C48392) *
              C48286 * C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
            C115 * C123 + C103 * C130) *
               C959 +
           (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
            C115 * C133 + C103 * C144) *
               C48434 -
           (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
            C113 * C122 + C101 * C129) *
               C960 -
           (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
            C113 * C132 + C101 * C143) *
               C48421 +
           (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
            C115 * C125 + C103 * C136) *
               C961 +
           (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
            C115 * C137 + C103 * C146) *
               C48392) *
              C48286 * C48301 * C48097 * C956 +
          ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
            C115 * C270 + C103 * C280) *
               C960 -
           ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
             C113 * C283 + C101 * C300) *
                C48434 +
            (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
             C113 * C271 + C101 * C284) *
                C959) +
           (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
            C115 * C285 + C103 * C301) *
               C48421 -
           (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
            C113 * C269 + C101 * C279) *
               C961 -
           (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
            C113 * C281 + C101 * C298) *
               C48392) *
              C48286 * C48301 * C48097 * C957 +
          ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
            C115 * C275 + C103 * C290) *
               C959 +
           (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
            C115 * C293 + C103 * C305) *
               C48434 -
           (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
            C113 * C274 + C101 * C289) *
               C960 -
           (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
            C113 * C292 + C101 * C304) *
               C48421 +
           (C113 * C275 + C101 * C290 + C114 * C276 + C102 * C294 +
            C115 * C277 + C103 * C296) *
               C961 +
           (C113 * C293 + C101 * C305 + C114 * C295 + C102 * C306 +
            C115 * C297 + C103 * C307) *
               C48392) *
              C48286 * C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
            C115 * C123 + C103 * C130) *
               C1030 +
           (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
            C115 * C133 + C103 * C144) *
               C48044) *
              C48286 * C48301 * C48097 * C1025 -
          ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
            C113 * C283 + C101 * C300) *
               C48044 +
           (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
            C113 * C271 + C101 * C284) *
               C1030) *
              C48286 * C48301 * C48097 * C1026 +
          ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
            C115 * C275 + C103 * C290) *
               C1030 +
           (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
            C115 * C293 + C103 * C305) *
               C48044) *
              C48286 * C48301 * C48097 * C1027 -
          ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
            C113 * C1039 + C101 * C1051) *
               C48044 +
           (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
            C113 * C1033 + C101 * C1042) *
               C1030) *
              C48286 * C48301 * C48097 * C1028 +
          ((C113 * C1034 + C101 * C1043 + C114 * C1035 + C102 * C1044 +
            C115 * C1036 + C103 * C1045) *
               C1030 +
           (C113 * C1046 + C101 * C1052 + C114 * C1047 + C102 * C1053 +
            C115 * C1048 + C103 * C1054) *
               C48044) *
              C48286 * C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C113 * C121 + C101 * C128 + C114 * C122 +
                                 C102 * C129 + C115 * C123 + C103 * C130) *
                                    C1030 +
                                (C113 * C131 + C101 * C142 + C114 * C132 +
                                 C102 * C143 + C115 * C133 + C103 * C144) *
                                    C48044) *
                                   C48286 * C48301 * C48438 -
                               ((C115 * C434 + C103 * C451 + C114 * C435 +
                                 C102 * C452 + C113 * C436 + C101 * C453) *
                                    C48044 +
                                (C115 * C422 + C103 * C432 + C114 * C421 +
                                 C102 * C431 + C113 * C424 + C101 * C437) *
                                    C1030) *
                                   C48286 * C48301 * C48427 +
                               ((C113 * C426 + C101 * C441 + C114 * C427 +
                                 C102 * C442 + C115 * C428 + C103 * C443) *
                                    C1030 +
                                (C113 * C444 + C101 * C456 + C114 * C445 +
                                 C102 * C457 + C115 * C446 + C103 * C458) *
                                    C48044) *
                                   C48286 * C48301 * C48401) *
                                  C956 +
                              (((C113 * C823 + C101 * C828 + C114 * C824 +
                                 C102 * C829 + C115 * C825 + C103 * C830) *
                                    C1030 +
                                (C113 * C831 + C101 * C838 + C114 * C832 +
                                 C102 * C839 + C115 * C833 + C103 * C840) *
                                    C48044) *
                                   C48286 * C48301 * C48427 -
                               ((C115 * C281 + C103 * C298 + C114 * C282 +
                                 C102 * C299 + C113 * C283 + C101 * C300) *
                                    C48044 +
                                (C115 * C269 + C103 * C279 + C114 * C268 +
                                 C102 * C278 + C113 * C271 + C101 * C284) *
                                    C1030) *
                                   C48286 * C48301 * C48438 -
                               ((C115 * C1174 + C103 * C1192 + C114 * C1175 +
                                 C102 * C1193 + C113 * C1176 + C101 * C1194) *
                                    C48044 +
                                (C115 * C1165 + C103 * C1177 + C114 * C1166 +
                                 C102 * C1178 + C113 * C1167 + C101 * C1179) *
                                    C1030) *
                                   C48286 * C48301 * C48401) *
                                  C957 +
                              (((C113 * C273 + C101 * C288 + C114 * C274 +
                                 C102 * C289 + C115 * C275 + C103 * C290) *
                                    C1030 +
                                (C113 * C291 + C101 * C303 + C114 * C292 +
                                 C102 * C304 + C115 * C293 + C103 * C305) *
                                    C48044) *
                                   C48286 * C48301 * C48438 -
                               ((C115 * C1180 + C103 * C1195 + C114 * C1181 +
                                 C102 * C1196 + C113 * C1182 + C101 * C1197) *
                                    C48044 +
                                (C115 * C1168 + C103 * C1183 + C114 * C1169 +
                                 C102 * C1184 + C113 * C1170 + C101 * C1185) *
                                    C1030) *
                                   C48286 * C48301 * C48427 +
                               ((C113 * C1171 + C101 * C1186 + C114 * C1172 +
                                 C102 * C1187 + C115 * C1173 + C103 * C1188) *
                                    C1030 +
                                (C113 * C1189 + C101 * C1198 + C114 * C1190 +
                                 C102 * C1199 + C115 * C1191 + C103 * C1200) *
                                    C48044) *
                                   C48286 * C48301 * C48401) *
                                  C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
            C115 * C123 + C103 * C130) *
               C959 +
           (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
            C115 * C133 + C103 * C144) *
               C48434 -
           (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
            C113 * C122 + C101 * C129) *
               C960 -
           (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
            C113 * C132 + C101 * C143) *
               C48421 +
           (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
            C115 * C125 + C103 * C136) *
               C961 +
           (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
            C115 * C137 + C103 * C146) *
               C48392) *
              C48286 * C48301 * C1681 +
          ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
            C115 * C423 + C103 * C433) *
               C960 -
           ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
             C113 * C436 + C101 * C453) *
                C48434 +
            (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
             C113 * C424 + C101 * C437) *
                C959) +
           (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
            C115 * C438 + C103 * C454) *
               C48421 -
           (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
            C113 * C422 + C101 * C432) *
               C961 -
           (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
            C113 * C434 + C101 * C451) *
               C48392) *
              C48286 * C48301 * C1682 +
          ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
            C115 * C428 + C103 * C443) *
               C959 +
           (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
            C115 * C446 + C103 * C458) *
               C48434 -
           (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
            C113 * C427 + C101 * C442) *
               C960 -
           (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
            C113 * C445 + C101 * C457) *
               C48421 +
           (C113 * C428 + C101 * C443 + C114 * C429 + C102 * C447 +
            C115 * C430 + C103 * C449) *
               C961 +
           (C113 * C446 + C101 * C458 + C114 * C448 + C102 * C459 +
            C115 * C450 + C103 * C460) *
               C48392) *
              C48286 * C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C113 * C121 + C101 * C128 + C114 * C122 +
                                 C102 * C129 + C115 * C123 + C103 * C130) *
                                    C1030 +
                                (C113 * C131 + C101 * C142 + C114 * C132 +
                                 C102 * C143 + C115 * C133 + C103 * C144) *
                                    C48044) *
                                   C48286 * C48301 * C1681 -
                               ((C115 * C434 + C103 * C451 + C114 * C435 +
                                 C102 * C452 + C113 * C436 + C101 * C453) *
                                    C48044 +
                                (C115 * C422 + C103 * C432 + C114 * C421 +
                                 C102 * C431 + C113 * C424 + C101 * C437) *
                                    C1030) *
                                   C48286 * C48301 * C1682 +
                               ((C113 * C426 + C101 * C441 + C114 * C427 +
                                 C102 * C442 + C115 * C428 + C103 * C443) *
                                    C1030 +
                                (C113 * C444 + C101 * C456 + C114 * C445 +
                                 C102 * C457 + C115 * C446 + C103 * C458) *
                                    C48044) *
                                   C48286 * C48301 * C48401) *
                                  C48437 +
                              (((C113 * C823 + C101 * C828 + C114 * C824 +
                                 C102 * C829 + C115 * C825 + C103 * C830) *
                                    C1030 +
                                (C113 * C831 + C101 * C838 + C114 * C832 +
                                 C102 * C839 + C115 * C833 + C103 * C840) *
                                    C48044) *
                                   C48286 * C48301 * C1682 -
                               ((C115 * C281 + C103 * C298 + C114 * C282 +
                                 C102 * C299 + C113 * C283 + C101 * C300) *
                                    C48044 +
                                (C115 * C269 + C103 * C279 + C114 * C268 +
                                 C102 * C278 + C113 * C271 + C101 * C284) *
                                    C1030) *
                                   C48286 * C48301 * C1681 -
                               ((C115 * C1174 + C103 * C1192 + C114 * C1175 +
                                 C102 * C1193 + C113 * C1176 + C101 * C1194) *
                                    C48044 +
                                (C115 * C1165 + C103 * C1177 + C114 * C1166 +
                                 C102 * C1178 + C113 * C1167 + C101 * C1179) *
                                    C1030) *
                                   C48286 * C48301 * C48401) *
                                  C48425 +
                              (((C113 * C273 + C101 * C288 + C114 * C274 +
                                 C102 * C289 + C115 * C275 + C103 * C290) *
                                    C1030 +
                                (C113 * C291 + C101 * C303 + C114 * C292 +
                                 C102 * C304 + C115 * C293 + C103 * C305) *
                                    C48044) *
                                   C48286 * C48301 * C1681 -
                               ((C115 * C1180 + C103 * C1195 + C114 * C1181 +
                                 C102 * C1196 + C113 * C1182 + C101 * C1197) *
                                    C48044 +
                                (C115 * C1168 + C103 * C1183 + C114 * C1169 +
                                 C102 * C1184 + C113 * C1170 + C101 * C1185) *
                                    C1030) *
                                   C48286 * C48301 * C1682 +
                               ((C113 * C1171 + C101 * C1186 + C114 * C1172 +
                                 C102 * C1187 + C115 * C1173 + C103 * C1188) *
                                    C1030 +
                                (C113 * C1189 + C101 * C1198 + C114 * C1190 +
                                 C102 * C1199 + C115 * C1191 + C103 * C1200) *
                                    C48044) *
                                   C48286 * C48301 * C48401) *
                                  C48398)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
            C115 * C123 + C103 * C130) *
               C1030 +
           (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
            C115 * C133 + C103 * C144) *
               C48044) *
              C48286 * C48301 * C1856 -
          ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
            C113 * C436 + C101 * C453) *
               C48044 +
           (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
            C113 * C424 + C101 * C437) *
               C1030) *
              C48286 * C48301 * C1857 +
          ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
            C115 * C428 + C103 * C443) *
               C1030 +
           (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
            C115 * C446 + C103 * C458) *
               C48044) *
              C48286 * C48301 * C1858 -
          ((C115 * C1867 + C103 * C1879 + C114 * C1868 + C102 * C1880 +
            C113 * C1869 + C101 * C1881) *
               C48044 +
           (C115 * C1861 + C103 * C1870 + C114 * C1862 + C102 * C1871 +
            C113 * C1863 + C101 * C1872) *
               C1030) *
              C48286 * C48301 * C1859 +
          ((C113 * C1864 + C101 * C1873 + C114 * C1865 + C102 * C1874 +
            C115 * C1866 + C103 * C1875) *
               C1030 +
           (C113 * C1876 + C101 * C1882 + C114 * C1877 + C102 * C1883 +
            C115 * C1878 + C103 * C1884) *
               C48044) *
              C48286 * C48301 * C1860) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C47151 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C48352 -
                    (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                     C113 * C122 + C101 * C129) *
                        C47132 -
                    (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                     C113 * C132 + C101 * C143) *
                        C48054) *
                       C48286 * C48301 * C48367 +
                   ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                     C115 * C423 + C103 * C433) *
                        C47132 -
                    ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                      C113 * C436 + C101 * C453) *
                         C48352 +
                     (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                      C113 * C424 + C101 * C437) *
                         C47151) +
                    (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                     C115 * C438 + C103 * C454) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C956 +
                  (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                     C115 * C270 + C103 * C280) *
                        C47132 -
                    ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                      C113 * C283 + C101 * C300) *
                         C48352 +
                     (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                      C113 * C271 + C101 * C284) *
                         C47151) +
                    (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                     C115 * C285 + C103 * C301) *
                        C48054) *
                       C48286 * C48301 * C48367 +
                   ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C47151 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C48352 -
                    (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                     C113 * C824 + C101 * C829) *
                        C47132 -
                    (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                     C113 * C832 + C101 * C839) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C957 +
                  (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                     C115 * C275 + C103 * C290) *
                        C47151 +
                    (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                     C115 * C293 + C103 * C305) *
                        C48352 -
                    (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                     C113 * C274 + C101 * C289) *
                        C47132 -
                    (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                     C113 * C292 + C101 * C304) *
                        C48054) *
                       C48286 * C48301 * C48367 +
                   ((C113 * C1169 + C101 * C1184 + C114 * C1168 + C102 * C1183 +
                     C115 * C1457 + C103 * C1458) *
                        C47132 -
                    ((C115 * C1180 + C103 * C1195 + C114 * C1181 +
                      C102 * C1196 + C113 * C1182 + C101 * C1197) *
                         C48352 +
                     (C115 * C1168 + C103 * C1183 + C114 * C1169 +
                      C102 * C1184 + C113 * C1170 + C101 * C1185) *
                         C47151) +
                    (C113 * C1181 + C101 * C1196 + C114 * C1180 + C102 * C1195 +
                     C115 * C1459 + C103 * C1460) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C48398)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C565 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C559 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C566 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C560 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C567 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C561 -
                   (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                    C113 * C124 + C101 * C134) *
                       C568 -
                   (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                    C113 * C135 + C101 * C145) *
                       C48402) *
                      C48286 * C48301 * C48367 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C566 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C559 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C565) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C560 -
                   (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                    C113 * C422 + C101 * C432) *
                       C567 -
                   (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                    C113 * C434 + C101 * C451) *
                       C561 +
                   (C113 * C423 + C101 * C433 + C114 * C425 + C102 * C439 +
                    C115 * C673 + C103 * C674) *
                       C568 +
                   (C113 * C438 + C101 * C454 + C114 * C440 + C102 * C455 +
                    C115 * C675 + C103 * C676) *
                       C48402) *
                      C48286 * C48301 * C48184) *
                 C48085) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C47151 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48352 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C47132 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48054) *
                      C48286 * C48301 * C2133 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C47132 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48352 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C47151) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48054) *
                      C48286 * C48301 * C2134 +
                  ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                    C115 * C428 + C103 * C443) *
                       C47151 +
                   (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                    C115 * C446 + C103 * C458) *
                       C48352 -
                   (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
                    C113 * C427 + C101 * C442) *
                       C47132 -
                   (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
                    C113 * C445 + C101 * C457) *
                       C48054) *
                      C48286 * C48301 * C2135 +
                  ((C113 * C1862 + C101 * C1871 + C114 * C1861 + C102 * C1870 +
                    C115 * C2137 + C103 * C2138) *
                       C47132 -
                   ((C115 * C1867 + C103 * C1879 + C114 * C1868 + C102 * C1880 +
                     C113 * C1869 + C101 * C1881) *
                        C48352 +
                    (C115 * C1861 + C103 * C1870 + C114 * C1862 + C102 * C1871 +
                     C113 * C1863 + C101 * C1872) *
                        C47151) +
                   (C113 * C1868 + C101 * C1880 + C114 * C1867 + C102 * C1879 +
                    C115 * C2139 + C103 * C2140) *
                       C48054) *
                      C48286 * C48301 * C48414) *
                 C48085) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C265 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C259 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C266 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C260 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C267 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48437 +
                  ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C266 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C259 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C265) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C260 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C267 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48425 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C265 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C259 -
                   (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                    C113 * C274 + C101 * C289) *
                       C266 -
                   (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                    C113 * C292 + C101 * C304) *
                       C260 +
                   (C113 * C275 + C101 * C290 + C114 * C276 + C102 * C294 +
                    C115 * C277 + C103 * C296) *
                       C267 +
                   (C113 * C293 + C101 * C305 + C114 * C295 + C102 * C306 +
                    C115 * C297 + C103 * C307) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48398)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                   C115 * C123 + C103 * C130) *
                      C116 +
                  (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                   C115 * C133 + C103 * C144) *
                      C104 -
                  (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                   C113 * C122 + C101 * C129) *
                      C117 -
                  (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                   C113 * C132 + C101 * C143) *
                      C105 +
                  (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                   C115 * C125 + C103 * C136) *
                      C118 +
                  (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                   C115 * C137 + C103 * C146) *
                      C106 -
                  (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                   C113 * C124 + C101 * C134) *
                      C119 -
                  (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                   C113 * C135 + C101 * C145) *
                      C107 +
                  (C113 * C125 + C101 * C136 + C114 * C126 + C102 * C138 +
                   C115 * C127 + C103 * C140) *
                      C120 +
                  (C113 * C137 + C101 * C146 + C114 * C139 + C102 * C147 +
                   C115 * C141 + C103 * C148) *
                      C108) *
                 C48286 * C48301 * C48097 * C48085) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C959 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48434 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C960 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48421 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C961 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48392) *
                      C48286 * C48301 * C48097 * C956 +
                  ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C960 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48434 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C959) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48421 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C961 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C48392) *
                      C48286 * C48301 * C48097 * C957 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C959 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48434 -
                   (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                    C113 * C274 + C101 * C289) *
                       C960 -
                   (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                    C113 * C292 + C101 * C304) *
                       C48421 +
                   (C113 * C275 + C101 * C290 + C114 * C276 + C102 * C294 +
                    C115 * C277 + C103 * C296) *
                       C961 +
                   (C113 * C293 + C101 * C305 + C114 * C295 + C102 * C306 +
                    C115 * C297 + C103 * C307) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48398)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C1030 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48044) *
                      C48286 * C48301 * C48097 * C1025 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C48044 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C1030) *
                      C48286 * C48301 * C48097 * C1026 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C1030 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48044) *
                      C48286 * C48301 * C48097 * C1027 -
                  ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                    C113 * C1039 + C101 * C1051) *
                       C48044 +
                   (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                    C113 * C1033 + C101 * C1042) *
                       C1030) *
                      C48286 * C48301 * C48097 * C1028 +
                  ((C113 * C1034 + C101 * C1043 + C114 * C1035 + C102 * C1044 +
                    C115 * C1036 + C103 * C1045) *
                       C1030 +
                   (C113 * C1046 + C101 * C1052 + C114 * C1047 + C102 * C1053 +
                    C115 * C1048 + C103 * C1054) *
                       C48044) *
                      C48286 * C48301 * C48097 * C1029)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C959 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48434 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C960 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48421 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C961 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48392) *
                      C48286 * C48301 * C1681 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C960 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48434 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C959) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48421 -
                   (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                    C113 * C422 + C101 * C432) *
                       C961 -
                   (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                    C113 * C434 + C101 * C451) *
                       C48392) *
                      C48286 * C48301 * C1682 +
                  ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                    C115 * C428 + C103 * C443) *
                       C959 +
                   (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                    C115 * C446 + C103 * C458) *
                       C48434 -
                   (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
                    C113 * C427 + C101 * C442) *
                       C960 -
                   (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
                    C113 * C445 + C101 * C457) *
                       C48421 +
                   (C113 * C428 + C101 * C443 + C114 * C429 + C102 * C447 +
                    C115 * C430 + C103 * C449) *
                       C961 +
                   (C113 * C446 + C101 * C458 + C114 * C448 + C102 * C459 +
                    C115 * C450 + C103 * C460) *
                       C48392) *
                      C48286 * C48301 * C48401) *
                 C48085) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C1030 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C48044) *
                       C48286 * C48301 * C1681 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48044 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C1030) *
                       C48286 * C48301 * C1682 +
                   ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                     C115 * C428 + C103 * C443) *
                        C1030 +
                    (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                     C115 * C446 + C103 * C458) *
                        C48044) *
                       C48286 * C48301 * C48401) *
                      C48437 +
                  (((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C1030 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C48044) *
                       C48286 * C48301 * C1682 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48044 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C1030) *
                       C48286 * C48301 * C1681 -
                   ((C115 * C1174 + C103 * C1192 + C114 * C1175 + C102 * C1193 +
                     C113 * C1176 + C101 * C1194) *
                        C48044 +
                    (C115 * C1165 + C103 * C1177 + C114 * C1166 + C102 * C1178 +
                     C113 * C1167 + C101 * C1179) *
                        C1030) *
                       C48286 * C48301 * C48401) *
                      C48425 +
                  (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                     C115 * C275 + C103 * C290) *
                        C1030 +
                    (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                     C115 * C293 + C103 * C305) *
                        C48044) *
                       C48286 * C48301 * C1681 -
                   ((C115 * C1180 + C103 * C1195 + C114 * C1181 + C102 * C1196 +
                     C113 * C1182 + C101 * C1197) *
                        C48044 +
                    (C115 * C1168 + C103 * C1183 + C114 * C1169 + C102 * C1184 +
                     C113 * C1170 + C101 * C1185) *
                        C1030) *
                       C48286 * C48301 * C1682 +
                   ((C113 * C1171 + C101 * C1186 + C114 * C1172 + C102 * C1187 +
                     C115 * C1173 + C103 * C1188) *
                        C1030 +
                    (C113 * C1189 + C101 * C1198 + C114 * C1190 + C102 * C1199 +
                     C115 * C1191 + C103 * C1200) *
                        C48044) *
                       C48286 * C48301 * C48401) *
                      C48398)) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C47161 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C48049 -
                    (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                     C113 * C122 + C101 * C129) *
                        C47157 -
                    (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                     C113 * C132 + C101 * C143) *
                        C48057 +
                    (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                     C115 * C125 + C103 * C136) *
                        C47167 +
                    (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                     C115 * C137 + C103 * C146) *
                        C2723) *
                       C48286 * C48301 * C3120 +
                   ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                     C115 * C423 + C103 * C433) *
                        C47157 -
                    ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                      C113 * C436 + C101 * C453) *
                         C48049 +
                     (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                      C113 * C424 + C101 * C437) *
                         C47161) +
                    (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                     C115 * C438 + C103 * C454) *
                        C48057 -
                    (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                     C113 * C422 + C101 * C432) *
                        C47167 -
                    (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                     C113 * C434 + C101 * C451) *
                        C2723) *
                       C48286 * C48301 * C48184) *
                      C48366 +
                  (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                     C115 * C270 + C103 * C280) *
                        C47157 -
                    ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                      C113 * C283 + C101 * C300) *
                         C48049 +
                     (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                      C113 * C271 + C101 * C284) *
                         C47161) +
                    (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                     C115 * C285 + C103 * C301) *
                        C48057 -
                    (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                     C113 * C269 + C101 * C279) *
                        C47167 -
                    (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                     C113 * C281 + C101 * C298) *
                        C2723) *
                       C48286 * C48301 * C3120 +
                   ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C47161 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C48049 -
                    (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                     C113 * C824 + C101 * C829) *
                        C47157 -
                    (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                     C113 * C832 + C101 * C839) *
                        C48057 +
                    (C113 * C825 + C101 * C830 + C114 * C826 + C102 * C834 +
                     C115 * C827 + C103 * C836) *
                        C47167 +
                    (C113 * C833 + C101 * C840 + C114 * C835 + C102 * C841 +
                     C115 * C837 + C103 * C842) *
                        C2723) *
                       C48286 * C48301 * C48184) *
                      C48144)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C2463 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C2457 -
                    (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                     C113 * C122 + C101 * C129) *
                        C2464 -
                    (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                     C113 * C132 + C101 * C143) *
                        C48054) *
                       C48286 * C48301 * C48180 +
                   ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                     C115 * C423 + C103 * C433) *
                        C2464 -
                    ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                      C113 * C436 + C101 * C453) *
                         C2457 +
                     (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                      C113 * C424 + C101 * C437) *
                         C2463) +
                    (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                     C115 * C438 + C103 * C454) *
                        C48054) *
                       C48286 * C48301 * C48187 +
                   ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                     C115 * C428 + C103 * C443) *
                        C2463 +
                    (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                     C115 * C446 + C103 * C458) *
                        C2457 -
                    (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
                     C113 * C427 + C101 * C442) *
                        C2464 -
                    (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
                     C113 * C445 + C101 * C457) *
                        C48054) *
                       C48286 * C48301 * C3628) *
                      C48366 +
                  (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                     C115 * C270 + C103 * C280) *
                        C2464 -
                    ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                      C113 * C283 + C101 * C300) *
                         C2457 +
                     (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                      C113 * C271 + C101 * C284) *
                         C2463) +
                    (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                     C115 * C285 + C103 * C301) *
                        C48054) *
                       C48286 * C48301 * C48180 +
                   ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C2463 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C2457 -
                    (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                     C113 * C824 + C101 * C829) *
                        C2464 -
                    (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                     C113 * C832 + C101 * C839) *
                        C48054) *
                       C48286 * C48301 * C48187 +
                   ((C113 * C1166 + C101 * C1178 + C114 * C1165 + C102 * C1177 +
                     C115 * C2031 + C103 * C2032) *
                        C2464 -
                    ((C115 * C1174 + C103 * C1192 + C114 * C1175 +
                      C102 * C1193 + C113 * C1176 + C101 * C1194) *
                         C2457 +
                     (C115 * C1165 + C103 * C1177 + C114 * C1166 +
                      C102 * C1178 + C113 * C1167 + C101 * C1179) *
                         C2463) +
                    (C113 * C1175 + C101 * C1193 + C114 * C1174 + C102 * C1192 +
                     C115 * C2033 + C103 * C2034) *
                        C48054) *
                       C48286 * C48301 * C3628) *
                      C48144)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C2463 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C2457 -
                    (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                     C113 * C122 + C101 * C129) *
                        C2464 -
                    (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                     C113 * C132 + C101 * C143) *
                        C48054) *
                       C48286 * C48301 * C3120 +
                   ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                     C115 * C423 + C103 * C433) *
                        C2464 -
                    ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                      C113 * C436 + C101 * C453) *
                         C2457 +
                     (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                      C113 * C424 + C101 * C437) *
                         C2463) +
                    (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                     C115 * C438 + C103 * C454) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C48437 +
                  (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                     C115 * C270 + C103 * C280) *
                        C2464 -
                    ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                      C113 * C283 + C101 * C300) *
                         C2457 +
                     (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                      C113 * C271 + C101 * C284) *
                         C2463) +
                    (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                     C115 * C285 + C103 * C301) *
                        C48054) *
                       C48286 * C48301 * C3120 +
                   ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C2463 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C2457 -
                    (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                     C113 * C824 + C101 * C829) *
                        C2464 -
                    (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                     C113 * C832 + C101 * C839) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C48425 +
                  (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                     C115 * C275 + C103 * C290) *
                        C2463 +
                    (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                     C115 * C293 + C103 * C305) *
                        C2457 -
                    (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                     C113 * C274 + C101 * C289) *
                        C2464 -
                    (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                     C113 * C292 + C101 * C304) *
                        C48054) *
                       C48286 * C48301 * C3120 +
                   ((C113 * C1169 + C101 * C1184 + C114 * C1168 + C102 * C1183 +
                     C115 * C1457 + C103 * C1458) *
                        C2464 -
                    ((C115 * C1180 + C103 * C1195 + C114 * C1181 +
                      C102 * C1196 + C113 * C1182 + C101 * C1197) *
                         C2457 +
                     (C115 * C1168 + C103 * C1183 + C114 * C1169 +
                      C102 * C1184 + C113 * C1170 + C101 * C1185) *
                         C2463) +
                    (C113 * C1181 + C101 * C1196 + C114 * C1180 + C102 * C1195 +
                     C115 * C1459 + C103 * C1460) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C48398)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C2355 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48443 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C2356 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48436 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C2357 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48423 -
                   (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                    C113 * C124 + C101 * C134) *
                       C2358 -
                   (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                    C113 * C135 + C101 * C145) *
                       C48402) *
                      C48286 * C48301 * C3120 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C2356 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48443 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C2355) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48436 -
                   (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                    C113 * C422 + C101 * C432) *
                       C2357 -
                   (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                    C113 * C434 + C101 * C451) *
                       C48423 +
                   (C113 * C423 + C101 * C433 + C114 * C425 + C102 * C439 +
                    C115 * C673 + C103 * C674) *
                       C2358 +
                   (C113 * C438 + C101 * C454 + C114 * C440 + C102 * C455 +
                    C115 * C675 + C103 * C676) *
                       C48402) *
                      C48286 * C48301 * C48184) *
                 C48085) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C2463 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C2457 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C2464 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48054) *
                      C48286 * C48301 * C48445 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C2464 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C2457 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C2463) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48054) *
                      C48286 * C48301 * C48442 +
                  ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                    C115 * C428 + C103 * C443) *
                       C2463 +
                   (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                    C115 * C446 + C103 * C458) *
                       C2457 -
                   (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
                    C113 * C427 + C101 * C442) *
                       C2464 -
                   (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
                    C113 * C445 + C101 * C457) *
                       C48054) *
                      C48286 * C48301 * C48433 +
                  ((C113 * C1862 + C101 * C1871 + C114 * C1861 + C102 * C1870 +
                    C115 * C2137 + C103 * C2138) *
                       C2464 -
                   ((C115 * C1867 + C103 * C1879 + C114 * C1868 + C102 * C1880 +
                     C113 * C1869 + C101 * C1881) *
                        C2457 +
                    (C115 * C1861 + C103 * C1870 + C114 * C1862 + C102 * C1871 +
                     C113 * C1863 + C101 * C1872) *
                        C2463) +
                   (C113 * C1868 + C101 * C1880 + C114 * C1867 + C102 * C1879 +
                    C115 * C2139 + C103 * C2140) *
                       C48054) *
                      C48286 * C48301 * C48414) *
                 C48085) /
                    (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C47161 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48049 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C47157 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48057 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C47167 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C2723) *
                      C48286 * C48301 * C48180 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C47157 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48049 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C47161) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48057 -
                   (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                    C113 * C422 + C101 * C432) *
                       C47167 -
                   (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                    C113 * C434 + C101 * C451) *
                       C2723) *
                      C48286 * C48301 * C48187 +
                  ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                    C115 * C428 + C103 * C443) *
                       C47161 +
                   (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                    C115 * C446 + C103 * C458) *
                       C48049 -
                   (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
                    C113 * C427 + C101 * C442) *
                       C47157 -
                   (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
                    C113 * C445 + C101 * C457) *
                       C48057 +
                   (C113 * C428 + C101 * C443 + C114 * C429 + C102 * C447 +
                    C115 * C430 + C103 * C449) *
                       C47167 +
                   (C113 * C446 + C101 * C458 + C114 * C448 + C102 * C459 +
                    C115 * C450 + C103 * C460) *
                       C2723) *
                      C48286 * C48301 * C3628) *
                 C48085) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C2355 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48443 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C2356 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48436 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C2357 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48423 -
                   (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                    C113 * C124 + C101 * C134) *
                       C2358 -
                   (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                    C113 * C135 + C101 * C145) *
                       C48402) *
                      C48286 * C48301 * C3120 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C2356 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48443 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C2355) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C48436 -
                   (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                    C113 * C422 + C101 * C432) *
                       C2357 -
                   (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                    C113 * C434 + C101 * C451) *
                       C48423 +
                   (C113 * C423 + C101 * C433 + C114 * C425 + C102 * C439 +
                    C115 * C673 + C103 * C674) *
                       C2358 +
                   (C113 * C438 + C101 * C454 + C114 * C440 + C102 * C455 +
                    C115 * C675 + C103 * C676) *
                       C48402) *
                      C48286 * C48301 * C48184) *
                 C48085) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C2463 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C2457 -
                    (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                     C113 * C122 + C101 * C129) *
                        C2464 -
                    (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                     C113 * C132 + C101 * C143) *
                        C48054) *
                       C48286 * C48301 * C3120 +
                   ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                     C115 * C423 + C103 * C433) *
                        C2464 -
                    ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                      C113 * C436 + C101 * C453) *
                         C2457 +
                     (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                      C113 * C424 + C101 * C437) *
                         C2463) +
                    (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                     C115 * C438 + C103 * C454) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C48437 +
                  (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                     C115 * C270 + C103 * C280) *
                        C2464 -
                    ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                      C113 * C283 + C101 * C300) *
                         C2457 +
                     (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                      C113 * C271 + C101 * C284) *
                         C2463) +
                    (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                     C115 * C285 + C103 * C301) *
                        C48054) *
                       C48286 * C48301 * C3120 +
                   ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C2463 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C2457 -
                    (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                     C113 * C824 + C101 * C829) *
                        C2464 -
                    (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                     C113 * C832 + C101 * C839) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C48425 +
                  (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                     C115 * C275 + C103 * C290) *
                        C2463 +
                    (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                     C115 * C293 + C103 * C305) *
                        C2457 -
                    (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                     C113 * C274 + C101 * C289) *
                        C2464 -
                    (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                     C113 * C292 + C101 * C304) *
                        C48054) *
                       C48286 * C48301 * C3120 +
                   ((C113 * C1169 + C101 * C1184 + C114 * C1168 + C102 * C1183 +
                     C115 * C1457 + C103 * C1458) *
                        C2464 -
                    ((C115 * C1180 + C103 * C1195 + C114 * C1181 +
                      C102 * C1196 + C113 * C1182 + C101 * C1197) *
                         C2457 +
                     (C115 * C1168 + C103 * C1183 + C114 * C1169 +
                      C102 * C1184 + C113 * C1170 + C101 * C1185) *
                         C2463) +
                    (C113 * C1181 + C101 * C1196 + C114 * C1180 + C102 * C1195 +
                     C115 * C1459 + C103 * C1460) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C48398)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C565 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C559 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C566 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C560 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C567 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C561 -
                   (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                    C113 * C124 + C101 * C134) *
                       C568 -
                   (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                    C113 * C135 + C101 * C145) *
                       C48402) *
                      C48286 * C48301 * C48097 * C48366 +
                  ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C566 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C559 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C565) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C560 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C567 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C561 +
                   (C113 * C270 + C101 * C280 + C114 * C272 + C102 * C286 +
                    C115 * C569 + C103 * C570) *
                       C568 +
                   (C113 * C285 + C101 * C301 + C114 * C287 + C102 * C302 +
                    C115 * C571 + C103 * C572) *
                       C48402) *
                      C48286 * C48301 * C48097 * C48144)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C47151 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48352 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C47132 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48054) *
                      C48286 * C48301 * C48097 * C1301 +
                  ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C47132 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48352 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C47151) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48054) *
                      C48286 * C48301 * C48097 * C1302 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C47151 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48352 -
                   (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                    C113 * C274 + C101 * C289) *
                       C47132 -
                   (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                    C113 * C292 + C101 * C304) *
                       C48054) *
                      C48286 * C48301 * C48097 * C1303 +
                  ((C113 * C1032 + C101 * C1041 + C114 * C1031 + C102 * C1040 +
                    C115 * C1307 + C103 * C1308) *
                       C47132 -
                   ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                     C113 * C1039 + C101 * C1051) *
                        C48352 +
                    (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                     C113 * C1033 + C101 * C1042) *
                        C47151) +
                   (C113 * C1038 + C101 * C1050 + C114 * C1037 + C102 * C1049 +
                    C115 * C1309 + C103 * C1310) *
                       C48054) *
                      C48286 * C48301 * C48097 * C48408)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C265 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C259 -
                    (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                     C113 * C122 + C101 * C129) *
                        C266 -
                    (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                     C113 * C132 + C101 * C143) *
                        C260 +
                    (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                     C115 * C125 + C103 * C136) *
                        C267 +
                    (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                     C115 * C137 + C103 * C146) *
                        C48392) *
                       C48286 * C48301 * C48367 +
                   ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                     C115 * C423 + C103 * C433) *
                        C266 -
                    ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                      C113 * C436 + C101 * C453) *
                         C259 +
                     (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                      C113 * C424 + C101 * C437) *
                         C265) +
                    (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                     C115 * C438 + C103 * C454) *
                        C260 -
                    (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                     C113 * C422 + C101 * C432) *
                        C267 -
                    (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                     C113 * C434 + C101 * C451) *
                        C48392) *
                       C48286 * C48301 * C48184) *
                      C48366 +
                  (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                     C115 * C270 + C103 * C280) *
                        C266 -
                    ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                      C113 * C283 + C101 * C300) *
                         C259 +
                     (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                      C113 * C271 + C101 * C284) *
                         C265) +
                    (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                     C115 * C285 + C103 * C301) *
                        C260 -
                    (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                     C113 * C269 + C101 * C279) *
                        C267 -
                    (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                     C113 * C281 + C101 * C298) *
                        C48392) *
                       C48286 * C48301 * C48367 +
                   ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C265 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C259 -
                    (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                     C113 * C824 + C101 * C829) *
                        C266 -
                    (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                     C113 * C832 + C101 * C839) *
                        C260 +
                    (C113 * C825 + C101 * C830 + C114 * C826 + C102 * C834 +
                     C115 * C827 + C103 * C836) *
                        C267 +
                    (C113 * C833 + C101 * C840 + C114 * C835 + C102 * C841 +
                     C115 * C837 + C103 * C842) *
                        C48392) *
                       C48286 * C48301 * C48184) *
                      C48144)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C1030 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C48044) *
                       C48286 * C48301 * C48367 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48044 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C1030) *
                       C48286 * C48301 * C48184) *
                      C1301 +
                  (((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C1030 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C48044) *
                       C48286 * C48301 * C48184 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48044 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C1030) *
                       C48286 * C48301 * C48367) *
                      C1302 +
                  (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                     C115 * C275 + C103 * C290) *
                        C1030 +
                    (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                     C115 * C293 + C103 * C305) *
                        C48044) *
                       C48286 * C48301 * C48367 -
                   ((C115 * C1180 + C103 * C1195 + C114 * C1181 + C102 * C1196 +
                     C113 * C1182 + C101 * C1197) *
                        C48044 +
                    (C115 * C1168 + C103 * C1183 + C114 * C1169 + C102 * C1184 +
                     C113 * C1170 + C101 * C1185) *
                        C1030) *
                       C48286 * C48301 * C48184) *
                      C1303 +
                  (((C113 * C1559 + C101 * C1562 + C114 * C1560 + C102 * C1563 +
                     C115 * C1561 + C103 * C1564) *
                        C1030 +
                    (C113 * C1565 + C101 * C1568 + C114 * C1566 + C102 * C1569 +
                     C115 * C1567 + C103 * C1570) *
                        C48044) *
                       C48286 * C48301 * C48184 -
                   ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                     C113 * C1039 + C101 * C1051) *
                        C48044 +
                    (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                     C113 * C1033 + C101 * C1042) *
                        C1030) *
                       C48286 * C48301 * C48367) *
                      C48408)) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C265 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C259 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C266 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C260 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C267 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48437 +
                  ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C266 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C259 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C265) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C260 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C267 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48425 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C265 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C259 -
                   (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                    C113 * C274 + C101 * C289) *
                       C266 -
                   (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                    C113 * C292 + C101 * C304) *
                       C260 +
                   (C113 * C275 + C101 * C290 + C114 * C276 + C102 * C294 +
                    C115 * C277 + C103 * C296) *
                       C267 +
                   (C113 * C293 + C101 * C305 + C114 * C295 + C102 * C306 +
                    C115 * C297 + C103 * C307) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48398)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                   C115 * C123 + C103 * C130) *
                      C116 +
                  (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                   C115 * C133 + C103 * C144) *
                      C104 -
                  (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                   C113 * C122 + C101 * C129) *
                      C117 -
                  (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                   C113 * C132 + C101 * C143) *
                      C105 +
                  (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                   C115 * C125 + C103 * C136) *
                      C118 +
                  (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                   C115 * C137 + C103 * C146) *
                      C106 -
                  (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                   C113 * C124 + C101 * C134) *
                      C119 -
                  (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                   C113 * C135 + C101 * C145) *
                      C107 +
                  (C113 * C125 + C101 * C136 + C114 * C126 + C102 * C138 +
                   C115 * C127 + C103 * C140) *
                      C120 +
                  (C113 * C137 + C101 * C146 + C114 * C139 + C102 * C147 +
                   C115 * C141 + C103 * C148) *
                      C108) *
                 C48286 * C48301 * C48097 * C48085) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C265 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C259 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C266 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C260 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C267 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48392) *
                      C48286 * C48301 * C48438 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C266 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C259 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C265) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C260 -
                   (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                    C113 * C422 + C101 * C432) *
                       C267 -
                   (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                    C113 * C434 + C101 * C451) *
                       C48392) *
                      C48286 * C48301 * C48427 +
                  ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                    C115 * C428 + C103 * C443) *
                       C265 +
                   (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                    C115 * C446 + C103 * C458) *
                       C259 -
                   (C115 * C429 + C103 * C447 + C114 * C428 + C102 * C443 +
                    C113 * C427 + C101 * C442) *
                       C266 -
                   (C115 * C448 + C103 * C459 + C114 * C446 + C102 * C458 +
                    C113 * C445 + C101 * C457) *
                       C260 +
                   (C113 * C428 + C101 * C443 + C114 * C429 + C102 * C447 +
                    C115 * C430 + C103 * C449) *
                       C267 +
                   (C113 * C446 + C101 * C458 + C114 * C448 + C102 * C459 +
                    C115 * C450 + C103 * C460) *
                       C48392) *
                      C48286 * C48301 * C48401) *
                 C48085) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C959 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48434 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C960 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48421 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C961 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48392) *
                      C48286 * C48301 * C48097 * C956 +
                  ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C960 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48434 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C959) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48421 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C961 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C48392) *
                      C48286 * C48301 * C48097 * C957 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C959 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48434 -
                   (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                    C113 * C274 + C101 * C289) *
                       C960 -
                   (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                    C113 * C292 + C101 * C304) *
                       C48421 +
                   (C113 * C275 + C101 * C290 + C114 * C276 + C102 * C294 +
                    C115 * C277 + C103 * C296) *
                       C961 +
                   (C113 * C293 + C101 * C305 + C114 * C295 + C102 * C306 +
                    C115 * C297 + C103 * C307) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48398)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C1030 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48044) *
                      C48286 * C48301 * C48097 * C1025 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C48044 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C1030) *
                      C48286 * C48301 * C48097 * C1026 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C1030 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48044) *
                      C48286 * C48301 * C48097 * C1027 -
                  ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                    C113 * C1039 + C101 * C1051) *
                       C48044 +
                   (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                    C113 * C1033 + C101 * C1042) *
                       C1030) *
                      C48286 * C48301 * C48097 * C1028 +
                  ((C113 * C1034 + C101 * C1043 + C114 * C1035 + C102 * C1044 +
                    C115 * C1036 + C103 * C1045) *
                       C1030 +
                   (C113 * C1046 + C101 * C1052 + C114 * C1047 + C102 * C1053 +
                    C115 * C1048 + C103 * C1054) *
                       C48044) *
                      C48286 * C48301 * C48097 * C1029)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C1030 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C48044) *
                       C48286 * C48301 * C48438 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C48044 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C1030) *
                       C48286 * C48301 * C48427 +
                   ((C113 * C426 + C101 * C441 + C114 * C427 + C102 * C442 +
                     C115 * C428 + C103 * C443) *
                        C1030 +
                    (C113 * C444 + C101 * C456 + C114 * C445 + C102 * C457 +
                     C115 * C446 + C103 * C458) *
                        C48044) *
                       C48286 * C48301 * C48401) *
                      C956 +
                  (((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C1030 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C48044) *
                       C48286 * C48301 * C48427 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48044 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C1030) *
                       C48286 * C48301 * C48438 -
                   ((C115 * C1174 + C103 * C1192 + C114 * C1175 + C102 * C1193 +
                     C113 * C1176 + C101 * C1194) *
                        C48044 +
                    (C115 * C1165 + C103 * C1177 + C114 * C1166 + C102 * C1178 +
                     C113 * C1167 + C101 * C1179) *
                        C1030) *
                       C48286 * C48301 * C48401) *
                      C957 +
                  (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                     C115 * C275 + C103 * C290) *
                        C1030 +
                    (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                     C115 * C293 + C103 * C305) *
                        C48044) *
                       C48286 * C48301 * C48438 -
                   ((C115 * C1180 + C103 * C1195 + C114 * C1181 + C102 * C1196 +
                     C113 * C1182 + C101 * C1197) *
                        C48044 +
                    (C115 * C1168 + C103 * C1183 + C114 * C1169 + C102 * C1184 +
                     C113 * C1170 + C101 * C1185) *
                        C1030) *
                       C48286 * C48301 * C48427 +
                   ((C113 * C1171 + C101 * C1186 + C114 * C1172 + C102 * C1187 +
                     C115 * C1173 + C103 * C1188) *
                        C1030 +
                    (C113 * C1189 + C101 * C1198 + C114 * C1190 + C102 * C1199 +
                     C115 * C1191 + C103 * C1200) *
                        C48044) *
                       C48286 * C48301 * C48401) *
                      C48398)) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C565 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C559 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C566 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C560 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C567 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C561 -
                   (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                    C113 * C124 + C101 * C134) *
                       C568 -
                   (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                    C113 * C135 + C101 * C145) *
                       C48402) *
                      C48286 * C48301 * C48367 +
                  ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                    C115 * C423 + C103 * C433) *
                       C566 -
                   ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                     C113 * C436 + C101 * C453) *
                        C559 +
                    (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                     C113 * C424 + C101 * C437) *
                        C565) +
                   (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                    C115 * C438 + C103 * C454) *
                       C560 -
                   (C115 * C425 + C103 * C439 + C114 * C423 + C102 * C433 +
                    C113 * C422 + C101 * C432) *
                       C567 -
                   (C115 * C440 + C103 * C455 + C114 * C438 + C102 * C454 +
                    C113 * C434 + C101 * C451) *
                       C561 +
                   (C113 * C423 + C101 * C433 + C114 * C425 + C102 * C439 +
                    C115 * C673 + C103 * C674) *
                       C568 +
                   (C113 * C438 + C101 * C454 + C114 * C440 + C102 * C455 +
                    C115 * C675 + C103 * C676) *
                       C48402) *
                      C48286 * C48301 * C48184) *
                 C48085) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                     C115 * C123 + C103 * C130) *
                        C47151 +
                    (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                     C115 * C133 + C103 * C144) *
                        C48352 -
                    (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                     C113 * C122 + C101 * C129) *
                        C47132 -
                    (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                     C113 * C132 + C101 * C143) *
                        C48054) *
                       C48286 * C48301 * C48367 +
                   ((C113 * C421 + C101 * C431 + C114 * C422 + C102 * C432 +
                     C115 * C423 + C103 * C433) *
                        C47132 -
                    ((C115 * C434 + C103 * C451 + C114 * C435 + C102 * C452 +
                      C113 * C436 + C101 * C453) *
                         C48352 +
                     (C115 * C422 + C103 * C432 + C114 * C421 + C102 * C431 +
                      C113 * C424 + C101 * C437) *
                         C47151) +
                    (C113 * C435 + C101 * C452 + C114 * C434 + C102 * C451 +
                     C115 * C438 + C103 * C454) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C956 +
                  (((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                     C115 * C270 + C103 * C280) *
                        C47132 -
                    ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                      C113 * C283 + C101 * C300) *
                         C48352 +
                     (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                      C113 * C271 + C101 * C284) *
                         C47151) +
                    (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                     C115 * C285 + C103 * C301) *
                        C48054) *
                       C48286 * C48301 * C48367 +
                   ((C113 * C823 + C101 * C828 + C114 * C824 + C102 * C829 +
                     C115 * C825 + C103 * C830) *
                        C47151 +
                    (C113 * C831 + C101 * C838 + C114 * C832 + C102 * C839 +
                     C115 * C833 + C103 * C840) *
                        C48352 -
                    (C115 * C826 + C103 * C834 + C114 * C825 + C102 * C830 +
                     C113 * C824 + C101 * C829) *
                        C47132 -
                    (C115 * C835 + C103 * C841 + C114 * C833 + C102 * C840 +
                     C113 * C832 + C101 * C839) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C957 +
                  (((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                     C115 * C275 + C103 * C290) *
                        C47151 +
                    (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                     C115 * C293 + C103 * C305) *
                        C48352 -
                    (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                     C113 * C274 + C101 * C289) *
                        C47132 -
                    (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                     C113 * C292 + C101 * C304) *
                        C48054) *
                       C48286 * C48301 * C48367 +
                   ((C113 * C1169 + C101 * C1184 + C114 * C1168 + C102 * C1183 +
                     C115 * C1457 + C103 * C1458) *
                        C47132 -
                    ((C115 * C1180 + C103 * C1195 + C114 * C1181 +
                      C102 * C1196 + C113 * C1182 + C101 * C1197) *
                         C48352 +
                     (C115 * C1168 + C103 * C1183 + C114 * C1169 +
                      C102 * C1184 + C113 * C1170 + C101 * C1185) *
                         C47151) +
                    (C113 * C1181 + C101 * C1196 + C114 * C1180 + C102 * C1195 +
                     C115 * C1459 + C103 * C1460) *
                        C48054) *
                       C48286 * C48301 * C48184) *
                      C48398)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                   C115 * C123 + C103 * C130) *
                      C116 +
                  (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                   C115 * C133 + C103 * C144) *
                      C104 -
                  (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                   C113 * C122 + C101 * C129) *
                      C117 -
                  (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                   C113 * C132 + C101 * C143) *
                      C105 +
                  (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                   C115 * C125 + C103 * C136) *
                      C118 +
                  (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                   C115 * C137 + C103 * C146) *
                      C106 -
                  (C115 * C126 + C103 * C138 + C114 * C125 + C102 * C136 +
                   C113 * C124 + C101 * C134) *
                      C119 -
                  (C115 * C139 + C103 * C147 + C114 * C137 + C102 * C146 +
                   C113 * C135 + C101 * C145) *
                      C107 +
                  (C113 * C125 + C101 * C136 + C114 * C126 + C102 * C138 +
                   C115 * C127 + C103 * C140) *
                      C120 +
                  (C113 * C137 + C101 * C146 + C114 * C139 + C102 * C147 +
                   C115 * C141 + C103 * C148) *
                      C108) *
                 C48286 * C48301 * C48097 * C48085) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C265 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C259 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C266 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C260 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C267 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48437 +
                  ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C266 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C259 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C265) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C260 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C267 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48425 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C265 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C259 -
                   (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                    C113 * C274 + C101 * C289) *
                       C266 -
                   (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                    C113 * C292 + C101 * C304) *
                       C260 +
                   (C113 * C275 + C101 * C290 + C114 * C276 + C102 * C294 +
                    C115 * C277 + C103 * C296) *
                       C267 +
                   (C113 * C293 + C101 * C305 + C114 * C295 + C102 * C306 +
                    C115 * C297 + C103 * C307) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48398)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C959 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48434 -
                   (C115 * C124 + C103 * C134 + C114 * C123 + C102 * C130 +
                    C113 * C122 + C101 * C129) *
                       C960 -
                   (C115 * C135 + C103 * C145 + C114 * C133 + C102 * C144 +
                    C113 * C132 + C101 * C143) *
                       C48421 +
                   (C113 * C123 + C101 * C130 + C114 * C124 + C102 * C134 +
                    C115 * C125 + C103 * C136) *
                       C961 +
                   (C113 * C133 + C101 * C144 + C114 * C135 + C102 * C145 +
                    C115 * C137 + C103 * C146) *
                       C48392) *
                      C48286 * C48301 * C48097 * C956 +
                  ((C113 * C268 + C101 * C278 + C114 * C269 + C102 * C279 +
                    C115 * C270 + C103 * C280) *
                       C960 -
                   ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                     C113 * C283 + C101 * C300) *
                        C48434 +
                    (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                     C113 * C271 + C101 * C284) *
                        C959) +
                   (C113 * C282 + C101 * C299 + C114 * C281 + C102 * C298 +
                    C115 * C285 + C103 * C301) *
                       C48421 -
                   (C115 * C272 + C103 * C286 + C114 * C270 + C102 * C280 +
                    C113 * C269 + C101 * C279) *
                       C961 -
                   (C115 * C287 + C103 * C302 + C114 * C285 + C102 * C301 +
                    C113 * C281 + C101 * C298) *
                       C48392) *
                      C48286 * C48301 * C48097 * C957 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C959 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48434 -
                   (C115 * C276 + C103 * C294 + C114 * C275 + C102 * C290 +
                    C113 * C274 + C101 * C289) *
                       C960 -
                   (C115 * C295 + C103 * C306 + C114 * C293 + C102 * C305 +
                    C113 * C292 + C101 * C304) *
                       C48421 +
                   (C113 * C275 + C101 * C290 + C114 * C276 + C102 * C294 +
                    C115 * C277 + C103 * C296) *
                       C961 +
                   (C113 * C293 + C101 * C305 + C114 * C295 + C102 * C306 +
                    C115 * C297 + C103 * C307) *
                       C48392) *
                      C48286 * C48301 * C48097 * C48398)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C121 + C101 * C128 + C114 * C122 + C102 * C129 +
                    C115 * C123 + C103 * C130) *
                       C1030 +
                   (C113 * C131 + C101 * C142 + C114 * C132 + C102 * C143 +
                    C115 * C133 + C103 * C144) *
                       C48044) *
                      C48286 * C48301 * C48097 * C1025 -
                  ((C115 * C281 + C103 * C298 + C114 * C282 + C102 * C299 +
                    C113 * C283 + C101 * C300) *
                       C48044 +
                   (C115 * C269 + C103 * C279 + C114 * C268 + C102 * C278 +
                    C113 * C271 + C101 * C284) *
                       C1030) *
                      C48286 * C48301 * C48097 * C1026 +
                  ((C113 * C273 + C101 * C288 + C114 * C274 + C102 * C289 +
                    C115 * C275 + C103 * C290) *
                       C1030 +
                   (C113 * C291 + C101 * C303 + C114 * C292 + C102 * C304 +
                    C115 * C293 + C103 * C305) *
                       C48044) *
                      C48286 * C48301 * C48097 * C1027 -
                  ((C115 * C1037 + C103 * C1049 + C114 * C1038 + C102 * C1050 +
                    C113 * C1039 + C101 * C1051) *
                       C48044 +
                   (C115 * C1031 + C103 * C1040 + C114 * C1032 + C102 * C1041 +
                    C113 * C1033 + C101 * C1042) *
                       C1030) *
                      C48286 * C48301 * C48097 * C1028 +
                  ((C113 * C1034 + C101 * C1043 + C114 * C1035 + C102 * C1044 +
                    C115 * C1036 + C103 * C1045) *
                       C1030 +
                   (C113 * C1046 + C101 * C1052 + C114 * C1047 + C102 * C1053 +
                    C115 * C1048 + C103 * C1054) *
                       C48044) *
                      C48286 * C48301 * C48097 * C1029)) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C47161 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48049 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C47157 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48057 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C47167 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C2723) *
               C4603 +
           ((C4802 + C4803) * C47161 + (C4804 + C4805) * C48049 -
            (C4806 + C4807) * C47157 - (C4808 + C4809) * C48057 +
            (C4810 + C4811) * C47167 + (C4812 + C4813) * C2723) *
               C48416) *
              C48301 * C48097 * C48140 +
          (((C4807 + C4806) * C47157 -
            ((C4805 + C4804) * C48049 + (C4803 + C4802) * C47161) +
            (C4809 + C4808) * C48057 - (C4811 + C4810) * C47167 -
            (C4813 + C4812) * C2723) *
               C4603 +
           ((C4814 + C4815) * C47157 -
            ((C4816 + C4817) * C48049 + (C4818 + C4819) * C47161) +
            (C4820 + C4821) * C48057 - (C4822 + C4823) * C47167 -
            (C4824 + C4825) * C2723) *
               C48416) *
              C48301 * C48097 * C48147 +
          (((C4819 + C4818) * C47161 + (C4817 + C4816) * C48049 -
            (C4815 + C4814) * C47157 - (C4821 + C4820) * C48057 +
            (C4823 + C4822) * C47167 + (C4825 + C4824) * C2723) *
               C4603 +
           ((C5726 + C5727) * C47161 + (C5728 + C5729) * C48049 -
            (C6062 + C6063) * C47157 - (C6064 + C6065) * C48057 +
            (C4605 * C1031 + C4601 * C1040 + C4606 * C1307 + C48385 * C1308) *
                C47167 +
            (C4605 * C1037 + C4601 * C1049 + C4606 * C1309 + C48385 * C1310) *
                C2723) *
               C48416) *
              C48301 * C48097 * C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C2463 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C2457 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C2464 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C4603 +
            ((C4802 + C4803) * C2463 + (C4804 + C4805) * C2457 -
             (C4806 + C4807) * C2464 - (C4808 + C4809) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C2464 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C2457 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C2463) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48054) *
                C4603 +
            ((C5462 + C5463) * C2464 -
             ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
             (C5468 + C5469) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48140 +
          ((((C4807 + C4806) * C2464 -
             ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
             (C4809 + C4808) * C48054) *
                C4603 +
            ((C4814 + C4815) * C2464 -
             ((C4816 + C4817) * C2457 + (C4818 + C4819) * C2463) +
             (C4820 + C4821) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C5467 + C5466) * C2463 + (C5465 + C5464) * C2457 -
             (C5463 + C5462) * C2464 - (C5469 + C5468) * C48054) *
                C4603 +
            ((C5916 + C5917) * C2463 + (C5918 + C5919) * C2457 -
             (C6268 + C6269) * C2464 - (C6270 + C6271) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48147 +
          ((((C4819 + C4818) * C2463 + (C4817 + C4816) * C2457 -
             (C4815 + C4814) * C2464 - (C4821 + C4820) * C48054) *
                C4603 +
            ((C5726 + C5727) * C2463 + (C5728 + C5729) * C2457 -
             (C6062 + C6063) * C2464 - (C6064 + C6065) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C6269 + C6268) * C2464 -
             ((C5919 + C5918) * C2457 + (C5917 + C5916) * C2463) +
             (C6271 + C6270) * C48054) *
                C4603 +
            ((C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48385 * C1564) *
                 C2464 -
             ((C6418 + C6419) * C2457 + (C6420 + C6421) * C2463) +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2463 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C2457 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2464 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C4603 +
           ((C4802 + C4803) * C2463 + (C4804 + C4805) * C2457 -
            (C4806 + C4807) * C2464 - (C4808 + C4809) * C48054) *
               C48416) *
              C48301 * C48097 * C48444 +
          (((C4807 + C4806) * C2464 -
            ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
            (C4809 + C4808) * C48054) *
               C4603 +
           ((C4814 + C4815) * C2464 -
            ((C4816 + C4817) * C2457 + (C4818 + C4819) * C2463) +
            (C4820 + C4821) * C48054) *
               C48416) *
              C48301 * C48097 * C48440 +
          (((C4819 + C4818) * C2463 + (C4817 + C4816) * C2457 -
            (C4815 + C4814) * C2464 - (C4821 + C4820) * C48054) *
               C4603 +
           ((C5726 + C5727) * C2463 + (C5728 + C5729) * C2457 -
            (C6062 + C6063) * C2464 - (C6064 + C6065) * C48054) *
               C48416) *
              C48301 * C48097 * C48430 +
          (((C6063 + C6062) * C2464 -
            ((C5729 + C5728) * C2457 + (C5727 + C5726) * C2463) +
            (C6065 + C6064) * C48054) *
               C4603 +
           ((C4605 * C1035 + C4601 * C1044 + C4606 * C1036 + C48385 * C1045) *
                C2464 -
            ((C5730 + C5731) * C2457 + (C5732 + C5733) * C2463) +
            (C4605 * C1047 + C4601 * C1053 + C4606 * C1048 + C48385 * C1054) *
                C48054) *
               C48416) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2355 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48443 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2356 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48436 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C2357 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48423 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C2358 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C4603 +
           ((C4802 + C4803) * C2355 + (C4804 + C4805) * C48443 -
            (C4806 + C4807) * C2356 - (C4808 + C4809) * C48436 +
            (C4810 + C4811) * C2357 + (C4812 + C4813) * C48423 -
            (C5110 + C5111) * C2358 - (C5112 + C5113) * C48402) *
               C48416) *
              C48301 * C48097 * C2353 +
          (((C4807 + C4806) * C2356 -
            ((C4805 + C4804) * C48443 + (C4803 + C4802) * C2355) +
            (C4809 + C4808) * C48436 - (C4811 + C4810) * C2357 -
            (C4813 + C4812) * C48423 + (C5111 + C5110) * C2358 +
            (C5113 + C5112) * C48402) *
               C4603 +
           ((C4814 + C4815) * C2356 -
            ((C4816 + C4817) * C48443 + (C4818 + C4819) * C2355) +
            (C4820 + C4821) * C48436 - (C4822 + C4823) * C2357 -
            (C4824 + C4825) * C48423 +
            (C4605 * C276 + C4601 * C294 + C4606 * C277 + C48385 * C296) *
                C2358 +
            (C4605 * C295 + C4601 * C306 + C4606 * C297 + C48385 * C307) *
                C48402) *
               C48416) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C2463 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C2457 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C2464 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C4603 +
            ((C4802 + C4803) * C2463 + (C4804 + C4805) * C2457 -
             (C4806 + C4807) * C2464 - (C4808 + C4809) * C48054) *
                C48416) *
               C48301 * C48438 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C2464 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C2457 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C2463) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48054) *
                C4603 +
            ((C5462 + C5463) * C2464 -
             ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
             (C5468 + C5469) * C48054) *
                C48416) *
               C48301 * C48427 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C2463 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C2457 -
             (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                 C2464 -
             (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                 C48054) *
                C4603 +
            ((C5912 + C5913) * C2463 + (C5914 + C5915) * C2457 -
             (C7006 + C7007) * C2464 - (C7008 + C7009) * C48054) *
                C48416) *
               C48301 * C48401) *
              C2353 +
          ((((C4807 + C4806) * C2464 -
             ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
             (C4809 + C4808) * C48054) *
                C4603 +
            ((C4814 + C4815) * C2464 -
             ((C4816 + C4817) * C2457 + (C4818 + C4819) * C2463) +
             (C4820 + C4821) * C48054) *
                C48416) *
               C48301 * C48438 +
           (((C5467 + C5466) * C2463 + (C5465 + C5464) * C2457 -
             (C5463 + C5462) * C2464 - (C5469 + C5468) * C48054) *
                C4603 +
            ((C5916 + C5917) * C2463 + (C5918 + C5919) * C2457 -
             (C6268 + C6269) * C2464 - (C6270 + C6271) * C48054) *
                C48416) *
               C48301 * C48427 +
           (((C7007 + C7006) * C2464 -
             ((C5915 + C5914) * C2457 + (C5913 + C5912) * C2463) +
             (C7009 + C7008) * C48054) *
                C4603 +
            ((C4605 * C1172 + C4601 * C1187 + C4606 * C1173 + C48385 * C1188) *
                 C2464 -
             ((C5920 + C5921) * C2457 + (C5922 + C5923) * C2463) +
             (C4605 * C1190 + C4601 * C1199 + C4606 * C1191 + C48385 * C1200) *
                 C48054) *
                C48416) *
               C48301 * C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47161 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48049 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47157 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48057 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C47167 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C2723) *
                C4603 +
            ((C4802 + C4803) * C47161 + (C4804 + C4805) * C48049 -
             (C4806 + C4807) * C47157 - (C4808 + C4809) * C48057 +
             (C4810 + C4811) * C47167 + (C4812 + C4813) * C2723) *
                C48416) *
               C48301 * C48367 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C47157 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C48049 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C47161) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48057 -
             (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                 C47167 -
             (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                 C2723) *
                C4603 +
            ((C5462 + C5463) * C47157 -
             ((C5464 + C5465) * C48049 + (C5466 + C5467) * C47161) +
             (C5468 + C5469) * C48057 - (C5470 + C5471) * C47167 -
             (C5472 + C5473) * C2723) *
                C48416) *
               C48301 * C48184) *
              C2353 +
          ((((C4807 + C4806) * C47157 -
             ((C4805 + C4804) * C48049 + (C4803 + C4802) * C47161) +
             (C4809 + C4808) * C48057 - (C4811 + C4810) * C47167 -
             (C4813 + C4812) * C2723) *
                C4603 +
            ((C4814 + C4815) * C47157 -
             ((C4816 + C4817) * C48049 + (C4818 + C4819) * C47161) +
             (C4820 + C4821) * C48057 - (C4822 + C4823) * C47167 -
             (C4824 + C4825) * C2723) *
                C48416) *
               C48301 * C48367 +
           (((C5467 + C5466) * C47161 + (C5465 + C5464) * C48049 -
             (C5463 + C5462) * C47157 - (C5469 + C5468) * C48057 +
             (C5471 + C5470) * C47167 + (C5473 + C5472) * C2723) *
                C4603 +
            ((C5916 + C5917) * C47161 + (C5918 + C5919) * C48049 -
             (C6268 + C6269) * C47157 - (C6270 + C6271) * C48057 +
             (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                 C47167 +
             (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                 C2723) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2355 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48443 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2356 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48436 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C2357 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48423 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C2358 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C4603 +
           ((C4802 + C4803) * C2355 + (C4804 + C4805) * C48443 -
            (C4806 + C4807) * C2356 - (C4808 + C4809) * C48436 +
            (C4810 + C4811) * C2357 + (C4812 + C4813) * C48423 -
            (C5110 + C5111) * C2358 - (C5112 + C5113) * C48402) *
               C48416) *
              C48301 * C48097 * C2353 +
          (((C4807 + C4806) * C2356 -
            ((C4805 + C4804) * C48443 + (C4803 + C4802) * C2355) +
            (C4809 + C4808) * C48436 - (C4811 + C4810) * C2357 -
            (C4813 + C4812) * C48423 + (C5111 + C5110) * C2358 +
            (C5113 + C5112) * C48402) *
               C4603 +
           ((C4814 + C4815) * C2356 -
            ((C4816 + C4817) * C48443 + (C4818 + C4819) * C2355) +
            (C4820 + C4821) * C48436 - (C4822 + C4823) * C2357 -
            (C4824 + C4825) * C48423 +
            (C4605 * C276 + C4601 * C294 + C4606 * C277 + C48385 * C296) *
                C2358 +
            (C4605 * C295 + C4601 * C306 + C4606 * C297 + C48385 * C307) *
                C48402) *
               C48416) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2463 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C2457 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2464 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C4603 +
           ((C4802 + C4803) * C2463 + (C4804 + C4805) * C2457 -
            (C4806 + C4807) * C2464 - (C4808 + C4809) * C48054) *
               C48416) *
              C48301 * C48097 * C48444 +
          (((C4807 + C4806) * C2464 -
            ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
            (C4809 + C4808) * C48054) *
               C4603 +
           ((C4814 + C4815) * C2464 -
            ((C4816 + C4817) * C2457 + (C4818 + C4819) * C2463) +
            (C4820 + C4821) * C48054) *
               C48416) *
              C48301 * C48097 * C48440 +
          (((C4819 + C4818) * C2463 + (C4817 + C4816) * C2457 -
            (C4815 + C4814) * C2464 - (C4821 + C4820) * C48054) *
               C4603 +
           ((C5726 + C5727) * C2463 + (C5728 + C5729) * C2457 -
            (C6062 + C6063) * C2464 - (C6064 + C6065) * C48054) *
               C48416) *
              C48301 * C48097 * C48430 +
          (((C6063 + C6062) * C2464 -
            ((C5729 + C5728) * C2457 + (C5727 + C5726) * C2463) +
            (C6065 + C6064) * C48054) *
               C4603 +
           ((C4605 * C1035 + C4601 * C1044 + C4606 * C1036 + C48385 * C1045) *
                C2464 -
            ((C5730 + C5731) * C2457 + (C5732 + C5733) * C2463) +
            (C4605 * C1047 + C4601 * C1053 + C4606 * C1048 + C48385 * C1054) *
                C48054) *
               C48416) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47151 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48352 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47132 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C4603 +
            ((C4802 + C4803) * C47151 + (C4804 + C4805) * C48352 -
             (C4806 + C4807) * C47132 - (C4808 + C4809) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C47132 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C48352 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C47151) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48054) *
                C4603 +
            ((C5462 + C5463) * C47132 -
             ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
             (C5468 + C5469) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48140 +
          ((((C4807 + C4806) * C47132 -
             ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
             (C4809 + C4808) * C48054) *
                C4603 +
            ((C4814 + C4815) * C47132 -
             ((C4816 + C4817) * C48352 + (C4818 + C4819) * C47151) +
             (C4820 + C4821) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C5467 + C5466) * C47151 + (C5465 + C5464) * C48352 -
             (C5463 + C5462) * C47132 - (C5469 + C5468) * C48054) *
                C4603 +
            ((C5916 + C5917) * C47151 + (C5918 + C5919) * C48352 -
             (C6268 + C6269) * C47132 - (C6270 + C6271) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48147 +
          ((((C4819 + C4818) * C47151 + (C4817 + C4816) * C48352 -
             (C4815 + C4814) * C47132 - (C4821 + C4820) * C48054) *
                C4603 +
            ((C5726 + C5727) * C47151 + (C5728 + C5729) * C48352 -
             (C6062 + C6063) * C47132 - (C6064 + C6065) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C6269 + C6268) * C47132 -
             ((C5919 + C5918) * C48352 + (C5917 + C5916) * C47151) +
             (C6271 + C6270) * C48054) *
                C4603 +
            ((C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48385 * C1564) *
                 C47132 -
             ((C6418 + C6419) * C48352 + (C6420 + C6421) * C47151) +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C48180 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C48187 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C1030 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C48044) *
                C4603 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48416) *
               C48301 * C3628) *
              C48140 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C48187 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C48180 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48416 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C4603) *
               C48301 * C3628) *
              C48147 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
            ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
               C48301 * C48180 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48416 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C4603) *
               C48301 * C48187 +
           (((C5923 + C5922) * C1030 + (C5921 + C5920) * C48044) * C4603 +
            ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48385 * C5882) *
                 C1030 +
             (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48385 * C5886) *
                 C48044) *
                C48416) *
               C48301 * C3628) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C3120 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C48184) *
              C48444 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C48184 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C3120) *
              C48440 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
            ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
               C48301 * C3120 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48416 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C4603) *
               C48301 * C48184) *
              C48430 +
          ((((C6421 + C6420) * C1030 + (C6419 + C6418) * C48044) * C4603 +
            ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48385 * C6404) *
                 C1030 +
             (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48385 * C6408) *
                 C48044) *
                C48416) *
               C48301 * C48184 -
           (((C5730 + C5731) * C48044 + (C5732 + C5733) * C1030) * C48416 +
            ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C4603) *
               C48301 * C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C959 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48434 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C960 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48421 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C961 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C48392) *
                C4603 +
            ((C4802 + C4803) * C959 + (C4804 + C4805) * C48434 -
             (C4806 + C4807) * C960 - (C4808 + C4809) * C48421 +
             (C4810 + C4811) * C961 + (C4812 + C4813) * C48392) *
                C48416) *
               C48301 * C3120 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C960 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C48434 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C959) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48421 -
             (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                 C961 -
             (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                 C48392) *
                C4603 +
            ((C5462 + C5463) * C960 -
             ((C5464 + C5465) * C48434 + (C5466 + C5467) * C959) +
             (C5468 + C5469) * C48421 - (C5470 + C5471) * C961 -
             (C5472 + C5473) * C48392) *
                C48416) *
               C48301 * C48184) *
              C2353 +
          ((((C4807 + C4806) * C960 -
             ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
             (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
             (C4813 + C4812) * C48392) *
                C4603 +
            ((C4814 + C4815) * C960 -
             ((C4816 + C4817) * C48434 + (C4818 + C4819) * C959) +
             (C4820 + C4821) * C48421 - (C4822 + C4823) * C961 -
             (C4824 + C4825) * C48392) *
                C48416) *
               C48301 * C3120 +
           (((C5467 + C5466) * C959 + (C5465 + C5464) * C48434 -
             (C5463 + C5462) * C960 - (C5469 + C5468) * C48421 +
             (C5471 + C5470) * C961 + (C5473 + C5472) * C48392) *
                C4603 +
            ((C5916 + C5917) * C959 + (C5918 + C5919) * C48434 -
             (C6268 + C6269) * C960 - (C6270 + C6271) * C48421 +
             (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                 C961 +
             (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                 C48392) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C48445 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C48442 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C1030 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C48044) *
                C4603 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48416) *
               C48301 * C48433 -
           (((C7286 + C7287) * C48044 + (C7288 + C7289) * C1030) * C48416 +
            ((C4606 * C1868 + C48385 * C1880 + C4605 * C1869 + C4601 * C1881) *
                 C48044 +
             (C4606 * C1862 + C48385 * C1871 + C4605 * C1863 + C4601 * C1872) *
                 C1030) *
                C4603) *
               C48301 * C48414) *
              C2353 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C48442 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C48445 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48416 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C4603) *
               C48301 * C48433 +
           (((C7289 + C7288) * C1030 + (C7287 + C7286) * C48044) * C4603 +
            ((C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48385 * C7272) *
                 C1030 +
             (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48385 * C7276) *
                 C48044) *
                C48416) *
               C48301 * C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47151 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48352 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47132 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C4603 +
            ((C4802 + C4803) * C47151 + (C4804 + C4805) * C48352 -
             (C4806 + C4807) * C47132 - (C4808 + C4809) * C48054) *
                C48416) *
               C48301 * C48180 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C47132 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C48352 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C47151) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48054) *
                C4603 +
            ((C5462 + C5463) * C47132 -
             ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
             (C5468 + C5469) * C48054) *
                C48416) *
               C48301 * C48187 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C47151 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C48352 -
             (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                 C47132 -
             (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                 C48054) *
                C4603 +
            ((C5912 + C5913) * C47151 + (C5914 + C5915) * C48352 -
             (C7006 + C7007) * C47132 - (C7008 + C7009) * C48054) *
                C48416) *
               C48301 * C3628) *
              C2353 +
          ((((C4807 + C4806) * C47132 -
             ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
             (C4809 + C4808) * C48054) *
                C4603 +
            ((C4814 + C4815) * C47132 -
             ((C4816 + C4817) * C48352 + (C4818 + C4819) * C47151) +
             (C4820 + C4821) * C48054) *
                C48416) *
               C48301 * C48180 +
           (((C5467 + C5466) * C47151 + (C5465 + C5464) * C48352 -
             (C5463 + C5462) * C47132 - (C5469 + C5468) * C48054) *
                C4603 +
            ((C5916 + C5917) * C47151 + (C5918 + C5919) * C48352 -
             (C6268 + C6269) * C47132 - (C6270 + C6271) * C48054) *
                C48416) *
               C48301 * C48187 +
           (((C7007 + C7006) * C47132 -
             ((C5915 + C5914) * C48352 + (C5913 + C5912) * C47151) +
             (C7009 + C7008) * C48054) *
                C4603 +
            ((C4605 * C1172 + C4601 * C1187 + C4606 * C1173 + C48385 * C1188) *
                 C47132 -
             ((C5920 + C5921) * C48352 + (C5922 + C5923) * C47151) +
             (C4605 * C1190 + C4601 * C1199 + C4606 * C1191 + C48385 * C1200) *
                 C48054) *
                C48416) *
               C48301 * C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C959 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48434 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C960 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48421 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C961 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C48392) *
                C4603 +
            ((C4802 + C4803) * C959 + (C4804 + C4805) * C48434 -
             (C4806 + C4807) * C960 - (C4808 + C4809) * C48421 +
             (C4810 + C4811) * C961 + (C4812 + C4813) * C48392) *
                C48416) *
               C48301 * C3120 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C960 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C48434 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C959) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48421 -
             (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                 C961 -
             (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                 C48392) *
                C4603 +
            ((C5462 + C5463) * C960 -
             ((C5464 + C5465) * C48434 + (C5466 + C5467) * C959) +
             (C5468 + C5469) * C48421 - (C5470 + C5471) * C961 -
             (C5472 + C5473) * C48392) *
                C48416) *
               C48301 * C48184) *
              C2353 +
          ((((C4807 + C4806) * C960 -
             ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
             (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
             (C4813 + C4812) * C48392) *
                C4603 +
            ((C4814 + C4815) * C960 -
             ((C4816 + C4817) * C48434 + (C4818 + C4819) * C959) +
             (C4820 + C4821) * C48421 - (C4822 + C4823) * C961 -
             (C4824 + C4825) * C48392) *
                C48416) *
               C48301 * C3120 +
           (((C5467 + C5466) * C959 + (C5465 + C5464) * C48434 -
             (C5463 + C5462) * C960 - (C5469 + C5468) * C48421 +
             (C5471 + C5470) * C961 + (C5473 + C5472) * C48392) *
                C4603 +
            ((C5916 + C5917) * C959 + (C5918 + C5919) * C48434 -
             (C6268 + C6269) * C960 - (C6270 + C6271) * C48421 +
             (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                 C961 +
             (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                 C48392) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C3120 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C48184) *
              C48444 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C48184 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C3120) *
              C48440 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
            ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
               C48301 * C3120 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48416 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C4603) *
               C48301 * C48184) *
              C48430 +
          ((((C6421 + C6420) * C1030 + (C6419 + C6418) * C48044) * C4603 +
            ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48385 * C6404) *
                 C1030 +
             (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48385 * C6408) *
                 C48044) *
                C48416) *
               C48301 * C48184 -
           (((C5730 + C5731) * C48044 + (C5732 + C5733) * C1030) * C48416 +
            ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C4603) *
               C48301 * C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C47151 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48352 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C47132 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C4603 +
           ((C4802 + C4803) * C47151 + (C4804 + C4805) * C48352 -
            (C4806 + C4807) * C47132 - (C4808 + C4809) * C48054) *
               C48416) *
              C48301 * C48097 * C1301 +
          (((C4807 + C4806) * C47132 -
            ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
            (C4809 + C4808) * C48054) *
               C4603 +
           ((C4814 + C4815) * C47132 -
            ((C4816 + C4817) * C48352 + (C4818 + C4819) * C47151) +
            (C4820 + C4821) * C48054) *
               C48416) *
              C48301 * C48097 * C1302 +
          (((C4819 + C4818) * C47151 + (C4817 + C4816) * C48352 -
            (C4815 + C4814) * C47132 - (C4821 + C4820) * C48054) *
               C4603 +
           ((C5726 + C5727) * C47151 + (C5728 + C5729) * C48352 -
            (C6062 + C6063) * C47132 - (C6064 + C6065) * C48054) *
               C48416) *
              C48301 * C48097 * C1303 +
          (((C6063 + C6062) * C47132 -
            ((C5729 + C5728) * C48352 + (C5727 + C5726) * C47151) +
            (C6065 + C6064) * C48054) *
               C4603 +
           ((C4605 * C1035 + C4601 * C1044 + C4606 * C1036 + C48385 * C1045) *
                C47132 -
            ((C5730 + C5731) * C48352 + (C5732 + C5733) * C47151) +
            (C4605 * C1047 + C4601 * C1053 + C4606 * C1048 + C48385 * C1054) *
                C48054) *
               C48416) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C565 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C559 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C566 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C560 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C567 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C561 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C568 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C4603 +
           ((C4802 + C4803) * C565 + (C4804 + C4805) * C559 -
            (C4806 + C4807) * C566 - (C4808 + C4809) * C560 +
            (C4810 + C4811) * C567 + (C4812 + C4813) * C561 -
            (C5110 + C5111) * C568 - (C5112 + C5113) * C48402) *
               C48416) *
              C48301 * C48097 * C48366 +
          (((C4807 + C4806) * C566 -
            ((C4805 + C4804) * C559 + (C4803 + C4802) * C565) +
            (C4809 + C4808) * C560 - (C4811 + C4810) * C567 -
            (C4813 + C4812) * C561 + (C5111 + C5110) * C568 +
            (C5113 + C5112) * C48402) *
               C4603 +
           ((C4814 + C4815) * C566 -
            ((C4816 + C4817) * C559 + (C4818 + C4819) * C565) +
            (C4820 + C4821) * C560 - (C4822 + C4823) * C567 -
            (C4824 + C4825) * C561 +
            (C4605 * C276 + C4601 * C294 + C4606 * C277 + C48385 * C296) *
                C568 +
            (C4605 * C295 + C4601 * C306 + C4606 * C297 + C48385 * C307) *
                C48402) *
               C48416) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47151 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48352 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47132 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C4603 +
            ((C4802 + C4803) * C47151 + (C4804 + C4805) * C48352 -
             (C4806 + C4807) * C47132 - (C4808 + C4809) * C48054) *
                C48416) *
               C48301 * C1681 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C47132 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C48352 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C47151) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48054) *
                C4603 +
            ((C5462 + C5463) * C47132 -
             ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
             (C5468 + C5469) * C48054) *
                C48416) *
               C48301 * C1682 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C47151 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C48352 -
             (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                 C47132 -
             (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                 C48054) *
                C4603 +
            ((C5912 + C5913) * C47151 + (C5914 + C5915) * C48352 -
             (C7006 + C7007) * C47132 - (C7008 + C7009) * C48054) *
                C48416) *
               C48301 * C48401) *
              C48366 +
          ((((C4807 + C4806) * C47132 -
             ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
             (C4809 + C4808) * C48054) *
                C4603 +
            ((C4814 + C4815) * C47132 -
             ((C4816 + C4817) * C48352 + (C4818 + C4819) * C47151) +
             (C4820 + C4821) * C48054) *
                C48416) *
               C48301 * C1681 +
           (((C5467 + C5466) * C47151 + (C5465 + C5464) * C48352 -
             (C5463 + C5462) * C47132 - (C5469 + C5468) * C48054) *
                C4603 +
            ((C5916 + C5917) * C47151 + (C5918 + C5919) * C48352 -
             (C6268 + C6269) * C47132 - (C6270 + C6271) * C48054) *
                C48416) *
               C48301 * C1682 +
           (((C7007 + C7006) * C47132 -
             ((C5915 + C5914) * C48352 + (C5913 + C5912) * C47151) +
             (C7009 + C7008) * C48054) *
                C4603 +
            ((C4605 * C1172 + C4601 * C1187 + C4606 * C1173 + C48385 * C1188) *
                 C47132 -
             ((C5920 + C5921) * C48352 + (C5922 + C5923) * C47151) +
             (C4605 * C1190 + C4601 * C1199 + C4606 * C1191 + C48385 * C1200) *
                 C48054) *
                C48416) *
               C48301 * C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C48367 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C48184) *
              C1301 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C48184 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C48367) *
              C1302 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
            ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
               C48301 * C48367 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48416 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C4603) *
               C48301 * C48184) *
              C1303 +
          ((((C6421 + C6420) * C1030 + (C6419 + C6418) * C48044) * C4603 +
            ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48385 * C6404) *
                 C1030 +
             (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48385 * C6408) *
                 C48044) *
                C48416) *
               C48301 * C48184 -
           (((C5730 + C5731) * C48044 + (C5732 + C5733) * C1030) * C48416 +
            ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C4603) *
               C48301 * C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C265 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C259 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C266 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C260 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C267 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C48392) *
                C4603 +
            ((C4802 + C4803) * C265 + (C4804 + C4805) * C259 -
             (C4806 + C4807) * C266 - (C4808 + C4809) * C260 +
             (C4810 + C4811) * C267 + (C4812 + C4813) * C48392) *
                C48416) *
               C48301 * C48367 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C266 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C259 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C265) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C260 -
             (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                 C267 -
             (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                 C48392) *
                C4603 +
            ((C5462 + C5463) * C266 -
             ((C5464 + C5465) * C259 + (C5466 + C5467) * C265) +
             (C5468 + C5469) * C260 - (C5470 + C5471) * C267 -
             (C5472 + C5473) * C48392) *
                C48416) *
               C48301 * C48184) *
              C48366 +
          ((((C4807 + C4806) * C266 -
             ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
             (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
             (C4813 + C4812) * C48392) *
                C4603 +
            ((C4814 + C4815) * C266 -
             ((C4816 + C4817) * C259 + (C4818 + C4819) * C265) +
             (C4820 + C4821) * C260 - (C4822 + C4823) * C267 -
             (C4824 + C4825) * C48392) *
                C48416) *
               C48301 * C48367 +
           (((C5467 + C5466) * C265 + (C5465 + C5464) * C259 -
             (C5463 + C5462) * C266 - (C5469 + C5468) * C260 +
             (C5471 + C5470) * C267 + (C5473 + C5472) * C48392) *
                C4603 +
            ((C4605 * C1170 + C4601 * C1185 + C4606 * C1169 + C48385 * C1184) *
                 C265 +
             (C4605 * C1182 + C4601 * C1197 + C4606 * C1181 + C48385 * C1196) *
                 C259 -
             (C4606 * C1168 + C48385 * C1183 + C4605 * C1169 + C4601 * C1184) *
                 C266 -
             (C4606 * C1180 + C48385 * C1195 + C4605 * C1181 + C4601 * C1196) *
                 C260 +
             (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                 C267 +
             (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                 C48392) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C2133 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C2134 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C1030 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C48044) *
                C4603 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48416) *
               C48301 * C2135 -
           (((C7286 + C7287) * C48044 + (C7288 + C7289) * C1030) * C48416 +
            ((C4606 * C1868 + C48385 * C1880 + C4605 * C1869 + C4601 * C1881) *
                 C48044 +
             (C4606 * C1862 + C48385 * C1871 + C4605 * C1863 + C4601 * C1872) *
                 C1030) *
                C4603) *
               C48301 * C48414) *
              C48366 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C2134 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C2133 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48416 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C4603) *
               C48301 * C2135 +
           (((C7289 + C7288) * C1030 + (C7287 + C7286) * C48044) * C4603 +
            ((C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48385 * C7272) *
                 C1030 +
             (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48385 * C7276) *
                 C48044) *
                C48416) *
               C48301 * C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                   C116 +
               (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                   C104 -
               (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                   C117 -
               (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                   C105 +
               (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                   C118 +
               (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                   C106 -
               (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                   C119 -
               (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                   C107 +
               (C4605 * C125 + C4601 * C136 + C4606 * C126 + C48385 * C138) *
                   C120 +
               (C4605 * C137 + C4601 * C146 + C4606 * C139 + C48385 * C147) *
                   C108) *
                  C4603 +
              ((C4605 * C271 + C4601 * C284 + C4606 * C268 + C48385 * C278) *
                   C116 +
               (C4605 * C283 + C4601 * C300 + C4606 * C282 + C48385 * C299) *
                   C104 -
               (C4606 * C269 + C48385 * C279 + C4605 * C268 + C4601 * C278) *
                   C117 -
               (C4606 * C281 + C48385 * C298 + C4605 * C282 + C4601 * C299) *
                   C105 +
               (C4605 * C269 + C4601 * C279 + C4606 * C270 + C48385 * C280) *
                   C118 +
               (C4605 * C281 + C4601 * C298 + C4606 * C285 + C48385 * C301) *
                   C106 -
               (C4606 * C272 + C48385 * C286 + C4605 * C270 + C4601 * C280) *
                   C119 -
               (C4606 * C287 + C48385 * C302 + C4605 * C285 + C4601 * C301) *
                   C107 +
               (C4605 * C272 + C4601 * C286 + C4606 * C569 + C48385 * C570) *
                   C120 +
               (C4605 * C287 + C4601 * C302 + C4606 * C571 + C48385 * C572) *
                   C108) *
                  C48416) *
             C48301 * C48097 * C48085 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                    C265 +
                (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                    C259 -
                (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                    C266 -
                (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                    C260 +
                (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                    C267 +
                (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                    C48392) *
                   C4603 +
               ((C4802 + C4803) * C265 + (C4804 + C4805) * C259 -
                (C4806 + C4807) * C266 - (C4808 + C4809) * C260 +
                (C4810 + C4811) * C267 + (C4812 + C4813) * C48392) *
                   C48416) *
                  C48301 * C48097 * C48437 +
              (((C4807 + C4806) * C266 -
                ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
                (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
                (C4813 + C4812) * C48392) *
                   C4603 +
               ((C4814 + C4815) * C266 -
                ((C4816 + C4817) * C259 + (C4818 + C4819) * C265) +
                (C4820 + C4821) * C260 - (C4822 + C4823) * C267 -
                (C4824 + C4825) * C48392) *
                   C48416) *
                  C48301 * C48097 * C48425 +
              (((C4819 + C4818) * C265 + (C4817 + C4816) * C259 -
                (C4815 + C4814) * C266 - (C4821 + C4820) * C260 +
                (C4823 + C4822) * C267 + (C4825 + C4824) * C48392) *
                   C4603 +
               ((C4605 * C1033 + C4601 * C1042 + C4606 * C1032 +
                 C48385 * C1041) *
                    C265 +
                (C4605 * C1039 + C4601 * C1051 + C4606 * C1038 +
                 C48385 * C1050) *
                    C259 -
                (C4606 * C1031 + C48385 * C1040 + C4605 * C1032 +
                 C4601 * C1041) *
                    C266 -
                (C4606 * C1037 + C48385 * C1049 + C4605 * C1038 +
                 C4601 * C1050) *
                    C260 +
                (C4605 * C1031 + C4601 * C1040 + C4606 * C1307 +
                 C48385 * C1308) *
                    C267 +
                (C4605 * C1037 + C4601 * C1049 + C4606 * C1309 +
                 C48385 * C1310) *
                    C48392) *
                   C48416) *
                  C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C265 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C259 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C266 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C260 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C267 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C265 + (C4804 + C4805) * C259 -
            (C4806 + C4807) * C266 - (C4808 + C4809) * C260 +
            (C4810 + C4811) * C267 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C48438 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C266 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C259 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C265) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C260 -
            (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                C267 -
            (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                C48392) *
               C4603 +
           ((C4605 * C824 + C4601 * C829 + C4606 * C825 + C48385 * C830) *
                C266 -
            ((C4606 * C832 + C48385 * C839 + C4605 * C831 + C4601 * C838) *
                 C259 +
             (C4606 * C824 + C48385 * C829 + C4605 * C823 + C4601 * C828) *
                 C265) +
            (C4605 * C832 + C4601 * C839 + C4606 * C833 + C48385 * C840) *
                C260 -
            (C4606 * C826 + C48385 * C834 + C4605 * C825 + C4601 * C830) *
                C267 -
            (C4606 * C835 + C48385 * C841 + C4605 * C833 + C4601 * C840) *
                C48392) *
               C48416) *
              C48301 * C48427 +
          (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                C265 +
            (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                C259 -
            (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                C266 -
            (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                C260 +
            (C4605 * C428 + C4601 * C443 + C4606 * C429 + C48385 * C447) *
                C267 +
            (C4605 * C446 + C4601 * C458 + C4606 * C448 + C48385 * C459) *
                C48392) *
               C4603 +
           ((C4605 * C1167 + C4601 * C1179 + C4606 * C1166 + C48385 * C1178) *
                C265 +
            (C4605 * C1176 + C4601 * C1194 + C4606 * C1175 + C48385 * C1193) *
                C259 -
            (C4606 * C1165 + C48385 * C1177 + C4605 * C1166 + C4601 * C1178) *
                C266 -
            (C4606 * C1174 + C48385 * C1192 + C4605 * C1175 + C4601 * C1193) *
                C260 +
            (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                C267 +
            (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                C48392) *
               C48416) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C959 + (C4804 + C4805) * C48434 -
            (C4806 + C4807) * C960 - (C4808 + C4809) * C48421 +
            (C4810 + C4811) * C961 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C48097 * C956 +
          (((C4807 + C4806) * C960 -
            ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
            (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
            (C4813 + C4812) * C48392) *
               C4603 +
           ((C4814 + C4815) * C960 -
            ((C4816 + C4817) * C48434 + (C4818 + C4819) * C959) +
            (C4820 + C4821) * C48421 - (C4822 + C4823) * C961 -
            (C4824 + C4825) * C48392) *
               C48416) *
              C48301 * C48097 * C957 +
          (((C4819 + C4818) * C959 + (C4817 + C4816) * C48434 -
            (C4815 + C4814) * C960 - (C4821 + C4820) * C48421 +
            (C4823 + C4822) * C961 + (C4825 + C4824) * C48392) *
               C4603 +
           ((C4605 * C1033 + C4601 * C1042 + C4606 * C1032 + C48385 * C1041) *
                C959 +
            (C4605 * C1039 + C4601 * C1051 + C4606 * C1038 + C48385 * C1050) *
                C48434 -
            (C4606 * C1031 + C48385 * C1040 + C4605 * C1032 + C4601 * C1041) *
                C960 -
            (C4606 * C1037 + C48385 * C1049 + C4605 * C1038 + C4601 * C1050) *
                C48421 +
            (C4605 * C1031 + C4601 * C1040 + C4606 * C1307 + C48385 * C1308) *
                C961 +
            (C4605 * C1037 + C4601 * C1049 + C4606 * C1309 + C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C1030 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48044) *
               C4603 +
           ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
              C48301 * C48097 * C1025 -
          (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
           ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
              C48301 * C48097 * C1026 +
          (((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
           ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
              C48301 * C48097 * C1027 -
          (((C5730 + C5731) * C48044 + (C5732 + C5733) * C1030) * C48416 +
           ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C4603) *
              C48301 * C48097 * C1028 +
          (((C5733 + C5732) * C1030 + (C5731 + C5730) * C48044) * C4603 +
           ((C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48385 * C5704) *
                C1030 +
            (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48385 * C5708) *
                C48044) *
               C48416) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C48438 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C48427 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C1030 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C48044) *
                C4603 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48416) *
               C48301 * C48401) *
              C956 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C48427 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C48438 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48416 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C4603) *
               C48301 * C48401) *
              C957 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
            ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
               C48301 * C48438 -
           (((C4606 * C1566 + C48385 * C1569 + C4605 * C1565 + C4601 * C1568) *
                 C48044 +
             (C4606 * C1560 + C48385 * C1563 + C4605 * C1559 + C4601 * C1562) *
                 C1030) *
                C48416 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C4603) *
               C48301 * C48427 +
           (((C5923 + C5922) * C1030 + (C5921 + C5920) * C48044) * C4603 +
            ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48385 * C5882) *
                 C1030 +
             (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48385 * C5886) *
                 C48044) *
                C48416) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C959 + (C4804 + C4805) * C48434 -
            (C4806 + C4807) * C960 - (C4808 + C4809) * C48421 +
            (C4810 + C4811) * C961 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C1681 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C960 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48434 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C959) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C48421 -
            (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                C961 -
            (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                C48392) *
               C4603 +
           ((C5462 + C5463) * C960 -
            ((C5464 + C5465) * C48434 + (C5466 + C5467) * C959) +
            (C5468 + C5469) * C48421 - (C5470 + C5471) * C961 -
            (C5472 + C5473) * C48392) *
               C48416) *
              C48301 * C1682 +
          (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                C959 +
            (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                C48434 -
            (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                C960 -
            (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                C48421 +
            (C4605 * C428 + C4601 * C443 + C4606 * C429 + C48385 * C447) *
                C961 +
            (C4605 * C446 + C4601 * C458 + C4606 * C448 + C48385 * C459) *
                C48392) *
               C4603 +
           ((C5912 + C5913) * C959 + (C5914 + C5915) * C48434 -
            (C4606 * C1165 + C48385 * C1177 + C4605 * C1166 + C4601 * C1178) *
                C960 -
            (C4606 * C1174 + C48385 * C1192 + C4605 * C1175 + C4601 * C1193) *
                C48421 +
            (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                C961 +
            (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                C48392) *
               C48416) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C1681 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C1682 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C1030 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C48044) *
                C4603 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48416) *
               C48301 * C48401) *
              C48437 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C1682 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C1681 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48416 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C4603) *
               C48301 * C48401) *
              C48425 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
            ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
               C48301 * C1681 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48416 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C4603) *
               C48301 * C1682 +
           (((C5923 + C5922) * C1030 + (C5921 + C5920) * C48044) * C4603 +
            ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48385 * C5882) *
                 C1030 +
             (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48385 * C5886) *
                 C48044) *
                C48416) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C1030 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48044) *
               C4603 +
           ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
              C48301 * C1856 -
          (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
           ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                C48044 +
            (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                C1030) *
               C4603) *
              C48301 * C1857 +
          (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                C1030 +
            (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                C48044) *
               C4603 +
           ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48416) *
              C48301 * C1858 -
          (((C4606 * C2246 + C48385 * C2249 + C4605 * C2245 + C4601 * C2248) *
                C48044 +
            (C4606 * C2240 + C48385 * C2243 + C4605 * C2239 + C4601 * C2242) *
                C1030) *
               C48416 +
           ((C4606 * C1868 + C48385 * C1880 + C4605 * C1869 + C4601 * C1881) *
                C48044 +
            (C4606 * C1862 + C48385 * C1871 + C4605 * C1863 + C4601 * C1872) *
                C1030) *
               C4603) *
              C48301 * C1859 +
          (((C4605 * C1864 + C4601 * C1873 + C4606 * C1865 + C48385 * C1874) *
                C1030 +
            (C4605 * C1876 + C4601 * C1882 + C4606 * C1877 + C48385 * C1883) *
                C48044) *
               C4603 +
           ((C4605 * C6795 + C4601 * C6797 + C4606 * C6796 + C48385 * C6798) *
                C1030 +
            (C4605 * C6799 + C4601 * C6801 + C4606 * C6800 + C48385 * C6802) *
                C48044) *
               C48416) *
              C48301 * C1860) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47151 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48352 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47132 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C4603 +
            ((C4802 + C4803) * C47151 + (C4804 + C4805) * C48352 -
             (C4806 + C4807) * C47132 - (C4808 + C4809) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C47132 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C48352 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C47151) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48054) *
                C4603 +
            ((C5462 + C5463) * C47132 -
             ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
             (C5468 + C5469) * C48054) *
                C48416) *
               C48301 * C48184) *
              C956 +
          ((((C4807 + C4806) * C47132 -
             ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
             (C4809 + C4808) * C48054) *
                C4603 +
            ((C4814 + C4815) * C47132 -
             ((C4816 + C4817) * C48352 + (C4818 + C4819) * C47151) +
             (C4820 + C4821) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C5467 + C5466) * C47151 + (C5465 + C5464) * C48352 -
             (C5463 + C5462) * C47132 - (C5469 + C5468) * C48054) *
                C4603 +
            ((C5916 + C5917) * C47151 + (C5918 + C5919) * C48352 -
             (C6268 + C6269) * C47132 - (C6270 + C6271) * C48054) *
                C48416) *
               C48301 * C48184) *
              C957 +
          ((((C4819 + C4818) * C47151 + (C4817 + C4816) * C48352 -
             (C4815 + C4814) * C47132 - (C4821 + C4820) * C48054) *
                C4603 +
            ((C5726 + C5727) * C47151 + (C5728 + C5729) * C48352 -
             (C6062 + C6063) * C47132 - (C6064 + C6065) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C6269 + C6268) * C47132 -
             ((C5919 + C5918) * C48352 + (C5917 + C5916) * C47151) +
             (C6271 + C6270) * C48054) *
                C4603 +
            ((C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48385 * C1564) *
                 C47132 -
             ((C4606 * C1566 + C48385 * C1569 + C4605 * C1565 + C4601 * C1568) *
                  C48352 +
              (C4606 * C1560 + C48385 * C1563 + C4605 * C1559 + C4601 * C1562) *
                  C47151) +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C565 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C559 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C566 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C560 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C567 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C561 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C568 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C4603 +
           ((C4802 + C4803) * C565 + (C4804 + C4805) * C559 -
            (C4806 + C4807) * C566 - (C4808 + C4809) * C560 +
            (C4810 + C4811) * C567 + (C4812 + C4813) * C561 -
            (C5110 + C5111) * C568 - (C5112 + C5113) * C48402) *
               C48416) *
              C48301 * C48367 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C566 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C559 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C565) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C560 -
            (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                C567 -
            (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                C561 +
            (C4605 * C423 + C4601 * C433 + C4606 * C425 + C48385 * C439) *
                C568 +
            (C4605 * C438 + C4601 * C454 + C4606 * C440 + C48385 * C455) *
                C48402) *
               C4603 +
           ((C4605 * C824 + C4601 * C829 + C4606 * C825 + C48385 * C830) *
                C566 -
            ((C4606 * C832 + C48385 * C839 + C4605 * C831 + C4601 * C838) *
                 C559 +
             (C4606 * C824 + C48385 * C829 + C4605 * C823 + C4601 * C828) *
                 C565) +
            (C4605 * C832 + C4601 * C839 + C4606 * C833 + C48385 * C840) *
                C560 -
            (C4606 * C826 + C48385 * C834 + C4605 * C825 + C4601 * C830) *
                C567 -
            (C4606 * C835 + C48385 * C841 + C4605 * C833 + C4601 * C840) *
                C561 +
            (C4605 * C826 + C4601 * C834 + C4606 * C827 + C48385 * C836) *
                C568 +
            (C4605 * C835 + C4601 * C841 + C4606 * C837 + C48385 * C842) *
                C48402) *
               C48416) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C47151 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48352 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C47132 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C4603 +
           ((C4802 + C4803) * C47151 + (C4804 + C4805) * C48352 -
            (C4806 + C4807) * C47132 - (C4808 + C4809) * C48054) *
               C48416) *
              C48301 * C2133 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C47132 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48352 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C47151) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C48054) *
               C4603 +
           ((C5462 + C5463) * C47132 -
            ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
            (C5468 + C5469) * C48054) *
               C48416) *
              C48301 * C2134 +
          (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                C47151 +
            (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                C48352 -
            (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                C47132 -
            (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                C48054) *
               C4603 +
           ((C5912 + C5913) * C47151 + (C5914 + C5915) * C48352 -
            (C7006 + C7007) * C47132 - (C7008 + C7009) * C48054) *
               C48416) *
              C48301 * C2135 +
          (((C4605 * C1862 + C4601 * C1871 + C4606 * C1861 + C48385 * C1870) *
                C47132 -
            ((C4606 * C1868 + C48385 * C1880 + C4605 * C1869 + C4601 * C1881) *
                 C48352 +
             (C4606 * C1862 + C48385 * C1871 + C4605 * C1863 + C4601 * C1872) *
                 C47151) +
            (C4605 * C1868 + C4601 * C1880 + C4606 * C1867 + C48385 * C1879) *
                C48054) *
               C4603 +
           ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48385 * C2244) *
                C47132 -
            ((C4606 * C2246 + C48385 * C2249 + C4605 * C2245 + C4601 * C2248) *
                 C48352 +
             (C4606 * C2240 + C48385 * C2243 + C4605 * C2239 + C4601 * C2242) *
                 C47151) +
            (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48385 * C2250) *
                C48054) *
               C48416) *
              C48301 * C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C265 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C259 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C266 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C260 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C267 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C265 + (C4804 + C4805) * C259 -
            (C4806 + C4807) * C266 - (C4808 + C4809) * C260 +
            (C4810 + C4811) * C267 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C48097 * C48437 +
          (((C4807 + C4806) * C266 -
            ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
            (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
            (C4813 + C4812) * C48392) *
               C4603 +
           ((C4814 + C4815) * C266 -
            ((C4816 + C4817) * C259 + (C4818 + C4819) * C265) +
            (C4820 + C4821) * C260 - (C4822 + C4823) * C267 -
            (C4824 + C4825) * C48392) *
               C48416) *
              C48301 * C48097 * C48425 +
          (((C4819 + C4818) * C265 + (C4817 + C4816) * C259 -
            (C4815 + C4814) * C266 - (C4821 + C4820) * C260 +
            (C4823 + C4822) * C267 + (C4825 + C4824) * C48392) *
               C4603 +
           ((C4605 * C1033 + C4601 * C1042 + C4606 * C1032 + C48385 * C1041) *
                C265 +
            (C4605 * C1039 + C4601 * C1051 + C4606 * C1038 + C48385 * C1050) *
                C259 -
            (C4606 * C1031 + C48385 * C1040 + C4605 * C1032 + C4601 * C1041) *
                C266 -
            (C4606 * C1037 + C48385 * C1049 + C4605 * C1038 + C4601 * C1050) *
                C260 +
            (C4605 * C1031 + C4601 * C1040 + C4606 * C1307 + C48385 * C1308) *
                C267 +
            (C4605 * C1037 + C4601 * C1049 + C4606 * C1309 + C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) * C116 +
           (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) * C104 -
           (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) * C117 -
           (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) * C105 +
           (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) * C118 +
           (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) * C106 -
           (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) * C119 -
           (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) * C107 +
           (C4605 * C125 + C4601 * C136 + C4606 * C126 + C48385 * C138) * C120 +
           (C4605 * C137 + C4601 * C146 + C4606 * C139 + C48385 * C147) *
               C108) *
              C4603 +
          ((C4605 * C271 + C4601 * C284 + C4606 * C268 + C48385 * C278) * C116 +
           (C4605 * C283 + C4601 * C300 + C4606 * C282 + C48385 * C299) * C104 -
           (C4606 * C269 + C48385 * C279 + C4605 * C268 + C4601 * C278) * C117 -
           (C4606 * C281 + C48385 * C298 + C4605 * C282 + C4601 * C299) * C105 +
           (C4605 * C269 + C4601 * C279 + C4606 * C270 + C48385 * C280) * C118 +
           (C4605 * C281 + C4601 * C298 + C4606 * C285 + C48385 * C301) * C106 -
           (C4606 * C272 + C48385 * C286 + C4605 * C270 + C4601 * C280) * C119 -
           (C4606 * C287 + C48385 * C302 + C4605 * C285 + C4601 * C301) * C107 +
           (C4605 * C272 + C4601 * C286 + C4606 * C569 + C48385 * C570) * C120 +
           (C4605 * C287 + C4601 * C302 + C4606 * C571 + C48385 * C572) *
               C108) *
              C48416) *
         C48301 * C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C959 + (C4804 + C4805) * C48434 -
            (C4806 + C4807) * C960 - (C4808 + C4809) * C48421 +
            (C4810 + C4811) * C961 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C48097 * C956 +
          (((C4807 + C4806) * C960 -
            ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
            (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
            (C4813 + C4812) * C48392) *
               C4603 +
           ((C4814 + C4815) * C960 -
            ((C4816 + C4817) * C48434 + (C4818 + C4819) * C959) +
            (C4820 + C4821) * C48421 - (C4822 + C4823) * C961 -
            (C4824 + C4825) * C48392) *
               C48416) *
              C48301 * C48097 * C957 +
          (((C4819 + C4818) * C959 + (C4817 + C4816) * C48434 -
            (C4815 + C4814) * C960 - (C4821 + C4820) * C48421 +
            (C4823 + C4822) * C961 + (C4825 + C4824) * C48392) *
               C4603 +
           ((C4605 * C1033 + C4601 * C1042 + C4606 * C1032 + C48385 * C1041) *
                C959 +
            (C4605 * C1039 + C4601 * C1051 + C4606 * C1038 + C48385 * C1050) *
                C48434 -
            (C4606 * C1031 + C48385 * C1040 + C4605 * C1032 + C4601 * C1041) *
                C960 -
            (C4606 * C1037 + C48385 * C1049 + C4605 * C1038 + C4601 * C1050) *
                C48421 +
            (C4605 * C1031 + C4601 * C1040 + C4606 * C1307 + C48385 * C1308) *
                C961 +
            (C4605 * C1037 + C4601 * C1049 + C4606 * C1309 + C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C1030 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48044) *
               C4603 +
           ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
              C48301 * C48097 * C1025 -
          (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
           ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
              C48301 * C48097 * C1026 +
          (((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
           ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
              C48301 * C48097 * C1027 -
          (((C5730 + C5731) * C48044 + (C5732 + C5733) * C1030) * C48416 +
           ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C4603) *
              C48301 * C48097 * C1028 +
          (((C5733 + C5732) * C1030 + (C5731 + C5730) * C48044) * C4603 +
           ((C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48385 * C5704) *
                C1030 +
            (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48385 * C5708) *
                C48044) *
               C48416) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C959 + (C4804 + C4805) * C48434 -
            (C4806 + C4807) * C960 - (C4808 + C4809) * C48421 +
            (C4810 + C4811) * C961 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C1681 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C960 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48434 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C959) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C48421 -
            (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                C961 -
            (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                C48392) *
               C4603 +
           ((C5462 + C5463) * C960 -
            ((C5464 + C5465) * C48434 + (C5466 + C5467) * C959) +
            (C5468 + C5469) * C48421 - (C5470 + C5471) * C961 -
            (C5472 + C5473) * C48392) *
               C48416) *
              C48301 * C1682 +
          (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                C959 +
            (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                C48434 -
            (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                C960 -
            (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                C48421 +
            (C4605 * C428 + C4601 * C443 + C4606 * C429 + C48385 * C447) *
                C961 +
            (C4605 * C446 + C4601 * C458 + C4606 * C448 + C48385 * C459) *
                C48392) *
               C4603 +
           ((C5912 + C5913) * C959 + (C5914 + C5915) * C48434 -
            (C4606 * C1165 + C48385 * C1177 + C4605 * C1166 + C4601 * C1178) *
                C960 -
            (C4606 * C1174 + C48385 * C1192 + C4605 * C1175 + C4601 * C1193) *
                C48421 +
            (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                C961 +
            (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                C48392) *
               C48416) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C1681 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C1682 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C1030 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C48044) *
                C4603 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48416) *
               C48301 * C48401) *
              C48437 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C1682 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C1681 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48416 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C4603) *
               C48301 * C48401) *
              C48425 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
            ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
               C48301 * C1681 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48416 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C4603) *
               C48301 * C1682 +
           (((C5923 + C5922) * C1030 + (C5921 + C5920) * C48044) * C4603 +
            ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48385 * C5882) *
                 C1030 +
             (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48385 * C5886) *
                 C48044) *
                C48416) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47161 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48049 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47157 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48057 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C47167 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C2723) *
                C4603 +
            ((C4802 + C4803) * C47161 + (C4804 + C4805) * C48049 -
             (C4806 + C4807) * C47157 - (C4808 + C4809) * C48057 +
             (C4810 + C4811) * C47167 + (C4812 + C4813) * C2723) *
                C48416) *
               C48301 * C3120 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C47157 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C48049 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C47161) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48057 -
             (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                 C47167 -
             (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                 C2723) *
                C4603 +
            ((C5462 + C5463) * C47157 -
             ((C5464 + C5465) * C48049 + (C5466 + C5467) * C47161) +
             (C5468 + C5469) * C48057 - (C5470 + C5471) * C47167 -
             (C5472 + C5473) * C2723) *
                C48416) *
               C48301 * C48184) *
              C48366 +
          ((((C4807 + C4806) * C47157 -
             ((C4805 + C4804) * C48049 + (C4803 + C4802) * C47161) +
             (C4809 + C4808) * C48057 - (C4811 + C4810) * C47167 -
             (C4813 + C4812) * C2723) *
                C4603 +
            ((C4814 + C4815) * C47157 -
             ((C4816 + C4817) * C48049 + (C4818 + C4819) * C47161) +
             (C4820 + C4821) * C48057 - (C4822 + C4823) * C47167 -
             (C4824 + C4825) * C2723) *
                C48416) *
               C48301 * C3120 +
           (((C5467 + C5466) * C47161 + (C5465 + C5464) * C48049 -
             (C5463 + C5462) * C47157 - (C5469 + C5468) * C48057 +
             (C5471 + C5470) * C47167 + (C5473 + C5472) * C2723) *
                C4603 +
            ((C5916 + C5917) * C47161 + (C5918 + C5919) * C48049 -
             (C6268 + C6269) * C47157 - (C6270 + C6271) * C48057 +
             (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                 C47167 +
             (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                 C2723) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C2463 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C2457 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C2464 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C4603 +
            ((C4802 + C4803) * C2463 + (C4804 + C4805) * C2457 -
             (C4806 + C4807) * C2464 - (C4808 + C4809) * C48054) *
                C48416) *
               C48301 * C48180 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C2464 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C2457 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C2463) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48054) *
                C4603 +
            ((C5462 + C5463) * C2464 -
             ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
             (C5468 + C5469) * C48054) *
                C48416) *
               C48301 * C48187 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C2463 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C2457 -
             (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                 C2464 -
             (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                 C48054) *
                C4603 +
            ((C5912 + C5913) * C2463 + (C5914 + C5915) * C2457 -
             (C7006 + C7007) * C2464 - (C7008 + C7009) * C48054) *
                C48416) *
               C48301 * C3628) *
              C48366 +
          ((((C4807 + C4806) * C2464 -
             ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
             (C4809 + C4808) * C48054) *
                C4603 +
            ((C4814 + C4815) * C2464 -
             ((C4816 + C4817) * C2457 + (C4818 + C4819) * C2463) +
             (C4820 + C4821) * C48054) *
                C48416) *
               C48301 * C48180 +
           (((C5467 + C5466) * C2463 + (C5465 + C5464) * C2457 -
             (C5463 + C5462) * C2464 - (C5469 + C5468) * C48054) *
                C4603 +
            ((C5916 + C5917) * C2463 + (C5918 + C5919) * C2457 -
             (C6268 + C6269) * C2464 - (C6270 + C6271) * C48054) *
                C48416) *
               C48301 * C48187 +
           (((C7007 + C7006) * C2464 -
             ((C5915 + C5914) * C2457 + (C5913 + C5912) * C2463) +
             (C7009 + C7008) * C48054) *
                C4603 +
            ((C4605 * C1172 + C4601 * C1187 + C4606 * C1173 + C48385 * C1188) *
                 C2464 -
             ((C5920 + C5921) * C2457 + (C5922 + C5923) * C2463) +
             (C4605 * C1190 + C4601 * C1199 + C4606 * C1191 + C48385 * C1200) *
                 C48054) *
                C48416) *
               C48301 * C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C2463 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C2457 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C2464 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C4603 +
            ((C4802 + C4803) * C2463 + (C4804 + C4805) * C2457 -
             (C4806 + C4807) * C2464 - (C4808 + C4809) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C2464 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C2457 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C2463) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48054) *
                C4603 +
            ((C5462 + C5463) * C2464 -
             ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
             (C5468 + C5469) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48437 +
          ((((C4807 + C4806) * C2464 -
             ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
             (C4809 + C4808) * C48054) *
                C4603 +
            ((C4814 + C4815) * C2464 -
             ((C4816 + C4817) * C2457 + (C4818 + C4819) * C2463) +
             (C4820 + C4821) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C5467 + C5466) * C2463 + (C5465 + C5464) * C2457 -
             (C5463 + C5462) * C2464 - (C5469 + C5468) * C48054) *
                C4603 +
            ((C5916 + C5917) * C2463 + (C5918 + C5919) * C2457 -
             (C6268 + C6269) * C2464 - (C6270 + C6271) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48425 +
          ((((C4819 + C4818) * C2463 + (C4817 + C4816) * C2457 -
             (C4815 + C4814) * C2464 - (C4821 + C4820) * C48054) *
                C4603 +
            ((C5726 + C5727) * C2463 + (C5728 + C5729) * C2457 -
             (C6062 + C6063) * C2464 - (C6064 + C6065) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C6269 + C6268) * C2464 -
             ((C5919 + C5918) * C2457 + (C5917 + C5916) * C2463) +
             (C6271 + C6270) * C48054) *
                C4603 +
            ((C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48385 * C1564) *
                 C2464 -
             ((C6418 + C6419) * C2457 + (C6420 + C6421) * C2463) +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2355 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48443 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2356 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48436 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C2357 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48423 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C2358 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C4603 +
           ((C4802 + C4803) * C2355 + (C4804 + C4805) * C48443 -
            (C4806 + C4807) * C2356 - (C4808 + C4809) * C48436 +
            (C4810 + C4811) * C2357 + (C4812 + C4813) * C48423 -
            (C5110 + C5111) * C2358 - (C5112 + C5113) * C48402) *
               C48416) *
              C48301 * C3120 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C2356 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48443 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C2355) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C48436 -
            (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                C2357 -
            (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                C48423 +
            (C4605 * C423 + C4601 * C433 + C4606 * C425 + C48385 * C439) *
                C2358 +
            (C4605 * C438 + C4601 * C454 + C4606 * C440 + C48385 * C455) *
                C48402) *
               C4603 +
           ((C5462 + C5463) * C2356 -
            ((C5464 + C5465) * C48443 + (C5466 + C5467) * C2355) +
            (C5468 + C5469) * C48436 - (C5470 + C5471) * C2357 -
            (C5472 + C5473) * C48423 +
            (C4605 * C826 + C4601 * C834 + C4606 * C827 + C48385 * C836) *
                C2358 +
            (C4605 * C835 + C4601 * C841 + C4606 * C837 + C48385 * C842) *
                C48402) *
               C48416) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2463 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C2457 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2464 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C4603 +
           ((C4802 + C4803) * C2463 + (C4804 + C4805) * C2457 -
            (C4806 + C4807) * C2464 - (C4808 + C4809) * C48054) *
               C48416) *
              C48301 * C48445 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C2464 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C2457 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C2463) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C48054) *
               C4603 +
           ((C5462 + C5463) * C2464 -
            ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
            (C5468 + C5469) * C48054) *
               C48416) *
              C48301 * C48442 +
          (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                C2463 +
            (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                C2457 -
            (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                C2464 -
            (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                C48054) *
               C4603 +
           ((C5912 + C5913) * C2463 + (C5914 + C5915) * C2457 -
            (C7006 + C7007) * C2464 - (C7008 + C7009) * C48054) *
               C48416) *
              C48301 * C48433 +
          (((C4605 * C1862 + C4601 * C1871 + C4606 * C1861 + C48385 * C1870) *
                C2464 -
            ((C4606 * C1868 + C48385 * C1880 + C4605 * C1869 + C4601 * C1881) *
                 C2457 +
             (C4606 * C1862 + C48385 * C1871 + C4605 * C1863 + C4601 * C1872) *
                 C2463) +
            (C4605 * C1868 + C4601 * C1880 + C4606 * C1867 + C48385 * C1879) *
                C48054) *
               C4603 +
           ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48385 * C2244) *
                C2464 -
            ((C7286 + C7287) * C2457 + (C7288 + C7289) * C2463) +
            (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48385 * C2250) *
                C48054) *
               C48416) *
              C48301 * C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C47161 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48049 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C47157 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48057 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C47167 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C2723) *
               C4603 +
           ((C4802 + C4803) * C47161 + (C4804 + C4805) * C48049 -
            (C4806 + C4807) * C47157 - (C4808 + C4809) * C48057 +
            (C4810 + C4811) * C47167 + (C4812 + C4813) * C2723) *
               C48416) *
              C48301 * C48180 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C47157 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48049 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C47161) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C48057 -
            (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                C47167 -
            (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                C2723) *
               C4603 +
           ((C5462 + C5463) * C47157 -
            ((C5464 + C5465) * C48049 + (C5466 + C5467) * C47161) +
            (C5468 + C5469) * C48057 - (C5470 + C5471) * C47167 -
            (C5472 + C5473) * C2723) *
               C48416) *
              C48301 * C48187 +
          (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                C47161 +
            (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                C48049 -
            (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                C47157 -
            (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                C48057 +
            (C4605 * C428 + C4601 * C443 + C4606 * C429 + C48385 * C447) *
                C47167 +
            (C4605 * C446 + C4601 * C458 + C4606 * C448 + C48385 * C459) *
                C2723) *
               C4603 +
           ((C5912 + C5913) * C47161 + (C5914 + C5915) * C48049 -
            (C7006 + C7007) * C47157 - (C7008 + C7009) * C48057 +
            (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                C47167 +
            (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                C2723) *
               C48416) *
              C48301 * C3628) *
         C48085) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2355 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48443 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2356 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48436 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C2357 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48423 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C2358 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C4603 +
           ((C4802 + C4803) * C2355 + (C4804 + C4805) * C48443 -
            (C4806 + C4807) * C2356 - (C4808 + C4809) * C48436 +
            (C4810 + C4811) * C2357 + (C4812 + C4813) * C48423 -
            (C5110 + C5111) * C2358 - (C5112 + C5113) * C48402) *
               C48416) *
              C48301 * C3120 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C2356 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48443 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C2355) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C48436 -
            (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                C2357 -
            (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                C48423 +
            (C4605 * C423 + C4601 * C433 + C4606 * C425 + C48385 * C439) *
                C2358 +
            (C4605 * C438 + C4601 * C454 + C4606 * C440 + C48385 * C455) *
                C48402) *
               C4603 +
           ((C5462 + C5463) * C2356 -
            ((C5464 + C5465) * C48443 + (C5466 + C5467) * C2355) +
            (C5468 + C5469) * C48436 - (C5470 + C5471) * C2357 -
            (C5472 + C5473) * C48423 +
            (C4605 * C826 + C4601 * C834 + C4606 * C827 + C48385 * C836) *
                C2358 +
            (C4605 * C835 + C4601 * C841 + C4606 * C837 + C48385 * C842) *
                C48402) *
               C48416) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C2463 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C2457 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C2464 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C4603 +
            ((C4802 + C4803) * C2463 + (C4804 + C4805) * C2457 -
             (C4806 + C4807) * C2464 - (C4808 + C4809) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C2464 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C2457 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C2463) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48054) *
                C4603 +
            ((C5462 + C5463) * C2464 -
             ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
             (C5468 + C5469) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48437 +
          ((((C4807 + C4806) * C2464 -
             ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
             (C4809 + C4808) * C48054) *
                C4603 +
            ((C4814 + C4815) * C2464 -
             ((C4816 + C4817) * C2457 + (C4818 + C4819) * C2463) +
             (C4820 + C4821) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C5467 + C5466) * C2463 + (C5465 + C5464) * C2457 -
             (C5463 + C5462) * C2464 - (C5469 + C5468) * C48054) *
                C4603 +
            ((C5916 + C5917) * C2463 + (C5918 + C5919) * C2457 -
             (C6268 + C6269) * C2464 - (C6270 + C6271) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48425 +
          ((((C4819 + C4818) * C2463 + (C4817 + C4816) * C2457 -
             (C4815 + C4814) * C2464 - (C4821 + C4820) * C48054) *
                C4603 +
            ((C5726 + C5727) * C2463 + (C5728 + C5729) * C2457 -
             (C6062 + C6063) * C2464 - (C6064 + C6065) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C6269 + C6268) * C2464 -
             ((C5919 + C5918) * C2457 + (C5917 + C5916) * C2463) +
             (C6271 + C6270) * C48054) *
                C4603 +
            ((C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48385 * C1564) *
                 C2464 -
             ((C6418 + C6419) * C2457 + (C6420 + C6421) * C2463) +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C565 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C559 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C566 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C560 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C567 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C561 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C568 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C4603 +
           ((C4802 + C4803) * C565 + (C4804 + C4805) * C559 -
            (C4806 + C4807) * C566 - (C4808 + C4809) * C560 +
            (C4810 + C4811) * C567 + (C4812 + C4813) * C561 -
            (C5110 + C5111) * C568 - (C5112 + C5113) * C48402) *
               C48416) *
              C48301 * C48097 * C48366 +
          (((C4807 + C4806) * C566 -
            ((C4805 + C4804) * C559 + (C4803 + C4802) * C565) +
            (C4809 + C4808) * C560 - (C4811 + C4810) * C567 -
            (C4813 + C4812) * C561 + (C5111 + C5110) * C568 +
            (C5113 + C5112) * C48402) *
               C4603 +
           ((C4814 + C4815) * C566 -
            ((C4816 + C4817) * C559 + (C4818 + C4819) * C565) +
            (C4820 + C4821) * C560 - (C4822 + C4823) * C567 -
            (C4824 + C4825) * C561 +
            (C4605 * C276 + C4601 * C294 + C4606 * C277 + C48385 * C296) *
                C568 +
            (C4605 * C295 + C4601 * C306 + C4606 * C297 + C48385 * C307) *
                C48402) *
               C48416) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C47151 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48352 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C47132 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C4603 +
           ((C4802 + C4803) * C47151 + (C4804 + C4805) * C48352 -
            (C4806 + C4807) * C47132 - (C4808 + C4809) * C48054) *
               C48416) *
              C48301 * C48097 * C1301 +
          (((C4807 + C4806) * C47132 -
            ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
            (C4809 + C4808) * C48054) *
               C4603 +
           ((C4814 + C4815) * C47132 -
            ((C4816 + C4817) * C48352 + (C4818 + C4819) * C47151) +
            (C4820 + C4821) * C48054) *
               C48416) *
              C48301 * C48097 * C1302 +
          (((C4819 + C4818) * C47151 + (C4817 + C4816) * C48352 -
            (C4815 + C4814) * C47132 - (C4821 + C4820) * C48054) *
               C4603 +
           ((C5726 + C5727) * C47151 + (C5728 + C5729) * C48352 -
            (C6062 + C6063) * C47132 - (C6064 + C6065) * C48054) *
               C48416) *
              C48301 * C48097 * C1303 +
          (((C6063 + C6062) * C47132 -
            ((C5729 + C5728) * C48352 + (C5727 + C5726) * C47151) +
            (C6065 + C6064) * C48054) *
               C4603 +
           ((C4605 * C1035 + C4601 * C1044 + C4606 * C1036 + C48385 * C1045) *
                C47132 -
            ((C5730 + C5731) * C48352 + (C5732 + C5733) * C47151) +
            (C4605 * C1047 + C4601 * C1053 + C4606 * C1048 + C48385 * C1054) *
                C48054) *
               C48416) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C265 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C259 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C266 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C260 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C267 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C48392) *
                C4603 +
            ((C4802 + C4803) * C265 + (C4804 + C4805) * C259 -
             (C4806 + C4807) * C266 - (C4808 + C4809) * C260 +
             (C4810 + C4811) * C267 + (C4812 + C4813) * C48392) *
                C48416) *
               C48301 * C48367 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C266 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C259 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C265) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C260 -
             (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                 C267 -
             (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                 C48392) *
                C4603 +
            ((C5462 + C5463) * C266 -
             ((C5464 + C5465) * C259 + (C5466 + C5467) * C265) +
             (C5468 + C5469) * C260 - (C5470 + C5471) * C267 -
             (C5472 + C5473) * C48392) *
                C48416) *
               C48301 * C48184) *
              C48366 +
          ((((C4807 + C4806) * C266 -
             ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
             (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
             (C4813 + C4812) * C48392) *
                C4603 +
            ((C4814 + C4815) * C266 -
             ((C4816 + C4817) * C259 + (C4818 + C4819) * C265) +
             (C4820 + C4821) * C260 - (C4822 + C4823) * C267 -
             (C4824 + C4825) * C48392) *
                C48416) *
               C48301 * C48367 +
           (((C5467 + C5466) * C265 + (C5465 + C5464) * C259 -
             (C5463 + C5462) * C266 - (C5469 + C5468) * C260 +
             (C5471 + C5470) * C267 + (C5473 + C5472) * C48392) *
                C4603 +
            ((C4605 * C1170 + C4601 * C1185 + C4606 * C1169 + C48385 * C1184) *
                 C265 +
             (C4605 * C1182 + C4601 * C1197 + C4606 * C1181 + C48385 * C1196) *
                 C259 -
             (C4606 * C1168 + C48385 * C1183 + C4605 * C1169 + C4601 * C1184) *
                 C266 -
             (C4606 * C1180 + C48385 * C1195 + C4605 * C1181 + C4601 * C1196) *
                 C260 +
             (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                 C267 +
             (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                 C48392) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C48367 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C48184) *
              C1301 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C48184 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C48367) *
              C1302 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
            ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
               C48301 * C48367 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48416 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C4603) *
               C48301 * C48184) *
              C1303 +
          ((((C6421 + C6420) * C1030 + (C6419 + C6418) * C48044) * C4603 +
            ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48385 * C6404) *
                 C1030 +
             (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48385 * C6408) *
                 C48044) *
                C48416) *
               C48301 * C48184 -
           (((C5730 + C5731) * C48044 + (C5732 + C5733) * C1030) * C48416 +
            ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C4603) *
               C48301 * C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C265 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C259 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C266 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C260 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C267 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C265 + (C4804 + C4805) * C259 -
            (C4806 + C4807) * C266 - (C4808 + C4809) * C260 +
            (C4810 + C4811) * C267 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C48097 * C48437 +
          (((C4807 + C4806) * C266 -
            ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
            (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
            (C4813 + C4812) * C48392) *
               C4603 +
           ((C4814 + C4815) * C266 -
            ((C4816 + C4817) * C259 + (C4818 + C4819) * C265) +
            (C4820 + C4821) * C260 - (C4822 + C4823) * C267 -
            (C4824 + C4825) * C48392) *
               C48416) *
              C48301 * C48097 * C48425 +
          (((C4819 + C4818) * C265 + (C4817 + C4816) * C259 -
            (C4815 + C4814) * C266 - (C4821 + C4820) * C260 +
            (C4823 + C4822) * C267 + (C4825 + C4824) * C48392) *
               C4603 +
           ((C4605 * C1033 + C4601 * C1042 + C4606 * C1032 + C48385 * C1041) *
                C265 +
            (C4605 * C1039 + C4601 * C1051 + C4606 * C1038 + C48385 * C1050) *
                C259 -
            (C4606 * C1031 + C48385 * C1040 + C4605 * C1032 + C4601 * C1041) *
                C266 -
            (C4606 * C1037 + C48385 * C1049 + C4605 * C1038 + C4601 * C1050) *
                C260 +
            (C4605 * C1031 + C4601 * C1040 + C4606 * C1307 + C48385 * C1308) *
                C267 +
            (C4605 * C1037 + C4601 * C1049 + C4606 * C1309 + C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) * C116 +
           (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) * C104 -
           (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) * C117 -
           (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) * C105 +
           (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) * C118 +
           (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) * C106 -
           (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) * C119 -
           (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) * C107 +
           (C4605 * C125 + C4601 * C136 + C4606 * C126 + C48385 * C138) * C120 +
           (C4605 * C137 + C4601 * C146 + C4606 * C139 + C48385 * C147) *
               C108) *
              C4603 +
          ((C4605 * C271 + C4601 * C284 + C4606 * C268 + C48385 * C278) * C116 +
           (C4605 * C283 + C4601 * C300 + C4606 * C282 + C48385 * C299) * C104 -
           (C4606 * C269 + C48385 * C279 + C4605 * C268 + C4601 * C278) * C117 -
           (C4606 * C281 + C48385 * C298 + C4605 * C282 + C4601 * C299) * C105 +
           (C4605 * C269 + C4601 * C279 + C4606 * C270 + C48385 * C280) * C118 +
           (C4605 * C281 + C4601 * C298 + C4606 * C285 + C48385 * C301) * C106 -
           (C4606 * C272 + C48385 * C286 + C4605 * C270 + C4601 * C280) * C119 -
           (C4606 * C287 + C48385 * C302 + C4605 * C285 + C4601 * C301) * C107 +
           (C4605 * C272 + C4601 * C286 + C4606 * C569 + C48385 * C570) * C120 +
           (C4605 * C287 + C4601 * C302 + C4606 * C571 + C48385 * C572) *
               C108) *
              C48416) *
         C48301 * C48097 * C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C265 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C259 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C266 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C260 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C267 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C265 + (C4804 + C4805) * C259 -
            (C4806 + C4807) * C266 - (C4808 + C4809) * C260 +
            (C4810 + C4811) * C267 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C48438 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C266 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C259 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C265) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C260 -
            (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                C267 -
            (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                C48392) *
               C4603 +
           ((C4605 * C824 + C4601 * C829 + C4606 * C825 + C48385 * C830) *
                C266 -
            ((C4606 * C832 + C48385 * C839 + C4605 * C831 + C4601 * C838) *
                 C259 +
             (C4606 * C824 + C48385 * C829 + C4605 * C823 + C4601 * C828) *
                 C265) +
            (C4605 * C832 + C4601 * C839 + C4606 * C833 + C48385 * C840) *
                C260 -
            (C4606 * C826 + C48385 * C834 + C4605 * C825 + C4601 * C830) *
                C267 -
            (C4606 * C835 + C48385 * C841 + C4605 * C833 + C4601 * C840) *
                C48392) *
               C48416) *
              C48301 * C48427 +
          (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                C265 +
            (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                C259 -
            (C4606 * C428 + C48385 * C443 + C4605 * C427 + C4601 * C442) *
                C266 -
            (C4606 * C446 + C48385 * C458 + C4605 * C445 + C4601 * C457) *
                C260 +
            (C4605 * C428 + C4601 * C443 + C4606 * C429 + C48385 * C447) *
                C267 +
            (C4605 * C446 + C4601 * C458 + C4606 * C448 + C48385 * C459) *
                C48392) *
               C4603 +
           ((C4605 * C1167 + C4601 * C1179 + C4606 * C1166 + C48385 * C1178) *
                C265 +
            (C4605 * C1176 + C4601 * C1194 + C4606 * C1175 + C48385 * C1193) *
                C259 -
            (C4606 * C1165 + C48385 * C1177 + C4605 * C1166 + C4601 * C1178) *
                C266 -
            (C4606 * C1174 + C48385 * C1192 + C4605 * C1175 + C4601 * C1193) *
                C260 +
            (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                C267 +
            (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                C48392) *
               C48416) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C959 + (C4804 + C4805) * C48434 -
            (C4806 + C4807) * C960 - (C4808 + C4809) * C48421 +
            (C4810 + C4811) * C961 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C48097 * C956 +
          (((C4807 + C4806) * C960 -
            ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
            (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
            (C4813 + C4812) * C48392) *
               C4603 +
           ((C4814 + C4815) * C960 -
            ((C4816 + C4817) * C48434 + (C4818 + C4819) * C959) +
            (C4820 + C4821) * C48421 - (C4822 + C4823) * C961 -
            (C4824 + C4825) * C48392) *
               C48416) *
              C48301 * C48097 * C957 +
          (((C4819 + C4818) * C959 + (C4817 + C4816) * C48434 -
            (C4815 + C4814) * C960 - (C4821 + C4820) * C48421 +
            (C4823 + C4822) * C961 + (C4825 + C4824) * C48392) *
               C4603 +
           ((C4605 * C1033 + C4601 * C1042 + C4606 * C1032 + C48385 * C1041) *
                C959 +
            (C4605 * C1039 + C4601 * C1051 + C4606 * C1038 + C48385 * C1050) *
                C48434 -
            (C4606 * C1031 + C48385 * C1040 + C4605 * C1032 + C4601 * C1041) *
                C960 -
            (C4606 * C1037 + C48385 * C1049 + C4605 * C1038 + C4601 * C1050) *
                C48421 +
            (C4605 * C1031 + C4601 * C1040 + C4606 * C1307 + C48385 * C1308) *
                C961 +
            (C4605 * C1037 + C4601 * C1049 + C4606 * C1309 + C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C1030 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48044) *
               C4603 +
           ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
              C48301 * C48097 * C1025 -
          (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
           ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
              C48301 * C48097 * C1026 +
          (((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
           ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
              C48301 * C48097 * C1027 -
          (((C5730 + C5731) * C48044 + (C5732 + C5733) * C1030) * C48416 +
           ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C4603) *
              C48301 * C48097 * C1028 +
          (((C5733 + C5732) * C1030 + (C5731 + C5730) * C48044) * C4603 +
           ((C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48385 * C5704) *
                C1030 +
            (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48385 * C5708) *
                C48044) *
               C48416) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C4603 +
            ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
               C48301 * C48438 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48416 +
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C48044 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C1030) *
                C4603) *
               C48301 * C48427 +
           (((C4605 * C426 + C4601 * C441 + C4606 * C427 + C48385 * C442) *
                 C1030 +
             (C4605 * C444 + C4601 * C456 + C4606 * C445 + C48385 * C457) *
                 C48044) *
                C4603 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48416) *
               C48301 * C48401) *
              C956 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C4603 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48416) *
               C48301 * C48427 -
           (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
               C48301 * C48438 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48416 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C4603) *
               C48301 * C48401) *
              C957 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
            ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
               C48301 * C48438 -
           (((C4606 * C1566 + C48385 * C1569 + C4605 * C1565 + C4601 * C1568) *
                 C48044 +
             (C4606 * C1560 + C48385 * C1563 + C4605 * C1559 + C4601 * C1562) *
                 C1030) *
                C48416 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C4603) *
               C48301 * C48427 +
           (((C5923 + C5922) * C1030 + (C5921 + C5920) * C48044) * C4603 +
            ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48385 * C5882) *
                 C1030 +
             (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48385 * C5886) *
                 C48044) *
                C48416) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C565 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C559 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C566 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C560 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C567 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C561 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C568 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C4603 +
           ((C4802 + C4803) * C565 + (C4804 + C4805) * C559 -
            (C4806 + C4807) * C566 - (C4808 + C4809) * C560 +
            (C4810 + C4811) * C567 + (C4812 + C4813) * C561 -
            (C5110 + C5111) * C568 - (C5112 + C5113) * C48402) *
               C48416) *
              C48301 * C48367 +
          (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                C566 -
            ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                 C559 +
             (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                 C565) +
            (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                C560 -
            (C4606 * C423 + C48385 * C433 + C4605 * C422 + C4601 * C432) *
                C567 -
            (C4606 * C438 + C48385 * C454 + C4605 * C434 + C4601 * C451) *
                C561 +
            (C4605 * C423 + C4601 * C433 + C4606 * C425 + C48385 * C439) *
                C568 +
            (C4605 * C438 + C4601 * C454 + C4606 * C440 + C48385 * C455) *
                C48402) *
               C4603 +
           ((C4605 * C824 + C4601 * C829 + C4606 * C825 + C48385 * C830) *
                C566 -
            ((C4606 * C832 + C48385 * C839 + C4605 * C831 + C4601 * C838) *
                 C559 +
             (C4606 * C824 + C48385 * C829 + C4605 * C823 + C4601 * C828) *
                 C565) +
            (C4605 * C832 + C4601 * C839 + C4606 * C833 + C48385 * C840) *
                C560 -
            (C4606 * C826 + C48385 * C834 + C4605 * C825 + C4601 * C830) *
                C567 -
            (C4606 * C835 + C48385 * C841 + C4605 * C833 + C4601 * C840) *
                C561 +
            (C4605 * C826 + C4601 * C834 + C4606 * C827 + C48385 * C836) *
                C568 +
            (C4605 * C835 + C4601 * C841 + C4606 * C837 + C48385 * C842) *
                C48402) *
               C48416) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47151 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48352 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47132 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C4603 +
            ((C4802 + C4803) * C47151 + (C4804 + C4805) * C48352 -
             (C4806 + C4807) * C47132 - (C4808 + C4809) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C4605 * C421 + C4601 * C431 + C4606 * C422 + C48385 * C432) *
                 C47132 -
             ((C4606 * C435 + C48385 * C452 + C4605 * C436 + C4601 * C453) *
                  C48352 +
              (C4606 * C421 + C48385 * C431 + C4605 * C424 + C4601 * C437) *
                  C47151) +
             (C4605 * C435 + C4601 * C452 + C4606 * C434 + C48385 * C451) *
                 C48054) *
                C4603 +
            ((C5462 + C5463) * C47132 -
             ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
             (C5468 + C5469) * C48054) *
                C48416) *
               C48301 * C48184) *
              C956 +
          ((((C4807 + C4806) * C47132 -
             ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
             (C4809 + C4808) * C48054) *
                C4603 +
            ((C4814 + C4815) * C47132 -
             ((C4816 + C4817) * C48352 + (C4818 + C4819) * C47151) +
             (C4820 + C4821) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C5467 + C5466) * C47151 + (C5465 + C5464) * C48352 -
             (C5463 + C5462) * C47132 - (C5469 + C5468) * C48054) *
                C4603 +
            ((C5916 + C5917) * C47151 + (C5918 + C5919) * C48352 -
             (C6268 + C6269) * C47132 - (C6270 + C6271) * C48054) *
                C48416) *
               C48301 * C48184) *
              C957 +
          ((((C4819 + C4818) * C47151 + (C4817 + C4816) * C48352 -
             (C4815 + C4814) * C47132 - (C4821 + C4820) * C48054) *
                C4603 +
            ((C5726 + C5727) * C47151 + (C5728 + C5729) * C48352 -
             (C6062 + C6063) * C47132 - (C6064 + C6065) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C6269 + C6268) * C47132 -
             ((C5919 + C5918) * C48352 + (C5917 + C5916) * C47151) +
             (C6271 + C6270) * C48054) *
                C4603 +
            ((C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48385 * C1564) *
                 C47132 -
             ((C4606 * C1566 + C48385 * C1569 + C4605 * C1565 + C4601 * C1568) *
                  C48352 +
              (C4606 * C1560 + C48385 * C1563 + C4605 * C1559 + C4601 * C1562) *
                  C47151) +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) * C116 +
           (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) * C104 -
           (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) * C117 -
           (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) * C105 +
           (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) * C118 +
           (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) * C106 -
           (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) * C119 -
           (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) * C107 +
           (C4605 * C125 + C4601 * C136 + C4606 * C126 + C48385 * C138) * C120 +
           (C4605 * C137 + C4601 * C146 + C4606 * C139 + C48385 * C147) *
               C108) *
              C4603 +
          ((C4605 * C271 + C4601 * C284 + C4606 * C268 + C48385 * C278) * C116 +
           (C4605 * C283 + C4601 * C300 + C4606 * C282 + C48385 * C299) * C104 -
           (C4606 * C269 + C48385 * C279 + C4605 * C268 + C4601 * C278) * C117 -
           (C4606 * C281 + C48385 * C298 + C4605 * C282 + C4601 * C299) * C105 +
           (C4605 * C269 + C4601 * C279 + C4606 * C270 + C48385 * C280) * C118 +
           (C4605 * C281 + C4601 * C298 + C4606 * C285 + C48385 * C301) * C106 -
           (C4606 * C272 + C48385 * C286 + C4605 * C270 + C4601 * C280) * C119 -
           (C4606 * C287 + C48385 * C302 + C4605 * C285 + C4601 * C301) * C107 +
           (C4605 * C272 + C4601 * C286 + C4606 * C569 + C48385 * C570) * C120 +
           (C4605 * C287 + C4601 * C302 + C4606 * C571 + C48385 * C572) *
               C108) *
              C48416) *
         C48301 * C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C265 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C259 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C266 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C260 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C267 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C265 + (C4804 + C4805) * C259 -
            (C4806 + C4807) * C266 - (C4808 + C4809) * C260 +
            (C4810 + C4811) * C267 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C48097 * C48437 +
          (((C4807 + C4806) * C266 -
            ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
            (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
            (C4813 + C4812) * C48392) *
               C4603 +
           ((C4814 + C4815) * C266 -
            ((C4816 + C4817) * C259 + (C4818 + C4819) * C265) +
            (C4820 + C4821) * C260 - (C4822 + C4823) * C267 -
            (C4824 + C4825) * C48392) *
               C48416) *
              C48301 * C48097 * C48425 +
          (((C4819 + C4818) * C265 + (C4817 + C4816) * C259 -
            (C4815 + C4814) * C266 - (C4821 + C4820) * C260 +
            (C4823 + C4822) * C267 + (C4825 + C4824) * C48392) *
               C4603 +
           ((C4605 * C1033 + C4601 * C1042 + C4606 * C1032 + C48385 * C1041) *
                C265 +
            (C4605 * C1039 + C4601 * C1051 + C4606 * C1038 + C48385 * C1050) *
                C259 -
            (C4606 * C1031 + C48385 * C1040 + C4605 * C1032 + C4601 * C1041) *
                C266 -
            (C4606 * C1037 + C48385 * C1049 + C4605 * C1038 + C4601 * C1050) *
                C260 +
            (C4605 * C1031 + C4601 * C1040 + C4606 * C1307 + C48385 * C1308) *
                C267 +
            (C4605 * C1037 + C4601 * C1049 + C4606 * C1309 + C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C4603 +
           ((C4802 + C4803) * C959 + (C4804 + C4805) * C48434 -
            (C4806 + C4807) * C960 - (C4808 + C4809) * C48421 +
            (C4810 + C4811) * C961 + (C4812 + C4813) * C48392) *
               C48416) *
              C48301 * C48097 * C956 +
          (((C4807 + C4806) * C960 -
            ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
            (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
            (C4813 + C4812) * C48392) *
               C4603 +
           ((C4814 + C4815) * C960 -
            ((C4816 + C4817) * C48434 + (C4818 + C4819) * C959) +
            (C4820 + C4821) * C48421 - (C4822 + C4823) * C961 -
            (C4824 + C4825) * C48392) *
               C48416) *
              C48301 * C48097 * C957 +
          (((C4819 + C4818) * C959 + (C4817 + C4816) * C48434 -
            (C4815 + C4814) * C960 - (C4821 + C4820) * C48421 +
            (C4823 + C4822) * C961 + (C4825 + C4824) * C48392) *
               C4603 +
           ((C4605 * C1033 + C4601 * C1042 + C4606 * C1032 + C48385 * C1041) *
                C959 +
            (C4605 * C1039 + C4601 * C1051 + C4606 * C1038 + C48385 * C1050) *
                C48434 -
            (C4606 * C1031 + C48385 * C1040 + C4605 * C1032 + C4601 * C1041) *
                C960 -
            (C4606 * C1037 + C48385 * C1049 + C4605 * C1038 + C4601 * C1050) *
                C48421 +
            (C4605 * C1031 + C4601 * C1040 + C4606 * C1307 + C48385 * C1308) *
                C961 +
            (C4605 * C1037 + C4601 * C1049 + C4606 * C1309 + C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C1030 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48044) *
               C4603 +
           ((C4802 + C4803) * C1030 + (C4804 + C4805) * C48044) * C48416) *
              C48301 * C48097 * C1025 -
          (((C4816 + C4817) * C48044 + (C4818 + C4819) * C1030) * C48416 +
           ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C4603) *
              C48301 * C48097 * C1026 +
          (((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C4603 +
           ((C5726 + C5727) * C1030 + (C5728 + C5729) * C48044) * C48416) *
              C48301 * C48097 * C1027 -
          (((C5730 + C5731) * C48044 + (C5732 + C5733) * C1030) * C48416 +
           ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C4603) *
              C48301 * C48097 * C1028 +
          (((C5733 + C5732) * C1030 + (C5731 + C5730) * C48044) * C4603 +
           ((C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48385 * C5704) *
                C1030 +
            (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48385 * C5708) *
                C48044) *
               C48416) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C47161 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48049 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C47157 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48057 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C47167 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C2723) *
               C48286 * C10335 +
           ((C10678 + C10679) * C47161 + (C10680 + C10681) * C48049 -
            (C10682 + C10683) * C47157 - (C10684 + C10685) * C48057 +
            (C10686 + C10687) * C47167 + (C10688 + C10689) * C2723) *
               C48286 * C48418) *
              C48097 * C48140 +
          (((C4807 + C4806) * C47157 -
            ((C4805 + C4804) * C48049 + (C4803 + C4802) * C47161) +
            (C4809 + C4808) * C48057 - (C4811 + C4810) * C47167 -
            (C4813 + C4812) * C2723) *
               C48286 * C10335 +
           ((C5462 + C5463) * C47157 -
            ((C5464 + C5465) * C48049 + (C5466 + C5467) * C47161) +
            (C5468 + C5469) * C48057 - (C5470 + C5471) * C47167 -
            (C5472 + C5473) * C2723) *
               C48286 * C48418) *
              C48097 * C48147 +
          (((C4819 + C4818) * C47161 + (C4817 + C4816) * C48049 -
            (C4815 + C4814) * C47157 - (C4821 + C4820) * C48057 +
            (C4823 + C4822) * C47167 + (C4825 + C4824) * C2723) *
               C48286 * C10335 +
           ((C5916 + C5917) * C47161 + (C5918 + C5919) * C48049 -
            (C6268 + C6269) * C47157 - (C6270 + C6271) * C48057 +
            (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                C47167 +
            (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                C2723) *
               C48286 * C48418) *
              C48097 * C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C2463 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C2457 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C2464 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C48286 * C10335 +
            ((C10678 + C10679) * C2463 + (C10680 + C10681) * C2457 -
             (C10682 + C10683) * C2464 - (C10684 + C10685) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C10683 + C10682) * C2464 -
             ((C10681 + C10680) * C2457 + (C10679 + C10678) * C2463) +
             (C10685 + C10684) * C48054) *
                C48286 * C10335 +
            ((C10690 + C10691) * C2464 -
             ((C10692 + C10693) * C2457 + (C10694 + C10695) * C2463) +
             (C10696 + C10697) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48140 +
          ((((C4807 + C4806) * C2464 -
             ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
             (C4809 + C4808) * C48054) *
                C48286 * C10335 +
            ((C5462 + C5463) * C2464 -
             ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
             (C5468 + C5469) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C5467 + C5466) * C2463 + (C5465 + C5464) * C2457 -
             (C5463 + C5462) * C2464 - (C5469 + C5468) * C48054) *
                C48286 * C10335 +
            ((C5912 + C5913) * C2463 + (C5914 + C5915) * C2457 -
             (C7006 + C7007) * C2464 - (C7008 + C7009) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48147 +
          ((((C4819 + C4818) * C2463 + (C4817 + C4816) * C2457 -
             (C4815 + C4814) * C2464 - (C4821 + C4820) * C48054) *
                C48286 * C10335 +
            ((C5916 + C5917) * C2463 + (C5918 + C5919) * C2457 -
             (C6268 + C6269) * C2464 - (C6270 + C6271) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C6269 + C6268) * C2464 -
             ((C5919 + C5918) * C2457 + (C5917 + C5916) * C2463) +
             (C6271 + C6270) * C48054) *
                C48286 * C10335 +
            ((C4605 * C1172 + C4601 * C1187 + C4606 * C1173 + C48385 * C1188) *
                 C2464 -
             ((C5920 + C5921) * C2457 + (C5922 + C5923) * C2463) +
             (C4605 * C1190 + C4601 * C1199 + C4606 * C1191 + C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2463 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C2457 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2464 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C48286 * C10335 +
           ((C10678 + C10679) * C2463 + (C10680 + C10681) * C2457 -
            (C10682 + C10683) * C2464 - (C10684 + C10685) * C48054) *
               C48286 * C48418) *
              C48097 * C48444 +
          (((C4807 + C4806) * C2464 -
            ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
            (C4809 + C4808) * C48054) *
               C48286 * C10335 +
           ((C5462 + C5463) * C2464 -
            ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
            (C5468 + C5469) * C48054) *
               C48286 * C48418) *
              C48097 * C48440 +
          (((C4819 + C4818) * C2463 + (C4817 + C4816) * C2457 -
            (C4815 + C4814) * C2464 - (C4821 + C4820) * C48054) *
               C48286 * C10335 +
           ((C5916 + C5917) * C2463 + (C5918 + C5919) * C2457 -
            (C6268 + C6269) * C2464 - (C6270 + C6271) * C48054) *
               C48286 * C48418) *
              C48097 * C48430 +
          (((C6063 + C6062) * C2464 -
            ((C5729 + C5728) * C2457 + (C5727 + C5726) * C2463) +
            (C6065 + C6064) * C48054) *
               C48286 * C10335 +
           ((C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48385 * C1564) *
                C2464 -
            ((C6418 + C6419) * C2457 + (C6420 + C6421) * C2463) +
            (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48385 * C1570) *
                C48054) *
               C48286 * C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2355 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48443 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2356 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48436 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C2357 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48423 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C2358 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C48286 * C10335 +
           ((C10678 + C10679) * C2355 + (C10680 + C10681) * C48443 -
            (C10682 + C10683) * C2356 - (C10684 + C10685) * C48436 +
            (C10686 + C10687) * C2357 + (C10688 + C10689) * C48423 -
            (C10970 + C10971) * C2358 - (C10972 + C10973) * C48402) *
               C48286 * C48418) *
              C48097 * C2353 +
          (((C4807 + C4806) * C2356 -
            ((C4805 + C4804) * C48443 + (C4803 + C4802) * C2355) +
            (C4809 + C4808) * C48436 - (C4811 + C4810) * C2357 -
            (C4813 + C4812) * C48423 + (C5111 + C5110) * C2358 +
            (C5113 + C5112) * C48402) *
               C48286 * C10335 +
           ((C5462 + C5463) * C2356 -
            ((C5464 + C5465) * C48443 + (C5466 + C5467) * C2355) +
            (C5468 + C5469) * C48436 - (C5470 + C5471) * C2357 -
            (C5472 + C5473) * C48423 +
            (C4605 * C826 + C4601 * C834 + C4606 * C827 + C48385 * C836) *
                C2358 +
            (C4605 * C835 + C4601 * C841 + C4606 * C837 + C48385 * C842) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C2463 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C2457 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C2464 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C48286 * C10335 +
            ((C10678 + C10679) * C2463 + (C10680 + C10681) * C2457 -
             (C10682 + C10683) * C2464 - (C10684 + C10685) * C48054) *
                C48286 * C48418) *
               C48438 +
           (((C10683 + C10682) * C2464 -
             ((C10681 + C10680) * C2457 + (C10679 + C10678) * C2463) +
             (C10685 + C10684) * C48054) *
                C48286 * C10335 +
            ((C10690 + C10691) * C2464 -
             ((C10692 + C10693) * C2457 + (C10694 + C10695) * C2463) +
             (C10696 + C10697) * C48054) *
                C48286 * C48418) *
               C48427 +
           (((C10695 + C10694) * C2463 + (C10693 + C10692) * C2457 -
             (C10691 + C10690) * C2464 - (C10697 + C10696) * C48054) *
                C48286 * C10335 +
            ((C12394 + C12395) * C2463 + (C12396 + C12397) * C2457 -
             (C12734 + C12735) * C2464 - (C12736 + C12737) * C48054) *
                C48286 * C48418) *
               C48401) *
              C2353 +
          ((((C4807 + C4806) * C2464 -
             ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
             (C4809 + C4808) * C48054) *
                C48286 * C10335 +
            ((C5462 + C5463) * C2464 -
             ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
             (C5468 + C5469) * C48054) *
                C48286 * C48418) *
               C48438 +
           (((C5467 + C5466) * C2463 + (C5465 + C5464) * C2457 -
             (C5463 + C5462) * C2464 - (C5469 + C5468) * C48054) *
                C48286 * C10335 +
            ((C5912 + C5913) * C2463 + (C5914 + C5915) * C2457 -
             (C7006 + C7007) * C2464 - (C7008 + C7009) * C48054) *
                C48286 * C48418) *
               C48427 +
           (((C7007 + C7006) * C2464 -
             ((C5915 + C5914) * C2457 + (C5913 + C5912) * C2463) +
             (C7009 + C7008) * C48054) *
                C48286 * C10335 +
            ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48385 * C2244) *
                 C2464 -
             ((C7286 + C7287) * C2457 + (C7288 + C7289) * C2463) +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48385 * C2250) *
                 C48054) *
                C48286 * C48418) *
               C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47161 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48049 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47157 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48057 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C47167 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C2723) *
                C48286 * C10335 +
            ((C10678 + C10679) * C47161 + (C10680 + C10681) * C48049 -
             (C10682 + C10683) * C47157 - (C10684 + C10685) * C48057 +
             (C10686 + C10687) * C47167 + (C10688 + C10689) * C2723) *
                C48286 * C48418) *
               C48367 +
           (((C10683 + C10682) * C47157 -
             ((C10681 + C10680) * C48049 + (C10679 + C10678) * C47161) +
             (C10685 + C10684) * C48057 - (C10687 + C10686) * C47167 -
             (C10689 + C10688) * C2723) *
                C48286 * C10335 +
            ((C10690 + C10691) * C47157 -
             ((C10692 + C10693) * C48049 + (C10694 + C10695) * C47161) +
             (C10696 + C10697) * C48057 - (C10698 + C10699) * C47167 -
             (C10700 + C10701) * C2723) *
                C48286 * C48418) *
               C48184) *
              C2353 +
          ((((C4807 + C4806) * C47157 -
             ((C4805 + C4804) * C48049 + (C4803 + C4802) * C47161) +
             (C4809 + C4808) * C48057 - (C4811 + C4810) * C47167 -
             (C4813 + C4812) * C2723) *
                C48286 * C10335 +
            ((C5462 + C5463) * C47157 -
             ((C5464 + C5465) * C48049 + (C5466 + C5467) * C47161) +
             (C5468 + C5469) * C48057 - (C5470 + C5471) * C47167 -
             (C5472 + C5473) * C2723) *
                C48286 * C48418) *
               C48367 +
           (((C5467 + C5466) * C47161 + (C5465 + C5464) * C48049 -
             (C5463 + C5462) * C47157 - (C5469 + C5468) * C48057 +
             (C5471 + C5470) * C47167 + (C5473 + C5472) * C2723) *
                C48286 * C10335 +
            ((C5912 + C5913) * C47161 + (C5914 + C5915) * C48049 -
             (C7006 + C7007) * C47157 - (C7008 + C7009) * C48057 +
             (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                 C47167 +
             (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                 C2723) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2355 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48443 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2356 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48436 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C2357 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48423 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C2358 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C48286 * C10335 +
           ((C10678 + C10679) * C2355 + (C10680 + C10681) * C48443 -
            (C10682 + C10683) * C2356 - (C10684 + C10685) * C48436 +
            (C10686 + C10687) * C2357 + (C10688 + C10689) * C48423 -
            (C10970 + C10971) * C2358 - (C10972 + C10973) * C48402) *
               C48286 * C48418) *
              C48097 * C2353 +
          (((C4807 + C4806) * C2356 -
            ((C4805 + C4804) * C48443 + (C4803 + C4802) * C2355) +
            (C4809 + C4808) * C48436 - (C4811 + C4810) * C2357 -
            (C4813 + C4812) * C48423 + (C5111 + C5110) * C2358 +
            (C5113 + C5112) * C48402) *
               C48286 * C10335 +
           ((C5462 + C5463) * C2356 -
            ((C5464 + C5465) * C48443 + (C5466 + C5467) * C2355) +
            (C5468 + C5469) * C48436 - (C5470 + C5471) * C2357 -
            (C5472 + C5473) * C48423 +
            (C4605 * C826 + C4601 * C834 + C4606 * C827 + C48385 * C836) *
                C2358 +
            (C4605 * C835 + C4601 * C841 + C4606 * C837 + C48385 * C842) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2463 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C2457 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2464 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C48286 * C10335 +
           ((C10678 + C10679) * C2463 + (C10680 + C10681) * C2457 -
            (C10682 + C10683) * C2464 - (C10684 + C10685) * C48054) *
               C48286 * C48418) *
              C48097 * C48444 +
          (((C4807 + C4806) * C2464 -
            ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
            (C4809 + C4808) * C48054) *
               C48286 * C10335 +
           ((C5462 + C5463) * C2464 -
            ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
            (C5468 + C5469) * C48054) *
               C48286 * C48418) *
              C48097 * C48440 +
          (((C4819 + C4818) * C2463 + (C4817 + C4816) * C2457 -
            (C4815 + C4814) * C2464 - (C4821 + C4820) * C48054) *
               C48286 * C10335 +
           ((C5916 + C5917) * C2463 + (C5918 + C5919) * C2457 -
            (C6268 + C6269) * C2464 - (C6270 + C6271) * C48054) *
               C48286 * C48418) *
              C48097 * C48430 +
          (((C6063 + C6062) * C2464 -
            ((C5729 + C5728) * C2457 + (C5727 + C5726) * C2463) +
            (C6065 + C6064) * C48054) *
               C48286 * C10335 +
           ((C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48385 * C1564) *
                C2464 -
            ((C6418 + C6419) * C2457 + (C6420 + C6421) * C2463) +
            (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48385 * C1570) *
                C48054) *
               C48286 * C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47151 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48352 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47132 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C48286 * C10335 +
            ((C10678 + C10679) * C47151 + (C10680 + C10681) * C48352 -
             (C10682 + C10683) * C47132 - (C10684 + C10685) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C10683 + C10682) * C47132 -
             ((C10681 + C10680) * C48352 + (C10679 + C10678) * C47151) +
             (C10685 + C10684) * C48054) *
                C48286 * C10335 +
            ((C10690 + C10691) * C47132 -
             ((C10692 + C10693) * C48352 + (C10694 + C10695) * C47151) +
             (C10696 + C10697) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48140 +
          ((((C4807 + C4806) * C47132 -
             ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
             (C4809 + C4808) * C48054) *
                C48286 * C10335 +
            ((C5462 + C5463) * C47132 -
             ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
             (C5468 + C5469) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C5467 + C5466) * C47151 + (C5465 + C5464) * C48352 -
             (C5463 + C5462) * C47132 - (C5469 + C5468) * C48054) *
                C48286 * C10335 +
            ((C5912 + C5913) * C47151 + (C5914 + C5915) * C48352 -
             (C7006 + C7007) * C47132 - (C7008 + C7009) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48147 +
          ((((C4819 + C4818) * C47151 + (C4817 + C4816) * C48352 -
             (C4815 + C4814) * C47132 - (C4821 + C4820) * C48054) *
                C48286 * C10335 +
            ((C5916 + C5917) * C47151 + (C5918 + C5919) * C48352 -
             (C6268 + C6269) * C47132 - (C6270 + C6271) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C6269 + C6268) * C47132 -
             ((C5919 + C5918) * C48352 + (C5917 + C5916) * C47151) +
             (C6271 + C6270) * C48054) *
                C48286 * C10335 +
            ((C4605 * C1172 + C4601 * C1187 + C4606 * C1173 + C48385 * C1188) *
                 C47132 -
             ((C5920 + C5921) * C48352 + (C5922 + C5923) * C47151) +
             (C4605 * C1190 + C4601 * C1199 + C4606 * C1191 + C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C48180 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C48187 +
           (((C10695 + C10694) * C1030 + (C10693 + C10692) * C48044) * C48286 *
                C10335 +
            ((C12394 + C12395) * C1030 + (C12396 + C12397) * C48044) * C48286 *
                C48418) *
               C3628) *
              C48140 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C48187 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C48180 -
           (((C7286 + C7287) * C48044 + (C7288 + C7289) * C1030) * C48286 *
                C48418 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C48286 *
                C10335) *
               C3628) *
              C48147 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
                C10335 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
                C48418) *
               C48180 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48286 *
                C48418 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C48286 *
                C10335) *
               C48187 +
           (((C5923 + C5922) * C1030 + (C5921 + C5920) * C48044) * C48286 *
                C10335 +
            ((C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48385 * C7272) *
                 C1030 +
             (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48385 * C7276) *
                 C48044) *
                C48286 * C48418) *
               C3628) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C3120 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C48184) *
              C48444 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C48184 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C3120) *
              C48440 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
                C10335 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
                C48418) *
               C3120 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48286 *
                C48418 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C48286 *
                C10335) *
               C48184) *
              C48430 +
          ((((C6421 + C6420) * C1030 + (C6419 + C6418) * C48044) * C48286 *
                C10335 +
            ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48385 * C5882) *
                 C1030 +
             (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48385 * C5886) *
                 C48044) *
                C48286 * C48418) *
               C48184 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48286 *
                C48418 +
            ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C48286 *
                C10335) *
               C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C959 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48434 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C960 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48421 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C961 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C48392) *
                C48286 * C10335 +
            ((C10678 + C10679) * C959 + (C10680 + C10681) * C48434 -
             (C10682 + C10683) * C960 - (C10684 + C10685) * C48421 +
             (C10686 + C10687) * C961 + (C10688 + C10689) * C48392) *
                C48286 * C48418) *
               C3120 +
           (((C10683 + C10682) * C960 -
             ((C10681 + C10680) * C48434 + (C10679 + C10678) * C959) +
             (C10685 + C10684) * C48421 - (C10687 + C10686) * C961 -
             (C10689 + C10688) * C48392) *
                C48286 * C10335 +
            ((C10690 + C10691) * C960 -
             ((C10692 + C10693) * C48434 + (C10694 + C10695) * C959) +
             (C10696 + C10697) * C48421 - (C10698 + C10699) * C961 -
             (C10700 + C10701) * C48392) *
                C48286 * C48418) *
               C48184) *
              C2353 +
          ((((C4807 + C4806) * C960 -
             ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
             (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
             (C4813 + C4812) * C48392) *
                C48286 * C10335 +
            ((C5462 + C5463) * C960 -
             ((C5464 + C5465) * C48434 + (C5466 + C5467) * C959) +
             (C5468 + C5469) * C48421 - (C5470 + C5471) * C961 -
             (C5472 + C5473) * C48392) *
                C48286 * C48418) *
               C3120 +
           (((C5467 + C5466) * C959 + (C5465 + C5464) * C48434 -
             (C5463 + C5462) * C960 - (C5469 + C5468) * C48421 +
             (C5471 + C5470) * C961 + (C5473 + C5472) * C48392) *
                C48286 * C10335 +
            ((C5912 + C5913) * C959 + (C5914 + C5915) * C48434 -
             (C7006 + C7007) * C960 - (C7008 + C7009) * C48421 +
             (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                 C961 +
             (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                 C48392) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C48445 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C48442 +
           (((C10695 + C10694) * C1030 + (C10693 + C10692) * C48044) * C48286 *
                C10335 +
            ((C12394 + C12395) * C1030 + (C12396 + C12397) * C48044) * C48286 *
                C48418) *
               C48433 -
           (((C12398 + C12399) * C48044 + (C12400 + C12401) * C1030) * C48286 *
                C48418 +
            ((C12397 + C12396) * C48044 + (C12395 + C12394) * C1030) * C48286 *
                C10335) *
               C48414) *
              C2353 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C48442 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C48445 -
           (((C7286 + C7287) * C48044 + (C7288 + C7289) * C1030) * C48286 *
                C48418 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C48286 *
                C10335) *
               C48433 +
           (((C7289 + C7288) * C1030 + (C7287 + C7286) * C48044) * C48286 *
                C10335 +
            ((C4605 * C6795 + C4601 * C6797 + C4606 * C6796 + C48385 * C6798) *
                 C1030 +
             (C4605 * C6799 + C4601 * C6801 + C4606 * C6800 + C48385 * C6802) *
                 C48044) *
                C48286 * C48418) *
               C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47151 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48352 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47132 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C48286 * C10335 +
            ((C10678 + C10679) * C47151 + (C10680 + C10681) * C48352 -
             (C10682 + C10683) * C47132 - (C10684 + C10685) * C48054) *
                C48286 * C48418) *
               C48180 +
           (((C10683 + C10682) * C47132 -
             ((C10681 + C10680) * C48352 + (C10679 + C10678) * C47151) +
             (C10685 + C10684) * C48054) *
                C48286 * C10335 +
            ((C10690 + C10691) * C47132 -
             ((C10692 + C10693) * C48352 + (C10694 + C10695) * C47151) +
             (C10696 + C10697) * C48054) *
                C48286 * C48418) *
               C48187 +
           (((C10695 + C10694) * C47151 + (C10693 + C10692) * C48352 -
             (C10691 + C10690) * C47132 - (C10697 + C10696) * C48054) *
                C48286 * C10335 +
            ((C12394 + C12395) * C47151 + (C12396 + C12397) * C48352 -
             (C12734 + C12735) * C47132 - (C12736 + C12737) * C48054) *
                C48286 * C48418) *
               C3628) *
              C2353 +
          ((((C4807 + C4806) * C47132 -
             ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
             (C4809 + C4808) * C48054) *
                C48286 * C10335 +
            ((C5462 + C5463) * C47132 -
             ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
             (C5468 + C5469) * C48054) *
                C48286 * C48418) *
               C48180 +
           (((C5467 + C5466) * C47151 + (C5465 + C5464) * C48352 -
             (C5463 + C5462) * C47132 - (C5469 + C5468) * C48054) *
                C48286 * C10335 +
            ((C5912 + C5913) * C47151 + (C5914 + C5915) * C48352 -
             (C7006 + C7007) * C47132 - (C7008 + C7009) * C48054) *
                C48286 * C48418) *
               C48187 +
           (((C7007 + C7006) * C47132 -
             ((C5915 + C5914) * C48352 + (C5913 + C5912) * C47151) +
             (C7009 + C7008) * C48054) *
                C48286 * C10335 +
            ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48385 * C2244) *
                 C47132 -
             ((C7286 + C7287) * C48352 + (C7288 + C7289) * C47151) +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48385 * C2250) *
                 C48054) *
                C48286 * C48418) *
               C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C959 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48434 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C960 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48421 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C961 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C48392) *
                C48286 * C10335 +
            ((C10678 + C10679) * C959 + (C10680 + C10681) * C48434 -
             (C10682 + C10683) * C960 - (C10684 + C10685) * C48421 +
             (C10686 + C10687) * C961 + (C10688 + C10689) * C48392) *
                C48286 * C48418) *
               C3120 +
           (((C10683 + C10682) * C960 -
             ((C10681 + C10680) * C48434 + (C10679 + C10678) * C959) +
             (C10685 + C10684) * C48421 - (C10687 + C10686) * C961 -
             (C10689 + C10688) * C48392) *
                C48286 * C10335 +
            ((C10690 + C10691) * C960 -
             ((C10692 + C10693) * C48434 + (C10694 + C10695) * C959) +
             (C10696 + C10697) * C48421 - (C10698 + C10699) * C961 -
             (C10700 + C10701) * C48392) *
                C48286 * C48418) *
               C48184) *
              C2353 +
          ((((C4807 + C4806) * C960 -
             ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
             (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
             (C4813 + C4812) * C48392) *
                C48286 * C10335 +
            ((C5462 + C5463) * C960 -
             ((C5464 + C5465) * C48434 + (C5466 + C5467) * C959) +
             (C5468 + C5469) * C48421 - (C5470 + C5471) * C961 -
             (C5472 + C5473) * C48392) *
                C48286 * C48418) *
               C3120 +
           (((C5467 + C5466) * C959 + (C5465 + C5464) * C48434 -
             (C5463 + C5462) * C960 - (C5469 + C5468) * C48421 +
             (C5471 + C5470) * C961 + (C5473 + C5472) * C48392) *
                C48286 * C10335 +
            ((C5912 + C5913) * C959 + (C5914 + C5915) * C48434 -
             (C7006 + C7007) * C960 - (C7008 + C7009) * C48421 +
             (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                 C961 +
             (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                 C48392) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C3120 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C48184) *
              C48444 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C48184 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C3120) *
              C48440 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
                C10335 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
                C48418) *
               C3120 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48286 *
                C48418 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C48286 *
                C10335) *
               C48184) *
              C48430 +
          ((((C6421 + C6420) * C1030 + (C6419 + C6418) * C48044) * C48286 *
                C10335 +
            ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48385 * C5882) *
                 C1030 +
             (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48385 * C5886) *
                 C48044) *
                C48286 * C48418) *
               C48184 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48286 *
                C48418 +
            ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C48286 *
                C10335) *
               C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C47151 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48352 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C47132 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C48286 * C10335 +
           ((C10678 + C10679) * C47151 + (C10680 + C10681) * C48352 -
            (C10682 + C10683) * C47132 - (C10684 + C10685) * C48054) *
               C48286 * C48418) *
              C48097 * C1301 +
          (((C4807 + C4806) * C47132 -
            ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
            (C4809 + C4808) * C48054) *
               C48286 * C10335 +
           ((C5462 + C5463) * C47132 -
            ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
            (C5468 + C5469) * C48054) *
               C48286 * C48418) *
              C48097 * C1302 +
          (((C4819 + C4818) * C47151 + (C4817 + C4816) * C48352 -
            (C4815 + C4814) * C47132 - (C4821 + C4820) * C48054) *
               C48286 * C10335 +
           ((C5916 + C5917) * C47151 + (C5918 + C5919) * C48352 -
            (C6268 + C6269) * C47132 - (C6270 + C6271) * C48054) *
               C48286 * C48418) *
              C48097 * C1303 +
          (((C6063 + C6062) * C47132 -
            ((C5729 + C5728) * C48352 + (C5727 + C5726) * C47151) +
            (C6065 + C6064) * C48054) *
               C48286 * C10335 +
           ((C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48385 * C1564) *
                C47132 -
            ((C6418 + C6419) * C48352 + (C6420 + C6421) * C47151) +
            (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48385 * C1570) *
                C48054) *
               C48286 * C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C565 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C559 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C566 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C560 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C567 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C561 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C568 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C48286 * C10335 +
           ((C10678 + C10679) * C565 + (C10680 + C10681) * C559 -
            (C10682 + C10683) * C566 - (C10684 + C10685) * C560 +
            (C10686 + C10687) * C567 + (C10688 + C10689) * C561 -
            (C4606 * C425 + C48385 * C439 + C4605 * C423 + C4601 * C433) *
                C568 -
            (C4606 * C440 + C48385 * C455 + C4605 * C438 + C4601 * C454) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48366 +
          (((C4807 + C4806) * C566 -
            ((C4805 + C4804) * C559 + (C4803 + C4802) * C565) +
            (C4809 + C4808) * C560 - (C4811 + C4810) * C567 -
            (C4813 + C4812) * C561 + (C5111 + C5110) * C568 +
            (C5113 + C5112) * C48402) *
               C48286 * C10335 +
           ((C5462 + C5463) * C566 -
            ((C5464 + C5465) * C559 + (C5466 + C5467) * C565) +
            (C5468 + C5469) * C560 - (C5470 + C5471) * C567 -
            (C5472 + C5473) * C561 +
            (C4605 * C826 + C4601 * C834 + C4606 * C827 + C48385 * C836) *
                C568 +
            (C4605 * C835 + C4601 * C841 + C4606 * C837 + C48385 * C842) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47151 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48352 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47132 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C48286 * C10335 +
            ((C10678 + C10679) * C47151 + (C10680 + C10681) * C48352 -
             (C10682 + C10683) * C47132 - (C10684 + C10685) * C48054) *
                C48286 * C48418) *
               C1681 +
           (((C10683 + C10682) * C47132 -
             ((C10681 + C10680) * C48352 + (C10679 + C10678) * C47151) +
             (C10685 + C10684) * C48054) *
                C48286 * C10335 +
            ((C10690 + C10691) * C47132 -
             ((C10692 + C10693) * C48352 + (C10694 + C10695) * C47151) +
             (C10696 + C10697) * C48054) *
                C48286 * C48418) *
               C1682 +
           (((C10695 + C10694) * C47151 + (C10693 + C10692) * C48352 -
             (C10691 + C10690) * C47132 - (C10697 + C10696) * C48054) *
                C48286 * C10335 +
            ((C12394 + C12395) * C47151 + (C12396 + C12397) * C48352 -
             (C4606 * C1861 + C48385 * C1870 + C4605 * C1862 + C4601 * C1871) *
                 C47132 -
             (C4606 * C1867 + C48385 * C1879 + C4605 * C1868 + C4601 * C1880) *
                 C48054) *
                C48286 * C48418) *
               C48401) *
              C48366 +
          ((((C4807 + C4806) * C47132 -
             ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
             (C4809 + C4808) * C48054) *
                C48286 * C10335 +
            ((C5462 + C5463) * C47132 -
             ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
             (C5468 + C5469) * C48054) *
                C48286 * C48418) *
               C1681 +
           (((C5467 + C5466) * C47151 + (C5465 + C5464) * C48352 -
             (C5463 + C5462) * C47132 - (C5469 + C5468) * C48054) *
                C48286 * C10335 +
            ((C5912 + C5913) * C47151 + (C5914 + C5915) * C48352 -
             (C7006 + C7007) * C47132 - (C7008 + C7009) * C48054) *
                C48286 * C48418) *
               C1682 +
           (((C7007 + C7006) * C47132 -
             ((C5915 + C5914) * C48352 + (C5913 + C5912) * C47151) +
             (C7009 + C7008) * C48054) *
                C48286 * C10335 +
            ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48385 * C2244) *
                 C47132 -
             ((C7286 + C7287) * C48352 + (C7288 + C7289) * C47151) +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48385 * C2250) *
                 C48054) *
                C48286 * C48418) *
               C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C48367 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C48184) *
              C1301 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C48184 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C48367) *
              C1302 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
                C10335 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
                C48418) *
               C48367 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48286 *
                C48418 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C48286 *
                C10335) *
               C48184) *
              C1303 +
          ((((C6421 + C6420) * C1030 + (C6419 + C6418) * C48044) * C48286 *
                C10335 +
            ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48385 * C5882) *
                 C1030 +
             (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48385 * C5886) *
                 C48044) *
                C48286 * C48418) *
               C48184 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48286 *
                C48418 +
            ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C48286 *
                C10335) *
               C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C265 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C259 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C266 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C260 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C267 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C48392) *
                C48286 * C10335 +
            ((C10678 + C10679) * C265 + (C10680 + C10681) * C259 -
             (C10682 + C10683) * C266 - (C10684 + C10685) * C260 +
             (C10686 + C10687) * C267 + (C10688 + C10689) * C48392) *
                C48286 * C48418) *
               C48367 +
           (((C10683 + C10682) * C266 -
             ((C10681 + C10680) * C259 + (C10679 + C10678) * C265) +
             (C10685 + C10684) * C260 - (C10687 + C10686) * C267 -
             (C10689 + C10688) * C48392) *
                C48286 * C10335 +
            ((C10690 + C10691) * C266 -
             ((C10692 + C10693) * C259 + (C10694 + C10695) * C265) +
             (C10696 + C10697) * C260 - (C10698 + C10699) * C267 -
             (C10700 + C10701) * C48392) *
                C48286 * C48418) *
               C48184) *
              C48366 +
          ((((C4807 + C4806) * C266 -
             ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
             (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
             (C4813 + C4812) * C48392) *
                C48286 * C10335 +
            ((C5462 + C5463) * C266 -
             ((C5464 + C5465) * C259 + (C5466 + C5467) * C265) +
             (C5468 + C5469) * C260 - (C5470 + C5471) * C267 -
             (C5472 + C5473) * C48392) *
                C48286 * C48418) *
               C48367 +
           (((C5467 + C5466) * C265 + (C5465 + C5464) * C259 -
             (C5463 + C5462) * C266 - (C5469 + C5468) * C260 +
             (C5471 + C5470) * C267 + (C5473 + C5472) * C48392) *
                C48286 * C10335 +
            ((C5912 + C5913) * C265 + (C5914 + C5915) * C259 -
             (C7006 + C7007) * C266 - (C7008 + C7009) * C260 +
             (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                 C267 +
             (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                 C48392) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C2133 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C2134 +
           (((C10695 + C10694) * C1030 + (C10693 + C10692) * C48044) * C48286 *
                C10335 +
            ((C12394 + C12395) * C1030 + (C12396 + C12397) * C48044) * C48286 *
                C48418) *
               C2135 -
           (((C12398 + C12399) * C48044 + (C12400 + C12401) * C1030) * C48286 *
                C48418 +
            ((C12397 + C12396) * C48044 + (C12395 + C12394) * C1030) * C48286 *
                C10335) *
               C48414) *
              C48366 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C2134 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C2133 -
           (((C7286 + C7287) * C48044 + (C7288 + C7289) * C1030) * C48286 *
                C48418 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C48286 *
                C10335) *
               C2135 +
           (((C7289 + C7288) * C1030 + (C7287 + C7286) * C48044) * C48286 *
                C10335 +
            ((C4605 * C6795 + C4601 * C6797 + C4606 * C6796 + C48385 * C6798) *
                 C1030 +
             (C4605 * C6799 + C4601 * C6801 + C4606 * C6800 + C48385 * C6802) *
                 C48044) *
                C48286 * C48418) *
               C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                   C116 +
               (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                   C104 -
               (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                   C117 -
               (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                   C105 +
               (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                   C118 +
               (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                   C106 -
               (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                   C119 -
               (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                   C107 +
               (C4605 * C125 + C4601 * C136 + C4606 * C126 + C48385 * C138) *
                   C120 +
               (C4605 * C137 + C4601 * C146 + C4606 * C139 + C48385 * C147) *
                   C108) *
                  C48286 * C10335 +
              ((C4605 * C424 + C4601 * C437 + C4606 * C421 + C48385 * C431) *
                   C116 +
               (C4605 * C436 + C4601 * C453 + C4606 * C435 + C48385 * C452) *
                   C104 -
               (C4606 * C422 + C48385 * C432 + C4605 * C421 + C4601 * C431) *
                   C117 -
               (C4606 * C434 + C48385 * C451 + C4605 * C435 + C4601 * C452) *
                   C105 +
               (C4605 * C422 + C4601 * C432 + C4606 * C423 + C48385 * C433) *
                   C118 +
               (C4605 * C434 + C4601 * C451 + C4606 * C438 + C48385 * C454) *
                   C106 -
               (C4606 * C425 + C48385 * C439 + C4605 * C423 + C4601 * C433) *
                   C119 -
               (C4606 * C440 + C48385 * C455 + C4605 * C438 + C4601 * C454) *
                   C107 +
               (C4605 * C425 + C4601 * C439 + C4606 * C673 + C48385 * C674) *
                   C120 +
               (C4605 * C440 + C4601 * C455 + C4606 * C675 + C48385 * C676) *
                   C108) *
                  C48286 * C48418) *
             C48097 * C48085 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                    C265 +
                (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                    C259 -
                (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                    C266 -
                (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                    C260 +
                (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                    C267 +
                (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                    C48392) *
                   C48286 * C10335 +
               ((C4605 * C424 + C4601 * C437 + C4606 * C421 + C48385 * C431) *
                    C265 +
                (C4605 * C436 + C4601 * C453 + C4606 * C435 + C48385 * C452) *
                    C259 -
                (C4606 * C422 + C48385 * C432 + C4605 * C421 + C4601 * C431) *
                    C266 -
                (C4606 * C434 + C48385 * C451 + C4605 * C435 + C4601 * C452) *
                    C260 +
                (C4605 * C422 + C4601 * C432 + C4606 * C423 + C48385 * C433) *
                    C267 +
                (C4605 * C434 + C4601 * C451 + C4606 * C438 + C48385 * C454) *
                    C48392) *
                   C48286 * C48418) *
                  C48097 * C48437 +
              (((C4807 + C4806) * C266 -
                ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
                (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
                (C4813 + C4812) * C48392) *
                   C48286 * C10335 +
               ((C5462 + C5463) * C266 -
                ((C5464 + C5465) * C259 + (C5466 + C5467) * C265) +
                (C5468 + C5469) * C260 - (C5470 + C5471) * C267 -
                (C5472 + C5473) * C48392) *
                   C48286 * C48418) *
                  C48097 * C48425 +
              (((C4819 + C4818) * C265 + (C4817 + C4816) * C259 -
                (C4815 + C4814) * C266 - (C4821 + C4820) * C260 +
                (C4823 + C4822) * C267 + (C4825 + C4824) * C48392) *
                   C48286 * C10335 +
               ((C5916 + C5917) * C265 + (C5918 + C5919) * C259 -
                (C6268 + C6269) * C266 - (C6270 + C6271) * C260 +
                (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 +
                 C48385 * C1458) *
                    C267 +
                (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 +
                 C48385 * C1460) *
                    C48392) *
                   C48286 * C48418) *
                  C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C265 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C259 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C266 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C260 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C267 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C10678 + C10679) * C265 + (C10680 + C10681) * C259 -
            (C10682 + C10683) * C266 - (C10684 + C10685) * C260 +
            (C10686 + C10687) * C267 + (C10688 + C10689) * C48392) *
               C48286 * C48418) *
              C48438 +
          (((C10683 + C10682) * C266 -
            ((C10681 + C10680) * C259 + (C10679 + C10678) * C265) +
            (C10685 + C10684) * C260 - (C10687 + C10686) * C267 -
            (C10689 + C10688) * C48392) *
               C48286 * C10335 +
           ((C10690 + C10691) * C266 -
            ((C10692 + C10693) * C259 + (C10694 + C10695) * C265) +
            (C10696 + C10697) * C260 - (C10698 + C10699) * C267 -
            (C10700 + C10701) * C48392) *
               C48286 * C48418) *
              C48427 +
          (((C10695 + C10694) * C265 + (C10693 + C10692) * C259 -
            (C10691 + C10690) * C266 - (C10697 + C10696) * C260 +
            (C10699 + C10698) * C267 + (C10701 + C10700) * C48392) *
               C48286 * C10335 +
           ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48385 * C1871) *
                C265 +
            (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48385 * C1880) *
                C259 -
            (C4606 * C1861 + C48385 * C1870 + C4605 * C1862 + C4601 * C1871) *
                C266 -
            (C4606 * C1867 + C48385 * C1879 + C4605 * C1868 + C4601 * C1880) *
                C260 +
            (C4605 * C1861 + C4601 * C1870 + C4606 * C2137 + C48385 * C2138) *
                C267 +
            (C4605 * C1867 + C4601 * C1879 + C4606 * C2139 + C48385 * C2140) *
                C48392) *
               C48286 * C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C10678 + C10679) * C959 + (C10680 + C10681) * C48434 -
            (C10682 + C10683) * C960 - (C10684 + C10685) * C48421 +
            (C10686 + C10687) * C961 + (C10688 + C10689) * C48392) *
               C48286 * C48418) *
              C48097 * C956 +
          (((C4807 + C4806) * C960 -
            ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
            (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
            (C4813 + C4812) * C48392) *
               C48286 * C10335 +
           ((C5462 + C5463) * C960 -
            ((C5464 + C5465) * C48434 + (C5466 + C5467) * C959) +
            (C5468 + C5469) * C48421 - (C5470 + C5471) * C961 -
            (C5472 + C5473) * C48392) *
               C48286 * C48418) *
              C48097 * C957 +
          (((C4819 + C4818) * C959 + (C4817 + C4816) * C48434 -
            (C4815 + C4814) * C960 - (C4821 + C4820) * C48421 +
            (C4823 + C4822) * C961 + (C4825 + C4824) * C48392) *
               C48286 * C10335 +
           ((C5916 + C5917) * C959 + (C5918 + C5919) * C48434 -
            (C6268 + C6269) * C960 - (C6270 + C6271) * C48421 +
            (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                C961 +
            (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C1030 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48044) *
               C48286 * C10335 +
           ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
               C48418) *
              C48097 * C1025 -
          (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
               C48418 +
           ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
               C10335) *
              C48097 * C1026 +
          (((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
               C10335 +
           ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
               C48418) *
              C48097 * C1027 -
          (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48286 *
               C48418 +
           ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C48286 *
               C10335) *
              C48097 * C1028 +
          (((C5733 + C5732) * C1030 + (C5731 + C5730) * C48044) * C48286 *
               C10335 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48385 * C6404) *
                C1030 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48385 * C6408) *
                C48044) *
               C48286 * C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C48438 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C48427 +
           (((C10695 + C10694) * C1030 + (C10693 + C10692) * C48044) * C48286 *
                C10335 +
            ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48385 * C1871) *
                 C1030 +
             (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48385 * C1880) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C956 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C48427 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C48438 -
           (((C7286 + C7287) * C48044 + (C7288 + C7289) * C1030) * C48286 *
                C48418 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C48286 *
                C10335) *
               C48401) *
              C957 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
                C10335 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
                C48418) *
               C48438 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48286 *
                C48418 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C48286 *
                C10335) *
               C48427 +
           (((C5923 + C5922) * C1030 + (C5921 + C5920) * C48044) * C48286 *
                C10335 +
            ((C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48385 * C7272) *
                 C1030 +
             (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48385 * C7276) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C10678 + C10679) * C959 + (C10680 + C10681) * C48434 -
            (C10682 + C10683) * C960 - (C10684 + C10685) * C48421 +
            (C10686 + C10687) * C961 + (C10688 + C10689) * C48392) *
               C48286 * C48418) *
              C1681 +
          (((C10683 + C10682) * C960 -
            ((C10681 + C10680) * C48434 + (C10679 + C10678) * C959) +
            (C10685 + C10684) * C48421 - (C10687 + C10686) * C961 -
            (C10689 + C10688) * C48392) *
               C48286 * C10335 +
           ((C10690 + C10691) * C960 -
            ((C10692 + C10693) * C48434 + (C10694 + C10695) * C959) +
            (C10696 + C10697) * C48421 - (C10698 + C10699) * C961 -
            (C10700 + C10701) * C48392) *
               C48286 * C48418) *
              C1682 +
          (((C10695 + C10694) * C959 + (C10693 + C10692) * C48434 -
            (C10691 + C10690) * C960 - (C10697 + C10696) * C48421 +
            (C10699 + C10698) * C961 + (C10701 + C10700) * C48392) *
               C48286 * C10335 +
           ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48385 * C1871) *
                C959 +
            (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48385 * C1880) *
                C48434 -
            (C4606 * C1861 + C48385 * C1870 + C4605 * C1862 + C4601 * C1871) *
                C960 -
            (C4606 * C1867 + C48385 * C1879 + C4605 * C1868 + C4601 * C1880) *
                C48421 +
            (C4605 * C1861 + C4601 * C1870 + C4606 * C2137 + C48385 * C2138) *
                C961 +
            (C4605 * C1867 + C4601 * C1879 + C4606 * C2139 + C48385 * C2140) *
                C48392) *
               C48286 * C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C1681 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C1682 +
           (((C10695 + C10694) * C1030 + (C10693 + C10692) * C48044) * C48286 *
                C10335 +
            ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48385 * C1871) *
                 C1030 +
             (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48385 * C1880) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48437 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C1682 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C1681 -
           (((C7286 + C7287) * C48044 + (C7288 + C7289) * C1030) * C48286 *
                C48418 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C48286 *
                C10335) *
               C48401) *
              C48425 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
                C10335 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
                C48418) *
               C1681 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48286 *
                C48418 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C48286 *
                C10335) *
               C1682 +
           (((C5923 + C5922) * C1030 + (C5921 + C5920) * C48044) * C48286 *
                C10335 +
            ((C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48385 * C7272) *
                 C1030 +
             (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48385 * C7276) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C1030 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48044) *
               C48286 * C10335 +
           ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
               C48418) *
              C1856 -
          (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
               C48418 +
           ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
               C10335) *
              C1857 +
          (((C10695 + C10694) * C1030 + (C10693 + C10692) * C48044) * C48286 *
               C10335 +
           ((C12394 + C12395) * C1030 + (C12396 + C12397) * C48044) * C48286 *
               C48418) *
              C1858 -
          (((C12398 + C12399) * C48044 + (C12400 + C12401) * C1030) * C48286 *
               C48418 +
           ((C12397 + C12396) * C48044 + (C12395 + C12394) * C1030) * C48286 *
               C10335) *
              C1859 +
          (((C12401 + C12400) * C1030 + (C12399 + C12398) * C48044) * C48286 *
               C10335 +
           ((C4605 * C12369 + C4601 * C12371 + C4606 * C12370 +
             C48385 * C12372) *
                C1030 +
            (C4605 * C12373 + C4601 * C12375 + C4606 * C12374 +
             C48385 * C12376) *
                C48044) *
               C48286 * C48418) *
              C1860) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47151 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48352 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47132 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C48286 * C10335 +
            ((C10678 + C10679) * C47151 + (C10680 + C10681) * C48352 -
             (C10682 + C10683) * C47132 - (C10684 + C10685) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C10683 + C10682) * C47132 -
             ((C10681 + C10680) * C48352 + (C10679 + C10678) * C47151) +
             (C10685 + C10684) * C48054) *
                C48286 * C10335 +
            ((C10690 + C10691) * C47132 -
             ((C10692 + C10693) * C48352 + (C10694 + C10695) * C47151) +
             (C10696 + C10697) * C48054) *
                C48286 * C48418) *
               C48184) *
              C956 +
          ((((C4807 + C4806) * C47132 -
             ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
             (C4809 + C4808) * C48054) *
                C48286 * C10335 +
            ((C5462 + C5463) * C47132 -
             ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
             (C5468 + C5469) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C5467 + C5466) * C47151 + (C5465 + C5464) * C48352 -
             (C5463 + C5462) * C47132 - (C5469 + C5468) * C48054) *
                C48286 * C10335 +
            ((C5912 + C5913) * C47151 + (C5914 + C5915) * C48352 -
             (C7006 + C7007) * C47132 - (C7008 + C7009) * C48054) *
                C48286 * C48418) *
               C48184) *
              C957 +
          ((((C4819 + C4818) * C47151 + (C4817 + C4816) * C48352 -
             (C4815 + C4814) * C47132 - (C4821 + C4820) * C48054) *
                C48286 * C10335 +
            ((C5916 + C5917) * C47151 + (C5918 + C5919) * C48352 -
             (C6268 + C6269) * C47132 - (C6270 + C6271) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C6269 + C6268) * C47132 -
             ((C5919 + C5918) * C48352 + (C5917 + C5916) * C47151) +
             (C6271 + C6270) * C48054) *
                C48286 * C10335 +
            ((C4605 * C1172 + C4601 * C1187 + C4606 * C1173 + C48385 * C1188) *
                 C47132 -
             ((C5920 + C5921) * C48352 + (C5922 + C5923) * C47151) +
             (C4605 * C1190 + C4601 * C1199 + C4606 * C1191 + C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C565 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C559 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C566 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C560 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C567 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C561 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C568 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C48286 * C10335 +
           ((C10678 + C10679) * C565 + (C10680 + C10681) * C559 -
            (C10682 + C10683) * C566 - (C10684 + C10685) * C560 +
            (C10686 + C10687) * C567 + (C10688 + C10689) * C561 -
            (C10970 + C10971) * C568 - (C10972 + C10973) * C48402) *
               C48286 * C48418) *
              C48367 +
          (((C10683 + C10682) * C566 -
            ((C10681 + C10680) * C559 + (C10679 + C10678) * C565) +
            (C10685 + C10684) * C560 - (C10687 + C10686) * C567 -
            (C10689 + C10688) * C561 + (C10971 + C10970) * C568 +
            (C10973 + C10972) * C48402) *
               C48286 * C10335 +
           ((C10690 + C10691) * C566 -
            ((C10692 + C10693) * C559 + (C10694 + C10695) * C565) +
            (C10696 + C10697) * C560 - (C10698 + C10699) * C567 -
            (C10700 + C10701) * C561 +
            (C4605 * C429 + C4601 * C447 + C4606 * C430 + C48385 * C449) *
                C568 +
            (C4605 * C448 + C4601 * C459 + C4606 * C450 + C48385 * C460) *
                C48402) *
               C48286 * C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C47151 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48352 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C47132 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C48286 * C10335 +
           ((C10678 + C10679) * C47151 + (C10680 + C10681) * C48352 -
            (C10682 + C10683) * C47132 - (C10684 + C10685) * C48054) *
               C48286 * C48418) *
              C2133 +
          (((C10683 + C10682) * C47132 -
            ((C10681 + C10680) * C48352 + (C10679 + C10678) * C47151) +
            (C10685 + C10684) * C48054) *
               C48286 * C10335 +
           ((C10690 + C10691) * C47132 -
            ((C10692 + C10693) * C48352 + (C10694 + C10695) * C47151) +
            (C10696 + C10697) * C48054) *
               C48286 * C48418) *
              C2134 +
          (((C10695 + C10694) * C47151 + (C10693 + C10692) * C48352 -
            (C10691 + C10690) * C47132 - (C10697 + C10696) * C48054) *
               C48286 * C10335 +
           ((C12394 + C12395) * C47151 + (C12396 + C12397) * C48352 -
            (C12734 + C12735) * C47132 - (C12736 + C12737) * C48054) *
               C48286 * C48418) *
              C2135 +
          (((C12735 + C12734) * C47132 -
            ((C12397 + C12396) * C48352 + (C12395 + C12394) * C47151) +
            (C12737 + C12736) * C48054) *
               C48286 * C10335 +
           ((C4605 * C1865 + C4601 * C1874 + C4606 * C1866 + C48385 * C1875) *
                C47132 -
            ((C12398 + C12399) * C48352 + (C12400 + C12401) * C47151) +
            (C4605 * C1877 + C4601 * C1883 + C4606 * C1878 + C48385 * C1884) *
                C48054) *
               C48286 * C48418) *
              C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C265 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C259 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C266 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C260 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C267 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C4605 * C424 + C4601 * C437 + C4606 * C421 + C48385 * C431) *
                C265 +
            (C4605 * C436 + C4601 * C453 + C4606 * C435 + C48385 * C452) *
                C259 -
            (C4606 * C422 + C48385 * C432 + C4605 * C421 + C4601 * C431) *
                C266 -
            (C4606 * C434 + C48385 * C451 + C4605 * C435 + C4601 * C452) *
                C260 +
            (C4605 * C422 + C4601 * C432 + C4606 * C423 + C48385 * C433) *
                C267 +
            (C4605 * C434 + C4601 * C451 + C4606 * C438 + C48385 * C454) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48437 +
          (((C4807 + C4806) * C266 -
            ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
            (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
            (C4813 + C4812) * C48392) *
               C48286 * C10335 +
           ((C5462 + C5463) * C266 -
            ((C5464 + C5465) * C259 + (C5466 + C5467) * C265) +
            (C5468 + C5469) * C260 - (C5470 + C5471) * C267 -
            (C5472 + C5473) * C48392) *
               C48286 * C48418) *
              C48097 * C48425 +
          (((C4819 + C4818) * C265 + (C4817 + C4816) * C259 -
            (C4815 + C4814) * C266 - (C4821 + C4820) * C260 +
            (C4823 + C4822) * C267 + (C4825 + C4824) * C48392) *
               C48286 * C10335 +
           ((C5916 + C5917) * C265 + (C5918 + C5919) * C259 -
            (C6268 + C6269) * C266 - (C6270 + C6271) * C260 +
            (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                C267 +
            (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) * C116 +
           (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) * C104 -
           (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) * C117 -
           (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) * C105 +
           (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) * C118 +
           (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) * C106 -
           (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) * C119 -
           (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) * C107 +
           (C4605 * C125 + C4601 * C136 + C4606 * C126 + C48385 * C138) * C120 +
           (C4605 * C137 + C4601 * C146 + C4606 * C139 + C48385 * C147) *
               C108) *
              C48286 * C10335 +
          ((C4605 * C424 + C4601 * C437 + C4606 * C421 + C48385 * C431) * C116 +
           (C4605 * C436 + C4601 * C453 + C4606 * C435 + C48385 * C452) * C104 -
           (C4606 * C422 + C48385 * C432 + C4605 * C421 + C4601 * C431) * C117 -
           (C4606 * C434 + C48385 * C451 + C4605 * C435 + C4601 * C452) * C105 +
           (C4605 * C422 + C4601 * C432 + C4606 * C423 + C48385 * C433) * C118 +
           (C4605 * C434 + C4601 * C451 + C4606 * C438 + C48385 * C454) * C106 -
           (C4606 * C425 + C48385 * C439 + C4605 * C423 + C4601 * C433) * C119 -
           (C4606 * C440 + C48385 * C455 + C4605 * C438 + C4601 * C454) * C107 +
           (C4605 * C425 + C4601 * C439 + C4606 * C673 + C48385 * C674) * C120 +
           (C4605 * C440 + C4601 * C455 + C4606 * C675 + C48385 * C676) *
               C108) *
              C48286 * C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C10678 + C10679) * C959 + (C10680 + C10681) * C48434 -
            (C10682 + C10683) * C960 - (C10684 + C10685) * C48421 +
            (C10686 + C10687) * C961 + (C10688 + C10689) * C48392) *
               C48286 * C48418) *
              C48097 * C956 +
          (((C4807 + C4806) * C960 -
            ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
            (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
            (C4813 + C4812) * C48392) *
               C48286 * C10335 +
           ((C5462 + C5463) * C960 -
            ((C5464 + C5465) * C48434 + (C5466 + C5467) * C959) +
            (C5468 + C5469) * C48421 - (C5470 + C5471) * C961 -
            (C5472 + C5473) * C48392) *
               C48286 * C48418) *
              C48097 * C957 +
          (((C4819 + C4818) * C959 + (C4817 + C4816) * C48434 -
            (C4815 + C4814) * C960 - (C4821 + C4820) * C48421 +
            (C4823 + C4822) * C961 + (C4825 + C4824) * C48392) *
               C48286 * C10335 +
           ((C5916 + C5917) * C959 + (C5918 + C5919) * C48434 -
            (C6268 + C6269) * C960 - (C6270 + C6271) * C48421 +
            (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                C961 +
            (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C1030 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48044) *
               C48286 * C10335 +
           ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
               C48418) *
              C48097 * C1025 -
          (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
               C48418 +
           ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
               C10335) *
              C48097 * C1026 +
          (((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
               C10335 +
           ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
               C48418) *
              C48097 * C1027 -
          (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48286 *
               C48418 +
           ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C48286 *
               C10335) *
              C48097 * C1028 +
          (((C5733 + C5732) * C1030 + (C5731 + C5730) * C48044) * C48286 *
               C10335 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48385 * C6404) *
                C1030 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48385 * C6408) *
                C48044) *
               C48286 * C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C10678 + C10679) * C959 + (C10680 + C10681) * C48434 -
            (C10682 + C10683) * C960 - (C10684 + C10685) * C48421 +
            (C10686 + C10687) * C961 + (C10688 + C10689) * C48392) *
               C48286 * C48418) *
              C1681 +
          (((C10683 + C10682) * C960 -
            ((C10681 + C10680) * C48434 + (C10679 + C10678) * C959) +
            (C10685 + C10684) * C48421 - (C10687 + C10686) * C961 -
            (C10689 + C10688) * C48392) *
               C48286 * C10335 +
           ((C10690 + C10691) * C960 -
            ((C10692 + C10693) * C48434 + (C10694 + C10695) * C959) +
            (C10696 + C10697) * C48421 - (C10698 + C10699) * C961 -
            (C10700 + C10701) * C48392) *
               C48286 * C48418) *
              C1682 +
          (((C10695 + C10694) * C959 + (C10693 + C10692) * C48434 -
            (C10691 + C10690) * C960 - (C10697 + C10696) * C48421 +
            (C10699 + C10698) * C961 + (C10701 + C10700) * C48392) *
               C48286 * C10335 +
           ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48385 * C1871) *
                C959 +
            (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48385 * C1880) *
                C48434 -
            (C4606 * C1861 + C48385 * C1870 + C4605 * C1862 + C4601 * C1871) *
                C960 -
            (C4606 * C1867 + C48385 * C1879 + C4605 * C1868 + C4601 * C1880) *
                C48421 +
            (C4605 * C1861 + C4601 * C1870 + C4606 * C2137 + C48385 * C2138) *
                C961 +
            (C4605 * C1867 + C4601 * C1879 + C4606 * C2139 + C48385 * C2140) *
                C48392) *
               C48286 * C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C1681 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C1682 +
           (((C10695 + C10694) * C1030 + (C10693 + C10692) * C48044) * C48286 *
                C10335 +
            ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48385 * C1871) *
                 C1030 +
             (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48385 * C1880) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48437 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C1682 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C1681 -
           (((C7286 + C7287) * C48044 + (C7288 + C7289) * C1030) * C48286 *
                C48418 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C48286 *
                C10335) *
               C48401) *
              C48425 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
                C10335 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
                C48418) *
               C1681 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48286 *
                C48418 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C48286 *
                C10335) *
               C1682 +
           (((C5923 + C5922) * C1030 + (C5921 + C5920) * C48044) * C48286 *
                C10335 +
            ((C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48385 * C7272) *
                 C1030 +
             (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48385 * C7276) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47161 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48049 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47157 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48057 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C47167 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C2723) *
                C48286 * C10335 +
            ((C10678 + C10679) * C47161 + (C10680 + C10681) * C48049 -
             (C10682 + C10683) * C47157 - (C10684 + C10685) * C48057 +
             (C10686 + C10687) * C47167 + (C10688 + C10689) * C2723) *
                C48286 * C48418) *
               C3120 +
           (((C10683 + C10682) * C47157 -
             ((C10681 + C10680) * C48049 + (C10679 + C10678) * C47161) +
             (C10685 + C10684) * C48057 - (C10687 + C10686) * C47167 -
             (C10689 + C10688) * C2723) *
                C48286 * C10335 +
            ((C10690 + C10691) * C47157 -
             ((C10692 + C10693) * C48049 + (C10694 + C10695) * C47161) +
             (C10696 + C10697) * C48057 - (C10698 + C10699) * C47167 -
             (C10700 + C10701) * C2723) *
                C48286 * C48418) *
               C48184) *
              C48366 +
          ((((C4807 + C4806) * C47157 -
             ((C4805 + C4804) * C48049 + (C4803 + C4802) * C47161) +
             (C4809 + C4808) * C48057 - (C4811 + C4810) * C47167 -
             (C4813 + C4812) * C2723) *
                C48286 * C10335 +
            ((C5462 + C5463) * C47157 -
             ((C5464 + C5465) * C48049 + (C5466 + C5467) * C47161) +
             (C5468 + C5469) * C48057 - (C5470 + C5471) * C47167 -
             (C5472 + C5473) * C2723) *
                C48286 * C48418) *
               C3120 +
           (((C5467 + C5466) * C47161 + (C5465 + C5464) * C48049 -
             (C5463 + C5462) * C47157 - (C5469 + C5468) * C48057 +
             (C5471 + C5470) * C47167 + (C5473 + C5472) * C2723) *
                C48286 * C10335 +
            ((C5912 + C5913) * C47161 + (C5914 + C5915) * C48049 -
             (C7006 + C7007) * C47157 - (C7008 + C7009) * C48057 +
             (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                 C47167 +
             (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                 C2723) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C2463 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C2457 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C2464 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C48286 * C10335 +
            ((C10678 + C10679) * C2463 + (C10680 + C10681) * C2457 -
             (C10682 + C10683) * C2464 - (C10684 + C10685) * C48054) *
                C48286 * C48418) *
               C48180 +
           (((C10683 + C10682) * C2464 -
             ((C10681 + C10680) * C2457 + (C10679 + C10678) * C2463) +
             (C10685 + C10684) * C48054) *
                C48286 * C10335 +
            ((C10690 + C10691) * C2464 -
             ((C10692 + C10693) * C2457 + (C10694 + C10695) * C2463) +
             (C10696 + C10697) * C48054) *
                C48286 * C48418) *
               C48187 +
           (((C10695 + C10694) * C2463 + (C10693 + C10692) * C2457 -
             (C10691 + C10690) * C2464 - (C10697 + C10696) * C48054) *
                C48286 * C10335 +
            ((C12394 + C12395) * C2463 + (C12396 + C12397) * C2457 -
             (C12734 + C12735) * C2464 - (C12736 + C12737) * C48054) *
                C48286 * C48418) *
               C3628) *
              C48366 +
          ((((C4807 + C4806) * C2464 -
             ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
             (C4809 + C4808) * C48054) *
                C48286 * C10335 +
            ((C5462 + C5463) * C2464 -
             ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
             (C5468 + C5469) * C48054) *
                C48286 * C48418) *
               C48180 +
           (((C5467 + C5466) * C2463 + (C5465 + C5464) * C2457 -
             (C5463 + C5462) * C2464 - (C5469 + C5468) * C48054) *
                C48286 * C10335 +
            ((C5912 + C5913) * C2463 + (C5914 + C5915) * C2457 -
             (C7006 + C7007) * C2464 - (C7008 + C7009) * C48054) *
                C48286 * C48418) *
               C48187 +
           (((C7007 + C7006) * C2464 -
             ((C5915 + C5914) * C2457 + (C5913 + C5912) * C2463) +
             (C7009 + C7008) * C48054) *
                C48286 * C10335 +
            ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48385 * C2244) *
                 C2464 -
             ((C7286 + C7287) * C2457 + (C7288 + C7289) * C2463) +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48385 * C2250) *
                 C48054) *
                C48286 * C48418) *
               C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C2463 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C2457 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C2464 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C48286 * C10335 +
            ((C10678 + C10679) * C2463 + (C10680 + C10681) * C2457 -
             (C10682 + C10683) * C2464 - (C10684 + C10685) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C10683 + C10682) * C2464 -
             ((C10681 + C10680) * C2457 + (C10679 + C10678) * C2463) +
             (C10685 + C10684) * C48054) *
                C48286 * C10335 +
            ((C10690 + C10691) * C2464 -
             ((C10692 + C10693) * C2457 + (C10694 + C10695) * C2463) +
             (C10696 + C10697) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48437 +
          ((((C4807 + C4806) * C2464 -
             ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
             (C4809 + C4808) * C48054) *
                C48286 * C10335 +
            ((C5462 + C5463) * C2464 -
             ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
             (C5468 + C5469) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C5467 + C5466) * C2463 + (C5465 + C5464) * C2457 -
             (C5463 + C5462) * C2464 - (C5469 + C5468) * C48054) *
                C48286 * C10335 +
            ((C5912 + C5913) * C2463 + (C5914 + C5915) * C2457 -
             (C7006 + C7007) * C2464 - (C7008 + C7009) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48425 +
          ((((C4819 + C4818) * C2463 + (C4817 + C4816) * C2457 -
             (C4815 + C4814) * C2464 - (C4821 + C4820) * C48054) *
                C48286 * C10335 +
            ((C5916 + C5917) * C2463 + (C5918 + C5919) * C2457 -
             (C6268 + C6269) * C2464 - (C6270 + C6271) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C6269 + C6268) * C2464 -
             ((C5919 + C5918) * C2457 + (C5917 + C5916) * C2463) +
             (C6271 + C6270) * C48054) *
                C48286 * C10335 +
            ((C4605 * C1172 + C4601 * C1187 + C4606 * C1173 + C48385 * C1188) *
                 C2464 -
             ((C5920 + C5921) * C2457 + (C5922 + C5923) * C2463) +
             (C4605 * C1190 + C4601 * C1199 + C4606 * C1191 + C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2355 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48443 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2356 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48436 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C2357 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48423 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C2358 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C48286 * C10335 +
           ((C10678 + C10679) * C2355 + (C10680 + C10681) * C48443 -
            (C10682 + C10683) * C2356 - (C10684 + C10685) * C48436 +
            (C10686 + C10687) * C2357 + (C10688 + C10689) * C48423 -
            (C10970 + C10971) * C2358 - (C10972 + C10973) * C48402) *
               C48286 * C48418) *
              C3120 +
          (((C10683 + C10682) * C2356 -
            ((C10681 + C10680) * C48443 + (C10679 + C10678) * C2355) +
            (C10685 + C10684) * C48436 - (C10687 + C10686) * C2357 -
            (C10689 + C10688) * C48423 + (C10971 + C10970) * C2358 +
            (C10973 + C10972) * C48402) *
               C48286 * C10335 +
           ((C10690 + C10691) * C2356 -
            ((C10692 + C10693) * C48443 + (C10694 + C10695) * C2355) +
            (C10696 + C10697) * C48436 - (C10698 + C10699) * C2357 -
            (C10700 + C10701) * C48423 +
            (C4605 * C429 + C4601 * C447 + C4606 * C430 + C48385 * C449) *
                C2358 +
            (C4605 * C448 + C4601 * C459 + C4606 * C450 + C48385 * C460) *
                C48402) *
               C48286 * C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2463 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C2457 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2464 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C48286 * C10335 +
           ((C10678 + C10679) * C2463 + (C10680 + C10681) * C2457 -
            (C10682 + C10683) * C2464 - (C10684 + C10685) * C48054) *
               C48286 * C48418) *
              C48445 +
          (((C10683 + C10682) * C2464 -
            ((C10681 + C10680) * C2457 + (C10679 + C10678) * C2463) +
            (C10685 + C10684) * C48054) *
               C48286 * C10335 +
           ((C10690 + C10691) * C2464 -
            ((C10692 + C10693) * C2457 + (C10694 + C10695) * C2463) +
            (C10696 + C10697) * C48054) *
               C48286 * C48418) *
              C48442 +
          (((C10695 + C10694) * C2463 + (C10693 + C10692) * C2457 -
            (C10691 + C10690) * C2464 - (C10697 + C10696) * C48054) *
               C48286 * C10335 +
           ((C12394 + C12395) * C2463 + (C12396 + C12397) * C2457 -
            (C12734 + C12735) * C2464 - (C12736 + C12737) * C48054) *
               C48286 * C48418) *
              C48433 +
          (((C12735 + C12734) * C2464 -
            ((C12397 + C12396) * C2457 + (C12395 + C12394) * C2463) +
            (C12737 + C12736) * C48054) *
               C48286 * C10335 +
           ((C4605 * C1865 + C4601 * C1874 + C4606 * C1866 + C48385 * C1875) *
                C2464 -
            ((C12398 + C12399) * C2457 + (C12400 + C12401) * C2463) +
            (C4605 * C1877 + C4601 * C1883 + C4606 * C1878 + C48385 * C1884) *
                C48054) *
               C48286 * C48418) *
              C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C47161 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48049 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C47157 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48057 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C47167 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C2723) *
               C48286 * C10335 +
           ((C10678 + C10679) * C47161 + (C10680 + C10681) * C48049 -
            (C10682 + C10683) * C47157 - (C10684 + C10685) * C48057 +
            (C10686 + C10687) * C47167 + (C10688 + C10689) * C2723) *
               C48286 * C48418) *
              C48180 +
          (((C10683 + C10682) * C47157 -
            ((C10681 + C10680) * C48049 + (C10679 + C10678) * C47161) +
            (C10685 + C10684) * C48057 - (C10687 + C10686) * C47167 -
            (C10689 + C10688) * C2723) *
               C48286 * C10335 +
           ((C10690 + C10691) * C47157 -
            ((C10692 + C10693) * C48049 + (C10694 + C10695) * C47161) +
            (C10696 + C10697) * C48057 - (C10698 + C10699) * C47167 -
            (C10700 + C10701) * C2723) *
               C48286 * C48418) *
              C48187 +
          (((C10695 + C10694) * C47161 + (C10693 + C10692) * C48049 -
            (C10691 + C10690) * C47157 - (C10697 + C10696) * C48057 +
            (C10699 + C10698) * C47167 + (C10701 + C10700) * C2723) *
               C48286 * C10335 +
           ((C12394 + C12395) * C47161 + (C12396 + C12397) * C48049 -
            (C12734 + C12735) * C47157 - (C12736 + C12737) * C48057 +
            (C4605 * C1861 + C4601 * C1870 + C4606 * C2137 + C48385 * C2138) *
                C47167 +
            (C4605 * C1867 + C4601 * C1879 + C4606 * C2139 + C48385 * C2140) *
                C2723) *
               C48286 * C48418) *
              C3628) *
         C48085) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C2355 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48443 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C2356 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48436 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C2357 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48423 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C2358 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C48286 * C10335 +
           ((C10678 + C10679) * C2355 + (C10680 + C10681) * C48443 -
            (C10682 + C10683) * C2356 - (C10684 + C10685) * C48436 +
            (C10686 + C10687) * C2357 + (C10688 + C10689) * C48423 -
            (C10970 + C10971) * C2358 - (C10972 + C10973) * C48402) *
               C48286 * C48418) *
              C3120 +
          (((C10683 + C10682) * C2356 -
            ((C10681 + C10680) * C48443 + (C10679 + C10678) * C2355) +
            (C10685 + C10684) * C48436 - (C10687 + C10686) * C2357 -
            (C10689 + C10688) * C48423 + (C10971 + C10970) * C2358 +
            (C10973 + C10972) * C48402) *
               C48286 * C10335 +
           ((C10690 + C10691) * C2356 -
            ((C10692 + C10693) * C48443 + (C10694 + C10695) * C2355) +
            (C10696 + C10697) * C48436 - (C10698 + C10699) * C2357 -
            (C10700 + C10701) * C48423 +
            (C4605 * C429 + C4601 * C447 + C4606 * C430 + C48385 * C449) *
                C2358 +
            (C4605 * C448 + C4601 * C459 + C4606 * C450 + C48385 * C460) *
                C48402) *
               C48286 * C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C2463 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C2457 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C2464 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C48286 * C10335 +
            ((C10678 + C10679) * C2463 + (C10680 + C10681) * C2457 -
             (C10682 + C10683) * C2464 - (C10684 + C10685) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C10683 + C10682) * C2464 -
             ((C10681 + C10680) * C2457 + (C10679 + C10678) * C2463) +
             (C10685 + C10684) * C48054) *
                C48286 * C10335 +
            ((C10690 + C10691) * C2464 -
             ((C10692 + C10693) * C2457 + (C10694 + C10695) * C2463) +
             (C10696 + C10697) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48437 +
          ((((C4807 + C4806) * C2464 -
             ((C4805 + C4804) * C2457 + (C4803 + C4802) * C2463) +
             (C4809 + C4808) * C48054) *
                C48286 * C10335 +
            ((C5462 + C5463) * C2464 -
             ((C5464 + C5465) * C2457 + (C5466 + C5467) * C2463) +
             (C5468 + C5469) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C5467 + C5466) * C2463 + (C5465 + C5464) * C2457 -
             (C5463 + C5462) * C2464 - (C5469 + C5468) * C48054) *
                C48286 * C10335 +
            ((C5912 + C5913) * C2463 + (C5914 + C5915) * C2457 -
             (C7006 + C7007) * C2464 - (C7008 + C7009) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48425 +
          ((((C4819 + C4818) * C2463 + (C4817 + C4816) * C2457 -
             (C4815 + C4814) * C2464 - (C4821 + C4820) * C48054) *
                C48286 * C10335 +
            ((C5916 + C5917) * C2463 + (C5918 + C5919) * C2457 -
             (C6268 + C6269) * C2464 - (C6270 + C6271) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C6269 + C6268) * C2464 -
             ((C5919 + C5918) * C2457 + (C5917 + C5916) * C2463) +
             (C6271 + C6270) * C48054) *
                C48286 * C10335 +
            ((C4605 * C1172 + C4601 * C1187 + C4606 * C1173 + C48385 * C1188) *
                 C2464 -
             ((C5920 + C5921) * C2457 + (C5922 + C5923) * C2463) +
             (C4605 * C1190 + C4601 * C1199 + C4606 * C1191 + C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C565 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C559 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C566 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C560 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C567 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C561 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C568 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C48286 * C10335 +
           ((C10678 + C10679) * C565 + (C10680 + C10681) * C559 -
            (C10682 + C10683) * C566 - (C10684 + C10685) * C560 +
            (C10686 + C10687) * C567 + (C10688 + C10689) * C561 -
            (C4606 * C425 + C48385 * C439 + C4605 * C423 + C4601 * C433) *
                C568 -
            (C4606 * C440 + C48385 * C455 + C4605 * C438 + C4601 * C454) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48366 +
          (((C4807 + C4806) * C566 -
            ((C4805 + C4804) * C559 + (C4803 + C4802) * C565) +
            (C4809 + C4808) * C560 - (C4811 + C4810) * C567 -
            (C4813 + C4812) * C561 + (C5111 + C5110) * C568 +
            (C5113 + C5112) * C48402) *
               C48286 * C10335 +
           ((C5462 + C5463) * C566 -
            ((C5464 + C5465) * C559 + (C5466 + C5467) * C565) +
            (C5468 + C5469) * C560 - (C5470 + C5471) * C567 -
            (C5472 + C5473) * C561 +
            (C4605 * C826 + C4601 * C834 + C4606 * C827 + C48385 * C836) *
                C568 +
            (C4605 * C835 + C4601 * C841 + C4606 * C837 + C48385 * C842) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C47151 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48352 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C47132 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48054) *
               C48286 * C10335 +
           ((C10678 + C10679) * C47151 + (C10680 + C10681) * C48352 -
            (C10682 + C10683) * C47132 - (C10684 + C10685) * C48054) *
               C48286 * C48418) *
              C48097 * C1301 +
          (((C4807 + C4806) * C47132 -
            ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
            (C4809 + C4808) * C48054) *
               C48286 * C10335 +
           ((C5462 + C5463) * C47132 -
            ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
            (C5468 + C5469) * C48054) *
               C48286 * C48418) *
              C48097 * C1302 +
          (((C4819 + C4818) * C47151 + (C4817 + C4816) * C48352 -
            (C4815 + C4814) * C47132 - (C4821 + C4820) * C48054) *
               C48286 * C10335 +
           ((C5916 + C5917) * C47151 + (C5918 + C5919) * C48352 -
            (C6268 + C6269) * C47132 - (C6270 + C6271) * C48054) *
               C48286 * C48418) *
              C48097 * C1303 +
          (((C6063 + C6062) * C47132 -
            ((C5729 + C5728) * C48352 + (C5727 + C5726) * C47151) +
            (C6065 + C6064) * C48054) *
               C48286 * C10335 +
           ((C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48385 * C1564) *
                C47132 -
            ((C6418 + C6419) * C48352 + (C6420 + C6421) * C47151) +
            (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48385 * C1570) *
                C48054) *
               C48286 * C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C265 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C259 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C266 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C260 +
             (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                 C267 +
             (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                 C48392) *
                C48286 * C10335 +
            ((C10678 + C10679) * C265 + (C10680 + C10681) * C259 -
             (C10682 + C10683) * C266 - (C10684 + C10685) * C260 +
             (C10686 + C10687) * C267 + (C10688 + C10689) * C48392) *
                C48286 * C48418) *
               C48367 +
           (((C10683 + C10682) * C266 -
             ((C10681 + C10680) * C259 + (C10679 + C10678) * C265) +
             (C10685 + C10684) * C260 - (C10687 + C10686) * C267 -
             (C10689 + C10688) * C48392) *
                C48286 * C10335 +
            ((C10690 + C10691) * C266 -
             ((C10692 + C10693) * C259 + (C10694 + C10695) * C265) +
             (C10696 + C10697) * C260 - (C10698 + C10699) * C267 -
             (C10700 + C10701) * C48392) *
                C48286 * C48418) *
               C48184) *
              C48366 +
          ((((C4807 + C4806) * C266 -
             ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
             (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
             (C4813 + C4812) * C48392) *
                C48286 * C10335 +
            ((C5462 + C5463) * C266 -
             ((C5464 + C5465) * C259 + (C5466 + C5467) * C265) +
             (C5468 + C5469) * C260 - (C5470 + C5471) * C267 -
             (C5472 + C5473) * C48392) *
                C48286 * C48418) *
               C48367 +
           (((C5467 + C5466) * C265 + (C5465 + C5464) * C259 -
             (C5463 + C5462) * C266 - (C5469 + C5468) * C260 +
             (C5471 + C5470) * C267 + (C5473 + C5472) * C48392) *
                C48286 * C10335 +
            ((C5912 + C5913) * C265 + (C5914 + C5915) * C259 -
             (C7006 + C7007) * C266 - (C7008 + C7009) * C260 +
             (C4605 * C1165 + C4601 * C1177 + C4606 * C2031 + C48385 * C2032) *
                 C267 +
             (C4605 * C1174 + C4601 * C1192 + C4606 * C2033 + C48385 * C2034) *
                 C48392) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C48367 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C48184) *
              C1301 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C48184 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C48367) *
              C1302 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
                C10335 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
                C48418) *
               C48367 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48286 *
                C48418 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C48286 *
                C10335) *
               C48184) *
              C1303 +
          ((((C6421 + C6420) * C1030 + (C6419 + C6418) * C48044) * C48286 *
                C10335 +
            ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48385 * C5882) *
                 C1030 +
             (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48385 * C5886) *
                 C48044) *
                C48286 * C48418) *
               C48184 -
           (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48286 *
                C48418 +
            ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C48286 *
                C10335) *
               C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C265 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C259 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C266 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C260 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C267 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C4605 * C424 + C4601 * C437 + C4606 * C421 + C48385 * C431) *
                C265 +
            (C4605 * C436 + C4601 * C453 + C4606 * C435 + C48385 * C452) *
                C259 -
            (C4606 * C422 + C48385 * C432 + C4605 * C421 + C4601 * C431) *
                C266 -
            (C4606 * C434 + C48385 * C451 + C4605 * C435 + C4601 * C452) *
                C260 +
            (C4605 * C422 + C4601 * C432 + C4606 * C423 + C48385 * C433) *
                C267 +
            (C4605 * C434 + C4601 * C451 + C4606 * C438 + C48385 * C454) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48437 +
          (((C4807 + C4806) * C266 -
            ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
            (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
            (C4813 + C4812) * C48392) *
               C48286 * C10335 +
           ((C5462 + C5463) * C266 -
            ((C5464 + C5465) * C259 + (C5466 + C5467) * C265) +
            (C5468 + C5469) * C260 - (C5470 + C5471) * C267 -
            (C5472 + C5473) * C48392) *
               C48286 * C48418) *
              C48097 * C48425 +
          (((C4819 + C4818) * C265 + (C4817 + C4816) * C259 -
            (C4815 + C4814) * C266 - (C4821 + C4820) * C260 +
            (C4823 + C4822) * C267 + (C4825 + C4824) * C48392) *
               C48286 * C10335 +
           ((C5916 + C5917) * C265 + (C5918 + C5919) * C259 -
            (C6268 + C6269) * C266 - (C6270 + C6271) * C260 +
            (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                C267 +
            (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) * C116 +
           (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) * C104 -
           (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) * C117 -
           (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) * C105 +
           (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) * C118 +
           (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) * C106 -
           (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) * C119 -
           (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) * C107 +
           (C4605 * C125 + C4601 * C136 + C4606 * C126 + C48385 * C138) * C120 +
           (C4605 * C137 + C4601 * C146 + C4606 * C139 + C48385 * C147) *
               C108) *
              C48286 * C10335 +
          ((C4605 * C424 + C4601 * C437 + C4606 * C421 + C48385 * C431) * C116 +
           (C4605 * C436 + C4601 * C453 + C4606 * C435 + C48385 * C452) * C104 -
           (C4606 * C422 + C48385 * C432 + C4605 * C421 + C4601 * C431) * C117 -
           (C4606 * C434 + C48385 * C451 + C4605 * C435 + C4601 * C452) * C105 +
           (C4605 * C422 + C4601 * C432 + C4606 * C423 + C48385 * C433) * C118 +
           (C4605 * C434 + C4601 * C451 + C4606 * C438 + C48385 * C454) * C106 -
           (C4606 * C425 + C48385 * C439 + C4605 * C423 + C4601 * C433) * C119 -
           (C4606 * C440 + C48385 * C455 + C4605 * C438 + C4601 * C454) * C107 +
           (C4605 * C425 + C4601 * C439 + C4606 * C673 + C48385 * C674) * C120 +
           (C4605 * C440 + C4601 * C455 + C4606 * C675 + C48385 * C676) *
               C108) *
              C48286 * C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C265 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C259 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C266 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C260 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C267 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C10678 + C10679) * C265 + (C10680 + C10681) * C259 -
            (C10682 + C10683) * C266 - (C10684 + C10685) * C260 +
            (C10686 + C10687) * C267 + (C10688 + C10689) * C48392) *
               C48286 * C48418) *
              C48438 +
          (((C10683 + C10682) * C266 -
            ((C10681 + C10680) * C259 + (C10679 + C10678) * C265) +
            (C10685 + C10684) * C260 - (C10687 + C10686) * C267 -
            (C10689 + C10688) * C48392) *
               C48286 * C10335 +
           ((C10690 + C10691) * C266 -
            ((C10692 + C10693) * C259 + (C10694 + C10695) * C265) +
            (C10696 + C10697) * C260 - (C10698 + C10699) * C267 -
            (C10700 + C10701) * C48392) *
               C48286 * C48418) *
              C48427 +
          (((C10695 + C10694) * C265 + (C10693 + C10692) * C259 -
            (C10691 + C10690) * C266 - (C10697 + C10696) * C260 +
            (C10699 + C10698) * C267 + (C10701 + C10700) * C48392) *
               C48286 * C10335 +
           ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48385 * C1871) *
                C265 +
            (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48385 * C1880) *
                C259 -
            (C4606 * C1861 + C48385 * C1870 + C4605 * C1862 + C4601 * C1871) *
                C266 -
            (C4606 * C1867 + C48385 * C1879 + C4605 * C1868 + C4601 * C1880) *
                C260 +
            (C4605 * C1861 + C4601 * C1870 + C4606 * C2137 + C48385 * C2138) *
                C267 +
            (C4605 * C1867 + C4601 * C1879 + C4606 * C2139 + C48385 * C2140) *
                C48392) *
               C48286 * C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C10678 + C10679) * C959 + (C10680 + C10681) * C48434 -
            (C10682 + C10683) * C960 - (C10684 + C10685) * C48421 +
            (C10686 + C10687) * C961 + (C10688 + C10689) * C48392) *
               C48286 * C48418) *
              C48097 * C956 +
          (((C4807 + C4806) * C960 -
            ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
            (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
            (C4813 + C4812) * C48392) *
               C48286 * C10335 +
           ((C5462 + C5463) * C960 -
            ((C5464 + C5465) * C48434 + (C5466 + C5467) * C959) +
            (C5468 + C5469) * C48421 - (C5470 + C5471) * C961 -
            (C5472 + C5473) * C48392) *
               C48286 * C48418) *
              C48097 * C957 +
          (((C4819 + C4818) * C959 + (C4817 + C4816) * C48434 -
            (C4815 + C4814) * C960 - (C4821 + C4820) * C48421 +
            (C4823 + C4822) * C961 + (C4825 + C4824) * C48392) *
               C48286 * C10335 +
           ((C5916 + C5917) * C959 + (C5918 + C5919) * C48434 -
            (C6268 + C6269) * C960 - (C6270 + C6271) * C48421 +
            (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                C961 +
            (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C1030 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48044) *
               C48286 * C10335 +
           ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
               C48418) *
              C48097 * C1025 -
          (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
               C48418 +
           ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
               C10335) *
              C48097 * C1026 +
          (((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
               C10335 +
           ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
               C48418) *
              C48097 * C1027 -
          (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48286 *
               C48418 +
           ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C48286 *
               C10335) *
              C48097 * C1028 +
          (((C5733 + C5732) * C1030 + (C5731 + C5730) * C48044) * C48286 *
               C10335 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48385 * C6404) *
                C1030 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48385 * C6408) *
                C48044) *
               C48286 * C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C1030 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C10335 +
            ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
                C48418) *
               C48438 -
           (((C10692 + C10693) * C48044 + (C10694 + C10695) * C1030) * C48286 *
                C48418 +
            ((C10681 + C10680) * C48044 + (C10679 + C10678) * C1030) * C48286 *
                C10335) *
               C48427 +
           (((C10695 + C10694) * C1030 + (C10693 + C10692) * C48044) * C48286 *
                C10335 +
            ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48385 * C1871) *
                 C1030 +
             (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48385 * C1880) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C956 +
          ((((C5467 + C5466) * C1030 + (C5465 + C5464) * C48044) * C48286 *
                C10335 +
            ((C5912 + C5913) * C1030 + (C5914 + C5915) * C48044) * C48286 *
                C48418) *
               C48427 -
           (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
                C48418 +
            ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
                C10335) *
               C48438 -
           (((C7286 + C7287) * C48044 + (C7288 + C7289) * C1030) * C48286 *
                C48418 +
            ((C5915 + C5914) * C48044 + (C5913 + C5912) * C1030) * C48286 *
                C10335) *
               C48401) *
              C957 +
          ((((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
                C10335 +
            ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
                C48418) *
               C48438 -
           (((C5920 + C5921) * C48044 + (C5922 + C5923) * C1030) * C48286 *
                C48418 +
            ((C5919 + C5918) * C48044 + (C5917 + C5916) * C1030) * C48286 *
                C10335) *
               C48427 +
           (((C5923 + C5922) * C1030 + (C5921 + C5920) * C48044) * C48286 *
                C10335 +
            ((C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48385 * C7272) *
                 C1030 +
             (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48385 * C7276) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C565 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C559 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C566 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C560 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C567 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C561 -
            (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) *
                C568 -
            (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) *
                C48402) *
               C48286 * C10335 +
           ((C10678 + C10679) * C565 + (C10680 + C10681) * C559 -
            (C10682 + C10683) * C566 - (C10684 + C10685) * C560 +
            (C10686 + C10687) * C567 + (C10688 + C10689) * C561 -
            (C10970 + C10971) * C568 - (C10972 + C10973) * C48402) *
               C48286 * C48418) *
              C48367 +
          (((C10683 + C10682) * C566 -
            ((C10681 + C10680) * C559 + (C10679 + C10678) * C565) +
            (C10685 + C10684) * C560 - (C10687 + C10686) * C567 -
            (C10689 + C10688) * C561 + (C10971 + C10970) * C568 +
            (C10973 + C10972) * C48402) *
               C48286 * C10335 +
           ((C10690 + C10691) * C566 -
            ((C10692 + C10693) * C559 + (C10694 + C10695) * C565) +
            (C10696 + C10697) * C560 - (C10698 + C10699) * C567 -
            (C10700 + C10701) * C561 +
            (C4605 * C429 + C4601 * C447 + C4606 * C430 + C48385 * C449) *
                C568 +
            (C4605 * C448 + C4601 * C459 + C4606 * C450 + C48385 * C460) *
                C48402) *
               C48286 * C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                 C47151 +
             (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                 C48352 -
             (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                 C47132 -
             (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                 C48054) *
                C48286 * C10335 +
            ((C10678 + C10679) * C47151 + (C10680 + C10681) * C48352 -
             (C10682 + C10683) * C47132 - (C10684 + C10685) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C10683 + C10682) * C47132 -
             ((C10681 + C10680) * C48352 + (C10679 + C10678) * C47151) +
             (C10685 + C10684) * C48054) *
                C48286 * C10335 +
            ((C10690 + C10691) * C47132 -
             ((C10692 + C10693) * C48352 + (C10694 + C10695) * C47151) +
             (C10696 + C10697) * C48054) *
                C48286 * C48418) *
               C48184) *
              C956 +
          ((((C4807 + C4806) * C47132 -
             ((C4805 + C4804) * C48352 + (C4803 + C4802) * C47151) +
             (C4809 + C4808) * C48054) *
                C48286 * C10335 +
            ((C5462 + C5463) * C47132 -
             ((C5464 + C5465) * C48352 + (C5466 + C5467) * C47151) +
             (C5468 + C5469) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C5467 + C5466) * C47151 + (C5465 + C5464) * C48352 -
             (C5463 + C5462) * C47132 - (C5469 + C5468) * C48054) *
                C48286 * C10335 +
            ((C5912 + C5913) * C47151 + (C5914 + C5915) * C48352 -
             (C7006 + C7007) * C47132 - (C7008 + C7009) * C48054) *
                C48286 * C48418) *
               C48184) *
              C957 +
          ((((C4819 + C4818) * C47151 + (C4817 + C4816) * C48352 -
             (C4815 + C4814) * C47132 - (C4821 + C4820) * C48054) *
                C48286 * C10335 +
            ((C5916 + C5917) * C47151 + (C5918 + C5919) * C48352 -
             (C6268 + C6269) * C47132 - (C6270 + C6271) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C6269 + C6268) * C47132 -
             ((C5919 + C5918) * C48352 + (C5917 + C5916) * C47151) +
             (C6271 + C6270) * C48054) *
                C48286 * C10335 +
            ((C4605 * C1172 + C4601 * C1187 + C4606 * C1173 + C48385 * C1188) *
                 C47132 -
             ((C5920 + C5921) * C48352 + (C5922 + C5923) * C47151) +
             (C4605 * C1190 + C4601 * C1199 + C4606 * C1191 + C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) * C116 +
           (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) * C104 -
           (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) * C117 -
           (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) * C105 +
           (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) * C118 +
           (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) * C106 -
           (C4606 * C125 + C48385 * C136 + C4605 * C124 + C4601 * C134) * C119 -
           (C4606 * C137 + C48385 * C146 + C4605 * C135 + C4601 * C145) * C107 +
           (C4605 * C125 + C4601 * C136 + C4606 * C126 + C48385 * C138) * C120 +
           (C4605 * C137 + C4601 * C146 + C4606 * C139 + C48385 * C147) *
               C108) *
              C48286 * C10335 +
          ((C4605 * C424 + C4601 * C437 + C4606 * C421 + C48385 * C431) * C116 +
           (C4605 * C436 + C4601 * C453 + C4606 * C435 + C48385 * C452) * C104 -
           (C4606 * C422 + C48385 * C432 + C4605 * C421 + C4601 * C431) * C117 -
           (C4606 * C434 + C48385 * C451 + C4605 * C435 + C4601 * C452) * C105 +
           (C4605 * C422 + C4601 * C432 + C4606 * C423 + C48385 * C433) * C118 +
           (C4605 * C434 + C4601 * C451 + C4606 * C438 + C48385 * C454) * C106 -
           (C4606 * C425 + C48385 * C439 + C4605 * C423 + C4601 * C433) * C119 -
           (C4606 * C440 + C48385 * C455 + C4605 * C438 + C4601 * C454) * C107 +
           (C4605 * C425 + C4601 * C439 + C4606 * C673 + C48385 * C674) * C120 +
           (C4605 * C440 + C4601 * C455 + C4606 * C675 + C48385 * C676) *
               C108) *
              C48286 * C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C265 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C259 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C266 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C260 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C267 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C4605 * C424 + C4601 * C437 + C4606 * C421 + C48385 * C431) *
                C265 +
            (C4605 * C436 + C4601 * C453 + C4606 * C435 + C48385 * C452) *
                C259 -
            (C4606 * C422 + C48385 * C432 + C4605 * C421 + C4601 * C431) *
                C266 -
            (C4606 * C434 + C48385 * C451 + C4605 * C435 + C4601 * C452) *
                C260 +
            (C4605 * C422 + C4601 * C432 + C4606 * C423 + C48385 * C433) *
                C267 +
            (C4605 * C434 + C4601 * C451 + C4606 * C438 + C48385 * C454) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48437 +
          (((C4807 + C4806) * C266 -
            ((C4805 + C4804) * C259 + (C4803 + C4802) * C265) +
            (C4809 + C4808) * C260 - (C4811 + C4810) * C267 -
            (C4813 + C4812) * C48392) *
               C48286 * C10335 +
           ((C5462 + C5463) * C266 -
            ((C5464 + C5465) * C259 + (C5466 + C5467) * C265) +
            (C5468 + C5469) * C260 - (C5470 + C5471) * C267 -
            (C5472 + C5473) * C48392) *
               C48286 * C48418) *
              C48097 * C48425 +
          (((C4819 + C4818) * C265 + (C4817 + C4816) * C259 -
            (C4815 + C4814) * C266 - (C4821 + C4820) * C260 +
            (C4823 + C4822) * C267 + (C4825 + C4824) * C48392) *
               C48286 * C10335 +
           ((C5916 + C5917) * C265 + (C5918 + C5919) * C259 -
            (C6268 + C6269) * C266 - (C6270 + C6271) * C260 +
            (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                C267 +
            (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C959 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48434 -
            (C4606 * C123 + C48385 * C130 + C4605 * C122 + C4601 * C129) *
                C960 -
            (C4606 * C133 + C48385 * C144 + C4605 * C132 + C4601 * C143) *
                C48421 +
            (C4605 * C123 + C4601 * C130 + C4606 * C124 + C48385 * C134) *
                C961 +
            (C4605 * C133 + C4601 * C144 + C4606 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C10335 +
           ((C10678 + C10679) * C959 + (C10680 + C10681) * C48434 -
            (C10682 + C10683) * C960 - (C10684 + C10685) * C48421 +
            (C10686 + C10687) * C961 + (C10688 + C10689) * C48392) *
               C48286 * C48418) *
              C48097 * C956 +
          (((C4807 + C4806) * C960 -
            ((C4805 + C4804) * C48434 + (C4803 + C4802) * C959) +
            (C4809 + C4808) * C48421 - (C4811 + C4810) * C961 -
            (C4813 + C4812) * C48392) *
               C48286 * C10335 +
           ((C5462 + C5463) * C960 -
            ((C5464 + C5465) * C48434 + (C5466 + C5467) * C959) +
            (C5468 + C5469) * C48421 - (C5470 + C5471) * C961 -
            (C5472 + C5473) * C48392) *
               C48286 * C48418) *
              C48097 * C957 +
          (((C4819 + C4818) * C959 + (C4817 + C4816) * C48434 -
            (C4815 + C4814) * C960 - (C4821 + C4820) * C48421 +
            (C4823 + C4822) * C961 + (C4825 + C4824) * C48392) *
               C48286 * C10335 +
           ((C5916 + C5917) * C959 + (C5918 + C5919) * C48434 -
            (C6268 + C6269) * C960 - (C6270 + C6271) * C48421 +
            (C4605 * C1168 + C4601 * C1183 + C4606 * C1457 + C48385 * C1458) *
                C961 +
            (C4605 * C1180 + C4601 * C1195 + C4606 * C1459 + C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C121 + C4601 * C128 + C4606 * C122 + C48385 * C129) *
                C1030 +
            (C4605 * C131 + C4601 * C142 + C4606 * C132 + C48385 * C143) *
                C48044) *
               C48286 * C10335 +
           ((C10678 + C10679) * C1030 + (C10680 + C10681) * C48044) * C48286 *
               C48418) *
              C48097 * C1025 -
          (((C5464 + C5465) * C48044 + (C5466 + C5467) * C1030) * C48286 *
               C48418 +
           ((C4805 + C4804) * C48044 + (C4803 + C4802) * C1030) * C48286 *
               C10335) *
              C48097 * C1026 +
          (((C4819 + C4818) * C1030 + (C4817 + C4816) * C48044) * C48286 *
               C10335 +
           ((C5916 + C5917) * C1030 + (C5918 + C5919) * C48044) * C48286 *
               C48418) *
              C48097 * C1027 -
          (((C6418 + C6419) * C48044 + (C6420 + C6421) * C1030) * C48286 *
               C48418 +
           ((C5729 + C5728) * C48044 + (C5727 + C5726) * C1030) * C48286 *
               C10335) *
              C48097 * C1028 +
          (((C5733 + C5732) * C1030 + (C5731 + C5730) * C48044) * C48286 *
               C10335 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48385 * C6404) *
                C1030 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48385 * C6408) *
                C48044) *
               C48286 * C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C47161 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48049 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C47157 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48057 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C47167 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C2723) *
               C15915 +
           ((C16114 + C16115) * C47161 + (C16116 + C16117) * C48049 -
            (C16118 + C16119) * C47157 - (C16120 + C16121) * C48057 +
            (C16122 + C16123) * C47167 + (C16124 + C16125) * C2723) *
               C48416) *
              C48301 * C48097 * C48140 +
          (((C16119 + C16118) * C47157 -
            ((C16117 + C16116) * C48049 + (C16115 + C16114) * C47161) +
            (C16121 + C16120) * C48057 - (C16123 + C16122) * C47167 -
            (C16125 + C16124) * C2723) *
               C15915 +
           ((C16126 + C16127) * C47157 -
            ((C16128 + C16129) * C48049 + (C16130 + C16131) * C47161) +
            (C16132 + C16133) * C48057 - (C16134 + C16135) * C47167 -
            (C16136 + C16137) * C2723) *
               C48416) *
              C48301 * C48097 * C48147 +
          (((C16131 + C16130) * C47161 + (C16129 + C16128) * C48049 -
            (C16127 + C16126) * C47157 - (C16133 + C16132) * C48057 +
            (C16135 + C16134) * C47167 + (C16137 + C16136) * C2723) *
               C15915 +
           ((C17030 + C17031) * C47161 + (C17032 + C17033) * C48049 -
            (C17358 + C17359) * C47157 - (C17360 + C17361) * C48057 +
            (C15917 * C1031 + C15913 * C1040 + C15918 * C1307 +
             C48385 * C1308) *
                C47167 +
            (C15917 * C1037 + C15913 * C1049 + C15918 * C1309 +
             C48385 * C1310) *
                C2723) *
               C48416) *
              C48301 * C48097 * C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C2463 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C2457 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C2464 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C15915 +
            ((C16114 + C16115) * C2463 + (C16116 + C16117) * C2457 -
             (C16118 + C16119) * C2464 - (C16120 + C16121) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C2464 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C2457 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C2463) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48054) *
                C15915 +
            ((C16774 + C16775) * C2464 -
             ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
             (C16780 + C16781) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48140 +
          ((((C16119 + C16118) * C2464 -
             ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
             (C16121 + C16120) * C48054) *
                C15915 +
            ((C16126 + C16127) * C2464 -
             ((C16128 + C16129) * C2457 + (C16130 + C16131) * C2463) +
             (C16132 + C16133) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C16779 + C16778) * C2463 + (C16777 + C16776) * C2457 -
             (C16775 + C16774) * C2464 - (C16781 + C16780) * C48054) *
                C15915 +
            ((C17212 + C17213) * C2463 + (C17214 + C17215) * C2457 -
             (C17564 + C17565) * C2464 - (C17566 + C17567) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48147 +
          ((((C16131 + C16130) * C2463 + (C16129 + C16128) * C2457 -
             (C16127 + C16126) * C2464 - (C16133 + C16132) * C48054) *
                C15915 +
            ((C17030 + C17031) * C2463 + (C17032 + C17033) * C2457 -
             (C17358 + C17359) * C2464 - (C17360 + C17361) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C17565 + C17564) * C2464 -
             ((C17215 + C17214) * C2457 + (C17213 + C17212) * C2463) +
             (C17567 + C17566) * C48054) *
                C15915 +
            ((C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48385 * C1564) *
                 C2464 -
             ((C17706 + C17707) * C2457 + (C17708 + C17709) * C2463) +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2463 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C2457 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2464 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C15915 +
           ((C16114 + C16115) * C2463 + (C16116 + C16117) * C2457 -
            (C16118 + C16119) * C2464 - (C16120 + C16121) * C48054) *
               C48416) *
              C48301 * C48097 * C48444 +
          (((C16119 + C16118) * C2464 -
            ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
            (C16121 + C16120) * C48054) *
               C15915 +
           ((C16126 + C16127) * C2464 -
            ((C16128 + C16129) * C2457 + (C16130 + C16131) * C2463) +
            (C16132 + C16133) * C48054) *
               C48416) *
              C48301 * C48097 * C48440 +
          (((C16131 + C16130) * C2463 + (C16129 + C16128) * C2457 -
            (C16127 + C16126) * C2464 - (C16133 + C16132) * C48054) *
               C15915 +
           ((C17030 + C17031) * C2463 + (C17032 + C17033) * C2457 -
            (C17358 + C17359) * C2464 - (C17360 + C17361) * C48054) *
               C48416) *
              C48301 * C48097 * C48430 +
          (((C17359 + C17358) * C2464 -
            ((C17033 + C17032) * C2457 + (C17031 + C17030) * C2463) +
            (C17361 + C17360) * C48054) *
               C15915 +
           ((C15917 * C1035 + C15913 * C1044 + C15918 * C1036 +
             C48385 * C1045) *
                C2464 -
            ((C17034 + C17035) * C2457 + (C17036 + C17037) * C2463) +
            (C15917 * C1047 + C15913 * C1053 + C15918 * C1048 +
             C48385 * C1054) *
                C48054) *
               C48416) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2355 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48443 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2356 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48436 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C2357 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48423 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C2358 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C15915 +
           ((C16114 + C16115) * C2355 + (C16116 + C16117) * C48443 -
            (C16118 + C16119) * C2356 - (C16120 + C16121) * C48436 +
            (C16122 + C16123) * C2357 + (C16124 + C16125) * C48423 -
            (C16422 + C16423) * C2358 - (C16424 + C16425) * C48402) *
               C48416) *
              C48301 * C48097 * C2353 +
          (((C16119 + C16118) * C2356 -
            ((C16117 + C16116) * C48443 + (C16115 + C16114) * C2355) +
            (C16121 + C16120) * C48436 - (C16123 + C16122) * C2357 -
            (C16125 + C16124) * C48423 + (C16423 + C16422) * C2358 +
            (C16425 + C16424) * C48402) *
               C15915 +
           ((C16126 + C16127) * C2356 -
            ((C16128 + C16129) * C48443 + (C16130 + C16131) * C2355) +
            (C16132 + C16133) * C48436 - (C16134 + C16135) * C2357 -
            (C16136 + C16137) * C48423 +
            (C15917 * C276 + C15913 * C294 + C15918 * C277 + C48385 * C296) *
                C2358 +
            (C15917 * C295 + C15913 * C306 + C15918 * C297 + C48385 * C307) *
                C48402) *
               C48416) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C2463 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C2457 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C2464 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C15915 +
            ((C16114 + C16115) * C2463 + (C16116 + C16117) * C2457 -
             (C16118 + C16119) * C2464 - (C16120 + C16121) * C48054) *
                C48416) *
               C48301 * C48438 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C2464 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C2457 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C2463) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48054) *
                C15915 +
            ((C16774 + C16775) * C2464 -
             ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
             (C16780 + C16781) * C48054) *
                C48416) *
               C48301 * C48427 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C2463 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C2457 -
             (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                 C2464 -
             (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                 C48054) *
                C15915 +
            ((C17208 + C17209) * C2463 + (C17210 + C17211) * C2457 -
             (C18286 + C18287) * C2464 - (C18288 + C18289) * C48054) *
                C48416) *
               C48301 * C48401) *
              C2353 +
          ((((C16119 + C16118) * C2464 -
             ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
             (C16121 + C16120) * C48054) *
                C15915 +
            ((C16126 + C16127) * C2464 -
             ((C16128 + C16129) * C2457 + (C16130 + C16131) * C2463) +
             (C16132 + C16133) * C48054) *
                C48416) *
               C48301 * C48438 +
           (((C16779 + C16778) * C2463 + (C16777 + C16776) * C2457 -
             (C16775 + C16774) * C2464 - (C16781 + C16780) * C48054) *
                C15915 +
            ((C17212 + C17213) * C2463 + (C17214 + C17215) * C2457 -
             (C17564 + C17565) * C2464 - (C17566 + C17567) * C48054) *
                C48416) *
               C48301 * C48427 +
           (((C18287 + C18286) * C2464 -
             ((C17211 + C17210) * C2457 + (C17209 + C17208) * C2463) +
             (C18289 + C18288) * C48054) *
                C15915 +
            ((C15917 * C1172 + C15913 * C1187 + C15918 * C1173 +
              C48385 * C1188) *
                 C2464 -
             ((C17216 + C17217) * C2457 + (C17218 + C17219) * C2463) +
             (C15917 * C1190 + C15913 * C1199 + C15918 * C1191 +
              C48385 * C1200) *
                 C48054) *
                C48416) *
               C48301 * C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47161 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48049 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47157 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48057 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C47167 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C2723) *
                C15915 +
            ((C16114 + C16115) * C47161 + (C16116 + C16117) * C48049 -
             (C16118 + C16119) * C47157 - (C16120 + C16121) * C48057 +
             (C16122 + C16123) * C47167 + (C16124 + C16125) * C2723) *
                C48416) *
               C48301 * C48367 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C47157 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C48049 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C47161) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48057 -
             (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                 C47167 -
             (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                 C2723) *
                C15915 +
            ((C16774 + C16775) * C47157 -
             ((C16776 + C16777) * C48049 + (C16778 + C16779) * C47161) +
             (C16780 + C16781) * C48057 - (C16782 + C16783) * C47167 -
             (C16784 + C16785) * C2723) *
                C48416) *
               C48301 * C48184) *
              C2353 +
          ((((C16119 + C16118) * C47157 -
             ((C16117 + C16116) * C48049 + (C16115 + C16114) * C47161) +
             (C16121 + C16120) * C48057 - (C16123 + C16122) * C47167 -
             (C16125 + C16124) * C2723) *
                C15915 +
            ((C16126 + C16127) * C47157 -
             ((C16128 + C16129) * C48049 + (C16130 + C16131) * C47161) +
             (C16132 + C16133) * C48057 - (C16134 + C16135) * C47167 -
             (C16136 + C16137) * C2723) *
                C48416) *
               C48301 * C48367 +
           (((C16779 + C16778) * C47161 + (C16777 + C16776) * C48049 -
             (C16775 + C16774) * C47157 - (C16781 + C16780) * C48057 +
             (C16783 + C16782) * C47167 + (C16785 + C16784) * C2723) *
                C15915 +
            ((C17212 + C17213) * C47161 + (C17214 + C17215) * C48049 -
             (C17564 + C17565) * C47157 - (C17566 + C17567) * C48057 +
             (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
              C48385 * C1458) *
                 C47167 +
             (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
              C48385 * C1460) *
                 C2723) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2355 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48443 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2356 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48436 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C2357 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48423 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C2358 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C15915 +
           ((C16114 + C16115) * C2355 + (C16116 + C16117) * C48443 -
            (C16118 + C16119) * C2356 - (C16120 + C16121) * C48436 +
            (C16122 + C16123) * C2357 + (C16124 + C16125) * C48423 -
            (C16422 + C16423) * C2358 - (C16424 + C16425) * C48402) *
               C48416) *
              C48301 * C48097 * C2353 +
          (((C16119 + C16118) * C2356 -
            ((C16117 + C16116) * C48443 + (C16115 + C16114) * C2355) +
            (C16121 + C16120) * C48436 - (C16123 + C16122) * C2357 -
            (C16125 + C16124) * C48423 + (C16423 + C16422) * C2358 +
            (C16425 + C16424) * C48402) *
               C15915 +
           ((C16126 + C16127) * C2356 -
            ((C16128 + C16129) * C48443 + (C16130 + C16131) * C2355) +
            (C16132 + C16133) * C48436 - (C16134 + C16135) * C2357 -
            (C16136 + C16137) * C48423 +
            (C15917 * C276 + C15913 * C294 + C15918 * C277 + C48385 * C296) *
                C2358 +
            (C15917 * C295 + C15913 * C306 + C15918 * C297 + C48385 * C307) *
                C48402) *
               C48416) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2463 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C2457 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2464 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C15915 +
           ((C16114 + C16115) * C2463 + (C16116 + C16117) * C2457 -
            (C16118 + C16119) * C2464 - (C16120 + C16121) * C48054) *
               C48416) *
              C48301 * C48097 * C48444 +
          (((C16119 + C16118) * C2464 -
            ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
            (C16121 + C16120) * C48054) *
               C15915 +
           ((C16126 + C16127) * C2464 -
            ((C16128 + C16129) * C2457 + (C16130 + C16131) * C2463) +
            (C16132 + C16133) * C48054) *
               C48416) *
              C48301 * C48097 * C48440 +
          (((C16131 + C16130) * C2463 + (C16129 + C16128) * C2457 -
            (C16127 + C16126) * C2464 - (C16133 + C16132) * C48054) *
               C15915 +
           ((C17030 + C17031) * C2463 + (C17032 + C17033) * C2457 -
            (C17358 + C17359) * C2464 - (C17360 + C17361) * C48054) *
               C48416) *
              C48301 * C48097 * C48430 +
          (((C17359 + C17358) * C2464 -
            ((C17033 + C17032) * C2457 + (C17031 + C17030) * C2463) +
            (C17361 + C17360) * C48054) *
               C15915 +
           ((C15917 * C1035 + C15913 * C1044 + C15918 * C1036 +
             C48385 * C1045) *
                C2464 -
            ((C17034 + C17035) * C2457 + (C17036 + C17037) * C2463) +
            (C15917 * C1047 + C15913 * C1053 + C15918 * C1048 +
             C48385 * C1054) *
                C48054) *
               C48416) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47151 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48352 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47132 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C15915 +
            ((C16114 + C16115) * C47151 + (C16116 + C16117) * C48352 -
             (C16118 + C16119) * C47132 - (C16120 + C16121) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C47132 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C48352 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C47151) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48054) *
                C15915 +
            ((C16774 + C16775) * C47132 -
             ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
             (C16780 + C16781) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48140 +
          ((((C16119 + C16118) * C47132 -
             ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
             (C16121 + C16120) * C48054) *
                C15915 +
            ((C16126 + C16127) * C47132 -
             ((C16128 + C16129) * C48352 + (C16130 + C16131) * C47151) +
             (C16132 + C16133) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C16779 + C16778) * C47151 + (C16777 + C16776) * C48352 -
             (C16775 + C16774) * C47132 - (C16781 + C16780) * C48054) *
                C15915 +
            ((C17212 + C17213) * C47151 + (C17214 + C17215) * C48352 -
             (C17564 + C17565) * C47132 - (C17566 + C17567) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48147 +
          ((((C16131 + C16130) * C47151 + (C16129 + C16128) * C48352 -
             (C16127 + C16126) * C47132 - (C16133 + C16132) * C48054) *
                C15915 +
            ((C17030 + C17031) * C47151 + (C17032 + C17033) * C48352 -
             (C17358 + C17359) * C47132 - (C17360 + C17361) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C17565 + C17564) * C47132 -
             ((C17215 + C17214) * C48352 + (C17213 + C17212) * C47151) +
             (C17567 + C17566) * C48054) *
                C15915 +
            ((C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48385 * C1564) *
                 C47132 -
             ((C17706 + C17707) * C48352 + (C17708 + C17709) * C47151) +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C48180 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C48187 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C1030 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C48044) *
                C15915 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48416) *
               C48301 * C3628) *
              C48140 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C48187 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C48180 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48416 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C15915) *
               C48301 * C3628) *
              C48147 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
            ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
               C48301 * C48180 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48416 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C15915) *
               C48301 * C48187 +
           (((C17219 + C17218) * C1030 + (C17217 + C17216) * C48044) * C15915 +
            ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
              C48385 * C5882) *
                 C1030 +
             (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
              C48385 * C5886) *
                 C48044) *
                C48416) *
               C48301 * C3628) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C3120 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C48184) *
              C48444 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C48184 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C3120) *
              C48440 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
            ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
               C48301 * C3120 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48416 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C15915) *
               C48301 * C48184) *
              C48430 +
          ((((C17709 + C17708) * C1030 + (C17707 + C17706) * C48044) * C15915 +
            ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
              C48385 * C6404) *
                 C1030 +
             (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
              C48385 * C6408) *
                 C48044) *
                C48416) *
               C48301 * C48184 -
           (((C17034 + C17035) * C48044 + (C17036 + C17037) * C1030) * C48416 +
            ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C15915) *
               C48301 * C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C959 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48434 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C960 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48421 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C961 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C48392) *
                C15915 +
            ((C16114 + C16115) * C959 + (C16116 + C16117) * C48434 -
             (C16118 + C16119) * C960 - (C16120 + C16121) * C48421 +
             (C16122 + C16123) * C961 + (C16124 + C16125) * C48392) *
                C48416) *
               C48301 * C3120 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C960 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C48434 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C959) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48421 -
             (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                 C961 -
             (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                 C48392) *
                C15915 +
            ((C16774 + C16775) * C960 -
             ((C16776 + C16777) * C48434 + (C16778 + C16779) * C959) +
             (C16780 + C16781) * C48421 - (C16782 + C16783) * C961 -
             (C16784 + C16785) * C48392) *
                C48416) *
               C48301 * C48184) *
              C2353 +
          ((((C16119 + C16118) * C960 -
             ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
             (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
             (C16125 + C16124) * C48392) *
                C15915 +
            ((C16126 + C16127) * C960 -
             ((C16128 + C16129) * C48434 + (C16130 + C16131) * C959) +
             (C16132 + C16133) * C48421 - (C16134 + C16135) * C961 -
             (C16136 + C16137) * C48392) *
                C48416) *
               C48301 * C3120 +
           (((C16779 + C16778) * C959 + (C16777 + C16776) * C48434 -
             (C16775 + C16774) * C960 - (C16781 + C16780) * C48421 +
             (C16783 + C16782) * C961 + (C16785 + C16784) * C48392) *
                C15915 +
            ((C17212 + C17213) * C959 + (C17214 + C17215) * C48434 -
             (C17564 + C17565) * C960 - (C17566 + C17567) * C48421 +
             (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
              C48385 * C1458) *
                 C961 +
             (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
              C48385 * C1460) *
                 C48392) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C48445 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C48442 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C1030 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C48044) *
                C15915 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48416) *
               C48301 * C48433 -
           (((C18558 + C18559) * C48044 + (C18560 + C18561) * C1030) * C48416 +
            ((C15918 * C1868 + C48385 * C1880 + C15917 * C1869 +
              C15913 * C1881) *
                 C48044 +
             (C15918 * C1862 + C48385 * C1871 + C15917 * C1863 +
              C15913 * C1872) *
                 C1030) *
                C15915) *
               C48301 * C48414) *
              C2353 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C48442 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C48445 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48416 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C15915) *
               C48301 * C48433 +
           (((C18561 + C18560) * C1030 + (C18559 + C18558) * C48044) * C15915 +
            ((C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
              C48385 * C7272) *
                 C1030 +
             (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
              C48385 * C7276) *
                 C48044) *
                C48416) *
               C48301 * C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47151 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48352 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47132 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C15915 +
            ((C16114 + C16115) * C47151 + (C16116 + C16117) * C48352 -
             (C16118 + C16119) * C47132 - (C16120 + C16121) * C48054) *
                C48416) *
               C48301 * C48180 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C47132 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C48352 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C47151) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48054) *
                C15915 +
            ((C16774 + C16775) * C47132 -
             ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
             (C16780 + C16781) * C48054) *
                C48416) *
               C48301 * C48187 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C47151 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C48352 -
             (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                 C47132 -
             (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                 C48054) *
                C15915 +
            ((C17208 + C17209) * C47151 + (C17210 + C17211) * C48352 -
             (C18286 + C18287) * C47132 - (C18288 + C18289) * C48054) *
                C48416) *
               C48301 * C3628) *
              C2353 +
          ((((C16119 + C16118) * C47132 -
             ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
             (C16121 + C16120) * C48054) *
                C15915 +
            ((C16126 + C16127) * C47132 -
             ((C16128 + C16129) * C48352 + (C16130 + C16131) * C47151) +
             (C16132 + C16133) * C48054) *
                C48416) *
               C48301 * C48180 +
           (((C16779 + C16778) * C47151 + (C16777 + C16776) * C48352 -
             (C16775 + C16774) * C47132 - (C16781 + C16780) * C48054) *
                C15915 +
            ((C17212 + C17213) * C47151 + (C17214 + C17215) * C48352 -
             (C17564 + C17565) * C47132 - (C17566 + C17567) * C48054) *
                C48416) *
               C48301 * C48187 +
           (((C18287 + C18286) * C47132 -
             ((C17211 + C17210) * C48352 + (C17209 + C17208) * C47151) +
             (C18289 + C18288) * C48054) *
                C15915 +
            ((C15917 * C1172 + C15913 * C1187 + C15918 * C1173 +
              C48385 * C1188) *
                 C47132 -
             ((C17216 + C17217) * C48352 + (C17218 + C17219) * C47151) +
             (C15917 * C1190 + C15913 * C1199 + C15918 * C1191 +
              C48385 * C1200) *
                 C48054) *
                C48416) *
               C48301 * C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C959 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48434 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C960 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48421 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C961 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C48392) *
                C15915 +
            ((C16114 + C16115) * C959 + (C16116 + C16117) * C48434 -
             (C16118 + C16119) * C960 - (C16120 + C16121) * C48421 +
             (C16122 + C16123) * C961 + (C16124 + C16125) * C48392) *
                C48416) *
               C48301 * C3120 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C960 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C48434 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C959) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48421 -
             (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                 C961 -
             (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                 C48392) *
                C15915 +
            ((C16774 + C16775) * C960 -
             ((C16776 + C16777) * C48434 + (C16778 + C16779) * C959) +
             (C16780 + C16781) * C48421 - (C16782 + C16783) * C961 -
             (C16784 + C16785) * C48392) *
                C48416) *
               C48301 * C48184) *
              C2353 +
          ((((C16119 + C16118) * C960 -
             ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
             (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
             (C16125 + C16124) * C48392) *
                C15915 +
            ((C16126 + C16127) * C960 -
             ((C16128 + C16129) * C48434 + (C16130 + C16131) * C959) +
             (C16132 + C16133) * C48421 - (C16134 + C16135) * C961 -
             (C16136 + C16137) * C48392) *
                C48416) *
               C48301 * C3120 +
           (((C16779 + C16778) * C959 + (C16777 + C16776) * C48434 -
             (C16775 + C16774) * C960 - (C16781 + C16780) * C48421 +
             (C16783 + C16782) * C961 + (C16785 + C16784) * C48392) *
                C15915 +
            ((C17212 + C17213) * C959 + (C17214 + C17215) * C48434 -
             (C17564 + C17565) * C960 - (C17566 + C17567) * C48421 +
             (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
              C48385 * C1458) *
                 C961 +
             (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
              C48385 * C1460) *
                 C48392) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C3120 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C48184) *
              C48444 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C48184 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C3120) *
              C48440 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
            ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
               C48301 * C3120 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48416 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C15915) *
               C48301 * C48184) *
              C48430 +
          ((((C17709 + C17708) * C1030 + (C17707 + C17706) * C48044) * C15915 +
            ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
              C48385 * C6404) *
                 C1030 +
             (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
              C48385 * C6408) *
                 C48044) *
                C48416) *
               C48301 * C48184 -
           (((C17034 + C17035) * C48044 + (C17036 + C17037) * C1030) * C48416 +
            ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C15915) *
               C48301 * C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C47151 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48352 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C47132 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C15915 +
           ((C16114 + C16115) * C47151 + (C16116 + C16117) * C48352 -
            (C16118 + C16119) * C47132 - (C16120 + C16121) * C48054) *
               C48416) *
              C48301 * C48097 * C1301 +
          (((C16119 + C16118) * C47132 -
            ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
            (C16121 + C16120) * C48054) *
               C15915 +
           ((C16126 + C16127) * C47132 -
            ((C16128 + C16129) * C48352 + (C16130 + C16131) * C47151) +
            (C16132 + C16133) * C48054) *
               C48416) *
              C48301 * C48097 * C1302 +
          (((C16131 + C16130) * C47151 + (C16129 + C16128) * C48352 -
            (C16127 + C16126) * C47132 - (C16133 + C16132) * C48054) *
               C15915 +
           ((C17030 + C17031) * C47151 + (C17032 + C17033) * C48352 -
            (C17358 + C17359) * C47132 - (C17360 + C17361) * C48054) *
               C48416) *
              C48301 * C48097 * C1303 +
          (((C17359 + C17358) * C47132 -
            ((C17033 + C17032) * C48352 + (C17031 + C17030) * C47151) +
            (C17361 + C17360) * C48054) *
               C15915 +
           ((C15917 * C1035 + C15913 * C1044 + C15918 * C1036 +
             C48385 * C1045) *
                C47132 -
            ((C17034 + C17035) * C48352 + (C17036 + C17037) * C47151) +
            (C15917 * C1047 + C15913 * C1053 + C15918 * C1048 +
             C48385 * C1054) *
                C48054) *
               C48416) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C565 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C559 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C566 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C560 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C567 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C561 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C568 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C15915 +
           ((C16114 + C16115) * C565 + (C16116 + C16117) * C559 -
            (C16118 + C16119) * C566 - (C16120 + C16121) * C560 +
            (C16122 + C16123) * C567 + (C16124 + C16125) * C561 -
            (C16422 + C16423) * C568 - (C16424 + C16425) * C48402) *
               C48416) *
              C48301 * C48097 * C48366 +
          (((C16119 + C16118) * C566 -
            ((C16117 + C16116) * C559 + (C16115 + C16114) * C565) +
            (C16121 + C16120) * C560 - (C16123 + C16122) * C567 -
            (C16125 + C16124) * C561 + (C16423 + C16422) * C568 +
            (C16425 + C16424) * C48402) *
               C15915 +
           ((C16126 + C16127) * C566 -
            ((C16128 + C16129) * C559 + (C16130 + C16131) * C565) +
            (C16132 + C16133) * C560 - (C16134 + C16135) * C567 -
            (C16136 + C16137) * C561 +
            (C15917 * C276 + C15913 * C294 + C15918 * C277 + C48385 * C296) *
                C568 +
            (C15917 * C295 + C15913 * C306 + C15918 * C297 + C48385 * C307) *
                C48402) *
               C48416) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47151 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48352 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47132 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C15915 +
            ((C16114 + C16115) * C47151 + (C16116 + C16117) * C48352 -
             (C16118 + C16119) * C47132 - (C16120 + C16121) * C48054) *
                C48416) *
               C48301 * C1681 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C47132 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C48352 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C47151) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48054) *
                C15915 +
            ((C16774 + C16775) * C47132 -
             ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
             (C16780 + C16781) * C48054) *
                C48416) *
               C48301 * C1682 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C47151 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C48352 -
             (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                 C47132 -
             (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                 C48054) *
                C15915 +
            ((C17208 + C17209) * C47151 + (C17210 + C17211) * C48352 -
             (C18286 + C18287) * C47132 - (C18288 + C18289) * C48054) *
                C48416) *
               C48301 * C48401) *
              C48366 +
          ((((C16119 + C16118) * C47132 -
             ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
             (C16121 + C16120) * C48054) *
                C15915 +
            ((C16126 + C16127) * C47132 -
             ((C16128 + C16129) * C48352 + (C16130 + C16131) * C47151) +
             (C16132 + C16133) * C48054) *
                C48416) *
               C48301 * C1681 +
           (((C16779 + C16778) * C47151 + (C16777 + C16776) * C48352 -
             (C16775 + C16774) * C47132 - (C16781 + C16780) * C48054) *
                C15915 +
            ((C17212 + C17213) * C47151 + (C17214 + C17215) * C48352 -
             (C17564 + C17565) * C47132 - (C17566 + C17567) * C48054) *
                C48416) *
               C48301 * C1682 +
           (((C18287 + C18286) * C47132 -
             ((C17211 + C17210) * C48352 + (C17209 + C17208) * C47151) +
             (C18289 + C18288) * C48054) *
                C15915 +
            ((C15917 * C1172 + C15913 * C1187 + C15918 * C1173 +
              C48385 * C1188) *
                 C47132 -
             ((C17216 + C17217) * C48352 + (C17218 + C17219) * C47151) +
             (C15917 * C1190 + C15913 * C1199 + C15918 * C1191 +
              C48385 * C1200) *
                 C48054) *
                C48416) *
               C48301 * C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C48367 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C48184) *
              C1301 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C48184 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C48367) *
              C1302 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
            ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
               C48301 * C48367 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48416 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C15915) *
               C48301 * C48184) *
              C1303 +
          ((((C17709 + C17708) * C1030 + (C17707 + C17706) * C48044) * C15915 +
            ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
              C48385 * C6404) *
                 C1030 +
             (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
              C48385 * C6408) *
                 C48044) *
                C48416) *
               C48301 * C48184 -
           (((C17034 + C17035) * C48044 + (C17036 + C17037) * C1030) * C48416 +
            ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C15915) *
               C48301 * C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C265 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C259 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C266 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C260 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C267 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C48392) *
                C15915 +
            ((C16114 + C16115) * C265 + (C16116 + C16117) * C259 -
             (C16118 + C16119) * C266 - (C16120 + C16121) * C260 +
             (C16122 + C16123) * C267 + (C16124 + C16125) * C48392) *
                C48416) *
               C48301 * C48367 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C266 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C259 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C265) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C260 -
             (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                 C267 -
             (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                 C48392) *
                C15915 +
            ((C16774 + C16775) * C266 -
             ((C16776 + C16777) * C259 + (C16778 + C16779) * C265) +
             (C16780 + C16781) * C260 - (C16782 + C16783) * C267 -
             (C16784 + C16785) * C48392) *
                C48416) *
               C48301 * C48184) *
              C48366 +
          ((((C16119 + C16118) * C266 -
             ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
             (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
             (C16125 + C16124) * C48392) *
                C15915 +
            ((C16126 + C16127) * C266 -
             ((C16128 + C16129) * C259 + (C16130 + C16131) * C265) +
             (C16132 + C16133) * C260 - (C16134 + C16135) * C267 -
             (C16136 + C16137) * C48392) *
                C48416) *
               C48301 * C48367 +
           (((C16779 + C16778) * C265 + (C16777 + C16776) * C259 -
             (C16775 + C16774) * C266 - (C16781 + C16780) * C260 +
             (C16783 + C16782) * C267 + (C16785 + C16784) * C48392) *
                C15915 +
            ((C15917 * C1170 + C15913 * C1185 + C15918 * C1169 +
              C48385 * C1184) *
                 C265 +
             (C15917 * C1182 + C15913 * C1197 + C15918 * C1181 +
              C48385 * C1196) *
                 C259 -
             (C15918 * C1168 + C48385 * C1183 + C15917 * C1169 +
              C15913 * C1184) *
                 C266 -
             (C15918 * C1180 + C48385 * C1195 + C15917 * C1181 +
              C15913 * C1196) *
                 C260 +
             (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
              C48385 * C1458) *
                 C267 +
             (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
              C48385 * C1460) *
                 C48392) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C2133 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C2134 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C1030 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C48044) *
                C15915 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48416) *
               C48301 * C2135 -
           (((C18558 + C18559) * C48044 + (C18560 + C18561) * C1030) * C48416 +
            ((C15918 * C1868 + C48385 * C1880 + C15917 * C1869 +
              C15913 * C1881) *
                 C48044 +
             (C15918 * C1862 + C48385 * C1871 + C15917 * C1863 +
              C15913 * C1872) *
                 C1030) *
                C15915) *
               C48301 * C48414) *
              C48366 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C2134 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C2133 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48416 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C15915) *
               C48301 * C2135 +
           (((C18561 + C18560) * C1030 + (C18559 + C18558) * C48044) * C15915 +
            ((C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
              C48385 * C7272) *
                 C1030 +
             (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
              C48385 * C7276) *
                 C48044) *
                C48416) *
               C48301 * C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                   C116 +
               (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                   C104 -
               (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                   C117 -
               (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                   C105 +
               (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                   C118 +
               (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                   C106 -
               (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                   C119 -
               (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                   C107 +
               (C15917 * C125 + C15913 * C136 + C15918 * C126 + C48385 * C138) *
                   C120 +
               (C15917 * C137 + C15913 * C146 + C15918 * C139 + C48385 * C147) *
                   C108) *
                  C15915 +
              ((C15917 * C271 + C15913 * C284 + C15918 * C268 + C48385 * C278) *
                   C116 +
               (C15917 * C283 + C15913 * C300 + C15918 * C282 + C48385 * C299) *
                   C104 -
               (C15918 * C269 + C48385 * C279 + C15917 * C268 + C15913 * C278) *
                   C117 -
               (C15918 * C281 + C48385 * C298 + C15917 * C282 + C15913 * C299) *
                   C105 +
               (C15917 * C269 + C15913 * C279 + C15918 * C270 + C48385 * C280) *
                   C118 +
               (C15917 * C281 + C15913 * C298 + C15918 * C285 + C48385 * C301) *
                   C106 -
               (C15918 * C272 + C48385 * C286 + C15917 * C270 + C15913 * C280) *
                   C119 -
               (C15918 * C287 + C48385 * C302 + C15917 * C285 + C15913 * C301) *
                   C107 +
               (C15917 * C272 + C15913 * C286 + C15918 * C569 + C48385 * C570) *
                   C120 +
               (C15917 * C287 + C15913 * C302 + C15918 * C571 + C48385 * C572) *
                   C108) *
                  C48416) *
             C48301 * C48097 * C48085 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15917 * C121 + C15913 * C128 + C15918 * C122 +
                 C48385 * C129) *
                    C265 +
                (C15917 * C131 + C15913 * C142 + C15918 * C132 +
                 C48385 * C143) *
                    C259 -
                (C15918 * C123 + C48385 * C130 + C15917 * C122 +
                 C15913 * C129) *
                    C266 -
                (C15918 * C133 + C48385 * C144 + C15917 * C132 +
                 C15913 * C143) *
                    C260 +
                (C15917 * C123 + C15913 * C130 + C15918 * C124 +
                 C48385 * C134) *
                    C267 +
                (C15917 * C133 + C15913 * C144 + C15918 * C135 +
                 C48385 * C145) *
                    C48392) *
                   C15915 +
               ((C16114 + C16115) * C265 + (C16116 + C16117) * C259 -
                (C16118 + C16119) * C266 - (C16120 + C16121) * C260 +
                (C16122 + C16123) * C267 + (C16124 + C16125) * C48392) *
                   C48416) *
                  C48301 * C48097 * C48437 +
              (((C16119 + C16118) * C266 -
                ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
                (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
                (C16125 + C16124) * C48392) *
                   C15915 +
               ((C16126 + C16127) * C266 -
                ((C16128 + C16129) * C259 + (C16130 + C16131) * C265) +
                (C16132 + C16133) * C260 - (C16134 + C16135) * C267 -
                (C16136 + C16137) * C48392) *
                   C48416) *
                  C48301 * C48097 * C48425 +
              (((C16131 + C16130) * C265 + (C16129 + C16128) * C259 -
                (C16127 + C16126) * C266 - (C16133 + C16132) * C260 +
                (C16135 + C16134) * C267 + (C16137 + C16136) * C48392) *
                   C15915 +
               ((C15917 * C1033 + C15913 * C1042 + C15918 * C1032 +
                 C48385 * C1041) *
                    C265 +
                (C15917 * C1039 + C15913 * C1051 + C15918 * C1038 +
                 C48385 * C1050) *
                    C259 -
                (C15918 * C1031 + C48385 * C1040 + C15917 * C1032 +
                 C15913 * C1041) *
                    C266 -
                (C15918 * C1037 + C48385 * C1049 + C15917 * C1038 +
                 C15913 * C1050) *
                    C260 +
                (C15917 * C1031 + C15913 * C1040 + C15918 * C1307 +
                 C48385 * C1308) *
                    C267 +
                (C15917 * C1037 + C15913 * C1049 + C15918 * C1309 +
                 C48385 * C1310) *
                    C48392) *
                   C48416) *
                  C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C265 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C259 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C266 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C260 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C267 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C265 + (C16116 + C16117) * C259 -
            (C16118 + C16119) * C266 - (C16120 + C16121) * C260 +
            (C16122 + C16123) * C267 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C48438 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C266 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C259 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C265) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C260 -
            (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                C267 -
            (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                C48392) *
               C15915 +
           ((C15917 * C824 + C15913 * C829 + C15918 * C825 + C48385 * C830) *
                C266 -
            ((C15918 * C832 + C48385 * C839 + C15917 * C831 + C15913 * C838) *
                 C259 +
             (C15918 * C824 + C48385 * C829 + C15917 * C823 + C15913 * C828) *
                 C265) +
            (C15917 * C832 + C15913 * C839 + C15918 * C833 + C48385 * C840) *
                C260 -
            (C15918 * C826 + C48385 * C834 + C15917 * C825 + C15913 * C830) *
                C267 -
            (C15918 * C835 + C48385 * C841 + C15917 * C833 + C15913 * C840) *
                C48392) *
               C48416) *
              C48301 * C48427 +
          (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                C265 +
            (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                C259 -
            (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                C266 -
            (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                C260 +
            (C15917 * C428 + C15913 * C443 + C15918 * C429 + C48385 * C447) *
                C267 +
            (C15917 * C446 + C15913 * C458 + C15918 * C448 + C48385 * C459) *
                C48392) *
               C15915 +
           ((C15917 * C1167 + C15913 * C1179 + C15918 * C1166 +
             C48385 * C1178) *
                C265 +
            (C15917 * C1176 + C15913 * C1194 + C15918 * C1175 +
             C48385 * C1193) *
                C259 -
            (C15918 * C1165 + C48385 * C1177 + C15917 * C1166 +
             C15913 * C1178) *
                C266 -
            (C15918 * C1174 + C48385 * C1192 + C15917 * C1175 +
             C15913 * C1193) *
                C260 +
            (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
             C48385 * C2032) *
                C267 +
            (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
             C48385 * C2034) *
                C48392) *
               C48416) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C959 + (C16116 + C16117) * C48434 -
            (C16118 + C16119) * C960 - (C16120 + C16121) * C48421 +
            (C16122 + C16123) * C961 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C48097 * C956 +
          (((C16119 + C16118) * C960 -
            ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
            (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
            (C16125 + C16124) * C48392) *
               C15915 +
           ((C16126 + C16127) * C960 -
            ((C16128 + C16129) * C48434 + (C16130 + C16131) * C959) +
            (C16132 + C16133) * C48421 - (C16134 + C16135) * C961 -
            (C16136 + C16137) * C48392) *
               C48416) *
              C48301 * C48097 * C957 +
          (((C16131 + C16130) * C959 + (C16129 + C16128) * C48434 -
            (C16127 + C16126) * C960 - (C16133 + C16132) * C48421 +
            (C16135 + C16134) * C961 + (C16137 + C16136) * C48392) *
               C15915 +
           ((C15917 * C1033 + C15913 * C1042 + C15918 * C1032 +
             C48385 * C1041) *
                C959 +
            (C15917 * C1039 + C15913 * C1051 + C15918 * C1038 +
             C48385 * C1050) *
                C48434 -
            (C15918 * C1031 + C48385 * C1040 + C15917 * C1032 +
             C15913 * C1041) *
                C960 -
            (C15918 * C1037 + C48385 * C1049 + C15917 * C1038 +
             C15913 * C1050) *
                C48421 +
            (C15917 * C1031 + C15913 * C1040 + C15918 * C1307 +
             C48385 * C1308) *
                C961 +
            (C15917 * C1037 + C15913 * C1049 + C15918 * C1309 +
             C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C1030 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48044) *
               C15915 +
           ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
              C48301 * C48097 * C1025 -
          (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
           ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
              C48301 * C48097 * C1026 +
          (((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
           ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
              C48301 * C48097 * C1027 -
          (((C17034 + C17035) * C48044 + (C17036 + C17037) * C1030) * C48416 +
           ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C15915) *
              C48301 * C48097 * C1028 +
          (((C17037 + C17036) * C1030 + (C17035 + C17034) * C48044) * C15915 +
           ((C15917 * C5701 + C15913 * C5703 + C15918 * C5702 +
             C48385 * C5704) *
                C1030 +
            (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 +
             C48385 * C5708) *
                C48044) *
               C48416) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C48438 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C48427 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C1030 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C48044) *
                C15915 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48416) *
               C48301 * C48401) *
              C956 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C48427 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C48438 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48416 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C15915) *
               C48301 * C48401) *
              C957 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
            ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
               C48301 * C48438 -
           (((C15918 * C1566 + C48385 * C1569 + C15917 * C1565 +
              C15913 * C1568) *
                 C48044 +
             (C15918 * C1560 + C48385 * C1563 + C15917 * C1559 +
              C15913 * C1562) *
                 C1030) *
                C48416 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C15915) *
               C48301 * C48427 +
           (((C17219 + C17218) * C1030 + (C17217 + C17216) * C48044) * C15915 +
            ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
              C48385 * C5882) *
                 C1030 +
             (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
              C48385 * C5886) *
                 C48044) *
                C48416) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C959 + (C16116 + C16117) * C48434 -
            (C16118 + C16119) * C960 - (C16120 + C16121) * C48421 +
            (C16122 + C16123) * C961 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C1681 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C960 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48434 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C959) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C48421 -
            (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                C961 -
            (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                C48392) *
               C15915 +
           ((C16774 + C16775) * C960 -
            ((C16776 + C16777) * C48434 + (C16778 + C16779) * C959) +
            (C16780 + C16781) * C48421 - (C16782 + C16783) * C961 -
            (C16784 + C16785) * C48392) *
               C48416) *
              C48301 * C1682 +
          (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                C959 +
            (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                C48434 -
            (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                C960 -
            (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                C48421 +
            (C15917 * C428 + C15913 * C443 + C15918 * C429 + C48385 * C447) *
                C961 +
            (C15917 * C446 + C15913 * C458 + C15918 * C448 + C48385 * C459) *
                C48392) *
               C15915 +
           ((C17208 + C17209) * C959 + (C17210 + C17211) * C48434 -
            (C15918 * C1165 + C48385 * C1177 + C15917 * C1166 +
             C15913 * C1178) *
                C960 -
            (C15918 * C1174 + C48385 * C1192 + C15917 * C1175 +
             C15913 * C1193) *
                C48421 +
            (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
             C48385 * C2032) *
                C961 +
            (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
             C48385 * C2034) *
                C48392) *
               C48416) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C1681 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C1682 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C1030 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C48044) *
                C15915 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48416) *
               C48301 * C48401) *
              C48437 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C1682 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C1681 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48416 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C15915) *
               C48301 * C48401) *
              C48425 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
            ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
               C48301 * C1681 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48416 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C15915) *
               C48301 * C1682 +
           (((C17219 + C17218) * C1030 + (C17217 + C17216) * C48044) * C15915 +
            ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
              C48385 * C5882) *
                 C1030 +
             (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
              C48385 * C5886) *
                 C48044) *
                C48416) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C1030 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48044) *
               C15915 +
           ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
              C48301 * C1856 -
          (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
           ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                C48044 +
            (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                C1030) *
               C15915) *
              C48301 * C1857 +
          (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                C1030 +
            (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                C48044) *
               C15915 +
           ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48416) *
              C48301 * C1858 -
          (((C15918 * C2246 + C48385 * C2249 + C15917 * C2245 +
             C15913 * C2248) *
                C48044 +
            (C15918 * C2240 + C48385 * C2243 + C15917 * C2239 +
             C15913 * C2242) *
                C1030) *
               C48416 +
           ((C15918 * C1868 + C48385 * C1880 + C15917 * C1869 +
             C15913 * C1881) *
                C48044 +
            (C15918 * C1862 + C48385 * C1871 + C15917 * C1863 +
             C15913 * C1872) *
                C1030) *
               C15915) *
              C48301 * C1859 +
          (((C15917 * C1864 + C15913 * C1873 + C15918 * C1865 +
             C48385 * C1874) *
                C1030 +
            (C15917 * C1876 + C15913 * C1882 + C15918 * C1877 +
             C48385 * C1883) *
                C48044) *
               C15915 +
           ((C15917 * C6795 + C15913 * C6797 + C15918 * C6796 +
             C48385 * C6798) *
                C1030 +
            (C15917 * C6799 + C15913 * C6801 + C15918 * C6800 +
             C48385 * C6802) *
                C48044) *
               C48416) *
              C48301 * C1860) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47151 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48352 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47132 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C15915 +
            ((C16114 + C16115) * C47151 + (C16116 + C16117) * C48352 -
             (C16118 + C16119) * C47132 - (C16120 + C16121) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C47132 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C48352 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C47151) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48054) *
                C15915 +
            ((C16774 + C16775) * C47132 -
             ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
             (C16780 + C16781) * C48054) *
                C48416) *
               C48301 * C48184) *
              C956 +
          ((((C16119 + C16118) * C47132 -
             ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
             (C16121 + C16120) * C48054) *
                C15915 +
            ((C16126 + C16127) * C47132 -
             ((C16128 + C16129) * C48352 + (C16130 + C16131) * C47151) +
             (C16132 + C16133) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C16779 + C16778) * C47151 + (C16777 + C16776) * C48352 -
             (C16775 + C16774) * C47132 - (C16781 + C16780) * C48054) *
                C15915 +
            ((C17212 + C17213) * C47151 + (C17214 + C17215) * C48352 -
             (C17564 + C17565) * C47132 - (C17566 + C17567) * C48054) *
                C48416) *
               C48301 * C48184) *
              C957 +
          ((((C16131 + C16130) * C47151 + (C16129 + C16128) * C48352 -
             (C16127 + C16126) * C47132 - (C16133 + C16132) * C48054) *
                C15915 +
            ((C17030 + C17031) * C47151 + (C17032 + C17033) * C48352 -
             (C17358 + C17359) * C47132 - (C17360 + C17361) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C17565 + C17564) * C47132 -
             ((C17215 + C17214) * C48352 + (C17213 + C17212) * C47151) +
             (C17567 + C17566) * C48054) *
                C15915 +
            ((C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48385 * C1564) *
                 C47132 -
             ((C15918 * C1566 + C48385 * C1569 + C15917 * C1565 +
               C15913 * C1568) *
                  C48352 +
              (C15918 * C1560 + C48385 * C1563 + C15917 * C1559 +
               C15913 * C1562) *
                  C47151) +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C565 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C559 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C566 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C560 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C567 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C561 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C568 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C15915 +
           ((C16114 + C16115) * C565 + (C16116 + C16117) * C559 -
            (C16118 + C16119) * C566 - (C16120 + C16121) * C560 +
            (C16122 + C16123) * C567 + (C16124 + C16125) * C561 -
            (C16422 + C16423) * C568 - (C16424 + C16425) * C48402) *
               C48416) *
              C48301 * C48367 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C566 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C559 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C565) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C560 -
            (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                C567 -
            (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                C561 +
            (C15917 * C423 + C15913 * C433 + C15918 * C425 + C48385 * C439) *
                C568 +
            (C15917 * C438 + C15913 * C454 + C15918 * C440 + C48385 * C455) *
                C48402) *
               C15915 +
           ((C15917 * C824 + C15913 * C829 + C15918 * C825 + C48385 * C830) *
                C566 -
            ((C15918 * C832 + C48385 * C839 + C15917 * C831 + C15913 * C838) *
                 C559 +
             (C15918 * C824 + C48385 * C829 + C15917 * C823 + C15913 * C828) *
                 C565) +
            (C15917 * C832 + C15913 * C839 + C15918 * C833 + C48385 * C840) *
                C560 -
            (C15918 * C826 + C48385 * C834 + C15917 * C825 + C15913 * C830) *
                C567 -
            (C15918 * C835 + C48385 * C841 + C15917 * C833 + C15913 * C840) *
                C561 +
            (C15917 * C826 + C15913 * C834 + C15918 * C827 + C48385 * C836) *
                C568 +
            (C15917 * C835 + C15913 * C841 + C15918 * C837 + C48385 * C842) *
                C48402) *
               C48416) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C47151 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48352 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C47132 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C15915 +
           ((C16114 + C16115) * C47151 + (C16116 + C16117) * C48352 -
            (C16118 + C16119) * C47132 - (C16120 + C16121) * C48054) *
               C48416) *
              C48301 * C2133 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C47132 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48352 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C47151) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C48054) *
               C15915 +
           ((C16774 + C16775) * C47132 -
            ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
            (C16780 + C16781) * C48054) *
               C48416) *
              C48301 * C2134 +
          (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                C47151 +
            (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                C48352 -
            (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                C47132 -
            (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                C48054) *
               C15915 +
           ((C17208 + C17209) * C47151 + (C17210 + C17211) * C48352 -
            (C18286 + C18287) * C47132 - (C18288 + C18289) * C48054) *
               C48416) *
              C48301 * C2135 +
          (((C15917 * C1862 + C15913 * C1871 + C15918 * C1861 +
             C48385 * C1870) *
                C47132 -
            ((C15918 * C1868 + C48385 * C1880 + C15917 * C1869 +
              C15913 * C1881) *
                 C48352 +
             (C15918 * C1862 + C48385 * C1871 + C15917 * C1863 +
              C15913 * C1872) *
                 C47151) +
            (C15917 * C1868 + C15913 * C1880 + C15918 * C1867 +
             C48385 * C1879) *
                C48054) *
               C15915 +
           ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
             C48385 * C2244) *
                C47132 -
            ((C15918 * C2246 + C48385 * C2249 + C15917 * C2245 +
              C15913 * C2248) *
                 C48352 +
             (C15918 * C2240 + C48385 * C2243 + C15917 * C2239 +
              C15913 * C2242) *
                 C47151) +
            (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
             C48385 * C2250) *
                C48054) *
               C48416) *
              C48301 * C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C265 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C259 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C266 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C260 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C267 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C265 + (C16116 + C16117) * C259 -
            (C16118 + C16119) * C266 - (C16120 + C16121) * C260 +
            (C16122 + C16123) * C267 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C48097 * C48437 +
          (((C16119 + C16118) * C266 -
            ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
            (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
            (C16125 + C16124) * C48392) *
               C15915 +
           ((C16126 + C16127) * C266 -
            ((C16128 + C16129) * C259 + (C16130 + C16131) * C265) +
            (C16132 + C16133) * C260 - (C16134 + C16135) * C267 -
            (C16136 + C16137) * C48392) *
               C48416) *
              C48301 * C48097 * C48425 +
          (((C16131 + C16130) * C265 + (C16129 + C16128) * C259 -
            (C16127 + C16126) * C266 - (C16133 + C16132) * C260 +
            (C16135 + C16134) * C267 + (C16137 + C16136) * C48392) *
               C15915 +
           ((C15917 * C1033 + C15913 * C1042 + C15918 * C1032 +
             C48385 * C1041) *
                C265 +
            (C15917 * C1039 + C15913 * C1051 + C15918 * C1038 +
             C48385 * C1050) *
                C259 -
            (C15918 * C1031 + C48385 * C1040 + C15917 * C1032 +
             C15913 * C1041) *
                C266 -
            (C15918 * C1037 + C48385 * C1049 + C15917 * C1038 +
             C15913 * C1050) *
                C260 +
            (C15917 * C1031 + C15913 * C1040 + C15918 * C1307 +
             C48385 * C1308) *
                C267 +
            (C15917 * C1037 + C15913 * C1049 + C15918 * C1309 +
             C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
               C116 +
           (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
               C104 -
           (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
               C117 -
           (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
               C105 +
           (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
               C118 +
           (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
               C106 -
           (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
               C119 -
           (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
               C107 +
           (C15917 * C125 + C15913 * C136 + C15918 * C126 + C48385 * C138) *
               C120 +
           (C15917 * C137 + C15913 * C146 + C15918 * C139 + C48385 * C147) *
               C108) *
              C15915 +
          ((C15917 * C271 + C15913 * C284 + C15918 * C268 + C48385 * C278) *
               C116 +
           (C15917 * C283 + C15913 * C300 + C15918 * C282 + C48385 * C299) *
               C104 -
           (C15918 * C269 + C48385 * C279 + C15917 * C268 + C15913 * C278) *
               C117 -
           (C15918 * C281 + C48385 * C298 + C15917 * C282 + C15913 * C299) *
               C105 +
           (C15917 * C269 + C15913 * C279 + C15918 * C270 + C48385 * C280) *
               C118 +
           (C15917 * C281 + C15913 * C298 + C15918 * C285 + C48385 * C301) *
               C106 -
           (C15918 * C272 + C48385 * C286 + C15917 * C270 + C15913 * C280) *
               C119 -
           (C15918 * C287 + C48385 * C302 + C15917 * C285 + C15913 * C301) *
               C107 +
           (C15917 * C272 + C15913 * C286 + C15918 * C569 + C48385 * C570) *
               C120 +
           (C15917 * C287 + C15913 * C302 + C15918 * C571 + C48385 * C572) *
               C108) *
              C48416) *
         C48301 * C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C959 + (C16116 + C16117) * C48434 -
            (C16118 + C16119) * C960 - (C16120 + C16121) * C48421 +
            (C16122 + C16123) * C961 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C48097 * C956 +
          (((C16119 + C16118) * C960 -
            ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
            (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
            (C16125 + C16124) * C48392) *
               C15915 +
           ((C16126 + C16127) * C960 -
            ((C16128 + C16129) * C48434 + (C16130 + C16131) * C959) +
            (C16132 + C16133) * C48421 - (C16134 + C16135) * C961 -
            (C16136 + C16137) * C48392) *
               C48416) *
              C48301 * C48097 * C957 +
          (((C16131 + C16130) * C959 + (C16129 + C16128) * C48434 -
            (C16127 + C16126) * C960 - (C16133 + C16132) * C48421 +
            (C16135 + C16134) * C961 + (C16137 + C16136) * C48392) *
               C15915 +
           ((C15917 * C1033 + C15913 * C1042 + C15918 * C1032 +
             C48385 * C1041) *
                C959 +
            (C15917 * C1039 + C15913 * C1051 + C15918 * C1038 +
             C48385 * C1050) *
                C48434 -
            (C15918 * C1031 + C48385 * C1040 + C15917 * C1032 +
             C15913 * C1041) *
                C960 -
            (C15918 * C1037 + C48385 * C1049 + C15917 * C1038 +
             C15913 * C1050) *
                C48421 +
            (C15917 * C1031 + C15913 * C1040 + C15918 * C1307 +
             C48385 * C1308) *
                C961 +
            (C15917 * C1037 + C15913 * C1049 + C15918 * C1309 +
             C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C1030 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48044) *
               C15915 +
           ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
              C48301 * C48097 * C1025 -
          (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
           ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
              C48301 * C48097 * C1026 +
          (((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
           ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
              C48301 * C48097 * C1027 -
          (((C17034 + C17035) * C48044 + (C17036 + C17037) * C1030) * C48416 +
           ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C15915) *
              C48301 * C48097 * C1028 +
          (((C17037 + C17036) * C1030 + (C17035 + C17034) * C48044) * C15915 +
           ((C15917 * C5701 + C15913 * C5703 + C15918 * C5702 +
             C48385 * C5704) *
                C1030 +
            (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 +
             C48385 * C5708) *
                C48044) *
               C48416) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C959 + (C16116 + C16117) * C48434 -
            (C16118 + C16119) * C960 - (C16120 + C16121) * C48421 +
            (C16122 + C16123) * C961 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C1681 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C960 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48434 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C959) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C48421 -
            (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                C961 -
            (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                C48392) *
               C15915 +
           ((C16774 + C16775) * C960 -
            ((C16776 + C16777) * C48434 + (C16778 + C16779) * C959) +
            (C16780 + C16781) * C48421 - (C16782 + C16783) * C961 -
            (C16784 + C16785) * C48392) *
               C48416) *
              C48301 * C1682 +
          (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                C959 +
            (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                C48434 -
            (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                C960 -
            (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                C48421 +
            (C15917 * C428 + C15913 * C443 + C15918 * C429 + C48385 * C447) *
                C961 +
            (C15917 * C446 + C15913 * C458 + C15918 * C448 + C48385 * C459) *
                C48392) *
               C15915 +
           ((C17208 + C17209) * C959 + (C17210 + C17211) * C48434 -
            (C15918 * C1165 + C48385 * C1177 + C15917 * C1166 +
             C15913 * C1178) *
                C960 -
            (C15918 * C1174 + C48385 * C1192 + C15917 * C1175 +
             C15913 * C1193) *
                C48421 +
            (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
             C48385 * C2032) *
                C961 +
            (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
             C48385 * C2034) *
                C48392) *
               C48416) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C1681 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C1682 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C1030 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C48044) *
                C15915 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48416) *
               C48301 * C48401) *
              C48437 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C1682 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C1681 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48416 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C15915) *
               C48301 * C48401) *
              C48425 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
            ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
               C48301 * C1681 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48416 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C15915) *
               C48301 * C1682 +
           (((C17219 + C17218) * C1030 + (C17217 + C17216) * C48044) * C15915 +
            ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
              C48385 * C5882) *
                 C1030 +
             (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
              C48385 * C5886) *
                 C48044) *
                C48416) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47161 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48049 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47157 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48057 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C47167 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C2723) *
                C15915 +
            ((C16114 + C16115) * C47161 + (C16116 + C16117) * C48049 -
             (C16118 + C16119) * C47157 - (C16120 + C16121) * C48057 +
             (C16122 + C16123) * C47167 + (C16124 + C16125) * C2723) *
                C48416) *
               C48301 * C3120 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C47157 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C48049 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C47161) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48057 -
             (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                 C47167 -
             (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                 C2723) *
                C15915 +
            ((C16774 + C16775) * C47157 -
             ((C16776 + C16777) * C48049 + (C16778 + C16779) * C47161) +
             (C16780 + C16781) * C48057 - (C16782 + C16783) * C47167 -
             (C16784 + C16785) * C2723) *
                C48416) *
               C48301 * C48184) *
              C48366 +
          ((((C16119 + C16118) * C47157 -
             ((C16117 + C16116) * C48049 + (C16115 + C16114) * C47161) +
             (C16121 + C16120) * C48057 - (C16123 + C16122) * C47167 -
             (C16125 + C16124) * C2723) *
                C15915 +
            ((C16126 + C16127) * C47157 -
             ((C16128 + C16129) * C48049 + (C16130 + C16131) * C47161) +
             (C16132 + C16133) * C48057 - (C16134 + C16135) * C47167 -
             (C16136 + C16137) * C2723) *
                C48416) *
               C48301 * C3120 +
           (((C16779 + C16778) * C47161 + (C16777 + C16776) * C48049 -
             (C16775 + C16774) * C47157 - (C16781 + C16780) * C48057 +
             (C16783 + C16782) * C47167 + (C16785 + C16784) * C2723) *
                C15915 +
            ((C17212 + C17213) * C47161 + (C17214 + C17215) * C48049 -
             (C17564 + C17565) * C47157 - (C17566 + C17567) * C48057 +
             (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
              C48385 * C1458) *
                 C47167 +
             (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
              C48385 * C1460) *
                 C2723) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C2463 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C2457 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C2464 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C15915 +
            ((C16114 + C16115) * C2463 + (C16116 + C16117) * C2457 -
             (C16118 + C16119) * C2464 - (C16120 + C16121) * C48054) *
                C48416) *
               C48301 * C48180 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C2464 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C2457 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C2463) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48054) *
                C15915 +
            ((C16774 + C16775) * C2464 -
             ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
             (C16780 + C16781) * C48054) *
                C48416) *
               C48301 * C48187 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C2463 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C2457 -
             (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                 C2464 -
             (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                 C48054) *
                C15915 +
            ((C17208 + C17209) * C2463 + (C17210 + C17211) * C2457 -
             (C18286 + C18287) * C2464 - (C18288 + C18289) * C48054) *
                C48416) *
               C48301 * C3628) *
              C48366 +
          ((((C16119 + C16118) * C2464 -
             ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
             (C16121 + C16120) * C48054) *
                C15915 +
            ((C16126 + C16127) * C2464 -
             ((C16128 + C16129) * C2457 + (C16130 + C16131) * C2463) +
             (C16132 + C16133) * C48054) *
                C48416) *
               C48301 * C48180 +
           (((C16779 + C16778) * C2463 + (C16777 + C16776) * C2457 -
             (C16775 + C16774) * C2464 - (C16781 + C16780) * C48054) *
                C15915 +
            ((C17212 + C17213) * C2463 + (C17214 + C17215) * C2457 -
             (C17564 + C17565) * C2464 - (C17566 + C17567) * C48054) *
                C48416) *
               C48301 * C48187 +
           (((C18287 + C18286) * C2464 -
             ((C17211 + C17210) * C2457 + (C17209 + C17208) * C2463) +
             (C18289 + C18288) * C48054) *
                C15915 +
            ((C15917 * C1172 + C15913 * C1187 + C15918 * C1173 +
              C48385 * C1188) *
                 C2464 -
             ((C17216 + C17217) * C2457 + (C17218 + C17219) * C2463) +
             (C15917 * C1190 + C15913 * C1199 + C15918 * C1191 +
              C48385 * C1200) *
                 C48054) *
                C48416) *
               C48301 * C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C2463 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C2457 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C2464 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C15915 +
            ((C16114 + C16115) * C2463 + (C16116 + C16117) * C2457 -
             (C16118 + C16119) * C2464 - (C16120 + C16121) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C2464 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C2457 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C2463) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48054) *
                C15915 +
            ((C16774 + C16775) * C2464 -
             ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
             (C16780 + C16781) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48437 +
          ((((C16119 + C16118) * C2464 -
             ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
             (C16121 + C16120) * C48054) *
                C15915 +
            ((C16126 + C16127) * C2464 -
             ((C16128 + C16129) * C2457 + (C16130 + C16131) * C2463) +
             (C16132 + C16133) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C16779 + C16778) * C2463 + (C16777 + C16776) * C2457 -
             (C16775 + C16774) * C2464 - (C16781 + C16780) * C48054) *
                C15915 +
            ((C17212 + C17213) * C2463 + (C17214 + C17215) * C2457 -
             (C17564 + C17565) * C2464 - (C17566 + C17567) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48425 +
          ((((C16131 + C16130) * C2463 + (C16129 + C16128) * C2457 -
             (C16127 + C16126) * C2464 - (C16133 + C16132) * C48054) *
                C15915 +
            ((C17030 + C17031) * C2463 + (C17032 + C17033) * C2457 -
             (C17358 + C17359) * C2464 - (C17360 + C17361) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C17565 + C17564) * C2464 -
             ((C17215 + C17214) * C2457 + (C17213 + C17212) * C2463) +
             (C17567 + C17566) * C48054) *
                C15915 +
            ((C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48385 * C1564) *
                 C2464 -
             ((C17706 + C17707) * C2457 + (C17708 + C17709) * C2463) +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2355 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48443 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2356 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48436 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C2357 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48423 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C2358 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C15915 +
           ((C16114 + C16115) * C2355 + (C16116 + C16117) * C48443 -
            (C16118 + C16119) * C2356 - (C16120 + C16121) * C48436 +
            (C16122 + C16123) * C2357 + (C16124 + C16125) * C48423 -
            (C16422 + C16423) * C2358 - (C16424 + C16425) * C48402) *
               C48416) *
              C48301 * C3120 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C2356 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48443 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C2355) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C48436 -
            (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                C2357 -
            (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                C48423 +
            (C15917 * C423 + C15913 * C433 + C15918 * C425 + C48385 * C439) *
                C2358 +
            (C15917 * C438 + C15913 * C454 + C15918 * C440 + C48385 * C455) *
                C48402) *
               C15915 +
           ((C16774 + C16775) * C2356 -
            ((C16776 + C16777) * C48443 + (C16778 + C16779) * C2355) +
            (C16780 + C16781) * C48436 - (C16782 + C16783) * C2357 -
            (C16784 + C16785) * C48423 +
            (C15917 * C826 + C15913 * C834 + C15918 * C827 + C48385 * C836) *
                C2358 +
            (C15917 * C835 + C15913 * C841 + C15918 * C837 + C48385 * C842) *
                C48402) *
               C48416) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2463 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C2457 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2464 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C15915 +
           ((C16114 + C16115) * C2463 + (C16116 + C16117) * C2457 -
            (C16118 + C16119) * C2464 - (C16120 + C16121) * C48054) *
               C48416) *
              C48301 * C48445 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C2464 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C2457 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C2463) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C48054) *
               C15915 +
           ((C16774 + C16775) * C2464 -
            ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
            (C16780 + C16781) * C48054) *
               C48416) *
              C48301 * C48442 +
          (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                C2463 +
            (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                C2457 -
            (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                C2464 -
            (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                C48054) *
               C15915 +
           ((C17208 + C17209) * C2463 + (C17210 + C17211) * C2457 -
            (C18286 + C18287) * C2464 - (C18288 + C18289) * C48054) *
               C48416) *
              C48301 * C48433 +
          (((C15917 * C1862 + C15913 * C1871 + C15918 * C1861 +
             C48385 * C1870) *
                C2464 -
            ((C15918 * C1868 + C48385 * C1880 + C15917 * C1869 +
              C15913 * C1881) *
                 C2457 +
             (C15918 * C1862 + C48385 * C1871 + C15917 * C1863 +
              C15913 * C1872) *
                 C2463) +
            (C15917 * C1868 + C15913 * C1880 + C15918 * C1867 +
             C48385 * C1879) *
                C48054) *
               C15915 +
           ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
             C48385 * C2244) *
                C2464 -
            ((C18558 + C18559) * C2457 + (C18560 + C18561) * C2463) +
            (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
             C48385 * C2250) *
                C48054) *
               C48416) *
              C48301 * C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C47161 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48049 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C47157 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48057 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C47167 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C2723) *
               C15915 +
           ((C16114 + C16115) * C47161 + (C16116 + C16117) * C48049 -
            (C16118 + C16119) * C47157 - (C16120 + C16121) * C48057 +
            (C16122 + C16123) * C47167 + (C16124 + C16125) * C2723) *
               C48416) *
              C48301 * C48180 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C47157 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48049 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C47161) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C48057 -
            (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                C47167 -
            (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                C2723) *
               C15915 +
           ((C16774 + C16775) * C47157 -
            ((C16776 + C16777) * C48049 + (C16778 + C16779) * C47161) +
            (C16780 + C16781) * C48057 - (C16782 + C16783) * C47167 -
            (C16784 + C16785) * C2723) *
               C48416) *
              C48301 * C48187 +
          (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                C47161 +
            (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                C48049 -
            (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                C47157 -
            (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                C48057 +
            (C15917 * C428 + C15913 * C443 + C15918 * C429 + C48385 * C447) *
                C47167 +
            (C15917 * C446 + C15913 * C458 + C15918 * C448 + C48385 * C459) *
                C2723) *
               C15915 +
           ((C17208 + C17209) * C47161 + (C17210 + C17211) * C48049 -
            (C18286 + C18287) * C47157 - (C18288 + C18289) * C48057 +
            (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
             C48385 * C2032) *
                C47167 +
            (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
             C48385 * C2034) *
                C2723) *
               C48416) *
              C48301 * C3628) *
         C48085) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2355 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48443 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2356 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48436 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C2357 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48423 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C2358 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C15915 +
           ((C16114 + C16115) * C2355 + (C16116 + C16117) * C48443 -
            (C16118 + C16119) * C2356 - (C16120 + C16121) * C48436 +
            (C16122 + C16123) * C2357 + (C16124 + C16125) * C48423 -
            (C16422 + C16423) * C2358 - (C16424 + C16425) * C48402) *
               C48416) *
              C48301 * C3120 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C2356 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48443 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C2355) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C48436 -
            (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                C2357 -
            (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                C48423 +
            (C15917 * C423 + C15913 * C433 + C15918 * C425 + C48385 * C439) *
                C2358 +
            (C15917 * C438 + C15913 * C454 + C15918 * C440 + C48385 * C455) *
                C48402) *
               C15915 +
           ((C16774 + C16775) * C2356 -
            ((C16776 + C16777) * C48443 + (C16778 + C16779) * C2355) +
            (C16780 + C16781) * C48436 - (C16782 + C16783) * C2357 -
            (C16784 + C16785) * C48423 +
            (C15917 * C826 + C15913 * C834 + C15918 * C827 + C48385 * C836) *
                C2358 +
            (C15917 * C835 + C15913 * C841 + C15918 * C837 + C48385 * C842) *
                C48402) *
               C48416) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C2463 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C2457 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C2464 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C15915 +
            ((C16114 + C16115) * C2463 + (C16116 + C16117) * C2457 -
             (C16118 + C16119) * C2464 - (C16120 + C16121) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C2464 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C2457 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C2463) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48054) *
                C15915 +
            ((C16774 + C16775) * C2464 -
             ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
             (C16780 + C16781) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48437 +
          ((((C16119 + C16118) * C2464 -
             ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
             (C16121 + C16120) * C48054) *
                C15915 +
            ((C16126 + C16127) * C2464 -
             ((C16128 + C16129) * C2457 + (C16130 + C16131) * C2463) +
             (C16132 + C16133) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C16779 + C16778) * C2463 + (C16777 + C16776) * C2457 -
             (C16775 + C16774) * C2464 - (C16781 + C16780) * C48054) *
                C15915 +
            ((C17212 + C17213) * C2463 + (C17214 + C17215) * C2457 -
             (C17564 + C17565) * C2464 - (C17566 + C17567) * C48054) *
                C48416) *
               C48301 * C48184) *
              C48425 +
          ((((C16131 + C16130) * C2463 + (C16129 + C16128) * C2457 -
             (C16127 + C16126) * C2464 - (C16133 + C16132) * C48054) *
                C15915 +
            ((C17030 + C17031) * C2463 + (C17032 + C17033) * C2457 -
             (C17358 + C17359) * C2464 - (C17360 + C17361) * C48054) *
                C48416) *
               C48301 * C3120 +
           (((C17565 + C17564) * C2464 -
             ((C17215 + C17214) * C2457 + (C17213 + C17212) * C2463) +
             (C17567 + C17566) * C48054) *
                C15915 +
            ((C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48385 * C1564) *
                 C2464 -
             ((C17706 + C17707) * C2457 + (C17708 + C17709) * C2463) +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C565 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C559 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C566 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C560 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C567 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C561 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C568 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C15915 +
           ((C16114 + C16115) * C565 + (C16116 + C16117) * C559 -
            (C16118 + C16119) * C566 - (C16120 + C16121) * C560 +
            (C16122 + C16123) * C567 + (C16124 + C16125) * C561 -
            (C16422 + C16423) * C568 - (C16424 + C16425) * C48402) *
               C48416) *
              C48301 * C48097 * C48366 +
          (((C16119 + C16118) * C566 -
            ((C16117 + C16116) * C559 + (C16115 + C16114) * C565) +
            (C16121 + C16120) * C560 - (C16123 + C16122) * C567 -
            (C16125 + C16124) * C561 + (C16423 + C16422) * C568 +
            (C16425 + C16424) * C48402) *
               C15915 +
           ((C16126 + C16127) * C566 -
            ((C16128 + C16129) * C559 + (C16130 + C16131) * C565) +
            (C16132 + C16133) * C560 - (C16134 + C16135) * C567 -
            (C16136 + C16137) * C561 +
            (C15917 * C276 + C15913 * C294 + C15918 * C277 + C48385 * C296) *
                C568 +
            (C15917 * C295 + C15913 * C306 + C15918 * C297 + C48385 * C307) *
                C48402) *
               C48416) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C47151 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48352 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C47132 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C15915 +
           ((C16114 + C16115) * C47151 + (C16116 + C16117) * C48352 -
            (C16118 + C16119) * C47132 - (C16120 + C16121) * C48054) *
               C48416) *
              C48301 * C48097 * C1301 +
          (((C16119 + C16118) * C47132 -
            ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
            (C16121 + C16120) * C48054) *
               C15915 +
           ((C16126 + C16127) * C47132 -
            ((C16128 + C16129) * C48352 + (C16130 + C16131) * C47151) +
            (C16132 + C16133) * C48054) *
               C48416) *
              C48301 * C48097 * C1302 +
          (((C16131 + C16130) * C47151 + (C16129 + C16128) * C48352 -
            (C16127 + C16126) * C47132 - (C16133 + C16132) * C48054) *
               C15915 +
           ((C17030 + C17031) * C47151 + (C17032 + C17033) * C48352 -
            (C17358 + C17359) * C47132 - (C17360 + C17361) * C48054) *
               C48416) *
              C48301 * C48097 * C1303 +
          (((C17359 + C17358) * C47132 -
            ((C17033 + C17032) * C48352 + (C17031 + C17030) * C47151) +
            (C17361 + C17360) * C48054) *
               C15915 +
           ((C15917 * C1035 + C15913 * C1044 + C15918 * C1036 +
             C48385 * C1045) *
                C47132 -
            ((C17034 + C17035) * C48352 + (C17036 + C17037) * C47151) +
            (C15917 * C1047 + C15913 * C1053 + C15918 * C1048 +
             C48385 * C1054) *
                C48054) *
               C48416) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C265 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C259 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C266 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C260 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C267 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C48392) *
                C15915 +
            ((C16114 + C16115) * C265 + (C16116 + C16117) * C259 -
             (C16118 + C16119) * C266 - (C16120 + C16121) * C260 +
             (C16122 + C16123) * C267 + (C16124 + C16125) * C48392) *
                C48416) *
               C48301 * C48367 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C266 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C259 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C265) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C260 -
             (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                 C267 -
             (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                 C48392) *
                C15915 +
            ((C16774 + C16775) * C266 -
             ((C16776 + C16777) * C259 + (C16778 + C16779) * C265) +
             (C16780 + C16781) * C260 - (C16782 + C16783) * C267 -
             (C16784 + C16785) * C48392) *
                C48416) *
               C48301 * C48184) *
              C48366 +
          ((((C16119 + C16118) * C266 -
             ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
             (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
             (C16125 + C16124) * C48392) *
                C15915 +
            ((C16126 + C16127) * C266 -
             ((C16128 + C16129) * C259 + (C16130 + C16131) * C265) +
             (C16132 + C16133) * C260 - (C16134 + C16135) * C267 -
             (C16136 + C16137) * C48392) *
                C48416) *
               C48301 * C48367 +
           (((C16779 + C16778) * C265 + (C16777 + C16776) * C259 -
             (C16775 + C16774) * C266 - (C16781 + C16780) * C260 +
             (C16783 + C16782) * C267 + (C16785 + C16784) * C48392) *
                C15915 +
            ((C15917 * C1170 + C15913 * C1185 + C15918 * C1169 +
              C48385 * C1184) *
                 C265 +
             (C15917 * C1182 + C15913 * C1197 + C15918 * C1181 +
              C48385 * C1196) *
                 C259 -
             (C15918 * C1168 + C48385 * C1183 + C15917 * C1169 +
              C15913 * C1184) *
                 C266 -
             (C15918 * C1180 + C48385 * C1195 + C15917 * C1181 +
              C15913 * C1196) *
                 C260 +
             (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
              C48385 * C1458) *
                 C267 +
             (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
              C48385 * C1460) *
                 C48392) *
                C48416) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C48367 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C48184) *
              C1301 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C48184 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C48367) *
              C1302 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
            ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
               C48301 * C48367 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48416 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C15915) *
               C48301 * C48184) *
              C1303 +
          ((((C17709 + C17708) * C1030 + (C17707 + C17706) * C48044) * C15915 +
            ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
              C48385 * C6404) *
                 C1030 +
             (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
              C48385 * C6408) *
                 C48044) *
                C48416) *
               C48301 * C48184 -
           (((C17034 + C17035) * C48044 + (C17036 + C17037) * C1030) * C48416 +
            ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C15915) *
               C48301 * C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C265 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C259 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C266 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C260 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C267 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C265 + (C16116 + C16117) * C259 -
            (C16118 + C16119) * C266 - (C16120 + C16121) * C260 +
            (C16122 + C16123) * C267 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C48097 * C48437 +
          (((C16119 + C16118) * C266 -
            ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
            (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
            (C16125 + C16124) * C48392) *
               C15915 +
           ((C16126 + C16127) * C266 -
            ((C16128 + C16129) * C259 + (C16130 + C16131) * C265) +
            (C16132 + C16133) * C260 - (C16134 + C16135) * C267 -
            (C16136 + C16137) * C48392) *
               C48416) *
              C48301 * C48097 * C48425 +
          (((C16131 + C16130) * C265 + (C16129 + C16128) * C259 -
            (C16127 + C16126) * C266 - (C16133 + C16132) * C260 +
            (C16135 + C16134) * C267 + (C16137 + C16136) * C48392) *
               C15915 +
           ((C15917 * C1033 + C15913 * C1042 + C15918 * C1032 +
             C48385 * C1041) *
                C265 +
            (C15917 * C1039 + C15913 * C1051 + C15918 * C1038 +
             C48385 * C1050) *
                C259 -
            (C15918 * C1031 + C48385 * C1040 + C15917 * C1032 +
             C15913 * C1041) *
                C266 -
            (C15918 * C1037 + C48385 * C1049 + C15917 * C1038 +
             C15913 * C1050) *
                C260 +
            (C15917 * C1031 + C15913 * C1040 + C15918 * C1307 +
             C48385 * C1308) *
                C267 +
            (C15917 * C1037 + C15913 * C1049 + C15918 * C1309 +
             C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
               C116 +
           (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
               C104 -
           (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
               C117 -
           (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
               C105 +
           (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
               C118 +
           (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
               C106 -
           (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
               C119 -
           (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
               C107 +
           (C15917 * C125 + C15913 * C136 + C15918 * C126 + C48385 * C138) *
               C120 +
           (C15917 * C137 + C15913 * C146 + C15918 * C139 + C48385 * C147) *
               C108) *
              C15915 +
          ((C15917 * C271 + C15913 * C284 + C15918 * C268 + C48385 * C278) *
               C116 +
           (C15917 * C283 + C15913 * C300 + C15918 * C282 + C48385 * C299) *
               C104 -
           (C15918 * C269 + C48385 * C279 + C15917 * C268 + C15913 * C278) *
               C117 -
           (C15918 * C281 + C48385 * C298 + C15917 * C282 + C15913 * C299) *
               C105 +
           (C15917 * C269 + C15913 * C279 + C15918 * C270 + C48385 * C280) *
               C118 +
           (C15917 * C281 + C15913 * C298 + C15918 * C285 + C48385 * C301) *
               C106 -
           (C15918 * C272 + C48385 * C286 + C15917 * C270 + C15913 * C280) *
               C119 -
           (C15918 * C287 + C48385 * C302 + C15917 * C285 + C15913 * C301) *
               C107 +
           (C15917 * C272 + C15913 * C286 + C15918 * C569 + C48385 * C570) *
               C120 +
           (C15917 * C287 + C15913 * C302 + C15918 * C571 + C48385 * C572) *
               C108) *
              C48416) *
         C48301 * C48097 * C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C265 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C259 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C266 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C260 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C267 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C265 + (C16116 + C16117) * C259 -
            (C16118 + C16119) * C266 - (C16120 + C16121) * C260 +
            (C16122 + C16123) * C267 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C48438 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C266 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C259 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C265) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C260 -
            (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                C267 -
            (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                C48392) *
               C15915 +
           ((C15917 * C824 + C15913 * C829 + C15918 * C825 + C48385 * C830) *
                C266 -
            ((C15918 * C832 + C48385 * C839 + C15917 * C831 + C15913 * C838) *
                 C259 +
             (C15918 * C824 + C48385 * C829 + C15917 * C823 + C15913 * C828) *
                 C265) +
            (C15917 * C832 + C15913 * C839 + C15918 * C833 + C48385 * C840) *
                C260 -
            (C15918 * C826 + C48385 * C834 + C15917 * C825 + C15913 * C830) *
                C267 -
            (C15918 * C835 + C48385 * C841 + C15917 * C833 + C15913 * C840) *
                C48392) *
               C48416) *
              C48301 * C48427 +
          (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                C265 +
            (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                C259 -
            (C15918 * C428 + C48385 * C443 + C15917 * C427 + C15913 * C442) *
                C266 -
            (C15918 * C446 + C48385 * C458 + C15917 * C445 + C15913 * C457) *
                C260 +
            (C15917 * C428 + C15913 * C443 + C15918 * C429 + C48385 * C447) *
                C267 +
            (C15917 * C446 + C15913 * C458 + C15918 * C448 + C48385 * C459) *
                C48392) *
               C15915 +
           ((C15917 * C1167 + C15913 * C1179 + C15918 * C1166 +
             C48385 * C1178) *
                C265 +
            (C15917 * C1176 + C15913 * C1194 + C15918 * C1175 +
             C48385 * C1193) *
                C259 -
            (C15918 * C1165 + C48385 * C1177 + C15917 * C1166 +
             C15913 * C1178) *
                C266 -
            (C15918 * C1174 + C48385 * C1192 + C15917 * C1175 +
             C15913 * C1193) *
                C260 +
            (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
             C48385 * C2032) *
                C267 +
            (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
             C48385 * C2034) *
                C48392) *
               C48416) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C959 + (C16116 + C16117) * C48434 -
            (C16118 + C16119) * C960 - (C16120 + C16121) * C48421 +
            (C16122 + C16123) * C961 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C48097 * C956 +
          (((C16119 + C16118) * C960 -
            ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
            (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
            (C16125 + C16124) * C48392) *
               C15915 +
           ((C16126 + C16127) * C960 -
            ((C16128 + C16129) * C48434 + (C16130 + C16131) * C959) +
            (C16132 + C16133) * C48421 - (C16134 + C16135) * C961 -
            (C16136 + C16137) * C48392) *
               C48416) *
              C48301 * C48097 * C957 +
          (((C16131 + C16130) * C959 + (C16129 + C16128) * C48434 -
            (C16127 + C16126) * C960 - (C16133 + C16132) * C48421 +
            (C16135 + C16134) * C961 + (C16137 + C16136) * C48392) *
               C15915 +
           ((C15917 * C1033 + C15913 * C1042 + C15918 * C1032 +
             C48385 * C1041) *
                C959 +
            (C15917 * C1039 + C15913 * C1051 + C15918 * C1038 +
             C48385 * C1050) *
                C48434 -
            (C15918 * C1031 + C48385 * C1040 + C15917 * C1032 +
             C15913 * C1041) *
                C960 -
            (C15918 * C1037 + C48385 * C1049 + C15917 * C1038 +
             C15913 * C1050) *
                C48421 +
            (C15917 * C1031 + C15913 * C1040 + C15918 * C1307 +
             C48385 * C1308) *
                C961 +
            (C15917 * C1037 + C15913 * C1049 + C15918 * C1309 +
             C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C1030 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48044) *
               C15915 +
           ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
              C48301 * C48097 * C1025 -
          (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
           ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
              C48301 * C48097 * C1026 +
          (((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
           ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
              C48301 * C48097 * C1027 -
          (((C17034 + C17035) * C48044 + (C17036 + C17037) * C1030) * C48416 +
           ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C15915) *
              C48301 * C48097 * C1028 +
          (((C17037 + C17036) * C1030 + (C17035 + C17034) * C48044) * C15915 +
           ((C15917 * C5701 + C15913 * C5703 + C15918 * C5702 +
             C48385 * C5704) *
                C1030 +
            (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 +
             C48385 * C5708) *
                C48044) *
               C48416) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C15915 +
            ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
               C48301 * C48438 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48416 +
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C48044 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C1030) *
                C15915) *
               C48301 * C48427 +
           (((C15917 * C426 + C15913 * C441 + C15918 * C427 + C48385 * C442) *
                 C1030 +
             (C15917 * C444 + C15913 * C456 + C15918 * C445 + C48385 * C457) *
                 C48044) *
                C15915 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48416) *
               C48301 * C48401) *
              C956 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C15915 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48416) *
               C48301 * C48427 -
           (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
               C48301 * C48438 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48416 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C15915) *
               C48301 * C48401) *
              C957 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
            ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
               C48301 * C48438 -
           (((C15918 * C1566 + C48385 * C1569 + C15917 * C1565 +
              C15913 * C1568) *
                 C48044 +
             (C15918 * C1560 + C48385 * C1563 + C15917 * C1559 +
              C15913 * C1562) *
                 C1030) *
                C48416 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C15915) *
               C48301 * C48427 +
           (((C17219 + C17218) * C1030 + (C17217 + C17216) * C48044) * C15915 +
            ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
              C48385 * C5882) *
                 C1030 +
             (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
              C48385 * C5886) *
                 C48044) *
                C48416) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C565 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C559 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C566 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C560 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C567 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C561 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C568 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C15915 +
           ((C16114 + C16115) * C565 + (C16116 + C16117) * C559 -
            (C16118 + C16119) * C566 - (C16120 + C16121) * C560 +
            (C16122 + C16123) * C567 + (C16124 + C16125) * C561 -
            (C16422 + C16423) * C568 - (C16424 + C16425) * C48402) *
               C48416) *
              C48301 * C48367 +
          (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                C566 -
            ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                 C559 +
             (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                 C565) +
            (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                C560 -
            (C15918 * C423 + C48385 * C433 + C15917 * C422 + C15913 * C432) *
                C567 -
            (C15918 * C438 + C48385 * C454 + C15917 * C434 + C15913 * C451) *
                C561 +
            (C15917 * C423 + C15913 * C433 + C15918 * C425 + C48385 * C439) *
                C568 +
            (C15917 * C438 + C15913 * C454 + C15918 * C440 + C48385 * C455) *
                C48402) *
               C15915 +
           ((C15917 * C824 + C15913 * C829 + C15918 * C825 + C48385 * C830) *
                C566 -
            ((C15918 * C832 + C48385 * C839 + C15917 * C831 + C15913 * C838) *
                 C559 +
             (C15918 * C824 + C48385 * C829 + C15917 * C823 + C15913 * C828) *
                 C565) +
            (C15917 * C832 + C15913 * C839 + C15918 * C833 + C48385 * C840) *
                C560 -
            (C15918 * C826 + C48385 * C834 + C15917 * C825 + C15913 * C830) *
                C567 -
            (C15918 * C835 + C48385 * C841 + C15917 * C833 + C15913 * C840) *
                C561 +
            (C15917 * C826 + C15913 * C834 + C15918 * C827 + C48385 * C836) *
                C568 +
            (C15917 * C835 + C15913 * C841 + C15918 * C837 + C48385 * C842) *
                C48402) *
               C48416) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47151 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48352 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47132 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C15915 +
            ((C16114 + C16115) * C47151 + (C16116 + C16117) * C48352 -
             (C16118 + C16119) * C47132 - (C16120 + C16121) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C15917 * C421 + C15913 * C431 + C15918 * C422 + C48385 * C432) *
                 C47132 -
             ((C15918 * C435 + C48385 * C452 + C15917 * C436 + C15913 * C453) *
                  C48352 +
              (C15918 * C421 + C48385 * C431 + C15917 * C424 + C15913 * C437) *
                  C47151) +
             (C15917 * C435 + C15913 * C452 + C15918 * C434 + C48385 * C451) *
                 C48054) *
                C15915 +
            ((C16774 + C16775) * C47132 -
             ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
             (C16780 + C16781) * C48054) *
                C48416) *
               C48301 * C48184) *
              C956 +
          ((((C16119 + C16118) * C47132 -
             ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
             (C16121 + C16120) * C48054) *
                C15915 +
            ((C16126 + C16127) * C47132 -
             ((C16128 + C16129) * C48352 + (C16130 + C16131) * C47151) +
             (C16132 + C16133) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C16779 + C16778) * C47151 + (C16777 + C16776) * C48352 -
             (C16775 + C16774) * C47132 - (C16781 + C16780) * C48054) *
                C15915 +
            ((C17212 + C17213) * C47151 + (C17214 + C17215) * C48352 -
             (C17564 + C17565) * C47132 - (C17566 + C17567) * C48054) *
                C48416) *
               C48301 * C48184) *
              C957 +
          ((((C16131 + C16130) * C47151 + (C16129 + C16128) * C48352 -
             (C16127 + C16126) * C47132 - (C16133 + C16132) * C48054) *
                C15915 +
            ((C17030 + C17031) * C47151 + (C17032 + C17033) * C48352 -
             (C17358 + C17359) * C47132 - (C17360 + C17361) * C48054) *
                C48416) *
               C48301 * C48367 +
           (((C17565 + C17564) * C47132 -
             ((C17215 + C17214) * C48352 + (C17213 + C17212) * C47151) +
             (C17567 + C17566) * C48054) *
                C15915 +
            ((C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48385 * C1564) *
                 C47132 -
             ((C15918 * C1566 + C48385 * C1569 + C15917 * C1565 +
               C15913 * C1568) *
                  C48352 +
              (C15918 * C1560 + C48385 * C1563 + C15917 * C1559 +
               C15913 * C1562) *
                  C47151) +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48385 * C1570) *
                 C48054) *
                C48416) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
               C116 +
           (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
               C104 -
           (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
               C117 -
           (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
               C105 +
           (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
               C118 +
           (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
               C106 -
           (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
               C119 -
           (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
               C107 +
           (C15917 * C125 + C15913 * C136 + C15918 * C126 + C48385 * C138) *
               C120 +
           (C15917 * C137 + C15913 * C146 + C15918 * C139 + C48385 * C147) *
               C108) *
              C15915 +
          ((C15917 * C271 + C15913 * C284 + C15918 * C268 + C48385 * C278) *
               C116 +
           (C15917 * C283 + C15913 * C300 + C15918 * C282 + C48385 * C299) *
               C104 -
           (C15918 * C269 + C48385 * C279 + C15917 * C268 + C15913 * C278) *
               C117 -
           (C15918 * C281 + C48385 * C298 + C15917 * C282 + C15913 * C299) *
               C105 +
           (C15917 * C269 + C15913 * C279 + C15918 * C270 + C48385 * C280) *
               C118 +
           (C15917 * C281 + C15913 * C298 + C15918 * C285 + C48385 * C301) *
               C106 -
           (C15918 * C272 + C48385 * C286 + C15917 * C270 + C15913 * C280) *
               C119 -
           (C15918 * C287 + C48385 * C302 + C15917 * C285 + C15913 * C301) *
               C107 +
           (C15917 * C272 + C15913 * C286 + C15918 * C569 + C48385 * C570) *
               C120 +
           (C15917 * C287 + C15913 * C302 + C15918 * C571 + C48385 * C572) *
               C108) *
              C48416) *
         C48301 * C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C265 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C259 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C266 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C260 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C267 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C265 + (C16116 + C16117) * C259 -
            (C16118 + C16119) * C266 - (C16120 + C16121) * C260 +
            (C16122 + C16123) * C267 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C48097 * C48437 +
          (((C16119 + C16118) * C266 -
            ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
            (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
            (C16125 + C16124) * C48392) *
               C15915 +
           ((C16126 + C16127) * C266 -
            ((C16128 + C16129) * C259 + (C16130 + C16131) * C265) +
            (C16132 + C16133) * C260 - (C16134 + C16135) * C267 -
            (C16136 + C16137) * C48392) *
               C48416) *
              C48301 * C48097 * C48425 +
          (((C16131 + C16130) * C265 + (C16129 + C16128) * C259 -
            (C16127 + C16126) * C266 - (C16133 + C16132) * C260 +
            (C16135 + C16134) * C267 + (C16137 + C16136) * C48392) *
               C15915 +
           ((C15917 * C1033 + C15913 * C1042 + C15918 * C1032 +
             C48385 * C1041) *
                C265 +
            (C15917 * C1039 + C15913 * C1051 + C15918 * C1038 +
             C48385 * C1050) *
                C259 -
            (C15918 * C1031 + C48385 * C1040 + C15917 * C1032 +
             C15913 * C1041) *
                C266 -
            (C15918 * C1037 + C48385 * C1049 + C15917 * C1038 +
             C15913 * C1050) *
                C260 +
            (C15917 * C1031 + C15913 * C1040 + C15918 * C1307 +
             C48385 * C1308) *
                C267 +
            (C15917 * C1037 + C15913 * C1049 + C15918 * C1309 +
             C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C15915 +
           ((C16114 + C16115) * C959 + (C16116 + C16117) * C48434 -
            (C16118 + C16119) * C960 - (C16120 + C16121) * C48421 +
            (C16122 + C16123) * C961 + (C16124 + C16125) * C48392) *
               C48416) *
              C48301 * C48097 * C956 +
          (((C16119 + C16118) * C960 -
            ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
            (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
            (C16125 + C16124) * C48392) *
               C15915 +
           ((C16126 + C16127) * C960 -
            ((C16128 + C16129) * C48434 + (C16130 + C16131) * C959) +
            (C16132 + C16133) * C48421 - (C16134 + C16135) * C961 -
            (C16136 + C16137) * C48392) *
               C48416) *
              C48301 * C48097 * C957 +
          (((C16131 + C16130) * C959 + (C16129 + C16128) * C48434 -
            (C16127 + C16126) * C960 - (C16133 + C16132) * C48421 +
            (C16135 + C16134) * C961 + (C16137 + C16136) * C48392) *
               C15915 +
           ((C15917 * C1033 + C15913 * C1042 + C15918 * C1032 +
             C48385 * C1041) *
                C959 +
            (C15917 * C1039 + C15913 * C1051 + C15918 * C1038 +
             C48385 * C1050) *
                C48434 -
            (C15918 * C1031 + C48385 * C1040 + C15917 * C1032 +
             C15913 * C1041) *
                C960 -
            (C15918 * C1037 + C48385 * C1049 + C15917 * C1038 +
             C15913 * C1050) *
                C48421 +
            (C15917 * C1031 + C15913 * C1040 + C15918 * C1307 +
             C48385 * C1308) *
                C961 +
            (C15917 * C1037 + C15913 * C1049 + C15918 * C1309 +
             C48385 * C1310) *
                C48392) *
               C48416) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C1030 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48044) *
               C15915 +
           ((C16114 + C16115) * C1030 + (C16116 + C16117) * C48044) * C48416) *
              C48301 * C48097 * C1025 -
          (((C16128 + C16129) * C48044 + (C16130 + C16131) * C1030) * C48416 +
           ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C15915) *
              C48301 * C48097 * C1026 +
          (((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C15915 +
           ((C17030 + C17031) * C1030 + (C17032 + C17033) * C48044) * C48416) *
              C48301 * C48097 * C1027 -
          (((C17034 + C17035) * C48044 + (C17036 + C17037) * C1030) * C48416 +
           ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C15915) *
              C48301 * C48097 * C1028 +
          (((C17037 + C17036) * C1030 + (C17035 + C17034) * C48044) * C15915 +
           ((C15917 * C5701 + C15913 * C5703 + C15918 * C5702 +
             C48385 * C5704) *
                C1030 +
            (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 +
             C48385 * C5708) *
                C48044) *
               C48416) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C47161 +
            (C21591 * C131 + C48030 * C142) * C48049 -
            (C21591 * C122 + C48030 * C129) * C47157 -
            (C21591 * C132 + C48030 * C143) * C48057 +
            (C21591 * C123 + C48030 * C130) * C47167 +
            (C21591 * C133 + C48030 * C144) * C2723) *
               C21588 +
           (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C21589 +
           C24284 * C21590) *
              C48301 * C48097 * C48140 +
          ((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C21588 +
           (C24270 - (C24269 + C24268) + C24271 - C24272 - C24273) * C21589 +
           (C24274 - (C24275 + C24276) + C24277 - C24278 - C24279) * C21590) *
              C48301 * C48097 * C48147 +
          (C24284 * C21588 +
           (C24276 + C24275 - C24274 - C24277 + C24278 + C24279) * C21589 +
           (C22523 * C47161 + C22524 * C48049 - C22802 * C47157 -
            C22803 * C48057 + (C21591 * C1036 + C48030 * C1045) * C47167 +
            (C21591 * C1048 + C48030 * C1054) * C2723) *
               C21590) *
              C48301 * C48097 * C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C21588 +
            (C23968 + C23969 - C23970 - C23971) * C21589 + C23988 * C21590) *
               C48301 * C48367 +
           (((C21591 * C421 + C48030 * C431) * C2464 -
             ((C21591 * C436 + C48030 * C453) * C2457 +
              (C21591 * C424 + C48030 * C437) * C2463) +
             (C21591 * C435 + C48030 * C452) * C48054) *
                C21588 +
            (C24136 - (C24137 + C24138) + C24139) * C21589 + C24595 * C21590) *
               C48301 * C48184) *
              C48140 +
          (((C23970 - (C23969 + C23968) + C23971) * C21588 +
            (C23974 - (C23973 + C23972) + C23975) * C21589 + C23989 * C21590) *
               C48301 * C48367 +
           ((C24138 + C24137 - C24136 - C24139) * C21588 +
            (C24142 + C24141 - C24140 - C24143) * C21589 +
            (C24590 + C24591 - C24592 - C24593) * C21590) *
               C48301 * C48184) *
              C48147 +
          ((C23988 * C21588 + (C23978 + C23977 - C23976 - C23979) * C21589 +
            (C23980 + C23981 - C23982 - C23983) * C21590) *
               C48301 * C48367 +
           (C24595 * C21588 + (C24592 - (C24591 + C24590) + C24593) * C21589 +
            ((C21591 * C6402 + C48030 * C6404) * C2464 -
             (C23084 * C2457 + C23085 * C2463) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C21590) *
               C48301 * C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C2463 +
            (C21591 * C131 + C48030 * C142) * C2457 -
            (C21591 * C122 + C48030 * C129) * C2464 -
            (C21591 * C132 + C48030 * C143) * C48054) *
               C21588 +
           (C23968 + C23969 - C23970 - C23971) * C21589 + C23988 * C21590) *
              C48301 * C48097 * C48444 +
          ((C23970 - (C23969 + C23968) + C23971) * C21588 +
           (C23974 - (C23973 + C23972) + C23975) * C21589 + C23989 * C21590) *
              C48301 * C48097 * C48440 +
          (C23988 * C21588 + (C23978 + C23977 - C23976 - C23979) * C21589 +
           (C23980 + C23981 - C23982 - C23983) * C21590) *
              C48301 * C48097 * C48430 +
          (C23989 * C21588 + (C23982 - (C23981 + C23980) + C23983) * C21589 +
           ((C21591 * C5702 + C48030 * C5704) * C2464 -
            (C22525 * C2457 + C22526 * C2463) +
            (C21591 * C5706 + C48030 * C5708) * C48054) *
               C21590) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C2355 +
            (C21591 * C131 + C48030 * C142) * C48443 -
            (C21591 * C122 + C48030 * C129) * C2356 -
            (C21591 * C132 + C48030 * C143) * C48436 +
            (C21591 * C123 + C48030 * C130) * C2357 +
            (C21591 * C133 + C48030 * C144) * C48423 -
            (C21591 * C124 + C48030 * C134) * C2358 -
            (C21591 * C135 + C48030 * C145) * C48402) *
               C21588 +
           (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
            C23861) *
               C21589 +
           (C23862 + C23863 - C23864 - C23865 + C23866 + C23867 - C23868 -
            C23869) *
               C21590) *
              C48301 * C48097 * C2353 +
          ((C23856 - (C23855 + C23854) + C23857 - C23858 - C23859 + C23860 +
            C23861) *
               C21588 +
           (C23864 - (C23863 + C23862) + C23865 - C23866 - C23867 + C23868 +
            C23869) *
               C21589 +
           (C21751 * C2356 - (C21752 * C48443 + C21753 * C2355) +
            C21754 * C48436 - C21755 * C2357 - C21756 * C48423 +
            (C21591 * C1307 + C48030 * C1308) * C2358 +
            (C21591 * C1309 + C48030 * C1310) * C48402) *
               C21590) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C21588 +
            (C23968 + C23969 - C23970 - C23971) * C21589 + C23988 * C21590) *
               C48301 * C48438 +
           (((C21591 * C421 + C48030 * C431) * C2464 -
             ((C21591 * C436 + C48030 * C453) * C2457 +
              (C21591 * C424 + C48030 * C437) * C2463) +
             (C21591 * C435 + C48030 * C452) * C48054) *
                C21588 +
            (C24136 - (C24137 + C24138) + C24139) * C21589 +
            (C24140 - (C24141 + C24142) + C24143) * C21590) *
               C48301 * C48427 +
           (((C21591 * C426 + C48030 * C441) * C2463 +
             (C21591 * C444 + C48030 * C456) * C2457 -
             (C21591 * C427 + C48030 * C442) * C2464 -
             (C21591 * C445 + C48030 * C457) * C48054) *
                C21588 +
            (C24144 + C24145 - C24146 - C24147) * C21589 +
            (C24148 + C24149 - C24150 - C24151) * C21590) *
               C48301 * C48401) *
              C2353 +
          (((C23970 - (C23969 + C23968) + C23971) * C21588 +
            (C23974 - (C23973 + C23972) + C23975) * C21589 + C23989 * C21590) *
               C48301 * C48438 +
           ((C24138 + C24137 - C24136 - C24139) * C21588 +
            (C24142 + C24141 - C24140 - C24143) * C21589 +
            (C22671 * C2463 + C22672 * C2457 - C22971 * C2464 -
             C22972 * C48054) *
                C21590) *
               C48301 * C48427 +
           ((C24146 - (C24145 + C24144) + C24147) * C21588 +
            (C24150 - (C24149 + C24148) + C24151) * C21589 +
            ((C21591 * C5880 + C48030 * C5882) * C2464 -
             (C22673 * C2457 + C22674 * C2463) +
             (C21591 * C5884 + C48030 * C5886) * C48054) *
                C21590) *
               C48301 * C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47161 +
             (C21591 * C131 + C48030 * C142) * C48049 -
             (C21591 * C122 + C48030 * C129) * C47157 -
             (C21591 * C132 + C48030 * C143) * C48057 +
             (C21591 * C123 + C48030 * C130) * C47167 +
             (C21591 * C133 + C48030 * C144) * C2723) *
                C21588 +
            (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C21589 +
            C24284 * C21590) *
               C48301 * C48367 +
           (((C21591 * C421 + C48030 * C431) * C47157 -
             ((C21591 * C436 + C48030 * C453) * C48049 +
              (C21591 * C424 + C48030 * C437) * C47161) +
             (C21591 * C435 + C48030 * C452) * C48057 -
             (C21591 * C422 + C48030 * C432) * C47167 -
             (C21591 * C434 + C48030 * C451) * C2723) *
                C21588 +
            (C24431 - (C24432 + C24433) + C24434 - C24435 - C24436) * C21589 +
            (C24437 - (C24438 + C24439) + C24440 - C24441 - C24442) * C21590) *
               C48301 * C48184) *
              C2353 +
          (((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C21588 +
            (C24270 - (C24269 + C24268) + C24271 - C24272 - C24273) * C21589 +
            (C24274 - (C24275 + C24276) + C24277 - C24278 - C24279) * C21590) *
               C48301 * C48367 +
           ((C24433 + C24432 - C24431 - C24434 + C24435 + C24436) * C21588 +
            (C24439 + C24438 - C24437 - C24440 + C24441 + C24442) * C21589 +
            (C22671 * C47161 + C22672 * C48049 - C22971 * C47157 -
             C22972 * C48057 + (C21591 * C1561 + C48030 * C1564) * C47167 +
             (C21591 * C1567 + C48030 * C1570) * C2723) *
                C21590) *
               C48301 * C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C2355 +
            (C21591 * C131 + C48030 * C142) * C48443 -
            (C21591 * C122 + C48030 * C129) * C2356 -
            (C21591 * C132 + C48030 * C143) * C48436 +
            (C21591 * C123 + C48030 * C130) * C2357 +
            (C21591 * C133 + C48030 * C144) * C48423 -
            (C21591 * C124 + C48030 * C134) * C2358 -
            (C21591 * C135 + C48030 * C145) * C48402) *
               C21588 +
           (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
            C23861) *
               C21589 +
           (C23862 + C23863 - C23864 - C23865 + C23866 + C23867 - C23868 -
            C23869) *
               C21590) *
              C48301 * C48097 * C2353 +
          ((C23856 - (C23855 + C23854) + C23857 - C23858 - C23859 + C23860 +
            C23861) *
               C21588 +
           (C23864 - (C23863 + C23862) + C23865 - C23866 - C23867 + C23868 +
            C23869) *
               C21589 +
           (C21751 * C2356 - (C21752 * C48443 + C21753 * C2355) +
            C21754 * C48436 - C21755 * C2357 - C21756 * C48423 +
            (C21591 * C1307 + C48030 * C1308) * C2358 +
            (C21591 * C1309 + C48030 * C1310) * C48402) *
               C21590) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C2463 +
            (C21591 * C131 + C48030 * C142) * C2457 -
            (C21591 * C122 + C48030 * C129) * C2464 -
            (C21591 * C132 + C48030 * C143) * C48054) *
               C21588 +
           (C23968 + C23969 - C23970 - C23971) * C21589 + C23988 * C21590) *
              C48301 * C48097 * C48444 +
          ((C23970 - (C23969 + C23968) + C23971) * C21588 +
           (C23974 - (C23973 + C23972) + C23975) * C21589 + C23989 * C21590) *
              C48301 * C48097 * C48440 +
          (C23988 * C21588 + (C23978 + C23977 - C23976 - C23979) * C21589 +
           (C23980 + C23981 - C23982 - C23983) * C21590) *
              C48301 * C48097 * C48430 +
          (C23989 * C21588 + (C23982 - (C23981 + C23980) + C23983) * C21589 +
           ((C21591 * C5702 + C48030 * C5704) * C2464 -
            (C22525 * C2457 + C22526 * C2463) +
            (C21591 * C5706 + C48030 * C5708) * C48054) *
               C21590) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C21588 +
            (C22782 + C22783 - C22784 - C22785) * C21589 + C22808 * C21590) *
               C48301 * C3120 +
           (((C21591 * C421 + C48030 * C431) * C47132 -
             ((C21591 * C436 + C48030 * C453) * C48352 +
              (C21591 * C424 + C48030 * C437) * C47151) +
             (C21591 * C435 + C48030 * C452) * C48054) *
                C21588 +
            (C22956 - (C22957 + C22958) + C22959) * C21589 + C22976 * C21590) *
               C48301 * C48184) *
              C48140 +
          (((C22784 - (C22783 + C22782) + C22785) * C21588 +
            (C22788 - (C22787 + C22786) + C22789) * C21589 + C22809 * C21590) *
               C48301 * C3120 +
           ((C22958 + C22957 - C22956 - C22959) * C21588 +
            (C22962 + C22961 - C22960 - C22963) * C21589 +
            (C22964 + C22965 - C22974 - C22975) * C21590) *
               C48301 * C48184) *
              C48147 +
          ((C22808 * C21588 + (C22792 + C22791 - C22790 - C22793) * C21589 +
            (C22794 + C22795 - C22806 - C22807) * C21590) *
               C48301 * C3120 +
           (C22976 * C21588 + (C22974 - (C22965 + C22964) + C22975) * C21589 +
            ((C21591 * C6402 + C48030 * C6404) * C47132 -
             (C23084 * C48352 + C23085 * C47151) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C21590) *
               C48301 * C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C48180 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C48187 +
           (((C21591 * C426 + C48030 * C441) * C1030 +
             (C21591 * C444 + C48030 * C456) * C48044) *
                C21588 +
            (C22675 + C22676) * C21589 + C22683 * C21590) *
               C48301 * C3628) *
              C48140 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            C23079 * C21590) *
               C48301 * C48187 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C48180 -
           ((C22681 + C22682) * C21590 + (C22678 + C22677) * C21589 +
            (C22676 + C22675) * C21588) *
               C48301 * C3628) *
              C48147 +
          ((C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
               C48301 * C48180 -
           ((C23086 + C23087) * C21590 + (C22680 + C22679) * C21589 +
            C22666 * C21588) *
               C48301 * C48187 +
           (C22683 * C21588 + (C22682 + C22681) * C21589 +
            ((C21591 * C22641 + C48030 * C22642) * C1030 +
             (C21591 * C22643 + C48030 * C22644) * C48044) *
                C21590) *
               C48301 * C3628) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C3120 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C48184) *
              C48444 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            C23079 * C21590) *
               C48301 * C48184 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C3120) *
              C48440 +
          ((C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
               C48301 * C3120 -
           ((C23086 + C23087) * C21590 + (C22680 + C22679) * C21589 +
            C22666 * C21588) *
               C48301 * C48184) *
              C48430 +
          ((C23079 * C21588 + (C23087 + C23086) * C21589 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C21590) *
               C48301 * C48184 -
           ((C22529 + C22530) * C21590 + (C22528 + C22527) * C21589 +
            C22522 * C21588) *
               C48301 * C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C21588 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C21589 +
            C22440 * C21590) *
               C48301 * C3120 +
           (((C21591 * C421 + C48030 * C431) * C960 -
             ((C21591 * C436 + C48030 * C453) * C48434 +
              (C21591 * C424 + C48030 * C437) * C959) +
             (C21591 * C435 + C48030 * C452) * C48421 -
             (C21591 * C422 + C48030 * C432) * C961 -
             (C21591 * C434 + C48030 * C451) * C48392) *
                C21588 +
            (C25486 - (C25487 + C25488) + C25489 - C25490 - C25491) * C21589 +
            (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C21590) *
               C48301 * C48184) *
              C2353 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C21588 +
            (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C21589 +
            (C22430 - (C22431 + C22432) + C22433 - C22434 - C22435) * C21590) *
               C48301 * C3120 +
           ((C25488 + C25487 - C25486 - C25489 + C25490 + C25491) * C21588 +
            (C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C21589 +
            (C22671 * C959 + C22672 * C48434 - C22971 * C960 - C22972 * C48421 +
             (C21591 * C1561 + C48030 * C1564) * C961 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C21590) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C48445 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C48442 +
           (((C21591 * C426 + C48030 * C441) * C1030 +
             (C21591 * C444 + C48030 * C456) * C48044) *
                C21588 +
            (C22675 + C22676) * C21589 + C22683 * C21590) *
               C48301 * C48433 -
           ((C23752 + C23753) * C21590 + (C23754 + C23755) * C21589 +
            ((C21591 * C1869 + C48030 * C1881) * C48044 +
             (C21591 * C1863 + C48030 * C1872) * C1030) *
                C21588) *
               C48301 * C48414) *
              C2353 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            C23079 * C21590) *
               C48301 * C48442 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C48445 -
           ((C22681 + C22682) * C21590 + (C22678 + C22677) * C21589 +
            (C22676 + C22675) * C21588) *
               C48301 * C48433 +
           ((C23755 + C23754) * C21588 + (C23753 + C23752) * C21589 +
            ((C21591 * C23735 + C48030 * C23736) * C1030 +
             (C21591 * C23737 + C48030 * C23738) * C48044) *
                C21590) *
               C48301 * C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C21588 +
            (C22782 + C22783 - C22784 - C22785) * C21589 + C22808 * C21590) *
               C48301 * C48180 +
           (((C21591 * C421 + C48030 * C431) * C47132 -
             ((C21591 * C436 + C48030 * C453) * C48352 +
              (C21591 * C424 + C48030 * C437) * C47151) +
             (C21591 * C435 + C48030 * C452) * C48054) *
                C21588 +
            (C22956 - (C22957 + C22958) + C22959) * C21589 + C22976 * C21590) *
               C48301 * C48187 +
           (((C21591 * C426 + C48030 * C441) * C47151 +
             (C21591 * C444 + C48030 * C456) * C48352 -
             (C21591 * C427 + C48030 * C442) * C47132 -
             (C21591 * C445 + C48030 * C457) * C48054) *
                C21588 +
            (C23520 + C23521 - C23536 - C23537) * C21589 +
            (C23526 + C23527 - C23538 - C23539) * C21590) *
               C48301 * C3628) *
              C2353 +
          (((C22784 - (C22783 + C22782) + C22785) * C21588 +
            (C22788 - (C22787 + C22786) + C22789) * C21589 + C22809 * C21590) *
               C48301 * C48180 +
           ((C22958 + C22957 - C22956 - C22959) * C21588 +
            (C22962 + C22961 - C22960 - C22963) * C21589 +
            (C22964 + C22965 - C22974 - C22975) * C21590) *
               C48301 * C48187 +
           ((C23536 - (C23521 + C23520) + C23537) * C21588 +
            (C23538 - (C23527 + C23526) + C23539) * C21589 +
            ((C21591 * C5880 + C48030 * C5882) * C47132 -
             (C22673 * C48352 + C22674 * C47151) +
             (C21591 * C5884 + C48030 * C5886) * C48054) *
                C21590) *
               C48301 * C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C21588 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C21589 +
            C22440 * C21590) *
               C48301 * C3120 +
           (((C21591 * C421 + C48030 * C431) * C960 -
             ((C21591 * C436 + C48030 * C453) * C48434 +
              (C21591 * C424 + C48030 * C437) * C959) +
             (C21591 * C435 + C48030 * C452) * C48421 -
             (C21591 * C422 + C48030 * C432) * C961 -
             (C21591 * C434 + C48030 * C451) * C48392) *
                C21588 +
            (C25486 - (C25487 + C25488) + C25489 - C25490 - C25491) * C21589 +
            (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C21590) *
               C48301 * C48184) *
              C2353 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C21588 +
            (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C21589 +
            (C22430 - (C22431 + C22432) + C22433 - C22434 - C22435) * C21590) *
               C48301 * C3120 +
           ((C25488 + C25487 - C25486 - C25489 + C25490 + C25491) * C21588 +
            (C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C21589 +
            (C22671 * C959 + C22672 * C48434 - C22971 * C960 - C22972 * C48421 +
             (C21591 * C1561 + C48030 * C1564) * C961 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C21590) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C3120 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C48184) *
              C48444 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            C23079 * C21590) *
               C48301 * C48184 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C3120) *
              C48440 +
          ((C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
               C48301 * C3120 -
           ((C23086 + C23087) * C21590 + (C22680 + C22679) * C21589 +
            C22666 * C21588) *
               C48301 * C48184) *
              C48430 +
          ((C23079 * C21588 + (C23087 + C23086) * C21589 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C21590) *
               C48301 * C48184 -
           ((C22529 + C22530) * C21590 + (C22528 + C22527) * C21589 +
            C22522 * C21588) *
               C48301 * C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C47151 +
            (C21591 * C131 + C48030 * C142) * C48352 -
            (C21591 * C122 + C48030 * C129) * C47132 -
            (C21591 * C132 + C48030 * C143) * C48054) *
               C21588 +
           (C22782 + C22783 - C22784 - C22785) * C21589 + C22808 * C21590) *
              C48301 * C48097 * C1301 +
          ((C22784 - (C22783 + C22782) + C22785) * C21588 +
           (C22788 - (C22787 + C22786) + C22789) * C21589 + C22809 * C21590) *
              C48301 * C48097 * C1302 +
          (C22808 * C21588 + (C22792 + C22791 - C22790 - C22793) * C21589 +
           (C22794 + C22795 - C22806 - C22807) * C21590) *
              C48301 * C48097 * C1303 +
          (C22809 * C21588 + (C22806 - (C22795 + C22794) + C22807) * C21589 +
           ((C21591 * C5702 + C48030 * C5704) * C47132 -
            (C22525 * C48352 + C22526 * C47151) +
            (C21591 * C5706 + C48030 * C5708) * C48054) *
               C21590) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C565 +
            (C21591 * C131 + C48030 * C142) * C559 -
            (C21591 * C122 + C48030 * C129) * C566 -
            (C21591 * C132 + C48030 * C143) * C560 +
            (C21591 * C123 + C48030 * C130) * C567 +
            (C21591 * C133 + C48030 * C144) * C561 -
            (C21591 * C124 + C48030 * C134) * C568 -
            (C21591 * C135 + C48030 * C145) * C48402) *
               C21588 +
           (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
            C22013) *
               C21589 +
           (C21998 + C21999 - C22000 - C22001 + C22002 + C22003 - C22014 -
            C22015) *
               C21590) *
              C48301 * C48097 * C48366 +
          ((C21990 - (C21989 + C21988) + C21991 - C21992 - C21993 + C22012 +
            C22013) *
               C21588 +
           (C22000 - (C21999 + C21998) + C22001 - C22002 - C22003 + C22014 +
            C22015) *
               C21589 +
           (C21751 * C566 - (C21752 * C559 + C21753 * C565) + C21754 * C560 -
            C21755 * C567 - C21756 * C561 +
            (C21591 * C1307 + C48030 * C1308) * C568 +
            (C21591 * C1309 + C48030 * C1310) * C48402) *
               C21590) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C21588 +
            (C22782 + C22783 - C22784 - C22785) * C21589 + C22808 * C21590) *
               C48301 * C1681 +
           (((C21591 * C421 + C48030 * C431) * C47132 -
             ((C21591 * C436 + C48030 * C453) * C48352 +
              (C21591 * C424 + C48030 * C437) * C47151) +
             (C21591 * C435 + C48030 * C452) * C48054) *
                C21588 +
            (C22956 - (C22957 + C22958) + C22959) * C21589 + C22976 * C21590) *
               C48301 * C1682 +
           (((C21591 * C426 + C48030 * C441) * C47151 +
             (C21591 * C444 + C48030 * C456) * C48352 -
             (C21591 * C427 + C48030 * C442) * C47132 -
             (C21591 * C445 + C48030 * C457) * C48054) *
                C21588 +
            (C23520 + C23521 - C23536 - C23537) * C21589 +
            (C23526 + C23527 - C23538 - C23539) * C21590) *
               C48301 * C48401) *
              C48366 +
          (((C22784 - (C22783 + C22782) + C22785) * C21588 +
            (C22788 - (C22787 + C22786) + C22789) * C21589 + C22809 * C21590) *
               C48301 * C1681 +
           ((C22958 + C22957 - C22956 - C22959) * C21588 +
            (C22962 + C22961 - C22960 - C22963) * C21589 +
            (C22964 + C22965 - C22974 - C22975) * C21590) *
               C48301 * C1682 +
           ((C23536 - (C23521 + C23520) + C23537) * C21588 +
            (C23538 - (C23527 + C23526) + C23539) * C21589 +
            ((C21591 * C5880 + C48030 * C5882) * C47132 -
             (C22673 * C48352 + C22674 * C47151) +
             (C21591 * C5884 + C48030 * C5886) * C48054) *
                C21590) *
               C48301 * C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C48367 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C48184) *
              C1301 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            C23079 * C21590) *
               C48301 * C48184 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C48367) *
              C1302 +
          ((C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
               C48301 * C48367 -
           ((C23086 + C23087) * C21590 + (C22680 + C22679) * C21589 +
            C22666 * C21588) *
               C48301 * C48184) *
              C1303 +
          ((C23079 * C21588 + (C23087 + C23086) * C21589 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C21590) *
               C48301 * C48184 -
           ((C22529 + C22530) * C21590 + (C22528 + C22527) * C21589 +
            C22522 * C21588) *
               C48301 * C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C21588 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C21589 +
            C21779 * C21590) *
               C48301 * C48367 +
           (((C21591 * C421 + C48030 * C431) * C266 -
             ((C21591 * C436 + C48030 * C453) * C259 +
              (C21591 * C424 + C48030 * C437) * C265) +
             (C21591 * C435 + C48030 * C452) * C260 -
             (C21591 * C422 + C48030 * C432) * C267 -
             (C21591 * C434 + C48030 * C451) * C48392) *
                C21588 +
            (C22296 - (C22297 + C22298) + C22299 - C22300 - C22301) * C21589 +
            (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C21590) *
               C48301 * C48184) *
              C48366 +
          (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C21588 +
            (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C21589 +
            (C21769 - (C21770 + C21771) + C21772 - C21773 - C21774) * C21590) *
               C48301 * C48367 +
           ((C22298 + C22297 - C22296 - C22299 + C22300 + C22301) * C21588 +
            (C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C21589 +
            ((C21591 * C1559 + C48030 * C1562) * C265 +
             (C21591 * C1565 + C48030 * C1568) * C259 -
             (C21591 * C1560 + C48030 * C1563) * C266 -
             (C21591 * C1566 + C48030 * C1569) * C260 +
             (C21591 * C1561 + C48030 * C1564) * C267 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C21590) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C2133 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C2134 +
           (((C21591 * C426 + C48030 * C441) * C1030 +
             (C21591 * C444 + C48030 * C456) * C48044) *
                C21588 +
            (C22675 + C22676) * C21589 + C22683 * C21590) *
               C48301 * C2135 -
           ((C23752 + C23753) * C21590 + (C23754 + C23755) * C21589 +
            ((C21591 * C1869 + C48030 * C1881) * C48044 +
             (C21591 * C1863 + C48030 * C1872) * C1030) *
                C21588) *
               C48301 * C48414) *
              C48366 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            C23079 * C21590) *
               C48301 * C2134 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C2133 -
           ((C22681 + C22682) * C21590 + (C22678 + C22677) * C21589 +
            (C22676 + C22675) * C21588) *
               C48301 * C2135 +
           ((C23755 + C23754) * C21588 + (C23753 + C23752) * C21589 +
            ((C21591 * C23735 + C48030 * C23736) * C1030 +
             (C21591 * C23737 + C48030 * C23738) * C48044) *
                C21590) *
               C48301 * C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C21591 * C121 + C48030 * C128) * C116 +
               (C21591 * C131 + C48030 * C142) * C104 -
               (C21591 * C122 + C48030 * C129) * C117 -
               (C21591 * C132 + C48030 * C143) * C105 +
               (C21591 * C123 + C48030 * C130) * C118 +
               (C21591 * C133 + C48030 * C144) * C106 -
               (C21591 * C124 + C48030 * C134) * C119 -
               (C21591 * C135 + C48030 * C145) * C107 +
               (C21591 * C125 + C48030 * C136) * C120 +
               (C21591 * C137 + C48030 * C146) * C108) *
                  C21588 +
              ((C21591 * C271 + C48030 * C284) * C116 +
               (C21591 * C283 + C48030 * C300) * C104 -
               (C21591 * C268 + C48030 * C278) * C117 -
               (C21591 * C282 + C48030 * C299) * C105 +
               (C21591 * C269 + C48030 * C279) * C118 +
               (C21591 * C281 + C48030 * C298) * C106 -
               (C21591 * C270 + C48030 * C280) * C119 -
               (C21591 * C285 + C48030 * C301) * C107 +
               (C21591 * C272 + C48030 * C286) * C120 +
               (C21591 * C287 + C48030 * C302) * C108) *
                  C21589 +
              ((C21591 * C273 + C48030 * C288) * C116 +
               (C21591 * C291 + C48030 * C303) * C104 -
               (C21591 * C274 + C48030 * C289) * C117 -
               (C21591 * C292 + C48030 * C304) * C105 +
               (C21591 * C275 + C48030 * C290) * C118 +
               (C21591 * C293 + C48030 * C305) * C106 -
               (C21591 * C276 + C48030 * C294) * C119 -
               (C21591 * C295 + C48030 * C306) * C107 +
               (C21591 * C277 + C48030 * C296) * C120 +
               (C21591 * C297 + C48030 * C307) * C108) *
                  C21590) *
             C48301 * C48097 * C48085 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C21591 * C121 + C48030 * C128) * C265 +
                (C21591 * C131 + C48030 * C142) * C259 -
                (C21591 * C122 + C48030 * C129) * C266 -
                (C21591 * C132 + C48030 * C143) * C260 +
                (C21591 * C123 + C48030 * C130) * C267 +
                (C21591 * C133 + C48030 * C144) * C48392) *
                   C21588 +
               (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C21589 +
               C21779 * C21590) *
                  C48301 * C48097 * C48437 +
              ((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) *
                   C21588 +
               (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) *
                   C21589 +
               (C21769 - (C21770 + C21771) + C21772 - C21773 - C21774) *
                   C21590) *
                  C48301 * C48097 * C48425 +
              (C21779 * C21588 +
               (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) * C21589 +
               ((C21591 * C1034 + C48030 * C1043) * C265 +
                (C21591 * C1046 + C48030 * C1052) * C259 -
                (C21591 * C1035 + C48030 * C1044) * C266 -
                (C21591 * C1047 + C48030 * C1053) * C260 +
                (C21591 * C1036 + C48030 * C1045) * C267 +
                (C21591 * C1048 + C48030 * C1054) * C48392) *
                   C21590) *
                  C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C265 +
            (C21591 * C131 + C48030 * C142) * C259 -
            (C21591 * C122 + C48030 * C129) * C266 -
            (C21591 * C132 + C48030 * C143) * C260 +
            (C21591 * C123 + C48030 * C130) * C267 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C21589 +
           C21779 * C21590) *
              C48301 * C48438 +
          (((C21591 * C421 + C48030 * C431) * C266 -
            ((C21591 * C436 + C48030 * C453) * C259 +
             (C21591 * C424 + C48030 * C437) * C265) +
            (C21591 * C435 + C48030 * C452) * C260 -
            (C21591 * C422 + C48030 * C432) * C267 -
            (C21591 * C434 + C48030 * C451) * C48392) *
               C21588 +
           ((C21591 * C824 + C48030 * C829) * C266 -
            ((C21591 * C831 + C48030 * C838) * C259 +
             (C21591 * C823 + C48030 * C828) * C265) +
            (C21591 * C832 + C48030 * C839) * C260 -
            (C21591 * C825 + C48030 * C830) * C267 -
            (C21591 * C833 + C48030 * C840) * C48392) *
               C21589 +
           ((C21591 * C1169 + C48030 * C1184) * C266 -
            ((C21591 * C1182 + C48030 * C1197) * C259 +
             (C21591 * C1170 + C48030 * C1185) * C265) +
            (C21591 * C1181 + C48030 * C1196) * C260 -
            (C21591 * C1168 + C48030 * C1183) * C267 -
            (C21591 * C1180 + C48030 * C1195) * C48392) *
               C21590) *
              C48301 * C48427 +
          (((C21591 * C426 + C48030 * C441) * C265 +
            (C21591 * C444 + C48030 * C456) * C259 -
            (C21591 * C427 + C48030 * C442) * C266 -
            (C21591 * C445 + C48030 * C457) * C260 +
            (C21591 * C428 + C48030 * C443) * C267 +
            (C21591 * C446 + C48030 * C458) * C48392) *
               C21588 +
           ((C21591 * C1167 + C48030 * C1179) * C265 +
            (C21591 * C1176 + C48030 * C1194) * C259 -
            (C21591 * C1166 + C48030 * C1178) * C266 -
            (C21591 * C1175 + C48030 * C1193) * C260 +
            (C21591 * C1165 + C48030 * C1177) * C267 +
            (C21591 * C1174 + C48030 * C1192) * C48392) *
               C21589 +
           ((C21591 * C1171 + C48030 * C1186) * C265 +
            (C21591 * C1189 + C48030 * C1198) * C259 -
            (C21591 * C1172 + C48030 * C1187) * C266 -
            (C21591 * C1190 + C48030 * C1199) * C260 +
            (C21591 * C1173 + C48030 * C1188) * C267 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C21590) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C21589 +
           C22440 * C21590) *
              C48301 * C48097 * C956 +
          ((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C21588 +
           (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C21589 +
           (C22430 - (C22431 + C22432) + C22433 - C22434 - C22435) * C21590) *
              C48301 * C48097 * C957 +
          (C22440 * C21588 +
           (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C21589 +
           ((C21591 * C1034 + C48030 * C1043) * C959 +
            (C21591 * C1046 + C48030 * C1052) * C48434 -
            (C21591 * C1035 + C48030 * C1044) * C960 -
            (C21591 * C1047 + C48030 * C1053) * C48421 +
            (C21591 * C1036 + C48030 * C1045) * C961 +
            (C21591 * C1048 + C48030 * C1054) * C48392) *
               C21590) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C1030 +
            (C21591 * C131 + C48030 * C142) * C48044) *
               C21588 +
           (C22507 + C22508) * C21589 + C22521 * C21590) *
              C48301 * C48097 * C1025 -
          (C22522 * C21590 + (C22510 + C22509) * C21589 +
           (C22508 + C22507) * C21588) *
              C48301 * C48097 * C1026 +
          (C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
              C48301 * C48097 * C1027 -
          ((C22529 + C22530) * C21590 + (C22528 + C22527) * C21589 +
           C22522 * C21588) *
              C48301 * C48097 * C1028 +
          (C22531 * C21588 + (C22530 + C22529) * C21589 +
           ((C21591 * C22502 + C48030 * C22503) * C1030 +
            (C21591 * C22504 + C48030 * C22505) * C48044) *
               C21590) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C48438 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C48427 +
           (((C21591 * C426 + C48030 * C441) * C1030 +
             (C21591 * C444 + C48030 * C456) * C48044) *
                C21588 +
            (C22675 + C22676) * C21589 + C22683 * C21590) *
               C48301 * C48401) *
              C956 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            (C22679 + C22680) * C21590) *
               C48301 * C48427 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C48438 -
           ((C22681 + C22682) * C21590 + (C22678 + C22677) * C21589 +
            (C22676 + C22675) * C21588) *
               C48301 * C48401) *
              C957 +
          ((C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
               C48301 * C48438 -
           (((C21591 * C6405 + C48030 * C6407) * C48044 +
             (C21591 * C6401 + C48030 * C6403) * C1030) *
                C21590 +
            (C22680 + C22679) * C21589 + C22666 * C21588) *
               C48301 * C48427 +
           (C22683 * C21588 + (C22682 + C22681) * C21589 +
            ((C21591 * C22641 + C48030 * C22642) * C1030 +
             (C21591 * C22643 + C48030 * C22644) * C48044) *
                C21590) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C21589 +
           C22440 * C21590) *
              C48301 * C1681 +
          (((C21591 * C421 + C48030 * C431) * C960 -
            ((C21591 * C436 + C48030 * C453) * C48434 +
             (C21591 * C424 + C48030 * C437) * C959) +
            (C21591 * C435 + C48030 * C452) * C48421 -
            (C21591 * C422 + C48030 * C432) * C961 -
            (C21591 * C434 + C48030 * C451) * C48392) *
               C21588 +
           (C22284 * C960 - (C22285 * C48434 + C22286 * C959) +
            C22287 * C48421 - C22288 * C961 - C22289 * C48392) *
               C21589 +
           (C22290 * C960 - (C22291 * C48434 + C22292 * C959) +
            C22293 * C48421 - C22294 * C961 - C22295 * C48392) *
               C21590) *
              C48301 * C1682 +
          (((C21591 * C426 + C48030 * C441) * C959 +
            (C21591 * C444 + C48030 * C456) * C48434 -
            (C21591 * C427 + C48030 * C442) * C960 -
            (C21591 * C445 + C48030 * C457) * C48421 +
            (C21591 * C428 + C48030 * C443) * C961 +
            (C21591 * C446 + C48030 * C458) * C48392) *
               C21588 +
           (C22667 * C959 + C22668 * C48434 -
            (C21591 * C1166 + C48030 * C1178) * C960 -
            (C21591 * C1175 + C48030 * C1193) * C48421 +
            (C21591 * C1165 + C48030 * C1177) * C961 +
            (C21591 * C1174 + C48030 * C1192) * C48392) *
               C21589 +
           (C22669 * C959 + C22670 * C48434 -
            (C21591 * C1172 + C48030 * C1187) * C960 -
            (C21591 * C1190 + C48030 * C1199) * C48421 +
            (C21591 * C1173 + C48030 * C1188) * C961 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C21590) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C1681 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C1682 +
           (((C21591 * C426 + C48030 * C441) * C1030 +
             (C21591 * C444 + C48030 * C456) * C48044) *
                C21588 +
            (C22675 + C22676) * C21589 + C22683 * C21590) *
               C48301 * C48401) *
              C48437 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            C23079 * C21590) *
               C48301 * C1682 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C1681 -
           ((C22681 + C22682) * C21590 + (C22678 + C22677) * C21589 +
            (C22676 + C22675) * C21588) *
               C48301 * C48401) *
              C48425 +
          ((C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
               C48301 * C1681 -
           ((C23086 + C23087) * C21590 + (C22680 + C22679) * C21589 +
            C22666 * C21588) *
               C48301 * C1682 +
           (C22683 * C21588 + (C22682 + C22681) * C21589 +
            ((C21591 * C22641 + C48030 * C22642) * C1030 +
             (C21591 * C22643 + C48030 * C22644) * C48044) *
                C21590) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C1030 +
            (C21591 * C131 + C48030 * C142) * C48044) *
               C21588 +
           (C22507 + C22508) * C21589 + C22521 * C21590) *
              C48301 * C1856 -
          (C22666 * C21590 + (C22648 + C22649) * C21589 +
           ((C21591 * C436 + C48030 * C453) * C48044 +
            (C21591 * C424 + C48030 * C437) * C1030) *
               C21588) *
              C48301 * C1857 +
          (((C21591 * C426 + C48030 * C441) * C1030 +
            (C21591 * C444 + C48030 * C456) * C48044) *
               C21588 +
           (C22675 + C22676) * C21589 + C22683 * C21590) *
              C48301 * C1858 -
          (((C21591 * C7273 + C48030 * C7275) * C48044 +
            (C21591 * C7269 + C48030 * C7271) * C1030) *
               C21590 +
           ((C21591 * C2245 + C48030 * C2248) * C48044 +
            (C21591 * C2239 + C48030 * C2242) * C1030) *
               C21589 +
           ((C21591 * C1869 + C48030 * C1881) * C48044 +
            (C21591 * C1863 + C48030 * C1872) * C1030) *
               C21588) *
              C48301 * C1859 +
          (((C21591 * C1864 + C48030 * C1873) * C1030 +
            (C21591 * C1876 + C48030 * C1882) * C48044) *
               C21588 +
           ((C21591 * C6795 + C48030 * C6797) * C1030 +
            (C21591 * C6799 + C48030 * C6801) * C48044) *
               C21589 +
           ((C21591 * C23369 + C48030 * C23370) * C1030 +
            (C21591 * C23371 + C48030 * C23372) * C48044) *
               C21590) *
              C48301 * C1860) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C21588 +
            (C22782 + C22783 - C22784 - C22785) * C21589 + C22808 * C21590) *
               C48301 * C48367 +
           (((C21591 * C421 + C48030 * C431) * C47132 -
             ((C21591 * C436 + C48030 * C453) * C48352 +
              (C21591 * C424 + C48030 * C437) * C47151) +
             (C21591 * C435 + C48030 * C452) * C48054) *
                C21588 +
            (C22956 - (C22957 + C22958) + C22959) * C21589 + C22976 * C21590) *
               C48301 * C48184) *
              C956 +
          (((C22784 - (C22783 + C22782) + C22785) * C21588 +
            (C22788 - (C22787 + C22786) + C22789) * C21589 + C22809 * C21590) *
               C48301 * C48367 +
           ((C22958 + C22957 - C22956 - C22959) * C21588 +
            (C22962 + C22961 - C22960 - C22963) * C21589 +
            (C22964 + C22965 - C22974 - C22975) * C21590) *
               C48301 * C48184) *
              C957 +
          ((C22808 * C21588 + (C22792 + C22791 - C22790 - C22793) * C21589 +
            (C22794 + C22795 - C22806 - C22807) * C21590) *
               C48301 * C48367 +
           (C22976 * C21588 + (C22974 - (C22965 + C22964) + C22975) * C21589 +
            ((C21591 * C6402 + C48030 * C6404) * C47132 -
             ((C21591 * C6405 + C48030 * C6407) * C48352 +
              (C21591 * C6401 + C48030 * C6403) * C47151) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C21590) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C565 +
            (C21591 * C131 + C48030 * C142) * C559 -
            (C21591 * C122 + C48030 * C129) * C566 -
            (C21591 * C132 + C48030 * C143) * C560 +
            (C21591 * C123 + C48030 * C130) * C567 +
            (C21591 * C133 + C48030 * C144) * C561 -
            (C21591 * C124 + C48030 * C134) * C568 -
            (C21591 * C135 + C48030 * C145) * C48402) *
               C21588 +
           (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
            C22013) *
               C21589 +
           (C21998 + C21999 - C22000 - C22001 + C22002 + C22003 - C22014 -
            C22015) *
               C21590) *
              C48301 * C48367 +
          (((C21591 * C421 + C48030 * C431) * C566 -
            ((C21591 * C436 + C48030 * C453) * C559 +
             (C21591 * C424 + C48030 * C437) * C565) +
            (C21591 * C435 + C48030 * C452) * C560 -
            (C21591 * C422 + C48030 * C432) * C567 -
            (C21591 * C434 + C48030 * C451) * C561 +
            (C21591 * C423 + C48030 * C433) * C568 +
            (C21591 * C438 + C48030 * C454) * C48402) *
               C21588 +
           ((C21591 * C824 + C48030 * C829) * C566 -
            ((C21591 * C831 + C48030 * C838) * C559 +
             (C21591 * C823 + C48030 * C828) * C565) +
            (C21591 * C832 + C48030 * C839) * C560 -
            (C21591 * C825 + C48030 * C830) * C567 -
            (C21591 * C833 + C48030 * C840) * C561 +
            (C21591 * C826 + C48030 * C834) * C568 +
            (C21591 * C835 + C48030 * C841) * C48402) *
               C21589 +
           ((C21591 * C1169 + C48030 * C1184) * C566 -
            ((C21591 * C1182 + C48030 * C1197) * C559 +
             (C21591 * C1170 + C48030 * C1185) * C565) +
            (C21591 * C1181 + C48030 * C1196) * C560 -
            (C21591 * C1168 + C48030 * C1183) * C567 -
            (C21591 * C1180 + C48030 * C1195) * C561 +
            (C21591 * C1457 + C48030 * C1458) * C568 +
            (C21591 * C1459 + C48030 * C1460) * C48402) *
               C21590) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C47151 +
            (C21591 * C131 + C48030 * C142) * C48352 -
            (C21591 * C122 + C48030 * C129) * C47132 -
            (C21591 * C132 + C48030 * C143) * C48054) *
               C21588 +
           (C22782 + C22783 - C22784 - C22785) * C21589 + C22808 * C21590) *
              C48301 * C2133 +
          (((C21591 * C421 + C48030 * C431) * C47132 -
            ((C21591 * C436 + C48030 * C453) * C48352 +
             (C21591 * C424 + C48030 * C437) * C47151) +
            (C21591 * C435 + C48030 * C452) * C48054) *
               C21588 +
           (C22956 - (C22957 + C22958) + C22959) * C21589 + C22976 * C21590) *
              C48301 * C2134 +
          (((C21591 * C426 + C48030 * C441) * C47151 +
            (C21591 * C444 + C48030 * C456) * C48352 -
            (C21591 * C427 + C48030 * C442) * C47132 -
            (C21591 * C445 + C48030 * C457) * C48054) *
               C21588 +
           (C23520 + C23521 - C23536 - C23537) * C21589 +
           (C23526 + C23527 - C23538 - C23539) * C21590) *
              C48301 * C2135 +
          (((C21591 * C1862 + C48030 * C1871) * C47132 -
            ((C21591 * C1869 + C48030 * C1881) * C48352 +
             (C21591 * C1863 + C48030 * C1872) * C47151) +
            (C21591 * C1868 + C48030 * C1880) * C48054) *
               C21588 +
           ((C21591 * C2240 + C48030 * C2243) * C47132 -
            ((C21591 * C2245 + C48030 * C2248) * C48352 +
             (C21591 * C2239 + C48030 * C2242) * C47151) +
            (C21591 * C2246 + C48030 * C2249) * C48054) *
               C21589 +
           ((C21591 * C7270 + C48030 * C7272) * C47132 -
            ((C21591 * C7273 + C48030 * C7275) * C48352 +
             (C21591 * C7269 + C48030 * C7271) * C47151) +
            (C21591 * C7274 + C48030 * C7276) * C48054) *
               C21590) *
              C48301 * C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C265 +
            (C21591 * C131 + C48030 * C142) * C259 -
            (C21591 * C122 + C48030 * C129) * C266 -
            (C21591 * C132 + C48030 * C143) * C260 +
            (C21591 * C123 + C48030 * C130) * C267 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C21589 +
           C21779 * C21590) *
              C48301 * C48097 * C48437 +
          ((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C21588 +
           (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C21589 +
           (C21769 - (C21770 + C21771) + C21772 - C21773 - C21774) * C21590) *
              C48301 * C48097 * C48425 +
          (C21779 * C21588 +
           (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) * C21589 +
           ((C21591 * C1034 + C48030 * C1043) * C265 +
            (C21591 * C1046 + C48030 * C1052) * C259 -
            (C21591 * C1035 + C48030 * C1044) * C266 -
            (C21591 * C1047 + C48030 * C1053) * C260 +
            (C21591 * C1036 + C48030 * C1045) * C267 +
            (C21591 * C1048 + C48030 * C1054) * C48392) *
               C21590) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C121 + C48030 * C128) * C116 +
           (C21591 * C131 + C48030 * C142) * C104 -
           (C21591 * C122 + C48030 * C129) * C117 -
           (C21591 * C132 + C48030 * C143) * C105 +
           (C21591 * C123 + C48030 * C130) * C118 +
           (C21591 * C133 + C48030 * C144) * C106 -
           (C21591 * C124 + C48030 * C134) * C119 -
           (C21591 * C135 + C48030 * C145) * C107 +
           (C21591 * C125 + C48030 * C136) * C120 +
           (C21591 * C137 + C48030 * C146) * C108) *
              C21588 +
          ((C21591 * C271 + C48030 * C284) * C116 +
           (C21591 * C283 + C48030 * C300) * C104 -
           (C21591 * C268 + C48030 * C278) * C117 -
           (C21591 * C282 + C48030 * C299) * C105 +
           (C21591 * C269 + C48030 * C279) * C118 +
           (C21591 * C281 + C48030 * C298) * C106 -
           (C21591 * C270 + C48030 * C280) * C119 -
           (C21591 * C285 + C48030 * C301) * C107 +
           (C21591 * C272 + C48030 * C286) * C120 +
           (C21591 * C287 + C48030 * C302) * C108) *
              C21589 +
          ((C21591 * C273 + C48030 * C288) * C116 +
           (C21591 * C291 + C48030 * C303) * C104 -
           (C21591 * C274 + C48030 * C289) * C117 -
           (C21591 * C292 + C48030 * C304) * C105 +
           (C21591 * C275 + C48030 * C290) * C118 +
           (C21591 * C293 + C48030 * C305) * C106 -
           (C21591 * C276 + C48030 * C294) * C119 -
           (C21591 * C295 + C48030 * C306) * C107 +
           (C21591 * C277 + C48030 * C296) * C120 +
           (C21591 * C297 + C48030 * C307) * C108) *
              C21590) *
         C48301 * C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C21589 +
           C22440 * C21590) *
              C48301 * C48097 * C956 +
          ((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C21588 +
           (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C21589 +
           (C22430 - (C22431 + C22432) + C22433 - C22434 - C22435) * C21590) *
              C48301 * C48097 * C957 +
          (C22440 * C21588 +
           (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C21589 +
           ((C21591 * C1034 + C48030 * C1043) * C959 +
            (C21591 * C1046 + C48030 * C1052) * C48434 -
            (C21591 * C1035 + C48030 * C1044) * C960 -
            (C21591 * C1047 + C48030 * C1053) * C48421 +
            (C21591 * C1036 + C48030 * C1045) * C961 +
            (C21591 * C1048 + C48030 * C1054) * C48392) *
               C21590) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C1030 +
            (C21591 * C131 + C48030 * C142) * C48044) *
               C21588 +
           (C22507 + C22508) * C21589 + C22521 * C21590) *
              C48301 * C48097 * C1025 -
          (C22522 * C21590 + (C22510 + C22509) * C21589 +
           (C22508 + C22507) * C21588) *
              C48301 * C48097 * C1026 +
          (C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
              C48301 * C48097 * C1027 -
          ((C22529 + C22530) * C21590 + (C22528 + C22527) * C21589 +
           C22522 * C21588) *
              C48301 * C48097 * C1028 +
          (C22531 * C21588 + (C22530 + C22529) * C21589 +
           ((C21591 * C22502 + C48030 * C22503) * C1030 +
            (C21591 * C22504 + C48030 * C22505) * C48044) *
               C21590) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C21589 +
           C22440 * C21590) *
              C48301 * C1681 +
          (((C21591 * C421 + C48030 * C431) * C960 -
            ((C21591 * C436 + C48030 * C453) * C48434 +
             (C21591 * C424 + C48030 * C437) * C959) +
            (C21591 * C435 + C48030 * C452) * C48421 -
            (C21591 * C422 + C48030 * C432) * C961 -
            (C21591 * C434 + C48030 * C451) * C48392) *
               C21588 +
           (C22284 * C960 - (C22285 * C48434 + C22286 * C959) +
            C22287 * C48421 - C22288 * C961 - C22289 * C48392) *
               C21589 +
           (C22290 * C960 - (C22291 * C48434 + C22292 * C959) +
            C22293 * C48421 - C22294 * C961 - C22295 * C48392) *
               C21590) *
              C48301 * C1682 +
          (((C21591 * C426 + C48030 * C441) * C959 +
            (C21591 * C444 + C48030 * C456) * C48434 -
            (C21591 * C427 + C48030 * C442) * C960 -
            (C21591 * C445 + C48030 * C457) * C48421 +
            (C21591 * C428 + C48030 * C443) * C961 +
            (C21591 * C446 + C48030 * C458) * C48392) *
               C21588 +
           (C22667 * C959 + C22668 * C48434 -
            (C21591 * C1166 + C48030 * C1178) * C960 -
            (C21591 * C1175 + C48030 * C1193) * C48421 +
            (C21591 * C1165 + C48030 * C1177) * C961 +
            (C21591 * C1174 + C48030 * C1192) * C48392) *
               C21589 +
           (C22669 * C959 + C22670 * C48434 -
            (C21591 * C1172 + C48030 * C1187) * C960 -
            (C21591 * C1190 + C48030 * C1199) * C48421 +
            (C21591 * C1173 + C48030 * C1188) * C961 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C21590) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C1681 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C1682 +
           (((C21591 * C426 + C48030 * C441) * C1030 +
             (C21591 * C444 + C48030 * C456) * C48044) *
                C21588 +
            (C22675 + C22676) * C21589 + C22683 * C21590) *
               C48301 * C48401) *
              C48437 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            C23079 * C21590) *
               C48301 * C1682 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C1681 -
           ((C22681 + C22682) * C21590 + (C22678 + C22677) * C21589 +
            (C22676 + C22675) * C21588) *
               C48301 * C48401) *
              C48425 +
          ((C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
               C48301 * C1681 -
           ((C23086 + C23087) * C21590 + (C22680 + C22679) * C21589 +
            C22666 * C21588) *
               C48301 * C1682 +
           (C22683 * C21588 + (C22682 + C22681) * C21589 +
            ((C21591 * C22641 + C48030 * C22642) * C1030 +
             (C21591 * C22643 + C48030 * C22644) * C48044) *
                C21590) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47161 +
             (C21591 * C131 + C48030 * C142) * C48049 -
             (C21591 * C122 + C48030 * C129) * C47157 -
             (C21591 * C132 + C48030 * C143) * C48057 +
             (C21591 * C123 + C48030 * C130) * C47167 +
             (C21591 * C133 + C48030 * C144) * C2723) *
                C21588 +
            (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C21589 +
            C24284 * C21590) *
               C48301 * C3120 +
           (((C21591 * C421 + C48030 * C431) * C47157 -
             ((C21591 * C436 + C48030 * C453) * C48049 +
              (C21591 * C424 + C48030 * C437) * C47161) +
             (C21591 * C435 + C48030 * C452) * C48057 -
             (C21591 * C422 + C48030 * C432) * C47167 -
             (C21591 * C434 + C48030 * C451) * C2723) *
                C21588 +
            (C24431 - (C24432 + C24433) + C24434 - C24435 - C24436) * C21589 +
            (C24437 - (C24438 + C24439) + C24440 - C24441 - C24442) * C21590) *
               C48301 * C48184) *
              C48366 +
          (((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C21588 +
            (C24270 - (C24269 + C24268) + C24271 - C24272 - C24273) * C21589 +
            (C24274 - (C24275 + C24276) + C24277 - C24278 - C24279) * C21590) *
               C48301 * C3120 +
           ((C24433 + C24432 - C24431 - C24434 + C24435 + C24436) * C21588 +
            (C24439 + C24438 - C24437 - C24440 + C24441 + C24442) * C21589 +
            (C22671 * C47161 + C22672 * C48049 - C22971 * C47157 -
             C22972 * C48057 + (C21591 * C1561 + C48030 * C1564) * C47167 +
             (C21591 * C1567 + C48030 * C1570) * C2723) *
                C21590) *
               C48301 * C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C21588 +
            (C23968 + C23969 - C23970 - C23971) * C21589 + C23988 * C21590) *
               C48301 * C48180 +
           (((C21591 * C421 + C48030 * C431) * C2464 -
             ((C21591 * C436 + C48030 * C453) * C2457 +
              (C21591 * C424 + C48030 * C437) * C2463) +
             (C21591 * C435 + C48030 * C452) * C48054) *
                C21588 +
            (C24136 - (C24137 + C24138) + C24139) * C21589 + C24595 * C21590) *
               C48301 * C48187 +
           (((C21591 * C426 + C48030 * C441) * C2463 +
             (C21591 * C444 + C48030 * C456) * C2457 -
             (C21591 * C427 + C48030 * C442) * C2464 -
             (C21591 * C445 + C48030 * C457) * C48054) *
                C21588 +
            (C24144 + C24145 - C24146 - C24147) * C21589 +
            (C24148 + C24149 - C24150 - C24151) * C21590) *
               C48301 * C3628) *
              C48366 +
          (((C23970 - (C23969 + C23968) + C23971) * C21588 +
            (C23974 - (C23973 + C23972) + C23975) * C21589 + C23989 * C21590) *
               C48301 * C48180 +
           ((C24138 + C24137 - C24136 - C24139) * C21588 +
            (C24142 + C24141 - C24140 - C24143) * C21589 +
            (C24590 + C24591 - C24592 - C24593) * C21590) *
               C48301 * C48187 +
           ((C24146 - (C24145 + C24144) + C24147) * C21588 +
            (C24150 - (C24149 + C24148) + C24151) * C21589 +
            ((C21591 * C5880 + C48030 * C5882) * C2464 -
             (C22673 * C2457 + C22674 * C2463) +
             (C21591 * C5884 + C48030 * C5886) * C48054) *
                C21590) *
               C48301 * C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C21588 +
            (C23968 + C23969 - C23970 - C23971) * C21589 + C23988 * C21590) *
               C48301 * C3120 +
           (((C21591 * C421 + C48030 * C431) * C2464 -
             ((C21591 * C436 + C48030 * C453) * C2457 +
              (C21591 * C424 + C48030 * C437) * C2463) +
             (C21591 * C435 + C48030 * C452) * C48054) *
                C21588 +
            (C24136 - (C24137 + C24138) + C24139) * C21589 + C24595 * C21590) *
               C48301 * C48184) *
              C48437 +
          (((C23970 - (C23969 + C23968) + C23971) * C21588 +
            (C23974 - (C23973 + C23972) + C23975) * C21589 + C23989 * C21590) *
               C48301 * C3120 +
           ((C24138 + C24137 - C24136 - C24139) * C21588 +
            (C24142 + C24141 - C24140 - C24143) * C21589 +
            (C24590 + C24591 - C24592 - C24593) * C21590) *
               C48301 * C48184) *
              C48425 +
          ((C23988 * C21588 + (C23978 + C23977 - C23976 - C23979) * C21589 +
            (C23980 + C23981 - C23982 - C23983) * C21590) *
               C48301 * C3120 +
           (C24595 * C21588 + (C24592 - (C24591 + C24590) + C24593) * C21589 +
            ((C21591 * C6402 + C48030 * C6404) * C2464 -
             (C23084 * C2457 + C23085 * C2463) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C21590) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C2355 +
            (C21591 * C131 + C48030 * C142) * C48443 -
            (C21591 * C122 + C48030 * C129) * C2356 -
            (C21591 * C132 + C48030 * C143) * C48436 +
            (C21591 * C123 + C48030 * C130) * C2357 +
            (C21591 * C133 + C48030 * C144) * C48423 -
            (C21591 * C124 + C48030 * C134) * C2358 -
            (C21591 * C135 + C48030 * C145) * C48402) *
               C21588 +
           (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
            C23861) *
               C21589 +
           (C23862 + C23863 - C23864 - C23865 + C23866 + C23867 - C23868 -
            C23869) *
               C21590) *
              C48301 * C3120 +
          (((C21591 * C421 + C48030 * C431) * C2356 -
            ((C21591 * C436 + C48030 * C453) * C48443 +
             (C21591 * C424 + C48030 * C437) * C2355) +
            (C21591 * C435 + C48030 * C452) * C48436 -
            (C21591 * C422 + C48030 * C432) * C2357 -
            (C21591 * C434 + C48030 * C451) * C48423 +
            (C21591 * C423 + C48030 * C433) * C2358 +
            (C21591 * C438 + C48030 * C454) * C48402) *
               C21588 +
           (C22284 * C2356 - (C22285 * C48443 + C22286 * C2355) +
            C22287 * C48436 - C22288 * C2357 - C22289 * C48423 +
            (C21591 * C826 + C48030 * C834) * C2358 +
            (C21591 * C835 + C48030 * C841) * C48402) *
               C21589 +
           (C22290 * C2356 - (C22291 * C48443 + C22292 * C2355) +
            C22293 * C48436 - C22294 * C2357 - C22295 * C48423 +
            (C21591 * C1457 + C48030 * C1458) * C2358 +
            (C21591 * C1459 + C48030 * C1460) * C48402) *
               C21590) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C2463 +
            (C21591 * C131 + C48030 * C142) * C2457 -
            (C21591 * C122 + C48030 * C129) * C2464 -
            (C21591 * C132 + C48030 * C143) * C48054) *
               C21588 +
           (C23968 + C23969 - C23970 - C23971) * C21589 + C23988 * C21590) *
              C48301 * C48445 +
          (((C21591 * C421 + C48030 * C431) * C2464 -
            ((C21591 * C436 + C48030 * C453) * C2457 +
             (C21591 * C424 + C48030 * C437) * C2463) +
            (C21591 * C435 + C48030 * C452) * C48054) *
               C21588 +
           (C24136 - (C24137 + C24138) + C24139) * C21589 + C24595 * C21590) *
              C48301 * C48442 +
          (((C21591 * C426 + C48030 * C441) * C2463 +
            (C21591 * C444 + C48030 * C456) * C2457 -
            (C21591 * C427 + C48030 * C442) * C2464 -
            (C21591 * C445 + C48030 * C457) * C48054) *
               C21588 +
           (C24144 + C24145 - C24146 - C24147) * C21589 +
           (C24148 + C24149 - C24150 - C24151) * C21590) *
              C48301 * C48433 +
          (((C21591 * C1862 + C48030 * C1871) * C2464 -
            ((C21591 * C1869 + C48030 * C1881) * C2457 +
             (C21591 * C1863 + C48030 * C1872) * C2463) +
            (C21591 * C1868 + C48030 * C1880) * C48054) *
               C21588 +
           ((C21591 * C2240 + C48030 * C2243) * C2464 -
            (C23750 * C2457 + C23751 * C2463) +
            (C21591 * C2246 + C48030 * C2249) * C48054) *
               C21589 +
           ((C21591 * C7270 + C48030 * C7272) * C2464 -
            (C23748 * C2457 + C23749 * C2463) +
            (C21591 * C7274 + C48030 * C7276) * C48054) *
               C21590) *
              C48301 * C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C47161 +
            (C21591 * C131 + C48030 * C142) * C48049 -
            (C21591 * C122 + C48030 * C129) * C47157 -
            (C21591 * C132 + C48030 * C143) * C48057 +
            (C21591 * C123 + C48030 * C130) * C47167 +
            (C21591 * C133 + C48030 * C144) * C2723) *
               C21588 +
           (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C21589 +
           C24284 * C21590) *
              C48301 * C48180 +
          (((C21591 * C421 + C48030 * C431) * C47157 -
            ((C21591 * C436 + C48030 * C453) * C48049 +
             (C21591 * C424 + C48030 * C437) * C47161) +
            (C21591 * C435 + C48030 * C452) * C48057 -
            (C21591 * C422 + C48030 * C432) * C47167 -
            (C21591 * C434 + C48030 * C451) * C2723) *
               C21588 +
           (C24431 - (C24432 + C24433) + C24434 - C24435 - C24436) * C21589 +
           (C24437 - (C24438 + C24439) + C24440 - C24441 - C24442) * C21590) *
              C48301 * C48187 +
          (((C21591 * C426 + C48030 * C441) * C47161 +
            (C21591 * C444 + C48030 * C456) * C48049 -
            (C21591 * C427 + C48030 * C442) * C47157 -
            (C21591 * C445 + C48030 * C457) * C48057 +
            (C21591 * C428 + C48030 * C443) * C47167 +
            (C21591 * C446 + C48030 * C458) * C2723) *
               C21588 +
           (C22667 * C47161 + C22668 * C48049 - C23532 * C47157 -
            C23533 * C48057 + (C21591 * C1165 + C48030 * C1177) * C47167 +
            (C21591 * C1174 + C48030 * C1192) * C2723) *
               C21589 +
           (C22669 * C47161 + C22670 * C48049 - C23534 * C47157 -
            C23535 * C48057 + (C21591 * C1173 + C48030 * C1188) * C47167 +
            (C21591 * C1191 + C48030 * C1200) * C2723) *
               C21590) *
              C48301 * C3628) *
         C48085) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C2355 +
            (C21591 * C131 + C48030 * C142) * C48443 -
            (C21591 * C122 + C48030 * C129) * C2356 -
            (C21591 * C132 + C48030 * C143) * C48436 +
            (C21591 * C123 + C48030 * C130) * C2357 +
            (C21591 * C133 + C48030 * C144) * C48423 -
            (C21591 * C124 + C48030 * C134) * C2358 -
            (C21591 * C135 + C48030 * C145) * C48402) *
               C21588 +
           (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
            C23861) *
               C21589 +
           (C23862 + C23863 - C23864 - C23865 + C23866 + C23867 - C23868 -
            C23869) *
               C21590) *
              C48301 * C3120 +
          (((C21591 * C421 + C48030 * C431) * C2356 -
            ((C21591 * C436 + C48030 * C453) * C48443 +
             (C21591 * C424 + C48030 * C437) * C2355) +
            (C21591 * C435 + C48030 * C452) * C48436 -
            (C21591 * C422 + C48030 * C432) * C2357 -
            (C21591 * C434 + C48030 * C451) * C48423 +
            (C21591 * C423 + C48030 * C433) * C2358 +
            (C21591 * C438 + C48030 * C454) * C48402) *
               C21588 +
           (C22284 * C2356 - (C22285 * C48443 + C22286 * C2355) +
            C22287 * C48436 - C22288 * C2357 - C22289 * C48423 +
            (C21591 * C826 + C48030 * C834) * C2358 +
            (C21591 * C835 + C48030 * C841) * C48402) *
               C21589 +
           (C22290 * C2356 - (C22291 * C48443 + C22292 * C2355) +
            C22293 * C48436 - C22294 * C2357 - C22295 * C48423 +
            (C21591 * C1457 + C48030 * C1458) * C2358 +
            (C21591 * C1459 + C48030 * C1460) * C48402) *
               C21590) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C21588 +
            (C23968 + C23969 - C23970 - C23971) * C21589 + C23988 * C21590) *
               C48301 * C3120 +
           (((C21591 * C421 + C48030 * C431) * C2464 -
             ((C21591 * C436 + C48030 * C453) * C2457 +
              (C21591 * C424 + C48030 * C437) * C2463) +
             (C21591 * C435 + C48030 * C452) * C48054) *
                C21588 +
            (C24136 - (C24137 + C24138) + C24139) * C21589 + C24595 * C21590) *
               C48301 * C48184) *
              C48437 +
          (((C23970 - (C23969 + C23968) + C23971) * C21588 +
            (C23974 - (C23973 + C23972) + C23975) * C21589 + C23989 * C21590) *
               C48301 * C3120 +
           ((C24138 + C24137 - C24136 - C24139) * C21588 +
            (C24142 + C24141 - C24140 - C24143) * C21589 +
            (C24590 + C24591 - C24592 - C24593) * C21590) *
               C48301 * C48184) *
              C48425 +
          ((C23988 * C21588 + (C23978 + C23977 - C23976 - C23979) * C21589 +
            (C23980 + C23981 - C23982 - C23983) * C21590) *
               C48301 * C3120 +
           (C24595 * C21588 + (C24592 - (C24591 + C24590) + C24593) * C21589 +
            ((C21591 * C6402 + C48030 * C6404) * C2464 -
             (C23084 * C2457 + C23085 * C2463) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C21590) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C565 +
            (C21591 * C131 + C48030 * C142) * C559 -
            (C21591 * C122 + C48030 * C129) * C566 -
            (C21591 * C132 + C48030 * C143) * C560 +
            (C21591 * C123 + C48030 * C130) * C567 +
            (C21591 * C133 + C48030 * C144) * C561 -
            (C21591 * C124 + C48030 * C134) * C568 -
            (C21591 * C135 + C48030 * C145) * C48402) *
               C21588 +
           (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
            C22013) *
               C21589 +
           (C21998 + C21999 - C22000 - C22001 + C22002 + C22003 - C22014 -
            C22015) *
               C21590) *
              C48301 * C48097 * C48366 +
          ((C21990 - (C21989 + C21988) + C21991 - C21992 - C21993 + C22012 +
            C22013) *
               C21588 +
           (C22000 - (C21999 + C21998) + C22001 - C22002 - C22003 + C22014 +
            C22015) *
               C21589 +
           (C21751 * C566 - (C21752 * C559 + C21753 * C565) + C21754 * C560 -
            C21755 * C567 - C21756 * C561 +
            (C21591 * C1307 + C48030 * C1308) * C568 +
            (C21591 * C1309 + C48030 * C1310) * C48402) *
               C21590) *
              C48301 * C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C47151 +
            (C21591 * C131 + C48030 * C142) * C48352 -
            (C21591 * C122 + C48030 * C129) * C47132 -
            (C21591 * C132 + C48030 * C143) * C48054) *
               C21588 +
           (C22782 + C22783 - C22784 - C22785) * C21589 + C22808 * C21590) *
              C48301 * C48097 * C1301 +
          ((C22784 - (C22783 + C22782) + C22785) * C21588 +
           (C22788 - (C22787 + C22786) + C22789) * C21589 + C22809 * C21590) *
              C48301 * C48097 * C1302 +
          (C22808 * C21588 + (C22792 + C22791 - C22790 - C22793) * C21589 +
           (C22794 + C22795 - C22806 - C22807) * C21590) *
              C48301 * C48097 * C1303 +
          (C22809 * C21588 + (C22806 - (C22795 + C22794) + C22807) * C21589 +
           ((C21591 * C5702 + C48030 * C5704) * C47132 -
            (C22525 * C48352 + C22526 * C47151) +
            (C21591 * C5706 + C48030 * C5708) * C48054) *
               C21590) *
              C48301 * C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C21588 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C21589 +
            C21779 * C21590) *
               C48301 * C48367 +
           (((C21591 * C421 + C48030 * C431) * C266 -
             ((C21591 * C436 + C48030 * C453) * C259 +
              (C21591 * C424 + C48030 * C437) * C265) +
             (C21591 * C435 + C48030 * C452) * C260 -
             (C21591 * C422 + C48030 * C432) * C267 -
             (C21591 * C434 + C48030 * C451) * C48392) *
                C21588 +
            (C22296 - (C22297 + C22298) + C22299 - C22300 - C22301) * C21589 +
            (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C21590) *
               C48301 * C48184) *
              C48366 +
          (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C21588 +
            (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C21589 +
            (C21769 - (C21770 + C21771) + C21772 - C21773 - C21774) * C21590) *
               C48301 * C48367 +
           ((C22298 + C22297 - C22296 - C22299 + C22300 + C22301) * C21588 +
            (C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C21589 +
            ((C21591 * C1559 + C48030 * C1562) * C265 +
             (C21591 * C1565 + C48030 * C1568) * C259 -
             (C21591 * C1560 + C48030 * C1563) * C266 -
             (C21591 * C1566 + C48030 * C1569) * C260 +
             (C21591 * C1561 + C48030 * C1564) * C267 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C21590) *
               C48301 * C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C48367 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C48184) *
              C1301 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            C23079 * C21590) *
               C48301 * C48184 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C48367) *
              C1302 +
          ((C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
               C48301 * C48367 -
           ((C23086 + C23087) * C21590 + (C22680 + C22679) * C21589 +
            C22666 * C21588) *
               C48301 * C48184) *
              C1303 +
          ((C23079 * C21588 + (C23087 + C23086) * C21589 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C21590) *
               C48301 * C48184 -
           ((C22529 + C22530) * C21590 + (C22528 + C22527) * C21589 +
            C22522 * C21588) *
               C48301 * C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C265 +
            (C21591 * C131 + C48030 * C142) * C259 -
            (C21591 * C122 + C48030 * C129) * C266 -
            (C21591 * C132 + C48030 * C143) * C260 +
            (C21591 * C123 + C48030 * C130) * C267 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C21589 +
           C21779 * C21590) *
              C48301 * C48097 * C48437 +
          ((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C21588 +
           (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C21589 +
           (C21769 - (C21770 + C21771) + C21772 - C21773 - C21774) * C21590) *
              C48301 * C48097 * C48425 +
          (C21779 * C21588 +
           (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) * C21589 +
           ((C21591 * C1034 + C48030 * C1043) * C265 +
            (C21591 * C1046 + C48030 * C1052) * C259 -
            (C21591 * C1035 + C48030 * C1044) * C266 -
            (C21591 * C1047 + C48030 * C1053) * C260 +
            (C21591 * C1036 + C48030 * C1045) * C267 +
            (C21591 * C1048 + C48030 * C1054) * C48392) *
               C21590) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C121 + C48030 * C128) * C116 +
           (C21591 * C131 + C48030 * C142) * C104 -
           (C21591 * C122 + C48030 * C129) * C117 -
           (C21591 * C132 + C48030 * C143) * C105 +
           (C21591 * C123 + C48030 * C130) * C118 +
           (C21591 * C133 + C48030 * C144) * C106 -
           (C21591 * C124 + C48030 * C134) * C119 -
           (C21591 * C135 + C48030 * C145) * C107 +
           (C21591 * C125 + C48030 * C136) * C120 +
           (C21591 * C137 + C48030 * C146) * C108) *
              C21588 +
          ((C21591 * C271 + C48030 * C284) * C116 +
           (C21591 * C283 + C48030 * C300) * C104 -
           (C21591 * C268 + C48030 * C278) * C117 -
           (C21591 * C282 + C48030 * C299) * C105 +
           (C21591 * C269 + C48030 * C279) * C118 +
           (C21591 * C281 + C48030 * C298) * C106 -
           (C21591 * C270 + C48030 * C280) * C119 -
           (C21591 * C285 + C48030 * C301) * C107 +
           (C21591 * C272 + C48030 * C286) * C120 +
           (C21591 * C287 + C48030 * C302) * C108) *
              C21589 +
          ((C21591 * C273 + C48030 * C288) * C116 +
           (C21591 * C291 + C48030 * C303) * C104 -
           (C21591 * C274 + C48030 * C289) * C117 -
           (C21591 * C292 + C48030 * C304) * C105 +
           (C21591 * C275 + C48030 * C290) * C118 +
           (C21591 * C293 + C48030 * C305) * C106 -
           (C21591 * C276 + C48030 * C294) * C119 -
           (C21591 * C295 + C48030 * C306) * C107 +
           (C21591 * C277 + C48030 * C296) * C120 +
           (C21591 * C297 + C48030 * C307) * C108) *
              C21590) *
         C48301 * C48097 * C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C265 +
            (C21591 * C131 + C48030 * C142) * C259 -
            (C21591 * C122 + C48030 * C129) * C266 -
            (C21591 * C132 + C48030 * C143) * C260 +
            (C21591 * C123 + C48030 * C130) * C267 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C21589 +
           C21779 * C21590) *
              C48301 * C48438 +
          (((C21591 * C421 + C48030 * C431) * C266 -
            ((C21591 * C436 + C48030 * C453) * C259 +
             (C21591 * C424 + C48030 * C437) * C265) +
            (C21591 * C435 + C48030 * C452) * C260 -
            (C21591 * C422 + C48030 * C432) * C267 -
            (C21591 * C434 + C48030 * C451) * C48392) *
               C21588 +
           ((C21591 * C824 + C48030 * C829) * C266 -
            ((C21591 * C831 + C48030 * C838) * C259 +
             (C21591 * C823 + C48030 * C828) * C265) +
            (C21591 * C832 + C48030 * C839) * C260 -
            (C21591 * C825 + C48030 * C830) * C267 -
            (C21591 * C833 + C48030 * C840) * C48392) *
               C21589 +
           ((C21591 * C1169 + C48030 * C1184) * C266 -
            ((C21591 * C1182 + C48030 * C1197) * C259 +
             (C21591 * C1170 + C48030 * C1185) * C265) +
            (C21591 * C1181 + C48030 * C1196) * C260 -
            (C21591 * C1168 + C48030 * C1183) * C267 -
            (C21591 * C1180 + C48030 * C1195) * C48392) *
               C21590) *
              C48301 * C48427 +
          (((C21591 * C426 + C48030 * C441) * C265 +
            (C21591 * C444 + C48030 * C456) * C259 -
            (C21591 * C427 + C48030 * C442) * C266 -
            (C21591 * C445 + C48030 * C457) * C260 +
            (C21591 * C428 + C48030 * C443) * C267 +
            (C21591 * C446 + C48030 * C458) * C48392) *
               C21588 +
           ((C21591 * C1167 + C48030 * C1179) * C265 +
            (C21591 * C1176 + C48030 * C1194) * C259 -
            (C21591 * C1166 + C48030 * C1178) * C266 -
            (C21591 * C1175 + C48030 * C1193) * C260 +
            (C21591 * C1165 + C48030 * C1177) * C267 +
            (C21591 * C1174 + C48030 * C1192) * C48392) *
               C21589 +
           ((C21591 * C1171 + C48030 * C1186) * C265 +
            (C21591 * C1189 + C48030 * C1198) * C259 -
            (C21591 * C1172 + C48030 * C1187) * C266 -
            (C21591 * C1190 + C48030 * C1199) * C260 +
            (C21591 * C1173 + C48030 * C1188) * C267 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C21590) *
              C48301 * C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C21589 +
           C22440 * C21590) *
              C48301 * C48097 * C956 +
          ((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C21588 +
           (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C21589 +
           (C22430 - (C22431 + C22432) + C22433 - C22434 - C22435) * C21590) *
              C48301 * C48097 * C957 +
          (C22440 * C21588 +
           (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C21589 +
           ((C21591 * C1034 + C48030 * C1043) * C959 +
            (C21591 * C1046 + C48030 * C1052) * C48434 -
            (C21591 * C1035 + C48030 * C1044) * C960 -
            (C21591 * C1047 + C48030 * C1053) * C48421 +
            (C21591 * C1036 + C48030 * C1045) * C961 +
            (C21591 * C1048 + C48030 * C1054) * C48392) *
               C21590) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C1030 +
            (C21591 * C131 + C48030 * C142) * C48044) *
               C21588 +
           (C22507 + C22508) * C21589 + C22521 * C21590) *
              C48301 * C48097 * C1025 -
          (C22522 * C21590 + (C22510 + C22509) * C21589 +
           (C22508 + C22507) * C21588) *
              C48301 * C48097 * C1026 +
          (C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
              C48301 * C48097 * C1027 -
          ((C22529 + C22530) * C21590 + (C22528 + C22527) * C21589 +
           C22522 * C21588) *
              C48301 * C48097 * C1028 +
          (C22531 * C21588 + (C22530 + C22529) * C21589 +
           ((C21591 * C22502 + C48030 * C22503) * C1030 +
            (C21591 * C22504 + C48030 * C22505) * C48044) *
               C21590) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C21588 +
            (C22507 + C22508) * C21589 + C22521 * C21590) *
               C48301 * C48438 -
           (C22666 * C21590 + (C22648 + C22649) * C21589 +
            ((C21591 * C436 + C48030 * C453) * C48044 +
             (C21591 * C424 + C48030 * C437) * C1030) *
                C21588) *
               C48301 * C48427 +
           (((C21591 * C426 + C48030 * C441) * C1030 +
             (C21591 * C444 + C48030 * C456) * C48044) *
                C21588 +
            (C22675 + C22676) * C21589 + C22683 * C21590) *
               C48301 * C48401) *
              C956 +
          (((C22649 + C22648) * C21588 + (C22647 + C22646) * C21589 +
            (C22679 + C22680) * C21590) *
               C48301 * C48427 -
           (C22522 * C21590 + (C22510 + C22509) * C21589 +
            (C22508 + C22507) * C21588) *
               C48301 * C48438 -
           ((C22681 + C22682) * C21590 + (C22678 + C22677) * C21589 +
            (C22676 + C22675) * C21588) *
               C48301 * C48401) *
              C957 +
          ((C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
               C48301 * C48438 -
           (((C21591 * C6405 + C48030 * C6407) * C48044 +
             (C21591 * C6401 + C48030 * C6403) * C1030) *
                C21590 +
            (C22680 + C22679) * C21589 + C22666 * C21588) *
               C48301 * C48427 +
           (C22683 * C21588 + (C22682 + C22681) * C21589 +
            ((C21591 * C22641 + C48030 * C22642) * C1030 +
             (C21591 * C22643 + C48030 * C22644) * C48044) *
                C21590) *
               C48301 * C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C565 +
            (C21591 * C131 + C48030 * C142) * C559 -
            (C21591 * C122 + C48030 * C129) * C566 -
            (C21591 * C132 + C48030 * C143) * C560 +
            (C21591 * C123 + C48030 * C130) * C567 +
            (C21591 * C133 + C48030 * C144) * C561 -
            (C21591 * C124 + C48030 * C134) * C568 -
            (C21591 * C135 + C48030 * C145) * C48402) *
               C21588 +
           (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
            C22013) *
               C21589 +
           (C21998 + C21999 - C22000 - C22001 + C22002 + C22003 - C22014 -
            C22015) *
               C21590) *
              C48301 * C48367 +
          (((C21591 * C421 + C48030 * C431) * C566 -
            ((C21591 * C436 + C48030 * C453) * C559 +
             (C21591 * C424 + C48030 * C437) * C565) +
            (C21591 * C435 + C48030 * C452) * C560 -
            (C21591 * C422 + C48030 * C432) * C567 -
            (C21591 * C434 + C48030 * C451) * C561 +
            (C21591 * C423 + C48030 * C433) * C568 +
            (C21591 * C438 + C48030 * C454) * C48402) *
               C21588 +
           ((C21591 * C824 + C48030 * C829) * C566 -
            ((C21591 * C831 + C48030 * C838) * C559 +
             (C21591 * C823 + C48030 * C828) * C565) +
            (C21591 * C832 + C48030 * C839) * C560 -
            (C21591 * C825 + C48030 * C830) * C567 -
            (C21591 * C833 + C48030 * C840) * C561 +
            (C21591 * C826 + C48030 * C834) * C568 +
            (C21591 * C835 + C48030 * C841) * C48402) *
               C21589 +
           ((C21591 * C1169 + C48030 * C1184) * C566 -
            ((C21591 * C1182 + C48030 * C1197) * C559 +
             (C21591 * C1170 + C48030 * C1185) * C565) +
            (C21591 * C1181 + C48030 * C1196) * C560 -
            (C21591 * C1168 + C48030 * C1183) * C567 -
            (C21591 * C1180 + C48030 * C1195) * C561 +
            (C21591 * C1457 + C48030 * C1458) * C568 +
            (C21591 * C1459 + C48030 * C1460) * C48402) *
               C21590) *
              C48301 * C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C21588 +
            (C22782 + C22783 - C22784 - C22785) * C21589 + C22808 * C21590) *
               C48301 * C48367 +
           (((C21591 * C421 + C48030 * C431) * C47132 -
             ((C21591 * C436 + C48030 * C453) * C48352 +
              (C21591 * C424 + C48030 * C437) * C47151) +
             (C21591 * C435 + C48030 * C452) * C48054) *
                C21588 +
            (C22956 - (C22957 + C22958) + C22959) * C21589 + C22976 * C21590) *
               C48301 * C48184) *
              C956 +
          (((C22784 - (C22783 + C22782) + C22785) * C21588 +
            (C22788 - (C22787 + C22786) + C22789) * C21589 + C22809 * C21590) *
               C48301 * C48367 +
           ((C22958 + C22957 - C22956 - C22959) * C21588 +
            (C22962 + C22961 - C22960 - C22963) * C21589 +
            (C22964 + C22965 - C22974 - C22975) * C21590) *
               C48301 * C48184) *
              C957 +
          ((C22808 * C21588 + (C22792 + C22791 - C22790 - C22793) * C21589 +
            (C22794 + C22795 - C22806 - C22807) * C21590) *
               C48301 * C48367 +
           (C22976 * C21588 + (C22974 - (C22965 + C22964) + C22975) * C21589 +
            ((C21591 * C6402 + C48030 * C6404) * C47132 -
             ((C21591 * C6405 + C48030 * C6407) * C48352 +
              (C21591 * C6401 + C48030 * C6403) * C47151) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C21590) *
               C48301 * C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C121 + C48030 * C128) * C116 +
           (C21591 * C131 + C48030 * C142) * C104 -
           (C21591 * C122 + C48030 * C129) * C117 -
           (C21591 * C132 + C48030 * C143) * C105 +
           (C21591 * C123 + C48030 * C130) * C118 +
           (C21591 * C133 + C48030 * C144) * C106 -
           (C21591 * C124 + C48030 * C134) * C119 -
           (C21591 * C135 + C48030 * C145) * C107 +
           (C21591 * C125 + C48030 * C136) * C120 +
           (C21591 * C137 + C48030 * C146) * C108) *
              C21588 +
          ((C21591 * C271 + C48030 * C284) * C116 +
           (C21591 * C283 + C48030 * C300) * C104 -
           (C21591 * C268 + C48030 * C278) * C117 -
           (C21591 * C282 + C48030 * C299) * C105 +
           (C21591 * C269 + C48030 * C279) * C118 +
           (C21591 * C281 + C48030 * C298) * C106 -
           (C21591 * C270 + C48030 * C280) * C119 -
           (C21591 * C285 + C48030 * C301) * C107 +
           (C21591 * C272 + C48030 * C286) * C120 +
           (C21591 * C287 + C48030 * C302) * C108) *
              C21589 +
          ((C21591 * C273 + C48030 * C288) * C116 +
           (C21591 * C291 + C48030 * C303) * C104 -
           (C21591 * C274 + C48030 * C289) * C117 -
           (C21591 * C292 + C48030 * C304) * C105 +
           (C21591 * C275 + C48030 * C290) * C118 +
           (C21591 * C293 + C48030 * C305) * C106 -
           (C21591 * C276 + C48030 * C294) * C119 -
           (C21591 * C295 + C48030 * C306) * C107 +
           (C21591 * C277 + C48030 * C296) * C120 +
           (C21591 * C297 + C48030 * C307) * C108) *
              C21590) *
         C48301 * C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C265 +
            (C21591 * C131 + C48030 * C142) * C259 -
            (C21591 * C122 + C48030 * C129) * C266 -
            (C21591 * C132 + C48030 * C143) * C260 +
            (C21591 * C123 + C48030 * C130) * C267 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C21589 +
           C21779 * C21590) *
              C48301 * C48097 * C48437 +
          ((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C21588 +
           (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C21589 +
           (C21769 - (C21770 + C21771) + C21772 - C21773 - C21774) * C21590) *
              C48301 * C48097 * C48425 +
          (C21779 * C21588 +
           (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) * C21589 +
           ((C21591 * C1034 + C48030 * C1043) * C265 +
            (C21591 * C1046 + C48030 * C1052) * C259 -
            (C21591 * C1035 + C48030 * C1044) * C266 -
            (C21591 * C1047 + C48030 * C1053) * C260 +
            (C21591 * C1036 + C48030 * C1045) * C267 +
            (C21591 * C1048 + C48030 * C1054) * C48392) *
               C21590) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C21588 +
           (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C21589 +
           C22440 * C21590) *
              C48301 * C48097 * C956 +
          ((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C21588 +
           (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C21589 +
           (C22430 - (C22431 + C22432) + C22433 - C22434 - C22435) * C21590) *
              C48301 * C48097 * C957 +
          (C22440 * C21588 +
           (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C21589 +
           ((C21591 * C1034 + C48030 * C1043) * C959 +
            (C21591 * C1046 + C48030 * C1052) * C48434 -
            (C21591 * C1035 + C48030 * C1044) * C960 -
            (C21591 * C1047 + C48030 * C1053) * C48421 +
            (C21591 * C1036 + C48030 * C1045) * C961 +
            (C21591 * C1048 + C48030 * C1054) * C48392) *
               C21590) *
              C48301 * C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C1030 +
            (C21591 * C131 + C48030 * C142) * C48044) *
               C21588 +
           (C22507 + C22508) * C21589 + C22521 * C21590) *
              C48301 * C48097 * C1025 -
          (C22522 * C21590 + (C22510 + C22509) * C21589 +
           (C22508 + C22507) * C21588) *
              C48301 * C48097 * C1026 +
          (C22521 * C21588 + (C22512 + C22511) * C21589 + C22531 * C21590) *
              C48301 * C48097 * C1027 -
          ((C22529 + C22530) * C21590 + (C22528 + C22527) * C21589 +
           C22522 * C21588) *
              C48301 * C48097 * C1028 +
          (C22531 * C21588 + (C22530 + C22529) * C21589 +
           ((C21591 * C22502 + C48030 * C22503) * C1030 +
            (C21591 * C22504 + C48030 * C22505) * C48044) *
               C21590) *
              C48301 * C48097 * C1029)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47161 +
             (C21591 * C131 + C48030 * C142) * C48049 -
             (C21591 * C122 + C48030 * C129) * C47157 -
             (C21591 * C132 + C48030 * C143) * C48057 +
             (C21591 * C123 + C48030 * C130) * C47167 +
             (C21591 * C133 + C48030 * C144) * C2723) *
                C15915 +
            (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C48416) *
               C10335 +
           ((C26502 * C47161 + C26503 * C48049 - C26504 * C47157 -
             C26505 * C48057 + C26506 * C47167 + C26507 * C2723) *
                C15915 +
            (C24433 + C24432 - C24431 - C24434 + C24435 + C24436) * C48416) *
               C48418) *
              C48097 * C48140 +
          (((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C15915 +
            (C24270 - (C24269 + C24268) + C24271 - C24272 - C24273) * C48416) *
               C10335 +
           ((C24431 - (C24432 + C24433) + C24434 - C24435 - C24436) * C15915 +
            (C24437 - (C24438 + C24439) + C24440 - C24441 - C24442) * C48416) *
               C48418) *
              C48097 * C48147 +
          ((C24284 * C15915 +
            (C24276 + C24275 - C24274 - C24277 + C24278 + C24279) * C48416) *
               C10335 +
           ((C24439 + C24438 - C24437 - C24440 + C24441 + C24442) * C15915 +
            (C22671 * C47161 + C22672 * C48049 - C22971 * C47157 -
             C22972 * C48057 + (C21591 * C1561 + C48030 * C1564) * C47167 +
             (C21591 * C1567 + C48030 * C1570) * C2723) *
                C48416) *
               C48418) *
              C48097 * C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C2463 +
              (C21591 * C131 + C48030 * C142) * C2457 -
              (C21591 * C122 + C48030 * C129) * C2464 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C15915 +
             (C23968 + C23969 - C23970 - C23971) * C48416) *
                C10335 +
            ((C29242 + C29243 - C29244 - C29245) * C15915 + C29262 * C48416) *
                C48418) *
               C48367 +
           (((C29244 - (C29243 + C29242) + C29245) * C15915 + C29263 * C48416) *
                C10335 +
            ((C29248 - (C29249 + C29250) + C29251) * C15915 + C29264 * C48416) *
                C48418) *
               C48184) *
              C48140 +
          ((((C23970 - (C23969 + C23968) + C23971) * C15915 +
             (C23974 - (C23973 + C23972) + C23975) * C48416) *
                C10335 +
            (C29263 * C15915 + C24595 * C48416) * C48418) *
               C48367 +
           ((C29262 * C15915 + C29824 * C48416) * C10335 +
            (C29265 * C15915 + (C24148 + C24149 - C24150 - C24151) * C48416) *
                C48418) *
               C48184) *
              C48147 +
          (((C23988 * C15915 + (C23978 + C23977 - C23976 - C23979) * C48416) *
                C10335 +
            (C29824 * C15915 + (C24590 + C24591 - C24592 - C24593) * C48416) *
                C48418) *
               C48367 +
           ((C24595 * C15915 + (C24592 - (C24591 + C24590) + C24593) * C48416) *
                C10335 +
            ((C24150 - (C24149 + C24148) + C24151) * C15915 +
             ((C21591 * C5880 + C48030 * C5882) * C2464 -
              (C22673 * C2457 + C22674 * C2463) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C15915 +
            (C23968 + C23969 - C23970 - C23971) * C48416) *
               C10335 +
           ((C26502 * C2463 + C26503 * C2457 - C26504 * C2464 -
             C26505 * C48054) *
                C15915 +
            (C24138 + C24137 - C24136 - C24139) * C48416) *
               C48418) *
              C48097 * C48444 +
          (((C23970 - (C23969 + C23968) + C23971) * C15915 +
            (C23974 - (C23973 + C23972) + C23975) * C48416) *
               C10335 +
           ((C24136 - (C24137 + C24138) + C24139) * C15915 + C24595 * C48416) *
               C48418) *
              C48097 * C48440 +
          ((C23988 * C15915 + (C23978 + C23977 - C23976 - C23979) * C48416) *
               C10335 +
           ((C24142 + C24141 - C24140 - C24143) * C15915 +
            (C24590 + C24591 - C24592 - C24593) * C48416) *
               C48418) *
              C48097 * C48430 +
          ((C23989 * C15915 + (C23982 - (C23981 + C23980) + C23983) * C48416) *
               C10335 +
           ((C24592 - (C24591 + C24590) + C24593) * C15915 +
            ((C21591 * C6402 + C48030 * C6404) * C2464 -
             (C23084 * C2457 + C23085 * C2463) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C48416) *
               C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2355 +
             (C21591 * C131 + C48030 * C142) * C48443 -
             (C21591 * C122 + C48030 * C129) * C2356 -
             (C21591 * C132 + C48030 * C143) * C48436 +
             (C21591 * C123 + C48030 * C130) * C2357 +
             (C21591 * C133 + C48030 * C144) * C48423 -
             (C21591 * C124 + C48030 * C134) * C2358 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C15915 +
            (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
             C23861) *
                C48416) *
               C10335 +
           ((C26502 * C2355 + C26503 * C48443 - C26504 * C2356 -
             C26505 * C48436 + C26506 * C2357 + C26507 * C48423 -
             C26814 * C2358 - C26815 * C48402) *
                C15915 +
            (C28910 + C28911 - C28912 - C28913 + C28914 + C28915 - C28916 -
             C28917) *
                C48416) *
               C48418) *
              C48097 * C2353 +
          (((C23856 - (C23855 + C23854) + C23857 - C23858 - C23859 + C23860 +
             C23861) *
                C15915 +
            (C23864 - (C23863 + C23862) + C23865 - C23866 - C23867 + C23868 +
             C23869) *
                C48416) *
               C10335 +
           ((C28912 - (C28911 + C28910) + C28913 - C28914 - C28915 + C28916 +
             C28917) *
                C15915 +
            (C22290 * C2356 - (C22291 * C48443 + C22292 * C2355) +
             C22293 * C48436 - C22294 * C2357 - C22295 * C48423 +
             (C21591 * C1457 + C48030 * C1458) * C2358 +
             (C21591 * C1459 + C48030 * C1460) * C48402) *
                C48416) *
               C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C2463 +
              (C21591 * C131 + C48030 * C142) * C2457 -
              (C21591 * C122 + C48030 * C129) * C2464 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C15915 +
             (C23968 + C23969 - C23970 - C23971) * C48416) *
                C10335 +
            ((C29242 + C29243 - C29244 - C29245) * C15915 + C29262 * C48416) *
                C48418) *
               C48438 +
           (((C29244 - (C29243 + C29242) + C29245) * C15915 + C29263 * C48416) *
                C10335 +
            ((C29248 - (C29249 + C29250) + C29251) * C15915 + C29264 * C48416) *
                C48418) *
               C48427 +
           (((C29250 + C29249 - C29248 - C29251) * C15915 + C29265 * C48416) *
                C10335 +
            ((C28282 * C2463 + C28283 * C2457 - C28644 * C2464 -
              C28645 * C48054) *
                 C15915 +
             (C29254 + C29255 - C29256 - C29257) * C48416) *
                C48418) *
               C48401) *
              C2353 +
          ((((C23970 - (C23969 + C23968) + C23971) * C15915 +
             (C23974 - (C23973 + C23972) + C23975) * C48416) *
                C10335 +
            (C29263 * C15915 + C24595 * C48416) * C48418) *
               C48438 +
           ((C29262 * C15915 + (C24142 + C24141 - C24140 - C24143) * C48416) *
                C10335 +
            (C29265 * C15915 + (C24148 + C24149 - C24150 - C24151) * C48416) *
                C48418) *
               C48427 +
           ((C29264 * C15915 + (C24150 - (C24149 + C24148) + C24151) * C48416) *
                C10335 +
            ((C29256 - (C29255 + C29254) + C29257) * C15915 +
             ((C21591 * C7270 + C48030 * C7272) * C2464 -
              (C23748 * C2457 + C23749 * C2463) +
              (C21591 * C7274 + C48030 * C7276) * C48054) *
                 C48416) *
                C48418) *
               C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47161 +
              (C21591 * C131 + C48030 * C142) * C48049 -
              (C21591 * C122 + C48030 * C129) * C47157 -
              (C21591 * C132 + C48030 * C143) * C48057 +
              (C21591 * C123 + C48030 * C130) * C47167 +
              (C21591 * C133 + C48030 * C144) * C2723) *
                 C15915 +
             (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C48416) *
                C10335 +
            ((C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C15915 +
             C29626 * C48416) *
                C48418) *
               C48367 +
           (((C29608 - (C29607 + C29606) + C29609 - C29610 - C29611) * C15915 +
             C29627 * C48416) *
                C10335 +
            ((C26508 * C47157 - (C26509 * C48049 + C26510 * C47161) +
              C26511 * C48057 - C26512 * C47167 - C26513 * C2723) *
                 C15915 +
             (C29614 - (C29615 + C29616) + C29617 - C29618 - C29619) * C48416) *
                C48418) *
               C48184) *
              C2353 +
          ((((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C15915 +
             (C24270 - (C24269 + C24268) + C24271 - C24272 - C24273) * C48416) *
                C10335 +
            (C29627 * C15915 +
             (C24437 - (C24438 + C24439) + C24440 - C24441 - C24442) * C48416) *
                C48418) *
               C48367 +
           ((C29626 * C15915 +
             (C24439 + C24438 - C24437 - C24440 + C24441 + C24442) * C48416) *
                C10335 +
            ((C29616 + C29615 - C29614 - C29617 + C29618 + C29619) * C15915 +
             (C22669 * C47161 + C22670 * C48049 - C23534 * C47157 -
              C23535 * C48057 + (C21591 * C1173 + C48030 * C1188) * C47167 +
              (C21591 * C1191 + C48030 * C1200) * C2723) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2355 +
             (C21591 * C131 + C48030 * C142) * C48443 -
             (C21591 * C122 + C48030 * C129) * C2356 -
             (C21591 * C132 + C48030 * C143) * C48436 +
             (C21591 * C123 + C48030 * C130) * C2357 +
             (C21591 * C133 + C48030 * C144) * C48423 -
             (C21591 * C124 + C48030 * C134) * C2358 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C15915 +
            (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
             C23861) *
                C48416) *
               C10335 +
           ((C26502 * C2355 + C26503 * C48443 - C26504 * C2356 -
             C26505 * C48436 + C26506 * C2357 + C26507 * C48423 -
             C26814 * C2358 - C26815 * C48402) *
                C15915 +
            (C28910 + C28911 - C28912 - C28913 + C28914 + C28915 - C28916 -
             C28917) *
                C48416) *
               C48418) *
              C48097 * C2353 +
          (((C23856 - (C23855 + C23854) + C23857 - C23858 - C23859 + C23860 +
             C23861) *
                C15915 +
            (C23864 - (C23863 + C23862) + C23865 - C23866 - C23867 + C23868 +
             C23869) *
                C48416) *
               C10335 +
           ((C28912 - (C28911 + C28910) + C28913 - C28914 - C28915 + C28916 +
             C28917) *
                C15915 +
            (C22290 * C2356 - (C22291 * C48443 + C22292 * C2355) +
             C22293 * C48436 - C22294 * C2357 - C22295 * C48423 +
             (C21591 * C1457 + C48030 * C1458) * C2358 +
             (C21591 * C1459 + C48030 * C1460) * C48402) *
                C48416) *
               C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C15915 +
            (C23968 + C23969 - C23970 - C23971) * C48416) *
               C10335 +
           ((C26502 * C2463 + C26503 * C2457 - C26504 * C2464 -
             C26505 * C48054) *
                C15915 +
            (C24138 + C24137 - C24136 - C24139) * C48416) *
               C48418) *
              C48097 * C48444 +
          (((C23970 - (C23969 + C23968) + C23971) * C15915 +
            (C23974 - (C23973 + C23972) + C23975) * C48416) *
               C10335 +
           ((C24136 - (C24137 + C24138) + C24139) * C15915 + C24595 * C48416) *
               C48418) *
              C48097 * C48440 +
          ((C23988 * C15915 + (C23978 + C23977 - C23976 - C23979) * C48416) *
               C10335 +
           ((C24142 + C24141 - C24140 - C24143) * C15915 +
            (C24590 + C24591 - C24592 - C24593) * C48416) *
               C48418) *
              C48097 * C48430 +
          ((C23989 * C15915 + (C23982 - (C23981 + C23980) + C23983) * C48416) *
               C10335 +
           ((C24592 - (C24591 + C24590) + C24593) * C15915 +
            ((C21591 * C6402 + C48030 * C6404) * C2464 -
             (C23084 * C2457 + C23085 * C2463) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C48416) *
               C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47151 +
              (C21591 * C131 + C48030 * C142) * C48352 -
              (C21591 * C122 + C48030 * C129) * C47132 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C15915 +
             (C22782 + C22783 - C22784 - C22785) * C48416) *
                C10335 +
            ((C27730 + C27731 - C27732 - C27733) * C15915 + C27740 * C48416) *
                C48418) *
               C3120 +
           (((C27732 - (C27731 + C27730) + C27733) * C15915 + C27741 * C48416) *
                C10335 +
            ((C28488 - (C28489 + C28490) + C28491) * C15915 + C28504 * C48416) *
                C48418) *
               C48184) *
              C48140 +
          ((((C22784 - (C22783 + C22782) + C22785) * C15915 +
             (C22788 - (C22787 + C22786) + C22789) * C48416) *
                C10335 +
            (C27741 * C15915 + C22976 * C48416) * C48418) *
               C3120 +
           ((C27740 * C15915 + C27742 * C48416) * C10335 +
            (C28505 * C15915 + (C23526 + C23527 - C23538 - C23539) * C48416) *
                C48418) *
               C48184) *
              C48147 +
          (((C22808 * C15915 + (C22792 + C22791 - C22790 - C22793) * C48416) *
                C10335 +
            (C27742 * C15915 + (C22964 + C22965 - C22974 - C22975) * C48416) *
                C48418) *
               C3120 +
           ((C22976 * C15915 + (C22974 - (C22965 + C22964) + C22975) * C48416) *
                C10335 +
            ((C23538 - (C23527 + C23526) + C23539) * C15915 +
             ((C21591 * C5880 + C48030 * C5882) * C47132 -
              (C22673 * C48352 + C22674 * C47151) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C121 + C48030 * C128) * C1030 +
                       (C21591 * C131 + C48030 * C142) * C48044) *
                          C15915 +
                      (C22507 + C22508) * C48416) *
                         C10335 +
                     ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
                        C48180 -
                    ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
                     (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
                        C48187 +
                    (((C27401 + C27400) * C15915 + C27403 * C48416) * C10335 +
                     ((C28288 + C28289) * C15915 + C28778 * C48416) * C48418) *
                        C3628) *
                       C48140 +
                   (((C27398 * C15915 + C27404 * C48416) * C10335 +
                     (C27403 * C15915 + C22683 * C48416) * C48418) *
                        C48187 -
                    ((C22666 * C48416 + C27402 * C15915) * C48418 +
                     ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                         C10335) *
                        C48180 -
                    (((C23752 + C23753) * C48416 + C28779 * C15915) * C48418 +
                     (C27405 * C48416 + C27399 * C15915) * C10335) *
                        C3628) *
                       C48147 +
                   (((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
                     (C27404 * C15915 + C23079 * C48416) * C48418) *
                        C48180 -
                    (((C22681 + C22682) * C48416 + C27405 * C15915) * C48418 +
                     (C27873 * C48416 + C22666 * C15915) * C10335) *
                        C48187 +
                    ((C22683 * C15915 + (C22682 + C22681) * C48416) * C10335 +
                     ((C23753 + C23752) * C15915 +
                      ((C21591 * C23735 + C48030 * C23736) * C1030 +
                       (C21591 * C23737 + C48030 * C23738) * C48044) *
                          C48416) *
                         C48418) *
                        C3628) *
                       C2726)) /
                 (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C15915 +
             (C22507 + C22508) * C48416) *
                C10335 +
            ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
               C3120 -
           ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
               C48184) *
              C48444 +
          (((C27398 * C15915 + C27404 * C48416) * C10335 +
            (C27403 * C15915 + C22683 * C48416) * C48418) *
               C48184 -
           ((C22666 * C48416 + C27402 * C15915) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                C10335) *
               C3120) *
              C48440 +
          (((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
            (C27404 * C15915 + C23079 * C48416) * C48418) *
               C3120 -
           (((C22681 + C22682) * C48416 + C27405 * C15915) * C48418 +
            (C27873 * C48416 + C22666 * C15915) * C10335) *
               C48184) *
              C48430 +
          (((C23079 * C15915 + (C23087 + C23086) * C48416) * C10335 +
            ((C22682 + C22681) * C15915 +
             ((C21591 * C22641 + C48030 * C22642) * C1030 +
              (C21591 * C22643 + C48030 * C22644) * C48044) *
                 C48416) *
                C48418) *
               C48184 -
           (((C23086 + C23087) * C48416 + C27873 * C15915) * C48418 +
            ((C22528 + C22527) * C48416 + C22522 * C15915) * C10335) *
               C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C959 +
              (C21591 * C131 + C48030 * C142) * C48434 -
              (C21591 * C122 + C48030 * C129) * C960 -
              (C21591 * C132 + C48030 * C143) * C48421 +
              (C21591 * C123 + C48030 * C130) * C961 +
              (C21591 * C133 + C48030 * C144) * C48392) *
                 C15915 +
             (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
                C10335 +
            ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C15915 +
             C31033 * C48416) *
                C48418) *
               C3120 +
           (((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C15915 +
             C31034 * C48416) *
                C10335 +
            ((C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C15915 +
             (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48416) *
                C48418) *
               C48184) *
              C2353 +
          ((((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C15915 +
             (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
                C10335 +
            (C31034 * C15915 +
             (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
                C48418) *
               C3120 +
           ((C31033 * C15915 +
             (C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C48416) *
                C10335 +
            ((C28034 + C28033 - C28032 - C28035 + C28036 + C28037) * C15915 +
             (C22669 * C959 + C22670 * C48434 - C23534 * C960 -
              C23535 * C48421 + (C21591 * C1173 + C48030 * C1188) * C961 +
              (C21591 * C1191 + C48030 * C1200) * C48392) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C15915 +
             (C22507 + C22508) * C48416) *
                C10335 +
            ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
               C48445 -
           ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
               C48442 +
           (((C27401 + C27400) * C15915 + C27403 * C48416) * C10335 +
            ((C28288 + C28289) * C15915 + C28778 * C48416) * C48418) *
               C48433 -
           (((C28290 + C28291) * C48416 + (C28292 + C28293) * C15915) * C48418 +
            (C28779 * C48416 + (C28289 + C28288) * C15915) * C10335) *
               C48414) *
              C2353 +
          (((C27398 * C15915 + C27404 * C48416) * C10335 +
            (C27403 * C15915 + C22683 * C48416) * C48418) *
               C48442 -
           ((C22666 * C48416 + C27402 * C15915) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                C10335) *
               C48445 -
           (((C23752 + C23753) * C48416 + C28779 * C15915) * C48418 +
            (C27405 * C48416 + C27399 * C15915) * C10335) *
               C48433 +
           ((C28778 * C15915 + (C23753 + C23752) * C48416) * C10335 +
            ((C28291 + C28290) * C15915 +
             ((C21591 * C23369 + C48030 * C23370) * C1030 +
              (C21591 * C23371 + C48030 * C23372) * C48044) *
                 C48416) *
                C48418) *
               C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47151 +
              (C21591 * C131 + C48030 * C142) * C48352 -
              (C21591 * C122 + C48030 * C129) * C47132 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C15915 +
             (C22782 + C22783 - C22784 - C22785) * C48416) *
                C10335 +
            ((C27730 + C27731 - C27732 - C27733) * C15915 + C27740 * C48416) *
                C48418) *
               C48180 +
           (((C27732 - (C27731 + C27730) + C27733) * C15915 + C27741 * C48416) *
                C10335 +
            ((C28488 - (C28489 + C28490) + C28491) * C15915 + C28504 * C48416) *
                C48418) *
               C48187 +
           (((C28490 + C28489 - C28488 - C28491) * C15915 + C28505 * C48416) *
                C10335 +
            ((C28638 + C28639 - C28646 - C28647) * C15915 +
             (C28494 + C28495 - C28506 - C28507) * C48416) *
                C48418) *
               C3628) *
              C2353 +
          ((((C22784 - (C22783 + C22782) + C22785) * C15915 +
             (C22788 - (C22787 + C22786) + C22789) * C48416) *
                C10335 +
            (C27741 * C15915 + C22976 * C48416) * C48418) *
               C48180 +
           ((C27740 * C15915 + C27742 * C48416) * C10335 +
            (C28505 * C15915 + (C23526 + C23527 - C23538 - C23539) * C48416) *
                C48418) *
               C48187 +
           ((C28504 * C15915 + (C23538 - (C23527 + C23526) + C23539) * C48416) *
                C10335 +
            ((C28506 - (C28495 + C28494) + C28507) * C15915 +
             ((C21591 * C7270 + C48030 * C7272) * C47132 -
              (C23748 * C48352 + C23749 * C47151) +
              (C21591 * C7274 + C48030 * C7276) * C48054) *
                 C48416) *
                C48418) *
               C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C959 +
              (C21591 * C131 + C48030 * C142) * C48434 -
              (C21591 * C122 + C48030 * C129) * C960 -
              (C21591 * C132 + C48030 * C143) * C48421 +
              (C21591 * C123 + C48030 * C130) * C961 +
              (C21591 * C133 + C48030 * C144) * C48392) *
                 C15915 +
             (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
                C10335 +
            ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C15915 +
             C31033 * C48416) *
                C48418) *
               C3120 +
           (((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C15915 +
             C31034 * C48416) *
                C10335 +
            ((C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C15915 +
             (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48416) *
                C48418) *
               C48184) *
              C2353 +
          ((((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C15915 +
             (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
                C10335 +
            (C31034 * C15915 +
             (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
                C48418) *
               C3120 +
           ((C31033 * C15915 +
             (C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C48416) *
                C10335 +
            ((C28034 + C28033 - C28032 - C28035 + C28036 + C28037) * C15915 +
             (C22669 * C959 + C22670 * C48434 - C23534 * C960 -
              C23535 * C48421 + (C21591 * C1173 + C48030 * C1188) * C961 +
              (C21591 * C1191 + C48030 * C1200) * C48392) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C15915 +
             (C22507 + C22508) * C48416) *
                C10335 +
            ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
               C3120 -
           ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
               C48184) *
              C48444 +
          (((C27398 * C15915 + C27404 * C48416) * C10335 +
            (C27403 * C15915 + C22683 * C48416) * C48418) *
               C48184 -
           ((C22666 * C48416 + C27402 * C15915) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                C10335) *
               C3120) *
              C48440 +
          (((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
            (C27404 * C15915 + C23079 * C48416) * C48418) *
               C3120 -
           (((C22681 + C22682) * C48416 + C27405 * C15915) * C48418 +
            (C27873 * C48416 + C22666 * C15915) * C10335) *
               C48184) *
              C48430 +
          (((C23079 * C15915 + (C23087 + C23086) * C48416) * C10335 +
            ((C22682 + C22681) * C15915 +
             ((C21591 * C22641 + C48030 * C22642) * C1030 +
              (C21591 * C22643 + C48030 * C22644) * C48044) *
                 C48416) *
                C48418) *
               C48184 -
           (((C23086 + C23087) * C48416 + C27873 * C15915) * C48418 +
            ((C22528 + C22527) * C48416 + C22522 * C15915) * C10335) *
               C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C15915 +
            (C22782 + C22783 - C22784 - C22785) * C48416) *
               C10335 +
           ((C26502 * C47151 + C26503 * C48352 - C26504 * C47132 -
             C26505 * C48054) *
                C15915 +
            (C22958 + C22957 - C22956 - C22959) * C48416) *
               C48418) *
              C48097 * C1301 +
          (((C22784 - (C22783 + C22782) + C22785) * C15915 +
            (C22788 - (C22787 + C22786) + C22789) * C48416) *
               C10335 +
           ((C22956 - (C22957 + C22958) + C22959) * C15915 + C22976 * C48416) *
               C48418) *
              C48097 * C1302 +
          ((C22808 * C15915 + (C22792 + C22791 - C22790 - C22793) * C48416) *
               C10335 +
           ((C22962 + C22961 - C22960 - C22963) * C15915 +
            (C22964 + C22965 - C22974 - C22975) * C48416) *
               C48418) *
              C48097 * C1303 +
          ((C22809 * C15915 + (C22806 - (C22795 + C22794) + C22807) * C48416) *
               C10335 +
           ((C22974 - (C22965 + C22964) + C22975) * C15915 +
            ((C21591 * C6402 + C48030 * C6404) * C47132 -
             (C23084 * C48352 + C23085 * C47151) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C48416) *
               C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C565 +
             (C21591 * C131 + C48030 * C142) * C559 -
             (C21591 * C122 + C48030 * C129) * C566 -
             (C21591 * C132 + C48030 * C143) * C560 +
             (C21591 * C123 + C48030 * C130) * C567 +
             (C21591 * C133 + C48030 * C144) * C561 -
             (C21591 * C124 + C48030 * C134) * C568 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C15915 +
            (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
             C22013) *
                C48416) *
               C10335 +
           ((C26502 * C565 + C26503 * C559 - C26504 * C566 - C26505 * C560 +
             C26506 * C567 + C26507 * C561 -
             (C21591 * C423 + C48030 * C433) * C568 -
             (C21591 * C438 + C48030 * C454) * C48402) *
                C15915 +
            (C26660 + C26661 - C26662 - C26663 + C26664 + C26665 - C26672 -
             C26673) *
                C48416) *
               C48418) *
              C48097 * C48366 +
          (((C21990 - (C21989 + C21988) + C21991 - C21992 - C21993 + C22012 +
             C22013) *
                C15915 +
            (C22000 - (C21999 + C21998) + C22001 - C22002 - C22003 + C22014 +
             C22015) *
                C48416) *
               C10335 +
           ((C26662 - (C26661 + C26660) + C26663 - C26664 - C26665 + C26672 +
             C26673) *
                C15915 +
            (C22290 * C566 - (C22291 * C559 + C22292 * C565) + C22293 * C560 -
             C22294 * C567 - C22295 * C561 +
             (C21591 * C1457 + C48030 * C1458) * C568 +
             (C21591 * C1459 + C48030 * C1460) * C48402) *
                C48416) *
               C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47151 +
              (C21591 * C131 + C48030 * C142) * C48352 -
              (C21591 * C122 + C48030 * C129) * C47132 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C15915 +
             (C22782 + C22783 - C22784 - C22785) * C48416) *
                C10335 +
            ((C27730 + C27731 - C27732 - C27733) * C15915 + C27740 * C48416) *
                C48418) *
               C1681 +
           (((C27732 - (C27731 + C27730) + C27733) * C15915 + C27741 * C48416) *
                C10335 +
            ((C28488 - (C28489 + C28490) + C28491) * C15915 + C28504 * C48416) *
                C48418) *
               C1682 +
           (((C28490 + C28489 - C28488 - C28491) * C15915 + C28505 * C48416) *
                C10335 +
            ((C28282 * C47151 + C28283 * C48352 -
              (C21591 * C1862 + C48030 * C1871) * C47132 -
              (C21591 * C1868 + C48030 * C1880) * C48054) *
                 C15915 +
             (C28494 + C28495 - C28506 - C28507) * C48416) *
                C48418) *
               C48401) *
              C48366 +
          ((((C22784 - (C22783 + C22782) + C22785) * C15915 +
             (C22788 - (C22787 + C22786) + C22789) * C48416) *
                C10335 +
            (C27741 * C15915 + C22976 * C48416) * C48418) *
               C1681 +
           ((C27740 * C15915 + C27742 * C48416) * C10335 +
            (C28505 * C15915 + (C23526 + C23527 - C23538 - C23539) * C48416) *
                C48418) *
               C1682 +
           ((C28504 * C15915 + (C23538 - (C23527 + C23526) + C23539) * C48416) *
                C10335 +
            ((C28506 - (C28495 + C28494) + C28507) * C15915 +
             ((C21591 * C7270 + C48030 * C7272) * C47132 -
              (C23748 * C48352 + C23749 * C47151) +
              (C21591 * C7274 + C48030 * C7276) * C48054) *
                 C48416) *
                C48418) *
               C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C15915 +
             (C22507 + C22508) * C48416) *
                C10335 +
            ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
               C48367 -
           ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
               C48184) *
              C1301 +
          (((C27398 * C15915 + C27404 * C48416) * C10335 +
            (C27403 * C15915 + C22683 * C48416) * C48418) *
               C48184 -
           ((C22666 * C48416 + C27402 * C15915) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                C10335) *
               C48367) *
              C1302 +
          (((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
            (C27404 * C15915 + C23079 * C48416) * C48418) *
               C48367 -
           (((C22681 + C22682) * C48416 + C27405 * C15915) * C48418 +
            (C27873 * C48416 + C22666 * C15915) * C10335) *
               C48184) *
              C1303 +
          (((C23079 * C15915 + (C23087 + C23086) * C48416) * C10335 +
            ((C22682 + C22681) * C15915 +
             ((C21591 * C22641 + C48030 * C22642) * C1030 +
              (C21591 * C22643 + C48030 * C22644) * C48044) *
                 C48416) *
                C48418) *
               C48184 -
           (((C23086 + C23087) * C48416 + C27873 * C15915) * C48418 +
            ((C22528 + C22527) * C48416 + C22522 * C15915) * C10335) *
               C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C265 +
              (C21591 * C131 + C48030 * C142) * C259 -
              (C21591 * C122 + C48030 * C129) * C266 -
              (C21591 * C132 + C48030 * C143) * C260 +
              (C21591 * C123 + C48030 * C130) * C267 +
              (C21591 * C133 + C48030 * C144) * C48392) *
                 C15915 +
             (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
                C10335 +
            ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C15915 +
             C27020 * C48416) *
                C48418) *
               C48367 +
           (((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C15915 +
             C27021 * C48416) *
                C10335 +
            ((C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C15915 +
             (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48416) *
                C48418) *
               C48184) *
              C48366 +
          ((((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C15915 +
             (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C48416) *
                C10335 +
            (C27021 * C15915 +
             (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C48416) *
                C48418) *
               C48367 +
           ((C27020 * C15915 +
             (C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C48416) *
                C10335 +
            ((C26496 + C26495 - C26494 - C26497 + C26528 + C26529) * C15915 +
             (C22669 * C265 + C22670 * C259 - C23534 * C266 - C23535 * C260 +
              (C21591 * C1173 + C48030 * C1188) * C267 +
              (C21591 * C1191 + C48030 * C1200) * C48392) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C15915 +
             (C22507 + C22508) * C48416) *
                C10335 +
            ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
               C2133 -
           ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
               C2134 +
           (((C27401 + C27400) * C15915 + C27403 * C48416) * C10335 +
            ((C28288 + C28289) * C15915 + C28778 * C48416) * C48418) *
               C2135 -
           (((C28290 + C28291) * C48416 + (C28292 + C28293) * C15915) * C48418 +
            (C28779 * C48416 + (C28289 + C28288) * C15915) * C10335) *
               C48414) *
              C48366 +
          (((C27398 * C15915 + C27404 * C48416) * C10335 +
            (C27403 * C15915 + C22683 * C48416) * C48418) *
               C2134 -
           ((C22666 * C48416 + C27402 * C15915) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                C10335) *
               C2133 -
           (((C23752 + C23753) * C48416 + C28779 * C15915) * C48418 +
            (C27405 * C48416 + C27399 * C15915) * C10335) *
               C2135 +
           ((C28778 * C15915 + (C23753 + C23752) * C48416) * C10335 +
            ((C28291 + C28290) * C15915 +
             ((C21591 * C23369 + C48030 * C23370) * C1030 +
              (C21591 * C23371 + C48030 * C23372) * C48044) *
                 C48416) *
                C48418) *
               C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21591 * C121 + C48030 * C128) * C116 +
                (C21591 * C131 + C48030 * C142) * C104 -
                (C21591 * C122 + C48030 * C129) * C117 -
                (C21591 * C132 + C48030 * C143) * C105 +
                (C21591 * C123 + C48030 * C130) * C118 +
                (C21591 * C133 + C48030 * C144) * C106 -
                (C21591 * C124 + C48030 * C134) * C119 -
                (C21591 * C135 + C48030 * C145) * C107 +
                (C21591 * C125 + C48030 * C136) * C120 +
                (C21591 * C137 + C48030 * C146) * C108) *
                   C15915 +
               (C21739 * C116 + C21740 * C104 - C21741 * C117 - C21742 * C105 +
                C21743 * C118 + C21744 * C106 - C22008 * C119 - C22009 * C107 +
                (C21591 * C272 + C48030 * C286) * C120 +
                (C21591 * C287 + C48030 * C302) * C108) *
                   C48416) *
                  C10335 +
              (((C21591 * C424 + C48030 * C437) * C116 +
                (C21591 * C436 + C48030 * C453) * C104 -
                (C21591 * C421 + C48030 * C431) * C117 -
                (C21591 * C435 + C48030 * C452) * C105 +
                (C21591 * C422 + C48030 * C432) * C118 +
                (C21591 * C434 + C48030 * C451) * C106 -
                (C21591 * C423 + C48030 * C433) * C119 -
                (C21591 * C438 + C48030 * C454) * C107 +
                (C21591 * C425 + C48030 * C439) * C120 +
                (C21591 * C440 + C48030 * C455) * C108) *
                   C15915 +
               (C22286 * C116 + C22285 * C104 - C22284 * C117 - C22287 * C105 +
                C22288 * C118 + C22289 * C106 -
                (C21591 * C826 + C48030 * C834) * C119 -
                (C21591 * C835 + C48030 * C841) * C107 +
                (C21591 * C827 + C48030 * C836) * C120 +
                (C21591 * C837 + C48030 * C842) * C108) *
                   C48416) *
                  C48418) *
             C48097 * C48085 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21591 * C121 + C48030 * C128) * C265 +
                 (C21591 * C131 + C48030 * C142) * C259 -
                 (C21591 * C122 + C48030 * C129) * C266 -
                 (C21591 * C132 + C48030 * C143) * C260 +
                 (C21591 * C123 + C48030 * C130) * C267 +
                 (C21591 * C133 + C48030 * C144) * C48392) *
                    C15915 +
                (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) *
                    C48416) *
                   C10335 +
               (((C21591 * C424 + C48030 * C437) * C265 +
                 (C21591 * C436 + C48030 * C453) * C259 -
                 (C21591 * C421 + C48030 * C431) * C266 -
                 (C21591 * C435 + C48030 * C452) * C260 +
                 (C21591 * C422 + C48030 * C432) * C267 +
                 (C21591 * C434 + C48030 * C451) * C48392) *
                    C15915 +
                (C22298 + C22297 - C22296 - C22299 + C22300 + C22301) *
                    C48416) *
                   C48418) *
                  C48097 * C48437 +
              (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) *
                    C15915 +
                (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) *
                    C48416) *
                   C10335 +
               ((C22296 - (C22297 + C22298) + C22299 - C22300 - C22301) *
                    C15915 +
                (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) *
                    C48416) *
                   C48418) *
                  C48097 * C48425 +
              ((C21779 * C15915 +
                (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) *
                    C48416) *
                   C10335 +
               ((C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C15915 +
                (C22671 * C265 + C22672 * C259 - C22971 * C266 - C22972 * C260 +
                 (C21591 * C1561 + C48030 * C1564) * C267 +
                 (C21591 * C1567 + C48030 * C1570) * C48392) *
                    C48416) *
                   C48418) *
                  C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
               C10335 +
           ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C15915 +
            (C22298 + C22297 - C22296 - C22299 + C22300 + C22301) * C48416) *
               C48418) *
              C48438 +
          (((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C15915 +
            (C22296 - (C22297 + C22298) + C22299 - C22300 - C22301) * C48416) *
               C10335 +
           ((C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C15915 +
            (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48416) *
               C48418) *
              C48427 +
          (((C26524 + C26523 - C26522 - C26525 + C26526 + C26527) * C15915 +
            (C26496 + C26495 - C26494 - C26497 + C26528 + C26529) * C48416) *
               C10335 +
           (((C21591 * C1863 + C48030 * C1872) * C265 +
             (C21591 * C1869 + C48030 * C1881) * C259 -
             (C21591 * C1862 + C48030 * C1871) * C266 -
             (C21591 * C1868 + C48030 * C1880) * C260 +
             (C21591 * C1861 + C48030 * C1870) * C267 +
             (C21591 * C1867 + C48030 * C1879) * C48392) *
                C15915 +
            (C23751 * C265 + C23750 * C259 -
             (C21591 * C2240 + C48030 * C2243) * C266 -
             (C21591 * C2246 + C48030 * C2249) * C260 +
             (C21591 * C2241 + C48030 * C2244) * C267 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48416) *
               C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C10335 +
           ((C26502 * C959 + C26503 * C48434 - C26504 * C960 - C26505 * C48421 +
             C26506 * C961 + C26507 * C48392) *
                C15915 +
            (C25488 + C25487 - C25486 - C25489 + C25490 + C25491) * C48416) *
               C48418) *
              C48097 * C956 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C15915 +
            (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
               C10335 +
           ((C25486 - (C25487 + C25488) + C25489 - C25490 - C25491) * C15915 +
            (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
               C48418) *
              C48097 * C957 +
          ((C22440 * C15915 +
            (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C48416) *
               C10335 +
           ((C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C15915 +
            (C22671 * C959 + C22672 * C48434 - C22971 * C960 - C22972 * C48421 +
             (C21591 * C1561 + C48030 * C1564) * C961 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C15915 +
            (C22507 + C22508) * C48416) *
               C10335 +
           ((C26502 * C1030 + C26503 * C48044) * C15915 +
            (C22649 + C22648) * C48416) *
               C48418) *
              C48097 * C1025 -
          ((C22666 * C48416 + (C22648 + C22649) * C15915) * C48418 +
           ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) * C10335) *
              C48097 * C1026 +
          ((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
           ((C22647 + C22646) * C15915 + C23079 * C48416) * C48418) *
              C48097 * C1027 -
          (((C23086 + C23087) * C48416 + (C22680 + C22679) * C15915) * C48418 +
           ((C22528 + C22527) * C48416 + C22522 * C15915) * C10335) *
              C48097 * C1028 +
          ((C22531 * C15915 + (C22530 + C22529) * C48416) * C10335 +
           ((C23087 + C23086) * C15915 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C48416) *
               C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C15915 +
             (C22507 + C22508) * C48416) *
                C10335 +
            ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
               C48438 -
           ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
               C48427 +
           (((C27401 + C27400) * C15915 + C27403 * C48416) * C10335 +
            (((C21591 * C1863 + C48030 * C1872) * C1030 +
              (C21591 * C1869 + C48030 * C1881) * C48044) *
                 C15915 +
             (C23755 + C23754) * C48416) *
                C48418) *
               C48401) *
              C956 +
          (((C27398 * C15915 + C27404 * C48416) * C10335 +
            (C27403 * C15915 + C22683 * C48416) * C48418) *
               C48427 -
           ((C22666 * C48416 + C27402 * C15915) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                C10335) *
               C48438 -
           (((C23752 + C23753) * C48416 + (C23754 + C23755) * C15915) * C48418 +
            (C27405 * C48416 + C27399 * C15915) * C10335) *
               C48401) *
              C957 +
          (((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
            (C27404 * C15915 + C23079 * C48416) * C48418) *
               C48438 -
           (((C22681 + C22682) * C48416 + C27405 * C15915) * C48418 +
            ((C22680 + C22679) * C48416 + C22666 * C15915) * C10335) *
               C48427 +
           ((C22683 * C15915 + (C22682 + C22681) * C48416) * C10335 +
            ((C23753 + C23752) * C15915 +
             ((C21591 * C23735 + C48030 * C23736) * C1030 +
              (C21591 * C23737 + C48030 * C23738) * C48044) *
                 C48416) *
                C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C10335 +
           ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C15915 +
            (C25488 + C25487 - C25486 - C25489 + C25490 + C25491) * C48416) *
               C48418) *
              C1681 +
          (((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C15915 +
            (C25486 - (C25487 + C25488) + C25489 - C25490 - C25491) * C48416) *
               C10335 +
           ((C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C15915 +
            (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48416) *
               C48418) *
              C1682 +
          (((C28028 + C28027 - C28026 - C28029 + C28030 + C28031) * C15915 +
            (C28034 + C28033 - C28032 - C28035 + C28036 + C28037) * C48416) *
               C10335 +
           (((C21591 * C1863 + C48030 * C1872) * C959 +
             (C21591 * C1869 + C48030 * C1881) * C48434 -
             (C21591 * C1862 + C48030 * C1871) * C960 -
             (C21591 * C1868 + C48030 * C1880) * C48421 +
             (C21591 * C1861 + C48030 * C1870) * C961 +
             (C21591 * C1867 + C48030 * C1879) * C48392) *
                C15915 +
            (C23751 * C959 + C23750 * C48434 -
             (C21591 * C2240 + C48030 * C2243) * C960 -
             (C21591 * C2246 + C48030 * C2249) * C48421 +
             (C21591 * C2241 + C48030 * C2244) * C961 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48416) *
               C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C15915 +
             (C22507 + C22508) * C48416) *
                C10335 +
            ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
               C1681 -
           ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
               C1682 +
           (((C27401 + C27400) * C15915 + C27403 * C48416) * C10335 +
            (((C21591 * C1863 + C48030 * C1872) * C1030 +
              (C21591 * C1869 + C48030 * C1881) * C48044) *
                 C15915 +
             (C23755 + C23754) * C48416) *
                C48418) *
               C48401) *
              C48437 +
          (((C27398 * C15915 + C27404 * C48416) * C10335 +
            (C27403 * C15915 + C22683 * C48416) * C48418) *
               C1682 -
           ((C22666 * C48416 + C27402 * C15915) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                C10335) *
               C1681 -
           (((C23752 + C23753) * C48416 + (C23754 + C23755) * C15915) * C48418 +
            (C27405 * C48416 + C27399 * C15915) * C10335) *
               C48401) *
              C48425 +
          (((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
            (C27404 * C15915 + C23079 * C48416) * C48418) *
               C1681 -
           (((C22681 + C22682) * C48416 + C27405 * C15915) * C48418 +
            (C27873 * C48416 + C22666 * C15915) * C10335) *
               C1682 +
           ((C22683 * C15915 + (C22682 + C22681) * C48416) * C10335 +
            ((C23753 + C23752) * C15915 +
             ((C21591 * C23735 + C48030 * C23736) * C1030 +
              (C21591 * C23737 + C48030 * C23738) * C48044) *
                 C48416) *
                C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C15915 +
            (C22507 + C22508) * C48416) *
               C10335 +
           ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
              C1856 -
          ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
           (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
              C1857 +
          (((C27401 + C27400) * C15915 + C27403 * C48416) * C10335 +
           ((C28288 + C28289) * C15915 + (C23755 + C23754) * C48416) * C48418) *
              C1858 -
          (((C28290 + C28291) * C48416 + (C28292 + C28293) * C15915) * C48418 +
           ((C23754 + C23755) * C48416 + (C28289 + C28288) * C15915) * C10335) *
              C1859 +
          (((C28293 + C28292) * C15915 + (C28291 + C28290) * C48416) * C10335 +
           (((C21591 * C12369 + C48030 * C12371) * C1030 +
             (C21591 * C12373 + C48030 * C12375) * C48044) *
                C15915 +
            ((C21591 * C28265 + C48030 * C28266) * C1030 +
             (C21591 * C28267 + C48030 * C28268) * C48044) *
                C48416) *
               C48418) *
              C1860) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47151 +
              (C21591 * C131 + C48030 * C142) * C48352 -
              (C21591 * C122 + C48030 * C129) * C47132 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C15915 +
             (C22782 + C22783 - C22784 - C22785) * C48416) *
                C10335 +
            ((C27730 + C27731 - C27732 - C27733) * C15915 + C27740 * C48416) *
                C48418) *
               C48367 +
           (((C27732 - (C27731 + C27730) + C27733) * C15915 + C27741 * C48416) *
                C10335 +
            ((C26508 * C47132 - (C26509 * C48352 + C26510 * C47151) +
              C26511 * C48054) *
                 C15915 +
             (C23536 - (C23521 + C23520) + C23537) * C48416) *
                C48418) *
               C48184) *
              C956 +
          ((((C22784 - (C22783 + C22782) + C22785) * C15915 +
             (C22788 - (C22787 + C22786) + C22789) * C48416) *
                C10335 +
            (C27741 * C15915 + C22976 * C48416) * C48418) *
               C48367 +
           ((C27740 * C15915 + C27742 * C48416) * C10335 +
            ((C23520 + C23521 - C23536 - C23537) * C15915 +
             (C23526 + C23527 - C23538 - C23539) * C48416) *
                C48418) *
               C48184) *
              C957 +
          (((C22808 * C15915 + (C22792 + C22791 - C22790 - C22793) * C48416) *
                C10335 +
            (C27742 * C15915 + (C22964 + C22965 - C22974 - C22975) * C48416) *
                C48418) *
               C48367 +
           ((C22976 * C15915 + (C22974 - (C22965 + C22964) + C22975) * C48416) *
                C10335 +
            ((C23538 - (C23527 + C23526) + C23539) * C15915 +
             ((C21591 * C5880 + C48030 * C5882) * C47132 -
              (C22673 * C48352 + C22674 * C47151) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C565 +
             (C21591 * C131 + C48030 * C142) * C559 -
             (C21591 * C122 + C48030 * C129) * C566 -
             (C21591 * C132 + C48030 * C143) * C560 +
             (C21591 * C123 + C48030 * C130) * C567 +
             (C21591 * C133 + C48030 * C144) * C561 -
             (C21591 * C124 + C48030 * C134) * C568 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C15915 +
            (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
             C22013) *
                C48416) *
               C10335 +
           ((C26804 + C26805 - C26806 - C26807 + C26808 + C26809 - C26816 -
             C26817) *
                C15915 +
            (C26660 + C26661 - C26662 - C26663 + C26664 + C26665 - C26672 -
             C26673) *
                C48416) *
               C48418) *
              C48367 +
          (((C26806 - (C26805 + C26804) + C26807 - C26808 - C26809 + C26816 +
             C26817) *
                C15915 +
            (C26662 - (C26661 + C26660) + C26663 - C26664 - C26665 + C26672 +
             C26673) *
                C48416) *
               C10335 +
           ((C26508 * C566 - (C26509 * C559 + C26510 * C565) + C26511 * C560 -
             C26512 * C567 - C26513 * C561 +
             (C21591 * C429 + C48030 * C447) * C568 +
             (C21591 * C448 + C48030 * C459) * C48402) *
                C15915 +
            (C23532 * C566 - (C22668 * C559 + C22667 * C565) + C23533 * C560 -
             C26514 * C567 - C26515 * C561 +
             (C21591 * C2031 + C48030 * C2032) * C568 +
             (C21591 * C2033 + C48030 * C2034) * C48402) *
                C48416) *
               C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C15915 +
            (C22782 + C22783 - C22784 - C22785) * C48416) *
               C10335 +
           ((C27730 + C27731 - C27732 - C27733) * C15915 + C27740 * C48416) *
               C48418) *
              C2133 +
          (((C27732 - (C27731 + C27730) + C27733) * C15915 + C27741 * C48416) *
               C10335 +
           ((C28488 - (C28489 + C28490) + C28491) * C15915 + C28504 * C48416) *
               C48418) *
              C2134 +
          (((C28490 + C28489 - C28488 - C28491) * C15915 + C28505 * C48416) *
               C10335 +
           ((C28638 + C28639 - C28646 - C28647) * C15915 +
            (C28494 + C28495 - C28506 - C28507) * C48416) *
               C48418) *
              C2135 +
          (((C28646 - (C28639 + C28638) + C28647) * C15915 +
            (C28506 - (C28495 + C28494) + C28507) * C48416) *
               C10335 +
           (((C21591 * C1865 + C48030 * C1874) * C47132 -
             (C28286 * C48352 + C28287 * C47151) +
             (C21591 * C1877 + C48030 * C1883) * C48054) *
                C15915 +
            ((C21591 * C6796 + C48030 * C6798) * C47132 -
             (C28284 * C48352 + C28285 * C47151) +
             (C21591 * C6800 + C48030 * C6802) * C48054) *
                C48416) *
               C48418) *
              C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
               C10335 +
           (((C21591 * C424 + C48030 * C437) * C265 +
             (C21591 * C436 + C48030 * C453) * C259 -
             (C21591 * C421 + C48030 * C431) * C266 -
             (C21591 * C435 + C48030 * C452) * C260 +
             (C21591 * C422 + C48030 * C432) * C267 +
             (C21591 * C434 + C48030 * C451) * C48392) *
                C15915 +
            (C22298 + C22297 - C22296 - C22299 + C22300 + C22301) * C48416) *
               C48418) *
              C48097 * C48437 +
          (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C15915 +
            (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C48416) *
               C10335 +
           ((C22296 - (C22297 + C22298) + C22299 - C22300 - C22301) * C15915 +
            (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C48416) *
               C48418) *
              C48097 * C48425 +
          ((C21779 * C15915 +
            (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) * C48416) *
               C10335 +
           ((C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C15915 +
            (C22671 * C265 + C22672 * C259 - C22971 * C266 - C22972 * C260 +
             (C21591 * C1561 + C48030 * C1564) * C267 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C116 +
            (C21591 * C131 + C48030 * C142) * C104 -
            (C21591 * C122 + C48030 * C129) * C117 -
            (C21591 * C132 + C48030 * C143) * C105 +
            (C21591 * C123 + C48030 * C130) * C118 +
            (C21591 * C133 + C48030 * C144) * C106 -
            (C21591 * C124 + C48030 * C134) * C119 -
            (C21591 * C135 + C48030 * C145) * C107 +
            (C21591 * C125 + C48030 * C136) * C120 +
            (C21591 * C137 + C48030 * C146) * C108) *
               C15915 +
           (C21739 * C116 + C21740 * C104 - C21741 * C117 - C21742 * C105 +
            C21743 * C118 + C21744 * C106 - C22008 * C119 - C22009 * C107 +
            (C21591 * C272 + C48030 * C286) * C120 +
            (C21591 * C287 + C48030 * C302) * C108) *
               C48416) *
              C10335 +
          (((C21591 * C424 + C48030 * C437) * C116 +
            (C21591 * C436 + C48030 * C453) * C104 -
            (C21591 * C421 + C48030 * C431) * C117 -
            (C21591 * C435 + C48030 * C452) * C105 +
            (C21591 * C422 + C48030 * C432) * C118 +
            (C21591 * C434 + C48030 * C451) * C106 -
            (C21591 * C423 + C48030 * C433) * C119 -
            (C21591 * C438 + C48030 * C454) * C107 +
            (C21591 * C425 + C48030 * C439) * C120 +
            (C21591 * C440 + C48030 * C455) * C108) *
               C15915 +
           (C22286 * C116 + C22285 * C104 - C22284 * C117 - C22287 * C105 +
            C22288 * C118 + C22289 * C106 -
            (C21591 * C826 + C48030 * C834) * C119 -
            (C21591 * C835 + C48030 * C841) * C107 +
            (C21591 * C827 + C48030 * C836) * C120 +
            (C21591 * C837 + C48030 * C842) * C108) *
               C48416) *
              C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C10335 +
           ((C26502 * C959 + C26503 * C48434 - C26504 * C960 - C26505 * C48421 +
             C26506 * C961 + C26507 * C48392) *
                C15915 +
            (C25488 + C25487 - C25486 - C25489 + C25490 + C25491) * C48416) *
               C48418) *
              C48097 * C956 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C15915 +
            (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
               C10335 +
           ((C25486 - (C25487 + C25488) + C25489 - C25490 - C25491) * C15915 +
            (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
               C48418) *
              C48097 * C957 +
          ((C22440 * C15915 +
            (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C48416) *
               C10335 +
           ((C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C15915 +
            (C22671 * C959 + C22672 * C48434 - C22971 * C960 - C22972 * C48421 +
             (C21591 * C1561 + C48030 * C1564) * C961 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C15915 +
            (C22507 + C22508) * C48416) *
               C10335 +
           ((C26502 * C1030 + C26503 * C48044) * C15915 +
            (C22649 + C22648) * C48416) *
               C48418) *
              C48097 * C1025 -
          ((C22666 * C48416 + (C22648 + C22649) * C15915) * C48418 +
           ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) * C10335) *
              C48097 * C1026 +
          ((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
           ((C22647 + C22646) * C15915 + C23079 * C48416) * C48418) *
              C48097 * C1027 -
          (((C23086 + C23087) * C48416 + (C22680 + C22679) * C15915) * C48418 +
           ((C22528 + C22527) * C48416 + C22522 * C15915) * C10335) *
              C48097 * C1028 +
          ((C22531 * C15915 + (C22530 + C22529) * C48416) * C10335 +
           ((C23087 + C23086) * C15915 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C48416) *
               C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C10335 +
           ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C15915 +
            (C25488 + C25487 - C25486 - C25489 + C25490 + C25491) * C48416) *
               C48418) *
              C1681 +
          (((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C15915 +
            (C25486 - (C25487 + C25488) + C25489 - C25490 - C25491) * C48416) *
               C10335 +
           ((C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C15915 +
            (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48416) *
               C48418) *
              C1682 +
          (((C28028 + C28027 - C28026 - C28029 + C28030 + C28031) * C15915 +
            (C28034 + C28033 - C28032 - C28035 + C28036 + C28037) * C48416) *
               C10335 +
           (((C21591 * C1863 + C48030 * C1872) * C959 +
             (C21591 * C1869 + C48030 * C1881) * C48434 -
             (C21591 * C1862 + C48030 * C1871) * C960 -
             (C21591 * C1868 + C48030 * C1880) * C48421 +
             (C21591 * C1861 + C48030 * C1870) * C961 +
             (C21591 * C1867 + C48030 * C1879) * C48392) *
                C15915 +
            (C23751 * C959 + C23750 * C48434 -
             (C21591 * C2240 + C48030 * C2243) * C960 -
             (C21591 * C2246 + C48030 * C2249) * C48421 +
             (C21591 * C2241 + C48030 * C2244) * C961 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48416) *
               C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C15915 +
             (C22507 + C22508) * C48416) *
                C10335 +
            ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
               C1681 -
           ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
               C1682 +
           (((C27401 + C27400) * C15915 + C27403 * C48416) * C10335 +
            (((C21591 * C1863 + C48030 * C1872) * C1030 +
              (C21591 * C1869 + C48030 * C1881) * C48044) *
                 C15915 +
             (C23755 + C23754) * C48416) *
                C48418) *
               C48401) *
              C48437 +
          (((C27398 * C15915 + C27404 * C48416) * C10335 +
            (C27403 * C15915 + C22683 * C48416) * C48418) *
               C1682 -
           ((C22666 * C48416 + C27402 * C15915) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                C10335) *
               C1681 -
           (((C23752 + C23753) * C48416 + (C23754 + C23755) * C15915) * C48418 +
            (C27405 * C48416 + C27399 * C15915) * C10335) *
               C48401) *
              C48425 +
          (((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
            (C27404 * C15915 + C23079 * C48416) * C48418) *
               C1681 -
           (((C22681 + C22682) * C48416 + C27405 * C15915) * C48418 +
            (C27873 * C48416 + C22666 * C15915) * C10335) *
               C1682 +
           ((C22683 * C15915 + (C22682 + C22681) * C48416) * C10335 +
            ((C23753 + C23752) * C15915 +
             ((C21591 * C23735 + C48030 * C23736) * C1030 +
              (C21591 * C23737 + C48030 * C23738) * C48044) *
                 C48416) *
                C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47161 +
              (C21591 * C131 + C48030 * C142) * C48049 -
              (C21591 * C122 + C48030 * C129) * C47157 -
              (C21591 * C132 + C48030 * C143) * C48057 +
              (C21591 * C123 + C48030 * C130) * C47167 +
              (C21591 * C133 + C48030 * C144) * C2723) *
                 C15915 +
             (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C48416) *
                C10335 +
            ((C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C15915 +
             C29626 * C48416) *
                C48418) *
               C3120 +
           (((C29608 - (C29607 + C29606) + C29609 - C29610 - C29611) * C15915 +
             C29627 * C48416) *
                C10335 +
            ((C26508 * C47157 - (C26509 * C48049 + C26510 * C47161) +
              C26511 * C48057 - C26512 * C47167 - C26513 * C2723) *
                 C15915 +
             (C29614 - (C29615 + C29616) + C29617 - C29618 - C29619) * C48416) *
                C48418) *
               C48184) *
              C48366 +
          ((((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C15915 +
             (C24270 - (C24269 + C24268) + C24271 - C24272 - C24273) * C48416) *
                C10335 +
            (C29627 * C15915 +
             (C24437 - (C24438 + C24439) + C24440 - C24441 - C24442) * C48416) *
                C48418) *
               C3120 +
           ((C29626 * C15915 +
             (C24439 + C24438 - C24437 - C24440 + C24441 + C24442) * C48416) *
                C10335 +
            ((C29616 + C29615 - C29614 - C29617 + C29618 + C29619) * C15915 +
             (C22669 * C47161 + C22670 * C48049 - C23534 * C47157 -
              C23535 * C48057 + (C21591 * C1173 + C48030 * C1188) * C47167 +
              (C21591 * C1191 + C48030 * C1200) * C2723) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C2463 +
              (C21591 * C131 + C48030 * C142) * C2457 -
              (C21591 * C122 + C48030 * C129) * C2464 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C15915 +
             (C23968 + C23969 - C23970 - C23971) * C48416) *
                C10335 +
            ((C29242 + C29243 - C29244 - C29245) * C15915 + C29262 * C48416) *
                C48418) *
               C48180 +
           (((C29244 - (C29243 + C29242) + C29245) * C15915 + C29263 * C48416) *
                C10335 +
            ((C29248 - (C29249 + C29250) + C29251) * C15915 + C29264 * C48416) *
                C48418) *
               C48187 +
           (((C29250 + C29249 - C29248 - C29251) * C15915 + C29265 * C48416) *
                C10335 +
            ((C30287 + C30288 - C30289 - C30290) * C15915 +
             (C29254 + C29255 - C29256 - C29257) * C48416) *
                C48418) *
               C3628) *
              C48366 +
          ((((C23970 - (C23969 + C23968) + C23971) * C15915 +
             (C23974 - (C23973 + C23972) + C23975) * C48416) *
                C10335 +
            (C29263 * C15915 + C24595 * C48416) * C48418) *
               C48180 +
           ((C29262 * C15915 + C29824 * C48416) * C10335 +
            (C29265 * C15915 + (C24148 + C24149 - C24150 - C24151) * C48416) *
                C48418) *
               C48187 +
           ((C29264 * C15915 + (C24150 - (C24149 + C24148) + C24151) * C48416) *
                C10335 +
            ((C29256 - (C29255 + C29254) + C29257) * C15915 +
             ((C21591 * C7270 + C48030 * C7272) * C2464 -
              (C23748 * C2457 + C23749 * C2463) +
              (C21591 * C7274 + C48030 * C7276) * C48054) *
                 C48416) *
                C48418) *
               C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C2463 +
              (C21591 * C131 + C48030 * C142) * C2457 -
              (C21591 * C122 + C48030 * C129) * C2464 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C15915 +
             (C23968 + C23969 - C23970 - C23971) * C48416) *
                C10335 +
            ((C29242 + C29243 - C29244 - C29245) * C15915 + C29262 * C48416) *
                C48418) *
               C3120 +
           (((C29244 - (C29243 + C29242) + C29245) * C15915 + C29263 * C48416) *
                C10335 +
            ((C29248 - (C29249 + C29250) + C29251) * C15915 + C29264 * C48416) *
                C48418) *
               C48184) *
              C48437 +
          ((((C23970 - (C23969 + C23968) + C23971) * C15915 +
             (C23974 - (C23973 + C23972) + C23975) * C48416) *
                C10335 +
            (C29263 * C15915 + C24595 * C48416) * C48418) *
               C3120 +
           ((C29262 * C15915 + C29824 * C48416) * C10335 +
            (C29265 * C15915 + (C24148 + C24149 - C24150 - C24151) * C48416) *
                C48418) *
               C48184) *
              C48425 +
          (((C23988 * C15915 + (C23978 + C23977 - C23976 - C23979) * C48416) *
                C10335 +
            (C29824 * C15915 + (C24590 + C24591 - C24592 - C24593) * C48416) *
                C48418) *
               C3120 +
           ((C24595 * C15915 + (C24592 - (C24591 + C24590) + C24593) * C48416) *
                C10335 +
            ((C24150 - (C24149 + C24148) + C24151) * C15915 +
             ((C21591 * C5880 + C48030 * C5882) * C2464 -
              (C22673 * C2457 + C22674 * C2463) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2355 +
             (C21591 * C131 + C48030 * C142) * C48443 -
             (C21591 * C122 + C48030 * C129) * C2356 -
             (C21591 * C132 + C48030 * C143) * C48436 +
             (C21591 * C123 + C48030 * C130) * C2357 +
             (C21591 * C133 + C48030 * C144) * C48423 -
             (C21591 * C124 + C48030 * C134) * C2358 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C15915 +
            (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
             C23861) *
                C48416) *
               C10335 +
           ((C29955 + C29956 - C29957 - C29958 + C29959 + C29960 - C29961 -
             C29962) *
                C15915 +
            (C28910 + C28911 - C28912 - C28913 + C28914 + C28915 - C28916 -
             C28917) *
                C48416) *
               C48418) *
              C3120 +
          (((C29957 - (C29956 + C29955) + C29958 - C29959 - C29960 + C29961 +
             C29962) *
                C15915 +
            (C28912 - (C28911 + C28910) + C28913 - C28914 - C28915 + C28916 +
             C28917) *
                C48416) *
               C10335 +
           ((C26508 * C2356 - (C26509 * C48443 + C26510 * C2355) +
             C26511 * C48436 - C26512 * C2357 - C26513 * C48423 +
             (C21591 * C429 + C48030 * C447) * C2358 +
             (C21591 * C448 + C48030 * C459) * C48402) *
                C15915 +
            (C23532 * C2356 - (C22668 * C48443 + C22667 * C2355) +
             C23533 * C48436 - C26514 * C2357 - C26515 * C48423 +
             (C21591 * C2031 + C48030 * C2032) * C2358 +
             (C21591 * C2033 + C48030 * C2034) * C48402) *
                C48416) *
               C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C15915 +
            (C23968 + C23969 - C23970 - C23971) * C48416) *
               C10335 +
           ((C29242 + C29243 - C29244 - C29245) * C15915 + C29262 * C48416) *
               C48418) *
              C48445 +
          (((C29244 - (C29243 + C29242) + C29245) * C15915 + C29263 * C48416) *
               C10335 +
           ((C29248 - (C29249 + C29250) + C29251) * C15915 + C29264 * C48416) *
               C48418) *
              C48442 +
          (((C29250 + C29249 - C29248 - C29251) * C15915 + C29265 * C48416) *
               C10335 +
           ((C30287 + C30288 - C30289 - C30290) * C15915 +
            (C29254 + C29255 - C29256 - C29257) * C48416) *
               C48418) *
              C48433 +
          (((C30289 - (C30288 + C30287) + C30290) * C15915 +
            (C29256 - (C29255 + C29254) + C29257) * C48416) *
               C10335 +
           (((C21591 * C1865 + C48030 * C1874) * C2464 -
             (C28286 * C2457 + C28287 * C2463) +
             (C21591 * C1877 + C48030 * C1883) * C48054) *
                C15915 +
            ((C21591 * C6796 + C48030 * C6798) * C2464 -
             (C28284 * C2457 + C28285 * C2463) +
             (C21591 * C6800 + C48030 * C6802) * C48054) *
                C48416) *
               C48418) *
              C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47161 +
             (C21591 * C131 + C48030 * C142) * C48049 -
             (C21591 * C122 + C48030 * C129) * C47157 -
             (C21591 * C132 + C48030 * C143) * C48057 +
             (C21591 * C123 + C48030 * C130) * C47167 +
             (C21591 * C133 + C48030 * C144) * C2723) *
                C15915 +
            (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C48416) *
               C10335 +
           ((C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C15915 +
            C29626 * C48416) *
               C48418) *
              C48180 +
          (((C29608 - (C29607 + C29606) + C29609 - C29610 - C29611) * C15915 +
            C29627 * C48416) *
               C10335 +
           ((C30631 - (C30632 + C30633) + C30634 - C30635 - C30636) * C15915 +
            (C29614 - (C29615 + C29616) + C29617 - C29618 - C29619) * C48416) *
               C48418) *
              C48187 +
          (((C30633 + C30632 - C30631 - C30634 + C30635 + C30636) * C15915 +
            (C29616 + C29615 - C29614 - C29617 + C29618 + C29619) * C48416) *
               C10335 +
           ((C28282 * C47161 + C28283 * C48049 - C28644 * C47157 -
             C28645 * C48057 + (C21591 * C1861 + C48030 * C1870) * C47167 +
             (C21591 * C1867 + C48030 * C1879) * C2723) *
                C15915 +
            (C23751 * C47161 + C23750 * C48049 - C28502 * C47157 -
             C28503 * C48057 + (C21591 * C2241 + C48030 * C2244) * C47167 +
             (C21591 * C2247 + C48030 * C2250) * C2723) *
                C48416) *
               C48418) *
              C3628) *
         C48085) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2355 +
             (C21591 * C131 + C48030 * C142) * C48443 -
             (C21591 * C122 + C48030 * C129) * C2356 -
             (C21591 * C132 + C48030 * C143) * C48436 +
             (C21591 * C123 + C48030 * C130) * C2357 +
             (C21591 * C133 + C48030 * C144) * C48423 -
             (C21591 * C124 + C48030 * C134) * C2358 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C15915 +
            (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
             C23861) *
                C48416) *
               C10335 +
           ((C29955 + C29956 - C29957 - C29958 + C29959 + C29960 - C29961 -
             C29962) *
                C15915 +
            (C28910 + C28911 - C28912 - C28913 + C28914 + C28915 - C28916 -
             C28917) *
                C48416) *
               C48418) *
              C3120 +
          (((C29957 - (C29956 + C29955) + C29958 - C29959 - C29960 + C29961 +
             C29962) *
                C15915 +
            (C28912 - (C28911 + C28910) + C28913 - C28914 - C28915 + C28916 +
             C28917) *
                C48416) *
               C10335 +
           ((C26508 * C2356 - (C26509 * C48443 + C26510 * C2355) +
             C26511 * C48436 - C26512 * C2357 - C26513 * C48423 +
             (C21591 * C429 + C48030 * C447) * C2358 +
             (C21591 * C448 + C48030 * C459) * C48402) *
                C15915 +
            (C23532 * C2356 - (C22668 * C48443 + C22667 * C2355) +
             C23533 * C48436 - C26514 * C2357 - C26515 * C48423 +
             (C21591 * C2031 + C48030 * C2032) * C2358 +
             (C21591 * C2033 + C48030 * C2034) * C48402) *
                C48416) *
               C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C2463 +
              (C21591 * C131 + C48030 * C142) * C2457 -
              (C21591 * C122 + C48030 * C129) * C2464 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C15915 +
             (C23968 + C23969 - C23970 - C23971) * C48416) *
                C10335 +
            ((C29242 + C29243 - C29244 - C29245) * C15915 + C29262 * C48416) *
                C48418) *
               C3120 +
           (((C29244 - (C29243 + C29242) + C29245) * C15915 + C29263 * C48416) *
                C10335 +
            ((C29248 - (C29249 + C29250) + C29251) * C15915 + C29264 * C48416) *
                C48418) *
               C48184) *
              C48437 +
          ((((C23970 - (C23969 + C23968) + C23971) * C15915 +
             (C23974 - (C23973 + C23972) + C23975) * C48416) *
                C10335 +
            (C29263 * C15915 + C24595 * C48416) * C48418) *
               C3120 +
           ((C29262 * C15915 + C29824 * C48416) * C10335 +
            (C29265 * C15915 + (C24148 + C24149 - C24150 - C24151) * C48416) *
                C48418) *
               C48184) *
              C48425 +
          (((C23988 * C15915 + (C23978 + C23977 - C23976 - C23979) * C48416) *
                C10335 +
            (C29824 * C15915 + (C24590 + C24591 - C24592 - C24593) * C48416) *
                C48418) *
               C3120 +
           ((C24595 * C15915 + (C24592 - (C24591 + C24590) + C24593) * C48416) *
                C10335 +
            ((C24150 - (C24149 + C24148) + C24151) * C15915 +
             ((C21591 * C5880 + C48030 * C5882) * C2464 -
              (C22673 * C2457 + C22674 * C2463) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C565 +
             (C21591 * C131 + C48030 * C142) * C559 -
             (C21591 * C122 + C48030 * C129) * C566 -
             (C21591 * C132 + C48030 * C143) * C560 +
             (C21591 * C123 + C48030 * C130) * C567 +
             (C21591 * C133 + C48030 * C144) * C561 -
             (C21591 * C124 + C48030 * C134) * C568 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C15915 +
            (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
             C22013) *
                C48416) *
               C10335 +
           ((C26502 * C565 + C26503 * C559 - C26504 * C566 - C26505 * C560 +
             C26506 * C567 + C26507 * C561 -
             (C21591 * C423 + C48030 * C433) * C568 -
             (C21591 * C438 + C48030 * C454) * C48402) *
                C15915 +
            (C26660 + C26661 - C26662 - C26663 + C26664 + C26665 - C26672 -
             C26673) *
                C48416) *
               C48418) *
              C48097 * C48366 +
          (((C21990 - (C21989 + C21988) + C21991 - C21992 - C21993 + C22012 +
             C22013) *
                C15915 +
            (C22000 - (C21999 + C21998) + C22001 - C22002 - C22003 + C22014 +
             C22015) *
                C48416) *
               C10335 +
           ((C26662 - (C26661 + C26660) + C26663 - C26664 - C26665 + C26672 +
             C26673) *
                C15915 +
            (C22290 * C566 - (C22291 * C559 + C22292 * C565) + C22293 * C560 -
             C22294 * C567 - C22295 * C561 +
             (C21591 * C1457 + C48030 * C1458) * C568 +
             (C21591 * C1459 + C48030 * C1460) * C48402) *
                C48416) *
               C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C15915 +
            (C22782 + C22783 - C22784 - C22785) * C48416) *
               C10335 +
           ((C26502 * C47151 + C26503 * C48352 - C26504 * C47132 -
             C26505 * C48054) *
                C15915 +
            (C22958 + C22957 - C22956 - C22959) * C48416) *
               C48418) *
              C48097 * C1301 +
          (((C22784 - (C22783 + C22782) + C22785) * C15915 +
            (C22788 - (C22787 + C22786) + C22789) * C48416) *
               C10335 +
           ((C22956 - (C22957 + C22958) + C22959) * C15915 + C22976 * C48416) *
               C48418) *
              C48097 * C1302 +
          ((C22808 * C15915 + (C22792 + C22791 - C22790 - C22793) * C48416) *
               C10335 +
           ((C22962 + C22961 - C22960 - C22963) * C15915 +
            (C22964 + C22965 - C22974 - C22975) * C48416) *
               C48418) *
              C48097 * C1303 +
          ((C22809 * C15915 + (C22806 - (C22795 + C22794) + C22807) * C48416) *
               C10335 +
           ((C22974 - (C22965 + C22964) + C22975) * C15915 +
            ((C21591 * C6402 + C48030 * C6404) * C47132 -
             (C23084 * C48352 + C23085 * C47151) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C48416) *
               C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C265 +
              (C21591 * C131 + C48030 * C142) * C259 -
              (C21591 * C122 + C48030 * C129) * C266 -
              (C21591 * C132 + C48030 * C143) * C260 +
              (C21591 * C123 + C48030 * C130) * C267 +
              (C21591 * C133 + C48030 * C144) * C48392) *
                 C15915 +
             (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
                C10335 +
            ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C15915 +
             C27020 * C48416) *
                C48418) *
               C48367 +
           (((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C15915 +
             C27021 * C48416) *
                C10335 +
            ((C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C15915 +
             (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48416) *
                C48418) *
               C48184) *
              C48366 +
          ((((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C15915 +
             (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C48416) *
                C10335 +
            (C27021 * C15915 +
             (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C48416) *
                C48418) *
               C48367 +
           ((C27020 * C15915 +
             (C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C48416) *
                C10335 +
            ((C26496 + C26495 - C26494 - C26497 + C26528 + C26529) * C15915 +
             (C22669 * C265 + C22670 * C259 - C23534 * C266 - C23535 * C260 +
              (C21591 * C1173 + C48030 * C1188) * C267 +
              (C21591 * C1191 + C48030 * C1200) * C48392) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C15915 +
             (C22507 + C22508) * C48416) *
                C10335 +
            ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
               C48367 -
           ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
               C48184) *
              C1301 +
          (((C27398 * C15915 + C27404 * C48416) * C10335 +
            (C27403 * C15915 + C22683 * C48416) * C48418) *
               C48184 -
           ((C22666 * C48416 + C27402 * C15915) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                C10335) *
               C48367) *
              C1302 +
          (((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
            (C27404 * C15915 + C23079 * C48416) * C48418) *
               C48367 -
           (((C22681 + C22682) * C48416 + C27405 * C15915) * C48418 +
            (C27873 * C48416 + C22666 * C15915) * C10335) *
               C48184) *
              C1303 +
          (((C23079 * C15915 + (C23087 + C23086) * C48416) * C10335 +
            ((C22682 + C22681) * C15915 +
             ((C21591 * C22641 + C48030 * C22642) * C1030 +
              (C21591 * C22643 + C48030 * C22644) * C48044) *
                 C48416) *
                C48418) *
               C48184 -
           (((C23086 + C23087) * C48416 + C27873 * C15915) * C48418 +
            ((C22528 + C22527) * C48416 + C22522 * C15915) * C10335) *
               C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
               C10335 +
           (((C21591 * C424 + C48030 * C437) * C265 +
             (C21591 * C436 + C48030 * C453) * C259 -
             (C21591 * C421 + C48030 * C431) * C266 -
             (C21591 * C435 + C48030 * C452) * C260 +
             (C21591 * C422 + C48030 * C432) * C267 +
             (C21591 * C434 + C48030 * C451) * C48392) *
                C15915 +
            (C22298 + C22297 - C22296 - C22299 + C22300 + C22301) * C48416) *
               C48418) *
              C48097 * C48437 +
          (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C15915 +
            (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C48416) *
               C10335 +
           ((C22296 - (C22297 + C22298) + C22299 - C22300 - C22301) * C15915 +
            (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C48416) *
               C48418) *
              C48097 * C48425 +
          ((C21779 * C15915 +
            (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) * C48416) *
               C10335 +
           ((C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C15915 +
            (C22671 * C265 + C22672 * C259 - C22971 * C266 - C22972 * C260 +
             (C21591 * C1561 + C48030 * C1564) * C267 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C116 +
            (C21591 * C131 + C48030 * C142) * C104 -
            (C21591 * C122 + C48030 * C129) * C117 -
            (C21591 * C132 + C48030 * C143) * C105 +
            (C21591 * C123 + C48030 * C130) * C118 +
            (C21591 * C133 + C48030 * C144) * C106 -
            (C21591 * C124 + C48030 * C134) * C119 -
            (C21591 * C135 + C48030 * C145) * C107 +
            (C21591 * C125 + C48030 * C136) * C120 +
            (C21591 * C137 + C48030 * C146) * C108) *
               C15915 +
           (C21739 * C116 + C21740 * C104 - C21741 * C117 - C21742 * C105 +
            C21743 * C118 + C21744 * C106 - C22008 * C119 - C22009 * C107 +
            (C21591 * C272 + C48030 * C286) * C120 +
            (C21591 * C287 + C48030 * C302) * C108) *
               C48416) *
              C10335 +
          (((C21591 * C424 + C48030 * C437) * C116 +
            (C21591 * C436 + C48030 * C453) * C104 -
            (C21591 * C421 + C48030 * C431) * C117 -
            (C21591 * C435 + C48030 * C452) * C105 +
            (C21591 * C422 + C48030 * C432) * C118 +
            (C21591 * C434 + C48030 * C451) * C106 -
            (C21591 * C423 + C48030 * C433) * C119 -
            (C21591 * C438 + C48030 * C454) * C107 +
            (C21591 * C425 + C48030 * C439) * C120 +
            (C21591 * C440 + C48030 * C455) * C108) *
               C15915 +
           (C22286 * C116 + C22285 * C104 - C22284 * C117 - C22287 * C105 +
            C22288 * C118 + C22289 * C106 -
            (C21591 * C826 + C48030 * C834) * C119 -
            (C21591 * C835 + C48030 * C841) * C107 +
            (C21591 * C827 + C48030 * C836) * C120 +
            (C21591 * C837 + C48030 * C842) * C108) *
               C48416) *
              C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
               C10335 +
           ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C15915 +
            (C22298 + C22297 - C22296 - C22299 + C22300 + C22301) * C48416) *
               C48418) *
              C48438 +
          (((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C15915 +
            (C22296 - (C22297 + C22298) + C22299 - C22300 - C22301) * C48416) *
               C10335 +
           ((C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C15915 +
            (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48416) *
               C48418) *
              C48427 +
          (((C26524 + C26523 - C26522 - C26525 + C26526 + C26527) * C15915 +
            (C26496 + C26495 - C26494 - C26497 + C26528 + C26529) * C48416) *
               C10335 +
           (((C21591 * C1863 + C48030 * C1872) * C265 +
             (C21591 * C1869 + C48030 * C1881) * C259 -
             (C21591 * C1862 + C48030 * C1871) * C266 -
             (C21591 * C1868 + C48030 * C1880) * C260 +
             (C21591 * C1861 + C48030 * C1870) * C267 +
             (C21591 * C1867 + C48030 * C1879) * C48392) *
                C15915 +
            (C23751 * C265 + C23750 * C259 -
             (C21591 * C2240 + C48030 * C2243) * C266 -
             (C21591 * C2246 + C48030 * C2249) * C260 +
             (C21591 * C2241 + C48030 * C2244) * C267 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48416) *
               C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C10335 +
           ((C26502 * C959 + C26503 * C48434 - C26504 * C960 - C26505 * C48421 +
             C26506 * C961 + C26507 * C48392) *
                C15915 +
            (C25488 + C25487 - C25486 - C25489 + C25490 + C25491) * C48416) *
               C48418) *
              C48097 * C956 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C15915 +
            (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
               C10335 +
           ((C25486 - (C25487 + C25488) + C25489 - C25490 - C25491) * C15915 +
            (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
               C48418) *
              C48097 * C957 +
          ((C22440 * C15915 +
            (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C48416) *
               C10335 +
           ((C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C15915 +
            (C22671 * C959 + C22672 * C48434 - C22971 * C960 - C22972 * C48421 +
             (C21591 * C1561 + C48030 * C1564) * C961 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C15915 +
            (C22507 + C22508) * C48416) *
               C10335 +
           ((C26502 * C1030 + C26503 * C48044) * C15915 +
            (C22649 + C22648) * C48416) *
               C48418) *
              C48097 * C1025 -
          ((C22666 * C48416 + (C22648 + C22649) * C15915) * C48418 +
           ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) * C10335) *
              C48097 * C1026 +
          ((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
           ((C22647 + C22646) * C15915 + C23079 * C48416) * C48418) *
              C48097 * C1027 -
          (((C23086 + C23087) * C48416 + (C22680 + C22679) * C15915) * C48418 +
           ((C22528 + C22527) * C48416 + C22522 * C15915) * C10335) *
              C48097 * C1028 +
          ((C22531 * C15915 + (C22530 + C22529) * C48416) * C10335 +
           ((C23087 + C23086) * C15915 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C48416) *
               C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C15915 +
             (C22507 + C22508) * C48416) *
                C10335 +
            ((C27396 + C27397) * C15915 + C27398 * C48416) * C48418) *
               C48438 -
           ((C27399 * C48416 + (C27400 + C27401) * C15915) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C15915) * C10335) *
               C48427 +
           (((C27401 + C27400) * C15915 + C27403 * C48416) * C10335 +
            (((C21591 * C1863 + C48030 * C1872) * C1030 +
              (C21591 * C1869 + C48030 * C1881) * C48044) *
                 C15915 +
             (C23755 + C23754) * C48416) *
                C48418) *
               C48401) *
              C956 +
          (((C27398 * C15915 + C27404 * C48416) * C10335 +
            (C27403 * C15915 + C22683 * C48416) * C48418) *
               C48427 -
           ((C22666 * C48416 + C27402 * C15915) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) *
                C10335) *
               C48438 -
           (((C23752 + C23753) * C48416 + (C23754 + C23755) * C15915) * C48418 +
            (C27405 * C48416 + C27399 * C15915) * C10335) *
               C48401) *
              C957 +
          (((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
            (C27404 * C15915 + C23079 * C48416) * C48418) *
               C48438 -
           (((C22681 + C22682) * C48416 + C27405 * C15915) * C48418 +
            ((C22680 + C22679) * C48416 + C22666 * C15915) * C10335) *
               C48427 +
           ((C22683 * C15915 + (C22682 + C22681) * C48416) * C10335 +
            ((C23753 + C23752) * C15915 +
             ((C21591 * C23735 + C48030 * C23736) * C1030 +
              (C21591 * C23737 + C48030 * C23738) * C48044) *
                 C48416) *
                C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C565 +
             (C21591 * C131 + C48030 * C142) * C559 -
             (C21591 * C122 + C48030 * C129) * C566 -
             (C21591 * C132 + C48030 * C143) * C560 +
             (C21591 * C123 + C48030 * C130) * C567 +
             (C21591 * C133 + C48030 * C144) * C561 -
             (C21591 * C124 + C48030 * C134) * C568 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C15915 +
            (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
             C22013) *
                C48416) *
               C10335 +
           ((C26804 + C26805 - C26806 - C26807 + C26808 + C26809 - C26816 -
             C26817) *
                C15915 +
            (C26660 + C26661 - C26662 - C26663 + C26664 + C26665 - C26672 -
             C26673) *
                C48416) *
               C48418) *
              C48367 +
          (((C26806 - (C26805 + C26804) + C26807 - C26808 - C26809 + C26816 +
             C26817) *
                C15915 +
            (C26662 - (C26661 + C26660) + C26663 - C26664 - C26665 + C26672 +
             C26673) *
                C48416) *
               C10335 +
           ((C26508 * C566 - (C26509 * C559 + C26510 * C565) + C26511 * C560 -
             C26512 * C567 - C26513 * C561 +
             (C21591 * C429 + C48030 * C447) * C568 +
             (C21591 * C448 + C48030 * C459) * C48402) *
                C15915 +
            (C23532 * C566 - (C22668 * C559 + C22667 * C565) + C23533 * C560 -
             C26514 * C567 - C26515 * C561 +
             (C21591 * C2031 + C48030 * C2032) * C568 +
             (C21591 * C2033 + C48030 * C2034) * C48402) *
                C48416) *
               C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47151 +
              (C21591 * C131 + C48030 * C142) * C48352 -
              (C21591 * C122 + C48030 * C129) * C47132 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C15915 +
             (C22782 + C22783 - C22784 - C22785) * C48416) *
                C10335 +
            ((C27730 + C27731 - C27732 - C27733) * C15915 + C27740 * C48416) *
                C48418) *
               C48367 +
           (((C27732 - (C27731 + C27730) + C27733) * C15915 + C27741 * C48416) *
                C10335 +
            ((C26508 * C47132 - (C26509 * C48352 + C26510 * C47151) +
              C26511 * C48054) *
                 C15915 +
             (C23536 - (C23521 + C23520) + C23537) * C48416) *
                C48418) *
               C48184) *
              C956 +
          ((((C22784 - (C22783 + C22782) + C22785) * C15915 +
             (C22788 - (C22787 + C22786) + C22789) * C48416) *
                C10335 +
            (C27741 * C15915 + C22976 * C48416) * C48418) *
               C48367 +
           ((C27740 * C15915 + C27742 * C48416) * C10335 +
            ((C23520 + C23521 - C23536 - C23537) * C15915 +
             (C23526 + C23527 - C23538 - C23539) * C48416) *
                C48418) *
               C48184) *
              C957 +
          (((C22808 * C15915 + (C22792 + C22791 - C22790 - C22793) * C48416) *
                C10335 +
            (C27742 * C15915 + (C22964 + C22965 - C22974 - C22975) * C48416) *
                C48418) *
               C48367 +
           ((C22976 * C15915 + (C22974 - (C22965 + C22964) + C22975) * C48416) *
                C10335 +
            ((C23538 - (C23527 + C23526) + C23539) * C15915 +
             ((C21591 * C5880 + C48030 * C5882) * C47132 -
              (C22673 * C48352 + C22674 * C47151) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C116 +
            (C21591 * C131 + C48030 * C142) * C104 -
            (C21591 * C122 + C48030 * C129) * C117 -
            (C21591 * C132 + C48030 * C143) * C105 +
            (C21591 * C123 + C48030 * C130) * C118 +
            (C21591 * C133 + C48030 * C144) * C106 -
            (C21591 * C124 + C48030 * C134) * C119 -
            (C21591 * C135 + C48030 * C145) * C107 +
            (C21591 * C125 + C48030 * C136) * C120 +
            (C21591 * C137 + C48030 * C146) * C108) *
               C15915 +
           (C21739 * C116 + C21740 * C104 - C21741 * C117 - C21742 * C105 +
            C21743 * C118 + C21744 * C106 - C22008 * C119 - C22009 * C107 +
            (C21591 * C272 + C48030 * C286) * C120 +
            (C21591 * C287 + C48030 * C302) * C108) *
               C48416) *
              C10335 +
          (((C21591 * C424 + C48030 * C437) * C116 +
            (C21591 * C436 + C48030 * C453) * C104 -
            (C21591 * C421 + C48030 * C431) * C117 -
            (C21591 * C435 + C48030 * C452) * C105 +
            (C21591 * C422 + C48030 * C432) * C118 +
            (C21591 * C434 + C48030 * C451) * C106 -
            (C21591 * C423 + C48030 * C433) * C119 -
            (C21591 * C438 + C48030 * C454) * C107 +
            (C21591 * C425 + C48030 * C439) * C120 +
            (C21591 * C440 + C48030 * C455) * C108) *
               C15915 +
           (C22286 * C116 + C22285 * C104 - C22284 * C117 - C22287 * C105 +
            C22288 * C118 + C22289 * C106 -
            (C21591 * C826 + C48030 * C834) * C119 -
            (C21591 * C835 + C48030 * C841) * C107 +
            (C21591 * C827 + C48030 * C836) * C120 +
            (C21591 * C837 + C48030 * C842) * C108) *
               C48416) *
              C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
               C10335 +
           (((C21591 * C424 + C48030 * C437) * C265 +
             (C21591 * C436 + C48030 * C453) * C259 -
             (C21591 * C421 + C48030 * C431) * C266 -
             (C21591 * C435 + C48030 * C452) * C260 +
             (C21591 * C422 + C48030 * C432) * C267 +
             (C21591 * C434 + C48030 * C451) * C48392) *
                C15915 +
            (C22298 + C22297 - C22296 - C22299 + C22300 + C22301) * C48416) *
               C48418) *
              C48097 * C48437 +
          (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C15915 +
            (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C48416) *
               C10335 +
           ((C22296 - (C22297 + C22298) + C22299 - C22300 - C22301) * C15915 +
            (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C48416) *
               C48418) *
              C48097 * C48425 +
          ((C21779 * C15915 +
            (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) * C48416) *
               C10335 +
           ((C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C15915 +
            (C22671 * C265 + C22672 * C259 - C22971 * C266 - C22972 * C260 +
             (C21591 * C1561 + C48030 * C1564) * C267 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C15915 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C10335 +
           ((C26502 * C959 + C26503 * C48434 - C26504 * C960 - C26505 * C48421 +
             C26506 * C961 + C26507 * C48392) *
                C15915 +
            (C25488 + C25487 - C25486 - C25489 + C25490 + C25491) * C48416) *
               C48418) *
              C48097 * C956 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C15915 +
            (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
               C10335 +
           ((C25486 - (C25487 + C25488) + C25489 - C25490 - C25491) * C15915 +
            (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
               C48418) *
              C48097 * C957 +
          ((C22440 * C15915 +
            (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C48416) *
               C10335 +
           ((C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C15915 +
            (C22671 * C959 + C22672 * C48434 - C22971 * C960 - C22972 * C48421 +
             (C21591 * C1561 + C48030 * C1564) * C961 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C15915 +
            (C22507 + C22508) * C48416) *
               C10335 +
           ((C26502 * C1030 + C26503 * C48044) * C15915 +
            (C22649 + C22648) * C48416) *
               C48418) *
              C48097 * C1025 -
          ((C22666 * C48416 + (C22648 + C22649) * C15915) * C48418 +
           ((C22510 + C22509) * C48416 + (C22508 + C22507) * C15915) * C10335) *
              C48097 * C1026 +
          ((C22521 * C15915 + (C22512 + C22511) * C48416) * C10335 +
           ((C22647 + C22646) * C15915 + C23079 * C48416) * C48418) *
              C48097 * C1027 -
          (((C23086 + C23087) * C48416 + (C22680 + C22679) * C15915) * C48418 +
           ((C22528 + C22527) * C48416 + C22522 * C15915) * C10335) *
              C48097 * C1028 +
          ((C22531 * C15915 + (C22530 + C22529) * C48416) * C10335 +
           ((C23087 + C23086) * C15915 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C48416) *
               C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C47161 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48049 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C47157 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48057 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C47167 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C2723) *
               C48286 * C31910 +
           ((C32253 + C32254) * C47161 + (C32255 + C32256) * C48049 -
            (C32257 + C32258) * C47157 - (C32259 + C32260) * C48057 +
            (C32261 + C32262) * C47167 + (C32263 + C32264) * C2723) *
               C48286 * C48418) *
              C48097 * C48140 +
          (((C16119 + C16118) * C47157 -
            ((C16117 + C16116) * C48049 + (C16115 + C16114) * C47161) +
            (C16121 + C16120) * C48057 - (C16123 + C16122) * C47167 -
            (C16125 + C16124) * C2723) *
               C48286 * C31910 +
           ((C16774 + C16775) * C47157 -
            ((C16776 + C16777) * C48049 + (C16778 + C16779) * C47161) +
            (C16780 + C16781) * C48057 - (C16782 + C16783) * C47167 -
            (C16784 + C16785) * C2723) *
               C48286 * C48418) *
              C48097 * C48147 +
          (((C16131 + C16130) * C47161 + (C16129 + C16128) * C48049 -
            (C16127 + C16126) * C47157 - (C16133 + C16132) * C48057 +
            (C16135 + C16134) * C47167 + (C16137 + C16136) * C2723) *
               C48286 * C31910 +
           ((C17212 + C17213) * C47161 + (C17214 + C17215) * C48049 -
            (C17564 + C17565) * C47157 - (C17566 + C17567) * C48057 +
            (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
             C48385 * C1458) *
                C47167 +
            (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
             C48385 * C1460) *
                C2723) *
               C48286 * C48418) *
              C48097 * C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C2463 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C2457 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C2464 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C48286 * C31910 +
            ((C32253 + C32254) * C2463 + (C32255 + C32256) * C2457 -
             (C32257 + C32258) * C2464 - (C32259 + C32260) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C32258 + C32257) * C2464 -
             ((C32256 + C32255) * C2457 + (C32254 + C32253) * C2463) +
             (C32260 + C32259) * C48054) *
                C48286 * C31910 +
            ((C32265 + C32266) * C2464 -
             ((C32267 + C32268) * C2457 + (C32269 + C32270) * C2463) +
             (C32271 + C32272) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48140 +
          ((((C16119 + C16118) * C2464 -
             ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
             (C16121 + C16120) * C48054) *
                C48286 * C31910 +
            ((C16774 + C16775) * C2464 -
             ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
             (C16780 + C16781) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C16779 + C16778) * C2463 + (C16777 + C16776) * C2457 -
             (C16775 + C16774) * C2464 - (C16781 + C16780) * C48054) *
                C48286 * C31910 +
            ((C17208 + C17209) * C2463 + (C17210 + C17211) * C2457 -
             (C18286 + C18287) * C2464 - (C18288 + C18289) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48147 +
          ((((C16131 + C16130) * C2463 + (C16129 + C16128) * C2457 -
             (C16127 + C16126) * C2464 - (C16133 + C16132) * C48054) *
                C48286 * C31910 +
            ((C17212 + C17213) * C2463 + (C17214 + C17215) * C2457 -
             (C17564 + C17565) * C2464 - (C17566 + C17567) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C17565 + C17564) * C2464 -
             ((C17215 + C17214) * C2457 + (C17213 + C17212) * C2463) +
             (C17567 + C17566) * C48054) *
                C48286 * C31910 +
            ((C15917 * C1172 + C15913 * C1187 + C15918 * C1173 +
              C48385 * C1188) *
                 C2464 -
             ((C17216 + C17217) * C2457 + (C17218 + C17219) * C2463) +
             (C15917 * C1190 + C15913 * C1199 + C15918 * C1191 +
              C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2463 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C2457 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2464 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C48286 * C31910 +
           ((C32253 + C32254) * C2463 + (C32255 + C32256) * C2457 -
            (C32257 + C32258) * C2464 - (C32259 + C32260) * C48054) *
               C48286 * C48418) *
              C48097 * C48444 +
          (((C16119 + C16118) * C2464 -
            ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
            (C16121 + C16120) * C48054) *
               C48286 * C31910 +
           ((C16774 + C16775) * C2464 -
            ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
            (C16780 + C16781) * C48054) *
               C48286 * C48418) *
              C48097 * C48440 +
          (((C16131 + C16130) * C2463 + (C16129 + C16128) * C2457 -
            (C16127 + C16126) * C2464 - (C16133 + C16132) * C48054) *
               C48286 * C31910 +
           ((C17212 + C17213) * C2463 + (C17214 + C17215) * C2457 -
            (C17564 + C17565) * C2464 - (C17566 + C17567) * C48054) *
               C48286 * C48418) *
              C48097 * C48430 +
          (((C17359 + C17358) * C2464 -
            ((C17033 + C17032) * C2457 + (C17031 + C17030) * C2463) +
            (C17361 + C17360) * C48054) *
               C48286 * C31910 +
           ((C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
             C48385 * C1564) *
                C2464 -
            ((C17706 + C17707) * C2457 + (C17708 + C17709) * C2463) +
            (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
             C48385 * C1570) *
                C48054) *
               C48286 * C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2355 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48443 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2356 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48436 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C2357 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48423 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C2358 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C48286 * C31910 +
           ((C32253 + C32254) * C2355 + (C32255 + C32256) * C48443 -
            (C32257 + C32258) * C2356 - (C32259 + C32260) * C48436 +
            (C32261 + C32262) * C2357 + (C32263 + C32264) * C48423 -
            (C32545 + C32546) * C2358 - (C32547 + C32548) * C48402) *
               C48286 * C48418) *
              C48097 * C2353 +
          (((C16119 + C16118) * C2356 -
            ((C16117 + C16116) * C48443 + (C16115 + C16114) * C2355) +
            (C16121 + C16120) * C48436 - (C16123 + C16122) * C2357 -
            (C16125 + C16124) * C48423 + (C16423 + C16422) * C2358 +
            (C16425 + C16424) * C48402) *
               C48286 * C31910 +
           ((C16774 + C16775) * C2356 -
            ((C16776 + C16777) * C48443 + (C16778 + C16779) * C2355) +
            (C16780 + C16781) * C48436 - (C16782 + C16783) * C2357 -
            (C16784 + C16785) * C48423 +
            (C15917 * C826 + C15913 * C834 + C15918 * C827 + C48385 * C836) *
                C2358 +
            (C15917 * C835 + C15913 * C841 + C15918 * C837 + C48385 * C842) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C2463 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C2457 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C2464 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C48286 * C31910 +
            ((C32253 + C32254) * C2463 + (C32255 + C32256) * C2457 -
             (C32257 + C32258) * C2464 - (C32259 + C32260) * C48054) *
                C48286 * C48418) *
               C48438 +
           (((C32258 + C32257) * C2464 -
             ((C32256 + C32255) * C2457 + (C32254 + C32253) * C2463) +
             (C32260 + C32259) * C48054) *
                C48286 * C31910 +
            ((C32265 + C32266) * C2464 -
             ((C32267 + C32268) * C2457 + (C32269 + C32270) * C2463) +
             (C32271 + C32272) * C48054) *
                C48286 * C48418) *
               C48427 +
           (((C32270 + C32269) * C2463 + (C32268 + C32267) * C2457 -
             (C32266 + C32265) * C2464 - (C32272 + C32271) * C48054) *
                C48286 * C31910 +
            ((C33961 + C33962) * C2463 + (C33963 + C33964) * C2457 -
             (C34301 + C34302) * C2464 - (C34303 + C34304) * C48054) *
                C48286 * C48418) *
               C48401) *
              C2353 +
          ((((C16119 + C16118) * C2464 -
             ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
             (C16121 + C16120) * C48054) *
                C48286 * C31910 +
            ((C16774 + C16775) * C2464 -
             ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
             (C16780 + C16781) * C48054) *
                C48286 * C48418) *
               C48438 +
           (((C16779 + C16778) * C2463 + (C16777 + C16776) * C2457 -
             (C16775 + C16774) * C2464 - (C16781 + C16780) * C48054) *
                C48286 * C31910 +
            ((C17208 + C17209) * C2463 + (C17210 + C17211) * C2457 -
             (C18286 + C18287) * C2464 - (C18288 + C18289) * C48054) *
                C48286 * C48418) *
               C48427 +
           (((C18287 + C18286) * C2464 -
             ((C17211 + C17210) * C2457 + (C17209 + C17208) * C2463) +
             (C18289 + C18288) * C48054) *
                C48286 * C31910 +
            ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48385 * C2244) *
                 C2464 -
             ((C18558 + C18559) * C2457 + (C18560 + C18561) * C2463) +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48385 * C2250) *
                 C48054) *
                C48286 * C48418) *
               C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47161 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48049 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47157 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48057 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C47167 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C2723) *
                C48286 * C31910 +
            ((C32253 + C32254) * C47161 + (C32255 + C32256) * C48049 -
             (C32257 + C32258) * C47157 - (C32259 + C32260) * C48057 +
             (C32261 + C32262) * C47167 + (C32263 + C32264) * C2723) *
                C48286 * C48418) *
               C48367 +
           (((C32258 + C32257) * C47157 -
             ((C32256 + C32255) * C48049 + (C32254 + C32253) * C47161) +
             (C32260 + C32259) * C48057 - (C32262 + C32261) * C47167 -
             (C32264 + C32263) * C2723) *
                C48286 * C31910 +
            ((C32265 + C32266) * C47157 -
             ((C32267 + C32268) * C48049 + (C32269 + C32270) * C47161) +
             (C32271 + C32272) * C48057 - (C32273 + C32274) * C47167 -
             (C32275 + C32276) * C2723) *
                C48286 * C48418) *
               C48184) *
              C2353 +
          ((((C16119 + C16118) * C47157 -
             ((C16117 + C16116) * C48049 + (C16115 + C16114) * C47161) +
             (C16121 + C16120) * C48057 - (C16123 + C16122) * C47167 -
             (C16125 + C16124) * C2723) *
                C48286 * C31910 +
            ((C16774 + C16775) * C47157 -
             ((C16776 + C16777) * C48049 + (C16778 + C16779) * C47161) +
             (C16780 + C16781) * C48057 - (C16782 + C16783) * C47167 -
             (C16784 + C16785) * C2723) *
                C48286 * C48418) *
               C48367 +
           (((C16779 + C16778) * C47161 + (C16777 + C16776) * C48049 -
             (C16775 + C16774) * C47157 - (C16781 + C16780) * C48057 +
             (C16783 + C16782) * C47167 + (C16785 + C16784) * C2723) *
                C48286 * C31910 +
            ((C17208 + C17209) * C47161 + (C17210 + C17211) * C48049 -
             (C18286 + C18287) * C47157 - (C18288 + C18289) * C48057 +
             (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
              C48385 * C2032) *
                 C47167 +
             (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
              C48385 * C2034) *
                 C2723) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2355 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48443 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2356 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48436 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C2357 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48423 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C2358 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C48286 * C31910 +
           ((C32253 + C32254) * C2355 + (C32255 + C32256) * C48443 -
            (C32257 + C32258) * C2356 - (C32259 + C32260) * C48436 +
            (C32261 + C32262) * C2357 + (C32263 + C32264) * C48423 -
            (C32545 + C32546) * C2358 - (C32547 + C32548) * C48402) *
               C48286 * C48418) *
              C48097 * C2353 +
          (((C16119 + C16118) * C2356 -
            ((C16117 + C16116) * C48443 + (C16115 + C16114) * C2355) +
            (C16121 + C16120) * C48436 - (C16123 + C16122) * C2357 -
            (C16125 + C16124) * C48423 + (C16423 + C16422) * C2358 +
            (C16425 + C16424) * C48402) *
               C48286 * C31910 +
           ((C16774 + C16775) * C2356 -
            ((C16776 + C16777) * C48443 + (C16778 + C16779) * C2355) +
            (C16780 + C16781) * C48436 - (C16782 + C16783) * C2357 -
            (C16784 + C16785) * C48423 +
            (C15917 * C826 + C15913 * C834 + C15918 * C827 + C48385 * C836) *
                C2358 +
            (C15917 * C835 + C15913 * C841 + C15918 * C837 + C48385 * C842) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2463 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C2457 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2464 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C48286 * C31910 +
           ((C32253 + C32254) * C2463 + (C32255 + C32256) * C2457 -
            (C32257 + C32258) * C2464 - (C32259 + C32260) * C48054) *
               C48286 * C48418) *
              C48097 * C48444 +
          (((C16119 + C16118) * C2464 -
            ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
            (C16121 + C16120) * C48054) *
               C48286 * C31910 +
           ((C16774 + C16775) * C2464 -
            ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
            (C16780 + C16781) * C48054) *
               C48286 * C48418) *
              C48097 * C48440 +
          (((C16131 + C16130) * C2463 + (C16129 + C16128) * C2457 -
            (C16127 + C16126) * C2464 - (C16133 + C16132) * C48054) *
               C48286 * C31910 +
           ((C17212 + C17213) * C2463 + (C17214 + C17215) * C2457 -
            (C17564 + C17565) * C2464 - (C17566 + C17567) * C48054) *
               C48286 * C48418) *
              C48097 * C48430 +
          (((C17359 + C17358) * C2464 -
            ((C17033 + C17032) * C2457 + (C17031 + C17030) * C2463) +
            (C17361 + C17360) * C48054) *
               C48286 * C31910 +
           ((C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
             C48385 * C1564) *
                C2464 -
            ((C17706 + C17707) * C2457 + (C17708 + C17709) * C2463) +
            (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
             C48385 * C1570) *
                C48054) *
               C48286 * C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47151 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48352 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47132 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C48286 * C31910 +
            ((C32253 + C32254) * C47151 + (C32255 + C32256) * C48352 -
             (C32257 + C32258) * C47132 - (C32259 + C32260) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C32258 + C32257) * C47132 -
             ((C32256 + C32255) * C48352 + (C32254 + C32253) * C47151) +
             (C32260 + C32259) * C48054) *
                C48286 * C31910 +
            ((C32265 + C32266) * C47132 -
             ((C32267 + C32268) * C48352 + (C32269 + C32270) * C47151) +
             (C32271 + C32272) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48140 +
          ((((C16119 + C16118) * C47132 -
             ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
             (C16121 + C16120) * C48054) *
                C48286 * C31910 +
            ((C16774 + C16775) * C47132 -
             ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
             (C16780 + C16781) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C16779 + C16778) * C47151 + (C16777 + C16776) * C48352 -
             (C16775 + C16774) * C47132 - (C16781 + C16780) * C48054) *
                C48286 * C31910 +
            ((C17208 + C17209) * C47151 + (C17210 + C17211) * C48352 -
             (C18286 + C18287) * C47132 - (C18288 + C18289) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48147 +
          ((((C16131 + C16130) * C47151 + (C16129 + C16128) * C48352 -
             (C16127 + C16126) * C47132 - (C16133 + C16132) * C48054) *
                C48286 * C31910 +
            ((C17212 + C17213) * C47151 + (C17214 + C17215) * C48352 -
             (C17564 + C17565) * C47132 - (C17566 + C17567) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C17565 + C17564) * C47132 -
             ((C17215 + C17214) * C48352 + (C17213 + C17212) * C47151) +
             (C17567 + C17566) * C48054) *
                C48286 * C31910 +
            ((C15917 * C1172 + C15913 * C1187 + C15918 * C1173 +
              C48385 * C1188) *
                 C47132 -
             ((C17216 + C17217) * C48352 + (C17218 + C17219) * C47151) +
             (C15917 * C1190 + C15913 * C1199 + C15918 * C1191 +
              C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C48180 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C48187 +
           (((C32270 + C32269) * C1030 + (C32268 + C32267) * C48044) * C48286 *
                C31910 +
            ((C33961 + C33962) * C1030 + (C33963 + C33964) * C48044) * C48286 *
                C48418) *
               C3628) *
              C48140 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C48187 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C48180 -
           (((C18558 + C18559) * C48044 + (C18560 + C18561) * C1030) * C48286 *
                C48418 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C48286 *
                C31910) *
               C3628) *
              C48147 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
                C31910 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
                C48418) *
               C48180 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48286 *
                C48418 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C48286 *
                C31910) *
               C48187 +
           (((C17219 + C17218) * C1030 + (C17217 + C17216) * C48044) * C48286 *
                C31910 +
            ((C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
              C48385 * C7272) *
                 C1030 +
             (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
              C48385 * C7276) *
                 C48044) *
                C48286 * C48418) *
               C3628) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C3120 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C48184) *
              C48444 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C48184 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C3120) *
              C48440 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
                C31910 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
                C48418) *
               C3120 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48286 *
                C48418 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C48286 *
                C31910) *
               C48184) *
              C48430 +
          ((((C17709 + C17708) * C1030 + (C17707 + C17706) * C48044) * C48286 *
                C31910 +
            ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
              C48385 * C5882) *
                 C1030 +
             (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
              C48385 * C5886) *
                 C48044) *
                C48286 * C48418) *
               C48184 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48286 *
                C48418 +
            ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C48286 *
                C31910) *
               C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C959 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48434 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C960 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48421 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C961 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C48392) *
                C48286 * C31910 +
            ((C32253 + C32254) * C959 + (C32255 + C32256) * C48434 -
             (C32257 + C32258) * C960 - (C32259 + C32260) * C48421 +
             (C32261 + C32262) * C961 + (C32263 + C32264) * C48392) *
                C48286 * C48418) *
               C3120 +
           (((C32258 + C32257) * C960 -
             ((C32256 + C32255) * C48434 + (C32254 + C32253) * C959) +
             (C32260 + C32259) * C48421 - (C32262 + C32261) * C961 -
             (C32264 + C32263) * C48392) *
                C48286 * C31910 +
            ((C32265 + C32266) * C960 -
             ((C32267 + C32268) * C48434 + (C32269 + C32270) * C959) +
             (C32271 + C32272) * C48421 - (C32273 + C32274) * C961 -
             (C32275 + C32276) * C48392) *
                C48286 * C48418) *
               C48184) *
              C2353 +
          ((((C16119 + C16118) * C960 -
             ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
             (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
             (C16125 + C16124) * C48392) *
                C48286 * C31910 +
            ((C16774 + C16775) * C960 -
             ((C16776 + C16777) * C48434 + (C16778 + C16779) * C959) +
             (C16780 + C16781) * C48421 - (C16782 + C16783) * C961 -
             (C16784 + C16785) * C48392) *
                C48286 * C48418) *
               C3120 +
           (((C16779 + C16778) * C959 + (C16777 + C16776) * C48434 -
             (C16775 + C16774) * C960 - (C16781 + C16780) * C48421 +
             (C16783 + C16782) * C961 + (C16785 + C16784) * C48392) *
                C48286 * C31910 +
            ((C17208 + C17209) * C959 + (C17210 + C17211) * C48434 -
             (C18286 + C18287) * C960 - (C18288 + C18289) * C48421 +
             (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
              C48385 * C2032) *
                 C961 +
             (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
              C48385 * C2034) *
                 C48392) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C48445 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C48442 +
           (((C32270 + C32269) * C1030 + (C32268 + C32267) * C48044) * C48286 *
                C31910 +
            ((C33961 + C33962) * C1030 + (C33963 + C33964) * C48044) * C48286 *
                C48418) *
               C48433 -
           (((C33965 + C33966) * C48044 + (C33967 + C33968) * C1030) * C48286 *
                C48418 +
            ((C33964 + C33963) * C48044 + (C33962 + C33961) * C1030) * C48286 *
                C31910) *
               C48414) *
              C2353 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C48442 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C48445 -
           (((C18558 + C18559) * C48044 + (C18560 + C18561) * C1030) * C48286 *
                C48418 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C48286 *
                C31910) *
               C48433 +
           (((C18561 + C18560) * C1030 + (C18559 + C18558) * C48044) * C48286 *
                C31910 +
            ((C15917 * C6795 + C15913 * C6797 + C15918 * C6796 +
              C48385 * C6798) *
                 C1030 +
             (C15917 * C6799 + C15913 * C6801 + C15918 * C6800 +
              C48385 * C6802) *
                 C48044) *
                C48286 * C48418) *
               C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47151 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48352 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47132 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C48286 * C31910 +
            ((C32253 + C32254) * C47151 + (C32255 + C32256) * C48352 -
             (C32257 + C32258) * C47132 - (C32259 + C32260) * C48054) *
                C48286 * C48418) *
               C48180 +
           (((C32258 + C32257) * C47132 -
             ((C32256 + C32255) * C48352 + (C32254 + C32253) * C47151) +
             (C32260 + C32259) * C48054) *
                C48286 * C31910 +
            ((C32265 + C32266) * C47132 -
             ((C32267 + C32268) * C48352 + (C32269 + C32270) * C47151) +
             (C32271 + C32272) * C48054) *
                C48286 * C48418) *
               C48187 +
           (((C32270 + C32269) * C47151 + (C32268 + C32267) * C48352 -
             (C32266 + C32265) * C47132 - (C32272 + C32271) * C48054) *
                C48286 * C31910 +
            ((C33961 + C33962) * C47151 + (C33963 + C33964) * C48352 -
             (C34301 + C34302) * C47132 - (C34303 + C34304) * C48054) *
                C48286 * C48418) *
               C3628) *
              C2353 +
          ((((C16119 + C16118) * C47132 -
             ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
             (C16121 + C16120) * C48054) *
                C48286 * C31910 +
            ((C16774 + C16775) * C47132 -
             ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
             (C16780 + C16781) * C48054) *
                C48286 * C48418) *
               C48180 +
           (((C16779 + C16778) * C47151 + (C16777 + C16776) * C48352 -
             (C16775 + C16774) * C47132 - (C16781 + C16780) * C48054) *
                C48286 * C31910 +
            ((C17208 + C17209) * C47151 + (C17210 + C17211) * C48352 -
             (C18286 + C18287) * C47132 - (C18288 + C18289) * C48054) *
                C48286 * C48418) *
               C48187 +
           (((C18287 + C18286) * C47132 -
             ((C17211 + C17210) * C48352 + (C17209 + C17208) * C47151) +
             (C18289 + C18288) * C48054) *
                C48286 * C31910 +
            ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48385 * C2244) *
                 C47132 -
             ((C18558 + C18559) * C48352 + (C18560 + C18561) * C47151) +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48385 * C2250) *
                 C48054) *
                C48286 * C48418) *
               C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C959 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48434 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C960 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48421 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C961 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C48392) *
                C48286 * C31910 +
            ((C32253 + C32254) * C959 + (C32255 + C32256) * C48434 -
             (C32257 + C32258) * C960 - (C32259 + C32260) * C48421 +
             (C32261 + C32262) * C961 + (C32263 + C32264) * C48392) *
                C48286 * C48418) *
               C3120 +
           (((C32258 + C32257) * C960 -
             ((C32256 + C32255) * C48434 + (C32254 + C32253) * C959) +
             (C32260 + C32259) * C48421 - (C32262 + C32261) * C961 -
             (C32264 + C32263) * C48392) *
                C48286 * C31910 +
            ((C32265 + C32266) * C960 -
             ((C32267 + C32268) * C48434 + (C32269 + C32270) * C959) +
             (C32271 + C32272) * C48421 - (C32273 + C32274) * C961 -
             (C32275 + C32276) * C48392) *
                C48286 * C48418) *
               C48184) *
              C2353 +
          ((((C16119 + C16118) * C960 -
             ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
             (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
             (C16125 + C16124) * C48392) *
                C48286 * C31910 +
            ((C16774 + C16775) * C960 -
             ((C16776 + C16777) * C48434 + (C16778 + C16779) * C959) +
             (C16780 + C16781) * C48421 - (C16782 + C16783) * C961 -
             (C16784 + C16785) * C48392) *
                C48286 * C48418) *
               C3120 +
           (((C16779 + C16778) * C959 + (C16777 + C16776) * C48434 -
             (C16775 + C16774) * C960 - (C16781 + C16780) * C48421 +
             (C16783 + C16782) * C961 + (C16785 + C16784) * C48392) *
                C48286 * C31910 +
            ((C17208 + C17209) * C959 + (C17210 + C17211) * C48434 -
             (C18286 + C18287) * C960 - (C18288 + C18289) * C48421 +
             (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
              C48385 * C2032) *
                 C961 +
             (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
              C48385 * C2034) *
                 C48392) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C3120 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C48184) *
              C48444 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C48184 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C3120) *
              C48440 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
                C31910 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
                C48418) *
               C3120 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48286 *
                C48418 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C48286 *
                C31910) *
               C48184) *
              C48430 +
          ((((C17709 + C17708) * C1030 + (C17707 + C17706) * C48044) * C48286 *
                C31910 +
            ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
              C48385 * C5882) *
                 C1030 +
             (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
              C48385 * C5886) *
                 C48044) *
                C48286 * C48418) *
               C48184 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48286 *
                C48418 +
            ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C48286 *
                C31910) *
               C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C47151 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48352 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C47132 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C48286 * C31910 +
           ((C32253 + C32254) * C47151 + (C32255 + C32256) * C48352 -
            (C32257 + C32258) * C47132 - (C32259 + C32260) * C48054) *
               C48286 * C48418) *
              C48097 * C1301 +
          (((C16119 + C16118) * C47132 -
            ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
            (C16121 + C16120) * C48054) *
               C48286 * C31910 +
           ((C16774 + C16775) * C47132 -
            ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
            (C16780 + C16781) * C48054) *
               C48286 * C48418) *
              C48097 * C1302 +
          (((C16131 + C16130) * C47151 + (C16129 + C16128) * C48352 -
            (C16127 + C16126) * C47132 - (C16133 + C16132) * C48054) *
               C48286 * C31910 +
           ((C17212 + C17213) * C47151 + (C17214 + C17215) * C48352 -
            (C17564 + C17565) * C47132 - (C17566 + C17567) * C48054) *
               C48286 * C48418) *
              C48097 * C1303 +
          (((C17359 + C17358) * C47132 -
            ((C17033 + C17032) * C48352 + (C17031 + C17030) * C47151) +
            (C17361 + C17360) * C48054) *
               C48286 * C31910 +
           ((C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
             C48385 * C1564) *
                C47132 -
            ((C17706 + C17707) * C48352 + (C17708 + C17709) * C47151) +
            (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
             C48385 * C1570) *
                C48054) *
               C48286 * C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C565 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C559 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C566 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C560 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C567 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C561 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C568 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C48286 * C31910 +
           ((C32253 + C32254) * C565 + (C32255 + C32256) * C559 -
            (C32257 + C32258) * C566 - (C32259 + C32260) * C560 +
            (C32261 + C32262) * C567 + (C32263 + C32264) * C561 -
            (C15918 * C425 + C48385 * C439 + C15917 * C423 + C15913 * C433) *
                C568 -
            (C15918 * C440 + C48385 * C455 + C15917 * C438 + C15913 * C454) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48366 +
          (((C16119 + C16118) * C566 -
            ((C16117 + C16116) * C559 + (C16115 + C16114) * C565) +
            (C16121 + C16120) * C560 - (C16123 + C16122) * C567 -
            (C16125 + C16124) * C561 + (C16423 + C16422) * C568 +
            (C16425 + C16424) * C48402) *
               C48286 * C31910 +
           ((C16774 + C16775) * C566 -
            ((C16776 + C16777) * C559 + (C16778 + C16779) * C565) +
            (C16780 + C16781) * C560 - (C16782 + C16783) * C567 -
            (C16784 + C16785) * C561 +
            (C15917 * C826 + C15913 * C834 + C15918 * C827 + C48385 * C836) *
                C568 +
            (C15917 * C835 + C15913 * C841 + C15918 * C837 + C48385 * C842) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47151 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48352 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47132 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C48286 * C31910 +
            ((C32253 + C32254) * C47151 + (C32255 + C32256) * C48352 -
             (C32257 + C32258) * C47132 - (C32259 + C32260) * C48054) *
                C48286 * C48418) *
               C1681 +
           (((C32258 + C32257) * C47132 -
             ((C32256 + C32255) * C48352 + (C32254 + C32253) * C47151) +
             (C32260 + C32259) * C48054) *
                C48286 * C31910 +
            ((C32265 + C32266) * C47132 -
             ((C32267 + C32268) * C48352 + (C32269 + C32270) * C47151) +
             (C32271 + C32272) * C48054) *
                C48286 * C48418) *
               C1682 +
           (((C32270 + C32269) * C47151 + (C32268 + C32267) * C48352 -
             (C32266 + C32265) * C47132 - (C32272 + C32271) * C48054) *
                C48286 * C31910 +
            ((C33961 + C33962) * C47151 + (C33963 + C33964) * C48352 -
             (C15918 * C1861 + C48385 * C1870 + C15917 * C1862 +
              C15913 * C1871) *
                 C47132 -
             (C15918 * C1867 + C48385 * C1879 + C15917 * C1868 +
              C15913 * C1880) *
                 C48054) *
                C48286 * C48418) *
               C48401) *
              C48366 +
          ((((C16119 + C16118) * C47132 -
             ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
             (C16121 + C16120) * C48054) *
                C48286 * C31910 +
            ((C16774 + C16775) * C47132 -
             ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
             (C16780 + C16781) * C48054) *
                C48286 * C48418) *
               C1681 +
           (((C16779 + C16778) * C47151 + (C16777 + C16776) * C48352 -
             (C16775 + C16774) * C47132 - (C16781 + C16780) * C48054) *
                C48286 * C31910 +
            ((C17208 + C17209) * C47151 + (C17210 + C17211) * C48352 -
             (C18286 + C18287) * C47132 - (C18288 + C18289) * C48054) *
                C48286 * C48418) *
               C1682 +
           (((C18287 + C18286) * C47132 -
             ((C17211 + C17210) * C48352 + (C17209 + C17208) * C47151) +
             (C18289 + C18288) * C48054) *
                C48286 * C31910 +
            ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48385 * C2244) *
                 C47132 -
             ((C18558 + C18559) * C48352 + (C18560 + C18561) * C47151) +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48385 * C2250) *
                 C48054) *
                C48286 * C48418) *
               C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C48367 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C48184) *
              C1301 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C48184 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C48367) *
              C1302 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
                C31910 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
                C48418) *
               C48367 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48286 *
                C48418 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C48286 *
                C31910) *
               C48184) *
              C1303 +
          ((((C17709 + C17708) * C1030 + (C17707 + C17706) * C48044) * C48286 *
                C31910 +
            ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
              C48385 * C5882) *
                 C1030 +
             (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
              C48385 * C5886) *
                 C48044) *
                C48286 * C48418) *
               C48184 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48286 *
                C48418 +
            ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C48286 *
                C31910) *
               C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C265 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C259 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C266 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C260 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C267 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C48392) *
                C48286 * C31910 +
            ((C32253 + C32254) * C265 + (C32255 + C32256) * C259 -
             (C32257 + C32258) * C266 - (C32259 + C32260) * C260 +
             (C32261 + C32262) * C267 + (C32263 + C32264) * C48392) *
                C48286 * C48418) *
               C48367 +
           (((C32258 + C32257) * C266 -
             ((C32256 + C32255) * C259 + (C32254 + C32253) * C265) +
             (C32260 + C32259) * C260 - (C32262 + C32261) * C267 -
             (C32264 + C32263) * C48392) *
                C48286 * C31910 +
            ((C32265 + C32266) * C266 -
             ((C32267 + C32268) * C259 + (C32269 + C32270) * C265) +
             (C32271 + C32272) * C260 - (C32273 + C32274) * C267 -
             (C32275 + C32276) * C48392) *
                C48286 * C48418) *
               C48184) *
              C48366 +
          ((((C16119 + C16118) * C266 -
             ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
             (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
             (C16125 + C16124) * C48392) *
                C48286 * C31910 +
            ((C16774 + C16775) * C266 -
             ((C16776 + C16777) * C259 + (C16778 + C16779) * C265) +
             (C16780 + C16781) * C260 - (C16782 + C16783) * C267 -
             (C16784 + C16785) * C48392) *
                C48286 * C48418) *
               C48367 +
           (((C16779 + C16778) * C265 + (C16777 + C16776) * C259 -
             (C16775 + C16774) * C266 - (C16781 + C16780) * C260 +
             (C16783 + C16782) * C267 + (C16785 + C16784) * C48392) *
                C48286 * C31910 +
            ((C17208 + C17209) * C265 + (C17210 + C17211) * C259 -
             (C18286 + C18287) * C266 - (C18288 + C18289) * C260 +
             (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
              C48385 * C2032) *
                 C267 +
             (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
              C48385 * C2034) *
                 C48392) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C2133 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C2134 +
           (((C32270 + C32269) * C1030 + (C32268 + C32267) * C48044) * C48286 *
                C31910 +
            ((C33961 + C33962) * C1030 + (C33963 + C33964) * C48044) * C48286 *
                C48418) *
               C2135 -
           (((C33965 + C33966) * C48044 + (C33967 + C33968) * C1030) * C48286 *
                C48418 +
            ((C33964 + C33963) * C48044 + (C33962 + C33961) * C1030) * C48286 *
                C31910) *
               C48414) *
              C48366 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C2134 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C2133 -
           (((C18558 + C18559) * C48044 + (C18560 + C18561) * C1030) * C48286 *
                C48418 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C48286 *
                C31910) *
               C2135 +
           (((C18561 + C18560) * C1030 + (C18559 + C18558) * C48044) * C48286 *
                C31910 +
            ((C15917 * C6795 + C15913 * C6797 + C15918 * C6796 +
              C48385 * C6798) *
                 C1030 +
             (C15917 * C6799 + C15913 * C6801 + C15918 * C6800 +
              C48385 * C6802) *
                 C48044) *
                C48286 * C48418) *
               C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                   C116 +
               (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                   C104 -
               (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                   C117 -
               (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                   C105 +
               (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                   C118 +
               (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                   C106 -
               (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                   C119 -
               (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                   C107 +
               (C15917 * C125 + C15913 * C136 + C15918 * C126 + C48385 * C138) *
                   C120 +
               (C15917 * C137 + C15913 * C146 + C15918 * C139 + C48385 * C147) *
                   C108) *
                  C48286 * C31910 +
              ((C15917 * C424 + C15913 * C437 + C15918 * C421 + C48385 * C431) *
                   C116 +
               (C15917 * C436 + C15913 * C453 + C15918 * C435 + C48385 * C452) *
                   C104 -
               (C15918 * C422 + C48385 * C432 + C15917 * C421 + C15913 * C431) *
                   C117 -
               (C15918 * C434 + C48385 * C451 + C15917 * C435 + C15913 * C452) *
                   C105 +
               (C15917 * C422 + C15913 * C432 + C15918 * C423 + C48385 * C433) *
                   C118 +
               (C15917 * C434 + C15913 * C451 + C15918 * C438 + C48385 * C454) *
                   C106 -
               (C15918 * C425 + C48385 * C439 + C15917 * C423 + C15913 * C433) *
                   C119 -
               (C15918 * C440 + C48385 * C455 + C15917 * C438 + C15913 * C454) *
                   C107 +
               (C15917 * C425 + C15913 * C439 + C15918 * C673 + C48385 * C674) *
                   C120 +
               (C15917 * C440 + C15913 * C455 + C15918 * C675 + C48385 * C676) *
                   C108) *
                  C48286 * C48418) *
             C48097 * C48085 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15917 * C121 + C15913 * C128 + C15918 * C122 +
                 C48385 * C129) *
                    C265 +
                (C15917 * C131 + C15913 * C142 + C15918 * C132 +
                 C48385 * C143) *
                    C259 -
                (C15918 * C123 + C48385 * C130 + C15917 * C122 +
                 C15913 * C129) *
                    C266 -
                (C15918 * C133 + C48385 * C144 + C15917 * C132 +
                 C15913 * C143) *
                    C260 +
                (C15917 * C123 + C15913 * C130 + C15918 * C124 +
                 C48385 * C134) *
                    C267 +
                (C15917 * C133 + C15913 * C144 + C15918 * C135 +
                 C48385 * C145) *
                    C48392) *
                   C48286 * C31910 +
               ((C15917 * C424 + C15913 * C437 + C15918 * C421 +
                 C48385 * C431) *
                    C265 +
                (C15917 * C436 + C15913 * C453 + C15918 * C435 +
                 C48385 * C452) *
                    C259 -
                (C15918 * C422 + C48385 * C432 + C15917 * C421 +
                 C15913 * C431) *
                    C266 -
                (C15918 * C434 + C48385 * C451 + C15917 * C435 +
                 C15913 * C452) *
                    C260 +
                (C15917 * C422 + C15913 * C432 + C15918 * C423 +
                 C48385 * C433) *
                    C267 +
                (C15917 * C434 + C15913 * C451 + C15918 * C438 +
                 C48385 * C454) *
                    C48392) *
                   C48286 * C48418) *
                  C48097 * C48437 +
              (((C16119 + C16118) * C266 -
                ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
                (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
                (C16125 + C16124) * C48392) *
                   C48286 * C31910 +
               ((C16774 + C16775) * C266 -
                ((C16776 + C16777) * C259 + (C16778 + C16779) * C265) +
                (C16780 + C16781) * C260 - (C16782 + C16783) * C267 -
                (C16784 + C16785) * C48392) *
                   C48286 * C48418) *
                  C48097 * C48425 +
              (((C16131 + C16130) * C265 + (C16129 + C16128) * C259 -
                (C16127 + C16126) * C266 - (C16133 + C16132) * C260 +
                (C16135 + C16134) * C267 + (C16137 + C16136) * C48392) *
                   C48286 * C31910 +
               ((C17212 + C17213) * C265 + (C17214 + C17215) * C259 -
                (C17564 + C17565) * C266 - (C17566 + C17567) * C260 +
                (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
                 C48385 * C1458) *
                    C267 +
                (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
                 C48385 * C1460) *
                    C48392) *
                   C48286 * C48418) *
                  C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C265 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C259 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C266 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C260 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C267 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C32253 + C32254) * C265 + (C32255 + C32256) * C259 -
            (C32257 + C32258) * C266 - (C32259 + C32260) * C260 +
            (C32261 + C32262) * C267 + (C32263 + C32264) * C48392) *
               C48286 * C48418) *
              C48438 +
          (((C32258 + C32257) * C266 -
            ((C32256 + C32255) * C259 + (C32254 + C32253) * C265) +
            (C32260 + C32259) * C260 - (C32262 + C32261) * C267 -
            (C32264 + C32263) * C48392) *
               C48286 * C31910 +
           ((C32265 + C32266) * C266 -
            ((C32267 + C32268) * C259 + (C32269 + C32270) * C265) +
            (C32271 + C32272) * C260 - (C32273 + C32274) * C267 -
            (C32275 + C32276) * C48392) *
               C48286 * C48418) *
              C48427 +
          (((C32270 + C32269) * C265 + (C32268 + C32267) * C259 -
            (C32266 + C32265) * C266 - (C32272 + C32271) * C260 +
            (C32274 + C32273) * C267 + (C32276 + C32275) * C48392) *
               C48286 * C31910 +
           ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
             C48385 * C1871) *
                C265 +
            (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
             C48385 * C1880) *
                C259 -
            (C15918 * C1861 + C48385 * C1870 + C15917 * C1862 +
             C15913 * C1871) *
                C266 -
            (C15918 * C1867 + C48385 * C1879 + C15917 * C1868 +
             C15913 * C1880) *
                C260 +
            (C15917 * C1861 + C15913 * C1870 + C15918 * C2137 +
             C48385 * C2138) *
                C267 +
            (C15917 * C1867 + C15913 * C1879 + C15918 * C2139 +
             C48385 * C2140) *
                C48392) *
               C48286 * C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C32253 + C32254) * C959 + (C32255 + C32256) * C48434 -
            (C32257 + C32258) * C960 - (C32259 + C32260) * C48421 +
            (C32261 + C32262) * C961 + (C32263 + C32264) * C48392) *
               C48286 * C48418) *
              C48097 * C956 +
          (((C16119 + C16118) * C960 -
            ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
            (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
            (C16125 + C16124) * C48392) *
               C48286 * C31910 +
           ((C16774 + C16775) * C960 -
            ((C16776 + C16777) * C48434 + (C16778 + C16779) * C959) +
            (C16780 + C16781) * C48421 - (C16782 + C16783) * C961 -
            (C16784 + C16785) * C48392) *
               C48286 * C48418) *
              C48097 * C957 +
          (((C16131 + C16130) * C959 + (C16129 + C16128) * C48434 -
            (C16127 + C16126) * C960 - (C16133 + C16132) * C48421 +
            (C16135 + C16134) * C961 + (C16137 + C16136) * C48392) *
               C48286 * C31910 +
           ((C17212 + C17213) * C959 + (C17214 + C17215) * C48434 -
            (C17564 + C17565) * C960 - (C17566 + C17567) * C48421 +
            (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
             C48385 * C1458) *
                C961 +
            (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
             C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C1030 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48044) *
               C48286 * C31910 +
           ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
               C48418) *
              C48097 * C1025 -
          (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
               C48418 +
           ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
               C31910) *
              C48097 * C1026 +
          (((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
               C31910 +
           ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
               C48418) *
              C48097 * C1027 -
          (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48286 *
               C48418 +
           ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C48286 *
               C31910) *
              C48097 * C1028 +
          (((C17037 + C17036) * C1030 + (C17035 + C17034) * C48044) * C48286 *
               C31910 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48385 * C6404) *
                C1030 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48385 * C6408) *
                C48044) *
               C48286 * C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C48438 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C48427 +
           (((C32270 + C32269) * C1030 + (C32268 + C32267) * C48044) * C48286 *
                C31910 +
            ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
              C48385 * C1871) *
                 C1030 +
             (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
              C48385 * C1880) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C956 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C48427 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C48438 -
           (((C18558 + C18559) * C48044 + (C18560 + C18561) * C1030) * C48286 *
                C48418 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C48286 *
                C31910) *
               C48401) *
              C957 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
                C31910 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
                C48418) *
               C48438 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48286 *
                C48418 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C48286 *
                C31910) *
               C48427 +
           (((C17219 + C17218) * C1030 + (C17217 + C17216) * C48044) * C48286 *
                C31910 +
            ((C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
              C48385 * C7272) *
                 C1030 +
             (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
              C48385 * C7276) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C32253 + C32254) * C959 + (C32255 + C32256) * C48434 -
            (C32257 + C32258) * C960 - (C32259 + C32260) * C48421 +
            (C32261 + C32262) * C961 + (C32263 + C32264) * C48392) *
               C48286 * C48418) *
              C1681 +
          (((C32258 + C32257) * C960 -
            ((C32256 + C32255) * C48434 + (C32254 + C32253) * C959) +
            (C32260 + C32259) * C48421 - (C32262 + C32261) * C961 -
            (C32264 + C32263) * C48392) *
               C48286 * C31910 +
           ((C32265 + C32266) * C960 -
            ((C32267 + C32268) * C48434 + (C32269 + C32270) * C959) +
            (C32271 + C32272) * C48421 - (C32273 + C32274) * C961 -
            (C32275 + C32276) * C48392) *
               C48286 * C48418) *
              C1682 +
          (((C32270 + C32269) * C959 + (C32268 + C32267) * C48434 -
            (C32266 + C32265) * C960 - (C32272 + C32271) * C48421 +
            (C32274 + C32273) * C961 + (C32276 + C32275) * C48392) *
               C48286 * C31910 +
           ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
             C48385 * C1871) *
                C959 +
            (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
             C48385 * C1880) *
                C48434 -
            (C15918 * C1861 + C48385 * C1870 + C15917 * C1862 +
             C15913 * C1871) *
                C960 -
            (C15918 * C1867 + C48385 * C1879 + C15917 * C1868 +
             C15913 * C1880) *
                C48421 +
            (C15917 * C1861 + C15913 * C1870 + C15918 * C2137 +
             C48385 * C2138) *
                C961 +
            (C15917 * C1867 + C15913 * C1879 + C15918 * C2139 +
             C48385 * C2140) *
                C48392) *
               C48286 * C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C1681 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C1682 +
           (((C32270 + C32269) * C1030 + (C32268 + C32267) * C48044) * C48286 *
                C31910 +
            ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
              C48385 * C1871) *
                 C1030 +
             (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
              C48385 * C1880) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48437 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C1682 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C1681 -
           (((C18558 + C18559) * C48044 + (C18560 + C18561) * C1030) * C48286 *
                C48418 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C48286 *
                C31910) *
               C48401) *
              C48425 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
                C31910 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
                C48418) *
               C1681 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48286 *
                C48418 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C48286 *
                C31910) *
               C1682 +
           (((C17219 + C17218) * C1030 + (C17217 + C17216) * C48044) * C48286 *
                C31910 +
            ((C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
              C48385 * C7272) *
                 C1030 +
             (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
              C48385 * C7276) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C1030 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48044) *
               C48286 * C31910 +
           ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
               C48418) *
              C1856 -
          (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
               C48418 +
           ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
               C31910) *
              C1857 +
          (((C32270 + C32269) * C1030 + (C32268 + C32267) * C48044) * C48286 *
               C31910 +
           ((C33961 + C33962) * C1030 + (C33963 + C33964) * C48044) * C48286 *
               C48418) *
              C1858 -
          (((C33965 + C33966) * C48044 + (C33967 + C33968) * C1030) * C48286 *
               C48418 +
           ((C33964 + C33963) * C48044 + (C33962 + C33961) * C1030) * C48286 *
               C31910) *
              C1859 +
          (((C33968 + C33967) * C1030 + (C33966 + C33965) * C48044) * C48286 *
               C31910 +
           ((C15917 * C12369 + C15913 * C12371 + C15918 * C12370 +
             C48385 * C12372) *
                C1030 +
            (C15917 * C12373 + C15913 * C12375 + C15918 * C12374 +
             C48385 * C12376) *
                C48044) *
               C48286 * C48418) *
              C1860) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47151 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48352 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47132 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C48286 * C31910 +
            ((C32253 + C32254) * C47151 + (C32255 + C32256) * C48352 -
             (C32257 + C32258) * C47132 - (C32259 + C32260) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C32258 + C32257) * C47132 -
             ((C32256 + C32255) * C48352 + (C32254 + C32253) * C47151) +
             (C32260 + C32259) * C48054) *
                C48286 * C31910 +
            ((C32265 + C32266) * C47132 -
             ((C32267 + C32268) * C48352 + (C32269 + C32270) * C47151) +
             (C32271 + C32272) * C48054) *
                C48286 * C48418) *
               C48184) *
              C956 +
          ((((C16119 + C16118) * C47132 -
             ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
             (C16121 + C16120) * C48054) *
                C48286 * C31910 +
            ((C16774 + C16775) * C47132 -
             ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
             (C16780 + C16781) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C16779 + C16778) * C47151 + (C16777 + C16776) * C48352 -
             (C16775 + C16774) * C47132 - (C16781 + C16780) * C48054) *
                C48286 * C31910 +
            ((C17208 + C17209) * C47151 + (C17210 + C17211) * C48352 -
             (C18286 + C18287) * C47132 - (C18288 + C18289) * C48054) *
                C48286 * C48418) *
               C48184) *
              C957 +
          ((((C16131 + C16130) * C47151 + (C16129 + C16128) * C48352 -
             (C16127 + C16126) * C47132 - (C16133 + C16132) * C48054) *
                C48286 * C31910 +
            ((C17212 + C17213) * C47151 + (C17214 + C17215) * C48352 -
             (C17564 + C17565) * C47132 - (C17566 + C17567) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C17565 + C17564) * C47132 -
             ((C17215 + C17214) * C48352 + (C17213 + C17212) * C47151) +
             (C17567 + C17566) * C48054) *
                C48286 * C31910 +
            ((C15917 * C1172 + C15913 * C1187 + C15918 * C1173 +
              C48385 * C1188) *
                 C47132 -
             ((C17216 + C17217) * C48352 + (C17218 + C17219) * C47151) +
             (C15917 * C1190 + C15913 * C1199 + C15918 * C1191 +
              C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C565 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C559 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C566 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C560 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C567 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C561 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C568 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C48286 * C31910 +
           ((C32253 + C32254) * C565 + (C32255 + C32256) * C559 -
            (C32257 + C32258) * C566 - (C32259 + C32260) * C560 +
            (C32261 + C32262) * C567 + (C32263 + C32264) * C561 -
            (C32545 + C32546) * C568 - (C32547 + C32548) * C48402) *
               C48286 * C48418) *
              C48367 +
          (((C32258 + C32257) * C566 -
            ((C32256 + C32255) * C559 + (C32254 + C32253) * C565) +
            (C32260 + C32259) * C560 - (C32262 + C32261) * C567 -
            (C32264 + C32263) * C561 + (C32546 + C32545) * C568 +
            (C32548 + C32547) * C48402) *
               C48286 * C31910 +
           ((C32265 + C32266) * C566 -
            ((C32267 + C32268) * C559 + (C32269 + C32270) * C565) +
            (C32271 + C32272) * C560 - (C32273 + C32274) * C567 -
            (C32275 + C32276) * C561 +
            (C15917 * C429 + C15913 * C447 + C15918 * C430 + C48385 * C449) *
                C568 +
            (C15917 * C448 + C15913 * C459 + C15918 * C450 + C48385 * C460) *
                C48402) *
               C48286 * C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C47151 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48352 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C47132 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C48286 * C31910 +
           ((C32253 + C32254) * C47151 + (C32255 + C32256) * C48352 -
            (C32257 + C32258) * C47132 - (C32259 + C32260) * C48054) *
               C48286 * C48418) *
              C2133 +
          (((C32258 + C32257) * C47132 -
            ((C32256 + C32255) * C48352 + (C32254 + C32253) * C47151) +
            (C32260 + C32259) * C48054) *
               C48286 * C31910 +
           ((C32265 + C32266) * C47132 -
            ((C32267 + C32268) * C48352 + (C32269 + C32270) * C47151) +
            (C32271 + C32272) * C48054) *
               C48286 * C48418) *
              C2134 +
          (((C32270 + C32269) * C47151 + (C32268 + C32267) * C48352 -
            (C32266 + C32265) * C47132 - (C32272 + C32271) * C48054) *
               C48286 * C31910 +
           ((C33961 + C33962) * C47151 + (C33963 + C33964) * C48352 -
            (C34301 + C34302) * C47132 - (C34303 + C34304) * C48054) *
               C48286 * C48418) *
              C2135 +
          (((C34302 + C34301) * C47132 -
            ((C33964 + C33963) * C48352 + (C33962 + C33961) * C47151) +
            (C34304 + C34303) * C48054) *
               C48286 * C31910 +
           ((C15917 * C1865 + C15913 * C1874 + C15918 * C1866 +
             C48385 * C1875) *
                C47132 -
            ((C33965 + C33966) * C48352 + (C33967 + C33968) * C47151) +
            (C15917 * C1877 + C15913 * C1883 + C15918 * C1878 +
             C48385 * C1884) *
                C48054) *
               C48286 * C48418) *
              C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C265 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C259 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C266 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C260 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C267 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C15917 * C424 + C15913 * C437 + C15918 * C421 + C48385 * C431) *
                C265 +
            (C15917 * C436 + C15913 * C453 + C15918 * C435 + C48385 * C452) *
                C259 -
            (C15918 * C422 + C48385 * C432 + C15917 * C421 + C15913 * C431) *
                C266 -
            (C15918 * C434 + C48385 * C451 + C15917 * C435 + C15913 * C452) *
                C260 +
            (C15917 * C422 + C15913 * C432 + C15918 * C423 + C48385 * C433) *
                C267 +
            (C15917 * C434 + C15913 * C451 + C15918 * C438 + C48385 * C454) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48437 +
          (((C16119 + C16118) * C266 -
            ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
            (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
            (C16125 + C16124) * C48392) *
               C48286 * C31910 +
           ((C16774 + C16775) * C266 -
            ((C16776 + C16777) * C259 + (C16778 + C16779) * C265) +
            (C16780 + C16781) * C260 - (C16782 + C16783) * C267 -
            (C16784 + C16785) * C48392) *
               C48286 * C48418) *
              C48097 * C48425 +
          (((C16131 + C16130) * C265 + (C16129 + C16128) * C259 -
            (C16127 + C16126) * C266 - (C16133 + C16132) * C260 +
            (C16135 + C16134) * C267 + (C16137 + C16136) * C48392) *
               C48286 * C31910 +
           ((C17212 + C17213) * C265 + (C17214 + C17215) * C259 -
            (C17564 + C17565) * C266 - (C17566 + C17567) * C260 +
            (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
             C48385 * C1458) *
                C267 +
            (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
             C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
               C116 +
           (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
               C104 -
           (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
               C117 -
           (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
               C105 +
           (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
               C118 +
           (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
               C106 -
           (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
               C119 -
           (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
               C107 +
           (C15917 * C125 + C15913 * C136 + C15918 * C126 + C48385 * C138) *
               C120 +
           (C15917 * C137 + C15913 * C146 + C15918 * C139 + C48385 * C147) *
               C108) *
              C48286 * C31910 +
          ((C15917 * C424 + C15913 * C437 + C15918 * C421 + C48385 * C431) *
               C116 +
           (C15917 * C436 + C15913 * C453 + C15918 * C435 + C48385 * C452) *
               C104 -
           (C15918 * C422 + C48385 * C432 + C15917 * C421 + C15913 * C431) *
               C117 -
           (C15918 * C434 + C48385 * C451 + C15917 * C435 + C15913 * C452) *
               C105 +
           (C15917 * C422 + C15913 * C432 + C15918 * C423 + C48385 * C433) *
               C118 +
           (C15917 * C434 + C15913 * C451 + C15918 * C438 + C48385 * C454) *
               C106 -
           (C15918 * C425 + C48385 * C439 + C15917 * C423 + C15913 * C433) *
               C119 -
           (C15918 * C440 + C48385 * C455 + C15917 * C438 + C15913 * C454) *
               C107 +
           (C15917 * C425 + C15913 * C439 + C15918 * C673 + C48385 * C674) *
               C120 +
           (C15917 * C440 + C15913 * C455 + C15918 * C675 + C48385 * C676) *
               C108) *
              C48286 * C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C32253 + C32254) * C959 + (C32255 + C32256) * C48434 -
            (C32257 + C32258) * C960 - (C32259 + C32260) * C48421 +
            (C32261 + C32262) * C961 + (C32263 + C32264) * C48392) *
               C48286 * C48418) *
              C48097 * C956 +
          (((C16119 + C16118) * C960 -
            ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
            (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
            (C16125 + C16124) * C48392) *
               C48286 * C31910 +
           ((C16774 + C16775) * C960 -
            ((C16776 + C16777) * C48434 + (C16778 + C16779) * C959) +
            (C16780 + C16781) * C48421 - (C16782 + C16783) * C961 -
            (C16784 + C16785) * C48392) *
               C48286 * C48418) *
              C48097 * C957 +
          (((C16131 + C16130) * C959 + (C16129 + C16128) * C48434 -
            (C16127 + C16126) * C960 - (C16133 + C16132) * C48421 +
            (C16135 + C16134) * C961 + (C16137 + C16136) * C48392) *
               C48286 * C31910 +
           ((C17212 + C17213) * C959 + (C17214 + C17215) * C48434 -
            (C17564 + C17565) * C960 - (C17566 + C17567) * C48421 +
            (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
             C48385 * C1458) *
                C961 +
            (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
             C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C1030 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48044) *
               C48286 * C31910 +
           ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
               C48418) *
              C48097 * C1025 -
          (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
               C48418 +
           ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
               C31910) *
              C48097 * C1026 +
          (((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
               C31910 +
           ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
               C48418) *
              C48097 * C1027 -
          (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48286 *
               C48418 +
           ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C48286 *
               C31910) *
              C48097 * C1028 +
          (((C17037 + C17036) * C1030 + (C17035 + C17034) * C48044) * C48286 *
               C31910 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48385 * C6404) *
                C1030 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48385 * C6408) *
                C48044) *
               C48286 * C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C32253 + C32254) * C959 + (C32255 + C32256) * C48434 -
            (C32257 + C32258) * C960 - (C32259 + C32260) * C48421 +
            (C32261 + C32262) * C961 + (C32263 + C32264) * C48392) *
               C48286 * C48418) *
              C1681 +
          (((C32258 + C32257) * C960 -
            ((C32256 + C32255) * C48434 + (C32254 + C32253) * C959) +
            (C32260 + C32259) * C48421 - (C32262 + C32261) * C961 -
            (C32264 + C32263) * C48392) *
               C48286 * C31910 +
           ((C32265 + C32266) * C960 -
            ((C32267 + C32268) * C48434 + (C32269 + C32270) * C959) +
            (C32271 + C32272) * C48421 - (C32273 + C32274) * C961 -
            (C32275 + C32276) * C48392) *
               C48286 * C48418) *
              C1682 +
          (((C32270 + C32269) * C959 + (C32268 + C32267) * C48434 -
            (C32266 + C32265) * C960 - (C32272 + C32271) * C48421 +
            (C32274 + C32273) * C961 + (C32276 + C32275) * C48392) *
               C48286 * C31910 +
           ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
             C48385 * C1871) *
                C959 +
            (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
             C48385 * C1880) *
                C48434 -
            (C15918 * C1861 + C48385 * C1870 + C15917 * C1862 +
             C15913 * C1871) *
                C960 -
            (C15918 * C1867 + C48385 * C1879 + C15917 * C1868 +
             C15913 * C1880) *
                C48421 +
            (C15917 * C1861 + C15913 * C1870 + C15918 * C2137 +
             C48385 * C2138) *
                C961 +
            (C15917 * C1867 + C15913 * C1879 + C15918 * C2139 +
             C48385 * C2140) *
                C48392) *
               C48286 * C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C1681 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C1682 +
           (((C32270 + C32269) * C1030 + (C32268 + C32267) * C48044) * C48286 *
                C31910 +
            ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
              C48385 * C1871) *
                 C1030 +
             (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
              C48385 * C1880) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48437 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C1682 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C1681 -
           (((C18558 + C18559) * C48044 + (C18560 + C18561) * C1030) * C48286 *
                C48418 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C48286 *
                C31910) *
               C48401) *
              C48425 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
                C31910 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
                C48418) *
               C1681 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48286 *
                C48418 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C48286 *
                C31910) *
               C1682 +
           (((C17219 + C17218) * C1030 + (C17217 + C17216) * C48044) * C48286 *
                C31910 +
            ((C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
              C48385 * C7272) *
                 C1030 +
             (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
              C48385 * C7276) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47161 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48049 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47157 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48057 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C47167 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C2723) *
                C48286 * C31910 +
            ((C32253 + C32254) * C47161 + (C32255 + C32256) * C48049 -
             (C32257 + C32258) * C47157 - (C32259 + C32260) * C48057 +
             (C32261 + C32262) * C47167 + (C32263 + C32264) * C2723) *
                C48286 * C48418) *
               C3120 +
           (((C32258 + C32257) * C47157 -
             ((C32256 + C32255) * C48049 + (C32254 + C32253) * C47161) +
             (C32260 + C32259) * C48057 - (C32262 + C32261) * C47167 -
             (C32264 + C32263) * C2723) *
                C48286 * C31910 +
            ((C32265 + C32266) * C47157 -
             ((C32267 + C32268) * C48049 + (C32269 + C32270) * C47161) +
             (C32271 + C32272) * C48057 - (C32273 + C32274) * C47167 -
             (C32275 + C32276) * C2723) *
                C48286 * C48418) *
               C48184) *
              C48366 +
          ((((C16119 + C16118) * C47157 -
             ((C16117 + C16116) * C48049 + (C16115 + C16114) * C47161) +
             (C16121 + C16120) * C48057 - (C16123 + C16122) * C47167 -
             (C16125 + C16124) * C2723) *
                C48286 * C31910 +
            ((C16774 + C16775) * C47157 -
             ((C16776 + C16777) * C48049 + (C16778 + C16779) * C47161) +
             (C16780 + C16781) * C48057 - (C16782 + C16783) * C47167 -
             (C16784 + C16785) * C2723) *
                C48286 * C48418) *
               C3120 +
           (((C16779 + C16778) * C47161 + (C16777 + C16776) * C48049 -
             (C16775 + C16774) * C47157 - (C16781 + C16780) * C48057 +
             (C16783 + C16782) * C47167 + (C16785 + C16784) * C2723) *
                C48286 * C31910 +
            ((C17208 + C17209) * C47161 + (C17210 + C17211) * C48049 -
             (C18286 + C18287) * C47157 - (C18288 + C18289) * C48057 +
             (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
              C48385 * C2032) *
                 C47167 +
             (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
              C48385 * C2034) *
                 C2723) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C2463 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C2457 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C2464 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C48286 * C31910 +
            ((C32253 + C32254) * C2463 + (C32255 + C32256) * C2457 -
             (C32257 + C32258) * C2464 - (C32259 + C32260) * C48054) *
                C48286 * C48418) *
               C48180 +
           (((C32258 + C32257) * C2464 -
             ((C32256 + C32255) * C2457 + (C32254 + C32253) * C2463) +
             (C32260 + C32259) * C48054) *
                C48286 * C31910 +
            ((C32265 + C32266) * C2464 -
             ((C32267 + C32268) * C2457 + (C32269 + C32270) * C2463) +
             (C32271 + C32272) * C48054) *
                C48286 * C48418) *
               C48187 +
           (((C32270 + C32269) * C2463 + (C32268 + C32267) * C2457 -
             (C32266 + C32265) * C2464 - (C32272 + C32271) * C48054) *
                C48286 * C31910 +
            ((C33961 + C33962) * C2463 + (C33963 + C33964) * C2457 -
             (C34301 + C34302) * C2464 - (C34303 + C34304) * C48054) *
                C48286 * C48418) *
               C3628) *
              C48366 +
          ((((C16119 + C16118) * C2464 -
             ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
             (C16121 + C16120) * C48054) *
                C48286 * C31910 +
            ((C16774 + C16775) * C2464 -
             ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
             (C16780 + C16781) * C48054) *
                C48286 * C48418) *
               C48180 +
           (((C16779 + C16778) * C2463 + (C16777 + C16776) * C2457 -
             (C16775 + C16774) * C2464 - (C16781 + C16780) * C48054) *
                C48286 * C31910 +
            ((C17208 + C17209) * C2463 + (C17210 + C17211) * C2457 -
             (C18286 + C18287) * C2464 - (C18288 + C18289) * C48054) *
                C48286 * C48418) *
               C48187 +
           (((C18287 + C18286) * C2464 -
             ((C17211 + C17210) * C2457 + (C17209 + C17208) * C2463) +
             (C18289 + C18288) * C48054) *
                C48286 * C31910 +
            ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48385 * C2244) *
                 C2464 -
             ((C18558 + C18559) * C2457 + (C18560 + C18561) * C2463) +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48385 * C2250) *
                 C48054) *
                C48286 * C48418) *
               C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C2463 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C2457 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C2464 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C48286 * C31910 +
            ((C32253 + C32254) * C2463 + (C32255 + C32256) * C2457 -
             (C32257 + C32258) * C2464 - (C32259 + C32260) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C32258 + C32257) * C2464 -
             ((C32256 + C32255) * C2457 + (C32254 + C32253) * C2463) +
             (C32260 + C32259) * C48054) *
                C48286 * C31910 +
            ((C32265 + C32266) * C2464 -
             ((C32267 + C32268) * C2457 + (C32269 + C32270) * C2463) +
             (C32271 + C32272) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48437 +
          ((((C16119 + C16118) * C2464 -
             ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
             (C16121 + C16120) * C48054) *
                C48286 * C31910 +
            ((C16774 + C16775) * C2464 -
             ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
             (C16780 + C16781) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C16779 + C16778) * C2463 + (C16777 + C16776) * C2457 -
             (C16775 + C16774) * C2464 - (C16781 + C16780) * C48054) *
                C48286 * C31910 +
            ((C17208 + C17209) * C2463 + (C17210 + C17211) * C2457 -
             (C18286 + C18287) * C2464 - (C18288 + C18289) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48425 +
          ((((C16131 + C16130) * C2463 + (C16129 + C16128) * C2457 -
             (C16127 + C16126) * C2464 - (C16133 + C16132) * C48054) *
                C48286 * C31910 +
            ((C17212 + C17213) * C2463 + (C17214 + C17215) * C2457 -
             (C17564 + C17565) * C2464 - (C17566 + C17567) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C17565 + C17564) * C2464 -
             ((C17215 + C17214) * C2457 + (C17213 + C17212) * C2463) +
             (C17567 + C17566) * C48054) *
                C48286 * C31910 +
            ((C15917 * C1172 + C15913 * C1187 + C15918 * C1173 +
              C48385 * C1188) *
                 C2464 -
             ((C17216 + C17217) * C2457 + (C17218 + C17219) * C2463) +
             (C15917 * C1190 + C15913 * C1199 + C15918 * C1191 +
              C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2355 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48443 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2356 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48436 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C2357 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48423 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C2358 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C48286 * C31910 +
           ((C32253 + C32254) * C2355 + (C32255 + C32256) * C48443 -
            (C32257 + C32258) * C2356 - (C32259 + C32260) * C48436 +
            (C32261 + C32262) * C2357 + (C32263 + C32264) * C48423 -
            (C32545 + C32546) * C2358 - (C32547 + C32548) * C48402) *
               C48286 * C48418) *
              C3120 +
          (((C32258 + C32257) * C2356 -
            ((C32256 + C32255) * C48443 + (C32254 + C32253) * C2355) +
            (C32260 + C32259) * C48436 - (C32262 + C32261) * C2357 -
            (C32264 + C32263) * C48423 + (C32546 + C32545) * C2358 +
            (C32548 + C32547) * C48402) *
               C48286 * C31910 +
           ((C32265 + C32266) * C2356 -
            ((C32267 + C32268) * C48443 + (C32269 + C32270) * C2355) +
            (C32271 + C32272) * C48436 - (C32273 + C32274) * C2357 -
            (C32275 + C32276) * C48423 +
            (C15917 * C429 + C15913 * C447 + C15918 * C430 + C48385 * C449) *
                C2358 +
            (C15917 * C448 + C15913 * C459 + C15918 * C450 + C48385 * C460) *
                C48402) *
               C48286 * C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2463 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C2457 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2464 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C48286 * C31910 +
           ((C32253 + C32254) * C2463 + (C32255 + C32256) * C2457 -
            (C32257 + C32258) * C2464 - (C32259 + C32260) * C48054) *
               C48286 * C48418) *
              C48445 +
          (((C32258 + C32257) * C2464 -
            ((C32256 + C32255) * C2457 + (C32254 + C32253) * C2463) +
            (C32260 + C32259) * C48054) *
               C48286 * C31910 +
           ((C32265 + C32266) * C2464 -
            ((C32267 + C32268) * C2457 + (C32269 + C32270) * C2463) +
            (C32271 + C32272) * C48054) *
               C48286 * C48418) *
              C48442 +
          (((C32270 + C32269) * C2463 + (C32268 + C32267) * C2457 -
            (C32266 + C32265) * C2464 - (C32272 + C32271) * C48054) *
               C48286 * C31910 +
           ((C33961 + C33962) * C2463 + (C33963 + C33964) * C2457 -
            (C34301 + C34302) * C2464 - (C34303 + C34304) * C48054) *
               C48286 * C48418) *
              C48433 +
          (((C34302 + C34301) * C2464 -
            ((C33964 + C33963) * C2457 + (C33962 + C33961) * C2463) +
            (C34304 + C34303) * C48054) *
               C48286 * C31910 +
           ((C15917 * C1865 + C15913 * C1874 + C15918 * C1866 +
             C48385 * C1875) *
                C2464 -
            ((C33965 + C33966) * C2457 + (C33967 + C33968) * C2463) +
            (C15917 * C1877 + C15913 * C1883 + C15918 * C1878 +
             C48385 * C1884) *
                C48054) *
               C48286 * C48418) *
              C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C47161 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48049 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C47157 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48057 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C47167 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C2723) *
               C48286 * C31910 +
           ((C32253 + C32254) * C47161 + (C32255 + C32256) * C48049 -
            (C32257 + C32258) * C47157 - (C32259 + C32260) * C48057 +
            (C32261 + C32262) * C47167 + (C32263 + C32264) * C2723) *
               C48286 * C48418) *
              C48180 +
          (((C32258 + C32257) * C47157 -
            ((C32256 + C32255) * C48049 + (C32254 + C32253) * C47161) +
            (C32260 + C32259) * C48057 - (C32262 + C32261) * C47167 -
            (C32264 + C32263) * C2723) *
               C48286 * C31910 +
           ((C32265 + C32266) * C47157 -
            ((C32267 + C32268) * C48049 + (C32269 + C32270) * C47161) +
            (C32271 + C32272) * C48057 - (C32273 + C32274) * C47167 -
            (C32275 + C32276) * C2723) *
               C48286 * C48418) *
              C48187 +
          (((C32270 + C32269) * C47161 + (C32268 + C32267) * C48049 -
            (C32266 + C32265) * C47157 - (C32272 + C32271) * C48057 +
            (C32274 + C32273) * C47167 + (C32276 + C32275) * C2723) *
               C48286 * C31910 +
           ((C33961 + C33962) * C47161 + (C33963 + C33964) * C48049 -
            (C34301 + C34302) * C47157 - (C34303 + C34304) * C48057 +
            (C15917 * C1861 + C15913 * C1870 + C15918 * C2137 +
             C48385 * C2138) *
                C47167 +
            (C15917 * C1867 + C15913 * C1879 + C15918 * C2139 +
             C48385 * C2140) *
                C2723) *
               C48286 * C48418) *
              C3628) *
         C48085) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C2355 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48443 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C2356 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48436 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C2357 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48423 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C2358 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C48286 * C31910 +
           ((C32253 + C32254) * C2355 + (C32255 + C32256) * C48443 -
            (C32257 + C32258) * C2356 - (C32259 + C32260) * C48436 +
            (C32261 + C32262) * C2357 + (C32263 + C32264) * C48423 -
            (C32545 + C32546) * C2358 - (C32547 + C32548) * C48402) *
               C48286 * C48418) *
              C3120 +
          (((C32258 + C32257) * C2356 -
            ((C32256 + C32255) * C48443 + (C32254 + C32253) * C2355) +
            (C32260 + C32259) * C48436 - (C32262 + C32261) * C2357 -
            (C32264 + C32263) * C48423 + (C32546 + C32545) * C2358 +
            (C32548 + C32547) * C48402) *
               C48286 * C31910 +
           ((C32265 + C32266) * C2356 -
            ((C32267 + C32268) * C48443 + (C32269 + C32270) * C2355) +
            (C32271 + C32272) * C48436 - (C32273 + C32274) * C2357 -
            (C32275 + C32276) * C48423 +
            (C15917 * C429 + C15913 * C447 + C15918 * C430 + C48385 * C449) *
                C2358 +
            (C15917 * C448 + C15913 * C459 + C15918 * C450 + C48385 * C460) *
                C48402) *
               C48286 * C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C2463 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C2457 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C2464 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C48286 * C31910 +
            ((C32253 + C32254) * C2463 + (C32255 + C32256) * C2457 -
             (C32257 + C32258) * C2464 - (C32259 + C32260) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C32258 + C32257) * C2464 -
             ((C32256 + C32255) * C2457 + (C32254 + C32253) * C2463) +
             (C32260 + C32259) * C48054) *
                C48286 * C31910 +
            ((C32265 + C32266) * C2464 -
             ((C32267 + C32268) * C2457 + (C32269 + C32270) * C2463) +
             (C32271 + C32272) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48437 +
          ((((C16119 + C16118) * C2464 -
             ((C16117 + C16116) * C2457 + (C16115 + C16114) * C2463) +
             (C16121 + C16120) * C48054) *
                C48286 * C31910 +
            ((C16774 + C16775) * C2464 -
             ((C16776 + C16777) * C2457 + (C16778 + C16779) * C2463) +
             (C16780 + C16781) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C16779 + C16778) * C2463 + (C16777 + C16776) * C2457 -
             (C16775 + C16774) * C2464 - (C16781 + C16780) * C48054) *
                C48286 * C31910 +
            ((C17208 + C17209) * C2463 + (C17210 + C17211) * C2457 -
             (C18286 + C18287) * C2464 - (C18288 + C18289) * C48054) *
                C48286 * C48418) *
               C48184) *
              C48425 +
          ((((C16131 + C16130) * C2463 + (C16129 + C16128) * C2457 -
             (C16127 + C16126) * C2464 - (C16133 + C16132) * C48054) *
                C48286 * C31910 +
            ((C17212 + C17213) * C2463 + (C17214 + C17215) * C2457 -
             (C17564 + C17565) * C2464 - (C17566 + C17567) * C48054) *
                C48286 * C48418) *
               C3120 +
           (((C17565 + C17564) * C2464 -
             ((C17215 + C17214) * C2457 + (C17213 + C17212) * C2463) +
             (C17567 + C17566) * C48054) *
                C48286 * C31910 +
            ((C15917 * C1172 + C15913 * C1187 + C15918 * C1173 +
              C48385 * C1188) *
                 C2464 -
             ((C17216 + C17217) * C2457 + (C17218 + C17219) * C2463) +
             (C15917 * C1190 + C15913 * C1199 + C15918 * C1191 +
              C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C565 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C559 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C566 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C560 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C567 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C561 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C568 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C48286 * C31910 +
           ((C32253 + C32254) * C565 + (C32255 + C32256) * C559 -
            (C32257 + C32258) * C566 - (C32259 + C32260) * C560 +
            (C32261 + C32262) * C567 + (C32263 + C32264) * C561 -
            (C15918 * C425 + C48385 * C439 + C15917 * C423 + C15913 * C433) *
                C568 -
            (C15918 * C440 + C48385 * C455 + C15917 * C438 + C15913 * C454) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48366 +
          (((C16119 + C16118) * C566 -
            ((C16117 + C16116) * C559 + (C16115 + C16114) * C565) +
            (C16121 + C16120) * C560 - (C16123 + C16122) * C567 -
            (C16125 + C16124) * C561 + (C16423 + C16422) * C568 +
            (C16425 + C16424) * C48402) *
               C48286 * C31910 +
           ((C16774 + C16775) * C566 -
            ((C16776 + C16777) * C559 + (C16778 + C16779) * C565) +
            (C16780 + C16781) * C560 - (C16782 + C16783) * C567 -
            (C16784 + C16785) * C561 +
            (C15917 * C826 + C15913 * C834 + C15918 * C827 + C48385 * C836) *
                C568 +
            (C15917 * C835 + C15913 * C841 + C15918 * C837 + C48385 * C842) *
                C48402) *
               C48286 * C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C47151 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48352 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C47132 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48054) *
               C48286 * C31910 +
           ((C32253 + C32254) * C47151 + (C32255 + C32256) * C48352 -
            (C32257 + C32258) * C47132 - (C32259 + C32260) * C48054) *
               C48286 * C48418) *
              C48097 * C1301 +
          (((C16119 + C16118) * C47132 -
            ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
            (C16121 + C16120) * C48054) *
               C48286 * C31910 +
           ((C16774 + C16775) * C47132 -
            ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
            (C16780 + C16781) * C48054) *
               C48286 * C48418) *
              C48097 * C1302 +
          (((C16131 + C16130) * C47151 + (C16129 + C16128) * C48352 -
            (C16127 + C16126) * C47132 - (C16133 + C16132) * C48054) *
               C48286 * C31910 +
           ((C17212 + C17213) * C47151 + (C17214 + C17215) * C48352 -
            (C17564 + C17565) * C47132 - (C17566 + C17567) * C48054) *
               C48286 * C48418) *
              C48097 * C1303 +
          (((C17359 + C17358) * C47132 -
            ((C17033 + C17032) * C48352 + (C17031 + C17030) * C47151) +
            (C17361 + C17360) * C48054) *
               C48286 * C31910 +
           ((C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
             C48385 * C1564) *
                C47132 -
            ((C17706 + C17707) * C48352 + (C17708 + C17709) * C47151) +
            (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
             C48385 * C1570) *
                C48054) *
               C48286 * C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C265 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C259 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C266 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C260 +
             (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                 C267 +
             (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                 C48392) *
                C48286 * C31910 +
            ((C32253 + C32254) * C265 + (C32255 + C32256) * C259 -
             (C32257 + C32258) * C266 - (C32259 + C32260) * C260 +
             (C32261 + C32262) * C267 + (C32263 + C32264) * C48392) *
                C48286 * C48418) *
               C48367 +
           (((C32258 + C32257) * C266 -
             ((C32256 + C32255) * C259 + (C32254 + C32253) * C265) +
             (C32260 + C32259) * C260 - (C32262 + C32261) * C267 -
             (C32264 + C32263) * C48392) *
                C48286 * C31910 +
            ((C32265 + C32266) * C266 -
             ((C32267 + C32268) * C259 + (C32269 + C32270) * C265) +
             (C32271 + C32272) * C260 - (C32273 + C32274) * C267 -
             (C32275 + C32276) * C48392) *
                C48286 * C48418) *
               C48184) *
              C48366 +
          ((((C16119 + C16118) * C266 -
             ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
             (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
             (C16125 + C16124) * C48392) *
                C48286 * C31910 +
            ((C16774 + C16775) * C266 -
             ((C16776 + C16777) * C259 + (C16778 + C16779) * C265) +
             (C16780 + C16781) * C260 - (C16782 + C16783) * C267 -
             (C16784 + C16785) * C48392) *
                C48286 * C48418) *
               C48367 +
           (((C16779 + C16778) * C265 + (C16777 + C16776) * C259 -
             (C16775 + C16774) * C266 - (C16781 + C16780) * C260 +
             (C16783 + C16782) * C267 + (C16785 + C16784) * C48392) *
                C48286 * C31910 +
            ((C17208 + C17209) * C265 + (C17210 + C17211) * C259 -
             (C18286 + C18287) * C266 - (C18288 + C18289) * C260 +
             (C15917 * C1165 + C15913 * C1177 + C15918 * C2031 +
              C48385 * C2032) *
                 C267 +
             (C15917 * C1174 + C15913 * C1192 + C15918 * C2033 +
              C48385 * C2034) *
                 C48392) *
                C48286 * C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C48367 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C48184) *
              C1301 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C48184 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C48367) *
              C1302 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
                C31910 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
                C48418) *
               C48367 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48286 *
                C48418 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C48286 *
                C31910) *
               C48184) *
              C1303 +
          ((((C17709 + C17708) * C1030 + (C17707 + C17706) * C48044) * C48286 *
                C31910 +
            ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
              C48385 * C5882) *
                 C1030 +
             (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
              C48385 * C5886) *
                 C48044) *
                C48286 * C48418) *
               C48184 -
           (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48286 *
                C48418 +
            ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C48286 *
                C31910) *
               C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C265 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C259 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C266 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C260 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C267 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C15917 * C424 + C15913 * C437 + C15918 * C421 + C48385 * C431) *
                C265 +
            (C15917 * C436 + C15913 * C453 + C15918 * C435 + C48385 * C452) *
                C259 -
            (C15918 * C422 + C48385 * C432 + C15917 * C421 + C15913 * C431) *
                C266 -
            (C15918 * C434 + C48385 * C451 + C15917 * C435 + C15913 * C452) *
                C260 +
            (C15917 * C422 + C15913 * C432 + C15918 * C423 + C48385 * C433) *
                C267 +
            (C15917 * C434 + C15913 * C451 + C15918 * C438 + C48385 * C454) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48437 +
          (((C16119 + C16118) * C266 -
            ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
            (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
            (C16125 + C16124) * C48392) *
               C48286 * C31910 +
           ((C16774 + C16775) * C266 -
            ((C16776 + C16777) * C259 + (C16778 + C16779) * C265) +
            (C16780 + C16781) * C260 - (C16782 + C16783) * C267 -
            (C16784 + C16785) * C48392) *
               C48286 * C48418) *
              C48097 * C48425 +
          (((C16131 + C16130) * C265 + (C16129 + C16128) * C259 -
            (C16127 + C16126) * C266 - (C16133 + C16132) * C260 +
            (C16135 + C16134) * C267 + (C16137 + C16136) * C48392) *
               C48286 * C31910 +
           ((C17212 + C17213) * C265 + (C17214 + C17215) * C259 -
            (C17564 + C17565) * C266 - (C17566 + C17567) * C260 +
            (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
             C48385 * C1458) *
                C267 +
            (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
             C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
               C116 +
           (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
               C104 -
           (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
               C117 -
           (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
               C105 +
           (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
               C118 +
           (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
               C106 -
           (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
               C119 -
           (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
               C107 +
           (C15917 * C125 + C15913 * C136 + C15918 * C126 + C48385 * C138) *
               C120 +
           (C15917 * C137 + C15913 * C146 + C15918 * C139 + C48385 * C147) *
               C108) *
              C48286 * C31910 +
          ((C15917 * C424 + C15913 * C437 + C15918 * C421 + C48385 * C431) *
               C116 +
           (C15917 * C436 + C15913 * C453 + C15918 * C435 + C48385 * C452) *
               C104 -
           (C15918 * C422 + C48385 * C432 + C15917 * C421 + C15913 * C431) *
               C117 -
           (C15918 * C434 + C48385 * C451 + C15917 * C435 + C15913 * C452) *
               C105 +
           (C15917 * C422 + C15913 * C432 + C15918 * C423 + C48385 * C433) *
               C118 +
           (C15917 * C434 + C15913 * C451 + C15918 * C438 + C48385 * C454) *
               C106 -
           (C15918 * C425 + C48385 * C439 + C15917 * C423 + C15913 * C433) *
               C119 -
           (C15918 * C440 + C48385 * C455 + C15917 * C438 + C15913 * C454) *
               C107 +
           (C15917 * C425 + C15913 * C439 + C15918 * C673 + C48385 * C674) *
               C120 +
           (C15917 * C440 + C15913 * C455 + C15918 * C675 + C48385 * C676) *
               C108) *
              C48286 * C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C265 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C259 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C266 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C260 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C267 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C32253 + C32254) * C265 + (C32255 + C32256) * C259 -
            (C32257 + C32258) * C266 - (C32259 + C32260) * C260 +
            (C32261 + C32262) * C267 + (C32263 + C32264) * C48392) *
               C48286 * C48418) *
              C48438 +
          (((C32258 + C32257) * C266 -
            ((C32256 + C32255) * C259 + (C32254 + C32253) * C265) +
            (C32260 + C32259) * C260 - (C32262 + C32261) * C267 -
            (C32264 + C32263) * C48392) *
               C48286 * C31910 +
           ((C32265 + C32266) * C266 -
            ((C32267 + C32268) * C259 + (C32269 + C32270) * C265) +
            (C32271 + C32272) * C260 - (C32273 + C32274) * C267 -
            (C32275 + C32276) * C48392) *
               C48286 * C48418) *
              C48427 +
          (((C32270 + C32269) * C265 + (C32268 + C32267) * C259 -
            (C32266 + C32265) * C266 - (C32272 + C32271) * C260 +
            (C32274 + C32273) * C267 + (C32276 + C32275) * C48392) *
               C48286 * C31910 +
           ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
             C48385 * C1871) *
                C265 +
            (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
             C48385 * C1880) *
                C259 -
            (C15918 * C1861 + C48385 * C1870 + C15917 * C1862 +
             C15913 * C1871) *
                C266 -
            (C15918 * C1867 + C48385 * C1879 + C15917 * C1868 +
             C15913 * C1880) *
                C260 +
            (C15917 * C1861 + C15913 * C1870 + C15918 * C2137 +
             C48385 * C2138) *
                C267 +
            (C15917 * C1867 + C15913 * C1879 + C15918 * C2139 +
             C48385 * C2140) *
                C48392) *
               C48286 * C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C32253 + C32254) * C959 + (C32255 + C32256) * C48434 -
            (C32257 + C32258) * C960 - (C32259 + C32260) * C48421 +
            (C32261 + C32262) * C961 + (C32263 + C32264) * C48392) *
               C48286 * C48418) *
              C48097 * C956 +
          (((C16119 + C16118) * C960 -
            ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
            (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
            (C16125 + C16124) * C48392) *
               C48286 * C31910 +
           ((C16774 + C16775) * C960 -
            ((C16776 + C16777) * C48434 + (C16778 + C16779) * C959) +
            (C16780 + C16781) * C48421 - (C16782 + C16783) * C961 -
            (C16784 + C16785) * C48392) *
               C48286 * C48418) *
              C48097 * C957 +
          (((C16131 + C16130) * C959 + (C16129 + C16128) * C48434 -
            (C16127 + C16126) * C960 - (C16133 + C16132) * C48421 +
            (C16135 + C16134) * C961 + (C16137 + C16136) * C48392) *
               C48286 * C31910 +
           ((C17212 + C17213) * C959 + (C17214 + C17215) * C48434 -
            (C17564 + C17565) * C960 - (C17566 + C17567) * C48421 +
            (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
             C48385 * C1458) *
                C961 +
            (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
             C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C1030 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48044) *
               C48286 * C31910 +
           ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
               C48418) *
              C48097 * C1025 -
          (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
               C48418 +
           ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
               C31910) *
              C48097 * C1026 +
          (((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
               C31910 +
           ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
               C48418) *
              C48097 * C1027 -
          (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48286 *
               C48418 +
           ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C48286 *
               C31910) *
              C48097 * C1028 +
          (((C17037 + C17036) * C1030 + (C17035 + C17034) * C48044) * C48286 *
               C31910 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48385 * C6404) *
                C1030 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48385 * C6408) *
                C48044) *
               C48286 * C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C1030 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48044) *
                C48286 * C31910 +
            ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
                C48418) *
               C48438 -
           (((C32267 + C32268) * C48044 + (C32269 + C32270) * C1030) * C48286 *
                C48418 +
            ((C32256 + C32255) * C48044 + (C32254 + C32253) * C1030) * C48286 *
                C31910) *
               C48427 +
           (((C32270 + C32269) * C1030 + (C32268 + C32267) * C48044) * C48286 *
                C31910 +
            ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
              C48385 * C1871) *
                 C1030 +
             (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
              C48385 * C1880) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C956 +
          ((((C16779 + C16778) * C1030 + (C16777 + C16776) * C48044) * C48286 *
                C31910 +
            ((C17208 + C17209) * C1030 + (C17210 + C17211) * C48044) * C48286 *
                C48418) *
               C48427 -
           (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
                C48418 +
            ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
                C31910) *
               C48438 -
           (((C18558 + C18559) * C48044 + (C18560 + C18561) * C1030) * C48286 *
                C48418 +
            ((C17211 + C17210) * C48044 + (C17209 + C17208) * C1030) * C48286 *
                C31910) *
               C48401) *
              C957 +
          ((((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
                C31910 +
            ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
                C48418) *
               C48438 -
           (((C17216 + C17217) * C48044 + (C17218 + C17219) * C1030) * C48286 *
                C48418 +
            ((C17215 + C17214) * C48044 + (C17213 + C17212) * C1030) * C48286 *
                C31910) *
               C48427 +
           (((C17219 + C17218) * C1030 + (C17217 + C17216) * C48044) * C48286 *
                C31910 +
            ((C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
              C48385 * C7272) *
                 C1030 +
             (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
              C48385 * C7276) *
                 C48044) *
                C48286 * C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C565 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C559 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C566 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C560 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C567 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C561 -
            (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
                C568 -
            (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
                C48402) *
               C48286 * C31910 +
           ((C32253 + C32254) * C565 + (C32255 + C32256) * C559 -
            (C32257 + C32258) * C566 - (C32259 + C32260) * C560 +
            (C32261 + C32262) * C567 + (C32263 + C32264) * C561 -
            (C32545 + C32546) * C568 - (C32547 + C32548) * C48402) *
               C48286 * C48418) *
              C48367 +
          (((C32258 + C32257) * C566 -
            ((C32256 + C32255) * C559 + (C32254 + C32253) * C565) +
            (C32260 + C32259) * C560 - (C32262 + C32261) * C567 -
            (C32264 + C32263) * C561 + (C32546 + C32545) * C568 +
            (C32548 + C32547) * C48402) *
               C48286 * C31910 +
           ((C32265 + C32266) * C566 -
            ((C32267 + C32268) * C559 + (C32269 + C32270) * C565) +
            (C32271 + C32272) * C560 - (C32273 + C32274) * C567 -
            (C32275 + C32276) * C561 +
            (C15917 * C429 + C15913 * C447 + C15918 * C430 + C48385 * C449) *
                C568 +
            (C15917 * C448 + C15913 * C459 + C15918 * C450 + C48385 * C460) *
                C48402) *
               C48286 * C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                 C47151 +
             (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                 C48352 -
             (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                 C47132 -
             (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                 C48054) *
                C48286 * C31910 +
            ((C32253 + C32254) * C47151 + (C32255 + C32256) * C48352 -
             (C32257 + C32258) * C47132 - (C32259 + C32260) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C32258 + C32257) * C47132 -
             ((C32256 + C32255) * C48352 + (C32254 + C32253) * C47151) +
             (C32260 + C32259) * C48054) *
                C48286 * C31910 +
            ((C32265 + C32266) * C47132 -
             ((C32267 + C32268) * C48352 + (C32269 + C32270) * C47151) +
             (C32271 + C32272) * C48054) *
                C48286 * C48418) *
               C48184) *
              C956 +
          ((((C16119 + C16118) * C47132 -
             ((C16117 + C16116) * C48352 + (C16115 + C16114) * C47151) +
             (C16121 + C16120) * C48054) *
                C48286 * C31910 +
            ((C16774 + C16775) * C47132 -
             ((C16776 + C16777) * C48352 + (C16778 + C16779) * C47151) +
             (C16780 + C16781) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C16779 + C16778) * C47151 + (C16777 + C16776) * C48352 -
             (C16775 + C16774) * C47132 - (C16781 + C16780) * C48054) *
                C48286 * C31910 +
            ((C17208 + C17209) * C47151 + (C17210 + C17211) * C48352 -
             (C18286 + C18287) * C47132 - (C18288 + C18289) * C48054) *
                C48286 * C48418) *
               C48184) *
              C957 +
          ((((C16131 + C16130) * C47151 + (C16129 + C16128) * C48352 -
             (C16127 + C16126) * C47132 - (C16133 + C16132) * C48054) *
                C48286 * C31910 +
            ((C17212 + C17213) * C47151 + (C17214 + C17215) * C48352 -
             (C17564 + C17565) * C47132 - (C17566 + C17567) * C48054) *
                C48286 * C48418) *
               C48367 +
           (((C17565 + C17564) * C47132 -
             ((C17215 + C17214) * C48352 + (C17213 + C17212) * C47151) +
             (C17567 + C17566) * C48054) *
                C48286 * C31910 +
            ((C15917 * C1172 + C15913 * C1187 + C15918 * C1173 +
              C48385 * C1188) *
                 C47132 -
             ((C17216 + C17217) * C48352 + (C17218 + C17219) * C47151) +
             (C15917 * C1190 + C15913 * C1199 + C15918 * C1191 +
              C48385 * C1200) *
                 C48054) *
                C48286 * C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
               C116 +
           (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
               C104 -
           (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
               C117 -
           (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
               C105 +
           (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
               C118 +
           (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
               C106 -
           (C15918 * C125 + C48385 * C136 + C15917 * C124 + C15913 * C134) *
               C119 -
           (C15918 * C137 + C48385 * C146 + C15917 * C135 + C15913 * C145) *
               C107 +
           (C15917 * C125 + C15913 * C136 + C15918 * C126 + C48385 * C138) *
               C120 +
           (C15917 * C137 + C15913 * C146 + C15918 * C139 + C48385 * C147) *
               C108) *
              C48286 * C31910 +
          ((C15917 * C424 + C15913 * C437 + C15918 * C421 + C48385 * C431) *
               C116 +
           (C15917 * C436 + C15913 * C453 + C15918 * C435 + C48385 * C452) *
               C104 -
           (C15918 * C422 + C48385 * C432 + C15917 * C421 + C15913 * C431) *
               C117 -
           (C15918 * C434 + C48385 * C451 + C15917 * C435 + C15913 * C452) *
               C105 +
           (C15917 * C422 + C15913 * C432 + C15918 * C423 + C48385 * C433) *
               C118 +
           (C15917 * C434 + C15913 * C451 + C15918 * C438 + C48385 * C454) *
               C106 -
           (C15918 * C425 + C48385 * C439 + C15917 * C423 + C15913 * C433) *
               C119 -
           (C15918 * C440 + C48385 * C455 + C15917 * C438 + C15913 * C454) *
               C107 +
           (C15917 * C425 + C15913 * C439 + C15918 * C673 + C48385 * C674) *
               C120 +
           (C15917 * C440 + C15913 * C455 + C15918 * C675 + C48385 * C676) *
               C108) *
              C48286 * C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C265 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C259 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C266 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C260 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C267 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C15917 * C424 + C15913 * C437 + C15918 * C421 + C48385 * C431) *
                C265 +
            (C15917 * C436 + C15913 * C453 + C15918 * C435 + C48385 * C452) *
                C259 -
            (C15918 * C422 + C48385 * C432 + C15917 * C421 + C15913 * C431) *
                C266 -
            (C15918 * C434 + C48385 * C451 + C15917 * C435 + C15913 * C452) *
                C260 +
            (C15917 * C422 + C15913 * C432 + C15918 * C423 + C48385 * C433) *
                C267 +
            (C15917 * C434 + C15913 * C451 + C15918 * C438 + C48385 * C454) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48437 +
          (((C16119 + C16118) * C266 -
            ((C16117 + C16116) * C259 + (C16115 + C16114) * C265) +
            (C16121 + C16120) * C260 - (C16123 + C16122) * C267 -
            (C16125 + C16124) * C48392) *
               C48286 * C31910 +
           ((C16774 + C16775) * C266 -
            ((C16776 + C16777) * C259 + (C16778 + C16779) * C265) +
            (C16780 + C16781) * C260 - (C16782 + C16783) * C267 -
            (C16784 + C16785) * C48392) *
               C48286 * C48418) *
              C48097 * C48425 +
          (((C16131 + C16130) * C265 + (C16129 + C16128) * C259 -
            (C16127 + C16126) * C266 - (C16133 + C16132) * C260 +
            (C16135 + C16134) * C267 + (C16137 + C16136) * C48392) *
               C48286 * C31910 +
           ((C17212 + C17213) * C265 + (C17214 + C17215) * C259 -
            (C17564 + C17565) * C266 - (C17566 + C17567) * C260 +
            (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
             C48385 * C1458) *
                C267 +
            (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
             C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C959 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48434 -
            (C15918 * C123 + C48385 * C130 + C15917 * C122 + C15913 * C129) *
                C960 -
            (C15918 * C133 + C48385 * C144 + C15917 * C132 + C15913 * C143) *
                C48421 +
            (C15917 * C123 + C15913 * C130 + C15918 * C124 + C48385 * C134) *
                C961 +
            (C15917 * C133 + C15913 * C144 + C15918 * C135 + C48385 * C145) *
                C48392) *
               C48286 * C31910 +
           ((C32253 + C32254) * C959 + (C32255 + C32256) * C48434 -
            (C32257 + C32258) * C960 - (C32259 + C32260) * C48421 +
            (C32261 + C32262) * C961 + (C32263 + C32264) * C48392) *
               C48286 * C48418) *
              C48097 * C956 +
          (((C16119 + C16118) * C960 -
            ((C16117 + C16116) * C48434 + (C16115 + C16114) * C959) +
            (C16121 + C16120) * C48421 - (C16123 + C16122) * C961 -
            (C16125 + C16124) * C48392) *
               C48286 * C31910 +
           ((C16774 + C16775) * C960 -
            ((C16776 + C16777) * C48434 + (C16778 + C16779) * C959) +
            (C16780 + C16781) * C48421 - (C16782 + C16783) * C961 -
            (C16784 + C16785) * C48392) *
               C48286 * C48418) *
              C48097 * C957 +
          (((C16131 + C16130) * C959 + (C16129 + C16128) * C48434 -
            (C16127 + C16126) * C960 - (C16133 + C16132) * C48421 +
            (C16135 + C16134) * C961 + (C16137 + C16136) * C48392) *
               C48286 * C31910 +
           ((C17212 + C17213) * C959 + (C17214 + C17215) * C48434 -
            (C17564 + C17565) * C960 - (C17566 + C17567) * C48421 +
            (C15917 * C1168 + C15913 * C1183 + C15918 * C1457 +
             C48385 * C1458) *
                C961 +
            (C15917 * C1180 + C15913 * C1195 + C15918 * C1459 +
             C48385 * C1460) *
                C48392) *
               C48286 * C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C121 + C15913 * C128 + C15918 * C122 + C48385 * C129) *
                C1030 +
            (C15917 * C131 + C15913 * C142 + C15918 * C132 + C48385 * C143) *
                C48044) *
               C48286 * C31910 +
           ((C32253 + C32254) * C1030 + (C32255 + C32256) * C48044) * C48286 *
               C48418) *
              C48097 * C1025 -
          (((C16776 + C16777) * C48044 + (C16778 + C16779) * C1030) * C48286 *
               C48418 +
           ((C16117 + C16116) * C48044 + (C16115 + C16114) * C1030) * C48286 *
               C31910) *
              C48097 * C1026 +
          (((C16131 + C16130) * C1030 + (C16129 + C16128) * C48044) * C48286 *
               C31910 +
           ((C17212 + C17213) * C1030 + (C17214 + C17215) * C48044) * C48286 *
               C48418) *
              C48097 * C1027 -
          (((C17706 + C17707) * C48044 + (C17708 + C17709) * C1030) * C48286 *
               C48418 +
           ((C17033 + C17032) * C48044 + (C17031 + C17030) * C1030) * C48286 *
               C31910) *
              C48097 * C1028 +
          (((C17037 + C17036) * C1030 + (C17035 + C17034) * C48044) * C48286 *
               C31910 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48385 * C6404) *
                C1030 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48385 * C6408) *
                C48044) *
               C48286 * C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47161 +
             (C21591 * C131 + C48030 * C142) * C48049 -
             (C21591 * C122 + C48030 * C129) * C47157 -
             (C21591 * C132 + C48030 * C143) * C48057 +
             (C21591 * C123 + C48030 * C130) * C47167 +
             (C21591 * C133 + C48030 * C144) * C2723) *
                C4603 +
            (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C48416) *
               C31910 +
           ((C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C4603 +
            C29626 * C48416) *
               C48418) *
              C48097 * C48140 +
          (((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C4603 +
            (C24270 - (C24269 + C24268) + C24271 - C24272 - C24273) * C48416) *
               C31910 +
           (C29627 * C4603 +
            (C24437 - (C24438 + C24439) + C24440 - C24441 - C24442) * C48416) *
               C48418) *
              C48097 * C48147 +
          ((C24284 * C4603 +
            (C24276 + C24275 - C24274 - C24277 + C24278 + C24279) * C48416) *
               C31910 +
           ((C24439 + C24438 - C24437 - C24440 + C24441 + C24442) * C4603 +
            (C22671 * C47161 + C22672 * C48049 - C22971 * C47157 -
             C22972 * C48057 + (C21591 * C1561 + C48030 * C1564) * C47167 +
             (C21591 * C1567 + C48030 * C1570) * C2723) *
                C48416) *
               C48418) *
              C48097 * C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C2463 +
              (C21591 * C131 + C48030 * C142) * C2457 -
              (C21591 * C122 + C48030 * C129) * C2464 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C4603 +
             (C23968 + C23969 - C23970 - C23971) * C48416) *
                C31910 +
            ((C29242 + C29243 - C29244 - C29245) * C4603 + C29262 * C48416) *
                C48418) *
               C48367 +
           (((C29244 - (C29243 + C29242) + C29245) * C4603 + C29263 * C48416) *
                C31910 +
            ((C29248 - (C29249 + C29250) + C29251) * C4603 + C29264 * C48416) *
                C48418) *
               C48184) *
              C48140 +
          ((((C23970 - (C23969 + C23968) + C23971) * C4603 +
             (C23974 - (C23973 + C23972) + C23975) * C48416) *
                C31910 +
            (C29263 * C4603 + C24595 * C48416) * C48418) *
               C48367 +
           ((C29262 * C4603 + C29824 * C48416) * C31910 +
            (C29265 * C4603 + (C24148 + C24149 - C24150 - C24151) * C48416) *
                C48418) *
               C48184) *
              C48147 +
          (((C23988 * C4603 + (C23978 + C23977 - C23976 - C23979) * C48416) *
                C31910 +
            (C29824 * C4603 + (C24590 + C24591 - C24592 - C24593) * C48416) *
                C48418) *
               C48367 +
           ((C24595 * C4603 + (C24592 - (C24591 + C24590) + C24593) * C48416) *
                C31910 +
            ((C24150 - (C24149 + C24148) + C24151) * C4603 +
             ((C21591 * C5880 + C48030 * C5882) * C2464 -
              (C22673 * C2457 + C22674 * C2463) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C4603 +
            (C23968 + C23969 - C23970 - C23971) * C48416) *
               C31910 +
           ((C29242 + C29243 - C29244 - C29245) * C4603 + C29262 * C48416) *
               C48418) *
              C48097 * C48444 +
          (((C23970 - (C23969 + C23968) + C23971) * C4603 +
            (C23974 - (C23973 + C23972) + C23975) * C48416) *
               C31910 +
           (C29263 * C4603 + C24595 * C48416) * C48418) *
              C48097 * C48440 +
          ((C23988 * C4603 + (C23978 + C23977 - C23976 - C23979) * C48416) *
               C31910 +
           (C29824 * C4603 + (C24590 + C24591 - C24592 - C24593) * C48416) *
               C48418) *
              C48097 * C48430 +
          ((C23989 * C4603 + (C23982 - (C23981 + C23980) + C23983) * C48416) *
               C31910 +
           ((C24592 - (C24591 + C24590) + C24593) * C4603 +
            ((C21591 * C6402 + C48030 * C6404) * C2464 -
             (C23084 * C2457 + C23085 * C2463) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C48416) *
               C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2355 +
             (C21591 * C131 + C48030 * C142) * C48443 -
             (C21591 * C122 + C48030 * C129) * C2356 -
             (C21591 * C132 + C48030 * C143) * C48436 +
             (C21591 * C123 + C48030 * C130) * C2357 +
             (C21591 * C133 + C48030 * C144) * C48423 -
             (C21591 * C124 + C48030 * C134) * C2358 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C4603 +
            (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
             C23861) *
                C48416) *
               C31910 +
           ((C29955 + C29956 - C29957 - C29958 + C29959 + C29960 - C29961 -
             C29962) *
                C4603 +
            (C28910 + C28911 - C28912 - C28913 + C28914 + C28915 - C28916 -
             C28917) *
                C48416) *
               C48418) *
              C48097 * C2353 +
          (((C23856 - (C23855 + C23854) + C23857 - C23858 - C23859 + C23860 +
             C23861) *
                C4603 +
            (C23864 - (C23863 + C23862) + C23865 - C23866 - C23867 + C23868 +
             C23869) *
                C48416) *
               C31910 +
           ((C28912 - (C28911 + C28910) + C28913 - C28914 - C28915 + C28916 +
             C28917) *
                C4603 +
            (C22290 * C2356 - (C22291 * C48443 + C22292 * C2355) +
             C22293 * C48436 - C22294 * C2357 - C22295 * C48423 +
             (C21591 * C1457 + C48030 * C1458) * C2358 +
             (C21591 * C1459 + C48030 * C1460) * C48402) *
                C48416) *
               C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C2463 +
              (C21591 * C131 + C48030 * C142) * C2457 -
              (C21591 * C122 + C48030 * C129) * C2464 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C4603 +
             (C23968 + C23969 - C23970 - C23971) * C48416) *
                C31910 +
            ((C29242 + C29243 - C29244 - C29245) * C4603 + C29262 * C48416) *
                C48418) *
               C48438 +
           (((C29244 - (C29243 + C29242) + C29245) * C4603 + C29263 * C48416) *
                C31910 +
            ((C29248 - (C29249 + C29250) + C29251) * C4603 + C29264 * C48416) *
                C48418) *
               C48427 +
           (((C29250 + C29249 - C29248 - C29251) * C4603 + C29265 * C48416) *
                C31910 +
            ((C30287 + C30288 - C30289 - C30290) * C4603 +
             (C29254 + C29255 - C29256 - C29257) * C48416) *
                C48418) *
               C48401) *
              C2353 +
          ((((C23970 - (C23969 + C23968) + C23971) * C4603 +
             (C23974 - (C23973 + C23972) + C23975) * C48416) *
                C31910 +
            (C29263 * C4603 + C24595 * C48416) * C48418) *
               C48438 +
           ((C29262 * C4603 + C29824 * C48416) * C31910 +
            (C29265 * C4603 + (C24148 + C24149 - C24150 - C24151) * C48416) *
                C48418) *
               C48427 +
           ((C29264 * C4603 + (C24150 - (C24149 + C24148) + C24151) * C48416) *
                C31910 +
            ((C29256 - (C29255 + C29254) + C29257) * C4603 +
             ((C21591 * C7270 + C48030 * C7272) * C2464 -
              (C23748 * C2457 + C23749 * C2463) +
              (C21591 * C7274 + C48030 * C7276) * C48054) *
                 C48416) *
                C48418) *
               C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47161 +
              (C21591 * C131 + C48030 * C142) * C48049 -
              (C21591 * C122 + C48030 * C129) * C47157 -
              (C21591 * C132 + C48030 * C143) * C48057 +
              (C21591 * C123 + C48030 * C130) * C47167 +
              (C21591 * C133 + C48030 * C144) * C2723) *
                 C4603 +
             (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C48416) *
                C31910 +
            ((C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C4603 +
             C29626 * C48416) *
                C48418) *
               C48367 +
           (((C29608 - (C29607 + C29606) + C29609 - C29610 - C29611) * C4603 +
             C29627 * C48416) *
                C31910 +
            ((C30631 - (C30632 + C30633) + C30634 - C30635 - C30636) * C4603 +
             (C29614 - (C29615 + C29616) + C29617 - C29618 - C29619) * C48416) *
                C48418) *
               C48184) *
              C2353 +
          ((((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C4603 +
             (C24270 - (C24269 + C24268) + C24271 - C24272 - C24273) * C48416) *
                C31910 +
            (C29627 * C4603 +
             (C24437 - (C24438 + C24439) + C24440 - C24441 - C24442) * C48416) *
                C48418) *
               C48367 +
           ((C29626 * C4603 +
             (C24439 + C24438 - C24437 - C24440 + C24441 + C24442) * C48416) *
                C31910 +
            ((C29616 + C29615 - C29614 - C29617 + C29618 + C29619) * C4603 +
             (C22669 * C47161 + C22670 * C48049 - C23534 * C47157 -
              C23535 * C48057 + (C21591 * C1173 + C48030 * C1188) * C47167 +
              (C21591 * C1191 + C48030 * C1200) * C2723) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2355 +
             (C21591 * C131 + C48030 * C142) * C48443 -
             (C21591 * C122 + C48030 * C129) * C2356 -
             (C21591 * C132 + C48030 * C143) * C48436 +
             (C21591 * C123 + C48030 * C130) * C2357 +
             (C21591 * C133 + C48030 * C144) * C48423 -
             (C21591 * C124 + C48030 * C134) * C2358 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C4603 +
            (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
             C23861) *
                C48416) *
               C31910 +
           ((C29955 + C29956 - C29957 - C29958 + C29959 + C29960 - C29961 -
             C29962) *
                C4603 +
            (C28910 + C28911 - C28912 - C28913 + C28914 + C28915 - C28916 -
             C28917) *
                C48416) *
               C48418) *
              C48097 * C2353 +
          (((C23856 - (C23855 + C23854) + C23857 - C23858 - C23859 + C23860 +
             C23861) *
                C4603 +
            (C23864 - (C23863 + C23862) + C23865 - C23866 - C23867 + C23868 +
             C23869) *
                C48416) *
               C31910 +
           ((C28912 - (C28911 + C28910) + C28913 - C28914 - C28915 + C28916 +
             C28917) *
                C4603 +
            (C22290 * C2356 - (C22291 * C48443 + C22292 * C2355) +
             C22293 * C48436 - C22294 * C2357 - C22295 * C48423 +
             (C21591 * C1457 + C48030 * C1458) * C2358 +
             (C21591 * C1459 + C48030 * C1460) * C48402) *
                C48416) *
               C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C4603 +
            (C23968 + C23969 - C23970 - C23971) * C48416) *
               C31910 +
           ((C29242 + C29243 - C29244 - C29245) * C4603 + C29262 * C48416) *
               C48418) *
              C48097 * C48444 +
          (((C23970 - (C23969 + C23968) + C23971) * C4603 +
            (C23974 - (C23973 + C23972) + C23975) * C48416) *
               C31910 +
           (C29263 * C4603 + C24595 * C48416) * C48418) *
              C48097 * C48440 +
          ((C23988 * C4603 + (C23978 + C23977 - C23976 - C23979) * C48416) *
               C31910 +
           (C29824 * C4603 + (C24590 + C24591 - C24592 - C24593) * C48416) *
               C48418) *
              C48097 * C48430 +
          ((C23989 * C4603 + (C23982 - (C23981 + C23980) + C23983) * C48416) *
               C31910 +
           ((C24592 - (C24591 + C24590) + C24593) * C4603 +
            ((C21591 * C6402 + C48030 * C6404) * C2464 -
             (C23084 * C2457 + C23085 * C2463) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C48416) *
               C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47151 +
              (C21591 * C131 + C48030 * C142) * C48352 -
              (C21591 * C122 + C48030 * C129) * C47132 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C4603 +
             (C22782 + C22783 - C22784 - C22785) * C48416) *
                C31910 +
            ((C27730 + C27731 - C27732 - C27733) * C4603 + C27740 * C48416) *
                C48418) *
               C3120 +
           (((C27732 - (C27731 + C27730) + C27733) * C4603 + C27741 * C48416) *
                C31910 +
            ((C28488 - (C28489 + C28490) + C28491) * C4603 + C28504 * C48416) *
                C48418) *
               C48184) *
              C48140 +
          ((((C22784 - (C22783 + C22782) + C22785) * C4603 +
             (C22788 - (C22787 + C22786) + C22789) * C48416) *
                C31910 +
            (C27741 * C4603 + C22976 * C48416) * C48418) *
               C3120 +
           ((C27740 * C4603 + C27742 * C48416) * C31910 +
            (C28505 * C4603 + (C23526 + C23527 - C23538 - C23539) * C48416) *
                C48418) *
               C48184) *
              C48147 +
          (((C22808 * C4603 + (C22792 + C22791 - C22790 - C22793) * C48416) *
                C31910 +
            (C27742 * C4603 + (C22964 + C22965 - C22974 - C22975) * C48416) *
                C48418) *
               C3120 +
           ((C22976 * C4603 + (C22974 - (C22965 + C22964) + C22975) * C48416) *
                C31910 +
            ((C23538 - (C23527 + C23526) + C23539) * C4603 +
             ((C21591 * C5880 + C48030 * C5882) * C47132 -
              (C22673 * C48352 + C22674 * C47151) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C48180 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C48187 +
           (((C27401 + C27400) * C4603 + C27403 * C48416) * C31910 +
            ((C28288 + C28289) * C4603 + C28778 * C48416) * C48418) *
               C3628) *
              C48140 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C48187 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C48180 -
           (((C23752 + C23753) * C48416 + C28779 * C4603) * C48418 +
            (C27405 * C48416 + C27399 * C4603) * C31910) *
               C3628) *
              C48147 +
          (((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
            (C27404 * C4603 + C23079 * C48416) * C48418) *
               C48180 -
           (((C22681 + C22682) * C48416 + C27405 * C4603) * C48418 +
            (C27873 * C48416 + C22666 * C4603) * C31910) *
               C48187 +
           ((C22683 * C4603 + (C22682 + C22681) * C48416) * C31910 +
            ((C23753 + C23752) * C4603 +
             ((C21591 * C23735 + C48030 * C23736) * C1030 +
              (C21591 * C23737 + C48030 * C23738) * C48044) *
                 C48416) *
                C48418) *
               C3628) *
              C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C3120 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C48184) *
              C48444 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C48184 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C3120) *
              C48440 +
          (((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
            (C27404 * C4603 + C23079 * C48416) * C48418) *
               C3120 -
           (((C22681 + C22682) * C48416 + C27405 * C4603) * C48418 +
            (C27873 * C48416 + C22666 * C4603) * C31910) *
               C48184) *
              C48430 +
          (((C23079 * C4603 + (C23087 + C23086) * C48416) * C31910 +
            ((C22682 + C22681) * C4603 +
             ((C21591 * C22641 + C48030 * C22642) * C1030 +
              (C21591 * C22643 + C48030 * C22644) * C48044) *
                 C48416) *
                C48418) *
               C48184 -
           (((C23086 + C23087) * C48416 + C27873 * C4603) * C48418 +
            ((C22528 + C22527) * C48416 + C22522 * C4603) * C31910) *
               C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C959 +
              (C21591 * C131 + C48030 * C142) * C48434 -
              (C21591 * C122 + C48030 * C129) * C960 -
              (C21591 * C132 + C48030 * C143) * C48421 +
              (C21591 * C123 + C48030 * C130) * C961 +
              (C21591 * C133 + C48030 * C144) * C48392) *
                 C4603 +
             (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
                C31910 +
            ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C4603 +
             C31033 * C48416) *
                C48418) *
               C3120 +
           (((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C4603 +
             C31034 * C48416) *
                C31910 +
            ((C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C4603 +
             (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48416) *
                C48418) *
               C48184) *
              C2353 +
          ((((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C4603 +
             (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
                C31910 +
            (C31034 * C4603 +
             (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
                C48418) *
               C3120 +
           ((C31033 * C4603 +
             (C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C48416) *
                C31910 +
            ((C28034 + C28033 - C28032 - C28035 + C28036 + C28037) * C4603 +
             (C22669 * C959 + C22670 * C48434 - C23534 * C960 -
              C23535 * C48421 + (C21591 * C1173 + C48030 * C1188) * C961 +
              (C21591 * C1191 + C48030 * C1200) * C48392) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C48445 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C48442 +
           (((C27401 + C27400) * C4603 + C27403 * C48416) * C31910 +
            ((C28288 + C28289) * C4603 + C28778 * C48416) * C48418) *
               C48433 -
           (((C28290 + C28291) * C48416 + (C28292 + C28293) * C4603) * C48418 +
            (C28779 * C48416 + (C28289 + C28288) * C4603) * C31910) *
               C48414) *
              C2353 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C48442 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C48445 -
           (((C23752 + C23753) * C48416 + C28779 * C4603) * C48418 +
            (C27405 * C48416 + C27399 * C4603) * C31910) *
               C48433 +
           ((C28778 * C4603 + (C23753 + C23752) * C48416) * C31910 +
            ((C28291 + C28290) * C4603 +
             ((C21591 * C23369 + C48030 * C23370) * C1030 +
              (C21591 * C23371 + C48030 * C23372) * C48044) *
                 C48416) *
                C48418) *
               C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47151 +
              (C21591 * C131 + C48030 * C142) * C48352 -
              (C21591 * C122 + C48030 * C129) * C47132 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C4603 +
             (C22782 + C22783 - C22784 - C22785) * C48416) *
                C31910 +
            ((C27730 + C27731 - C27732 - C27733) * C4603 + C27740 * C48416) *
                C48418) *
               C48180 +
           (((C27732 - (C27731 + C27730) + C27733) * C4603 + C27741 * C48416) *
                C31910 +
            ((C28488 - (C28489 + C28490) + C28491) * C4603 + C28504 * C48416) *
                C48418) *
               C48187 +
           (((C28490 + C28489 - C28488 - C28491) * C4603 + C28505 * C48416) *
                C31910 +
            ((C28638 + C28639 - C28646 - C28647) * C4603 +
             (C28494 + C28495 - C28506 - C28507) * C48416) *
                C48418) *
               C3628) *
              C2353 +
          ((((C22784 - (C22783 + C22782) + C22785) * C4603 +
             (C22788 - (C22787 + C22786) + C22789) * C48416) *
                C31910 +
            (C27741 * C4603 + C22976 * C48416) * C48418) *
               C48180 +
           ((C27740 * C4603 + C27742 * C48416) * C31910 +
            (C28505 * C4603 + (C23526 + C23527 - C23538 - C23539) * C48416) *
                C48418) *
               C48187 +
           ((C28504 * C4603 + (C23538 - (C23527 + C23526) + C23539) * C48416) *
                C31910 +
            ((C28506 - (C28495 + C28494) + C28507) * C4603 +
             ((C21591 * C7270 + C48030 * C7272) * C47132 -
              (C23748 * C48352 + C23749 * C47151) +
              (C21591 * C7274 + C48030 * C7276) * C48054) *
                 C48416) *
                C48418) *
               C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C959 +
              (C21591 * C131 + C48030 * C142) * C48434 -
              (C21591 * C122 + C48030 * C129) * C960 -
              (C21591 * C132 + C48030 * C143) * C48421 +
              (C21591 * C123 + C48030 * C130) * C961 +
              (C21591 * C133 + C48030 * C144) * C48392) *
                 C4603 +
             (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
                C31910 +
            ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C4603 +
             C31033 * C48416) *
                C48418) *
               C3120 +
           (((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C4603 +
             C31034 * C48416) *
                C31910 +
            ((C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C4603 +
             (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48416) *
                C48418) *
               C48184) *
              C2353 +
          ((((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C4603 +
             (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
                C31910 +
            (C31034 * C4603 +
             (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
                C48418) *
               C3120 +
           ((C31033 * C4603 +
             (C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C48416) *
                C31910 +
            ((C28034 + C28033 - C28032 - C28035 + C28036 + C28037) * C4603 +
             (C22669 * C959 + C22670 * C48434 - C23534 * C960 -
              C23535 * C48421 + (C21591 * C1173 + C48030 * C1188) * C961 +
              (C21591 * C1191 + C48030 * C1200) * C48392) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C3120 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C48184) *
              C48444 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C48184 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C3120) *
              C48440 +
          (((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
            (C27404 * C4603 + C23079 * C48416) * C48418) *
               C3120 -
           (((C22681 + C22682) * C48416 + C27405 * C4603) * C48418 +
            (C27873 * C48416 + C22666 * C4603) * C31910) *
               C48184) *
              C48430 +
          (((C23079 * C4603 + (C23087 + C23086) * C48416) * C31910 +
            ((C22682 + C22681) * C4603 +
             ((C21591 * C22641 + C48030 * C22642) * C1030 +
              (C21591 * C22643 + C48030 * C22644) * C48044) *
                 C48416) *
                C48418) *
               C48184 -
           (((C23086 + C23087) * C48416 + C27873 * C4603) * C48418 +
            ((C22528 + C22527) * C48416 + C22522 * C4603) * C31910) *
               C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C4603 +
            (C22782 + C22783 - C22784 - C22785) * C48416) *
               C31910 +
           ((C27730 + C27731 - C27732 - C27733) * C4603 + C27740 * C48416) *
               C48418) *
              C48097 * C1301 +
          (((C22784 - (C22783 + C22782) + C22785) * C4603 +
            (C22788 - (C22787 + C22786) + C22789) * C48416) *
               C31910 +
           (C27741 * C4603 + C22976 * C48416) * C48418) *
              C48097 * C1302 +
          ((C22808 * C4603 + (C22792 + C22791 - C22790 - C22793) * C48416) *
               C31910 +
           (C27742 * C4603 + (C22964 + C22965 - C22974 - C22975) * C48416) *
               C48418) *
              C48097 * C1303 +
          ((C22809 * C4603 + (C22806 - (C22795 + C22794) + C22807) * C48416) *
               C31910 +
           ((C22974 - (C22965 + C22964) + C22975) * C4603 +
            ((C21591 * C6402 + C48030 * C6404) * C47132 -
             (C23084 * C48352 + C23085 * C47151) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C48416) *
               C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C565 +
             (C21591 * C131 + C48030 * C142) * C559 -
             (C21591 * C122 + C48030 * C129) * C566 -
             (C21591 * C132 + C48030 * C143) * C560 +
             (C21591 * C123 + C48030 * C130) * C567 +
             (C21591 * C133 + C48030 * C144) * C561 -
             (C21591 * C124 + C48030 * C134) * C568 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C4603 +
            (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
             C22013) *
                C48416) *
               C31910 +
           ((C26804 + C26805 - C26806 - C26807 + C26808 + C26809 - C26816 -
             C26817) *
                C4603 +
            (C26660 + C26661 - C26662 - C26663 + C26664 + C26665 - C26672 -
             C26673) *
                C48416) *
               C48418) *
              C48097 * C48366 +
          (((C21990 - (C21989 + C21988) + C21991 - C21992 - C21993 + C22012 +
             C22013) *
                C4603 +
            (C22000 - (C21999 + C21998) + C22001 - C22002 - C22003 + C22014 +
             C22015) *
                C48416) *
               C31910 +
           ((C26662 - (C26661 + C26660) + C26663 - C26664 - C26665 + C26672 +
             C26673) *
                C4603 +
            (C22290 * C566 - (C22291 * C559 + C22292 * C565) + C22293 * C560 -
             C22294 * C567 - C22295 * C561 +
             (C21591 * C1457 + C48030 * C1458) * C568 +
             (C21591 * C1459 + C48030 * C1460) * C48402) *
                C48416) *
               C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47151 +
              (C21591 * C131 + C48030 * C142) * C48352 -
              (C21591 * C122 + C48030 * C129) * C47132 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C4603 +
             (C22782 + C22783 - C22784 - C22785) * C48416) *
                C31910 +
            ((C27730 + C27731 - C27732 - C27733) * C4603 + C27740 * C48416) *
                C48418) *
               C1681 +
           (((C27732 - (C27731 + C27730) + C27733) * C4603 + C27741 * C48416) *
                C31910 +
            ((C28488 - (C28489 + C28490) + C28491) * C4603 + C28504 * C48416) *
                C48418) *
               C1682 +
           (((C28490 + C28489 - C28488 - C28491) * C4603 + C28505 * C48416) *
                C31910 +
            ((C28638 + C28639 - C28646 - C28647) * C4603 +
             (C28494 + C28495 - C28506 - C28507) * C48416) *
                C48418) *
               C48401) *
              C48366 +
          ((((C22784 - (C22783 + C22782) + C22785) * C4603 +
             (C22788 - (C22787 + C22786) + C22789) * C48416) *
                C31910 +
            (C27741 * C4603 + C22976 * C48416) * C48418) *
               C1681 +
           ((C27740 * C4603 + C27742 * C48416) * C31910 +
            (C28505 * C4603 + (C23526 + C23527 - C23538 - C23539) * C48416) *
                C48418) *
               C1682 +
           ((C28504 * C4603 + (C23538 - (C23527 + C23526) + C23539) * C48416) *
                C31910 +
            ((C28506 - (C28495 + C28494) + C28507) * C4603 +
             ((C21591 * C7270 + C48030 * C7272) * C47132 -
              (C23748 * C48352 + C23749 * C47151) +
              (C21591 * C7274 + C48030 * C7276) * C48054) *
                 C48416) *
                C48418) *
               C48401) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C48367 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C48184) *
              C1301 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C48184 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C48367) *
              C1302 +
          (((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
            (C27404 * C4603 + C23079 * C48416) * C48418) *
               C48367 -
           (((C22681 + C22682) * C48416 + C27405 * C4603) * C48418 +
            (C27873 * C48416 + C22666 * C4603) * C31910) *
               C48184) *
              C1303 +
          (((C23079 * C4603 + (C23087 + C23086) * C48416) * C31910 +
            ((C22682 + C22681) * C4603 +
             ((C21591 * C22641 + C48030 * C22642) * C1030 +
              (C21591 * C22643 + C48030 * C22644) * C48044) *
                 C48416) *
                C48418) *
               C48184 -
           (((C23086 + C23087) * C48416 + C27873 * C4603) * C48418 +
            ((C22528 + C22527) * C48416 + C22522 * C4603) * C31910) *
               C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C265 +
              (C21591 * C131 + C48030 * C142) * C259 -
              (C21591 * C122 + C48030 * C129) * C266 -
              (C21591 * C132 + C48030 * C143) * C260 +
              (C21591 * C123 + C48030 * C130) * C267 +
              (C21591 * C133 + C48030 * C144) * C48392) *
                 C4603 +
             (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
                C31910 +
            ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C4603 +
             C27020 * C48416) *
                C48418) *
               C48367 +
           (((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C4603 +
             C27021 * C48416) *
                C31910 +
            ((C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C4603 +
             (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48416) *
                C48418) *
               C48184) *
              C48366 +
          ((((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C4603 +
             (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C48416) *
                C31910 +
            (C27021 * C4603 +
             (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C48416) *
                C48418) *
               C48367 +
           ((C27020 * C4603 +
             (C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C48416) *
                C31910 +
            ((C26496 + C26495 - C26494 - C26497 + C26528 + C26529) * C4603 +
             (C22669 * C265 + C22670 * C259 - C23534 * C266 - C23535 * C260 +
              (C21591 * C1173 + C48030 * C1188) * C267 +
              (C21591 * C1191 + C48030 * C1200) * C48392) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C2133 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C2134 +
           (((C27401 + C27400) * C4603 + C27403 * C48416) * C31910 +
            ((C28288 + C28289) * C4603 + C28778 * C48416) * C48418) *
               C2135 -
           (((C28290 + C28291) * C48416 + (C28292 + C28293) * C4603) * C48418 +
            (C28779 * C48416 + (C28289 + C28288) * C4603) * C31910) *
               C48414) *
              C48366 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C2134 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C2133 -
           (((C23752 + C23753) * C48416 + C28779 * C4603) * C48418 +
            (C27405 * C48416 + C27399 * C4603) * C31910) *
               C2135 +
           ((C28778 * C4603 + (C23753 + C23752) * C48416) * C31910 +
            ((C28291 + C28290) * C4603 +
             ((C21591 * C23369 + C48030 * C23370) * C1030 +
              (C21591 * C23371 + C48030 * C23372) * C48044) *
                 C48416) *
                C48418) *
               C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21591 * C121 + C48030 * C128) * C116 +
                (C21591 * C131 + C48030 * C142) * C104 -
                (C21591 * C122 + C48030 * C129) * C117 -
                (C21591 * C132 + C48030 * C143) * C105 +
                (C21591 * C123 + C48030 * C130) * C118 +
                (C21591 * C133 + C48030 * C144) * C106 -
                (C21591 * C124 + C48030 * C134) * C119 -
                (C21591 * C135 + C48030 * C145) * C107 +
                (C21591 * C125 + C48030 * C136) * C120 +
                (C21591 * C137 + C48030 * C146) * C108) *
                   C4603 +
               (C21739 * C116 + C21740 * C104 - C21741 * C117 - C21742 * C105 +
                C21743 * C118 + C21744 * C106 - C22008 * C119 - C22009 * C107 +
                (C21591 * C272 + C48030 * C286) * C120 +
                (C21591 * C287 + C48030 * C302) * C108) *
                   C48416) *
                  C31910 +
              ((C26502 * C116 + C26503 * C104 - C26504 * C117 - C26505 * C105 +
                C26506 * C118 + C26507 * C106 - C26814 * C119 - C26815 * C107 +
                (C21591 * C425 + C48030 * C439) * C120 +
                (C21591 * C440 + C48030 * C455) * C108) *
                   C4603 +
               (C22286 * C116 + C22285 * C104 - C22284 * C117 - C22287 * C105 +
                C22288 * C118 + C22289 * C106 - C26670 * C119 - C26671 * C107 +
                (C21591 * C827 + C48030 * C836) * C120 +
                (C21591 * C837 + C48030 * C842) * C108) *
                   C48416) *
                  C48418) *
             C48097 * C48085 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21591 * C121 + C48030 * C128) * C265 +
                 (C21591 * C131 + C48030 * C142) * C259 -
                 (C21591 * C122 + C48030 * C129) * C266 -
                 (C21591 * C132 + C48030 * C143) * C260 +
                 (C21591 * C123 + C48030 * C130) * C267 +
                 (C21591 * C133 + C48030 * C144) * C48392) *
                    C4603 +
                (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) *
                    C48416) *
                   C31910 +
               ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C4603 +
                C27020 * C48416) *
                   C48418) *
                  C48097 * C48437 +
              (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) *
                    C4603 +
                (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) *
                    C48416) *
                   C31910 +
               (C27021 * C4603 +
                (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) *
                    C48416) *
                   C48418) *
                  C48097 * C48425 +
              ((C21779 * C4603 +
                (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) *
                    C48416) *
                   C31910 +
               ((C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C4603 +
                (C22671 * C265 + C22672 * C259 - C22971 * C266 - C22972 * C260 +
                 (C21591 * C1561 + C48030 * C1564) * C267 +
                 (C21591 * C1567 + C48030 * C1570) * C48392) *
                    C48416) *
                   C48418) *
                  C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
               C31910 +
           ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C4603 +
            C27020 * C48416) *
               C48418) *
              C48438 +
          (((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C4603 +
            C27021 * C48416) *
               C31910 +
           ((C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C4603 +
            (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48416) *
               C48418) *
              C48427 +
          (((C26524 + C26523 - C26522 - C26525 + C26526 + C26527) * C4603 +
            (C26496 + C26495 - C26494 - C26497 + C26528 + C26529) * C48416) *
               C31910 +
           ((C28282 * C265 + C28283 * C259 - C28644 * C266 - C28645 * C260 +
             (C21591 * C1861 + C48030 * C1870) * C267 +
             (C21591 * C1867 + C48030 * C1879) * C48392) *
                C4603 +
            (C23751 * C265 + C23750 * C259 - C28502 * C266 - C28503 * C260 +
             (C21591 * C2241 + C48030 * C2244) * C267 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48416) *
               C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C31910 +
           ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C4603 +
            C31033 * C48416) *
               C48418) *
              C48097 * C956 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C4603 +
            (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
               C31910 +
           (C31034 * C4603 +
            (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
               C48418) *
              C48097 * C957 +
          ((C22440 * C4603 +
            (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C48416) *
               C31910 +
           ((C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C4603 +
            (C22671 * C959 + C22672 * C48434 - C22971 * C960 - C22972 * C48421 +
             (C21591 * C1561 + C48030 * C1564) * C961 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C4603 +
            (C22507 + C22508) * C48416) *
               C31910 +
           ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
              C48097 * C1025 -
          ((C22666 * C48416 + C27402 * C4603) * C48418 +
           ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
              C48097 * C1026 +
          ((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
           (C27404 * C4603 + C23079 * C48416) * C48418) *
              C48097 * C1027 -
          (((C23086 + C23087) * C48416 + C27873 * C4603) * C48418 +
           ((C22528 + C22527) * C48416 + C22522 * C4603) * C31910) *
              C48097 * C1028 +
          ((C22531 * C4603 + (C22530 + C22529) * C48416) * C31910 +
           ((C23087 + C23086) * C4603 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C48416) *
               C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C48438 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C48427 +
           (((C27401 + C27400) * C4603 + C27403 * C48416) * C31910 +
            ((C28288 + C28289) * C4603 + C28778 * C48416) * C48418) *
               C48401) *
              C956 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C48427 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C48438 -
           (((C23752 + C23753) * C48416 + C28779 * C4603) * C48418 +
            (C27405 * C48416 + C27399 * C4603) * C31910) *
               C48401) *
              C957 +
          (((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
            (C27404 * C4603 + C23079 * C48416) * C48418) *
               C48438 -
           (((C22681 + C22682) * C48416 + C27405 * C4603) * C48418 +
            (C27873 * C48416 + C22666 * C4603) * C31910) *
               C48427 +
           ((C22683 * C4603 + (C22682 + C22681) * C48416) * C31910 +
            ((C23753 + C23752) * C4603 +
             ((C21591 * C23735 + C48030 * C23736) * C1030 +
              (C21591 * C23737 + C48030 * C23738) * C48044) *
                 C48416) *
                C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C31910 +
           ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C4603 +
            C31033 * C48416) *
               C48418) *
              C1681 +
          (((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C4603 +
            C31034 * C48416) *
               C31910 +
           ((C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C4603 +
            (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48416) *
               C48418) *
              C1682 +
          (((C28028 + C28027 - C28026 - C28029 + C28030 + C28031) * C4603 +
            (C28034 + C28033 - C28032 - C28035 + C28036 + C28037) * C48416) *
               C31910 +
           ((C28282 * C959 + C28283 * C48434 - C28644 * C960 - C28645 * C48421 +
             (C21591 * C1861 + C48030 * C1870) * C961 +
             (C21591 * C1867 + C48030 * C1879) * C48392) *
                C4603 +
            (C23751 * C959 + C23750 * C48434 - C28502 * C960 - C28503 * C48421 +
             (C21591 * C2241 + C48030 * C2244) * C961 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48416) *
               C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C1681 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C1682 +
           (((C27401 + C27400) * C4603 + C27403 * C48416) * C31910 +
            ((C28288 + C28289) * C4603 + C28778 * C48416) * C48418) *
               C48401) *
              C48437 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C1682 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C1681 -
           (((C23752 + C23753) * C48416 + C28779 * C4603) * C48418 +
            (C27405 * C48416 + C27399 * C4603) * C31910) *
               C48401) *
              C48425 +
          (((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
            (C27404 * C4603 + C23079 * C48416) * C48418) *
               C1681 -
           (((C22681 + C22682) * C48416 + C27405 * C4603) * C48418 +
            (C27873 * C48416 + C22666 * C4603) * C31910) *
               C1682 +
           ((C22683 * C4603 + (C22682 + C22681) * C48416) * C31910 +
            ((C23753 + C23752) * C4603 +
             ((C21591 * C23735 + C48030 * C23736) * C1030 +
              (C21591 * C23737 + C48030 * C23738) * C48044) *
                 C48416) *
                C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C4603 +
            (C22507 + C22508) * C48416) *
               C31910 +
           ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
              C1856 -
          ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
           (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
              C1857 +
          (((C27401 + C27400) * C4603 + C27403 * C48416) * C31910 +
           ((C28288 + C28289) * C4603 + C28778 * C48416) * C48418) *
              C1858 -
          (((C28290 + C28291) * C48416 + (C28292 + C28293) * C4603) * C48418 +
           (C28779 * C48416 + (C28289 + C28288) * C4603) * C31910) *
              C1859 +
          (((C28293 + C28292) * C4603 + (C28291 + C28290) * C48416) * C31910 +
           (((C21591 * C12369 + C48030 * C12371) * C1030 +
             (C21591 * C12373 + C48030 * C12375) * C48044) *
                C4603 +
            ((C21591 * C28265 + C48030 * C28266) * C1030 +
             (C21591 * C28267 + C48030 * C28268) * C48044) *
                C48416) *
               C48418) *
              C1860) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47151 +
              (C21591 * C131 + C48030 * C142) * C48352 -
              (C21591 * C122 + C48030 * C129) * C47132 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C4603 +
             (C22782 + C22783 - C22784 - C22785) * C48416) *
                C31910 +
            ((C27730 + C27731 - C27732 - C27733) * C4603 + C27740 * C48416) *
                C48418) *
               C48367 +
           (((C27732 - (C27731 + C27730) + C27733) * C4603 + C27741 * C48416) *
                C31910 +
            ((C28488 - (C28489 + C28490) + C28491) * C4603 + C28504 * C48416) *
                C48418) *
               C48184) *
              C956 +
          ((((C22784 - (C22783 + C22782) + C22785) * C4603 +
             (C22788 - (C22787 + C22786) + C22789) * C48416) *
                C31910 +
            (C27741 * C4603 + C22976 * C48416) * C48418) *
               C48367 +
           ((C27740 * C4603 + C27742 * C48416) * C31910 +
            (C28505 * C4603 + (C23526 + C23527 - C23538 - C23539) * C48416) *
                C48418) *
               C48184) *
              C957 +
          (((C22808 * C4603 + (C22792 + C22791 - C22790 - C22793) * C48416) *
                C31910 +
            (C27742 * C4603 + (C22964 + C22965 - C22974 - C22975) * C48416) *
                C48418) *
               C48367 +
           ((C22976 * C4603 + (C22974 - (C22965 + C22964) + C22975) * C48416) *
                C31910 +
            ((C23538 - (C23527 + C23526) + C23539) * C4603 +
             ((C21591 * C5880 + C48030 * C5882) * C47132 -
              (C22673 * C48352 + C22674 * C47151) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C565 +
             (C21591 * C131 + C48030 * C142) * C559 -
             (C21591 * C122 + C48030 * C129) * C566 -
             (C21591 * C132 + C48030 * C143) * C560 +
             (C21591 * C123 + C48030 * C130) * C567 +
             (C21591 * C133 + C48030 * C144) * C561 -
             (C21591 * C124 + C48030 * C134) * C568 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C4603 +
            (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
             C22013) *
                C48416) *
               C31910 +
           ((C26804 + C26805 - C26806 - C26807 + C26808 + C26809 - C26816 -
             C26817) *
                C4603 +
            (C26660 + C26661 - C26662 - C26663 + C26664 + C26665 - C26672 -
             C26673) *
                C48416) *
               C48418) *
              C48367 +
          (((C26806 - (C26805 + C26804) + C26807 - C26808 - C26809 + C26816 +
             C26817) *
                C4603 +
            (C26662 - (C26661 + C26660) + C26663 - C26664 - C26665 + C26672 +
             C26673) *
                C48416) *
               C31910 +
           ((C26508 * C566 - (C26509 * C559 + C26510 * C565) + C26511 * C560 -
             C26512 * C567 - C26513 * C561 +
             (C21591 * C429 + C48030 * C447) * C568 +
             (C21591 * C448 + C48030 * C459) * C48402) *
                C4603 +
            (C23532 * C566 - (C22668 * C559 + C22667 * C565) + C23533 * C560 -
             C26514 * C567 - C26515 * C561 +
             (C21591 * C2031 + C48030 * C2032) * C568 +
             (C21591 * C2033 + C48030 * C2034) * C48402) *
                C48416) *
               C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C4603 +
            (C22782 + C22783 - C22784 - C22785) * C48416) *
               C31910 +
           ((C27730 + C27731 - C27732 - C27733) * C4603 + C27740 * C48416) *
               C48418) *
              C2133 +
          (((C27732 - (C27731 + C27730) + C27733) * C4603 + C27741 * C48416) *
               C31910 +
           ((C28488 - (C28489 + C28490) + C28491) * C4603 + C28504 * C48416) *
               C48418) *
              C2134 +
          (((C28490 + C28489 - C28488 - C28491) * C4603 + C28505 * C48416) *
               C31910 +
           ((C28638 + C28639 - C28646 - C28647) * C4603 +
            (C28494 + C28495 - C28506 - C28507) * C48416) *
               C48418) *
              C2135 +
          (((C28646 - (C28639 + C28638) + C28647) * C4603 +
            (C28506 - (C28495 + C28494) + C28507) * C48416) *
               C31910 +
           (((C21591 * C1865 + C48030 * C1874) * C47132 -
             (C28286 * C48352 + C28287 * C47151) +
             (C21591 * C1877 + C48030 * C1883) * C48054) *
                C4603 +
            ((C21591 * C6796 + C48030 * C6798) * C47132 -
             (C28284 * C48352 + C28285 * C47151) +
             (C21591 * C6800 + C48030 * C6802) * C48054) *
                C48416) *
               C48418) *
              C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
               C31910 +
           ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C4603 +
            C27020 * C48416) *
               C48418) *
              C48097 * C48437 +
          (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C4603 +
            (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C48416) *
               C31910 +
           (C27021 * C4603 +
            (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C48416) *
               C48418) *
              C48097 * C48425 +
          ((C21779 * C4603 +
            (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) * C48416) *
               C31910 +
           ((C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C4603 +
            (C22671 * C265 + C22672 * C259 - C22971 * C266 - C22972 * C260 +
             (C21591 * C1561 + C48030 * C1564) * C267 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C116 +
            (C21591 * C131 + C48030 * C142) * C104 -
            (C21591 * C122 + C48030 * C129) * C117 -
            (C21591 * C132 + C48030 * C143) * C105 +
            (C21591 * C123 + C48030 * C130) * C118 +
            (C21591 * C133 + C48030 * C144) * C106 -
            (C21591 * C124 + C48030 * C134) * C119 -
            (C21591 * C135 + C48030 * C145) * C107 +
            (C21591 * C125 + C48030 * C136) * C120 +
            (C21591 * C137 + C48030 * C146) * C108) *
               C4603 +
           (C21739 * C116 + C21740 * C104 - C21741 * C117 - C21742 * C105 +
            C21743 * C118 + C21744 * C106 - C22008 * C119 - C22009 * C107 +
            (C21591 * C272 + C48030 * C286) * C120 +
            (C21591 * C287 + C48030 * C302) * C108) *
               C48416) *
              C31910 +
          ((C26502 * C116 + C26503 * C104 - C26504 * C117 - C26505 * C105 +
            C26506 * C118 + C26507 * C106 - C26814 * C119 - C26815 * C107 +
            (C21591 * C425 + C48030 * C439) * C120 +
            (C21591 * C440 + C48030 * C455) * C108) *
               C4603 +
           (C22286 * C116 + C22285 * C104 - C22284 * C117 - C22287 * C105 +
            C22288 * C118 + C22289 * C106 - C26670 * C119 - C26671 * C107 +
            (C21591 * C827 + C48030 * C836) * C120 +
            (C21591 * C837 + C48030 * C842) * C108) *
               C48416) *
              C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C31910 +
           ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C4603 +
            C31033 * C48416) *
               C48418) *
              C48097 * C956 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C4603 +
            (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
               C31910 +
           (C31034 * C4603 +
            (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
               C48418) *
              C48097 * C957 +
          ((C22440 * C4603 +
            (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C48416) *
               C31910 +
           ((C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C4603 +
            (C22671 * C959 + C22672 * C48434 - C22971 * C960 - C22972 * C48421 +
             (C21591 * C1561 + C48030 * C1564) * C961 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C4603 +
            (C22507 + C22508) * C48416) *
               C31910 +
           ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
              C48097 * C1025 -
          ((C22666 * C48416 + C27402 * C4603) * C48418 +
           ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
              C48097 * C1026 +
          ((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
           (C27404 * C4603 + C23079 * C48416) * C48418) *
              C48097 * C1027 -
          (((C23086 + C23087) * C48416 + C27873 * C4603) * C48418 +
           ((C22528 + C22527) * C48416 + C22522 * C4603) * C31910) *
              C48097 * C1028 +
          ((C22531 * C4603 + (C22530 + C22529) * C48416) * C31910 +
           ((C23087 + C23086) * C4603 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C48416) *
               C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C31910 +
           ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C4603 +
            C31033 * C48416) *
               C48418) *
              C1681 +
          (((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C4603 +
            C31034 * C48416) *
               C31910 +
           ((C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C4603 +
            (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48416) *
               C48418) *
              C1682 +
          (((C28028 + C28027 - C28026 - C28029 + C28030 + C28031) * C4603 +
            (C28034 + C28033 - C28032 - C28035 + C28036 + C28037) * C48416) *
               C31910 +
           ((C28282 * C959 + C28283 * C48434 - C28644 * C960 - C28645 * C48421 +
             (C21591 * C1861 + C48030 * C1870) * C961 +
             (C21591 * C1867 + C48030 * C1879) * C48392) *
                C4603 +
            (C23751 * C959 + C23750 * C48434 - C28502 * C960 - C28503 * C48421 +
             (C21591 * C2241 + C48030 * C2244) * C961 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48416) *
               C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C1681 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C1682 +
           (((C27401 + C27400) * C4603 + C27403 * C48416) * C31910 +
            ((C28288 + C28289) * C4603 + C28778 * C48416) * C48418) *
               C48401) *
              C48437 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C1682 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C1681 -
           (((C23752 + C23753) * C48416 + C28779 * C4603) * C48418 +
            (C27405 * C48416 + C27399 * C4603) * C31910) *
               C48401) *
              C48425 +
          (((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
            (C27404 * C4603 + C23079 * C48416) * C48418) *
               C1681 -
           (((C22681 + C22682) * C48416 + C27405 * C4603) * C48418 +
            (C27873 * C48416 + C22666 * C4603) * C31910) *
               C1682 +
           ((C22683 * C4603 + (C22682 + C22681) * C48416) * C31910 +
            ((C23753 + C23752) * C4603 +
             ((C21591 * C23735 + C48030 * C23736) * C1030 +
              (C21591 * C23737 + C48030 * C23738) * C48044) *
                 C48416) *
                C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47161 +
              (C21591 * C131 + C48030 * C142) * C48049 -
              (C21591 * C122 + C48030 * C129) * C47157 -
              (C21591 * C132 + C48030 * C143) * C48057 +
              (C21591 * C123 + C48030 * C130) * C47167 +
              (C21591 * C133 + C48030 * C144) * C2723) *
                 C4603 +
             (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C48416) *
                C31910 +
            ((C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C4603 +
             C29626 * C48416) *
                C48418) *
               C3120 +
           (((C29608 - (C29607 + C29606) + C29609 - C29610 - C29611) * C4603 +
             C29627 * C48416) *
                C31910 +
            ((C30631 - (C30632 + C30633) + C30634 - C30635 - C30636) * C4603 +
             (C29614 - (C29615 + C29616) + C29617 - C29618 - C29619) * C48416) *
                C48418) *
               C48184) *
              C48366 +
          ((((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C4603 +
             (C24270 - (C24269 + C24268) + C24271 - C24272 - C24273) * C48416) *
                C31910 +
            (C29627 * C4603 +
             (C24437 - (C24438 + C24439) + C24440 - C24441 - C24442) * C48416) *
                C48418) *
               C3120 +
           ((C29626 * C4603 +
             (C24439 + C24438 - C24437 - C24440 + C24441 + C24442) * C48416) *
                C31910 +
            ((C29616 + C29615 - C29614 - C29617 + C29618 + C29619) * C4603 +
             (C22669 * C47161 + C22670 * C48049 - C23534 * C47157 -
              C23535 * C48057 + (C21591 * C1173 + C48030 * C1188) * C47167 +
              (C21591 * C1191 + C48030 * C1200) * C2723) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C2463 +
              (C21591 * C131 + C48030 * C142) * C2457 -
              (C21591 * C122 + C48030 * C129) * C2464 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C4603 +
             (C23968 + C23969 - C23970 - C23971) * C48416) *
                C31910 +
            ((C29242 + C29243 - C29244 - C29245) * C4603 + C29262 * C48416) *
                C48418) *
               C48180 +
           (((C29244 - (C29243 + C29242) + C29245) * C4603 + C29263 * C48416) *
                C31910 +
            ((C29248 - (C29249 + C29250) + C29251) * C4603 + C29264 * C48416) *
                C48418) *
               C48187 +
           (((C29250 + C29249 - C29248 - C29251) * C4603 + C29265 * C48416) *
                C31910 +
            ((C30287 + C30288 - C30289 - C30290) * C4603 +
             (C29254 + C29255 - C29256 - C29257) * C48416) *
                C48418) *
               C3628) *
              C48366 +
          ((((C23970 - (C23969 + C23968) + C23971) * C4603 +
             (C23974 - (C23973 + C23972) + C23975) * C48416) *
                C31910 +
            (C29263 * C4603 + C24595 * C48416) * C48418) *
               C48180 +
           ((C29262 * C4603 + C29824 * C48416) * C31910 +
            (C29265 * C4603 + (C24148 + C24149 - C24150 - C24151) * C48416) *
                C48418) *
               C48187 +
           ((C29264 * C4603 + (C24150 - (C24149 + C24148) + C24151) * C48416) *
                C31910 +
            ((C29256 - (C29255 + C29254) + C29257) * C4603 +
             ((C21591 * C7270 + C48030 * C7272) * C2464 -
              (C23748 * C2457 + C23749 * C2463) +
              (C21591 * C7274 + C48030 * C7276) * C48054) *
                 C48416) *
                C48418) *
               C3628) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C2463 +
              (C21591 * C131 + C48030 * C142) * C2457 -
              (C21591 * C122 + C48030 * C129) * C2464 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C4603 +
             (C23968 + C23969 - C23970 - C23971) * C48416) *
                C31910 +
            ((C29242 + C29243 - C29244 - C29245) * C4603 + C29262 * C48416) *
                C48418) *
               C3120 +
           (((C29244 - (C29243 + C29242) + C29245) * C4603 + C29263 * C48416) *
                C31910 +
            ((C29248 - (C29249 + C29250) + C29251) * C4603 + C29264 * C48416) *
                C48418) *
               C48184) *
              C48437 +
          ((((C23970 - (C23969 + C23968) + C23971) * C4603 +
             (C23974 - (C23973 + C23972) + C23975) * C48416) *
                C31910 +
            (C29263 * C4603 + C24595 * C48416) * C48418) *
               C3120 +
           ((C29262 * C4603 + C29824 * C48416) * C31910 +
            (C29265 * C4603 + (C24148 + C24149 - C24150 - C24151) * C48416) *
                C48418) *
               C48184) *
              C48425 +
          (((C23988 * C4603 + (C23978 + C23977 - C23976 - C23979) * C48416) *
                C31910 +
            (C29824 * C4603 + (C24590 + C24591 - C24592 - C24593) * C48416) *
                C48418) *
               C3120 +
           ((C24595 * C4603 + (C24592 - (C24591 + C24590) + C24593) * C48416) *
                C31910 +
            ((C24150 - (C24149 + C24148) + C24151) * C4603 +
             ((C21591 * C5880 + C48030 * C5882) * C2464 -
              (C22673 * C2457 + C22674 * C2463) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2355 +
             (C21591 * C131 + C48030 * C142) * C48443 -
             (C21591 * C122 + C48030 * C129) * C2356 -
             (C21591 * C132 + C48030 * C143) * C48436 +
             (C21591 * C123 + C48030 * C130) * C2357 +
             (C21591 * C133 + C48030 * C144) * C48423 -
             (C21591 * C124 + C48030 * C134) * C2358 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C4603 +
            (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
             C23861) *
                C48416) *
               C31910 +
           ((C29955 + C29956 - C29957 - C29958 + C29959 + C29960 - C29961 -
             C29962) *
                C4603 +
            (C28910 + C28911 - C28912 - C28913 + C28914 + C28915 - C28916 -
             C28917) *
                C48416) *
               C48418) *
              C3120 +
          (((C29957 - (C29956 + C29955) + C29958 - C29959 - C29960 + C29961 +
             C29962) *
                C4603 +
            (C28912 - (C28911 + C28910) + C28913 - C28914 - C28915 + C28916 +
             C28917) *
                C48416) *
               C31910 +
           ((C26508 * C2356 - (C26509 * C48443 + C26510 * C2355) +
             C26511 * C48436 - C26512 * C2357 - C26513 * C48423 +
             (C21591 * C429 + C48030 * C447) * C2358 +
             (C21591 * C448 + C48030 * C459) * C48402) *
                C4603 +
            (C23532 * C2356 - (C22668 * C48443 + C22667 * C2355) +
             C23533 * C48436 - C26514 * C2357 - C26515 * C48423 +
             (C21591 * C2031 + C48030 * C2032) * C2358 +
             (C21591 * C2033 + C48030 * C2034) * C48402) *
                C48416) *
               C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2463 +
             (C21591 * C131 + C48030 * C142) * C2457 -
             (C21591 * C122 + C48030 * C129) * C2464 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C4603 +
            (C23968 + C23969 - C23970 - C23971) * C48416) *
               C31910 +
           ((C29242 + C29243 - C29244 - C29245) * C4603 + C29262 * C48416) *
               C48418) *
              C48445 +
          (((C29244 - (C29243 + C29242) + C29245) * C4603 + C29263 * C48416) *
               C31910 +
           ((C29248 - (C29249 + C29250) + C29251) * C4603 + C29264 * C48416) *
               C48418) *
              C48442 +
          (((C29250 + C29249 - C29248 - C29251) * C4603 + C29265 * C48416) *
               C31910 +
           ((C30287 + C30288 - C30289 - C30290) * C4603 +
            (C29254 + C29255 - C29256 - C29257) * C48416) *
               C48418) *
              C48433 +
          (((C30289 - (C30288 + C30287) + C30290) * C4603 +
            (C29256 - (C29255 + C29254) + C29257) * C48416) *
               C31910 +
           (((C21591 * C1865 + C48030 * C1874) * C2464 -
             (C28286 * C2457 + C28287 * C2463) +
             (C21591 * C1877 + C48030 * C1883) * C48054) *
                C4603 +
            ((C21591 * C6796 + C48030 * C6798) * C2464 -
             (C28284 * C2457 + C28285 * C2463) +
             (C21591 * C6800 + C48030 * C6802) * C48054) *
                C48416) *
               C48418) *
              C48414) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47161 +
             (C21591 * C131 + C48030 * C142) * C48049 -
             (C21591 * C122 + C48030 * C129) * C47157 -
             (C21591 * C132 + C48030 * C143) * C48057 +
             (C21591 * C123 + C48030 * C130) * C47167 +
             (C21591 * C133 + C48030 * C144) * C2723) *
                C4603 +
            (C24262 + C24263 - C24264 - C24265 + C24266 + C24267) * C48416) *
               C31910 +
           ((C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C4603 +
            C29626 * C48416) *
               C48418) *
              C48180 +
          (((C29608 - (C29607 + C29606) + C29609 - C29610 - C29611) * C4603 +
            C29627 * C48416) *
               C31910 +
           ((C30631 - (C30632 + C30633) + C30634 - C30635 - C30636) * C4603 +
            (C29614 - (C29615 + C29616) + C29617 - C29618 - C29619) * C48416) *
               C48418) *
              C48187 +
          (((C30633 + C30632 - C30631 - C30634 + C30635 + C30636) * C4603 +
            (C29616 + C29615 - C29614 - C29617 + C29618 + C29619) * C48416) *
               C31910 +
           ((C28282 * C47161 + C28283 * C48049 - C28644 * C47157 -
             C28645 * C48057 + (C21591 * C1861 + C48030 * C1870) * C47167 +
             (C21591 * C1867 + C48030 * C1879) * C2723) *
                C4603 +
            (C23751 * C47161 + C23750 * C48049 - C28502 * C47157 -
             C28503 * C48057 + (C21591 * C2241 + C48030 * C2244) * C47167 +
             (C21591 * C2247 + C48030 * C2250) * C2723) *
                C48416) *
               C48418) *
              C3628) *
         C48085) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C2355 +
             (C21591 * C131 + C48030 * C142) * C48443 -
             (C21591 * C122 + C48030 * C129) * C2356 -
             (C21591 * C132 + C48030 * C143) * C48436 +
             (C21591 * C123 + C48030 * C130) * C2357 +
             (C21591 * C133 + C48030 * C144) * C48423 -
             (C21591 * C124 + C48030 * C134) * C2358 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C4603 +
            (C23854 + C23855 - C23856 - C23857 + C23858 + C23859 - C23860 -
             C23861) *
                C48416) *
               C31910 +
           ((C29955 + C29956 - C29957 - C29958 + C29959 + C29960 - C29961 -
             C29962) *
                C4603 +
            (C28910 + C28911 - C28912 - C28913 + C28914 + C28915 - C28916 -
             C28917) *
                C48416) *
               C48418) *
              C3120 +
          (((C29957 - (C29956 + C29955) + C29958 - C29959 - C29960 + C29961 +
             C29962) *
                C4603 +
            (C28912 - (C28911 + C28910) + C28913 - C28914 - C28915 + C28916 +
             C28917) *
                C48416) *
               C31910 +
           ((C26508 * C2356 - (C26509 * C48443 + C26510 * C2355) +
             C26511 * C48436 - C26512 * C2357 - C26513 * C48423 +
             (C21591 * C429 + C48030 * C447) * C2358 +
             (C21591 * C448 + C48030 * C459) * C48402) *
                C4603 +
            (C23532 * C2356 - (C22668 * C48443 + C22667 * C2355) +
             C23533 * C48436 - C26514 * C2357 - C26515 * C48423 +
             (C21591 * C2031 + C48030 * C2032) * C2358 +
             (C21591 * C2033 + C48030 * C2034) * C48402) *
                C48416) *
               C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C2463 +
              (C21591 * C131 + C48030 * C142) * C2457 -
              (C21591 * C122 + C48030 * C129) * C2464 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C4603 +
             (C23968 + C23969 - C23970 - C23971) * C48416) *
                C31910 +
            ((C29242 + C29243 - C29244 - C29245) * C4603 + C29262 * C48416) *
                C48418) *
               C3120 +
           (((C29244 - (C29243 + C29242) + C29245) * C4603 + C29263 * C48416) *
                C31910 +
            ((C29248 - (C29249 + C29250) + C29251) * C4603 + C29264 * C48416) *
                C48418) *
               C48184) *
              C48437 +
          ((((C23970 - (C23969 + C23968) + C23971) * C4603 +
             (C23974 - (C23973 + C23972) + C23975) * C48416) *
                C31910 +
            (C29263 * C4603 + C24595 * C48416) * C48418) *
               C3120 +
           ((C29262 * C4603 + C29824 * C48416) * C31910 +
            (C29265 * C4603 + (C24148 + C24149 - C24150 - C24151) * C48416) *
                C48418) *
               C48184) *
              C48425 +
          (((C23988 * C4603 + (C23978 + C23977 - C23976 - C23979) * C48416) *
                C31910 +
            (C29824 * C4603 + (C24590 + C24591 - C24592 - C24593) * C48416) *
                C48418) *
               C3120 +
           ((C24595 * C4603 + (C24592 - (C24591 + C24590) + C24593) * C48416) *
                C31910 +
            ((C24150 - (C24149 + C24148) + C24151) * C4603 +
             ((C21591 * C5880 + C48030 * C5882) * C2464 -
              (C22673 * C2457 + C22674 * C2463) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C565 +
             (C21591 * C131 + C48030 * C142) * C559 -
             (C21591 * C122 + C48030 * C129) * C566 -
             (C21591 * C132 + C48030 * C143) * C560 +
             (C21591 * C123 + C48030 * C130) * C567 +
             (C21591 * C133 + C48030 * C144) * C561 -
             (C21591 * C124 + C48030 * C134) * C568 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C4603 +
            (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
             C22013) *
                C48416) *
               C31910 +
           ((C26804 + C26805 - C26806 - C26807 + C26808 + C26809 - C26816 -
             C26817) *
                C4603 +
            (C26660 + C26661 - C26662 - C26663 + C26664 + C26665 - C26672 -
             C26673) *
                C48416) *
               C48418) *
              C48097 * C48366 +
          (((C21990 - (C21989 + C21988) + C21991 - C21992 - C21993 + C22012 +
             C22013) *
                C4603 +
            (C22000 - (C21999 + C21998) + C22001 - C22002 - C22003 + C22014 +
             C22015) *
                C48416) *
               C31910 +
           ((C26662 - (C26661 + C26660) + C26663 - C26664 - C26665 + C26672 +
             C26673) *
                C4603 +
            (C22290 * C566 - (C22291 * C559 + C22292 * C565) + C22293 * C560 -
             C22294 * C567 - C22295 * C561 +
             (C21591 * C1457 + C48030 * C1458) * C568 +
             (C21591 * C1459 + C48030 * C1460) * C48402) *
                C48416) *
               C48418) *
              C48097 * C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47151 +
             (C21591 * C131 + C48030 * C142) * C48352 -
             (C21591 * C122 + C48030 * C129) * C47132 -
             (C21591 * C132 + C48030 * C143) * C48054) *
                C4603 +
            (C22782 + C22783 - C22784 - C22785) * C48416) *
               C31910 +
           ((C27730 + C27731 - C27732 - C27733) * C4603 + C27740 * C48416) *
               C48418) *
              C48097 * C1301 +
          (((C22784 - (C22783 + C22782) + C22785) * C4603 +
            (C22788 - (C22787 + C22786) + C22789) * C48416) *
               C31910 +
           (C27741 * C4603 + C22976 * C48416) * C48418) *
              C48097 * C1302 +
          ((C22808 * C4603 + (C22792 + C22791 - C22790 - C22793) * C48416) *
               C31910 +
           (C27742 * C4603 + (C22964 + C22965 - C22974 - C22975) * C48416) *
               C48418) *
              C48097 * C1303 +
          ((C22809 * C4603 + (C22806 - (C22795 + C22794) + C22807) * C48416) *
               C31910 +
           ((C22974 - (C22965 + C22964) + C22975) * C4603 +
            ((C21591 * C6402 + C48030 * C6404) * C47132 -
             (C23084 * C48352 + C23085 * C47151) +
             (C21591 * C6406 + C48030 * C6408) * C48054) *
                C48416) *
               C48418) *
              C48097 * C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C265 +
              (C21591 * C131 + C48030 * C142) * C259 -
              (C21591 * C122 + C48030 * C129) * C266 -
              (C21591 * C132 + C48030 * C143) * C260 +
              (C21591 * C123 + C48030 * C130) * C267 +
              (C21591 * C133 + C48030 * C144) * C48392) *
                 C4603 +
             (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
                C31910 +
            ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C4603 +
             C27020 * C48416) *
                C48418) *
               C48367 +
           (((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C4603 +
             C27021 * C48416) *
                C31910 +
            ((C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C4603 +
             (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48416) *
                C48418) *
               C48184) *
              C48366 +
          ((((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C4603 +
             (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C48416) *
                C31910 +
            (C27021 * C4603 +
             (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C48416) *
                C48418) *
               C48367 +
           ((C27020 * C4603 +
             (C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C48416) *
                C31910 +
            ((C26496 + C26495 - C26494 - C26497 + C26528 + C26529) * C4603 +
             (C22669 * C265 + C22670 * C259 - C23534 * C266 - C23535 * C260 +
              (C21591 * C1173 + C48030 * C1188) * C267 +
              (C21591 * C1191 + C48030 * C1200) * C48392) *
                 C48416) *
                C48418) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C48367 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C48184) *
              C1301 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C48184 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C48367) *
              C1302 +
          (((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
            (C27404 * C4603 + C23079 * C48416) * C48418) *
               C48367 -
           (((C22681 + C22682) * C48416 + C27405 * C4603) * C48418 +
            (C27873 * C48416 + C22666 * C4603) * C31910) *
               C48184) *
              C1303 +
          (((C23079 * C4603 + (C23087 + C23086) * C48416) * C31910 +
            ((C22682 + C22681) * C4603 +
             ((C21591 * C22641 + C48030 * C22642) * C1030 +
              (C21591 * C22643 + C48030 * C22644) * C48044) *
                 C48416) *
                C48418) *
               C48184 -
           (((C23086 + C23087) * C48416 + C27873 * C4603) * C48418 +
            ((C22528 + C22527) * C48416 + C22522 * C4603) * C31910) *
               C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
               C31910 +
           ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C4603 +
            C27020 * C48416) *
               C48418) *
              C48097 * C48437 +
          (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C4603 +
            (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C48416) *
               C31910 +
           (C27021 * C4603 +
            (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C48416) *
               C48418) *
              C48097 * C48425 +
          ((C21779 * C4603 +
            (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) * C48416) *
               C31910 +
           ((C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C4603 +
            (C22671 * C265 + C22672 * C259 - C22971 * C266 - C22972 * C260 +
             (C21591 * C1561 + C48030 * C1564) * C267 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C116 +
            (C21591 * C131 + C48030 * C142) * C104 -
            (C21591 * C122 + C48030 * C129) * C117 -
            (C21591 * C132 + C48030 * C143) * C105 +
            (C21591 * C123 + C48030 * C130) * C118 +
            (C21591 * C133 + C48030 * C144) * C106 -
            (C21591 * C124 + C48030 * C134) * C119 -
            (C21591 * C135 + C48030 * C145) * C107 +
            (C21591 * C125 + C48030 * C136) * C120 +
            (C21591 * C137 + C48030 * C146) * C108) *
               C4603 +
           (C21739 * C116 + C21740 * C104 - C21741 * C117 - C21742 * C105 +
            C21743 * C118 + C21744 * C106 - C22008 * C119 - C22009 * C107 +
            (C21591 * C272 + C48030 * C286) * C120 +
            (C21591 * C287 + C48030 * C302) * C108) *
               C48416) *
              C31910 +
          ((C26502 * C116 + C26503 * C104 - C26504 * C117 - C26505 * C105 +
            C26506 * C118 + C26507 * C106 - C26814 * C119 - C26815 * C107 +
            (C21591 * C425 + C48030 * C439) * C120 +
            (C21591 * C440 + C48030 * C455) * C108) *
               C4603 +
           (C22286 * C116 + C22285 * C104 - C22284 * C117 - C22287 * C105 +
            C22288 * C118 + C22289 * C106 - C26670 * C119 - C26671 * C107 +
            (C21591 * C827 + C48030 * C836) * C120 +
            (C21591 * C837 + C48030 * C842) * C108) *
               C48416) *
              C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
               C31910 +
           ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C4603 +
            C27020 * C48416) *
               C48418) *
              C48438 +
          (((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C4603 +
            C27021 * C48416) *
               C31910 +
           ((C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C4603 +
            (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48416) *
               C48418) *
              C48427 +
          (((C26524 + C26523 - C26522 - C26525 + C26526 + C26527) * C4603 +
            (C26496 + C26495 - C26494 - C26497 + C26528 + C26529) * C48416) *
               C31910 +
           ((C28282 * C265 + C28283 * C259 - C28644 * C266 - C28645 * C260 +
             (C21591 * C1861 + C48030 * C1870) * C267 +
             (C21591 * C1867 + C48030 * C1879) * C48392) *
                C4603 +
            (C23751 * C265 + C23750 * C259 - C28502 * C266 - C28503 * C260 +
             (C21591 * C2241 + C48030 * C2244) * C267 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48416) *
               C48418) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C31910 +
           ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C4603 +
            C31033 * C48416) *
               C48418) *
              C48097 * C956 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C4603 +
            (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
               C31910 +
           (C31034 * C4603 +
            (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
               C48418) *
              C48097 * C957 +
          ((C22440 * C4603 +
            (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C48416) *
               C31910 +
           ((C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C4603 +
            (C22671 * C959 + C22672 * C48434 - C22971 * C960 - C22972 * C48421 +
             (C21591 * C1561 + C48030 * C1564) * C961 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C4603 +
            (C22507 + C22508) * C48416) *
               C31910 +
           ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
              C48097 * C1025 -
          ((C22666 * C48416 + C27402 * C4603) * C48418 +
           ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
              C48097 * C1026 +
          ((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
           (C27404 * C4603 + C23079 * C48416) * C48418) *
              C48097 * C1027 -
          (((C23086 + C23087) * C48416 + C27873 * C4603) * C48418 +
           ((C22528 + C22527) * C48416 + C22522 * C4603) * C31910) *
              C48097 * C1028 +
          ((C22531 * C4603 + (C22530 + C22529) * C48416) * C31910 +
           ((C23087 + C23086) * C4603 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C48416) *
               C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C1030 +
              (C21591 * C131 + C48030 * C142) * C48044) *
                 C4603 +
             (C22507 + C22508) * C48416) *
                C31910 +
            ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
               C48438 -
           ((C27399 * C48416 + (C27400 + C27401) * C4603) * C48418 +
            (C27402 * C48416 + (C27397 + C27396) * C4603) * C31910) *
               C48427 +
           (((C27401 + C27400) * C4603 + C27403 * C48416) * C31910 +
            ((C28288 + C28289) * C4603 + C28778 * C48416) * C48418) *
               C48401) *
              C956 +
          (((C27398 * C4603 + C27404 * C48416) * C31910 +
            (C27403 * C4603 + C22683 * C48416) * C48418) *
               C48427 -
           ((C22666 * C48416 + C27402 * C4603) * C48418 +
            ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
               C48438 -
           (((C23752 + C23753) * C48416 + C28779 * C4603) * C48418 +
            (C27405 * C48416 + C27399 * C4603) * C31910) *
               C48401) *
              C957 +
          (((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
            (C27404 * C4603 + C23079 * C48416) * C48418) *
               C48438 -
           (((C22681 + C22682) * C48416 + C27405 * C4603) * C48418 +
            (C27873 * C48416 + C22666 * C4603) * C31910) *
               C48427 +
           ((C22683 * C4603 + (C22682 + C22681) * C48416) * C31910 +
            ((C23753 + C23752) * C4603 +
             ((C21591 * C23735 + C48030 * C23736) * C1030 +
              (C21591 * C23737 + C48030 * C23738) * C48044) *
                 C48416) *
                C48418) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C565 +
             (C21591 * C131 + C48030 * C142) * C559 -
             (C21591 * C122 + C48030 * C129) * C566 -
             (C21591 * C132 + C48030 * C143) * C560 +
             (C21591 * C123 + C48030 * C130) * C567 +
             (C21591 * C133 + C48030 * C144) * C561 -
             (C21591 * C124 + C48030 * C134) * C568 -
             (C21591 * C135 + C48030 * C145) * C48402) *
                C4603 +
            (C21988 + C21989 - C21990 - C21991 + C21992 + C21993 - C22012 -
             C22013) *
                C48416) *
               C31910 +
           ((C26804 + C26805 - C26806 - C26807 + C26808 + C26809 - C26816 -
             C26817) *
                C4603 +
            (C26660 + C26661 - C26662 - C26663 + C26664 + C26665 - C26672 -
             C26673) *
                C48416) *
               C48418) *
              C48367 +
          (((C26806 - (C26805 + C26804) + C26807 - C26808 - C26809 + C26816 +
             C26817) *
                C4603 +
            (C26662 - (C26661 + C26660) + C26663 - C26664 - C26665 + C26672 +
             C26673) *
                C48416) *
               C31910 +
           ((C26508 * C566 - (C26509 * C559 + C26510 * C565) + C26511 * C560 -
             C26512 * C567 - C26513 * C561 +
             (C21591 * C429 + C48030 * C447) * C568 +
             (C21591 * C448 + C48030 * C459) * C48402) *
                C4603 +
            (C23532 * C566 - (C22668 * C559 + C22667 * C565) + C23533 * C560 -
             C26514 * C567 - C26515 * C561 +
             (C21591 * C2031 + C48030 * C2032) * C568 +
             (C21591 * C2033 + C48030 * C2034) * C48402) *
                C48416) *
               C48418) *
              C48184) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C121 + C48030 * C128) * C47151 +
              (C21591 * C131 + C48030 * C142) * C48352 -
              (C21591 * C122 + C48030 * C129) * C47132 -
              (C21591 * C132 + C48030 * C143) * C48054) *
                 C4603 +
             (C22782 + C22783 - C22784 - C22785) * C48416) *
                C31910 +
            ((C27730 + C27731 - C27732 - C27733) * C4603 + C27740 * C48416) *
                C48418) *
               C48367 +
           (((C27732 - (C27731 + C27730) + C27733) * C4603 + C27741 * C48416) *
                C31910 +
            ((C28488 - (C28489 + C28490) + C28491) * C4603 + C28504 * C48416) *
                C48418) *
               C48184) *
              C956 +
          ((((C22784 - (C22783 + C22782) + C22785) * C4603 +
             (C22788 - (C22787 + C22786) + C22789) * C48416) *
                C31910 +
            (C27741 * C4603 + C22976 * C48416) * C48418) *
               C48367 +
           ((C27740 * C4603 + C27742 * C48416) * C31910 +
            (C28505 * C4603 + (C23526 + C23527 - C23538 - C23539) * C48416) *
                C48418) *
               C48184) *
              C957 +
          (((C22808 * C4603 + (C22792 + C22791 - C22790 - C22793) * C48416) *
                C31910 +
            (C27742 * C4603 + (C22964 + C22965 - C22974 - C22975) * C48416) *
                C48418) *
               C48367 +
           ((C22976 * C4603 + (C22974 - (C22965 + C22964) + C22975) * C48416) *
                C31910 +
            ((C23538 - (C23527 + C23526) + C23539) * C4603 +
             ((C21591 * C5880 + C48030 * C5882) * C47132 -
              (C22673 * C48352 + C22674 * C47151) +
              (C21591 * C5884 + C48030 * C5886) * C48054) *
                 C48416) *
                C48418) *
               C48184) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C116 +
            (C21591 * C131 + C48030 * C142) * C104 -
            (C21591 * C122 + C48030 * C129) * C117 -
            (C21591 * C132 + C48030 * C143) * C105 +
            (C21591 * C123 + C48030 * C130) * C118 +
            (C21591 * C133 + C48030 * C144) * C106 -
            (C21591 * C124 + C48030 * C134) * C119 -
            (C21591 * C135 + C48030 * C145) * C107 +
            (C21591 * C125 + C48030 * C136) * C120 +
            (C21591 * C137 + C48030 * C146) * C108) *
               C4603 +
           (C21739 * C116 + C21740 * C104 - C21741 * C117 - C21742 * C105 +
            C21743 * C118 + C21744 * C106 - C22008 * C119 - C22009 * C107 +
            (C21591 * C272 + C48030 * C286) * C120 +
            (C21591 * C287 + C48030 * C302) * C108) *
               C48416) *
              C31910 +
          ((C26502 * C116 + C26503 * C104 - C26504 * C117 - C26505 * C105 +
            C26506 * C118 + C26507 * C106 - C26814 * C119 - C26815 * C107 +
            (C21591 * C425 + C48030 * C439) * C120 +
            (C21591 * C440 + C48030 * C455) * C108) *
               C4603 +
           (C22286 * C116 + C22285 * C104 - C22284 * C117 - C22287 * C105 +
            C22288 * C118 + C22289 * C106 - C26670 * C119 - C26671 * C107 +
            (C21591 * C827 + C48030 * C836) * C120 +
            (C21591 * C837 + C48030 * C842) * C108) *
               C48416) *
              C48418) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C21757 + C21758 - C21759 - C21760 + C21761 + C21762) * C48416) *
               C31910 +
           ((C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C4603 +
            C27020 * C48416) *
               C48418) *
              C48097 * C48437 +
          (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C4603 +
            (C21765 - (C21764 + C21763) + C21766 - C21767 - C21768) * C48416) *
               C31910 +
           (C27021 * C4603 +
            (C22302 - (C22303 + C22304) + C22305 - C22306 - C22307) * C48416) *
               C48418) *
              C48097 * C48425 +
          ((C21779 * C4603 +
            (C21771 + C21770 - C21769 - C21772 + C21773 + C21774) * C48416) *
               C31910 +
           ((C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C4603 +
            (C22671 * C265 + C22672 * C259 - C22971 * C266 - C22972 * C260 +
             (C21591 * C1561 + C48030 * C1564) * C267 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C4603 +
            (C22418 + C22419 - C22420 - C22421 + C22422 + C22423) * C48416) *
               C31910 +
           ((C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C4603 +
            C31033 * C48416) *
               C48418) *
              C48097 * C956 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C4603 +
            (C22426 - (C22425 + C22424) + C22427 - C22428 - C22429) * C48416) *
               C31910 +
           (C31034 * C4603 +
            (C25492 - (C25493 + C25494) + C25495 - C25496 - C25497) * C48416) *
               C48418) *
              C48097 * C957 +
          ((C22440 * C4603 +
            (C22432 + C22431 - C22430 - C22433 + C22434 + C22435) * C48416) *
               C31910 +
           ((C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C4603 +
            (C22671 * C959 + C22672 * C48434 - C22971 * C960 - C22972 * C48421 +
             (C21591 * C1561 + C48030 * C1564) * C961 +
             (C21591 * C1567 + C48030 * C1570) * C48392) *
                C48416) *
               C48418) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C4603 +
            (C22507 + C22508) * C48416) *
               C31910 +
           ((C27396 + C27397) * C4603 + C27398 * C48416) * C48418) *
              C48097 * C1025 -
          ((C22666 * C48416 + C27402 * C4603) * C48418 +
           ((C22510 + C22509) * C48416 + (C22508 + C22507) * C4603) * C31910) *
              C48097 * C1026 +
          ((C22521 * C4603 + (C22512 + C22511) * C48416) * C31910 +
           (C27404 * C4603 + C23079 * C48416) * C48418) *
              C48097 * C1027 -
          (((C23086 + C23087) * C48416 + C27873 * C4603) * C48418 +
           ((C22528 + C22527) * C48416 + C22522 * C4603) * C31910) *
              C48097 * C1028 +
          ((C22531 * C4603 + (C22530 + C22529) * C48416) * C31910 +
           ((C23087 + C23086) * C4603 +
            ((C21591 * C23074 + C48030 * C23075) * C1030 +
             (C21591 * C23076 + C48030 * C23077) * C48044) *
                C48416) *
               C48418) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C47161 +
            (C21591 * C131 + C48030 * C142) * C48049 -
            (C21591 * C122 + C48030 * C129) * C47157 -
            (C21591 * C132 + C48030 * C143) * C48057 +
            (C21591 * C123 + C48030 * C130) * C47167 +
            (C21591 * C133 + C48030 * C144) * C2723) *
               C48286 * C42908 +
           (C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C48286 *
               C42909 +
           (C30633 + C30632 - C30631 - C30634 + C30635 + C30636) * C48286 *
               C42910) *
              C48097 * C48140 +
          ((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C48286 *
               C42908 +
           C29627 * C48286 * C42909 +
           (C29614 - (C29615 + C29616) + C29617 - C29618 - C29619) * C48286 *
               C42910) *
              C48097 * C48147 +
          (C24284 * C48286 * C42908 +
           (C24439 + C24438 - C24437 - C24440 + C24441 + C24442) * C48286 *
               C42909 +
           (C22669 * C47161 + C22670 * C48049 - C23534 * C47157 -
            C23535 * C48057 + (C21591 * C1173 + C48030 * C1188) * C47167 +
            (C21591 * C1191 + C48030 * C1200) * C2723) *
               C48286 * C42910) *
              C48097 * C2726)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C2463 +
                      (C21591 * C131 + C48030 * C142) * C2457 -
                      (C21591 * C122 + C48030 * C129) * C2464 -
                      (C21591 * C132 + C48030 * C143) * C48054) *
                         C48286 * C42908 +
                     (C29242 + C29243 - C29244 - C29245) * C48286 * C42909 +
                     C45152 * C42910) *
                        C48367 +
                    ((C29244 - (C29243 + C29242) + C29245) * C48286 * C42908 +
                     (C29248 - (C29249 + C29250) + C29251) * C48286 * C42909 +
                     (C30289 - (C30288 + C30287) + C30290) * C48286 * C42910) *
                        C48184) *
                       C48140 +
                   (((C23970 - (C23969 + C23968) + C23971) * C48286 * C42908 +
                     C29263 * C48286 * C42909 + C45149 * C42910) *
                        C48367 +
                    (C29262 * C48286 * C42908 + C29265 * C48286 * C42909 +
                     (C29254 + C29255 - C29256 - C29257) * C48286 * C42910) *
                        C48184) *
                       C48147 +
                   ((C23988 * C48286 * C42908 + C29824 * C48286 * C42909 +
                     (C24148 + C24149 - C24150 - C24151) * C48286 * C42910) *
                        C48367 +
                    (C24595 * C48286 * C42908 +
                     (C24150 - (C24149 + C24148) + C24151) * C48286 * C42909 +
                     ((C21591 * C7270 + C48030 * C7272) * C2464 -
                      (C23748 * C2457 + C23749 * C2463) +
                      (C21591 * C7274 + C48030 * C7276) * C48054) *
                         C48286 * C42910) *
                        C48184) *
                       C2726)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C2463 +
                     (C21591 * C131 + C48030 * C142) * C2457 -
                     (C21591 * C122 + C48030 * C129) * C2464 -
                     (C21591 * C132 + C48030 * C143) * C48054) *
                        C48286 * C42908 +
                    (C29242 + C29243 - C29244 - C29245) * C48286 * C42909 +
                    (C29250 + C29249 - C29248 - C29251) * C48286 * C42910) *
                       C48097 * C48444 +
                   ((C23970 - (C23969 + C23968) + C23971) * C48286 * C42908 +
                    C29263 * C48286 * C42909 + C29264 * C48286 * C42910) *
                       C48097 * C48440 +
                   (C23988 * C48286 * C42908 + C29824 * C48286 * C42909 +
                    (C24148 + C24149 - C24150 - C24151) * C48286 * C42910) *
                       C48097 * C48430 +
                   (C23989 * C48286 * C42908 +
                    (C24592 - (C24591 + C24590) + C24593) * C48286 * C42909 +
                    ((C21591 * C5880 + C48030 * C5882) * C2464 -
                     (C22673 * C2457 + C22674 * C2463) +
                     (C21591 * C5884 + C48030 * C5886) * C48054) *
                        C48286 * C42910) *
                       C48097 * C48408)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C2355 +
                     (C21591 * C131 + C48030 * C142) * C48443 -
                     (C21591 * C122 + C48030 * C129) * C2356 -
                     (C21591 * C132 + C48030 * C143) * C48436 +
                     (C21591 * C123 + C48030 * C130) * C2357 +
                     (C21591 * C133 + C48030 * C144) * C48423 -
                     (C21591 * C124 + C48030 * C134) * C2358 -
                     (C21591 * C135 + C48030 * C145) * C48402) *
                        C48286 * C42908 +
                    (C29955 + C29956 - C29957 - C29958 + C29959 + C29960 -
                     C29961 - C29962) *
                        C48286 * C42909 +
                    (C26510 * C2355 + C26509 * C48443 - C26508 * C2356 -
                     C26511 * C48436 + C26512 * C2357 + C26513 * C48423 -
                     C43356 * C2358 - C43357 * C48402) *
                        C48286 * C42910) *
                       C48097 * C2353 +
                   ((C23856 - (C23855 + C23854) + C23857 - C23858 - C23859 +
                     C23860 + C23861) *
                        C48286 * C42908 +
                    (C28912 - (C28911 + C28910) + C28913 - C28914 - C28915 +
                     C28916 + C28917) *
                        C48286 * C42909 +
                    (C23532 * C2356 - (C22668 * C48443 + C22667 * C2355) +
                     C23533 * C48436 - C26514 * C2357 - C26515 * C48423 +
                     (C21591 * C2031 + C48030 * C2032) * C2358 +
                     (C21591 * C2033 + C48030 * C2034) * C48402) *
                        C48286 * C42910) *
                       C48097 * C48144)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C2463 +
                      (C21591 * C131 + C48030 * C142) * C2457 -
                      (C21591 * C122 + C48030 * C129) * C2464 -
                      (C21591 * C132 + C48030 * C143) * C48054) *
                         C48286 * C42908 +
                     (C29242 + C29243 - C29244 - C29245) * C48286 * C42909 +
                     C45152 * C42910) *
                        C48438 +
                    ((C29244 - (C29243 + C29242) + C29245) * C48286 * C42908 +
                     (C29248 - (C29249 + C29250) + C29251) * C48286 * C42909 +
                     (C30289 - (C30288 + C30287) + C30290) * C48286 * C42910) *
                        C48427 +
                    (C45152 * C42908 +
                     (C30287 + C30288 - C30289 - C30290) * C48286 * C42909 +
                     (C28287 * C2463 + C28286 * C2457 - C44701 * C2464 -
                      C44702 * C48054) *
                         C48286 * C42910) *
                        C48401) *
                       C2353 +
                   (((C23970 - (C23969 + C23968) + C23971) * C48286 * C42908 +
                     C29263 * C48286 * C42909 + C45149 * C42910) *
                        C48438 +
                    (C29262 * C48286 * C42908 + C29265 * C48286 * C42909 +
                     (C29254 + C29255 - C29256 - C29257) * C48286 * C42910) *
                        C48427 +
                    (C45149 * C42908 +
                     (C29256 - (C29255 + C29254) + C29257) * C48286 * C42909 +
                     ((C21591 * C6796 + C48030 * C6798) * C2464 -
                      (C28284 * C2457 + C28285 * C2463) +
                      (C21591 * C6800 + C48030 * C6802) * C48054) *
                         C48286 * C42910) *
                        C48401) *
                       C48144)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47161 +
             (C21591 * C131 + C48030 * C142) * C48049 -
             (C21591 * C122 + C48030 * C129) * C47157 -
             (C21591 * C132 + C48030 * C143) * C48057 +
             (C21591 * C123 + C48030 * C130) * C47167 +
             (C21591 * C133 + C48030 * C144) * C2723) *
                C48286 * C42908 +
            (C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C48286 *
                C42909 +
            (C30633 + C30632 - C30631 - C30634 + C30635 + C30636) * C48286 *
                C42910) *
               C48367 +
           ((C29608 - (C29607 + C29606) + C29609 - C29610 - C29611) * C48286 *
                C42908 +
            (C30631 - (C30632 + C30633) + C30634 - C30635 - C30636) * C48286 *
                C42909 +
            (C28644 * C47157 - (C28283 * C48049 + C28282 * C47161) +
             C28645 * C48057 - C43142 * C47167 - C43143 * C2723) *
                C48286 * C42910) *
               C48184) *
              C2353 +
          (((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C48286 *
                C42908 +
            C29627 * C48286 * C42909 +
            (C29614 - (C29615 + C29616) + C29617 - C29618 - C29619) * C48286 *
                C42910) *
               C48367 +
           (C29626 * C48286 * C42908 +
            (C29616 + C29615 - C29614 - C29617 + C29618 + C29619) * C48286 *
                C42909 +
            (C23751 * C47161 + C23750 * C48049 - C28502 * C47157 -
             C28503 * C48057 + (C21591 * C2241 + C48030 * C2244) * C47167 +
             (C21591 * C2247 + C48030 * C2250) * C2723) *
                C48286 * C42910) *
               C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C2355 +
                     (C21591 * C131 + C48030 * C142) * C48443 -
                     (C21591 * C122 + C48030 * C129) * C2356 -
                     (C21591 * C132 + C48030 * C143) * C48436 +
                     (C21591 * C123 + C48030 * C130) * C2357 +
                     (C21591 * C133 + C48030 * C144) * C48423 -
                     (C21591 * C124 + C48030 * C134) * C2358 -
                     (C21591 * C135 + C48030 * C145) * C48402) *
                        C48286 * C42908 +
                    (C29955 + C29956 - C29957 - C29958 + C29959 + C29960 -
                     C29961 - C29962) *
                        C48286 * C42909 +
                    (C26510 * C2355 + C26509 * C48443 - C26508 * C2356 -
                     C26511 * C48436 + C26512 * C2357 + C26513 * C48423 -
                     C43356 * C2358 - C43357 * C48402) *
                        C48286 * C42910) *
                       C48097 * C2353 +
                   ((C23856 - (C23855 + C23854) + C23857 - C23858 - C23859 +
                     C23860 + C23861) *
                        C48286 * C42908 +
                    (C28912 - (C28911 + C28910) + C28913 - C28914 - C28915 +
                     C28916 + C28917) *
                        C48286 * C42909 +
                    (C23532 * C2356 - (C22668 * C48443 + C22667 * C2355) +
                     C23533 * C48436 - C26514 * C2357 - C26515 * C48423 +
                     (C21591 * C2031 + C48030 * C2032) * C2358 +
                     (C21591 * C2033 + C48030 * C2034) * C48402) *
                        C48286 * C42910) *
                       C48097 * C48144)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C2463 +
                     (C21591 * C131 + C48030 * C142) * C2457 -
                     (C21591 * C122 + C48030 * C129) * C2464 -
                     (C21591 * C132 + C48030 * C143) * C48054) *
                        C48286 * C42908 +
                    (C29242 + C29243 - C29244 - C29245) * C48286 * C42909 +
                    (C29250 + C29249 - C29248 - C29251) * C48286 * C42910) *
                       C48097 * C48444 +
                   ((C23970 - (C23969 + C23968) + C23971) * C48286 * C42908 +
                    C29263 * C48286 * C42909 + C29264 * C48286 * C42910) *
                       C48097 * C48440 +
                   (C23988 * C48286 * C42908 + C29824 * C48286 * C42909 +
                    (C24148 + C24149 - C24150 - C24151) * C48286 * C42910) *
                       C48097 * C48430 +
                   (C23989 * C48286 * C42908 +
                    (C24592 - (C24591 + C24590) + C24593) * C48286 * C42909 +
                    ((C21591 * C5880 + C48030 * C5882) * C2464 -
                     (C22673 * C2457 + C22674 * C2463) +
                     (C21591 * C5884 + C48030 * C5886) * C48054) *
                        C48286 * C42910) *
                       C48097 * C48408)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C47151 +
                      (C21591 * C131 + C48030 * C142) * C48352 -
                      (C21591 * C122 + C48030 * C129) * C47132 -
                      (C21591 * C132 + C48030 * C143) * C48054) *
                         C48286 * C42908 +
                     (C27730 + C27731 - C27732 - C27733) * C48286 * C42909 +
                     C44594 * C42910) *
                        C3120 +
                    ((C27732 - (C27731 + C27730) + C27733) * C48286 * C42908 +
                     (C28488 - (C28489 + C28490) + C28491) * C48286 * C42909 +
                     C44706 * C42910) *
                        C48184) *
                       C48140 +
                   (((C22784 - (C22783 + C22782) + C22785) * C48286 * C42908 +
                     C27741 * C48286 * C42909 + C44591 * C42910) *
                        C3120 +
                    (C27740 * C48286 * C42908 + C28505 * C48286 * C42909 +
                     (C28494 + C28495 - C28506 - C28507) * C48286 * C42910) *
                        C48184) *
                       C48147 +
                   ((C22808 * C48286 * C42908 + C27742 * C48286 * C42909 +
                     (C23526 + C23527 - C23538 - C23539) * C48286 * C42910) *
                        C3120 +
                    (C22976 * C48286 * C42908 +
                     (C23538 - (C23527 + C23526) + C23539) * C48286 * C42909 +
                     ((C21591 * C7270 + C48030 * C7272) * C47132 -
                      (C23748 * C48352 + C23749 * C47151) +
                      (C21591 * C7274 + C48030 * C7276) * C48054) *
                         C48286 * C42910) *
                        C48184) *
                       C2726)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C1030 +
                      (C21591 * C131 + C48030 * C142) * C48044) *
                         C48286 * C42908 +
                     (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
                        C48180 -
                    (C44438 * C42910 + (C27400 + C27401) * C48286 * C42909 +
                     (C27397 + C27396) * C48286 * C42908) *
                        C48187 +
                    (C43791 * C42908 + (C28288 + C28289) * C48286 * C42909 +
                     C44439 * C42910) *
                        C3628) *
                       C48140 +
                   ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
                     C44805 * C42910) *
                        C48187 -
                    (C43789 * C42910 + C27402 * C48286 * C42909 +
                     (C22508 + C22507) * C48286 * C42908) *
                        C48180 -
                    ((C28290 + C28291) * C48286 * C42910 +
                     C28779 * C48286 * C42909 + C43789 * C42908) *
                        C3628) *
                       C48147 +
                   ((C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
                     C43790 * C42910) *
                        C48180 -
                    ((C23752 + C23753) * C48286 * C42910 +
                     C27405 * C48286 * C42909 + C22666 * C48286 * C42908) *
                        C48187 +
                    (C43790 * C42908 + (C23753 + C23752) * C48286 * C42909 +
                     ((C21591 * C23369 + C48030 * C23370) * C1030 +
                      (C21591 * C23371 + C48030 * C23372) * C48044) *
                         C48286 * C42910) *
                        C3628) *
                       C2726)) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C48286 * C42908 +
            (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
               C3120 -
           (C44438 * C42910 + (C27400 + C27401) * C48286 * C42909 +
            (C27397 + C27396) * C48286 * C42908) *
               C48184) *
              C48444 +
          ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
            C44805 * C42910) *
               C48184 -
           (C43789 * C42910 + C27402 * C48286 * C42909 +
            (C22508 + C22507) * C48286 * C42908) *
               C3120) *
              C48440 +
          ((C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
            C43790 * C42910) *
               C3120 -
           ((C23752 + C23753) * C48286 * C42910 + C27405 * C48286 * C42909 +
            C22666 * C48286 * C42908) *
               C48184) *
              C48430 +
          ((C23079 * C48286 * C42908 + (C22682 + C22681) * C48286 * C42909 +
            ((C21591 * C23735 + C48030 * C23736) * C1030 +
             (C21591 * C23737 + C48030 * C23738) * C48044) *
                C48286 * C42910) *
               C48184 -
           ((C22681 + C22682) * C48286 * C42910 + C27873 * C48286 * C42909 +
            C22522 * C48286 * C42908) *
               C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C48286 * C42908 +
            (C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C48286 *
                C42909 +
            C44255 * C42910) *
               C3120 +
           ((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C48286 *
                C42908 +
            (C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C48286 *
                C42909 +
            (C44245 - (C44246 + C44247) + C44248 - C44249 - C44250) * C48286 *
                C42910) *
               C48184) *
              C2353 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C48286 *
                C42908 +
            C31034 * C48286 * C42909 +
            (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48286 *
                C42910) *
               C3120 +
           (C31033 * C48286 * C42908 +
            (C28034 + C28033 - C28032 - C28035 + C28036 + C28037) * C48286 *
                C42909 +
            (C23751 * C959 + C23750 * C48434 - C28502 * C960 - C28503 * C48421 +
             (C21591 * C2241 + C48030 * C2244) * C961 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48286 * C42910) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C48286 * C42908 +
            (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
               C48445 -
           (C44438 * C42910 + (C27400 + C27401) * C48286 * C42909 +
            (C27397 + C27396) * C48286 * C42908) *
               C48442 +
           (C43791 * C42908 + (C28288 + C28289) * C48286 * C42909 +
            C44439 * C42910) *
               C48433 -
           ((C44442 + C44443) * C48286 * C42910 +
            (C28292 + C28293) * C48286 * C42909 + C44438 * C42908) *
               C48414) *
              C2353 +
          ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
            C44805 * C42910) *
               C48442 -
           (C43789 * C42910 + C27402 * C48286 * C42909 +
            (C22508 + C22507) * C48286 * C42908) *
               C48445 -
           ((C28290 + C28291) * C48286 * C42910 + C28779 * C48286 * C42909 +
            C43789 * C42908) *
               C48433 +
           (C44805 * C42908 + (C28291 + C28290) * C48286 * C42909 +
            ((C21591 * C28265 + C48030 * C28266) * C1030 +
             (C21591 * C28267 + C48030 * C28268) * C48044) *
                C48286 * C42910) *
               C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C47151 +
                      (C21591 * C131 + C48030 * C142) * C48352 -
                      (C21591 * C122 + C48030 * C129) * C47132 -
                      (C21591 * C132 + C48030 * C143) * C48054) *
                         C48286 * C42908 +
                     (C27730 + C27731 - C27732 - C27733) * C48286 * C42909 +
                     C44594 * C42910) *
                        C48180 +
                    ((C27732 - (C27731 + C27730) + C27733) * C48286 * C42908 +
                     (C28488 - (C28489 + C28490) + C28491) * C48286 * C42909 +
                     C44706 * C42910) *
                        C48187 +
                    (C44594 * C42908 +
                     (C28638 + C28639 - C28646 - C28647) * C48286 * C42909 +
                     (C44694 + C44695 - C44704 - C44705) * C48286 * C42910) *
                        C3628) *
                       C2353 +
                   (((C22784 - (C22783 + C22782) + C22785) * C48286 * C42908 +
                     C27741 * C48286 * C42909 + C44591 * C42910) *
                        C48180 +
                    (C27740 * C48286 * C42908 + C28505 * C48286 * C42909 +
                     (C28494 + C28495 - C28506 - C28507) * C48286 * C42910) *
                        C48187 +
                    (C44591 * C42908 +
                     (C28506 - (C28495 + C28494) + C28507) * C48286 * C42909 +
                     ((C21591 * C6796 + C48030 * C6798) * C47132 -
                      (C28284 * C48352 + C28285 * C47151) +
                      (C21591 * C6800 + C48030 * C6802) * C48054) *
                         C48286 * C42910) *
                        C3628) *
                       C48144)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C959 +
             (C21591 * C131 + C48030 * C142) * C48434 -
             (C21591 * C122 + C48030 * C129) * C960 -
             (C21591 * C132 + C48030 * C143) * C48421 +
             (C21591 * C123 + C48030 * C130) * C961 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C48286 * C42908 +
            (C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C48286 *
                C42909 +
            C44255 * C42910) *
               C3120 +
           ((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C48286 *
                C42908 +
            (C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C48286 *
                C42909 +
            (C44245 - (C44246 + C44247) + C44248 - C44249 - C44250) * C48286 *
                C42910) *
               C48184) *
              C2353 +
          (((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C48286 *
                C42908 +
            C31034 * C48286 * C42909 +
            (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48286 *
                C42910) *
               C3120 +
           (C31033 * C48286 * C42908 +
            (C28034 + C28033 - C28032 - C28035 + C28036 + C28037) * C48286 *
                C42909 +
            (C23751 * C959 + C23750 * C48434 - C28502 * C960 - C28503 * C48421 +
             (C21591 * C2241 + C48030 * C2244) * C961 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48286 * C42910) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C48286 * C42908 +
            (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
               C3120 -
           (C44438 * C42910 + (C27400 + C27401) * C48286 * C42909 +
            (C27397 + C27396) * C48286 * C42908) *
               C48184) *
              C48444 +
          ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
            C44805 * C42910) *
               C48184 -
           (C43789 * C42910 + C27402 * C48286 * C42909 +
            (C22508 + C22507) * C48286 * C42908) *
               C3120) *
              C48440 +
          ((C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
            C43790 * C42910) *
               C3120 -
           ((C23752 + C23753) * C48286 * C42910 + C27405 * C48286 * C42909 +
            C22666 * C48286 * C42908) *
               C48184) *
              C48430 +
          ((C23079 * C48286 * C42908 + (C22682 + C22681) * C48286 * C42909 +
            ((C21591 * C23735 + C48030 * C23736) * C1030 +
             (C21591 * C23737 + C48030 * C23738) * C48044) *
                C48286 * C42910) *
               C48184 -
           ((C22681 + C22682) * C48286 * C42910 + C27873 * C48286 * C42909 +
            C22522 * C48286 * C42908) *
               C3120) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C47151 +
                     (C21591 * C131 + C48030 * C142) * C48352 -
                     (C21591 * C122 + C48030 * C129) * C47132 -
                     (C21591 * C132 + C48030 * C143) * C48054) *
                        C48286 * C42908 +
                    (C27730 + C27731 - C27732 - C27733) * C48286 * C42909 +
                    (C28490 + C28489 - C28488 - C28491) * C48286 * C42910) *
                       C48097 * C1301 +
                   ((C22784 - (C22783 + C22782) + C22785) * C48286 * C42908 +
                    C27741 * C48286 * C42909 + C28504 * C48286 * C42910) *
                       C48097 * C1302 +
                   (C22808 * C48286 * C42908 + C27742 * C48286 * C42909 +
                    (C23526 + C23527 - C23538 - C23539) * C48286 * C42910) *
                       C48097 * C1303 +
                   (C22809 * C48286 * C42908 +
                    (C22974 - (C22965 + C22964) + C22975) * C48286 * C42909 +
                    ((C21591 * C5880 + C48030 * C5882) * C47132 -
                     (C22673 * C48352 + C22674 * C47151) +
                     (C21591 * C5884 + C48030 * C5886) * C48054) *
                        C48286 * C42910) *
                       C48097 * C48408)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C565 +
                     (C21591 * C131 + C48030 * C142) * C559 -
                     (C21591 * C122 + C48030 * C129) * C566 -
                     (C21591 * C132 + C48030 * C143) * C560 +
                     (C21591 * C123 + C48030 * C130) * C567 +
                     (C21591 * C133 + C48030 * C144) * C561 -
                     (C21591 * C124 + C48030 * C134) * C568 -
                     (C21591 * C135 + C48030 * C145) * C48402) *
                        C48286 * C42908 +
                    (C26804 + C26805 - C26806 - C26807 + C26808 + C26809 -
                     C26816 - C26817) *
                        C48286 * C42909 +
                    (C26510 * C565 + C26509 * C559 - C26508 * C566 -
                     C26511 * C560 + C26512 * C567 + C26513 * C561 -
                     (C21591 * C429 + C48030 * C447) * C568 -
                     (C21591 * C448 + C48030 * C459) * C48402) *
                        C48286 * C42910) *
                       C48097 * C48366 +
                   ((C21990 - (C21989 + C21988) + C21991 - C21992 - C21993 +
                     C22012 + C22013) *
                        C48286 * C42908 +
                    (C26662 - (C26661 + C26660) + C26663 - C26664 - C26665 +
                     C26672 + C26673) *
                        C48286 * C42909 +
                    (C23532 * C566 - (C22668 * C559 + C22667 * C565) +
                     C23533 * C560 - C26514 * C567 - C26515 * C561 +
                     (C21591 * C2031 + C48030 * C2032) * C568 +
                     (C21591 * C2033 + C48030 * C2034) * C48402) *
                        C48286 * C42910) *
                       C48097 * C48144)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C47151 +
                      (C21591 * C131 + C48030 * C142) * C48352 -
                      (C21591 * C122 + C48030 * C129) * C47132 -
                      (C21591 * C132 + C48030 * C143) * C48054) *
                         C48286 * C42908 +
                     (C27730 + C27731 - C27732 - C27733) * C48286 * C42909 +
                     C44594 * C42910) *
                        C1681 +
                    ((C27732 - (C27731 + C27730) + C27733) * C48286 * C42908 +
                     (C28488 - (C28489 + C28490) + C28491) * C48286 * C42909 +
                     (C28646 - (C28639 + C28638) + C28647) * C48286 * C42910) *
                        C1682 +
                    (C44594 * C42908 +
                     (C28638 + C28639 - C28646 - C28647) * C48286 * C42909 +
                     (C28287 * C47151 + C28286 * C48352 -
                      (C21591 * C1865 + C48030 * C1874) * C47132 -
                      (C21591 * C1877 + C48030 * C1883) * C48054) *
                         C48286 * C42910) *
                        C48401) *
                       C48366 +
                   (((C22784 - (C22783 + C22782) + C22785) * C48286 * C42908 +
                     C27741 * C48286 * C42909 + C44591 * C42910) *
                        C1681 +
                    (C27740 * C48286 * C42908 + C28505 * C48286 * C42909 +
                     (C28494 + C28495 - C28506 - C28507) * C48286 * C42910) *
                        C1682 +
                    (C44591 * C42908 +
                     (C28506 - (C28495 + C28494) + C28507) * C48286 * C42909 +
                     ((C21591 * C6796 + C48030 * C6798) * C47132 -
                      (C28284 * C48352 + C28285 * C47151) +
                      (C21591 * C6800 + C48030 * C6802) * C48054) *
                         C48286 * C42910) *
                        C48401) *
                       C48144)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C48286 * C42908 +
            (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
               C48367 -
           ((C28289 + C28288) * C48286 * C42910 +
            (C27400 + C27401) * C48286 * C42909 +
            (C27397 + C27396) * C48286 * C42908) *
               C48184) *
              C1301 +
          ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
            C28778 * C48286 * C42910) *
               C48184 -
           (C43789 * C42910 + C27402 * C48286 * C42909 +
            (C22508 + C22507) * C48286 * C42908) *
               C48367) *
              C1302 +
          ((C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
            C43790 * C42910) *
               C48367 -
           ((C23752 + C23753) * C48286 * C42910 + C27405 * C48286 * C42909 +
            C22666 * C48286 * C42908) *
               C48184) *
              C1303 +
          ((C23079 * C48286 * C42908 + (C22682 + C22681) * C48286 * C42909 +
            ((C21591 * C23735 + C48030 * C23736) * C1030 +
             (C21591 * C23737 + C48030 * C23738) * C48044) *
                C48286 * C42910) *
               C48184 -
           ((C22681 + C22682) * C48286 * C42910 + C27873 * C48286 * C42909 +
            C22522 * C48286 * C42908) *
               C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C48286 * C42908 +
            (C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C48286 *
                C42909 +
            C43149 * C42910) *
               C48367 +
           ((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C48286 *
                C42908 +
            (C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C48286 *
                C42909 +
            (C43133 - (C43134 + C43135) + C43136 - C43145 - C43146) * C48286 *
                C42910) *
               C48184) *
              C48366 +
          (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C48286 *
                C42908 +
            C27021 * C48286 * C42909 +
            (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48286 *
                C42910) *
               C48367 +
           (C27020 * C48286 * C42908 +
            (C26496 + C26495 - C26494 - C26497 + C26528 + C26529) * C48286 *
                C42909 +
            (C23751 * C265 + C23750 * C259 - C28502 * C266 - C28503 * C260 +
             (C21591 * C2241 + C48030 * C2244) * C267 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48286 * C42910) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C48286 * C42908 +
            (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
               C2133 -
           (C44438 * C42910 + (C27400 + C27401) * C48286 * C42909 +
            (C27397 + C27396) * C48286 * C42908) *
               C2134 +
           (C43791 * C42908 + (C28288 + C28289) * C48286 * C42909 +
            C44439 * C42910) *
               C2135 -
           ((C44442 + C44443) * C48286 * C42910 +
            (C28292 + C28293) * C48286 * C42909 + C44438 * C42908) *
               C48414) *
              C48366 +
          ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
            C44805 * C42910) *
               C2134 -
           (C43789 * C42910 + C27402 * C48286 * C42909 +
            (C22508 + C22507) * C48286 * C42908) *
               C2133 -
           ((C28290 + C28291) * C48286 * C42910 + C28779 * C48286 * C42909 +
            C43789 * C42908) *
               C2135 +
           (C44805 * C42908 + (C28291 + C28290) * C48286 * C42909 +
            ((C21591 * C28265 + C48030 * C28266) * C1030 +
             (C21591 * C28267 + C48030 * C28268) * C48044) *
                C48286 * C42910) *
               C48414) *
              C48144)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C21591 * C121 + C48030 * C128) * C116 +
               (C21591 * C131 + C48030 * C142) * C104 -
               (C21591 * C122 + C48030 * C129) * C117 -
               (C21591 * C132 + C48030 * C143) * C105 +
               (C21591 * C123 + C48030 * C130) * C118 +
               (C21591 * C133 + C48030 * C144) * C106 -
               (C21591 * C124 + C48030 * C134) * C119 -
               (C21591 * C135 + C48030 * C145) * C107 +
               (C21591 * C125 + C48030 * C136) * C120 +
               (C21591 * C137 + C48030 * C146) * C108) *
                  C48286 * C42908 +
              (C26502 * C116 + C26503 * C104 - C26504 * C117 - C26505 * C105 +
               C26506 * C118 + C26507 * C106 - C26814 * C119 - C26815 * C107 +
               (C21591 * C425 + C48030 * C439) * C120 +
               (C21591 * C440 + C48030 * C455) * C108) *
                  C48286 * C42909 +
              (C26510 * C116 + C26509 * C104 - C26508 * C117 - C26511 * C105 +
               C26512 * C118 + C26513 * C106 -
               (C21591 * C429 + C48030 * C447) * C119 -
               (C21591 * C448 + C48030 * C459) * C107 +
               (C21591 * C430 + C48030 * C449) * C120 +
               (C21591 * C450 + C48030 * C460) * C108) *
                  C48286 * C42910) *
             C48097 * C48085 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C21591 * C121 + C48030 * C128) * C265 +
                (C21591 * C131 + C48030 * C142) * C259 -
                (C21591 * C122 + C48030 * C129) * C266 -
                (C21591 * C132 + C48030 * C143) * C260 +
                (C21591 * C123 + C48030 * C130) * C267 +
                (C21591 * C133 + C48030 * C144) * C48392) *
                   C48286 * C42908 +
               (C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C48286 *
                   C42909 +
               (C26524 + C26523 - C26522 - C26525 + C26526 + C26527) * C48286 *
                   C42910) *
                  C48097 * C48437 +
              ((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) *
                   C48286 * C42908 +
               C27021 * C48286 * C42909 +
               (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) *
                   C48286 * C42910) *
                  C48097 * C48425 +
              (C21779 * C48286 * C42908 +
               (C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C48286 *
                   C42909 +
               (C22669 * C265 + C22670 * C259 - C23534 * C266 - C23535 * C260 +
                (C21591 * C1173 + C48030 * C1188) * C267 +
                (C21591 * C1191 + C48030 * C1200) * C48392) *
                   C48286 * C42910) *
                  C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C265 +
            (C21591 * C131 + C48030 * C142) * C259 -
            (C21591 * C122 + C48030 * C129) * C266 -
            (C21591 * C132 + C48030 * C143) * C260 +
            (C21591 * C123 + C48030 * C130) * C267 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C48286 *
               C42909 +
           C43149 * C42910) *
              C48438 +
          ((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C48286 *
               C42908 +
           (C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C48286 *
               C42909 +
           (C43133 - (C43134 + C43135) + C43136 - C43145 - C43146) * C48286 *
               C42910) *
              C48427 +
          (C43149 * C42908 +
           (C43135 + C43134 - C43133 - C43136 + C43145 + C43146) * C48286 *
               C42909 +
           (C28287 * C265 + C28286 * C259 -
            (C21591 * C1865 + C48030 * C1874) * C266 -
            (C21591 * C1877 + C48030 * C1883) * C260 +
            (C21591 * C1866 + C48030 * C1875) * C267 +
            (C21591 * C1878 + C48030 * C1884) * C48392) *
               C48286 * C42910) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C48286 *
               C42909 +
           (C28028 + C28027 - C28026 - C28029 + C28030 + C28031) * C48286 *
               C42910) *
              C48097 * C956 +
          ((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C48286 *
               C42908 +
           C31034 * C48286 * C42909 +
           (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48286 *
               C42910) *
              C48097 * C957 +
          (C22440 * C48286 * C42908 +
           (C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C48286 *
               C42909 +
           (C22669 * C959 + C22670 * C48434 - C23534 * C960 - C23535 * C48421 +
            (C21591 * C1173 + C48030 * C1188) * C961 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C48286 * C42910) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C1030 +
            (C21591 * C131 + C48030 * C142) * C48044) *
               C48286 * C42908 +
           (C27396 + C27397) * C48286 * C42909 +
           (C27401 + C27400) * C48286 * C42910) *
              C48097 * C1025 -
          (C27399 * C48286 * C42910 + C27402 * C48286 * C42909 +
           (C22508 + C22507) * C48286 * C42908) *
              C48097 * C1026 +
          (C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
           C22683 * C48286 * C42910) *
              C48097 * C1027 -
          ((C22681 + C22682) * C48286 * C42910 + C27873 * C48286 * C42909 +
           C22522 * C48286 * C42908) *
              C48097 * C1028 +
          (C22531 * C48286 * C42908 + (C23087 + C23086) * C48286 * C42909 +
           ((C21591 * C22641 + C48030 * C22642) * C1030 +
            (C21591 * C22643 + C48030 * C22644) * C48044) *
               C48286 * C42910) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C48286 * C42908 +
            (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
               C48438 -
           ((C28289 + C28288) * C48286 * C42910 +
            (C27400 + C27401) * C48286 * C42909 +
            (C27397 + C27396) * C48286 * C42908) *
               C48427 +
           (C43791 * C42908 + (C28288 + C28289) * C48286 * C42909 +
            (C28293 + C28292) * C48286 * C42910) *
               C48401) *
              C956 +
          ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
            C28778 * C48286 * C42910) *
               C48427 -
           (C43789 * C42910 + C27402 * C48286 * C42909 +
            (C22508 + C22507) * C48286 * C42908) *
               C48438 -
           ((C28290 + C28291) * C48286 * C42910 + C28779 * C48286 * C42909 +
            C43789 * C42908) *
               C48401) *
              C957 +
          ((C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
            C43790 * C42910) *
               C48438 -
           ((C23752 + C23753) * C48286 * C42910 + C27405 * C48286 * C42909 +
            C22666 * C48286 * C42908) *
               C48427 +
           (C43790 * C42908 + (C23753 + C23752) * C48286 * C42909 +
            ((C21591 * C23369 + C48030 * C23370) * C1030 +
             (C21591 * C23371 + C48030 * C23372) * C48044) *
                C48286 * C42910) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C48286 *
               C42909 +
           C44255 * C42910) *
              C1681 +
          ((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C48286 *
               C42908 +
           (C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C48286 *
               C42909 +
           (C44245 - (C44246 + C44247) + C44248 - C44249 - C44250) * C48286 *
               C42910) *
              C1682 +
          (C44255 * C42908 +
           (C44247 + C44246 - C44245 - C44248 + C44249 + C44250) * C48286 *
               C42909 +
           (C28287 * C959 + C28286 * C48434 -
            (C21591 * C1865 + C48030 * C1874) * C960 -
            (C21591 * C1877 + C48030 * C1883) * C48421 +
            (C21591 * C1866 + C48030 * C1875) * C961 +
            (C21591 * C1878 + C48030 * C1884) * C48392) *
               C48286 * C42910) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C48286 * C42908 +
            (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
               C1681 -
           ((C28289 + C28288) * C48286 * C42910 +
            (C27400 + C27401) * C48286 * C42909 +
            (C27397 + C27396) * C48286 * C42908) *
               C1682 +
           (C43791 * C42908 + (C28288 + C28289) * C48286 * C42909 +
            (C28293 + C28292) * C48286 * C42910) *
               C48401) *
              C48437 +
          ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
            C28778 * C48286 * C42910) *
               C1682 -
           (C43789 * C42910 + C27402 * C48286 * C42909 +
            (C22508 + C22507) * C48286 * C42908) *
               C1681 -
           ((C28290 + C28291) * C48286 * C42910 + C28779 * C48286 * C42909 +
            C43789 * C42908) *
               C48401) *
              C48425 +
          ((C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
            C43790 * C42910) *
               C1681 -
           ((C23752 + C23753) * C48286 * C42910 + C27405 * C48286 * C42909 +
            C22666 * C48286 * C42908) *
               C1682 +
           (C43790 * C42908 + (C23753 + C23752) * C48286 * C42909 +
            ((C21591 * C23369 + C48030 * C23370) * C1030 +
             (C21591 * C23371 + C48030 * C23372) * C48044) *
                C48286 * C42910) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C1030 +
            (C21591 * C131 + C48030 * C142) * C48044) *
               C48286 * C42908 +
           (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
              C1856 -
          (C44438 * C42910 + (C27400 + C27401) * C48286 * C42909 +
           (C27397 + C27396) * C48286 * C42908) *
              C1857 +
          (C43791 * C42908 + (C28288 + C28289) * C48286 * C42909 +
           C44439 * C42910) *
              C1858 -
          ((C44442 + C44443) * C48286 * C42910 +
           (C28292 + C28293) * C48286 * C42909 + C44438 * C42908) *
              C1859 +
          (C44439 * C42908 + (C44443 + C44442) * C48286 * C42909 +
           ((C21591 * C44427 + C48030 * C44428) * C1030 +
            (C21591 * C44429 + C48030 * C44430) * C48044) *
               C48286 * C42910) *
              C1860) *
         C48085) /
            (p * q * std::sqrt(p + q));
    d2ee[213] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C47151 +
                      (C21591 * C131 + C48030 * C142) * C48352 -
                      (C21591 * C122 + C48030 * C129) * C47132 -
                      (C21591 * C132 + C48030 * C143) * C48054) *
                         C48286 * C42908 +
                     (C27730 + C27731 - C27732 - C27733) * C48286 * C42909 +
                     (C28490 + C28489 - C28488 - C28491) * C48286 * C42910) *
                        C48367 +
                    ((C27732 - (C27731 + C27730) + C27733) * C48286 * C42908 +
                     (C28488 - (C28489 + C28490) + C28491) * C48286 * C42909 +
                     (C28646 - (C28639 + C28638) + C28647) * C48286 * C42910) *
                        C48184) *
                       C956 +
                   (((C22784 - (C22783 + C22782) + C22785) * C48286 * C42908 +
                     C27741 * C48286 * C42909 + C28504 * C48286 * C42910) *
                        C48367 +
                    (C27740 * C48286 * C42908 + C28505 * C48286 * C42909 +
                     (C28494 + C28495 - C28506 - C28507) * C48286 * C42910) *
                        C48184) *
                       C957 +
                   ((C22808 * C48286 * C42908 + C27742 * C48286 * C42909 +
                     (C23526 + C23527 - C23538 - C23539) * C48286 * C42910) *
                        C48367 +
                    (C22976 * C48286 * C42908 +
                     (C23538 - (C23527 + C23526) + C23539) * C48286 * C42909 +
                     ((C21591 * C7270 + C48030 * C7272) * C47132 -
                      (C23748 * C48352 + C23749 * C47151) +
                      (C21591 * C7274 + C48030 * C7276) * C48054) *
                         C48286 * C42910) *
                        C48184) *
                       C48398)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C565 +
                     (C21591 * C131 + C48030 * C142) * C559 -
                     (C21591 * C122 + C48030 * C129) * C566 -
                     (C21591 * C132 + C48030 * C143) * C560 +
                     (C21591 * C123 + C48030 * C130) * C567 +
                     (C21591 * C133 + C48030 * C144) * C561 -
                     (C21591 * C124 + C48030 * C134) * C568 -
                     (C21591 * C135 + C48030 * C145) * C48402) *
                        C48286 * C42908 +
                    (C26804 + C26805 - C26806 - C26807 + C26808 + C26809 -
                     C26816 - C26817) *
                        C48286 * C42909 +
                    (C43346 + C43347 - C43348 - C43349 + C43350 + C43351 -
                     C43358 - C43359) *
                        C48286 * C42910) *
                       C48367 +
                   ((C26806 - (C26805 + C26804) + C26807 - C26808 - C26809 +
                     C26816 + C26817) *
                        C48286 * C42908 +
                    (C43348 - (C43347 + C43346) + C43349 - C43350 - C43351 +
                     C43358 + C43359) *
                        C48286 * C42909 +
                    (C28644 * C566 - (C28283 * C559 + C28282 * C565) +
                     C28645 * C560 - C43142 * C567 - C43143 * C561 +
                     (C21591 * C2137 + C48030 * C2138) * C568 +
                     (C21591 * C2139 + C48030 * C2140) * C48402) *
                        C48286 * C42910) *
                       C48184) *
                  C48085) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C47151 +
                     (C21591 * C131 + C48030 * C142) * C48352 -
                     (C21591 * C122 + C48030 * C129) * C47132 -
                     (C21591 * C132 + C48030 * C143) * C48054) *
                        C48286 * C42908 +
                    (C27730 + C27731 - C27732 - C27733) * C48286 * C42909 +
                    C44594 * C42910) *
                       C2133 +
                   ((C27732 - (C27731 + C27730) + C27733) * C48286 * C42908 +
                    (C28488 - (C28489 + C28490) + C28491) * C48286 * C42909 +
                    C44706 * C42910) *
                       C2134 +
                   (C44594 * C42908 +
                    (C28638 + C28639 - C28646 - C28647) * C48286 * C42909 +
                    (C44694 + C44695 - C44704 - C44705) * C48286 * C42910) *
                       C2135 +
                   (C44706 * C42908 +
                    (C44704 - (C44695 + C44694) + C44705) * C48286 * C42909 +
                    ((C21591 * C12370 + C48030 * C12372) * C47132 -
                     (C44440 * C48352 + C44441 * C47151) +
                     (C21591 * C12374 + C48030 * C12376) * C48054) *
                        C48286 * C42910) *
                       C48414) *
                  C48085) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C265 +
            (C21591 * C131 + C48030 * C142) * C259 -
            (C21591 * C122 + C48030 * C129) * C266 -
            (C21591 * C132 + C48030 * C143) * C260 +
            (C21591 * C123 + C48030 * C130) * C267 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C48286 *
               C42909 +
           (C26524 + C26523 - C26522 - C26525 + C26526 + C26527) * C48286 *
               C42910) *
              C48097 * C48437 +
          ((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C48286 *
               C42908 +
           C27021 * C48286 * C42909 +
           (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48286 *
               C42910) *
              C48097 * C48425 +
          (C21779 * C48286 * C42908 +
           (C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C48286 *
               C42909 +
           (C22669 * C265 + C22670 * C259 - C23534 * C266 - C23535 * C260 +
            (C21591 * C1173 + C48030 * C1188) * C267 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C48286 * C42910) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C121 + C48030 * C128) * C116 +
           (C21591 * C131 + C48030 * C142) * C104 -
           (C21591 * C122 + C48030 * C129) * C117 -
           (C21591 * C132 + C48030 * C143) * C105 +
           (C21591 * C123 + C48030 * C130) * C118 +
           (C21591 * C133 + C48030 * C144) * C106 -
           (C21591 * C124 + C48030 * C134) * C119 -
           (C21591 * C135 + C48030 * C145) * C107 +
           (C21591 * C125 + C48030 * C136) * C120 +
           (C21591 * C137 + C48030 * C146) * C108) *
              C48286 * C42908 +
          (C26502 * C116 + C26503 * C104 - C26504 * C117 - C26505 * C105 +
           C26506 * C118 + C26507 * C106 - C26814 * C119 - C26815 * C107 +
           (C21591 * C425 + C48030 * C439) * C120 +
           (C21591 * C440 + C48030 * C455) * C108) *
              C48286 * C42909 +
          (C26510 * C116 + C26509 * C104 - C26508 * C117 - C26511 * C105 +
           C26512 * C118 + C26513 * C106 -
           (C21591 * C429 + C48030 * C447) * C119 -
           (C21591 * C448 + C48030 * C459) * C107 +
           (C21591 * C430 + C48030 * C449) * C120 +
           (C21591 * C450 + C48030 * C460) * C108) *
              C48286 * C42910) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C48286 *
               C42909 +
           (C28028 + C28027 - C28026 - C28029 + C28030 + C28031) * C48286 *
               C42910) *
              C48097 * C956 +
          ((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C48286 *
               C42908 +
           C31034 * C48286 * C42909 +
           (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48286 *
               C42910) *
              C48097 * C957 +
          (C22440 * C48286 * C42908 +
           (C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C48286 *
               C42909 +
           (C22669 * C959 + C22670 * C48434 - C23534 * C960 - C23535 * C48421 +
            (C21591 * C1173 + C48030 * C1188) * C961 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C48286 * C42910) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C1030 +
            (C21591 * C131 + C48030 * C142) * C48044) *
               C48286 * C42908 +
           (C27396 + C27397) * C48286 * C42909 +
           (C27401 + C27400) * C48286 * C42910) *
              C48097 * C1025 -
          (C27399 * C48286 * C42910 + C27402 * C48286 * C42909 +
           (C22508 + C22507) * C48286 * C42908) *
              C48097 * C1026 +
          (C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
           C22683 * C48286 * C42910) *
              C48097 * C1027 -
          ((C22681 + C22682) * C48286 * C42910 + C27873 * C48286 * C42909 +
           C22522 * C48286 * C42908) *
              C48097 * C1028 +
          (C22531 * C48286 * C42908 + (C23087 + C23086) * C48286 * C42909 +
           ((C21591 * C22641 + C48030 * C22642) * C1030 +
            (C21591 * C22643 + C48030 * C22644) * C48044) *
               C48286 * C42910) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C48286 *
               C42909 +
           C44255 * C42910) *
              C1681 +
          ((C28022 - (C28021 + C28020) + C28023 - C28024 - C28025) * C48286 *
               C42908 +
           (C28026 - (C28027 + C28028) + C28029 - C28030 - C28031) * C48286 *
               C42909 +
           (C44245 - (C44246 + C44247) + C44248 - C44249 - C44250) * C48286 *
               C42910) *
              C1682 +
          (C44255 * C42908 +
           (C44247 + C44246 - C44245 - C44248 + C44249 + C44250) * C48286 *
               C42909 +
           (C28287 * C959 + C28286 * C48434 -
            (C21591 * C1865 + C48030 * C1874) * C960 -
            (C21591 * C1877 + C48030 * C1883) * C48421 +
            (C21591 * C1866 + C48030 * C1875) * C961 +
            (C21591 * C1878 + C48030 * C1884) * C48392) *
               C48286 * C42910) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C48286 * C42908 +
            (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
               C1681 -
           ((C28289 + C28288) * C48286 * C42910 +
            (C27400 + C27401) * C48286 * C42909 +
            (C27397 + C27396) * C48286 * C42908) *
               C1682 +
           (C43791 * C42908 + (C28288 + C28289) * C48286 * C42909 +
            (C28293 + C28292) * C48286 * C42910) *
               C48401) *
              C48437 +
          ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
            C28778 * C48286 * C42910) *
               C1682 -
           (C43789 * C42910 + C27402 * C48286 * C42909 +
            (C22508 + C22507) * C48286 * C42908) *
               C1681 -
           ((C28290 + C28291) * C48286 * C42910 + C28779 * C48286 * C42909 +
            C43789 * C42908) *
               C48401) *
              C48425 +
          ((C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
            C43790 * C42910) *
               C1681 -
           ((C23752 + C23753) * C48286 * C42910 + C27405 * C48286 * C42909 +
            C22666 * C48286 * C42908) *
               C1682 +
           (C43790 * C42908 + (C23753 + C23752) * C48286 * C42909 +
            ((C21591 * C23369 + C48030 * C23370) * C1030 +
             (C21591 * C23371 + C48030 * C23372) * C48044) *
                C48286 * C42910) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C47161 +
             (C21591 * C131 + C48030 * C142) * C48049 -
             (C21591 * C122 + C48030 * C129) * C47157 -
             (C21591 * C132 + C48030 * C143) * C48057 +
             (C21591 * C123 + C48030 * C130) * C47167 +
             (C21591 * C133 + C48030 * C144) * C2723) *
                C48286 * C42908 +
            (C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C48286 *
                C42909 +
            (C30633 + C30632 - C30631 - C30634 + C30635 + C30636) * C48286 *
                C42910) *
               C3120 +
           ((C29608 - (C29607 + C29606) + C29609 - C29610 - C29611) * C48286 *
                C42908 +
            (C30631 - (C30632 + C30633) + C30634 - C30635 - C30636) * C48286 *
                C42909 +
            (C28644 * C47157 - (C28283 * C48049 + C28282 * C47161) +
             C28645 * C48057 - C43142 * C47167 - C43143 * C2723) *
                C48286 * C42910) *
               C48184) *
              C48366 +
          (((C24264 - (C24263 + C24262) + C24265 - C24266 - C24267) * C48286 *
                C42908 +
            C29627 * C48286 * C42909 +
            (C29614 - (C29615 + C29616) + C29617 - C29618 - C29619) * C48286 *
                C42910) *
               C3120 +
           (C29626 * C48286 * C42908 +
            (C29616 + C29615 - C29614 - C29617 + C29618 + C29619) * C48286 *
                C42909 +
            (C23751 * C47161 + C23750 * C48049 - C28502 * C47157 -
             C28503 * C48057 + (C21591 * C2241 + C48030 * C2244) * C47167 +
             (C21591 * C2247 + C48030 * C2250) * C2723) *
                C48286 * C42910) *
               C48184) *
              C48144)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C2463 +
                      (C21591 * C131 + C48030 * C142) * C2457 -
                      (C21591 * C122 + C48030 * C129) * C2464 -
                      (C21591 * C132 + C48030 * C143) * C48054) *
                         C48286 * C42908 +
                     (C29242 + C29243 - C29244 - C29245) * C48286 * C42909 +
                     C45152 * C42910) *
                        C48180 +
                    ((C29244 - (C29243 + C29242) + C29245) * C48286 * C42908 +
                     (C29248 - (C29249 + C29250) + C29251) * C48286 * C42909 +
                     C45912 * C42910) *
                        C48187 +
                    (C45152 * C42908 +
                     (C30287 + C30288 - C30289 - C30290) * C48286 * C42909 +
                     (C45906 + C45907 - C45908 - C45909) * C48286 * C42910) *
                        C3628) *
                       C48366 +
                   (((C23970 - (C23969 + C23968) + C23971) * C48286 * C42908 +
                     C29263 * C48286 * C42909 + C45149 * C42910) *
                        C48180 +
                    (C29262 * C48286 * C42908 + C29265 * C48286 * C42909 +
                     (C29254 + C29255 - C29256 - C29257) * C48286 * C42910) *
                        C48187 +
                    (C45149 * C42908 +
                     (C29256 - (C29255 + C29254) + C29257) * C48286 * C42909 +
                     ((C21591 * C6796 + C48030 * C6798) * C2464 -
                      (C28284 * C2457 + C28285 * C2463) +
                      (C21591 * C6800 + C48030 * C6802) * C48054) *
                         C48286 * C42910) *
                        C3628) *
                       C48144)) /
                 (p * q * std::sqrt(p + q));
    d2ee[217] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C2463 +
                      (C21591 * C131 + C48030 * C142) * C2457 -
                      (C21591 * C122 + C48030 * C129) * C2464 -
                      (C21591 * C132 + C48030 * C143) * C48054) *
                         C48286 * C42908 +
                     (C29242 + C29243 - C29244 - C29245) * C48286 * C42909 +
                     C45152 * C42910) *
                        C3120 +
                    ((C29244 - (C29243 + C29242) + C29245) * C48286 * C42908 +
                     (C29248 - (C29249 + C29250) + C29251) * C48286 * C42909 +
                     (C30289 - (C30288 + C30287) + C30290) * C48286 * C42910) *
                        C48184) *
                       C48437 +
                   (((C23970 - (C23969 + C23968) + C23971) * C48286 * C42908 +
                     C29263 * C48286 * C42909 + C45149 * C42910) *
                        C3120 +
                    (C29262 * C48286 * C42908 + C29265 * C48286 * C42909 +
                     (C29254 + C29255 - C29256 - C29257) * C48286 * C42910) *
                        C48184) *
                       C48425 +
                   ((C23988 * C48286 * C42908 + C29824 * C48286 * C42909 +
                     (C24148 + C24149 - C24150 - C24151) * C48286 * C42910) *
                        C3120 +
                    (C24595 * C48286 * C42908 +
                     (C24150 - (C24149 + C24148) + C24151) * C48286 * C42909 +
                     ((C21591 * C7270 + C48030 * C7272) * C2464 -
                      (C23748 * C2457 + C23749 * C2463) +
                      (C21591 * C7274 + C48030 * C7276) * C48054) *
                         C48286 * C42910) *
                        C48184) *
                       C48398)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C2355 +
                     (C21591 * C131 + C48030 * C142) * C48443 -
                     (C21591 * C122 + C48030 * C129) * C2356 -
                     (C21591 * C132 + C48030 * C143) * C48436 +
                     (C21591 * C123 + C48030 * C130) * C2357 +
                     (C21591 * C133 + C48030 * C144) * C48423 -
                     (C21591 * C124 + C48030 * C134) * C2358 -
                     (C21591 * C135 + C48030 * C145) * C48402) *
                        C48286 * C42908 +
                    (C29955 + C29956 - C29957 - C29958 + C29959 + C29960 -
                     C29961 - C29962) *
                        C48286 * C42909 +
                    (C45653 + C45654 - C45655 - C45656 + C45657 + C45658 -
                     C45659 - C45660) *
                        C48286 * C42910) *
                       C3120 +
                   ((C29957 - (C29956 + C29955) + C29958 - C29959 - C29960 +
                     C29961 + C29962) *
                        C48286 * C42908 +
                    (C45655 - (C45654 + C45653) + C45656 - C45657 - C45658 +
                     C45659 + C45660) *
                        C48286 * C42909 +
                    (C28644 * C2356 - (C28283 * C48443 + C28282 * C2355) +
                     C28645 * C48436 - C43142 * C2357 - C43143 * C48423 +
                     (C21591 * C2137 + C48030 * C2138) * C2358 +
                     (C21591 * C2139 + C48030 * C2140) * C48402) *
                        C48286 * C42910) *
                       C48184) *
                  C48085) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C2463 +
                     (C21591 * C131 + C48030 * C142) * C2457 -
                     (C21591 * C122 + C48030 * C129) * C2464 -
                     (C21591 * C132 + C48030 * C143) * C48054) *
                        C48286 * C42908 +
                    (C29242 + C29243 - C29244 - C29245) * C48286 * C42909 +
                    C45152 * C42910) *
                       C48445 +
                   ((C29244 - (C29243 + C29242) + C29245) * C48286 * C42908 +
                    (C29248 - (C29249 + C29250) + C29251) * C48286 * C42909 +
                    C45912 * C42910) *
                       C48442 +
                   (C45152 * C42908 +
                    (C30287 + C30288 - C30289 - C30290) * C48286 * C42909 +
                    (C45906 + C45907 - C45908 - C45909) * C48286 * C42910) *
                       C48433 +
                   (C45912 * C42908 +
                    (C45908 - (C45907 + C45906) + C45909) * C48286 * C42909 +
                    ((C21591 * C12370 + C48030 * C12372) * C2464 -
                     (C44440 * C2457 + C44441 * C2463) +
                     (C21591 * C12374 + C48030 * C12376) * C48054) *
                        C48286 * C42910) *
                       C48414) *
                  C48085) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C47161 +
            (C21591 * C131 + C48030 * C142) * C48049 -
            (C21591 * C122 + C48030 * C129) * C47157 -
            (C21591 * C132 + C48030 * C143) * C48057 +
            (C21591 * C123 + C48030 * C130) * C47167 +
            (C21591 * C133 + C48030 * C144) * C2723) *
               C48286 * C42908 +
           (C29606 + C29607 - C29608 - C29609 + C29610 + C29611) * C48286 *
               C42909 +
           C46180 * C42910) *
              C48180 +
          ((C29608 - (C29607 + C29606) + C29609 - C29610 - C29611) * C48286 *
               C42908 +
           (C30631 - (C30632 + C30633) + C30634 - C30635 - C30636) * C48286 *
               C42909 +
           (C46170 - (C46171 + C46172) + C46173 - C46174 - C46175) * C48286 *
               C42910) *
              C48187 +
          (C46180 * C42908 +
           (C46172 + C46171 - C46170 - C46173 + C46174 + C46175) * C48286 *
               C42909 +
           (C28287 * C47161 + C28286 * C48049 - C44701 * C47157 -
            C44702 * C48057 + (C21591 * C1866 + C48030 * C1875) * C47167 +
            (C21591 * C1878 + C48030 * C1884) * C2723) *
               C48286 * C42910) *
              C3628) *
         C48085) /
        (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C2355 +
                     (C21591 * C131 + C48030 * C142) * C48443 -
                     (C21591 * C122 + C48030 * C129) * C2356 -
                     (C21591 * C132 + C48030 * C143) * C48436 +
                     (C21591 * C123 + C48030 * C130) * C2357 +
                     (C21591 * C133 + C48030 * C144) * C48423 -
                     (C21591 * C124 + C48030 * C134) * C2358 -
                     (C21591 * C135 + C48030 * C145) * C48402) *
                        C48286 * C42908 +
                    (C29955 + C29956 - C29957 - C29958 + C29959 + C29960 -
                     C29961 - C29962) *
                        C48286 * C42909 +
                    (C45653 + C45654 - C45655 - C45656 + C45657 + C45658 -
                     C45659 - C45660) *
                        C48286 * C42910) *
                       C3120 +
                   ((C29957 - (C29956 + C29955) + C29958 - C29959 - C29960 +
                     C29961 + C29962) *
                        C48286 * C42908 +
                    (C45655 - (C45654 + C45653) + C45656 - C45657 - C45658 +
                     C45659 + C45660) *
                        C48286 * C42909 +
                    (C28644 * C2356 - (C28283 * C48443 + C28282 * C2355) +
                     C28645 * C48436 - C43142 * C2357 - C43143 * C48423 +
                     (C21591 * C2137 + C48030 * C2138) * C2358 +
                     (C21591 * C2139 + C48030 * C2140) * C48402) *
                        C48286 * C42910) *
                       C48184) *
                  C48085) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C2463 +
                      (C21591 * C131 + C48030 * C142) * C2457 -
                      (C21591 * C122 + C48030 * C129) * C2464 -
                      (C21591 * C132 + C48030 * C143) * C48054) *
                         C48286 * C42908 +
                     (C29242 + C29243 - C29244 - C29245) * C48286 * C42909 +
                     C45152 * C42910) *
                        C3120 +
                    ((C29244 - (C29243 + C29242) + C29245) * C48286 * C42908 +
                     (C29248 - (C29249 + C29250) + C29251) * C48286 * C42909 +
                     (C30289 - (C30288 + C30287) + C30290) * C48286 * C42910) *
                        C48184) *
                       C48437 +
                   (((C23970 - (C23969 + C23968) + C23971) * C48286 * C42908 +
                     C29263 * C48286 * C42909 + C45149 * C42910) *
                        C3120 +
                    (C29262 * C48286 * C42908 + C29265 * C48286 * C42909 +
                     (C29254 + C29255 - C29256 - C29257) * C48286 * C42910) *
                        C48184) *
                       C48425 +
                   ((C23988 * C48286 * C42908 + C29824 * C48286 * C42909 +
                     (C24148 + C24149 - C24150 - C24151) * C48286 * C42910) *
                        C3120 +
                    (C24595 * C48286 * C42908 +
                     (C24150 - (C24149 + C24148) + C24151) * C48286 * C42909 +
                     ((C21591 * C7270 + C48030 * C7272) * C2464 -
                      (C23748 * C2457 + C23749 * C2463) +
                      (C21591 * C7274 + C48030 * C7276) * C48054) *
                         C48286 * C42910) *
                        C48184) *
                       C48398)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C565 +
                     (C21591 * C131 + C48030 * C142) * C559 -
                     (C21591 * C122 + C48030 * C129) * C566 -
                     (C21591 * C132 + C48030 * C143) * C560 +
                     (C21591 * C123 + C48030 * C130) * C567 +
                     (C21591 * C133 + C48030 * C144) * C561 -
                     (C21591 * C124 + C48030 * C134) * C568 -
                     (C21591 * C135 + C48030 * C145) * C48402) *
                        C48286 * C42908 +
                    (C26804 + C26805 - C26806 - C26807 + C26808 + C26809 -
                     C26816 - C26817) *
                        C48286 * C42909 +
                    (C26510 * C565 + C26509 * C559 - C26508 * C566 -
                     C26511 * C560 + C26512 * C567 + C26513 * C561 -
                     (C21591 * C429 + C48030 * C447) * C568 -
                     (C21591 * C448 + C48030 * C459) * C48402) *
                        C48286 * C42910) *
                       C48097 * C48366 +
                   ((C21990 - (C21989 + C21988) + C21991 - C21992 - C21993 +
                     C22012 + C22013) *
                        C48286 * C42908 +
                    (C26662 - (C26661 + C26660) + C26663 - C26664 - C26665 +
                     C26672 + C26673) *
                        C48286 * C42909 +
                    (C23532 * C566 - (C22668 * C559 + C22667 * C565) +
                     C23533 * C560 - C26514 * C567 - C26515 * C561 +
                     (C21591 * C2031 + C48030 * C2032) * C568 +
                     (C21591 * C2033 + C48030 * C2034) * C48402) *
                        C48286 * C42910) *
                       C48097 * C48144)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C47151 +
                     (C21591 * C131 + C48030 * C142) * C48352 -
                     (C21591 * C122 + C48030 * C129) * C47132 -
                     (C21591 * C132 + C48030 * C143) * C48054) *
                        C48286 * C42908 +
                    (C27730 + C27731 - C27732 - C27733) * C48286 * C42909 +
                    (C28490 + C28489 - C28488 - C28491) * C48286 * C42910) *
                       C48097 * C1301 +
                   ((C22784 - (C22783 + C22782) + C22785) * C48286 * C42908 +
                    C27741 * C48286 * C42909 + C28504 * C48286 * C42910) *
                       C48097 * C1302 +
                   (C22808 * C48286 * C42908 + C27742 * C48286 * C42909 +
                    (C23526 + C23527 - C23538 - C23539) * C48286 * C42910) *
                       C48097 * C1303 +
                   (C22809 * C48286 * C42908 +
                    (C22974 - (C22965 + C22964) + C22975) * C48286 * C42909 +
                    ((C21591 * C5880 + C48030 * C5882) * C47132 -
                     (C22673 * C48352 + C22674 * C47151) +
                     (C21591 * C5884 + C48030 * C5886) * C48054) *
                        C48286 * C42910) *
                       C48097 * C48408)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C265 +
             (C21591 * C131 + C48030 * C142) * C259 -
             (C21591 * C122 + C48030 * C129) * C266 -
             (C21591 * C132 + C48030 * C143) * C260 +
             (C21591 * C123 + C48030 * C130) * C267 +
             (C21591 * C133 + C48030 * C144) * C48392) *
                C48286 * C42908 +
            (C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C48286 *
                C42909 +
            C43149 * C42910) *
               C48367 +
           ((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C48286 *
                C42908 +
            (C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C48286 *
                C42909 +
            (C43133 - (C43134 + C43135) + C43136 - C43145 - C43146) * C48286 *
                C42910) *
               C48184) *
              C48366 +
          (((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C48286 *
                C42908 +
            C27021 * C48286 * C42909 +
            (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48286 *
                C42910) *
               C48367 +
           (C27020 * C48286 * C42908 +
            (C26496 + C26495 - C26494 - C26497 + C26528 + C26529) * C48286 *
                C42909 +
            (C23751 * C265 + C23750 * C259 - C28502 * C266 - C28503 * C260 +
             (C21591 * C2241 + C48030 * C2244) * C267 +
             (C21591 * C2247 + C48030 * C2250) * C48392) *
                C48286 * C42910) *
               C48184) *
              C48144)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C48286 * C42908 +
            (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
               C48367 -
           ((C28289 + C28288) * C48286 * C42910 +
            (C27400 + C27401) * C48286 * C42909 +
            (C27397 + C27396) * C48286 * C42908) *
               C48184) *
              C1301 +
          ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
            C28778 * C48286 * C42910) *
               C48184 -
           (C43789 * C42910 + C27402 * C48286 * C42909 +
            (C22508 + C22507) * C48286 * C42908) *
               C48367) *
              C1302 +
          ((C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
            C43790 * C42910) *
               C48367 -
           ((C23752 + C23753) * C48286 * C42910 + C27405 * C48286 * C42909 +
            C22666 * C48286 * C42908) *
               C48184) *
              C1303 +
          ((C23079 * C48286 * C42908 + (C22682 + C22681) * C48286 * C42909 +
            ((C21591 * C23735 + C48030 * C23736) * C1030 +
             (C21591 * C23737 + C48030 * C23738) * C48044) *
                C48286 * C42910) *
               C48184 -
           ((C22681 + C22682) * C48286 * C42910 + C27873 * C48286 * C42909 +
            C22522 * C48286 * C42908) *
               C48367) *
              C48408)) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C265 +
            (C21591 * C131 + C48030 * C142) * C259 -
            (C21591 * C122 + C48030 * C129) * C266 -
            (C21591 * C132 + C48030 * C143) * C260 +
            (C21591 * C123 + C48030 * C130) * C267 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C48286 *
               C42909 +
           (C26524 + C26523 - C26522 - C26525 + C26526 + C26527) * C48286 *
               C42910) *
              C48097 * C48437 +
          ((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C48286 *
               C42908 +
           C27021 * C48286 * C42909 +
           (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48286 *
               C42910) *
              C48097 * C48425 +
          (C21779 * C48286 * C42908 +
           (C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C48286 *
               C42909 +
           (C22669 * C265 + C22670 * C259 - C23534 * C266 - C23535 * C260 +
            (C21591 * C1173 + C48030 * C1188) * C267 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C48286 * C42910) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C121 + C48030 * C128) * C116 +
           (C21591 * C131 + C48030 * C142) * C104 -
           (C21591 * C122 + C48030 * C129) * C117 -
           (C21591 * C132 + C48030 * C143) * C105 +
           (C21591 * C123 + C48030 * C130) * C118 +
           (C21591 * C133 + C48030 * C144) * C106 -
           (C21591 * C124 + C48030 * C134) * C119 -
           (C21591 * C135 + C48030 * C145) * C107 +
           (C21591 * C125 + C48030 * C136) * C120 +
           (C21591 * C137 + C48030 * C146) * C108) *
              C48286 * C42908 +
          (C26502 * C116 + C26503 * C104 - C26504 * C117 - C26505 * C105 +
           C26506 * C118 + C26507 * C106 - C26814 * C119 - C26815 * C107 +
           (C21591 * C425 + C48030 * C439) * C120 +
           (C21591 * C440 + C48030 * C455) * C108) *
              C48286 * C42909 +
          (C26510 * C116 + C26509 * C104 - C26508 * C117 - C26511 * C105 +
           C26512 * C118 + C26513 * C106 -
           (C21591 * C429 + C48030 * C447) * C119 -
           (C21591 * C448 + C48030 * C459) * C107 +
           (C21591 * C430 + C48030 * C449) * C120 +
           (C21591 * C450 + C48030 * C460) * C108) *
              C48286 * C42910) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C265 +
            (C21591 * C131 + C48030 * C142) * C259 -
            (C21591 * C122 + C48030 * C129) * C266 -
            (C21591 * C132 + C48030 * C143) * C260 +
            (C21591 * C123 + C48030 * C130) * C267 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C48286 *
               C42909 +
           C43149 * C42910) *
              C48438 +
          ((C26518 - (C26517 + C26516) + C26519 - C26520 - C26521) * C48286 *
               C42908 +
           (C26522 - (C26523 + C26524) + C26525 - C26526 - C26527) * C48286 *
               C42909 +
           (C43133 - (C43134 + C43135) + C43136 - C43145 - C43146) * C48286 *
               C42910) *
              C48427 +
          (C43149 * C42908 +
           (C43135 + C43134 - C43133 - C43136 + C43145 + C43146) * C48286 *
               C42909 +
           (C28287 * C265 + C28286 * C259 -
            (C21591 * C1865 + C48030 * C1874) * C266 -
            (C21591 * C1877 + C48030 * C1883) * C260 +
            (C21591 * C1866 + C48030 * C1875) * C267 +
            (C21591 * C1878 + C48030 * C1884) * C48392) *
               C48286 * C42910) *
              C48401) *
         C48085) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C48286 *
               C42909 +
           (C28028 + C28027 - C28026 - C28029 + C28030 + C28031) * C48286 *
               C42910) *
              C48097 * C956 +
          ((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C48286 *
               C42908 +
           C31034 * C48286 * C42909 +
           (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48286 *
               C42910) *
              C48097 * C957 +
          (C22440 * C48286 * C42908 +
           (C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C48286 *
               C42909 +
           (C22669 * C959 + C22670 * C48434 - C23534 * C960 - C23535 * C48421 +
            (C21591 * C1173 + C48030 * C1188) * C961 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C48286 * C42910) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C1030 +
            (C21591 * C131 + C48030 * C142) * C48044) *
               C48286 * C42908 +
           (C27396 + C27397) * C48286 * C42909 +
           (C27401 + C27400) * C48286 * C42910) *
              C48097 * C1025 -
          (C27399 * C48286 * C42910 + C27402 * C48286 * C42909 +
           (C22508 + C22507) * C48286 * C42908) *
              C48097 * C1026 +
          (C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
           C22683 * C48286 * C42910) *
              C48097 * C1027 -
          ((C22681 + C22682) * C48286 * C42910 + C27873 * C48286 * C42909 +
           C22522 * C48286 * C42908) *
              C48097 * C1028 +
          (C22531 * C48286 * C42908 + (C23087 + C23086) * C48286 * C42909 +
           ((C21591 * C22641 + C48030 * C22642) * C1030 +
            (C21591 * C22643 + C48030 * C22644) * C48044) *
               C48286 * C42910) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C121 + C48030 * C128) * C1030 +
             (C21591 * C131 + C48030 * C142) * C48044) *
                C48286 * C42908 +
            (C27396 + C27397) * C48286 * C42909 + C43791 * C42910) *
               C48438 -
           ((C28289 + C28288) * C48286 * C42910 +
            (C27400 + C27401) * C48286 * C42909 +
            (C27397 + C27396) * C48286 * C42908) *
               C48427 +
           (C43791 * C42908 + (C28288 + C28289) * C48286 * C42909 +
            (C28293 + C28292) * C48286 * C42910) *
               C48401) *
              C956 +
          ((C27398 * C48286 * C42908 + C27403 * C48286 * C42909 +
            C28778 * C48286 * C42910) *
               C48427 -
           (C43789 * C42910 + C27402 * C48286 * C42909 +
            (C22508 + C22507) * C48286 * C42908) *
               C48438 -
           ((C28290 + C28291) * C48286 * C42910 + C28779 * C48286 * C42909 +
            C43789 * C42908) *
               C48401) *
              C957 +
          ((C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
            C43790 * C42910) *
               C48438 -
           ((C23752 + C23753) * C48286 * C42910 + C27405 * C48286 * C42909 +
            C22666 * C48286 * C42908) *
               C48427 +
           (C43790 * C42908 + (C23753 + C23752) * C48286 * C42909 +
            ((C21591 * C23369 + C48030 * C23370) * C1030 +
             (C21591 * C23371 + C48030 * C23372) * C48044) *
                C48286 * C42910) *
               C48401) *
              C48398)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C121 + C48030 * C128) * C565 +
                     (C21591 * C131 + C48030 * C142) * C559 -
                     (C21591 * C122 + C48030 * C129) * C566 -
                     (C21591 * C132 + C48030 * C143) * C560 +
                     (C21591 * C123 + C48030 * C130) * C567 +
                     (C21591 * C133 + C48030 * C144) * C561 -
                     (C21591 * C124 + C48030 * C134) * C568 -
                     (C21591 * C135 + C48030 * C145) * C48402) *
                        C48286 * C42908 +
                    (C26804 + C26805 - C26806 - C26807 + C26808 + C26809 -
                     C26816 - C26817) *
                        C48286 * C42909 +
                    (C43346 + C43347 - C43348 - C43349 + C43350 + C43351 -
                     C43358 - C43359) *
                        C48286 * C42910) *
                       C48367 +
                   ((C26806 - (C26805 + C26804) + C26807 - C26808 - C26809 +
                     C26816 + C26817) *
                        C48286 * C42908 +
                    (C43348 - (C43347 + C43346) + C43349 - C43350 - C43351 +
                     C43358 + C43359) *
                        C48286 * C42909 +
                    (C28644 * C566 - (C28283 * C559 + C28282 * C565) +
                     C28645 * C560 - C43142 * C567 - C43143 * C561 +
                     (C21591 * C2137 + C48030 * C2138) * C568 +
                     (C21591 * C2139 + C48030 * C2140) * C48402) *
                        C48286 * C42910) *
                       C48184) *
                  C48085) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C121 + C48030 * C128) * C47151 +
                      (C21591 * C131 + C48030 * C142) * C48352 -
                      (C21591 * C122 + C48030 * C129) * C47132 -
                      (C21591 * C132 + C48030 * C143) * C48054) *
                         C48286 * C42908 +
                     (C27730 + C27731 - C27732 - C27733) * C48286 * C42909 +
                     (C28490 + C28489 - C28488 - C28491) * C48286 * C42910) *
                        C48367 +
                    ((C27732 - (C27731 + C27730) + C27733) * C48286 * C42908 +
                     (C28488 - (C28489 + C28490) + C28491) * C48286 * C42909 +
                     (C28646 - (C28639 + C28638) + C28647) * C48286 * C42910) *
                        C48184) *
                       C956 +
                   (((C22784 - (C22783 + C22782) + C22785) * C48286 * C42908 +
                     C27741 * C48286 * C42909 + C28504 * C48286 * C42910) *
                        C48367 +
                    (C27740 * C48286 * C42908 + C28505 * C48286 * C42909 +
                     (C28494 + C28495 - C28506 - C28507) * C48286 * C42910) *
                        C48184) *
                       C957 +
                   ((C22808 * C48286 * C42908 + C27742 * C48286 * C42909 +
                     (C23526 + C23527 - C23538 - C23539) * C48286 * C42910) *
                        C48367 +
                    (C22976 * C48286 * C42908 +
                     (C23538 - (C23527 + C23526) + C23539) * C48286 * C42909 +
                     ((C21591 * C7270 + C48030 * C7272) * C47132 -
                      (C23748 * C48352 + C23749 * C47151) +
                      (C21591 * C7274 + C48030 * C7276) * C48054) *
                         C48286 * C42910) *
                        C48184) *
                       C48398)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C121 + C48030 * C128) * C116 +
           (C21591 * C131 + C48030 * C142) * C104 -
           (C21591 * C122 + C48030 * C129) * C117 -
           (C21591 * C132 + C48030 * C143) * C105 +
           (C21591 * C123 + C48030 * C130) * C118 +
           (C21591 * C133 + C48030 * C144) * C106 -
           (C21591 * C124 + C48030 * C134) * C119 -
           (C21591 * C135 + C48030 * C145) * C107 +
           (C21591 * C125 + C48030 * C136) * C120 +
           (C21591 * C137 + C48030 * C146) * C108) *
              C48286 * C42908 +
          (C26502 * C116 + C26503 * C104 - C26504 * C117 - C26505 * C105 +
           C26506 * C118 + C26507 * C106 - C26814 * C119 - C26815 * C107 +
           (C21591 * C425 + C48030 * C439) * C120 +
           (C21591 * C440 + C48030 * C455) * C108) *
              C48286 * C42909 +
          (C26510 * C116 + C26509 * C104 - C26508 * C117 - C26511 * C105 +
           C26512 * C118 + C26513 * C106 -
           (C21591 * C429 + C48030 * C447) * C119 -
           (C21591 * C448 + C48030 * C459) * C107 +
           (C21591 * C430 + C48030 * C449) * C120 +
           (C21591 * C450 + C48030 * C460) * C108) *
              C48286 * C42910) *
         C48097 * C48085) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C265 +
            (C21591 * C131 + C48030 * C142) * C259 -
            (C21591 * C122 + C48030 * C129) * C266 -
            (C21591 * C132 + C48030 * C143) * C260 +
            (C21591 * C123 + C48030 * C130) * C267 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C26516 + C26517 - C26518 - C26519 + C26520 + C26521) * C48286 *
               C42909 +
           (C26524 + C26523 - C26522 - C26525 + C26526 + C26527) * C48286 *
               C42910) *
              C48097 * C48437 +
          ((C21759 - (C21758 + C21757) + C21760 - C21761 - C21762) * C48286 *
               C42908 +
           C27021 * C48286 * C42909 +
           (C26494 - (C26495 + C26496) + C26497 - C26528 - C26529) * C48286 *
               C42910) *
              C48097 * C48425 +
          (C21779 * C48286 * C42908 +
           (C22304 + C22303 - C22302 - C22305 + C22306 + C22307) * C48286 *
               C42909 +
           (C22669 * C265 + C22670 * C259 - C23534 * C266 - C23535 * C260 +
            (C21591 * C1173 + C48030 * C1188) * C267 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C48286 * C42910) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C959 +
            (C21591 * C131 + C48030 * C142) * C48434 -
            (C21591 * C122 + C48030 * C129) * C960 -
            (C21591 * C132 + C48030 * C143) * C48421 +
            (C21591 * C123 + C48030 * C130) * C961 +
            (C21591 * C133 + C48030 * C144) * C48392) *
               C48286 * C42908 +
           (C28020 + C28021 - C28022 - C28023 + C28024 + C28025) * C48286 *
               C42909 +
           (C28028 + C28027 - C28026 - C28029 + C28030 + C28031) * C48286 *
               C42910) *
              C48097 * C956 +
          ((C22420 - (C22419 + C22418) + C22421 - C22422 - C22423) * C48286 *
               C42908 +
           C31034 * C48286 * C42909 +
           (C28032 - (C28033 + C28034) + C28035 - C28036 - C28037) * C48286 *
               C42910) *
              C48097 * C957 +
          (C22440 * C48286 * C42908 +
           (C25494 + C25493 - C25492 - C25495 + C25496 + C25497) * C48286 *
               C42909 +
           (C22669 * C959 + C22670 * C48434 - C23534 * C960 - C23535 * C48421 +
            (C21591 * C1173 + C48030 * C1188) * C961 +
            (C21591 * C1191 + C48030 * C1200) * C48392) *
               C48286 * C42910) *
              C48097 * C48398)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C121 + C48030 * C128) * C1030 +
            (C21591 * C131 + C48030 * C142) * C48044) *
               C48286 * C42908 +
           (C27396 + C27397) * C48286 * C42909 +
           (C27401 + C27400) * C48286 * C42910) *
              C48097 * C1025 -
          (C27399 * C48286 * C42910 + C27402 * C48286 * C42909 +
           (C22508 + C22507) * C48286 * C42908) *
              C48097 * C1026 +
          (C22521 * C48286 * C42908 + C27404 * C48286 * C42909 +
           C22683 * C48286 * C42910) *
              C48097 * C1027 -
          ((C22681 + C22682) * C48286 * C42910 + C27873 * C48286 * C42909 +
           C22522 * C48286 * C42908) *
              C48097 * C1028 +
          (C22531 * C48286 * C42908 + (C23087 + C23086) * C48286 * C42909 +
           ((C21591 * C22641 + C48030 * C22642) * C1030 +
            (C21591 * C22643 + C48030 * C22644) * C48044) *
               C48286 * C42910) *
              C48097 * C1029)) /
            (p * q * std::sqrt(p + q));
}
