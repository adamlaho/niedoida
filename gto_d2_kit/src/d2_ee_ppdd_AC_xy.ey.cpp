/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AC_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_13_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46947 = ae * be;
    const double C46946 = ae + be;
    const double C46945 = 0 * be;
    const double C46944 = xA - xB;
    const double C46968 = ce * de;
    const double C46967 = ce + de;
    const double C46966 = 0 * de;
    const double C46965 = yC - yD;
    const double C47006 = 0 * ce;
    const double C47001 = 0 * de;
    const double C47000 = 0 * de;
    const double C47051 = 0 * de;
    const double C47103 = yP - yQ;
    const double C47102 = p + q;
    const double C47101 = p * q;
    const double C47100 = xP - xQ;
    const double C47108 = bs[3];
    const double C47119 = bs[4];
    const double C47127 = bs[5];
    const double C47146 = bs[6];
    const double C47178 = bs[7];
    const double C47349 = zP - zQ;
    const double C47467 = bs[2];
    const double C117 = bs[0];
    const double C47853 = xC - xD;
    const double C47901 = zC - zD;
    const double C48071 = yA - yB;
    const double C48076 = zA - zB;
    const double C46948 = std::pow(C46946, 2);
    const double C47844 = 2 * C46946;
    const double C46949 = C46947 * C46944;
    const double C47835 = std::pow(C46944, 2);
    const double C48157 = C46944 * be;
    const double C48156 = C46944 * ae;
    const double C46969 = std::pow(C46967, 2);
    const double C46984 = 2 * C46967;
    const double C47111 = C46967 * C46946;
    const double C138 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (xP - xQ) * (yP - yQ) * ae * ce) /
                         C46967) /
                        C46946;
    const double C47002 = C46966 / C46967;
    const double C46970 = C46968 * C46965;
    const double C47003 = C46965 * C46966;
    const double C47884 = std::pow(C46965, 2);
    const double C47943 = C46965 * de;
    const double C47941 = C46965 * ce;
    const double C47013 = C47006 / C46967;
    const double C47008 = C46965 * C47001;
    const double C47052 = C47051 / C46967;
    const double C47109 = C47103 * ce;
    const double C47310 = std::pow(C47103, 2);
    const double C47104 = 2 * C47101;
    const double C47110 = C47100 * C47103;
    const double C47129 = std::pow(C47100, 2);
    const double C47213 = C47100 * ae;
    const double C47353 = std::pow(C47349, 2);
    const double C47856 = C47853 * de;
    const double C47855 = C47853 * ce;
    const double C47854 = std::pow(C47853, 2);
    const double C47902 = std::pow(C47901, 2);
    const double C47985 = C47901 * de;
    const double C47983 = C47901 * ce;
    const double C48091 = std::pow(C48071, 2);
    const double C48191 = C48071 * be;
    const double C48189 = C48071 * ae;
    const double C48106 = std::pow(C48076, 2);
    const double C48192 = C48076 * be;
    const double C48190 = C48076 * ae;
    const double C46950 = 2 * C46948;
    const double C48158 = std::pow(C47844, -1);
    const double C47836 = C47835 * C46947;
    const double C46971 = 2 * C46969;
    const double C48169 = 4 * C46969;
    const double C47868 = std::pow(C46984, -1);
    const double C48170 = C46969 * C46984;
    const double C48166 = std::pow(C46984, -2);
    const double C47011 = C47003 / C46967;
    const double C47885 = C47884 * C46968;
    const double C48171 = std::pow(C47941, 2);
    const double C47014 = C47008 / C46967;
    const double C47113 = C47108 * C47109;
    const double C47121 = C47119 * C47109;
    const double C47132 = C47127 * C47109;
    const double C47152 = C47146 * C47109;
    const double C47187 = C47178 * C47109;
    const double C47105 = C47104 / C47102;
    const double C127 = (bs[1] * C47109 * C47104) / (C47102 * C46967);
    const double C118 = -(C47100 * bs[1] * C47104) / C47102;
    const double C266 = -(C47103 * bs[1] * C47104) / C47102;
    const double C420 = -(C47349 * bs[1] * C47104) / C47102;
    const double C47114 = C47110 * ae;
    const double C47218 = C47108 * C47213;
    const double C47221 = C47119 * C47213;
    const double C47227 = C47127 * C47213;
    const double C47241 = C47146 * C47213;
    const double C47262 = C47178 * C47213;
    const double C124 = (-(bs[1] * C47213 * C47104) / C47102) / C46946;
    const double C48159 = std::pow(C47855, 2);
    const double C47857 = C47854 * C46968;
    const double C47903 = C47902 * C46968;
    const double C48173 = std::pow(C47983, 2);
    const double C48092 = C48091 * C46947;
    const double C48107 = C48106 * C46947;
    const double C47837 = C47836 / C46946;
    const double C47005 = C46966 / C46971;
    const double C47010 = C47001 / C46971;
    const double C47009 = C47000 / C46971;
    const double C48203 = C46967 * C48169;
    const double C48204 = 4 * C48170;
    const double C47015 = 0 - C47011;
    const double C47886 = C47885 / C46967;
    const double C47018 = 0 - C47014;
    const double C47107 = -C47105;
    const double C47118 = std::pow(C47105, 4);
    const double C47145 = std::pow(C47105, 6);
    const double C139 =
        (-(C47100 * std::pow(-C47105, 3) * bs[3] * C47100 * C47103 * ae * ce) /
         C46967) /
            C46946 -
        (ae * std::pow(C47105, 2) * bs[2] * C47103 * ce) / (C46967 * C46946);
    const double C47466 = std::pow(C47105, 2);
    const double C125 =
        (C47100 * std::pow(C47105, 2) * bs[2] * C47213) / C46946 -
        (ae * bs[1] * C47104) / (C47102 * C46946);
    const double C47116 = C47114 * ce;
    const double C47858 = C47857 / C46967;
    const double C47904 = C47903 / C46967;
    const double C48093 = C48092 / C46946;
    const double C48108 = C48107 / C46946;
    const double C47838 = -C47837;
    const double C47019 = C47015 * ce;
    const double C47887 = -C47886;
    const double C47022 = C47018 * ce;
    const double C47112 = std::pow(C47107, 3);
    const double C47126 = std::pow(C47107, 5);
    const double C47177 = std::pow(C47107, 7);
    const double C47123 = C47118 * C47121;
    const double C47223 = C47118 * C47221;
    const double C47228 = C47119 * C47118;
    const double C47156 = C47145 * C47152;
    const double C47243 = C47145 * C47241;
    const double C47263 = C47146 * C47145;
    const double C47468 = C47467 * C47466;
    const double C128 = -(C47100 * C47466 * C47467 * C47109) / C46967;
    const double C276 = (C47103 * C47466 * C47467 * C47213) / C46946;
    const double C279 = (ce * bs[1] * C47104) / (C47102 * C46967) -
                        (C47103 * C47466 * C47467 * C47109) / C46967;
    const double C433 = -(C47349 * C47466 * C47467 * C47109) / C46967;
    const double C434 = (C47349 * C47466 * C47467 * C47213) / C46946;
    const double C47120 = C47119 * C47116;
    const double C47130 = C47127 * C47116;
    const double C47149 = C47146 * C47116;
    const double C47183 = C47178 * C47116;
    const double C47859 = -C47858;
    const double C47905 = -C47904;
    const double C48094 = -C48093;
    const double C48109 = -C48108;
    const double C47839 = std::exp(C47838);
    const double C47023 = C47019 / C46967;
    const double C47888 = std::exp(C47887);
    const double C47026 = C47022 / C46967;
    const double C47115 = C47112 * C47113;
    const double C47214 = C47108 * C47112;
    const double C47219 = C47112 * C47218;
    const double C296 =
        (-(C47103 * C47112 * C47108 * C47116) / C46967) / C46946 -
        (std::pow(C47105, 2) * bs[2] * C47213 * ce) / C47111;
    const double C450 =
        (-((zP - zQ) * C47112 * C47108 * C47116) / C46967) / C46946;
    const double C47134 = C47126 * C47132;
    const double C47229 = C47126 * C47227;
    const double C47242 = C47127 * C47126;
    const double C47192 = C47177 * C47187;
    const double C47265 = C47177 * C47262;
    const double C47128 = ae * C47123;
    const double C47125 = C47100 * C47123;
    const double C47553 = C47103 * C47123;
    const double C47224 = C47100 * C47223;
    const double C47309 = C47223 * ce;
    const double C47307 = C47103 * C47223;
    const double C47231 = C47100 * C47228;
    const double C47230 = C47228 * ae;
    const double C47476 = C47228 * C47129;
    const double C47556 = C47228 * C47310;
    const double C47628 = C47103 * C47228;
    const double C47627 = C47228 * ce;
    const double C47813 = C47228 * C47353;
    const double C47827 = C47349 * C47228;
    const double C47159 = C47156 * C47129;
    const double C47179 = ae * C47156;
    const double C47175 = C47100 * C47156;
    const double C47684 = C47103 * C47156;
    const double C47730 = C47156 * C47353;
    const double C47247 = C47100 * C47243;
    const double C47365 = C47243 * C47310;
    const double C47420 = C47243 * ce;
    const double C47418 = C47103 * C47243;
    const double C47723 = C47243 * C47353;
    const double C47268 = C47263 * C47129;
    const double C47267 = C47100 * C47263;
    const double C47266 = C47263 * ae;
    const double C47688 = C47263 * C47310;
    const double C119 = C47468 * C47129 - (bs[1] * C47104) / C47102;
    const double C265 = C47103 * C47100 * C47468;
    const double C267 = C47468 * C47310 - (bs[1] * C47104) / C47102;
    const double C417 = C47349 * C47100 * C47468;
    const double C422 = C47468 * C47353 - (bs[1] * C47104) / C47102;
    const double C817 = C47349 * C47103 * C47468;
    const double C47122 = C47118 * C47120;
    const double C47133 = C47126 * C47130;
    const double C47154 = C47145 * C47149;
    const double C47190 = C47177 * C47183;
    const double C47860 = std::exp(C47859);
    const double C47906 = std::exp(C47905);
    const double C48095 = std::exp(C48094);
    const double C48110 = std::exp(C48109);
    const double C21704 = C47839 * C276;
    const double C26210 = C47839 * C434;
    const double C46951 = C46949 * C47839;
    const double C48194 = C48158 * C47839;
    const double C48193 = C47839 * C48156;
    const double C4601 = -(C47839 * C48157) / C46946;
    const double C47027 = C47023 - C47010;
    const double C46972 = C46970 * C47888;
    const double C116 = -(2 * ce * de * (yC - yD) * C47888) / (ce + de);
    const double C47942 = C47888 / C46984;
    const double C47944 = C47888 * C47941;
    const double C47951 = C47868 * C47888;
    const double C48177 = C47888 * C47943;
    const double C48207 = C48166 * C47888;
    const double C48205 = C47888 * C48171;
    const double C47030 = C47026 - C47009;
    const double C140 =
        (-(ae * C47100 * C47115) / C46967) / C46946 -
        (C47112 * C47108 * C47116) / C47111 +
        C47100 * ((-(C47100 * std::pow(C47105, 4) * bs[4] * C47116) / C46967) /
                      C46946 -
                  (ae * C47115) / C47111);
    const double C129 = -(C47115 * C47129 + C47466 * C47467 * C47109) / C46967;
    const double C130 = (-2 * C47100 * C47115) / C46967 -
                        (C47100 * (C47123 * C47129 + C47115)) / C46967;
    const double C278 =
        -(C47103 * C47100 * C47115 + C47100 * C47468 * ce) / C46967;
    const double C283 = -(C47103 * (C47103 * C47115 + C47468 * ce) +
                          C47466 * C47467 * C47109 + C47103 * C47468 * ce) /
                        C46967;
    const double C430 = -(C47349 * C47100 * C47115) / C46967;
    const double C431 = -(C47349 * (C47123 * C47129 + C47115)) / C46967;
    const double C440 = -(C47115 * C47353 + C47466 * C47467 * C47109) / C46967;
    const double C825 = -(C47349 * (C47103 * C47115 + C47468 * ce)) / C46967;
    const double C1869 = (-2 * C47349 * C47115) / C46967 -
                         (C47349 * (C47123 * C47353 + C47115)) / C46967;
    const double C47222 = C47214 * ae;
    const double C47475 = C47100 * C47214;
    const double C47555 = C47103 * C47214;
    const double C47554 = C47214 * ce;
    const double C277 = -(C47103 * (C47123 * C47129 + C47115) +
                          (C47468 + C47214 * C47129) * ce) /
                        C46967;
    const double C1040 = (-2 * (C47103 * C47115 + C47468 * ce)) / C46967 -
                         (C47103 * (C47103 * (C47103 * C47123 + C47214 * ce) +
                                    C47115 + C47103 * C47214 * ce)) /
                             C46967 -
                         ((C47468 + C47214 * C47310) * ce) / C46967;
    const double C120 =
        2 * C47100 * C47468 + C47100 * (C47468 + C47214 * C47129);
    const double C264 = C47103 * (C47468 + C47214 * C47129);
    const double C418 = C47349 * (C47468 + C47214 * C47129);
    const double C1031 =
        2 * C47103 * C47468 + C47103 * (C47468 + C47214 * C47310);
    const double C1165 = C47349 * (C47468 + C47214 * C47310);
    const double C1863 =
        2 * C47349 * C47468 + C47349 * (C47468 + C47214 * C47353);
    const double C1864 =
        3 * (C47468 + C47214 * C47353) +
        C47349 * (2 * C47349 * C47214 + C47349 * (C47214 + C47228 * C47353));
    const double C126 =
        (C47466 * C47467 * C47213 + C47100 * (C47100 * C47219 + C47468 * ae) +
         C47100 * C47468 * ae) /
        C46946;
    const double C275 = (C47103 * (C47100 * C47219 + C47468 * ae)) / C46946;
    const double C280 = (C47466 * C47467 * C47213 + C47219 * C47310) / C46946;
    const double C427 = (C47349 * (C47100 * C47219 + C47468 * ae)) / C46946;
    const double C437 = (C47466 * C47467 * C47213 + C47219 * C47353) / C46946;
    const double C822 = (C47349 * C47103 * C47219) / C46946;
    const double C1037 =
        (2 * C47103 * C47219 + C47103 * (C47219 + C47223 * C47310)) / C46946;
    const double C1174 = (C47349 * (C47219 + C47223 * C47310)) / C46946;
    const double C1872 =
        (2 * C47349 * C47219 + C47349 * (C47219 + C47223 * C47353)) / C46946;
    const double C21706 = C47839 * C296;
    const double C26212 = C47839 * C450;
    const double C47136 = C47134 * C47129;
    const double C47147 = ae * C47134;
    const double C47143 = C47100 * C47134;
    const double C47626 = C47103 * C47134;
    const double C47676 = C47134 * C47353;
    const double C47729 = C47349 * C47134;
    const double C1876 =
        (-3 * (C47123 * C47353 + C47115)) / C46967 +
        C47349 * ((-2 * C47349 * C47123) / C46967 -
                  (C47349 * (C47134 * C47353 + C47123)) / C46967);
    const double C47232 = C47100 * C47229;
    const double C47313 = C47229 * C47310;
    const double C47364 = C47229 * ce;
    const double C47362 = C47103 * C47229;
    const double C47670 = C47229 * C47353;
    const double C47722 = C47349 * C47229;
    const double C1873 =
        (3 * (C47219 + C47223 * C47353) +
         C47349 * (2 * C47349 * C47223 + C47349 * (C47223 + C47229 * C47353))) /
        C46946;
    const double C47246 = C47242 * C47129;
    const double C47245 = C47100 * C47242;
    const double C47244 = C47242 * ae;
    const double C47629 = C47242 * C47310;
    const double C47686 = C47103 * C47242;
    const double C47685 = C47242 * ce;
    const double C47828 = C47242 * C47353;
    const double C47195 = C47192 * C47129;
    const double C47269 = C47100 * C47265;
    const double C47422 = C47265 * C47310;
    const double C47131 = C47128 / C47111;
    const double C441 = -(C47125 * C47353 + C47100 * C47115) / C46967;
    const double C47312 = C47309 / C47111;
    const double C1180 = (C47103 * C47219 + C47307 * C47353) / C46946;
    const double C47233 = C47231 * ae;
    const double C47481 = 2 * C47231;
    const double C47562 = C47103 * C47231;
    const double C47561 = C47231 * ce;
    const double C47477 = C47214 + C47476;
    const double C47558 = C47214 + C47556;
    const double C47633 = 2 * C47628;
    const double C47631 = C47628 * ce;
    const double C47814 = C47214 + C47813;
    const double C47829 = 2 * C47827;
    const double C47162 = C47159 + C47134;
    const double C47184 = C47179 / C47111;
    const double C47186 = -2 * C47175;
    const double C47182 = ae * C47175;
    const double C47640 = C47103 * C47175;
    const double C47679 = C47175 * C47353;
    const double C47732 = C47730 + C47134;
    const double C47370 = C47229 + C47365;
    const double C47426 = C47420 / C47111;
    const double C47427 = 2 * C47418;
    const double C47424 = C47418 * ce;
    const double C47716 = C47418 * C47353;
    const double C47725 = C47229 + C47723;
    const double C47271 = C47242 + C47268;
    const double C47270 = C47267 * ae;
    const double C47643 = C47267 * C47310;
    const double C47694 = C47242 + C47688;
    const double C141 =
        2 * ((-(C47100 * C47122) / C46967) / C46946 - (ae * C47115) / C47111) -
        (ae * (C47123 * std::pow(C47100, 2) + C47115)) / C47111 +
        C47100 *
            ((-(ae * C47100 * C47123) / C46967) / C46946 - C47122 / C47111 +
             C47100 *
                 ((-(C47100 * std::pow(C47107, 5) * bs[5] * C47116) / C46967) /
                      C46946 -
                  (ae * C47123) / C47111));
    const double C295 = C47103 * ((-(C47100 * C47122) / C46967) / C46946 -
                                  (ae * C47115) / C47111) -
                        ((C47100 * C47112 * C47108 * C47213 +
                          bs[2] * std::pow(C47105, 2) * ae) *
                         ce) /
                            C47111;
    const double C297 = (-(C47103 * C47219 * ce) / C46967) / C46946 -
                        (C47112 * C47108 * C47116) / C47111 +
                        C47103 * ((-(C47103 * C47122) / C46967) / C46946 -
                                  (C47219 * ce) / C47111);
    const double C447 = (zP - zQ) * ((-(C47100 * C47122) / C46967) / C46946 -
                                     (ae * C47115) / C47111);
    const double C452 = (-(C47122 * std::pow(zP - zQ, 2)) / C46967) / C46946 -
                        (C47112 * C47108 * C47116) / C47111;
    const double C832 = (zP - zQ) * ((-(C47103 * C47122) / C46967) / C46946 -
                                     (C47219 * ce) / C47111);
    const double C47135 = C47100 * C47133;
    const double C47144 = C47133 / C47111;
    const double C47308 = C47103 * C47133;
    const double C1049 =
        2 * ((-(C47103 * C47122) / C46967) / C46946 - (C47219 * ce) / C47111) -
        ((C47219 + C47223 * std::pow(C47103, 2)) * ce) / C47111 +
        C47103 *
            ((-(C47103 * C47223 * ce) / C46967) / C46946 - C47122 / C47111 +
             C47103 * ((-(C47103 * C47133) / C46967) / C46946 -
                       (C47223 * ce) / C47111));
    const double C1881 =
        (-2 * C47349 * C47122) / C47111 +
        C47349 * ((-(C47133 * std::pow(C47349, 2)) / C46967) / C46946 -
                  C47122 / C47111);
    const double C47158 = C47100 * C47154;
    const double C47176 = C47154 / C47111;
    const double C47363 = C47103 * C47154;
    const double C47407 = C47154 * C47353;
    const double C47453 = C47349 * C47154;
    const double C47194 = C47100 * C47190;
    const double C47419 = C47103 * C47190;
    const double C47454 = C47190 * C47353;
    const double C47862 = C47860 * C47855;
    const double C47861 = C47860 / C46984;
    const double C47870 = C47868 * C47860;
    const double C48162 = C47860 * C47856;
    const double C48201 = C48166 * C47860;
    const double C48195 = C47860 * C48159;
    const double C47984 = C47906 / C46984;
    const double C47986 = C47906 * C47983;
    const double C47993 = C47868 * C47906;
    const double C48183 = C47906 * C47985;
    const double C48210 = C48166 * C47906;
    const double C48208 = C47906 * C48173;
    const double C48225 = C48158 * C48095;
    const double C48224 = C48095 * C48189;
    const double C15915 = -(C48095 * C48191) / C46946;
    const double C48227 = C48158 * C48110;
    const double C48226 = C48110 * C48190;
    const double C31728 = -(C48110 * C48192) / C46946;
    const double C115 = ((0 * ae) / C46946 - C46951 / C46948) / (2 * C46946) -
                        (0 * be) / C46946;
    const double C4605 =
        (-C46945 / C46946) / (2 * C46946) -
        ((C47839 - (C46944 * 2 * C46951) / C46946) * be) / C46946;
    const double C4606 =
        (-(2 * C46951) / C46946) / (2 * C46946) - (0 * be) / C46946;
    const double C15917 =
        ((C47839 - (C46944 * 2 * C46951) / C46946) * ae) / C46946 -
        C46945 / C46950;
    const double C15918 = (0 * ae) / C46946 - C46951 / C46948;
    const double C21591 = -(2 * C46951) / C46946;
    const double C114 =
        (((C47839 - (C46944 * 2 * C46951) / C46946) * ae) / C46946 -
         C46945 / C46950) /
            (2 * C46946) -
        ((C46944 * ((0 * ae) / C46946 - C46951 / C46948) + C48194) * be) /
            C46946;
    const double C103 = C48194 / C47844;
    const double C101 = C47839 / C47844 - (C48193 * C48157) / C46948;
    const double C102 = C48193 / C46950 - (C48194 * C48157) / C46946;
    const double C15913 = C48193 / C46946;
    const double C4761 = C4601 * C296;
    const double C4757 = C4601 * C276;
    const double C10635 = C4601 * C450;
    const double C10631 = C4601 * C434;
    const double C47032 = C47027 / C46984;
    const double C47031 = C46965 * C47027;
    const double C46985 = 2 * C46972;
    const double C47007 = C46972 / C46969;
    const double C263 = ((0 * ce) / C46967 - C46972 / C46969) / (2 * C46967) +
                        (0 * ce) / C46967;
    const double C561 =
        ((C47888 - (C46965 * 2 * C46972) / C46967) * ce) / C46967 -
        C46966 / C46971;
    const double C562 = (0 * ce) / C46967 - C46972 / C46969;
    const double C947 = (C47888 * std::pow(C47943, 2)) / C46969 + C47942;
    const double C47945 = C47944 * C47943;
    const double C47950 = C47944 / C46971;
    const double C48175 = C47944 / C46967;
    const double C48172 = C47868 * C47944;
    const double C262 =
        (((C47888 - (C46965 * 2 * C46972) / C46967) * ce) / C46967 -
         C46966 / C46971) /
            (2 * C46967) +
        ((C46965 * ((0 * ce) / C46967 - C46972 / C46969) + C47951) * ce) /
            C46967;
    const double C47952 = C47951 * C47943;
    const double C48181 = C47941 * C47951;
    const double C48180 = 2 * C47951;
    const double C48217 = C47951 / C48169;
    const double C1022 = C47951 / C48204;
    const double C2723 = C47951 / C46984;
    const double C48213 = C48177 / C46967;
    const double C948 = (-2 * C47868 * C48177) / C46967;
    const double C48233 = C48205 / C46969;
    const double C47036 = C47030 + C47002;
    const double C47225 = C47224 + C47222;
    const double C284 = -(C47103 * (C47103 * C47125 + C47475 * ce) +
                          C47100 * C47115 + C47103 * C47475 * ce) /
                        C46967;
    const double C826 = -(C47349 * (C47103 * C47125 + C47475 * ce)) / C46967;
    const double C268 = C47100 * C47468 + C47475 * C47310;
    const double C423 = C47100 * C47468 + C47475 * C47353;
    const double C818 = C47349 * C47103 * C47475;
    const double C1030 =
        2 * C47103 * C47475 + C47103 * (C47475 + C47231 * C47310);
    const double C1164 = C47349 * (C47475 + C47231 * C47310);
    const double C1862 =
        2 * C47349 * C47475 + C47349 * (C47475 + C47231 * C47353);
    const double C1168 = C47103 * C47468 + C47555 * C47353;
    const double C2239 =
        2 * C47349 * C47555 + C47349 * (C47555 + C47628 * C47353);
    const double C47557 = C47553 + C47554;
    const double C4771 = C4601 * C275;
    const double C4755 = C48194 * C275;
    const double C16067 = C48194 * C275;
    const double C21716 = C47839 * C275;
    const double C4763 = C4601 * C280;
    const double C21708 = C47839 * C280;
    const double C10645 = C4601 * C427;
    const double C10633 = C48194 * C427;
    const double C26220 = C47839 * C427;
    const double C32026 = C48194 * C427;
    const double C10669 = C4601 * C437;
    const double C26238 = C47839 * C437;
    const double C5439 = C4601 * C822;
    const double C22222 = C47839 * C822;
    const double C5713 = C4601 * C1037;
    const double C21712 = C47839 * C1037;
    const double C5891 = C4601 * C1174;
    const double C22226 = C47839 * C1174;
    const double C12379 = C4601 * C1872;
    const double C28052 = C47839 * C1872;
    const double C47138 = C47136 + C47123;
    const double C47150 = C47147 / C47111;
    const double C47151 = -2 * C47143;
    const double C47148 = ae * C47143;
    const double C47560 = C47103 * C47143;
    const double C1039 = (-2 * (C47103 * C47125 + C47475 * ce)) / C46967 -
                         (C47103 * (C47103 * (C47103 * C47143 + C47231 * ce) +
                                    C47125 + C47103 * C47231 * ce)) /
                             C46967 -
                         ((C47475 + C47231 * C47310) * ce) / C46967;
    const double C1868 = (-2 * C47349 * C47125) / C46967 -
                         (C47349 * (C47143 * C47353 + C47125)) / C46967;
    const double C1877 =
        (-3 * (C47143 * C47353 + C47125)) / C46967 +
        C47349 * ((-2 * C47349 * C47143) / C46967 -
                  (C47349 * (C47175 * C47353 + C47143)) / C46967);
    const double C47630 = C47626 + C47627;
    const double C47677 = C47676 + C47123;
    const double C47731 = -2 * C47729;
    const double C47234 = C47232 + C47230;
    const double C47315 = C47223 + C47313;
    const double C47368 = C47364 / C47111;
    const double C47369 = 2 * C47362;
    const double C47366 = C47362 * ce;
    const double C2242 =
        (2 * C47349 * C47307 + C47349 * (C47307 + C47362 * C47353)) / C46946;
    const double C6797 =
        (3 * (C47307 + C47362 * C47353) +
         C47349 * (2 * C47349 * C47362 + C47349 * (C47362 + C47418 * C47353))) /
        C46946;
    const double C47671 = C47223 + C47670;
    const double C47724 = 2 * C47722;
    const double C12393 = C4601 * C1873;
    const double C28064 = C47839 * C1873;
    const double C47249 = C47228 + C47246;
    const double C47248 = C47245 * ae;
    const double C47264 = 2 * C47245;
    const double C47563 = C47245 * C47310;
    const double C47642 = C47103 * C47245;
    const double C47641 = C47245 * ce;
    const double C47816 = C47245 * C47353;
    const double C1865 =
        3 * (C47475 + C47231 * C47353) +
        C47349 * (2 * C47349 * C47231 + C47349 * (C47231 + C47245 * C47353));
    const double C47250 = C47247 + C47244;
    const double C47632 = C47228 + C47629;
    const double C47695 = 2 * C47686;
    const double C47692 = C47686 * ce;
    const double C47824 = C47686 * C47353;
    const double C6795 =
        3 * (C47555 + C47628 * C47353) +
        C47349 * (2 * C47349 * C47628 + C47349 * (C47628 + C47686 * C47353));
    const double C47691 = C47684 + C47685;
    const double C47830 = C47228 + C47828;
    const double C47198 = C47195 + C47156;
    const double C47272 = C47269 + C47266;
    const double C47428 = C47243 + C47422;
    const double C5899 = C4601 * C1180;
    const double C22564 = C47839 * C1180;
    const double C1167 = C47103 * C47475 + C47562 * C47353;
    const double C121 = 3 * (C47468 + C47214 * C47129) +
                        C47100 * (2 * C47475 + C47100 * C47477);
    const double C269 = C47468 + C47214 * C47129 + C47477 * C47310;
    const double C270 = C47103 * (2 * C47475 + C47100 * C47477);
    const double C419 = C47349 * (2 * C47475 + C47100 * C47477);
    const double C424 = C47468 + C47214 * C47129 + C47477 * C47353;
    const double C819 = C47349 * C47103 * C47477;
    const double C1032 = 3 * (C47468 + C47214 * C47310) +
                         C47103 * (2 * C47555 + C47103 * C47558);
    const double C1169 = C47468 + C47214 * C47310 + C47558 * C47353;
    const double C1559 = C47349 * (2 * C47555 + C47103 * C47558);
    const double C12369 =
        4 * (2 * C47349 * C47214 + C47349 * C47814) +
        C47349 * (3 * C47814 + C47349 * (2 * C47349 * C47228 +
                                         C47349 * (C47228 + C47242 * C47353)));
    const double C47165 = C47100 * C47162;
    const double C47180 = -3 * C47162;
    const double C47174 = ae * C47162;
    const double C47567 = C47103 * C47162;
    const double C47191 = C47186 / C46967;
    const double C47189 = C47182 / C46967;
    const double C47680 = C47679 + C47143;
    const double C47734 = C47349 * C47732;
    const double C47373 = C47103 * C47370;
    const double C47421 = 3 * C47370;
    const double C47417 = C47370 * ce;
    const double C47430 = C47424 / C46967;
    const double C47717 = C47362 + C47716;
    const double C47726 = C47349 * C47725;
    const double C47274 = C47100 * C47271;
    const double C47273 = C47271 * ae;
    const double C47570 = C47271 * C47310;
    const double C47646 = C47245 + C47643;
    const double C47697 = C47103 * C47694;
    const double C4775 = C4601 * C295;
    const double C4759 = C48194 * C295;
    const double C16071 = C48194 * C295;
    const double C21718 = C47839 * C295;
    const double C4767 = C4601 * C297;
    const double C21710 = C47839 * C297;
    const double C10641 = C4601 * C447;
    const double C10637 = C48194 * C447;
    const double C26218 = C47839 * C447;
    const double C32030 = C48194 * C447;
    const double C10665 = C4601 * C452;
    const double C26236 = C47839 * C452;
    const double C5443 = C4601 * C832;
    const double C22224 = C47839 * C832;
    const double C47137 = C47135 / C46967;
    const double C1882 =
        3 * ((-(C47133 * C47353) / C46967) / C46946 - C47122 / C47111) +
        C47349 * ((-2 * C47349 * C47133) / C47111 +
                  C47349 * ((-(C47154 * C47353) / C46967) / C46946 - C47144));
    const double C47311 = C47308 / C46967;
    const double C5717 = C4601 * C1049;
    const double C21714 = C47839 * C1049;
    const double C12383 = C4601 * C1881;
    const double C28054 = C47839 * C1881;
    const double C47161 = C47158 / C46967;
    const double C47367 = C47363 / C46967;
    const double C47408 = C47407 / C46967;
    const double C47455 = -2 * C47453;
    const double C47197 = C47194 / C46967;
    const double C47425 = C47419 / C46967;
    const double C47456 = C47454 / C46967;
    const double C47863 = C47862 * C47856;
    const double C47869 = C47862 / C46971;
    const double C48163 = C47868 * C47862;
    const double C48161 = C47862 / C46967;
    const double C258 = (C47860 * std::pow(C47856, 2)) / C46969 + C47861;
    const double C47871 = C47870 * C47856;
    const double C48167 = C47855 * C47870;
    const double C48165 = 2 * C47870;
    const double C48211 = C47870 / C48169;
    const double C111 = C47870 / C48204;
    const double C2726 = C47870 / C46984;
    const double C48197 = C48162 / C46967;
    const double C259 = (-2 * C47868 * C48162) / C46967;
    const double C48228 = C48195 / C46969;
    const double C1681 = (C47906 * std::pow(C47985, 2)) / C46969 + C47984;
    const double C47987 = C47986 * C47985;
    const double C47992 = C47986 / C46971;
    const double C48176 = C47986 / C46967;
    const double C48174 = C47868 * C47986;
    const double C47994 = C47993 * C47985;
    const double C48187 = C47983 * C47993;
    const double C48186 = 2 * C47993;
    const double C48223 = C47993 / C48169;
    const double C1860 = C47993 / C48204;
    const double C3628 = C47993 / C46984;
    const double C48219 = C48183 / C46967;
    const double C1682 = (-2 * C47868 * C48183) / C46967;
    const double C48235 = C48208 / C46969;
    const double C21590 = C48225 / C47844;
    const double C4603 = C48224 / C46946;
    const double C21588 = C48095 / C47844 - (C48224 * C48191) / C46948;
    const double C21589 = C48224 / C46950 - (C48225 * C48191) / C46946;
    const double C42728 = C48227 / C47844;
    const double C10335 = C48226 / C46946;
    const double C42726 = C48110 / C47844 - (C48226 * C48192) / C46948;
    const double C42727 = C48226 / C46950 - (C48227 * C48192) / C46946;
    const double C4792 = C4605 * C277;
    const double C4788 = C4605 * C264;
    const double C4774 = C4605 * C278;
    const double C4770 = C4605 * C265;
    const double C4766 = C4605 * C283;
    const double C4762 = C4605 * C267;
    const double C4760 = C4605 * C279;
    const double C4756 = C4605 * C266;
    const double C5442 = C4605 * C825;
    const double C5438 = C4605 * C817;
    const double C5716 = C4605 * C1040;
    const double C5712 = C4605 * C1031;
    const double C5890 = C4605 * C1165;
    const double C10668 = C4605 * C422;
    const double C10664 = C4605 * C440;
    const double C10658 = C4605 * C441;
    const double C10650 = C4605 * C431;
    const double C10646 = C4605 * C418;
    const double C10644 = C4605 * C417;
    const double C10640 = C4605 * C430;
    const double C10634 = C4605 * C433;
    const double C10630 = C4605 * C420;
    const double C12392 = C4605 * C1864;
    const double C12388 = C4605 * C1876;
    const double C12382 = C4605 * C1869;
    const double C12378 = C4605 * C1863;
    const double C4776 = C4606 * C277;
    const double C4772 = C4606 * C264;
    const double C4758 = C4606 * C278;
    const double C4754 = C4606 * C265;
    const double C10662 = C4606 * C441;
    const double C10642 = C4606 * C418;
    const double C10638 = C4606 * C431;
    const double C10636 = C4606 * C430;
    const double C10632 = C4606 * C417;
    const double C16104 = C15917 * C277;
    const double C16100 = C15917 * C264;
    const double C16086 = C15917 * C278;
    const double C16082 = C15917 * C265;
    const double C16078 = C15917 * C283;
    const double C16074 = C15917 * C267;
    const double C16072 = C15917 * C279;
    const double C16068 = C15917 * C266;
    const double C16754 = C15917 * C825;
    const double C16750 = C15917 * C817;
    const double C17020 = C15917 * C1040;
    const double C17016 = C15917 * C1031;
    const double C17186 = C15917 * C1165;
    const double C32061 = C15917 * C422;
    const double C32057 = C15917 * C440;
    const double C32051 = C15917 * C441;
    const double C32043 = C15917 * C431;
    const double C32039 = C15917 * C418;
    const double C32037 = C15917 * C417;
    const double C32033 = C15917 * C430;
    const double C32027 = C15917 * C433;
    const double C32023 = C15917 * C420;
    const double C33777 = C15917 * C1864;
    const double C33773 = C15917 * C1876;
    const double C33767 = C15917 * C1869;
    const double C33763 = C15917 * C1863;
    const double C16088 = C15918 * C277;
    const double C16084 = C15918 * C264;
    const double C16070 = C15918 * C278;
    const double C16066 = C15918 * C265;
    const double C32055 = C15918 * C441;
    const double C32035 = C15918 * C418;
    const double C32031 = C15918 * C431;
    const double C32029 = C15918 * C430;
    const double C32025 = C15918 * C417;
    const double C21729 = C21591 * C277;
    const double C21727 = C21591 * C264;
    const double C21717 = C21591 * C278;
    const double C21715 = C21591 * C265;
    const double C21713 = C21591 * C1040;
    const double C21711 = C21591 * C1031;
    const double C21709 = C21591 * C283;
    const double C21707 = C21591 * C267;
    const double C21705 = C21591 * C279;
    const double C21703 = C21591 * C266;
    const double C22225 = C21591 * C1165;
    const double C22223 = C21591 * C825;
    const double C22221 = C21591 * C817;
    const double C26237 = C21591 * C422;
    const double C26235 = C21591 * C440;
    const double C26229 = C21591 * C441;
    const double C26223 = C21591 * C431;
    const double C26221 = C21591 * C418;
    const double C26219 = C21591 * C417;
    const double C26217 = C21591 * C430;
    const double C26211 = C21591 * C433;
    const double C26209 = C21591 * C420;
    const double C28063 = C21591 * C1864;
    const double C28061 = C21591 * C1876;
    const double C28053 = C21591 * C1869;
    const double C28051 = C21591 * C1863;
    const double C16087 = C15913 * C295;
    const double C16083 = C15913 * C275;
    const double C16079 = C15913 * C297;
    const double C16075 = C15913 * C280;
    const double C16073 = C15913 * C296;
    const double C16069 = C15913 * C276;
    const double C16755 = C15913 * C832;
    const double C16751 = C15913 * C822;
    const double C17021 = C15913 * C1049;
    const double C17017 = C15913 * C1037;
    const double C17195 = C15913 * C1180;
    const double C17187 = C15913 * C1174;
    const double C32062 = C15913 * C437;
    const double C32058 = C15913 * C452;
    const double C32038 = C15913 * C427;
    const double C32034 = C15913 * C447;
    const double C32028 = C15913 * C450;
    const double C32024 = C15913 * C434;
    const double C33778 = C15913 * C1873;
    const double C33768 = C15913 * C1881;
    const double C33764 = C15913 * C1872;
    const double C113 =
        (((0 - (C46944 * C46945) / C46946) * ae) / C46946 - (0 * be) / C46950) /
            (2 * C46946) -
        ((C46944 * (((C47839 - (C46944 * 2 * C46951) / C46946) * ae) / C46946 -
                    C46945 / C46950) +
          C15913) *
         be) /
            C46946 +
        (0 * ae) / C46946 - C46951 / C46948;
    const double C47037 = C47031 + 0;
    const double C47004 = C46965 * C46985;
    const double C954 =
        ((-C46966 / C46967) / C46984 -
         ((C47888 - (C46965 * C46985) / C46967) * de) / C46967) /
            C46984 -
        ((C46965 * ((-C46985 / C46967) / C46984 - (0 * de) / C46967) + C47951) *
         de) /
            C46967;
    const double C955 =
        ((-C46985 / C46967) / C46984 - (0 * de) / C46967) / C46984 -
        (0 * de) / C46967;
    const double C2356 = (-C46985 / C46967) / C46984 - (0 * de) / C46967;
    const double C47017 = C47013 - C47007;
    const double C47946 = C47945 / C46969;
    const double C261 =
        (((0 - (C46965 * C46966) / C46967) * ce) / C46967 - (0 * de) / C46971) /
            (2 * C46967) +
        ((C46965 * (((C47888 - (C46965 * 2 * C46972) / C46967) * ce) / C46967 -
                    C46966 / C46971) +
          C48175) *
         ce) /
            C46967 +
        (0 * ce) / C46967 - C46972 / C46969;
    const double C48206 = 2 * C48172;
    const double C47953 = C47952 / C46967;
    const double C48216 = C48181 / C46971;
    const double C48237 = C48175 - C48213;
    const double C2349 = -C48213;
    const double C48246 = C48233 + C47942;
    const double C47040 = C47036 / C46984;
    const double C131 =
        (2 * (C47100 * C47219 + C47468 * ae) +
         C47100 * (C47219 + C47100 * C47225 + C47100 * C47214 * ae) +
         (C47468 + C47214 * C47129) * ae) /
        C46946;
    const double C274 =
        (C47103 * (C47219 + C47100 * C47225 + C47475 * ae)) / C46946;
    const double C281 =
        (C47100 * C47219 + C47468 * ae + C47225 * C47310) / C46946;
    const double C428 =
        (C47349 * (C47219 + C47100 * C47225 + C47475 * ae)) / C46946;
    const double C438 =
        (C47100 * C47219 + C47468 * ae + C47225 * C47353) / C46946;
    const double C823 = (C47349 * C47103 * C47225) / C46946;
    const double C4784 = C4605 * C284;
    const double C4768 = C4606 * C284;
    const double C16096 = C15917 * C284;
    const double C16080 = C15918 * C284;
    const double C21721 = C21591 * C284;
    const double C5452 = C4605 * C826;
    const double C5444 = C4606 * C826;
    const double C16764 = C15917 * C826;
    const double C16756 = C15918 * C826;
    const double C22231 = C21591 * C826;
    const double C4780 = C4605 * C268;
    const double C4764 = C4606 * C268;
    const double C16092 = C15917 * C268;
    const double C16076 = C15918 * C268;
    const double C21719 = C21591 * C268;
    const double C10666 = C4606 * C423;
    const double C10654 = C4605 * C423;
    const double C26227 = C21591 * C423;
    const double C32059 = C15918 * C423;
    const double C32047 = C15917 * C423;
    const double C5448 = C4605 * C818;
    const double C5440 = C4606 * C818;
    const double C16760 = C15917 * C818;
    const double C16752 = C15918 * C818;
    const double C22229 = C21591 * C818;
    const double C5710 = C4606 * C1030;
    const double C6054 = C4605 * C1030;
    const double C17014 = C15918 * C1030;
    const double C17350 = C15917 * C1030;
    const double C21723 = C21591 * C1030;
    const double C5888 = C4606 * C1164;
    const double C6260 = C4605 * C1164;
    const double C17184 = C15918 * C1164;
    const double C17556 = C15917 * C1164;
    const double C22233 = C21591 * C1164;
    const double C12380 = C4606 * C1862;
    const double C12732 = C4605 * C1862;
    const double C28427 = C21591 * C1862;
    const double C33765 = C15918 * C1862;
    const double C34117 = C15917 * C1862;
    const double C5898 = C4605 * C1168;
    const double C17194 = C15917 * C1168;
    const double C22563 = C21591 * C1168;
    const double C7278 = C4605 * C2239;
    const double C18550 = C15917 * C2239;
    const double C23591 = C21591 * C2239;
    const double C1044 =
        (-3 * (C47103 * C47557 + C47115 + C47555 * ce)) / C46967 +
        C47103 * ((-2 * C47557) / C46967 -
                  (C47103 * (C47103 * (C47103 * C47134 + C47228 * ce) + C47123 +
                             C47103 * C47228 * ce)) /
                      C46967 -
                  (C47558 * ce) / C46967) -
        ((2 * C47555 + C47103 * C47558) * ce) / C46967;
    const double C1177 =
        -(C47349 * (C47103 * C47557 + C47115 + C47555 * ce)) / C46967;
    const double C1183 =
        -(C47557 * C47353 + C47103 * C47115 + C47468 * ce) / C46967;
    const double C1187 = -((C47103 * (C47103 * C47134 + C47228 * ce) + C47123 +
                            C47103 * C47228 * ce) *
                               C47353 +
                           C47103 * C47557 + C47115 + C47555 * ce) /
                         C46967;
    const double C1565 =
        C47349 * ((-2 * C47557) / C46967 -
                  (C47103 * (C47103 * (C47103 * C47134 + C47228 * ce) + C47123 +
                             C47103 * C47228 * ce)) /
                      C46967 -
                  (C47558 * ce) / C46967);
    const double C2245 =
        (-2 * C47349 * C47557) / C46967 -
        (C47349 * ((C47103 * C47134 + C47228 * ce) * C47353 + C47557)) / C46967;
    const double C133 =
        (-3 * (C47123 * C47129 + C47115)) / C46967 +
        C47100 * ((-2 * C47125) / C46967 - (C47100 * C47138) / C46967);
    const double C285 = -(C47103 * (C47103 * C47138 + C47477 * ce) +
                          C47123 * C47129 + C47115 + C47103 * C47477 * ce) /
                        C46967;
    const double C287 =
        C47103 * ((-2 * C47125) / C46967 - (C47100 * C47138) / C46967) -
        ((2 * C47475 + C47100 * C47477) * ce) / C46967;
    const double C432 =
        C47349 * ((-2 * C47125) / C46967 - (C47100 * C47138) / C46967);
    const double C442 = -(C47138 * C47353 + C47123 * C47129 + C47115) / C46967;
    const double C827 = -(C47349 * (C47103 * C47138 + C47477 * ce)) / C46967;
    const double C1867 = (-2 * C47349 * C47138) / C46967 -
                         (C47349 * (C47162 * C47353 + C47138)) / C46967;
    const double C47155 = C47151 / C46967;
    const double C47153 = C47148 / C46967;
    const double C47564 = C47560 + C47561;
    const double C5714 = C4606 * C1039;
    const double C6058 = C4605 * C1039;
    const double C17018 = C15918 * C1039;
    const double C17354 = C15917 * C1039;
    const double C21725 = C21591 * C1039;
    const double C12384 = C4606 * C1868;
    const double C12728 = C4605 * C1868;
    const double C28425 = C21591 * C1868;
    const double C33769 = C15918 * C1868;
    const double C34113 = C15917 * C1868;
    const double C12386 = C4606 * C1877;
    const double C33771 = C15918 * C1877;
    const double C44535 = C21591 * C1877;
    const double C47634 = C47103 * C47630;
    const double C47683 = -2 * C47630;
    const double C6799 =
        (-3 * (C47630 * C47353 + C47557)) / C46967 +
        C47349 *
            ((-2 * C47349 * C47630) / C46967 -
             (C47349 * ((C47103 * C47156 + C47242 * ce) * C47353 + C47630)) /
                 C46967);
    const double C12373 =
        4 * ((-2 * C47349 * C47123) / C46967 - (C47349 * C47677) / C46967) +
        C47349 * ((-3 * C47677) / C46967 +
                  C47349 * ((-2 * C47349 * C47134) / C46967 -
                            (C47349 * (C47156 * C47353 + C47134)) / C46967));
    const double C47733 = C47731 / C46967;
    const double C47235 = C47100 * C47234;
    const double C47240 = 2 * C47234;
    const double C47321 = C47234 * ce;
    const double C47319 = C47103 * C47234;
    const double C1036 =
        (2 * C47103 * C47225 + C47103 * (C47225 + C47234 * C47310)) / C46946;
    const double C1173 = (C47349 * (C47225 + C47234 * C47310)) / C46946;
    const double C1871 =
        (2 * C47349 * C47225 + C47349 * (C47225 + C47234 * C47353)) / C46946;
    const double C1041 = (3 * (C47219 + C47223 * C47310) +
                          C47103 * (2 * C47307 + C47103 * C47315)) /
                         C46946;
    const double C1184 = (C47219 + C47223 * C47310 + C47315 * C47353) / C46946;
    const double C1562 = (C47349 * (2 * C47307 + C47103 * C47315)) / C46946;
    const double C7271 =
        (2 * C47349 * C47315 + C47349 * (C47315 + C47370 * C47353)) / C46946;
    const double C47371 = C47366 / C46967;
    const double C7279 = C4601 * C2242;
    const double C18551 = C15913 * C2242;
    const double C23592 = C47839 * C2242;
    const double C28060 = C47839 * C6797;
    const double C12371 =
        (4 * (2 * C47349 * C47223 + C47349 * C47671) +
         C47349 *
             (3 * C47671 + C47349 * (2 * C47349 * C47229 +
                                     C47349 * (C47229 + C47243 * C47353)))) /
        C46946;
    const double C47251 = C47249 * ae;
    const double C47482 = C47100 * C47249;
    const double C47485 = 3 * C47249;
    const double C47569 = C47103 * C47249;
    const double C47568 = C47249 * ce;
    const double C1038 = (-2 * (C47103 * C47138 + C47477 * ce)) / C46967 -
                         (C47103 * (C47103 * (C47103 * C47162 + C47249 * ce) +
                                    C47138 + C47103 * C47249 * ce)) /
                             C46967 -
                         ((C47477 + C47249 * C47310) * ce) / C46967;
    const double C1029 =
        2 * C47103 * C47477 + C47103 * (C47477 + C47249 * C47310);
    const double C1163 = C47349 * (C47477 + C47249 * C47310);
    const double C1861 =
        2 * C47349 * C47477 + C47349 * (C47477 + C47249 * C47353);
    const double C1866 =
        3 * (C47477 + C47249 * C47353) +
        C47349 * (2 * C47349 * C47249 + C47349 * (C47249 + C47271 * C47353));
    const double C47565 = C47231 + C47563;
    const double C47647 = 2 * C47642;
    const double C47645 = C47642 * ce;
    const double C2240 =
        2 * C47349 * C47562 + C47349 * (C47562 + C47642 * C47353);
    const double C6796 =
        3 * (C47562 + C47642 * C47353) +
        C47349 * (2 * C47349 * C47642 +
                  C47349 * (C47642 + C47103 * C47267 * C47353));
    const double C47644 = C47640 + C47641;
    const double C47817 = C47231 + C47816;
    const double C12390 = C4606 * C1865;
    const double C33775 = C15918 * C1865;
    const double C44537 = C21591 * C1865;
    const double C47252 = C47100 * C47250;
    const double C47261 = 2 * C47250;
    const double C47322 = C47250 * C47310;
    const double C47385 = C47250 * ce;
    const double C47383 = C47103 * C47250;
    const double C47673 = C47250 * C47353;
    const double C1874 =
        (3 * (C47225 + C47234 * C47353) +
         C47349 * (2 * C47349 * C47234 + C47349 * (C47234 + C47250 * C47353))) /
        C46946;
    const double C47635 = C47103 * C47632;
    const double C47689 = 3 * C47632;
    const double C47687 = C47632 * ce;
    const double C7269 =
        2 * C47349 * C47558 + C47349 * (C47558 + C47632 * C47353);
    const double C23228 =
        3 * (C47558 + C47632 * C47353) +
        C47349 * (2 * C47349 * C47632 + C47349 * (C47632 + C47694 * C47353));
    const double C47825 = C47628 + C47824;
    const double C28059 = C21591 * C6795;
    const double C47696 = C47103 * C47691;
    const double C47719 = C47691 * C47353;
    const double C47831 = C47349 * C47830;
    const double C47201 = C47100 * C47198;
    const double C1878 =
        (-3 * (C47162 * C47353 + C47138)) / C46967 +
        C47349 * ((-2 * C47349 * C47162) / C46967 -
                  (C47349 * (C47198 * C47353 + C47162)) / C46967);
    const double C47275 = C47100 * C47272;
    const double C47386 = C47272 * C47310;
    const double C47432 = C47103 * C47428;
    const double C23229 =
        (3 * (C47315 + C47370 * C47353) +
         C47349 * (2 * C47349 * C47370 + C47349 * (C47370 + C47428 * C47353))) /
        C46946;
    const double C5896 = C4606 * C1167;
    const double C6998 = C4605 * C1167;
    const double C17192 = C15918 * C1167;
    const double C18278 = C15917 * C1167;
    const double C23379 = C21591 * C1167;
    const double C4794 = C4605 * C269;
    const double C4778 = C4606 * C269;
    const double C16106 = C15917 * C269;
    const double C16090 = C15918 * C269;
    const double C21731 = C21591 * C269;
    const double C4786 = C4606 * C270;
    const double C5102 = C4605 * C270;
    const double C16098 = C15918 * C270;
    const double C16414 = C15917 * C270;
    const double C21965 = C21591 * C270;
    const double C10648 = C4606 * C419;
    const double C10968 = C4605 * C419;
    const double C26545 = C21591 * C419;
    const double C32041 = C15918 * C419;
    const double C32361 = C15917 * C419;
    const double C10676 = C4605 * C424;
    const double C10656 = C4606 * C424;
    const double C26245 = C21591 * C424;
    const double C32069 = C15917 * C424;
    const double C32049 = C15918 * C424;
    const double C5454 = C4605 * C819;
    const double C5446 = C4606 * C819;
    const double C16766 = C15917 * C819;
    const double C16758 = C15918 * C819;
    const double C22237 = C21591 * C819;
    const double C5718 = C4605 * C1032;
    const double C17022 = C15917 * C1032;
    const double C22433 = C21591 * C1032;
    const double C5904 = C4605 * C1169;
    const double C17200 = C15917 * C1169;
    const double C22567 = C21591 * C1169;
    const double C6410 = C4605 * C1559;
    const double C17698 = C15917 * C1559;
    const double C22559 = C21591 * C1559;
    const double C44270 = C21591 * C12369;
    const double C47167 = C47165 / C46967;
    const double C47185 = C47180 / C46967;
    const double C47181 = C47174 / C47111;
    const double C47193 = -C47189;
    const double C12374 =
        4 * ((-2 * C47349 * C47143) / C46967 - (C47349 * C47680) / C46967) +
        C47349 * ((-3 * C47680) / C46967 +
                  C47349 * ((-2 * C47349 * C47175) / C46967 -
                            (C47349 * (C47100 * C47192 * C47353 + C47175)) /
                                C46967));
    const double C47735 = C47734 / C46967;
    const double C47376 = C47369 + C47373;
    const double C47423 = C47417 / C47111;
    const double C47433 = -C47430;
    const double C28047 =
        (4 * (2 * C47349 * C47362 + C47349 * C47717) +
         C47349 * (3 * C47717 +
                   C47349 * (2 * C47349 * C47418 +
                             C47349 * (C47418 + C47103 * C47265 * C47353)))) /
        C46946;
    const double C47727 = C47724 + C47726;
    const double C47276 = C47264 + C47274;
    const double C47572 = C47249 + C47570;
    const double C47649 = C47103 * C47646;
    const double C47699 = C47695 + C47697;
    const double C47139 = -C47137;
    const double C12389 = C4601 * C1882;
    const double C28062 = C47839 * C1882;
    const double C33774 = C15913 * C1882;
    const double C47314 = -C47311;
    const double C47164 = -C47161;
    const double C47372 = -C47367;
    const double C47409 = -C47408;
    const double C47457 = C47455 / C47111;
    const double C47200 = -C47197;
    const double C47431 = -C47425;
    const double C47458 = -C47456;
    const double C47864 = C47863 / C46969;
    const double C48198 = 2 * C48163;
    const double C47872 = C47871 / C46967;
    const double C48202 = C48167 / C46971;
    const double C48229 = C48161 - C48197;
    const double C2459 = -C48197;
    const double C48243 = C48228 + C47861;
    const double C47988 = C47987 / C46969;
    const double C48209 = 2 * C48174;
    const double C47995 = C47994 / C46967;
    const double C48222 = C48187 / C46971;
    const double C48240 = C48176 - C48219;
    const double C3120 = -C48219;
    const double C48247 = C48235 + C47984;
    const double C4812 = C4774 + C4775;
    const double C4810 = C4770 + C4771;
    const double C4808 = C4766 + C4767;
    const double C4806 = C4762 + C4763;
    const double C4805 = C4760 + C4761;
    const double C4803 = C4756 + C4757;
    const double C5464 = C5442 + C5443;
    const double C5462 = C5438 + C5439;
    const double C5729 = C5716 + C5717;
    const double C5727 = C5712 + C5713;
    const double C5913 = C5890 + C5891;
    const double C10697 = C10668 + C10669;
    const double C10695 = C10664 + C10665;
    const double C10685 = C10644 + C10645;
    const double C10683 = C10640 + C10641;
    const double C10680 = C10634 + C10635;
    const double C10678 = C10630 + C10631;
    const double C12401 = C12392 + C12393;
    const double C12396 = C12382 + C12383;
    const double C12394 = C12378 + C12379;
    const double C4804 = C4758 + C4759;
    const double C4802 = C4754 + C4755;
    const double C10681 = C10636 + C10637;
    const double C10679 = C10632 + C10633;
    const double C16116 = C16070 + C16071;
    const double C16114 = C16066 + C16067;
    const double C32074 = C32029 + C32030;
    const double C32072 = C32025 + C32026;
    const double C21746 = C21717 + C21718;
    const double C21745 = C21715 + C21716;
    const double C21744 = C21713 + C21714;
    const double C21743 = C21711 + C21712;
    const double C21742 = C21709 + C21710;
    const double C21741 = C21707 + C21708;
    const double C21740 = C21705 + C21706;
    const double C21739 = C21703 + C21704;
    const double C22247 = C22225 + C22226;
    const double C22246 = C22223 + C22224;
    const double C22245 = C22221 + C22222;
    const double C26256 = C26237 + C26238;
    const double C26255 = C26235 + C26236;
    const double C26250 = C26219 + C26220;
    const double C26249 = C26217 + C26218;
    const double C26248 = C26211 + C26212;
    const double C26247 = C26209 + C26210;
    const double C28070 = C28063 + C28064;
    const double C28066 = C28053 + C28054;
    const double C28065 = C28051 + C28052;
    const double C16124 = C16086 + C16087;
    const double C16122 = C16082 + C16083;
    const double C16120 = C16078 + C16079;
    const double C16118 = C16074 + C16075;
    const double C16117 = C16072 + C16073;
    const double C16115 = C16068 + C16069;
    const double C16776 = C16754 + C16755;
    const double C16774 = C16750 + C16751;
    const double C17033 = C17020 + C17021;
    const double C17031 = C17016 + C17017;
    const double C17209 = C17186 + C17187;
    const double C32090 = C32061 + C32062;
    const double C32088 = C32057 + C32058;
    const double C32078 = C32037 + C32038;
    const double C32076 = C32033 + C32034;
    const double C32073 = C32027 + C32028;
    const double C32071 = C32023 + C32024;
    const double C33786 = C33777 + C33778;
    const double C33781 = C33767 + C33768;
    const double C33779 = C33763 + C33764;
    const double C47041 = C47037 * de;
    const double C47012 = C47004 / C46967;
    const double C47021 = C46965 * C47017;
    const double C47050 = C47017 / C46984;
    const double C47947 = C47942 - C47946;
    const double C48234 = C48206 / C46967;
    const double C47954 = C47950 - C47953;
    const double C48248 = C48237 / C46984;
    const double C953 =
        ((-(0 * de) / C46967) / C46984 -
         ((0 - (C46965 * C46966) / C46967) * de) / C46967) /
            C46984 -
        ((C46965 * ((-C46966 / C46967) / C46984 -
                    ((C47888 - (C46965 * C46985) / C46967) * de) / C46967) +
          C2349) *
         de) /
            C46967 +
        (-C46985 / C46967) / C46984 - (0 * de) / C46967;
    const double C4789 = C4601 * C274;
    const double C4773 = C48194 * C274;
    const double C16101 = C15913 * C274;
    const double C16085 = C48194 * C274;
    const double C21728 = C47839 * C274;
    const double C4781 = C4601 * C281;
    const double C4765 = C48194 * C281;
    const double C16093 = C15913 * C281;
    const double C16077 = C48194 * C281;
    const double C21720 = C47839 * C281;
    const double C10647 = C4601 * C428;
    const double C10643 = C48194 * C428;
    const double C26222 = C47839 * C428;
    const double C32040 = C15913 * C428;
    const double C32036 = C48194 * C428;
    const double C10667 = C48194 * C438;
    const double C10655 = C4601 * C438;
    const double C26228 = C47839 * C438;
    const double C32060 = C48194 * C438;
    const double C32048 = C15913 * C438;
    const double C5449 = C4601 * C823;
    const double C5441 = C48194 * C823;
    const double C16761 = C15913 * C823;
    const double C16753 = C48194 * C823;
    const double C22230 = C47839 * C823;
    const double C5917 = C5898 + C5899;
    const double C17213 = C17194 + C17195;
    const double C22577 = C22563 + C22564;
    const double C5722 = C4605 * C1044;
    const double C17026 = C15917 * C1044;
    const double C22435 = C21591 * C1044;
    const double C5894 = C4605 * C1177;
    const double C17190 = C15917 * C1177;
    const double C22227 = C21591 * C1177;
    const double C5902 = C4605 * C1183;
    const double C17198 = C15917 * C1183;
    const double C22565 = C21591 * C1183;
    const double C5908 = C4605 * C1187;
    const double C17204 = C15917 * C1187;
    const double C22569 = C21591 * C1187;
    const double C6414 = C4605 * C1565;
    const double C17702 = C15917 * C1565;
    const double C22561 = C21591 * C1565;
    const double C7282 = C4605 * C2245;
    const double C18554 = C15917 * C2245;
    const double C23593 = C21591 * C2245;
    const double C4798 = C4605 * C285;
    const double C4782 = C4606 * C285;
    const double C16110 = C15917 * C285;
    const double C16094 = C15918 * C285;
    const double C21733 = C21591 * C285;
    const double C4790 = C4606 * C287;
    const double C5106 = C4605 * C287;
    const double C16102 = C15918 * C287;
    const double C16418 = C15917 * C287;
    const double C21967 = C21591 * C287;
    const double C10652 = C4606 * C432;
    const double C10964 = C4605 * C432;
    const double C26543 = C21591 * C432;
    const double C32045 = C15918 * C432;
    const double C32357 = C15917 * C432;
    const double C10672 = C4605 * C442;
    const double C10660 = C4606 * C442;
    const double C26243 = C21591 * C442;
    const double C32065 = C15917 * C442;
    const double C32053 = C15918 * C442;
    const double C5458 = C4605 * C827;
    const double C5450 = C4606 * C827;
    const double C16770 = C15917 * C827;
    const double C16762 = C15918 * C827;
    const double C22239 = C21591 * C827;
    const double C12726 = C4606 * C1867;
    const double C34111 = C15918 * C1867;
    const double C42953 = C21591 * C1867;
    const double C47157 = -C47153;
    const double C1176 =
        -(C47349 * (C47103 * C47564 + C47125 + C47562 * ce)) / C46967;
    const double C1182 =
        -(C47564 * C47353 + C47103 * C47125 + C47475 * ce) / C46967;
    const double C1188 = -((C47103 * (C47103 * C47175 + C47245 * ce) + C47143 +
                            C47103 * C47245 * ce) *
                               C47353 +
                           C47103 * C47564 + C47125 + C47562 * ce) /
                         C46967;
    const double C2246 =
        (-2 * C47349 * C47564) / C46967 -
        (C47349 * ((C47103 * C47175 + C47245 * ce) * C47353 + C47564)) / C46967;
    const double C47636 = C47634 + C47123;
    const double C47690 = C47683 / C46967;
    const double C28057 = C21591 * C6799;
    const double C44268 = C21591 * C12373;
    const double C47236 = C47223 + C47235;
    const double C47323 = C47321 / C47111;
    const double C1179 = (C47103 * C47225 + C47319 * C47353) / C46946;
    const double C5711 = C48194 * C1036;
    const double C6055 = C4601 * C1036;
    const double C17015 = C48194 * C1036;
    const double C17351 = C15913 * C1036;
    const double C21724 = C47839 * C1036;
    const double C5889 = C48194 * C1173;
    const double C6261 = C4601 * C1173;
    const double C17185 = C48194 * C1173;
    const double C17557 = C15913 * C1173;
    const double C22234 = C47839 * C1173;
    const double C12381 = C48194 * C1871;
    const double C12733 = C4601 * C1871;
    const double C28428 = C47839 * C1871;
    const double C33766 = C48194 * C1871;
    const double C34118 = C15913 * C1871;
    const double C5719 = C4601 * C1041;
    const double C17023 = C15913 * C1041;
    const double C22434 = C47839 * C1041;
    const double C5905 = C4601 * C1184;
    const double C17201 = C15913 * C1184;
    const double C22568 = C47839 * C1184;
    const double C6411 = C4601 * C1562;
    const double C17699 = C15913 * C1562;
    const double C22560 = C47839 * C1562;
    const double C23596 = C47839 * C7271;
    const double C47374 = -C47371;
    const double C7286 = C7278 + C7279;
    const double C18558 = C18550 + C18551;
    const double C23599 = C23591 + C23592;
    const double C44271 = C47839 * C12371;
    const double C47483 = C47481 + C47482;
    const double C1166 = C47103 * C47477 + C47569 * C47353;
    const double C2241 =
        2 * C47349 * C47569 + C47349 * (C47569 + C47103 * C47271 * C47353);
    const double C47571 = C47567 + C47568;
    const double C6060 = C4606 * C1038;
    const double C17356 = C15918 * C1038;
    const double C21737 = C21591 * C1038;
    const double C6056 = C4606 * C1029;
    const double C17352 = C15918 * C1029;
    const double C21735 = C21591 * C1029;
    const double C6262 = C4606 * C1163;
    const double C17558 = C15918 * C1163;
    const double C22241 = C21591 * C1163;
    const double C12730 = C4606 * C1861;
    const double C34115 = C15918 * C1861;
    const double C42955 = C21591 * C1861;
    const double C1045 =
        (-3 * (C47103 * C47564 + C47125 + C47562 * ce)) / C46967 +
        C47103 * ((-2 * C47564) / C46967 -
                  (C47103 * (C47103 * (C47103 * C47175 + C47245 * ce) + C47143 +
                             C47103 * C47245 * ce)) /
                      C46967 -
                  (C47565 * ce) / C46967) -
        ((2 * C47562 + C47103 * C47565) * ce) / C46967;
    const double C1566 =
        C47349 * ((-2 * C47564) / C46967 -
                  (C47103 * (C47103 * (C47103 * C47175 + C47245 * ce) + C47143 +
                             C47103 * C47245 * ce)) /
                      C46967 -
                  (C47565 * ce) / C46967);
    const double C1033 = 3 * (C47475 + C47231 * C47310) +
                         C47103 * (2 * C47562 + C47103 * C47565);
    const double C1170 = C47475 + C47231 * C47310 + C47565 * C47353;
    const double C1560 = C47349 * (2 * C47562 + C47103 * C47565);
    const double C7270 =
        2 * C47349 * C47565 + C47349 * (C47565 + C47646 * C47353);
    const double C7280 = C4606 * C2240;
    const double C18552 = C15918 * C2240;
    const double C28287 = C21591 * C2240;
    const double C47648 = C47103 * C47644;
    const double C6800 =
        (-3 * (C47644 * C47353 + C47564)) / C46967 +
        C47349 * ((-2 * C47349 * C47644) / C46967 -
                  (C47349 * ((C47103 * C47100 * C47192 + C47267 * ce) * C47353 +
                             C47644)) /
                      C46967);
    const double C12370 =
        4 * (2 * C47349 * C47231 + C47349 * C47817) +
        C47349 * (3 * C47817 + C47349 * (2 * C47349 * C47245 +
                                         C47349 * (C47245 + C47267 * C47353)));
    const double C47253 = C47229 + C47252;
    const double C47324 = C47234 + C47322;
    const double C47388 = C47385 / C47111;
    const double C47389 = 2 * C47383;
    const double C47387 = C47383 * ce;
    const double C2243 =
        (2 * C47349 * C47319 + C47349 * (C47319 + C47383 * C47353)) / C46946;
    const double C6798 =
        (3 * (C47319 + C47383 * C47353) +
         C47349 * (2 * C47349 * C47383 +
                   C47349 * (C47383 + C47103 * C47272 * C47353))) /
        C46946;
    const double C47674 = C47234 + C47673;
    const double C12391 = C48194 * C1874;
    const double C33776 = C48194 * C1874;
    const double C44538 = C47839 * C1874;
    const double C47637 = C47633 + C47635;
    const double C47693 = C47687 / C46967;
    const double C23595 = C21591 * C7269;
    const double C28046 =
        4 * (2 * C47349 * C47628 + C47349 * C47825) +
        C47349 * (3 * C47825 +
                  C47349 * (2 * C47349 * C47686 +
                            C47349 * (C47686 + C47103 * C47263 * C47353)));
    const double C28068 = C28059 + C28060;
    const double C47698 = C47696 + C47134;
    const double C47720 = C47719 + C47630;
    const double C47832 = C47829 + C47831;
    const double C47203 = C47201 / C46967;
    const double C47277 = C47243 + C47275;
    const double C47390 = C47250 + C47386;
    const double C47435 = C47427 + C47432;
    const double C47169 = C47155 - C47167;
    const double C47196 = C47193 / C46946;
    const double C47736 = C47733 - C47735;
    const double C5703 = (4 * (2 * C47307 + C47103 * C47315) +
                          C47103 * (3 * C47315 + C47103 * C47376)) /
                         C46946;
    const double C5881 =
        (2 * C47307 + C47103 * C47315 + C47376 * C47353) / C46946;
    const double C6403 = (C47349 * (3 * C47315 + C47103 * C47376)) / C46946;
    const double C47436 = C47433 / C46946;
    const double C44262 =
        (5 * (3 * C47671 + C47349 * C47727) +
         C47349 * (4 * C47727 +
                   C47349 * (3 * C47725 +
                             C47349 * (2 * C47349 * C47243 +
                                       C47349 * (C47243 + C47265 * C47353))))) /
        C46946;
    const double C47278 = C47276 * ae;
    const double C47486 = C47100 * C47276;
    const double C1034 = 3 * (C47477 + C47249 * C47310) +
                         C47103 * (2 * C47569 + C47103 * C47572);
    const double C1171 = C47477 + C47249 * C47310 + C47572 * C47353;
    const double C1561 = C47349 * (2 * C47569 + C47103 * C47572);
    const double C47651 = C47647 + C47649;
    const double C47701 = C47103 * C47699;
    const double C47140 = C47139 / C46946;
    const double C12399 = C12388 + C12389;
    const double C28069 = C28061 + C28062;
    const double C33784 = C33773 + C33774;
    const double C47316 = C47314 / C46946;
    const double C47166 = C47164 / C46946;
    const double C47375 = C47372 / C46946;
    const double C47410 = C47409 / C46946;
    const double C47202 = C47200 / C46946;
    const double C47434 = C47431 / C46946;
    const double C47459 = C47458 / C46946;
    const double C47865 = C47861 - C47864;
    const double C48230 = C48198 / C46967;
    const double C47873 = C47869 - C47872;
    const double C48244 = C48229 / C46984;
    const double C47989 = C47984 - C47988;
    const double C48236 = C48209 / C46967;
    const double C47996 = C47992 - C47995;
    const double C48250 = C48240 / C46984;
    const double C26751 = C22247 * C562;
    const double C27151 = C22247 * C954;
    const double C27147 = C22247 * C955;
    const double C27949 = C22247 * C262;
    const double C27945 = C22247 * C263;
    const double C29031 = C22247 * C2356;
    const double C26214 = C22246 * C47888;
    const double C26750 = C22246 * C48175;
    const double C26748 = C22246 * C47951;
    const double C27150 = C22246 * C947;
    const double C27146 = C22246 * C948;
    const double C27948 = C22246 * C48246;
    const double C29030 = C22246 * C2349;
    const double C29028 = C22246 * C47951;
    const double C26213 = C22245 * C116;
    const double C26749 = C22245 * C561;
    const double C26747 = C22245 * C562;
    const double C27145 = C22245 * C954;
    const double C27947 = C22245 * C261;
    const double C27943 = C22245 * C262;
    const double C29027 = C22245 * C2356;
    const double C26270 = C26256 * C116;
    const double C27955 = C26256 * C261;
    const double C28273 = C26256 * C561;
    const double C26269 = C26255 * C47888;
    const double C27156 = C26255 * C947;
    const double C27954 = C26255 * C48246;
    const double C28272 = C26255 * C48175;
    const double C29042 = C26255 * C2349;
    const double C26264 = C26250 * C116;
    const double C26755 = C26250 * C561;
    const double C29949 = C26250 * C261;
    const double C26263 = C26249 * C47888;
    const double C26754 = C26249 * C48175;
    const double C27492 = C26249 * C947;
    const double C29034 = C26249 * C2349;
    const double C29948 = C26249 * C48246;
    const double C26262 = C26248 * C47888;
    const double C26746 = C26248 * C48175;
    const double C27144 = C26248 * C947;
    const double C27942 = C26248 * C48246;
    const double C29026 = C26248 * C2349;
    const double C26261 = C26247 * C116;
    const double C26745 = C26247 * C561;
    const double C27941 = C26247 * C261;
    const double C28076 = C28070 * C116;
    const double C44643 = C28070 * C561;
    const double C28072 = C28066 * C47888;
    const double C28564 = C28066 * C48175;
    const double C31094 = C28066 * C2349;
    const double C43602 = C28066 * C947;
    const double C44190 = C28066 * C48246;
    const double C28071 = C28065 * C116;
    const double C28563 = C28065 * C561;
    const double C44191 = C28065 * C261;
    const double C47043 = C47041 / C46967;
    const double C47016 = C47888 - C47012;
    const double C47025 = C47021 + C47951;
    const double C47053 = C47050 - C47052;
    const double C29612 = C26249 * C47947;
    const double C29606 = C22246 * C47947;
    const double C29600 = C26248 * C47947;
    const double C31636 = C26255 * C47947;
    const double C46928 = C28066 * C47947;
    const double C48178 = C47947 * C47941;
    const double C48215 = C48180 + C47947;
    const double C27944 = C22246 * C48234;
    const double C29602 = C22246 * C47954;
    const double C48182 = C47954 / C46984;
    const double C48179 = C47954 * C47941;
    const double C1297 = C48248 - (C47947 * C47943) / C46967;
    const double C27157 = C26256 * C953;
    const double C27149 = C22245 * C953;
    const double C27143 = C26247 * C953;
    const double C27493 = C26250 * C953;
    const double C43603 = C28065 * C953;
    const double C4819 = C4788 + C4789;
    const double C4811 = C4772 + C4773;
    const double C16131 = C16100 + C16101;
    const double C16123 = C16084 + C16085;
    const double C21751 = C21727 + C21728;
    const double C4815 = C4780 + C4781;
    const double C4807 = C4764 + C4765;
    const double C16127 = C16092 + C16093;
    const double C16119 = C16076 + C16077;
    const double C21747 = C21719 + C21720;
    const double C10686 = C10646 + C10647;
    const double C10684 = C10642 + C10643;
    const double C26251 = C26221 + C26222;
    const double C32079 = C32039 + C32040;
    const double C32077 = C32035 + C32036;
    const double C10696 = C10666 + C10667;
    const double C10690 = C10654 + C10655;
    const double C26253 = C26227 + C26228;
    const double C32089 = C32059 + C32060;
    const double C32083 = C32047 + C32048;
    const double C5467 = C5448 + C5449;
    const double C5463 = C5440 + C5441;
    const double C16779 = C16760 + C16761;
    const double C16775 = C16752 + C16753;
    const double C22249 = C22229 + C22230;
    const double C26234 = C22577 * C116;
    const double C27163 = C22577 * C953;
    const double C27155 = C22577 * C954;
    const double C27961 = C22577 * C261;
    const double C27953 = C22577 * C262;
    const double C28277 = C22577 * C561;
    const double C28271 = C22577 * C562;
    const double C29041 = C22577 * C2356;
    const double C47160 = C47157 / C46946;
    const double C5892 = C4606 * C1176;
    const double C6264 = C4605 * C1176;
    const double C17188 = C15918 * C1176;
    const double C17560 = C15917 * C1176;
    const double C22235 = C21591 * C1176;
    const double C5900 = C4606 * C1182;
    const double C7002 = C4605 * C1182;
    const double C17196 = C15918 * C1182;
    const double C18282 = C15917 * C1182;
    const double C23381 = C21591 * C1182;
    const double C5910 = C4606 * C1188;
    const double C17206 = C15918 * C1188;
    const double C23385 = C21591 * C1188;
    const double C7284 = C4606 * C2246;
    const double C18556 = C15918 * C2246;
    const double C28289 = C21591 * C2246;
    const double C47638 = C47636 + C47631;
    const double C47237 = C47236 + C47233;
    const double C5897 = C48194 * C1179;
    const double C6999 = C4601 * C1179;
    const double C17193 = C48194 * C1179;
    const double C18279 = C15913 * C1179;
    const double C23380 = C47839 * C1179;
    const double C5726 = C5710 + C5711;
    const double C6062 = C6054 + C6055;
    const double C17030 = C17014 + C17015;
    const double C17358 = C17350 + C17351;
    const double C21749 = C21723 + C21724;
    const double C5912 = C5888 + C5889;
    const double C6268 = C6260 + C6261;
    const double C17208 = C17184 + C17185;
    const double C17564 = C17556 + C17557;
    const double C22251 = C22233 + C22234;
    const double C12395 = C12380 + C12381;
    const double C12737 = C12732 + C12733;
    const double C28430 = C28427 + C28428;
    const double C33780 = C33765 + C33766;
    const double C34122 = C34117 + C34118;
    const double C5730 = C5718 + C5719;
    const double C17034 = C17022 + C17023;
    const double C22441 = C22433 + C22434;
    const double C5920 = C5904 + C5905;
    const double C17216 = C17200 + C17201;
    const double C22579 = C22567 + C22568;
    const double C6418 = C6410 + C6411;
    const double C17706 = C17698 + C17699;
    const double C22575 = C22559 + C22560;
    const double C47377 = C47374 / C46946;
    const double C28055 = C23599 * C116;
    const double C28567 = C23599 * C561;
    const double C28565 = C23599 * C562;
    const double C31095 = C23599 * C2356;
    const double C43601 = C23599 * C954;
    const double C44189 = C23599 * C262;
    const double C44275 = C44270 + C44271;
    const double C122 = 4 * (2 * C47475 + C47100 * C47477) +
                        C47100 * (3 * C47477 + C47100 * C47483);
    const double C271 = 2 * C47475 + C47100 * C47477 + C47483 * C47310;
    const double C272 = C47103 * (3 * C47477 + C47100 * C47483);
    const double C421 = C47349 * (3 * C47477 + C47100 * C47483);
    const double C425 = 2 * C47475 + C47100 * C47477 + C47483 * C47353;
    const double C820 = C47349 * C47103 * C47483;
    const double C1307 =
        2 * C47103 * C47483 + C47103 * (C47483 + C47276 * C47310);
    const double C1457 = C47349 * (C47483 + C47276 * C47310);
    const double C2031 = C47103 * C47483 + C47103 * C47276 * C47353;
    const double C2137 =
        2 * C47349 * C47483 + C47349 * (C47483 + C47276 * C47353);
    const double C7000 = C4606 * C1166;
    const double C18280 = C15918 * C1166;
    const double C26241 = C21591 * C1166;
    const double C1046 =
        (-3 * (C47103 * C47571 + C47138 + C47569 * ce)) / C46967 +
        C47103 * ((-2 * C47571) / C46967 -
                  (C47103 * (C47103 * (C47103 * C47198 + C47271 * ce) + C47162 +
                             C47103 * C47271 * ce)) /
                      C46967 -
                  (C47572 * ce) / C46967) -
        ((2 * C47569 + C47103 * C47572) * ce) / C46967;
    const double C1175 =
        -(C47349 * (C47103 * C47571 + C47138 + C47569 * ce)) / C46967;
    const double C1181 =
        -(C47571 * C47353 + C47103 * C47138 + C47477 * ce) / C46967;
    const double C1189 = -((C47103 * (C47103 * C47198 + C47271 * ce) + C47162 +
                            C47103 * C47271 * ce) *
                               C47353 +
                           C47103 * C47571 + C47138 + C47569 * ce) /
                         C46967;
    const double C1567 =
        C47349 * ((-2 * C47571) / C46967 -
                  (C47103 * (C47103 * (C47103 * C47198 + C47271 * ce) + C47162 +
                             C47103 * C47271 * ce)) /
                      C46967 -
                  (C47572 * ce) / C46967);
    const double C2247 =
        (-2 * C47349 * C47571) / C46967 -
        (C47349 * ((C47103 * C47198 + C47271 * ce) * C47353 + C47571)) / C46967;
    const double C5724 = C4606 * C1045;
    const double C17028 = C15918 * C1045;
    const double C22683 = C21591 * C1045;
    const double C6416 = C4606 * C1566;
    const double C17704 = C15918 * C1566;
    const double C22835 = C21591 * C1566;
    const double C5720 = C4606 * C1033;
    const double C17024 = C15918 * C1033;
    const double C22681 = C21591 * C1033;
    const double C5906 = C4606 * C1170;
    const double C17202 = C15918 * C1170;
    const double C23383 = C21591 * C1170;
    const double C6412 = C4606 * C1560;
    const double C17700 = C15918 * C1560;
    const double C22833 = C21591 * C1560;
    const double C47650 = C47648 + C47143;
    const double C47254 = C47253 + C47248;
    const double C1042 = (3 * (C47225 + C47234 * C47310) +
                          C47103 * (2 * C47319 + C47103 * C47324)) /
                         C46946;
    const double C1185 = (C47225 + C47234 * C47310 + C47324 * C47353) / C46946;
    const double C1563 = (C47349 * (2 * C47319 + C47103 * C47324)) / C46946;
    const double C47391 = C47387 / C47111;
    const double C7281 = C48194 * C2243;
    const double C18553 = C48194 * C2243;
    const double C28288 = C47839 * C2243;
    const double C12372 =
        (4 * (2 * C47349 * C47234 + C47349 * C47674) +
         C47349 *
             (3 * C47674 + C47349 * (2 * C47349 * C47250 +
                                     C47349 * (C47250 + C47272 * C47353)))) /
        C46946;
    const double C12400 = C12390 + C12391;
    const double C33785 = C33775 + C33776;
    const double C44541 = C44537 + C44538;
    const double C5701 = 4 * (2 * C47555 + C47103 * C47558) +
                         C47103 * (3 * C47558 + C47103 * C47637);
    const double C5879 = 2 * C47555 + C47103 * C47558 + C47637 * C47353;
    const double C6401 = C47349 * (3 * C47558 + C47103 * C47637);
    const double C23586 =
        2 * C47349 * C47637 + C47349 * (C47637 + C47699 * C47353);
    const double C23601 = C23595 + C23596;
    const double C28074 = C28068 * C116;
    const double C44645 = C28068 * C562;
    const double C46519 = C28068 * C2356;
    const double C47700 = C47698 + C47692;
    const double C28048 =
        4 * ((-2 * C47349 * C47630) / C46967 - (C47349 * C47720) / C46967) +
        C47349 *
            ((-3 * C47720) / C46967 +
             C47349 * ((-2 * C47349 * C47691) / C46967 -
                       (C47349 *
                        ((C47103 * C47192 + C47263 * ce) * C47353 + C47691)) /
                           C46967));
    const double C44261 =
        5 * (3 * C47814 + C47349 * C47832) +
        C47349 * (4 * C47832 +
                  C47349 * (3 * C47830 +
                            C47349 * (2 * C47349 * C47242 +
                                      C47349 * (C47242 + C47263 * C47353))));
    const double C47205 = C47191 - C47203;
    const double C47279 = C47277 + C47270;
    const double C47393 = C47103 * C47390;
    const double C7272 =
        (2 * C47349 * C47324 + C47349 * (C47324 + C47390 * C47353)) / C46946;
    const double C47438 = C47103 * C47435;
    const double C23587 =
        (2 * C47349 * C47376 + C47349 * (C47376 + C47435 * C47353)) / C46946;
    const double C134 =
        4 * ((-2 * C47125) / C46967 - (C47100 * C47138) / C46967) +
        C47100 * ((-3 * C47138) / C46967 + C47100 * C47169);
    const double C289 = (-2 * C47125) / C46967 - (C47100 * C47138) / C46967 +
                        C47103 * (C47103 * C47169 - (C47483 * ce) / C46967) -
                        (C47103 * C47483 * ce) / C46967;
    const double C291 = C47103 * ((-3 * C47138) / C46967 + C47100 * C47169) -
                        ((3 * C47477 + C47100 * C47483) * ce) / C46967;
    const double C435 = C47349 * ((-3 * C47138) / C46967 + C47100 * C47169);
    const double C443 =
        (-2 * C47125) / C46967 - (C47100 * C47138) / C46967 + C47169 * C47353;
    const double C829 = C47349 * (C47103 * C47169 - (C47483 * ce) / C46967);
    const double C47199 = C47196 - C47176;
    const double C44263 =
        5 * ((-3 * C47677) / C46967 + C47349 * C47736) +
        C47349 * (4 * C47736 +
                  C47349 * ((-3 * C47732) / C46967 +
                            C47349 * ((-2 * C47349 * C47156) / C46967 -
                                      (C47349 * (C47192 * C47353 + C47156)) /
                                          C46967)));
    const double C22438 = C47839 * C5703;
    const double C22572 = C47839 * C5881;
    const double C22942 = C47839 * C6403;
    const double C47439 = C47436 - C47176;
    const double C47487 = C47485 + C47486;
    const double C5702 = 4 * (2 * C47562 + C47103 * C47565) +
                         C47103 * (3 * C47565 + C47103 * C47651);
    const double C5880 = 2 * C47562 + C47103 * C47565 + C47651 * C47353;
    const double C6402 = C47349 * (3 * C47565 + C47103 * C47651);
    const double C47703 = C47689 + C47701;
    const double C47141 = C47140 - C47131;
    const double C28075 = C28069 * C47888;
    const double C44644 = C28069 * C48175;
    const double C46518 = C28069 * C2349;
    const double C47317 = C47316 - C47312;
    const double C47168 = C47166 - C47150;
    const double C47378 = C47375 - C47368;
    const double C47411 = C47410 - C47144;
    const double C47204 = C47202 - C47184;
    const double C47437 = C47434 - C47426;
    const double C47460 = C47459 - C47176;
    const double C48160 = C47865 * C47855;
    const double C48200 = C48165 + C47865;
    const double C48168 = C47873 / C46984;
    const double C48164 = C47873 * C47855;
    const double C557 = C48244 - (C47865 * C47856) / C46967;
    const double C48184 = C47989 * C47983;
    const double C48221 = C48186 + C47989;
    const double C48188 = C47996 / C46984;
    const double C48185 = C47996 * C47983;
    const double C2133 = C48250 - (C47989 * C47985) / C46967;
    const double C42950 = C26270 + C26269;
    const double C44188 = C27955 + C27954;
    const double C44424 = C28273 + C28272;
    const double C44266 = C28072 + C28071;
    const double C44642 = C28564 + C28563;
    const double C47045 = C47040 - C47043;
    const double C47020 = C47016 * ce;
    const double C2355 = (-C47002) / C46984 - (C47016 * de) / C46967;
    const double C47029 = C47025 * de;
    const double C29603 = C22247 * C47053;
    const double C1028 =
        (C47053 / C46984 + (0 * ce) / C46967) / C46984 - (0 * de) / C46967;
    const double C1306 = C47053 / C46984 - (0 * de) / C46967;
    const double C2464 = C47053 / C46984 + (0 * ce) / C46967;
    const double C48212 = C48178 / C46967;
    const double C48238 = C48215 / C46984;
    const double C48239 = C48216 + C48182;
    const double C1299 = C48182 - C47952 / C46971;
    const double C48214 = C48179 / C46967;
    const double C27642 = C22246 * C1297;
    const double C27634 = C26248 * C1297;
    const double C43961 = C26255 * C1297;
    const double C43600 = C27157 + C27156;
    const double C26265 = C26251 * C116;
    const double C26761 = C26251 * C561;
    const double C26267 = C26253 * C116;
    const double C28279 = C26253 * C561;
    const double C43858 = C26253 * C953;
    const double C45662 = C26253 * C261;
    const double C26216 = C22249 * C116;
    const double C26759 = C22249 * C561;
    const double C26753 = C22249 * C562;
    const double C27499 = C22249 * C953;
    const double C27491 = C22249 * C954;
    const double C29033 = C22249 * C2356;
    const double C29955 = C22249 * C261;
    const double C29947 = C22249 * C262;
    const double C47163 = C47160 - C47144;
    const double C5705 =
        4 * ((-2 * C47557) / C46967 - (C47103 * C47638) / C46967 -
             (C47558 * ce) / C46967) +
        C47103 *
            ((-3 * C47638) / C46967 +
             C47103 * ((-2 * C47630) / C46967 -
                       (C47103 * (C47103 * (C47103 * C47156 + C47242 * ce) +
                                  C47134 + C47103 * C47242 * ce)) /
                           C46967 -
                       (C47632 * ce) / C46967) -
             (C47637 * ce) / C46967) -
        ((3 * C47558 + C47103 * C47637) * ce) / C46967;
    const double C5883 = (-2 * C47557) / C46967 - (C47103 * C47638) / C46967 -
                         (C47558 * ce) / C46967 +
                         ((-2 * C47630) / C46967 -
                          (C47103 * (C47103 * (C47103 * C47156 + C47242 * ce) +
                                     C47134 + C47103 * C47242 * ce)) /
                              C46967 -
                          (C47632 * ce) / C46967) *
                             C47353;
    const double C6405 =
        C47349 *
        ((-3 * C47638) / C46967 +
         C47103 * ((-2 * C47630) / C46967 -
                   (C47103 * (C47103 * (C47103 * C47156 + C47242 * ce) +
                              C47134 + C47103 * C47242 * ce)) /
                       C46967 -
                   (C47632 * ce) / C46967) -
         (C47637 * ce) / C46967);
    const double C7273 = (-2 * C47349 * C47638) / C46967 -
                         (C47349 * ((C47103 * (C47103 * C47156 + C47242 * ce) +
                                     C47134 + C47103 * C47242 * ce) *
                                        C47353 +
                                    C47638)) /
                             C46967;
    const double C132 = (3 * (C47219 + C47100 * C47225 + C47475 * ae) +
                         C47100 * (2 * C47225 + C47100 * C47237 + C47477 * ae) +
                         (2 * C47475 + C47100 * C47477) * ae) /
                        C46946;
    const double C282 =
        (C47219 + C47100 * C47225 + C47475 * ae + C47237 * C47310) / C46946;
    const double C286 =
        (C47103 * (2 * C47225 + C47100 * C47237 + C47477 * ae)) / C46946;
    const double C429 =
        (C47349 * (2 * C47225 + C47100 * C47237 + C47477 * ae)) / C46946;
    const double C439 =
        (C47219 + C47100 * C47225 + C47475 * ae + C47237 * C47353) / C46946;
    const double C824 = (C47349 * C47103 * C47237) / C46946;
    const double C5916 = C5896 + C5897;
    const double C7006 = C6998 + C6999;
    const double C17212 = C17192 + C17193;
    const double C18286 = C18278 + C18279;
    const double C23387 = C23379 + C23380;
    const double C26757 = C22251 * C562;
    const double C27497 = C22251 * C954;
    const double C27495 = C22251 * C955;
    const double C29037 = C22251 * C2356;
    const double C29615 = C22251 * C47053;
    const double C29953 = C22251 * C262;
    const double C29951 = C22251 * C263;
    const double C28432 = C28430 * C116;
    const double C44426 = C28430 * C561;
    const double C27161 = C22579 * C954;
    const double C27159 = C22579 * C955;
    const double C27959 = C22579 * C262;
    const double C27957 = C22579 * C263;
    const double C28275 = C22579 * C562;
    const double C29045 = C22579 * C2356;
    const double C31639 = C22579 * C47053;
    const double C27153 = C22575 * C955;
    const double C27951 = C22575 * C263;
    const double C29609 = C22575 * C47053;
    const double C47379 = C47377 - C47144;
    const double C44277 = C44275 * C116;
    const double C4796 = C4606 * C271;
    const double C16108 = C15918 * C271;
    const double C21969 = C21591 * C271;
    const double C5104 = C4606 * C272;
    const double C16416 = C15918 * C272;
    const double C10966 = C4606 * C421;
    const double C32359 = C15918 * C421;
    const double C10674 = C4606 * C425;
    const double C32067 = C15918 * C425;
    const double C43162 = C21591 * C425;
    const double C5456 = C4606 * C820;
    const double C16768 = C15918 * C820;
    const double C26405 = C21591 * C820;
    const double C6266 = C4606 * C1175;
    const double C17562 = C15918 * C1175;
    const double C22243 = C21591 * C1175;
    const double C7004 = C4606 * C1181;
    const double C18284 = C15918 * C1181;
    const double C26239 = C21591 * C1181;
    const double C47652 = C47650 + C47645;
    const double C47255 = C47100 * C47254;
    const double C47260 = 3 * C47254;
    const double C47329 = C47254 * ce;
    const double C47327 = C47103 * C47254;
    const double C1035 =
        (2 * C47103 * C47237 + C47103 * (C47237 + C47254 * C47310)) / C46946;
    const double C1172 = (C47349 * (C47237 + C47254 * C47310)) / C46946;
    const double C1870 =
        (2 * C47349 * C47237 + C47349 * (C47237 + C47254 * C47353)) / C46946;
    const double C5721 = C48194 * C1042;
    const double C17025 = C48194 * C1042;
    const double C22682 = C47839 * C1042;
    const double C5907 = C48194 * C1185;
    const double C17203 = C48194 * C1185;
    const double C23384 = C47839 * C1185;
    const double C6413 = C48194 * C1563;
    const double C17701 = C48194 * C1563;
    const double C22834 = C47839 * C1563;
    const double C7287 = C7280 + C7281;
    const double C18559 = C18552 + C18553;
    const double C28291 = C28287 + C28288;
    const double C44543 = C44541 * C116;
    const double C22437 = C21591 * C5701;
    const double C22571 = C21591 * C5879;
    const double C22941 = C21591 * C6401;
    const double C28569 = C23601 * C562;
    const double C31099 = C23601 * C2356;
    const double C43605 = C23601 * C955;
    const double C44193 = C23601 * C263;
    const double C46931 = C23601 * C47053;
    const double C47702 = C47103 * C47700;
    const double C23230 =
        (-3 * (C47700 * C47353 + C47638)) / C46967 +
        C47349 * ((-2 * C47349 * C47700) / C46967 -
                  (C47349 * ((C47103 * (C47103 * C47192 + C47263 * ce) +
                              C47156 + C47103 * C47263 * ce) *
                                 C47353 +
                             C47700)) /
                      C46967);
    const double C47207 = C47100 * C47205;
    const double C1309 =
        2 * (C47103 * C47169 - (C47483 * ce) / C46967) +
        C47103 * (C47169 + C47103 * (C47103 * C47205 - (C47276 * ce) / C46967) -
                  (C47103 * C47276 * ce) / C46967) -
        ((C47483 + C47276 * C47310) * ce) / C46967;
    const double C1459 =
        C47349 * (C47169 + C47103 * (C47103 * C47205 - (C47276 * ce) / C46967) -
                  (C47103 * C47276 * ce) / C46967);
    const double C2033 = C47103 * C47169 - (C47483 * ce) / C46967 +
                         (C47103 * C47205 - (C47276 * ce) / C46967) * C47353;
    const double C2139 =
        2 * C47349 * C47169 + C47349 * (C47169 + C47205 * C47353);
    const double C47280 = C47100 * C47279;
    const double C47330 = C47279 * C47310;
    const double C1875 =
        (3 * (C47237 + C47254 * C47353) +
         C47349 * (2 * C47349 * C47254 + C47349 * (C47254 + C47279 * C47353))) /
        C46946;
    const double C47396 = C47389 + C47393;
    const double C47441 = C47421 + C47438;
    const double C4800 = C4606 * C289;
    const double C16112 = C15918 * C289;
    const double C21971 = C21591 * C289;
    const double C5108 = C4606 * C291;
    const double C16420 = C15918 * C291;
    const double C10962 = C4606 * C435;
    const double C32355 = C15918 * C435;
    const double C10670 = C4606 * C443;
    const double C32063 = C15918 * C443;
    const double C43160 = C21591 * C443;
    const double C5460 = C4606 * C829;
    const double C16772 = C15918 * C829;
    const double C26407 = C21591 * C829;
    const double C123 = 5 * (3 * C47477 + C47100 * C47483) +
                        C47100 * (4 * C47483 + C47100 * C47487);
    const double C273 = 3 * C47477 + C47100 * C47483 + C47487 * C47310;
    const double C426 = 3 * C47477 + C47100 * C47483 + C47487 * C47353;
    const double C563 = C47103 * (4 * C47483 + C47100 * C47487);
    const double C667 = C47349 * (4 * C47483 + C47100 * C47487);
    const double C821 = C47349 * C47103 * C47487;
    const double C22428 = 5 * (3 * C47558 + C47103 * C47637) +
                          C47103 * (4 * C47637 + C47103 * C47703);
    const double C22554 = 3 * C47558 + C47103 * C47637 + C47703 * C47353;
    const double C22936 = C47349 * (4 * C47637 + C47103 * C47703);
    const double C142 =
        3 * ((-(ae * C47125) / C46967) / C46946 - C47122 / C47111 +
             C47100 * C47141) +
        (((-2 * C47125) / C46967 - (C47100 * C47138) / C46967) * ae) / C46946 +
        C47100 *
            (2 * C47141 - (ae * C47138) / C47111 +
             C47100 *
                 ((-(ae * C47100 * C47134) / C46967) / C46946 -
                  C47133 / C47111 +
                  C47100 * ((-(C47100 * std::pow(C47105, 6) * bs[6] * C47116) /
                             C46967) /
                                C46946 -
                            (ae * C47134) / C47111)));
    const double C294 =
        C47103 * ((-(ae * C47125) / C46967) / C46946 - C47122 / C47111 +
                  C47100 * C47141) -
        ((C47112 * C47108 * C47213 +
          C47100 * (C47100 * C47118 * C47119 * C47213 + C47214 * ae) +
          C47100 * C47214 * ae) *
         ce) /
            C47111;
    const double C298 = (-(C47100 * C47122) / C46967) / C46946 -
                        (ae * C47115) / C47111 -
                        (C47103 * C47225 * ce) / C47111 +
                        C47103 * (C47103 * C47141 - (C47225 * ce) / C47111);
    const double C448 = (zP - zQ) * ((-(ae * C47125) / C46967) / C46946 -
                                     C47122 / C47111 + C47100 * C47141);
    const double C453 = (-(C47100 * C47122) / C46967) / C46946 -
                        (ae * C47115) / C47111 + C47141 * std::pow(zP - zQ, 2);
    const double C833 = (zP - zQ) * (C47103 * C47141 - (C47225 * ce) / C47111);
    const double C44267 = C28076 + C28075;
    const double C1050 =
        3 * ((-(C47307 * ce) / C46967) / C46946 - C47122 / C47111 +
             C47103 * C47317) -
        ((2 * C47307 + C47103 * C47315) * ce) / C47111 +
        C47103 *
            (2 * C47317 - (C47315 * ce) / C47111 +
             C47103 * ((-(C47103 * C47229 * ce) / C46967) / C46946 - C47144 +
                       C47103 * ((-(C47103 * C47154) / C46967) / C46946 -
                                 (C47229 * ce) / C47111)));
    const double C1192 = (zP - zQ) * ((-(C47307 * ce) / C46967) / C46946 -
                                      C47122 / C47111 + C47103 * C47317);
    const double C1195 = (-(C47103 * C47122) / C46967) / C46946 -
                         (C47219 * ce) / C47111 + C47317 * std::pow(zP - zQ, 2);
    const double C1196 = (-(C47307 * ce) / C46967) / C46946 - C47122 / C47111 +
                         C47103 * C47317 +
                         ((-(C47103 * C47229 * ce) / C46967) / C46946 - C47144 +
                          C47103 * ((-(C47103 * C47154) / C46967) / C46946 -
                                    (C47229 * ce) / C47111)) *
                             std::pow(zP - zQ, 2);
    const double C1568 =
        (zP - zQ) *
        (2 * C47317 - (C47315 * ce) / C47111 +
         C47103 * ((-(C47103 * C47229 * ce) / C46967) / C46946 - C47144 +
                   C47103 * ((-(C47103 * C47154) / C46967) / C46946 -
                             (C47229 * ce) / C47111)));
    const double C2248 =
        2 * C47349 * C47317 +
        C47349 * (C47317 + ((-(C47103 * C47154) / C46967) / C46946 -
                            (C47229 * ce) / C47111) *
                               C47353);
    const double C47170 = C47100 * C47168;
    const double C47173 = 2 * C47168;
    const double C47320 = C47103 * C47168;
    const double C47394 = C47168 - C47391;
    const double C1048 =
        2 * (C47103 * C47141 - (C47225 * ce) / C47111) -
        ((C47225 + C47234 * std::pow(C47103, 2)) * ce) / C47111 +
        C47103 * (C47141 - (C47103 * C47234 * ce) / C47111 +
                  C47103 * (C47103 * C47168 - (C47234 * ce) / C47111));
    const double C1880 =
        2 * C47349 * C47141 + C47349 * (C47141 + C47168 * std::pow(C47349, 2));
    const double C47380 = C47103 * C47378;
    const double C47416 = 2 * C47378;
    const double C6801 =
        3 * (C47317 + C47378 * C47353) +
        C47349 * (2 * C47349 * C47378 +
                  C47349 * (C47378 + ((-(C47103 * C47190) / C46967) / C46946 -
                                      (C47243 * ce) / C47111) *
                                         C47353));
    const double C12375 =
        4 * ((-2 * C47349 * C47133) / C47111 + C47349 * C47411) +
        C47349 * (3 * C47411 +
                  C47349 * ((-2 * C47349 * C47154) / C47111 +
                            C47349 * ((-(C47190 * C47353) / C46967) / C46946 -
                                      C47176)));
    const double C47206 = C47100 * C47204;
    const double C47384 = C47103 * C47204;
    const double C47413 = C47204 * C47353;
    const double C1883 =
        3 * (C47141 + C47168 * C47353) +
        C47349 * (2 * C47349 * C47168 + C47349 * (C47168 + C47204 * C47353));
    const double C47440 = C47103 * C47437;
    const double C47450 = C47437 * C47353;
    const double C47461 = C47349 * C47460;
    const double C48196 = C48160 / C46967;
    const double C48231 = C48200 / C46984;
    const double C48232 = C48202 + C48168;
    const double C559 = C48168 - C47871 / C46971;
    const double C48199 = C48164 / C46967;
    const double C48218 = C48184 / C46967;
    const double C48241 = C48221 / C46984;
    const double C48242 = C48222 + C48188;
    const double C2135 = C48188 - C47994 / C46971;
    const double C48220 = C48185 / C46967;
    const double C42957 = C42950 * C48095;
    const double C44195 = C44188 - C27953;
    const double C44430 = C44424 - C28271;
    const double C44272 = C44266 * C48095;
    const double C44647 = C28565 - C44642;
    const double C47024 = C47020 / C46967;
    const double C29049 = C26253 * C2355;
    const double C29047 = C22577 * C2355;
    const double C29043 = C26256 * C2355;
    const double C29039 = C22249 * C2355;
    const double C29035 = C26250 * C2355;
    const double C29029 = C22245 * C2355;
    const double C29025 = C26247 * C2355;
    const double C29397 = C26251 * C2355;
    const double C31097 = C23599 * C2355;
    const double C31093 = C28065 * C2355;
    const double C44994 = C28430 * C2355;
    const double C46517 = C28070 * C2355;
    const double C47035 = C47029 / C46967;
    const double C27639 = C22575 * C1306;
    const double C30953 = C22575 * C2464;
    const double C48253 = C48212 + C48248;
    const double C1298 = C48238 - (C47954 * C47943) / C46967;
    const double C1021 = C48239 / C46984 - C47952 / C48203;
    const double C48249 = C48214 + C48238;
    const double C43607 = C43600 - C27155;
    const double C22439 = C21591 * C5705;
    const double C22573 = C21591 * C5883;
    const double C22943 = C21591 * C6405;
    const double C23597 = C21591 * C7273;
    const double C4795 = C4601 * C282;
    const double C4779 = C48194 * C282;
    const double C16107 = C15913 * C282;
    const double C16091 = C48194 * C282;
    const double C21732 = C47839 * C282;
    const double C4787 = C48194 * C286;
    const double C5103 = C4601 * C286;
    const double C16099 = C48194 * C286;
    const double C16415 = C15913 * C286;
    const double C21966 = C47839 * C286;
    const double C10649 = C48194 * C429;
    const double C10969 = C4601 * C429;
    const double C26546 = C47839 * C429;
    const double C32042 = C48194 * C429;
    const double C32362 = C15913 * C429;
    const double C10677 = C4601 * C439;
    const double C10657 = C48194 * C439;
    const double C26246 = C47839 * C439;
    const double C32070 = C15913 * C439;
    const double C32050 = C48194 * C439;
    const double C5455 = C4601 * C824;
    const double C5447 = C48194 * C824;
    const double C16767 = C15913 * C824;
    const double C16759 = C48194 * C824;
    const double C22238 = C47839 * C824;
    const double C26231 = C23387 * C116;
    const double C28283 = C23387 * C561;
    const double C28281 = C23387 * C562;
    const double C29053 = C23387 * C2355;
    const double C29051 = C23387 * C2356;
    const double C43856 = C23387 * C954;
    const double C45660 = C23387 * C262;
    const double C5706 =
        4 * ((-2 * C47564) / C46967 - (C47103 * C47652) / C46967 -
             (C47565 * ce) / C46967) +
        C47103 *
            ((-3 * C47652) / C46967 +
             C47103 *
                 ((-2 * C47644) / C46967 -
                  (C47103 * (C47103 * (C47103 * C47100 * C47192 + C47267 * ce) +
                             C47175 + C47103 * C47267 * ce)) /
                      C46967 -
                  (C47646 * ce) / C46967) -
             (C47651 * ce) / C46967) -
        ((3 * C47565 + C47103 * C47651) * ce) / C46967;
    const double C5884 =
        (-2 * C47564) / C46967 - (C47103 * C47652) / C46967 -
        (C47565 * ce) / C46967 +
        ((-2 * C47644) / C46967 -
         (C47103 * (C47103 * (C47103 * C47100 * C47192 + C47267 * ce) + C47175 +
                    C47103 * C47267 * ce)) /
             C46967 -
         (C47646 * ce) / C46967) *
            C47353;
    const double C6406 =
        C47349 *
        ((-3 * C47652) / C46967 +
         C47103 *
             ((-2 * C47644) / C46967 -
              (C47103 * (C47103 * (C47103 * C47100 * C47192 + C47267 * ce) +
                         C47175 + C47103 * C47267 * ce)) /
                  C46967 -
              (C47646 * ce) / C46967) -
         (C47651 * ce) / C46967);
    const double C7274 =
        (-2 * C47349 * C47652) / C46967 -
        (C47349 * ((C47103 * (C47103 * C47100 * C47192 + C47267 * ce) + C47175 +
                    C47103 * C47267 * ce) *
                       C47353 +
                   C47652)) /
            C46967;
    const double C47256 = C47240 + C47255;
    const double C47331 = C47329 / C47111;
    const double C1178 = (C47103 * C47237 + C47327 * C47353) / C46946;
    const double C2244 =
        (2 * C47349 * C47327 + C47349 * (C47327 + C47103 * C47279 * C47353)) /
        C46946;
    const double C6057 = C48194 * C1035;
    const double C17353 = C48194 * C1035;
    const double C21736 = C47839 * C1035;
    const double C6263 = C48194 * C1172;
    const double C17559 = C48194 * C1172;
    const double C22242 = C47839 * C1172;
    const double C12731 = C48194 * C1870;
    const double C34116 = C48194 * C1870;
    const double C42956 = C47839 * C1870;
    const double C5731 = C5720 + C5721;
    const double C17035 = C17024 + C17025;
    const double C22685 = C22681 + C22682;
    const double C5921 = C5906 + C5907;
    const double C17217 = C17202 + C17203;
    const double C23389 = C23383 + C23384;
    const double C6419 = C6412 + C6413;
    const double C17707 = C17700 + C17701;
    const double C22837 = C22833 + C22834;
    const double C28424 = C28291 * C116;
    const double C44428 = C28291 * C562;
    const double C44996 = C28291 * C2356;
    const double C22443 = C22437 + C22438;
    const double C22581 = C22571 + C22572;
    const double C22945 = C22941 + C22942;
    const double C47704 = C47702 / C46967;
    const double C47209 = C47185 + C47207;
    const double C47281 = C47261 + C47280;
    const double C47332 = C47254 + C47330;
    const double C5704 = (4 * (2 * C47319 + C47103 * C47324) +
                          C47103 * (3 * C47324 + C47103 * C47396)) /
                         C46946;
    const double C5882 =
        (2 * C47319 + C47103 * C47324 + C47396 * C47353) / C46946;
    const double C6404 = (C47349 * (3 * C47324 + C47103 * C47396)) / C46946;
    const double C22429 = (5 * (3 * C47315 + C47103 * C47376) +
                           C47103 * (4 * C47376 + C47103 * C47441)) /
                          C46946;
    const double C22555 =
        (3 * C47315 + C47103 * C47376 + C47441 * C47353) / C46946;
    const double C22937 = (C47349 * (4 * C47376 + C47103 * C47441)) / C46946;
    const double C4793 = C4601 * C294;
    const double C4777 = C48194 * C294;
    const double C16105 = C15913 * C294;
    const double C16089 = C48194 * C294;
    const double C21730 = C47839 * C294;
    const double C4785 = C4601 * C298;
    const double C4769 = C48194 * C298;
    const double C16097 = C15913 * C298;
    const double C16081 = C48194 * C298;
    const double C21722 = C47839 * C298;
    const double C10651 = C4601 * C448;
    const double C10639 = C48194 * C448;
    const double C26224 = C47839 * C448;
    const double C32044 = C15913 * C448;
    const double C32032 = C48194 * C448;
    const double C10663 = C48194 * C453;
    const double C10659 = C4601 * C453;
    const double C26230 = C47839 * C453;
    const double C32056 = C48194 * C453;
    const double C32052 = C15913 * C453;
    const double C5453 = C4601 * C833;
    const double C5445 = C48194 * C833;
    const double C16765 = C15913 * C833;
    const double C16757 = C48194 * C833;
    const double C22232 = C47839 * C833;
    const double C44273 = C44267 * C48095;
    const double C5723 = C4601 * C1050;
    const double C17027 = C15913 * C1050;
    const double C22436 = C47839 * C1050;
    const double C5895 = C4601 * C1192;
    const double C17191 = C15913 * C1192;
    const double C22228 = C47839 * C1192;
    const double C5903 = C4601 * C1195;
    const double C17199 = C15913 * C1195;
    const double C22566 = C47839 * C1195;
    const double C5909 = C4601 * C1196;
    const double C17205 = C15913 * C1196;
    const double C22570 = C47839 * C1196;
    const double C6415 = C4601 * C1568;
    const double C17703 = C15913 * C1568;
    const double C22562 = C47839 * C1568;
    const double C7283 = C4601 * C2248;
    const double C18555 = C15913 * C2248;
    const double C23594 = C47839 * C2248;
    const double C47171 = C47163 + C47170;
    const double C47188 = C47173 - C47181;
    const double C47325 = C47320 - C47323;
    const double C5715 = C48194 * C1048;
    const double C6059 = C4601 * C1048;
    const double C17019 = C48194 * C1048;
    const double C17355 = C15913 * C1048;
    const double C21726 = C47839 * C1048;
    const double C12385 = C48194 * C1880;
    const double C12729 = C4601 * C1880;
    const double C28426 = C47839 * C1880;
    const double C33770 = C48194 * C1880;
    const double C34114 = C15913 * C1880;
    const double C47381 = C47379 + C47380;
    const double C47429 = C47416 - C47423;
    const double C28058 = C47839 * C6801;
    const double C44269 = C47839 * C12375;
    const double C47208 = C47199 + C47206;
    const double C47392 = C47384 - C47388;
    const double C47414 = C47168 + C47413;
    const double C12387 = C48194 * C1883;
    const double C33772 = C48194 * C1883;
    const double C44536 = C47839 * C1883;
    const double C47442 = C47439 + C47440;
    const double C47451 = C47378 + C47450;
    const double C47462 = C47457 + C47461;
    const double C48252 = C48196 + C48244;
    const double C558 = C48231 - (C47873 * C47856) / C46967;
    const double C110 = C48232 / C46984 - C47871 / C48203;
    const double C48245 = C48199 + C48231;
    const double C48254 = C48218 + C48250;
    const double C2134 = C48241 - (C47996 * C47985) / C46967;
    const double C1859 = C48242 / C46984 - C47994 / C48203;
    const double C48251 = C48220 + C48241;
    const double C47028 = C47024 - C47005;
    const double C44992 = C29043 + C29042;
    const double C46516 = C31094 + C31093;
    const double C30956 = C22246 * C48253;
    const double C30948 = C26248 * C48253;
    const double C46411 = C26255 * C48253;
    const double C1018 =
        (C48246 + 2 * C47947) / C46984 - (C48253 * C47943) / C46967;
    const double C27636 = C22246 * C1298;
    const double C30950 = C22246 * C48249;
    const double C1019 =
        (C48234 + 2 * C47954 + C48253) / C46984 - (C48249 * C47943) / C46967;
    const double C1020 = (C48207 + C47951 / C46967 + C48249) / C46984 -
                         (C48239 * C47943) / C46967;
    const double C4822 = C4794 + C4795;
    const double C4814 = C4778 + C4779;
    const double C16134 = C16106 + C16107;
    const double C16126 = C16090 + C16091;
    const double C21753 = C21731 + C21732;
    const double C4818 = C4786 + C4787;
    const double C5110 = C5102 + C5103;
    const double C16130 = C16098 + C16099;
    const double C16422 = C16414 + C16415;
    const double C21973 = C21965 + C21966;
    const double C10687 = C10648 + C10649;
    const double C10973 = C10968 + C10969;
    const double C26548 = C26545 + C26546;
    const double C32080 = C32041 + C32042;
    const double C32366 = C32361 + C32362;
    const double C10701 = C10676 + C10677;
    const double C10691 = C10656 + C10657;
    const double C26260 = C26245 + C26246;
    const double C32094 = C32069 + C32070;
    const double C32084 = C32049 + C32050;
    const double C5470 = C5454 + C5455;
    const double C5466 = C5446 + C5447;
    const double C16782 = C16766 + C16767;
    const double C16778 = C16758 + C16759;
    const double C22253 = C22237 + C22238;
    const double C47257 = C47256 + C47251;
    const double C7001 = C48194 * C1178;
    const double C18281 = C48194 * C1178;
    const double C26242 = C47839 * C1178;
    const double C6063 = C6056 + C6057;
    const double C17359 = C17352 + C17353;
    const double C21755 = C21735 + C21736;
    const double C6269 = C6262 + C6263;
    const double C17565 = C17558 + C17559;
    const double C22255 = C22241 + C22242;
    const double C12736 = C12730 + C12731;
    const double C34121 = C34115 + C34116;
    const double C42961 = C42955 + C42956;
    const double C28285 = C23389 * C562;
    const double C29055 = C23389 * C2356;
    const double C43860 = C23389 * C955;
    const double C45414 = C23389 * C47053;
    const double C45664 = C23389 * C263;
    const double C27501 = C22837 * C955;
    const double C29621 = C22837 * C47053;
    const double C29957 = C22837 * C263;
    const double C27165 = C22581 * C955;
    const double C27963 = C22581 * C263;
    const double C31645 = C22581 * C47053;
    const double C43966 = C22581 * C1306;
    const double C46416 = C22581 * C2464;
    const double C27647 = C22945 * C1306;
    const double C30961 = C22945 * C2464;
    const double C47705 = C47690 - C47704;
    const double C137 = 5 * ((-3 * C47138) / C46967 + C47100 * C47169) +
                        C47100 * (4 * C47169 + C47100 * C47209);
    const double C293 = (-3 * C47138) / C46967 + C47100 * C47169 +
                        C47103 * (C47103 * C47209 - (C47487 * ce) / C46967) -
                        (C47103 * C47487 * ce) / C46967;
    const double C446 =
        (-3 * C47138) / C46967 + C47100 * C47169 + C47209 * C47353;
    const double C565 = C47103 * (4 * C47169 + C47100 * C47209) -
                        ((4 * C47483 + C47100 * C47487) * ce) / C46967;
    const double C669 = C47349 * (4 * C47169 + C47100 * C47209);
    const double C831 = C47349 * (C47103 * C47209 - (C47487 * ce) / C46967);
    const double C47282 = C47281 + C47273;
    const double C1043 = (3 * (C47237 + C47254 * C47310) +
                          C47103 * (2 * C47327 + C47103 * C47332)) /
                         C46946;
    const double C1186 = (C47237 + C47254 * C47310 + C47332 * C47353) / C46946;
    const double C1564 = (C47349 * (2 * C47327 + C47103 * C47332)) / C46946;
    const double C4821 = C4792 + C4793;
    const double C4813 = C4776 + C4777;
    const double C16133 = C16104 + C16105;
    const double C16125 = C16088 + C16089;
    const double C21752 = C21729 + C21730;
    const double C4817 = C4784 + C4785;
    const double C4809 = C4768 + C4769;
    const double C16129 = C16096 + C16097;
    const double C16121 = C16080 + C16081;
    const double C21748 = C21721 + C21722;
    const double C10688 = C10650 + C10651;
    const double C10682 = C10638 + C10639;
    const double C26252 = C26223 + C26224;
    const double C32081 = C32043 + C32044;
    const double C32075 = C32031 + C32032;
    const double C10694 = C10662 + C10663;
    const double C10692 = C10658 + C10659;
    const double C26254 = C26229 + C26230;
    const double C32087 = C32055 + C32056;
    const double C32085 = C32051 + C32052;
    const double C5469 = C5452 + C5453;
    const double C5465 = C5444 + C5445;
    const double C16781 = C16764 + C16765;
    const double C16777 = C16756 + C16757;
    const double C22250 = C22231 + C22232;
    const double C5732 = C5722 + C5723;
    const double C17036 = C17026 + C17027;
    const double C22442 = C22435 + C22436;
    const double C5915 = C5894 + C5895;
    const double C17211 = C17190 + C17191;
    const double C22248 = C22227 + C22228;
    const double C5919 = C5902 + C5903;
    const double C17215 = C17198 + C17199;
    const double C22578 = C22565 + C22566;
    const double C5922 = C5908 + C5909;
    const double C17218 = C17204 + C17205;
    const double C22580 = C22569 + C22570;
    const double C6420 = C6414 + C6415;
    const double C17708 = C17702 + C17703;
    const double C22576 = C22561 + C22562;
    const double C7288 = C7282 + C7283;
    const double C18560 = C18554 + C18555;
    const double C23600 = C23593 + C23594;
    const double C143 =
        4 * (2 * C47141 - (ae * C47138) / C47111 + C47100 * C47171) +
        (((-3 * C47138) / C46967 + C47100 * C47169) * ae) / C46946 +
        C47100 *
            (3 * C47171 + (C47169 * ae) / C46946 +
             C47100 * (2 * C47168 - (ae * C47162) / C47111 +
                       C47100 * ((-(ae * C47100 * C47156) / C46967) / C46946 -
                                 C47154 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47107, 7) *
                                              bs[7] * C47116) /
                                            C46967) /
                                               C46946 -
                                           (ae * C47156) / C47111))));
    const double C299 = (-(ae * C47125) / C46967) / C46946 - C47122 / C47111 +
                        C47100 * C47141 - (C47103 * C47237 * ce) / C47111 +
                        C47103 * (C47103 * C47171 - (C47237 * ce) / C47111);
    const double C300 =
        C47103 * (2 * C47141 - (ae * C47138) / C47111 + C47100 * C47171) -
        ((2 * C47225 + C47100 * C47237 + (C47214 + C47228 * C47129) * ae) *
         ce) /
            C47111;
    const double C449 =
        (zP - zQ) * (2 * C47141 - (ae * C47138) / C47111 + C47100 * C47171);
    const double C454 = (-(ae * C47125) / C46967) / C46946 - C47122 / C47111 +
                        C47100 * C47141 + C47171 * std::pow(zP - zQ, 2);
    const double C834 = (zP - zQ) * (C47103 * C47171 - (C47237 * ce) / C47111);
    const double C1051 =
        3 * (C47141 - (C47319 * ce) / C47111 + C47103 * C47325) -
        ((2 * C47319 + C47103 * C47324) * ce) / C47111 +
        C47103 *
            (2 * C47325 - (C47324 * ce) / C47111 +
             C47103 * (C47168 - (C47103 * C47250 * ce) / C47111 +
                       C47103 * (C47103 * C47204 - (C47250 * ce) / C47111)));
    const double C1191 =
        (zP - zQ) * (C47141 - (C47319 * ce) / C47111 + C47103 * C47325);
    const double C1194 = C47103 * C47141 - (C47225 * ce) / C47111 +
                         C47325 * std::pow(zP - zQ, 2);
    const double C1197 = C47141 - (C47319 * ce) / C47111 + C47103 * C47325 +
                         (C47168 - (C47103 * C47250 * ce) / C47111 +
                          C47103 * (C47103 * C47204 - (C47250 * ce) / C47111)) *
                             std::pow(zP - zQ, 2);
    const double C1569 =
        (zP - zQ) *
        (2 * C47325 - (C47324 * ce) / C47111 +
         C47103 * (C47168 - (C47103 * C47250 * ce) / C47111 +
                   C47103 * (C47103 * C47204 - (C47250 * ce) / C47111)));
    const double C2249 =
        2 * C47349 * C47325 +
        C47349 * (C47325 + (C47103 * C47204 - (C47250 * ce) / C47111) * C47353);
    const double C5728 = C5714 + C5715;
    const double C6064 = C6058 + C6059;
    const double C17032 = C17018 + C17019;
    const double C17360 = C17354 + C17355;
    const double C21750 = C21725 + C21726;
    const double C12397 = C12384 + C12385;
    const double C12735 = C12728 + C12729;
    const double C28429 = C28425 + C28426;
    const double C33782 = C33769 + C33770;
    const double C34120 = C34113 + C34114;
    const double C5707 =
        4 * (2 * C47317 - (C47315 * ce) / C47111 + C47103 * C47381) -
        ((3 * C47315 + C47103 * C47376) * ce) / C47111 +
        C47103 *
            (3 * C47381 - (C47376 * ce) / C47111 +
             C47103 *
                 (2 * C47378 - (C47370 * ce) / C47111 +
                  C47103 *
                      ((-(C47103 * C47243 * ce) / C46967) / C46946 - C47176 +
                       C47103 * ((-(C47103 * C47190) / C46967) / C46946 -
                                 (C47243 * ce) / C47111))));
    const double C5885 =
        2 * C47317 - (C47315 * ce) / C47111 + C47103 * C47381 +
        (2 * C47378 - (C47370 * ce) / C47111 +
         C47103 * ((-(C47103 * C47243 * ce) / C46967) / C46946 - C47176 +
                   C47103 * ((-(C47103 * C47190) / C46967) / C46946 -
                             (C47243 * ce) / C47111))) *
            C47353;
    const double C6407 =
        C47349 *
        (3 * C47381 - (C47376 * ce) / C47111 +
         C47103 *
             (2 * C47378 - (C47370 * ce) / C47111 +
              C47103 * ((-(C47103 * C47243 * ce) / C46967) / C46946 - C47176 +
                        C47103 * ((-(C47103 * C47190) / C46967) / C46946 -
                                  (C47243 * ce) / C47111))));
    const double C7275 =
        2 * C47349 * C47381 +
        C47349 *
            (C47381 + ((-(C47103 * C47243 * ce) / C46967) / C46946 - C47176 +
                       C47103 * ((-(C47103 * C47190) / C46967) / C46946 -
                                 (C47243 * ce) / C47111)) *
                          C47353);
    const double C28067 = C28057 + C28058;
    const double C44274 = C44268 + C44269;
    const double C47210 = C47100 * C47208;
    const double C47328 = C47103 * C47208;
    const double C1047 =
        2 * (C47103 * C47171 - (C47237 * ce) / C47111) -
        ((C47237 + C47254 * std::pow(C47103, 2)) * ce) / C47111 +
        C47103 * (C47171 - (C47103 * C47254 * ce) / C47111 +
                  C47103 * (C47103 * C47208 - (C47254 * ce) / C47111));
    const double C1879 =
        2 * C47349 * C47171 + C47349 * (C47171 + C47208 * std::pow(C47349, 2));
    const double C1884 =
        3 * (C47171 + C47208 * C47353) +
        C47349 *
            (2 * C47349 * C47208 +
             C47349 *
                 (C47208 +
                  ((-(ae * C47100 * C47192) / C46967) / C46946 -
                   C47190 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (ae * C47192) / C47111)) *
                      C47353));
    const double C47395 = C47103 * C47392;
    const double C6802 =
        3 * (C47325 + C47392 * C47353) +
        C47349 *
            (2 * C47349 * C47392 +
             C47349 *
                 (C47392 +
                  (C47103 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (ae * C47192) / C47111) -
                   (C47272 * ce) / C47111) *
                      C47353));
    const double C12376 =
        4 * (2 * C47349 * C47168 + C47349 * C47414) +
        C47349 *
            (3 * C47414 +
             C47349 * (2 * C47349 * C47204 +
                       C47349 * (C47204 + ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46967) /
                                               C46946 -
                                           (ae * C47192) / C47111) *
                                              C47353)));
    const double C12398 = C12386 + C12387;
    const double C33783 = C33771 + C33772;
    const double C44540 = C44535 + C44536;
    const double C47443 = C47103 * C47442;
    const double C23231 =
        3 * (C47381 + C47442 * C47353) +
        C47349 *
            (2 * C47349 * C47442 +
             C47349 *
                 (C47442 +
                  ((-(C47103 * C47265 * ce) / C46967) / C46946 -
                   C47190 / C47111 +
                   C47103 * ((-(C47103 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (C47265 * ce) / C47111)) *
                      C47353));
    const double C28049 =
        4 * (2 * C47349 * C47378 + C47349 * C47451) +
        C47349 *
            (3 * C47451 +
             C47349 * (2 * C47349 * C47437 +
                       C47349 * (C47437 + ((-(C47103 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46967) /
                                               C46946 -
                                           (C47265 * ce) / C47111) *
                                              C47353)));
    const double C44264 =
        5 * (3 * C47411 + C47349 * C47462) +
        C47349 * (4 * C47462 +
                  C47349 * (3 * C47460 +
                            C47349 * ((-2 * C47349 * C47190) / C47111 +
                                      C47349 * ((-(std::pow(C47105, 8) * bs[8] *
                                                   C47116 * C47353) /
                                                 C46967) /
                                                    C46946 -
                                                C47190 / C47111))));
    const double C107 =
        (C48243 + 2 * C47865) / C46984 - (C48252 * C47856) / C46967;
    const double C108 =
        (C48230 + 2 * C47873 + C48252) / C46984 - (C48245 * C47856) / C46967;
    const double C109 = (C48201 + C47870 / C46967 + C48245) / C46984 -
                        (C48232 * C47856) / C46967;
    const double C1856 =
        (C48247 + 2 * C47989) / C46984 - (C48254 * C47985) / C46967;
    const double C1857 =
        (C48236 + 2 * C47996 + C48254) / C46984 - (C48251 * C47985) / C46967;
    const double C1858 = (C48210 + C47993 / C46967 + C48251) / C46984 -
                         (C48242 * C47985) / C46967;
    const double C47034 = C47028 / C46984;
    const double C47033 = C46965 * C47028;
    const double C44998 = C44992 - C29041;
    const double C46521 = C31095 - C46516;
    const double C26550 = C26548 * C116;
    const double C26274 = C26260 * C116;
    const double C43314 = C26260 * C561;
    const double C45260 = C26260 * C2355;
    const double C26225 = C22253 * C116;
    const double C26765 = C22253 * C561;
    const double C26763 = C22253 * C562;
    const double C29401 = C22253 * C2355;
    const double C29399 = C22253 * C2356;
    const double C135 = (4 * (2 * C47225 + C47100 * C47237 + C47477 * ae) +
                         C47100 * (3 * C47237 + C47100 * C47257 + C47483 * ae) +
                         (3 * C47477 + C47100 * C47483) * ae) /
                        C46946;
    const double C288 =
        (2 * C47225 + C47100 * C47237 + C47477 * ae + C47257 * C47310) / C46946;
    const double C290 =
        (C47103 * (3 * C47237 + C47100 * C47257 + C47483 * ae)) / C46946;
    const double C436 =
        (C47349 * (3 * C47237 + C47100 * C47257 + C47483 * ae)) / C46946;
    const double C444 =
        (2 * C47225 + C47100 * C47237 + C47477 * ae + C47257 * C47353) / C46946;
    const double C828 = (C47349 * C47103 * C47257) / C46946;
    const double C7007 = C7000 + C7001;
    const double C18287 = C18280 + C18281;
    const double C26258 = C26241 + C26242;
    const double C26767 = C22255 * C562;
    const double C29403 = C22255 * C2356;
    const double C42963 = C42961 * C116;
    const double C47706 = C47705 - C47693;
    const double C47283 = C47100 * C47282;
    const double C1308 =
        (2 * C47103 * C47257 + C47103 * (C47257 + C47282 * C47310)) / C46946;
    const double C1458 = (C47349 * (C47257 + C47282 * C47310)) / C46946;
    const double C2032 = (C47103 * C47257 + C47103 * C47282 * C47353) / C46946;
    const double C2138 =
        (2 * C47349 * C47257 + C47349 * (C47257 + C47282 * C47353)) / C46946;
    const double C26266 = C26252 * C47888;
    const double C26762 = C26252 * C48175;
    const double C29398 = C26252 * C2349;
    const double C26268 = C26254 * C47888;
    const double C28280 = C26254 * C48175;
    const double C29050 = C26254 * C2349;
    const double C43857 = C26254 * C947;
    const double C45411 = C26254 * C47947;
    const double C45661 = C26254 * C48246;
    const double C26215 = C22250 * C47888;
    const double C26758 = C22250 * C48175;
    const double C26756 = C22250 * C47951;
    const double C27498 = C22250 * C947;
    const double C27494 = C22250 * C948;
    const double C29038 = C22250 * C2349;
    const double C29036 = C22250 * C47951;
    const double C29618 = C22250 * C47947;
    const double C29614 = C22250 * C47954;
    const double C29954 = C22250 * C48246;
    const double C29950 = C22250 * C48234;
    const double C26752 = C22248 * C47951;
    const double C27152 = C22248 * C948;
    const double C27148 = C22248 * C48207;
    const double C27644 = C22248 * C1298;
    const double C27638 = C22248 * C1299;
    const double C27950 = C22248 * C48234;
    const double C27946 = C22248 * C48207;
    const double C29032 = C22248 * C47951;
    const double C29608 = C22248 * C47954;
    const double C29604 = C22248 * C2723;
    const double C30958 = C22248 * C48249;
    const double C30952 = C22248 * C48239;
    const double C26233 = C22578 * C47888;
    const double C27162 = C22578 * C947;
    const double C27158 = C22578 * C948;
    const double C27960 = C22578 * C48246;
    const double C27956 = C22578 * C48234;
    const double C28276 = C22578 * C48175;
    const double C28274 = C22578 * C47951;
    const double C29046 = C22578 * C2349;
    const double C29044 = C22578 * C47951;
    const double C31642 = C22578 * C47947;
    const double C31638 = C22578 * C47954;
    const double C43963 = C22578 * C1298;
    const double C46413 = C22578 * C48249;
    const double C27164 = C22580 * C948;
    const double C27160 = C22580 * C48207;
    const double C27962 = C22580 * C48234;
    const double C27958 = C22580 * C48207;
    const double C28278 = C22580 * C47951;
    const double C29048 = C22580 * C47951;
    const double C31644 = C22580 * C47954;
    const double C31640 = C22580 * C2723;
    const double C43965 = C22580 * C1299;
    const double C46415 = C22580 * C48239;
    const double C27154 = C22576 * C48207;
    const double C27646 = C22576 * C1299;
    const double C27640 = C22576 * C48217;
    const double C27952 = C22576 * C48207;
    const double C29610 = C22576 * C2723;
    const double C30960 = C22576 * C48239;
    const double C30954 = C22576 * C48217;
    const double C28056 = C23600 * C47888;
    const double C28568 = C23600 * C48175;
    const double C28566 = C23600 * C47951;
    const double C31098 = C23600 * C2349;
    const double C31096 = C23600 * C47951;
    const double C43604 = C23600 * C948;
    const double C44192 = C23600 * C48234;
    const double C46930 = C23600 * C47954;
    const double C4799 = C4601 * C299;
    const double C4783 = C48194 * C299;
    const double C16111 = C15913 * C299;
    const double C16095 = C48194 * C299;
    const double C21734 = C47839 * C299;
    const double C4791 = C48194 * C300;
    const double C5107 = C4601 * C300;
    const double C16103 = C48194 * C300;
    const double C16419 = C15913 * C300;
    const double C21968 = C47839 * C300;
    const double C10653 = C48194 * C449;
    const double C10965 = C4601 * C449;
    const double C26544 = C47839 * C449;
    const double C32046 = C48194 * C449;
    const double C32358 = C15913 * C449;
    const double C10673 = C4601 * C454;
    const double C10661 = C48194 * C454;
    const double C26244 = C47839 * C454;
    const double C32066 = C15913 * C454;
    const double C32054 = C48194 * C454;
    const double C5459 = C4601 * C834;
    const double C5451 = C48194 * C834;
    const double C16771 = C15913 * C834;
    const double C16763 = C48194 * C834;
    const double C22240 = C47839 * C834;
    const double C5725 = C48194 * C1051;
    const double C17029 = C48194 * C1051;
    const double C22684 = C47839 * C1051;
    const double C5893 = C48194 * C1191;
    const double C6265 = C4601 * C1191;
    const double C17189 = C48194 * C1191;
    const double C17561 = C15913 * C1191;
    const double C22236 = C47839 * C1191;
    const double C5901 = C48194 * C1194;
    const double C7003 = C4601 * C1194;
    const double C17197 = C48194 * C1194;
    const double C18283 = C15913 * C1194;
    const double C23382 = C47839 * C1194;
    const double C5911 = C48194 * C1197;
    const double C17207 = C48194 * C1197;
    const double C23386 = C47839 * C1197;
    const double C6417 = C48194 * C1569;
    const double C17705 = C48194 * C1569;
    const double C22836 = C47839 * C1569;
    const double C7285 = C48194 * C2249;
    const double C18557 = C48194 * C2249;
    const double C28290 = C47839 * C2249;
    const double C28431 = C28429 * C47888;
    const double C44427 = C28429 * C48175;
    const double C44995 = C28429 * C2349;
    const double C22440 = C47839 * C5707;
    const double C22574 = C47839 * C5885;
    const double C22944 = C47839 * C6407;
    const double C23598 = C47839 * C7275;
    const double C28073 = C28067 * C47888;
    const double C44646 = C28067 * C47951;
    const double C46520 = C28067 * C47951;
    const double C44276 = C44274 * C47888;
    const double C47211 = C47188 + C47210;
    const double C47333 = C47328 - C47331;
    const double C6061 = C48194 * C1047;
    const double C17357 = C48194 * C1047;
    const double C21738 = C47839 * C1047;
    const double C12727 = C48194 * C1879;
    const double C34112 = C48194 * C1879;
    const double C42954 = C47839 * C1879;
    const double C47397 = C47394 + C47395;
    const double C44542 = C44540 * C47888;
    const double C47444 = C47429 + C47443;
    const double C47039 = C47034 - C47035;
    const double C47038 = C47033 + C48175;
    const double C4797 = C48194 * C288;
    const double C16109 = C48194 * C288;
    const double C21970 = C47839 * C288;
    const double C5105 = C48194 * C290;
    const double C16417 = C48194 * C290;
    const double C10967 = C48194 * C436;
    const double C32360 = C48194 * C436;
    const double C10675 = C48194 * C444;
    const double C32068 = C48194 * C444;
    const double C43163 = C47839 * C444;
    const double C5457 = C48194 * C828;
    const double C16769 = C48194 * C828;
    const double C26406 = C47839 * C828;
    const double C26272 = C26258 * C116;
    const double C43316 = C26258 * C562;
    const double C45262 = C26258 * C2356;
    const double C22430 =
        5 * ((-3 * C47638) / C46967 + C47103 * C47706 -
             (C47637 * ce) / C46967) +
        C47103 *
            (4 * C47706 +
             C47103 * ((-3 * C47700) / C46967 +
                       C47103 * ((-2 * C47691) / C46967 -
                                 (C47103 *
                                  (C47103 * (C47103 * C47192 + C47263 * ce) +
                                   C47156 + C47103 * C47263 * ce)) /
                                     C46967 -
                                 (C47694 * ce) / C46967) -
                       (C47699 * ce) / C46967) -
             (C47703 * ce) / C46967) -
        ((4 * C47637 + C47103 * C47703) * ce) / C46967;
    const double C22556 =
        (-3 * C47638) / C46967 + C47103 * C47706 - (C47637 * ce) / C46967 +
        ((-3 * C47700) / C46967 +
         C47103 * ((-2 * C47691) / C46967 -
                   (C47103 * (C47103 * (C47103 * C47192 + C47263 * ce) +
                              C47156 + C47103 * C47263 * ce)) /
                       C46967 -
                   (C47694 * ce) / C46967) -
         (C47699 * ce) / C46967) *
            C47353;
    const double C22938 =
        C47349 *
        (4 * C47706 +
         C47103 *
             ((-3 * C47700) / C46967 +
              C47103 * ((-2 * C47691) / C46967 -
                        (C47103 * (C47103 * (C47103 * C47192 + C47263 * ce) +
                                   C47156 + C47103 * C47263 * ce)) /
                            C46967 -
                        (C47694 * ce) / C46967) -
              (C47699 * ce) / C46967) -
         (C47703 * ce) / C46967);
    const double C23588 =
        2 * C47349 * C47706 +
        C47349 *
            (C47706 + ((-2 * C47691) / C46967 -
                       (C47103 * (C47103 * (C47103 * C47192 + C47263 * ce) +
                                  C47156 + C47103 * C47263 * ce)) /
                           C46967 -
                       (C47694 * ce) / C46967) *
                          C47353);
    const double C47284 = C47260 + C47283;
    const double C42951 = C26268 + C26267;
    const double C44425 = C28280 + C28279;
    const double C44993 = C29050 + C29049;
    const double C43608 = C43607 - C27158;
    const double C44196 = C44195 - C27956;
    const double C44432 = C44430 - C28274;
    const double C45000 = C44998 - C29044;
    const double C44648 = C44647 + C28566;
    const double C46522 = C46521 + C31096;
    const double C4824 = C4798 + C4799;
    const double C4816 = C4782 + C4783;
    const double C16136 = C16110 + C16111;
    const double C16128 = C16094 + C16095;
    const double C21754 = C21733 + C21734;
    const double C4820 = C4790 + C4791;
    const double C5112 = C5106 + C5107;
    const double C16132 = C16102 + C16103;
    const double C16424 = C16418 + C16419;
    const double C21974 = C21967 + C21968;
    const double C10689 = C10652 + C10653;
    const double C10971 = C10964 + C10965;
    const double C26547 = C26543 + C26544;
    const double C32082 = C32045 + C32046;
    const double C32364 = C32357 + C32358;
    const double C10699 = C10672 + C10673;
    const double C10693 = C10660 + C10661;
    const double C26259 = C26243 + C26244;
    const double C32092 = C32065 + C32066;
    const double C32086 = C32053 + C32054;
    const double C5472 = C5458 + C5459;
    const double C5468 = C5450 + C5451;
    const double C16784 = C16770 + C16771;
    const double C16780 = C16762 + C16763;
    const double C22254 = C22239 + C22240;
    const double C5733 = C5724 + C5725;
    const double C17037 = C17028 + C17029;
    const double C22686 = C22683 + C22684;
    const double C5914 = C5892 + C5893;
    const double C6270 = C6264 + C6265;
    const double C17210 = C17188 + C17189;
    const double C17566 = C17560 + C17561;
    const double C22252 = C22235 + C22236;
    const double C5918 = C5900 + C5901;
    const double C7008 = C7002 + C7003;
    const double C17214 = C17196 + C17197;
    const double C18288 = C18282 + C18283;
    const double C23388 = C23381 + C23382;
    const double C5923 = C5910 + C5911;
    const double C17219 = C17206 + C17207;
    const double C23390 = C23385 + C23386;
    const double C6421 = C6416 + C6417;
    const double C17709 = C17704 + C17705;
    const double C22838 = C22835 + C22836;
    const double C7289 = C7284 + C7285;
    const double C18561 = C18556 + C18557;
    const double C28292 = C28289 + C28290;
    const double C44534 = C28432 + C28431;
    const double C22444 = C22439 + C22440;
    const double C22582 = C22573 + C22574;
    const double C22946 = C22943 + C22944;
    const double C23602 = C23597 + C23598;
    const double C144 =
        5 * (3 * C47171 + (C47169 * ae) / C46946 + C47100 * C47211) +
        ((4 * C47169 + C47100 * C47209) * ae) / C46946 +
        C47100 *
            (4 * C47211 + (C47209 * ae) / C46946 +
             C47100 *
                 (3 * C47208 + (C47205 * ae) / C46946 +
                  C47100 *
                      (2 * C47204 - (ae * C47198) / C47111 +
                       C47100 * ((-(ae * C47100 * C47192) / C46967) / C46946 -
                                 C47190 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46967) /
                                               C46946 -
                                           (ae * C47192) / C47111)))));
    const double C301 = 2 * C47141 - (ae * C47138) / C47111 + C47100 * C47171 -
                        (C47103 * C47257 * ce) / C47111 +
                        C47103 * (C47103 * C47211 - (C47257 * ce) / C47111);
    const double C302 =
        C47103 * (3 * C47171 + (C47169 * ae) / C46946 + C47100 * C47211) -
        ((3 * C47237 + C47100 * C47257 + (2 * C47231 + C47100 * C47249) * ae) *
         ce) /
            C47111;
    const double C451 =
        (zP - zQ) * (3 * C47171 + (C47169 * ae) / C46946 + C47100 * C47211);
    const double C455 = 2 * C47141 - (ae * C47138) / C47111 + C47100 * C47171 +
                        C47211 * std::pow(zP - zQ, 2);
    const double C456 =
        3 * C47171 + (C47169 * ae) / C46946 + C47100 * C47211 +
        (3 * C47208 + (C47205 * ae) / C46946 +
         C47100 *
             (2 * C47204 - (ae * C47198) / C47111 +
              C47100 *
                  ((-(ae * C47100 * C47192) / C46967) / C46946 -
                   C47190 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (ae * C47192) / C47111)))) *
            std::pow(zP - zQ, 2);
    const double C670 =
        (zP - zQ) *
        (4 * C47211 + (C47209 * ae) / C46946 +
         C47100 *
             (3 * C47208 + (C47205 * ae) / C46946 +
              C47100 * (2 * C47204 - (ae * C47198) / C47111 +
                        C47100 * ((-(ae * C47100 * C47192) / C46967) / C46946 -
                                  C47190 / C47111 +
                                  C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                               bs[8] * C47116) /
                                             C46967) /
                                                C46946 -
                                            (ae * C47192) / C47111)))));
    const double C835 = (zP - zQ) * (C47103 * C47211 - (C47257 * ce) / C47111);
    const double C1310 =
        2 * (C47103 * C47211 - (C47257 * ce) / C47111) -
        ((C47257 + C47282 * C47310) * ce) / C47111 +
        C47103 *
            (C47211 - (C47103 * C47282 * ce) / C47111 +
             C47103 *
                 (C47103 *
                      (2 * C47204 - (ae * C47198) / C47111 +
                       C47100 * ((-(ae * C47100 * C47192) / C46967) / C46946 -
                                 C47190 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46967) /
                                               C46946 -
                                           (ae * C47192) / C47111))) -
                  (C47282 * ce) / C47111));
    const double C1460 =
        (zP - zQ) *
        (C47211 - (C47103 * C47282 * ce) / C47111 +
         C47103 *
             (C47103 * (2 * C47204 - (ae * C47198) / C47111 +
                        C47100 * ((-(ae * C47100 * C47192) / C46967) / C46946 -
                                  C47190 / C47111 +
                                  C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                               bs[8] * C47116) /
                                             C46967) /
                                                C46946 -
                                            (ae * C47192) / C47111))) -
              (C47282 * ce) / C47111));
    const double C2034 =
        C47103 * C47211 - (C47257 * ce) / C47111 +
        (C47103 *
             (2 * C47204 - (ae * C47198) / C47111 +
              C47100 *
                  ((-(ae * C47100 * C47192) / C46967) / C46946 -
                   C47190 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (ae * C47192) / C47111))) -
         (C47282 * ce) / C47111) *
            C47353;
    const double C2140 =
        2 * C47349 * C47211 +
        C47349 *
            (C47211 +
             (2 * C47204 - (ae * C47198) / C47111 +
              C47100 *
                  ((-(ae * C47100 * C47192) / C46967) / C46946 -
                   C47190 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (ae * C47192) / C47111))) *
                 C47353);
    const double C1052 =
        3 * (C47171 - (C47327 * ce) / C47111 + C47103 * C47333) -
        ((2 * C47327 + C47103 * C47332) * ce) / C47111 +
        C47103 *
            (2 * C47333 - (C47332 * ce) / C47111 +
             C47103 *
                 (C47208 - (C47103 * C47279 * ce) / C47111 +
                  C47103 *
                      (C47103 * ((-(ae * C47100 * C47192) / C46967) / C46946 -
                                 C47190 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46967) /
                                               C46946 -
                                           (ae * C47192) / C47111)) -
                       (C47279 * ce) / C47111)));
    const double C1190 =
        (zP - zQ) * (C47171 - (C47327 * ce) / C47111 + C47103 * C47333);
    const double C1193 = C47103 * C47171 - (C47237 * ce) / C47111 +
                         C47333 * std::pow(zP - zQ, 2);
    const double C1198 =
        C47171 - (C47327 * ce) / C47111 + C47103 * C47333 +
        (C47208 - (C47103 * C47279 * ce) / C47111 +
         C47103 *
             (C47103 *
                  ((-(ae * C47100 * C47192) / C46967) / C46946 -
                   C47190 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (ae * C47192) / C47111)) -
              (C47279 * ce) / C47111)) *
            std::pow(zP - zQ, 2);
    const double C1570 =
        (zP - zQ) *
        (2 * C47333 - (C47332 * ce) / C47111 +
         C47103 *
             (C47208 - (C47103 * C47279 * ce) / C47111 +
              C47103 * (C47103 * ((-(ae * C47100 * C47192) / C46967) / C46946 -
                                  C47190 / C47111 +
                                  C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                               bs[8] * C47116) /
                                             C46967) /
                                                C46946 -
                                            (ae * C47192) / C47111)) -
                        (C47279 * ce) / C47111)));
    const double C2250 =
        2 * C47349 * C47333 +
        C47349 *
            (C47333 +
             (C47103 *
                  ((-(ae * C47100 * C47192) / C46967) / C46946 -
                   C47190 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (ae * C47192) / C47111)) -
              (C47279 * ce) / C47111) *
                 C47353);
    const double C6065 = C6060 + C6061;
    const double C17361 = C17356 + C17357;
    const double C21756 = C21737 + C21738;
    const double C12734 = C12726 + C12727;
    const double C34119 = C34111 + C34112;
    const double C42960 = C42953 + C42954;
    const double C5708 =
        4 * (2 * C47325 - (C47324 * ce) / C47111 + C47103 * C47397) -
        ((3 * C47324 + C47103 * C47396) * ce) / C47111 +
        C47103 *
            (3 * C47397 - (C47396 * ce) / C47111 +
             C47103 *
                 (2 * C47392 - (C47390 * ce) / C47111 +
                  C47103 *
                      (C47204 - (C47103 * C47272 * ce) / C47111 +
                       C47103 * (C47103 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46967) /
                                               C46946 -
                                           (ae * C47192) / C47111) -
                                 (C47272 * ce) / C47111))));
    const double C5886 =
        2 * C47325 - (C47324 * ce) / C47111 + C47103 * C47397 +
        (2 * C47392 - (C47390 * ce) / C47111 +
         C47103 *
             (C47204 - (C47103 * C47272 * ce) / C47111 +
              C47103 *
                  (C47103 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (ae * C47192) / C47111) -
                   (C47272 * ce) / C47111))) *
            C47353;
    const double C6408 =
        C47349 *
        (3 * C47397 - (C47396 * ce) / C47111 +
         C47103 *
             (2 * C47392 - (C47390 * ce) / C47111 +
              C47103 * (C47204 - (C47103 * C47272 * ce) / C47111 +
                        C47103 * (C47103 * ((-(C47100 * std::pow(C47105, 8) *
                                               bs[8] * C47116) /
                                             C46967) /
                                                C46946 -
                                            (ae * C47192) / C47111) -
                                  (C47272 * ce) / C47111))));
    const double C7276 =
        2 * C47349 * C47397 +
        C47349 *
            (C47397 +
             (C47204 - (C47103 * C47272 * ce) / C47111 +
              C47103 *
                  (C47103 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (ae * C47192) / C47111) -
                   (C47272 * ce) / C47111)) *
                 C47353);
    const double C22431 =
        5 * (3 * C47381 - (C47376 * ce) / C47111 + C47103 * C47444) -
        ((4 * C47376 + C47103 * C47441) * ce) / C47111 +
        C47103 *
            (4 * C47444 - (C47441 * ce) / C47111 +
             C47103 *
                 (3 * C47442 - (C47435 * ce) / C47111 +
                  C47103 *
                      (2 * C47437 - (C47428 * ce) / C47111 +
                       C47103 * ((-(C47103 * C47265 * ce) / C46967) / C46946 -
                                 C47190 / C47111 +
                                 C47103 * ((-(C47103 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46967) /
                                               C46946 -
                                           (C47265 * ce) / C47111)))));
    const double C22557 =
        3 * C47381 - (C47376 * ce) / C47111 + C47103 * C47444 +
        (3 * C47442 - (C47435 * ce) / C47111 +
         C47103 *
             (2 * C47437 - (C47428 * ce) / C47111 +
              C47103 *
                  ((-(C47103 * C47265 * ce) / C46967) / C46946 -
                   C47190 / C47111 +
                   C47103 * ((-(C47103 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (C47265 * ce) / C47111)))) *
            C47353;
    const double C22939 =
        C47349 *
        (4 * C47444 - (C47441 * ce) / C47111 +
         C47103 *
             (3 * C47442 - (C47435 * ce) / C47111 +
              C47103 * (2 * C47437 - (C47428 * ce) / C47111 +
                        C47103 * ((-(C47103 * C47265 * ce) / C46967) / C46946 -
                                  C47190 / C47111 +
                                  C47103 * ((-(C47103 * std::pow(C47105, 8) *
                                               bs[8] * C47116) /
                                             C46967) /
                                                C46946 -
                                            (C47265 * ce) / C47111)))));
    const double C23589 =
        2 * C47349 * C47444 +
        C47349 *
            (C47444 +
             (2 * C47437 - (C47428 * ce) / C47111 +
              C47103 *
                  ((-(C47103 * C47265 * ce) / C46967) / C46946 -
                   C47190 / C47111 +
                   C47103 * ((-(C47103 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46967) /
                                 C46946 -
                             (C47265 * ce) / C47111))) *
                 C47353);
    const double C29617 = C22251 * C47039;
    const double C29611 = C22249 * C47039;
    const double C29607 = C22247 * C47039;
    const double C29601 = C22245 * C47039;
    const double C31641 = C22579 * C47039;
    const double C31635 = C22577 * C47039;
    const double C45410 = C23387 * C47039;
    const double C46927 = C23599 * C47039;
    const double C1027 =
        (C47039 / C46984 + ((C46965 * C47053 + C2723) * ce) / C46967) / C46984 -
        ((C46965 * (C47053 / C46984 + (0 * ce) / C46967) + C48217) * de) /
            C46967;
    const double C1305 =
        C47039 / C46984 - ((C46965 * C47053 + C2723) * de) / C46967;
    const double C2463 =
        C47039 / C46984 + ((C46965 * C47053 + C2723) * ce) / C46967;
    const double C47042 = C47038 * de;
    const double C4823 = C4796 + C4797;
    const double C16135 = C16108 + C16109;
    const double C21975 = C21969 + C21970;
    const double C5111 = C5104 + C5105;
    const double C16423 = C16416 + C16417;
    const double C10972 = C10966 + C10967;
    const double C32365 = C32359 + C32360;
    const double C10700 = C10674 + C10675;
    const double C32093 = C32067 + C32068;
    const double C43165 = C43162 + C43163;
    const double C5471 = C5456 + C5457;
    const double C16783 = C16768 + C16769;
    const double C26409 = C26405 + C26406;
    const double C47285 = C47284 + C47278;
    const double C42958 = C42951 * C48095;
    const double C44431 = C28281 - C44425;
    const double C44999 = C29051 - C44993;
    const double C43609 = C43608 + C27159;
    const double C44197 = C44196 + C27957;
    const double C44434 = C44432 * C48095;
    const double C45002 = C45000 * C48095;
    const double C44649 = C44648 * C48095;
    const double C46523 = C46522 * C48095;
    const double C26549 = C26547 * C47888;
    const double C26273 = C26259 * C47888;
    const double C43315 = C26259 * C48175;
    const double C45261 = C26259 * C2349;
    const double C26226 = C22254 * C47888;
    const double C26766 = C22254 * C48175;
    const double C26764 = C22254 * C47951;
    const double C29402 = C22254 * C2349;
    const double C29400 = C22254 * C47951;
    const double C26760 = C22252 * C47951;
    const double C27500 = C22252 * C948;
    const double C27496 = C22252 * C48207;
    const double C29040 = C22252 * C47951;
    const double C29620 = C22252 * C47954;
    const double C29616 = C22252 * C2723;
    const double C29956 = C22252 * C48234;
    const double C29952 = C22252 * C48207;
    const double C26232 = C23388 * C47888;
    const double C28284 = C23388 * C48175;
    const double C28282 = C23388 * C47951;
    const double C29054 = C23388 * C2349;
    const double C29052 = C23388 * C47951;
    const double C43859 = C23388 * C948;
    const double C45413 = C23388 * C47954;
    const double C45663 = C23388 * C48234;
    const double C28286 = C23390 * C47951;
    const double C29056 = C23390 * C47951;
    const double C43861 = C23390 * C48207;
    const double C45415 = C23390 * C2723;
    const double C45665 = C23390 * C48207;
    const double C27502 = C22838 * C48207;
    const double C29622 = C22838 * C2723;
    const double C29958 = C22838 * C48207;
    const double C28423 = C28292 * C47888;
    const double C44429 = C28292 * C47951;
    const double C44997 = C28292 * C47951;
    const double C44539 = C44534 * C48095;
    const double C27166 = C22582 * C48207;
    const double C27964 = C22582 * C48207;
    const double C31646 = C22582 * C2723;
    const double C43967 = C22582 * C48217;
    const double C46417 = C22582 * C48217;
    const double C27648 = C22946 * C48217;
    const double C30962 = C22946 * C48217;
    const double C28570 = C23602 * C47951;
    const double C31100 = C23602 * C47951;
    const double C43606 = C23602 * C48207;
    const double C44194 = C23602 * C48207;
    const double C46932 = C23602 * C2723;
    const double C4801 = C48194 * C301;
    const double C16113 = C48194 * C301;
    const double C21972 = C47839 * C301;
    const double C5109 = C48194 * C302;
    const double C16421 = C48194 * C302;
    const double C10963 = C48194 * C451;
    const double C32356 = C48194 * C451;
    const double C10671 = C48194 * C455;
    const double C32064 = C48194 * C455;
    const double C43161 = C47839 * C455;
    const double C5461 = C48194 * C835;
    const double C16773 = C48194 * C835;
    const double C26408 = C47839 * C835;
    const double C6267 = C48194 * C1190;
    const double C17563 = C48194 * C1190;
    const double C22244 = C47839 * C1190;
    const double C7005 = C48194 * C1193;
    const double C18285 = C48194 * C1193;
    const double C26240 = C47839 * C1193;
    const double C42962 = C42960 * C47888;
    const double C27645 = C22575 * C1305;
    const double C27637 = C22247 * C1305;
    const double C43964 = C22579 * C1305;
    const double C30959 = C22575 * C2463;
    const double C30951 = C22247 * C2463;
    const double C46414 = C22579 * C2463;
    const double C47044 = C47042 / C46967;
    const double C43167 = C43165 * C116;
    const double C26542 = C26409 * C116;
    const double C303 =
        3 * C47171 + (C47169 * ae) / C46946 + C47100 * C47211 -
        (C47103 * C47285 * ce) / C47111 +
        C47103 *
            (C47103 *
                 (3 * C47208 + (C47205 * ae) / C46946 +
                  C47100 *
                      (2 * C47204 - (ae * C47198) / C47111 +
                       C47100 * ((-(ae * C47100 * C47192) / C46967) / C46946 -
                                 C47190 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46967) /
                                               C46946 -
                                           (ae * C47192) / C47111)))) -
             (C47285 * ce) / C47111);
    const double C566 =
        C47103 *
            (4 * C47211 + (C47209 * ae) / C46946 +
             C47100 *
                 (3 * C47208 + (C47205 * ae) / C46946 +
                  C47100 *
                      (2 * C47204 - (ae * C47198) / C47111 +
                       C47100 * ((-(ae * C47100 * C47192) / C46967) / C46946 -
                                 C47190 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46967) /
                                               C46946 -
                                           (ae * C47192) / C47111))))) -
        ((4 * C47257 + C47100 * C47285 + (3 * C47249 + C47100 * C47276) * ae) *
         ce) /
            C47111;
    const double C836 =
        (zP - zQ) *
        (C47103 *
             (3 * C47208 + (C47205 * ae) / C46946 +
              C47100 * (2 * C47204 - (ae * C47198) / C47111 +
                        C47100 * ((-(ae * C47100 * C47192) / C46967) / C46946 -
                                  C47190 / C47111 +
                                  C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                               bs[8] * C47116) /
                                             C46967) /
                                                C46946 -
                                            (ae * C47192) / C47111)))) -
         (C47285 * ce) / C47111);
    const double C136 = (5 * (3 * C47237 + C47100 * C47257 + C47483 * ae) +
                         C47100 * (4 * C47257 + C47100 * C47285 + C47487 * ae) +
                         (4 * C47483 + C47100 * C47487) * ae) /
                        C46946;
    const double C292 =
        (3 * C47237 + C47100 * C47257 + C47483 * ae + C47285 * C47310) / C46946;
    const double C445 =
        (3 * C47237 + C47100 * C47257 + C47483 * ae + C47285 * C47353) / C46946;
    const double C564 =
        (C47103 * (4 * C47257 + C47100 * C47285 + C47487 * ae)) / C46946;
    const double C668 =
        (C47349 * (4 * C47257 + C47100 * C47285 + C47487 * ae)) / C46946;
    const double C830 = (C47349 * C47103 * C47285) / C46946;
    const double C43610 = C43609 + C27160;
    const double C44198 = C44197 + C27958;
    const double C42952 = C26274 + C26273;
    const double C44433 = C44431 + C28282;
    const double C45001 = C44999 + C29052;
    const double C4825 = C4800 + C4801;
    const double C16137 = C16112 + C16113;
    const double C21976 = C21971 + C21972;
    const double C5113 = C5108 + C5109;
    const double C16425 = C16420 + C16421;
    const double C10970 = C10962 + C10963;
    const double C32363 = C32355 + C32356;
    const double C10698 = C10670 + C10671;
    const double C32091 = C32063 + C32064;
    const double C43164 = C43160 + C43161;
    const double C5473 = C5460 + C5461;
    const double C16785 = C16772 + C16773;
    const double C26410 = C26407 + C26408;
    const double C6271 = C6266 + C6267;
    const double C17567 = C17562 + C17563;
    const double C22256 = C22243 + C22244;
    const double C7009 = C7004 + C7005;
    const double C18289 = C18284 + C18285;
    const double C26257 = C26239 + C26240;
    const double C47046 = C47032 - C47044;
    const double C43611 = C43610 * C48095;
    const double C44199 = C44198 * C48095;
    const double C42959 = C42952 * C48095;
    const double C44435 = C44433 * C48095;
    const double C45003 = C45001 * C48095;
    const double C43166 = C43164 * C47888;
    const double C26541 = C26410 * C47888;
    const double C26768 = C22256 * C47951;
    const double C29404 = C22256 * C47951;
    const double C26271 = C26257 * C47888;
    const double C43317 = C26257 * C47951;
    const double C45263 = C26257 * C47951;
    const double C47047 = C47046 + C47017;
    const double C29619 = C22249 * C47047;
    const double C29613 = C26250 * C47047;
    const double C29605 = C22245 * C47047;
    const double C29599 = C26247 * C47047;
    const double C31643 = C22577 * C47047;
    const double C31637 = C26256 * C47047;
    const double C45412 = C26253 * C47047;
    const double C46929 = C28065 * C47047;
    const double C1024 =
        (((((0 - (C46965 * C47000) / C46967) * ce) / C46967 -
           (0 * de) / C46971 + (2 * C47001) / C46967) /
              C46984 -
          ((C46965 * C47036 + 0) * de) / C46967 + C47010 - C47023) /
             C46984 +
         ((C46965 * C47045 + 0) * ce) / C46967) /
            C46984 -
        ((C46965 * (C47045 / C46984 +
                    ((C46965 * C47047 + C47947) * ce) / C46967 + C47039) +
          C48253) *
         de) /
            C46967 +
        C47047 / C46984 + ((C46965 * C47039 + C47954) * ce) / C46967 +
        2 * (C47017 / C46984 - (0 * de) / C46967);
    const double C1025 =
        (C47045 / C46984 + ((C46965 * C47047 + C47947) * ce) / C46967 +
         C47039) /
            C46984 -
        ((C46965 * (C47047 / C46984 +
                    ((C46965 * C47039 + C47954) * ce) / C46967 + 2 * C47053) +
          C48249) *
         de) /
            C46967 +
        2 * (C47039 / C46984 + ((C46965 * C47053 + C2723) * ce) / C46967);
    const double C1026 =
        (C47047 / C46984 + ((C46965 * C47039 + C47954) * ce) / C46967 +
         2 * C47053) /
            C46984 -
        ((C46965 *
              (C47039 / C46984 + ((C46965 * C47053 + C2723) * ce) / C46967) +
          C48239) *
         de) /
            C46967 +
        3 * (C47053 / C46984 + (0 * ce) / C46967);
    const double C1303 =
        C47045 / C46984 - ((C46965 * C47047 + C47947) * de) / C46967 + C47039;
    const double C1304 = C47047 / C46984 -
                         ((C46965 * C47039 + C47954) * de) / C46967 +
                         2 * C47053;
    const double C2461 =
        C47045 / C46984 + ((C46965 * C47047 + C47947) * ce) / C46967 + C47039;
    const double C2462 = C47047 / C46984 +
                         ((C46965 * C47039 + C47954) * ce) / C46967 +
                         2 * C47053;
    const double C46926 = C31637 + C31636;
    const double C27641 = C22245 * C1303;
    const double C27633 = C26247 * C1303;
    const double C43960 = C26256 * C1303;
    const double C27643 = C22247 * C1304;
    const double C27635 = C22245 * C1304;
    const double C43962 = C22577 * C1304;
    const double C30955 = C22245 * C2461;
    const double C30947 = C26247 * C2461;
    const double C46410 = C26256 * C2461;
    const double C30957 = C22247 * C2462;
    const double C30949 = C22245 * C2462;
    const double C46412 = C22577 * C2462;
    const double C46933 = C46926 - C31635;
    const double C46934 = C46933 - C31638;
    const double C46935 = C46934 + C31639;
    const double C46936 = C46935 + C31640;
    const double C46937 = C46936 * C48095;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C47047 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C47947 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C47039 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C47954 +
                  (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                   C115 * C269 + C103 * C282) *
                      C47053 +
                  (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                   C115 * C285 + C103 * C299) *
                      C2723) *
                     C48095 * C48110 * C47865 +
                 ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                   C115 * C270 + C103 * C286) *
                      C47039 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47947 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C47047) +
                  (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                   C115 * C287 + C103 * C300) *
                      C47954 -
                  (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                   C113 * C268 + C101 * C281) *
                      C47053 -
                  (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                   C113 * C284 + C101 * C298) *
                      C2723) *
                     C48095 * C48110 * C47873 +
                 ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                   C115 * C121 + C103 * C132) *
                      C47047 +
                  (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                   C115 * C133 + C103 * C142) *
                      C47947 -
                  (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                   C113 * C264 + C101 * C274) *
                      C47039 -
                  (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                   C113 * C277 + C101 * C294) *
                      C47954 +
                  (C113 * C269 + C101 * C282 + C114 * C271 + C102 * C288 +
                   C115 * C273 + C103 * C292) *
                      C47053 +
                  (C113 * C285 + C101 * C299 + C114 * C289 + C102 * C301 +
                   C115 * C293 + C103 * C303) *
                      C2723) *
                     C48095 * C48110 * C2726) *
                C47906) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C47047 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47947 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C47039 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C47954 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C47053 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C2723) *
                      C48095 * C48110 * C2459 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C47039 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47947 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C47047) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C47954 -
                   (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                    C113 * C268 + C101 * C281) *
                       C47053 -
                   (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                    C113 * C284 + C101 * C298) *
                       C2723) *
                      C48095 * C48110 * C47870) *
                     C48176 +
                 (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C47039 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47947 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C47047) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C47954 -
                   (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                    C113 * C1165 + C101 * C1174) *
                       C47053 -
                   (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                    C113 * C1177 + C101 * C1192) *
                       C2723) *
                      C48095 * C48110 * C2459 +
                  ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                    C115 * C419 + C103 * C429) *
                       C47047 +
                   (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                    C115 * C432 + C103 * C449) *
                       C47947 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C47039 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C47954 +
                   (C113 * C1164 + C101 * C1173 + C114 * C1163 + C102 * C1172 +
                    C115 * C1457 + C103 * C1458) *
                       C47053 +
                   (C113 * C1176 + C101 * C1191 + C114 * C1175 + C102 * C1190 +
                    C115 * C1459 + C103 * C1460) *
                       C2723) *
                      C48095 * C48110 * C47870) *
                     C47993)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C2461 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C48253 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C2462 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C48249 +
                  (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                   C115 * C269 + C103 * C282) *
                      C2463 +
                  (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                   C115 * C285 + C103 * C299) *
                      C48239 -
                  (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                   C113 * C1031 + C101 * C1037) *
                      C2464 -
                  (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                   C113 * C1040 + C101 * C1049) *
                      C48217) *
                     C48095 * C48110 * C2459 +
                 ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                   C115 * C270 + C103 * C286) *
                      C2462 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C48253 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C2461) +
                  (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                   C115 * C287 + C103 * C300) *
                      C48249 -
                  (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                   C113 * C268 + C101 * C281) *
                      C2463 -
                  (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                   C113 * C284 + C101 * C298) *
                      C48239 +
                  (C113 * C1030 + C101 * C1036 + C114 * C1029 + C102 * C1035 +
                   C115 * C1307 + C103 * C1308) *
                      C2464 +
                  (C113 * C1039 + C101 * C1048 + C114 * C1038 + C102 * C1047 +
                   C115 * C1309 + C103 * C1310) *
                      C48217) *
                     C48095 * C48110 * C47870) *
                C47906) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C2355 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C2349 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C2356 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C47951) *
                     C48095 * C48110 * C48252 +
                 ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                   C115 * C270 + C103 * C286) *
                      C2356 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C2349 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C2355) +
                  (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                   C115 * C287 + C103 * C300) *
                      C47951) *
                     C48095 * C48110 * C48245 +
                 ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                   C115 * C121 + C103 * C132) *
                      C2355 +
                  (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                   C115 * C133 + C103 * C142) *
                      C2349 -
                  (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                   C113 * C264 + C101 * C274) *
                      C2356 -
                  (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                   C113 * C277 + C101 * C294) *
                      C47951) *
                     C48095 * C48110 * C48232 +
                 ((C113 * C270 + C101 * C286 + C114 * C272 + C102 * C290 +
                   C115 * C563 + C103 * C564) *
                      C2356 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C2349 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C2355) +
                  (C113 * C287 + C101 * C300 + C114 * C291 + C102 * C302 +
                   C115 * C565 + C103 * C566) *
                      C47951) *
                     C48095 * C48110 * C48211) *
                C47906) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C2355 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C2349 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C2356 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C47951) *
                      C48095 * C48110 * C2459 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C2356 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C2349 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C2355) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C47951) *
                      C48095 * C48110 * C47870) *
                     C48247 +
                 (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C2356 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C2349 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C2355) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C47951) *
                      C48095 * C48110 * C2459 +
                  ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                    C115 * C419 + C103 * C429) *
                       C2355 +
                   (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                    C115 * C432 + C103 * C449) *
                       C2349 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C2356 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C47951) *
                      C48095 * C48110 * C47870) *
                     C48236 +
                 (((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                    C115 * C424 + C103 * C439) *
                       C2355 +
                   (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                    C115 * C442 + C103 * C454) *
                       C2349 -
                   (C115 * C1166 + C103 * C1178 + C114 * C1167 + C102 * C1179 +
                    C113 * C1168 + C101 * C1180) *
                       C2356 -
                   (C115 * C1181 + C103 * C1193 + C114 * C1182 + C102 * C1194 +
                    C113 * C1183 + C101 * C1195) *
                       C47951) *
                      C48095 * C48110 * C2459 +
                  ((C113 * C1167 + C101 * C1179 + C114 * C1166 + C102 * C1178 +
                    C115 * C2031 + C103 * C2032) *
                       C2356 -
                   ((C115 * C443 + C103 * C455 + C114 * C442 + C102 * C454 +
                     C113 * C441 + C101 * C453) *
                        C2349 +
                    (C115 * C425 + C103 * C444 + C114 * C424 + C102 * C439 +
                     C113 * C423 + C101 * C438) *
                        C2355) +
                   (C113 * C1182 + C101 * C1194 + C114 * C1181 + C102 * C1193 +
                    C115 * C2033 + C103 * C2034) *
                       C47951) *
                      C48095 * C48110 * C47870) *
                     C48210)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C2355 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C2349 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C2356 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C47951) *
                      C48095 * C48110 * C47865 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C2356 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C2349 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C2355) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C47951) *
                      C48095 * C48110 * C47873 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C2355 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C2349 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C2356 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C47951) *
                      C48095 * C48110 * C2726) *
                     C48176 +
                 (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C2356 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C2349 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C2355) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C47951) *
                      C48095 * C48110 * C47865 +
                  ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                    C115 * C419 + C103 * C429) *
                       C2355 +
                   (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                    C115 * C432 + C103 * C449) *
                       C2349 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C2356 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C47951) *
                      C48095 * C48110 * C47873 +
                  ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                    C115 * C821 + C103 * C830) *
                       C2356 -
                   ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                     C113 * C431 + C101 * C448) *
                        C2349 +
                    (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                     C113 * C418 + C101 * C428) *
                        C2355) +
                   (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                    C115 * C831 + C103 * C836) *
                       C47951) *
                      C48095 * C48110 * C2726) *
                     C47993)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C2355 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C2349 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C2356 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C47951) *
                     C48095 * C48110 * C48252 +
                 ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                   C115 * C270 + C103 * C286) *
                      C2356 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C2349 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C2355) +
                  (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                   C115 * C287 + C103 * C300) *
                      C47951) *
                     C48095 * C48110 * C48245 +
                 ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                   C115 * C121 + C103 * C132) *
                      C2355 +
                  (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                   C115 * C133 + C103 * C142) *
                      C2349 -
                  (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                   C113 * C264 + C101 * C274) *
                      C2356 -
                  (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                   C113 * C277 + C101 * C294) *
                      C47951) *
                     C48095 * C48110 * C48232 +
                 ((C113 * C270 + C101 * C286 + C114 * C272 + C102 * C290 +
                   C115 * C563 + C103 * C564) *
                      C2356 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C2349 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C2355) +
                  (C113 * C287 + C101 * C300 + C114 * C291 + C102 * C302 +
                   C115 * C565 + C103 * C566) *
                      C47951) *
                     C48095 * C48110 * C48211) *
                C47906) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C2461 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C48253 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C2462 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C48249 +
                  (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                   C115 * C269 + C103 * C282) *
                      C2463 +
                  (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                   C115 * C285 + C103 * C299) *
                      C48239 -
                  (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                   C113 * C1031 + C101 * C1037) *
                      C2464 -
                  (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                   C113 * C1040 + C101 * C1049) *
                      C48217) *
                     C48095 * C48110 * C2459 +
                 ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                   C115 * C270 + C103 * C286) *
                      C2462 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C48253 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C2461) +
                  (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                   C115 * C287 + C103 * C300) *
                      C48249 -
                  (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                   C113 * C268 + C101 * C281) *
                      C2463 -
                  (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                   C113 * C284 + C101 * C298) *
                      C48239 +
                  (C113 * C1030 + C101 * C1036 + C114 * C1029 + C102 * C1035 +
                   C115 * C1307 + C103 * C1308) *
                      C2464 +
                  (C113 * C1039 + C101 * C1048 + C114 * C1038 + C102 * C1047 +
                   C115 * C1309 + C103 * C1310) *
                      C48217) *
                     C48095 * C48110 * C47870) *
                C47906) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C47047 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47947 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C47039 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C47954 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C47053 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C2723) *
                      C48095 * C48110 * C48161 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C47039 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47947 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C47047) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C47954 -
                   (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                    C113 * C268 + C101 * C281) *
                       C47053 -
                   (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                    C113 * C284 + C101 * C298) *
                       C2723) *
                      C48095 * C48110 * C47870) *
                     C3120 +
                 (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C47039 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47947 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C47047) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C47954 -
                   (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                    C113 * C1165 + C101 * C1174) *
                       C47053 -
                   (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                    C113 * C1177 + C101 * C1192) *
                       C2723) *
                      C48095 * C48110 * C48161 +
                  ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                    C115 * C419 + C103 * C429) *
                       C47047 +
                   (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                    C115 * C432 + C103 * C449) *
                       C47947 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C47039 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C47954 +
                   (C113 * C1164 + C101 * C1173 + C114 * C1163 + C102 * C1172 +
                    C115 * C1457 + C103 * C1458) *
                       C47053 +
                   (C113 * C1176 + C101 * C1191 + C114 * C1175 + C102 * C1190 +
                    C115 * C1459 + C103 * C1460) *
                       C2723) *
                      C48095 * C48110 * C47870) *
                     C47993)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C47047 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C47947 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C47039 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C47954 +
                  (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                   C115 * C269 + C103 * C282) *
                      C47053 +
                  (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                   C115 * C285 + C103 * C299) *
                      C2723) *
                     C48095 * C48110 * C47860 * C47989 +
                 ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                   C115 * C819 + C103 * C824) *
                      C47039 -
                  ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                    C113 * C433 + C101 * C450) *
                       C47947 +
                   (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                    C113 * C420 + C101 * C434) *
                       C47047) +
                  (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                   C115 * C827 + C103 * C834) *
                      C47954 -
                  (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                   C113 * C1165 + C101 * C1174) *
                      C47053 -
                  (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                   C113 * C1177 + C101 * C1192) *
                      C2723) *
                     C48095 * C48110 * C47860 * C47996 +
                 ((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                   C115 * C424 + C103 * C439) *
                      C47047 +
                  (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                   C115 * C442 + C103 * C454) *
                      C47947 -
                  (C115 * C1166 + C103 * C1178 + C114 * C1167 + C102 * C1179 +
                   C113 * C1168 + C101 * C1180) *
                      C47039 -
                  (C115 * C1181 + C103 * C1193 + C114 * C1182 + C102 * C1194 +
                   C113 * C1183 + C101 * C1195) *
                      C47954 +
                  (C113 * C1169 + C101 * C1184 + C114 * C1170 + C102 * C1185 +
                   C115 * C1171 + C103 * C1186) *
                      C47053 +
                  (C113 * C1187 + C101 * C1196 + C114 * C1188 + C102 * C1197 +
                   C115 * C1189 + C103 * C1198) *
                      C2723) *
                     C48095 * C48110 * C47860 * C3628)) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C2461 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C48253 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C2462 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C48249 +
                  (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                   C115 * C269 + C103 * C282) *
                      C2463 +
                  (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                   C115 * C285 + C103 * C299) *
                      C48239 -
                  (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                   C113 * C1031 + C101 * C1037) *
                      C2464 -
                  (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                   C113 * C1040 + C101 * C1049) *
                      C48217) *
                     C48095 * C48110 * C47860 * C3120 +
                 ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                   C115 * C819 + C103 * C824) *
                      C2462 -
                  ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                    C113 * C433 + C101 * C450) *
                       C48253 +
                   (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                    C113 * C420 + C101 * C434) *
                       C2461) +
                  (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                   C115 * C827 + C103 * C834) *
                      C48249 -
                  (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                   C113 * C1165 + C101 * C1174) *
                      C2463 -
                  (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                   C113 * C1177 + C101 * C1192) *
                      C48239 +
                  (C113 * C1559 + C101 * C1562 + C114 * C1560 + C102 * C1563 +
                   C115 * C1561 + C103 * C1564) *
                      C2464 +
                  (C113 * C1565 + C101 * C1568 + C114 * C1566 + C102 * C1569 +
                   C115 * C1567 + C103 * C1570) *
                      C48217) *
                     C48095 * C48110 * C47860 * C47993)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C2355 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C2349 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C2356 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C47951) *
                      C48095 * C48110 * C48243 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C2356 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C2349 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C2355) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C47951) *
                      C48095 * C48110 * C48230 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C2355 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C2349 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C2356 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C47951) *
                      C48095 * C48110 * C48201) *
                     C3120 +
                 (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C2356 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C2349 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C2355) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C47951) *
                      C48095 * C48110 * C48243 +
                  ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                    C115 * C419 + C103 * C429) *
                       C2355 +
                   (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                    C115 * C432 + C103 * C449) *
                       C2349 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C2356 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C47951) *
                      C48095 * C48110 * C48230 +
                  ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                    C115 * C821 + C103 * C830) *
                       C2356 -
                   ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                     C113 * C431 + C101 * C448) *
                        C2349 +
                    (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                     C113 * C418 + C101 * C428) *
                        C2355) +
                   (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                    C115 * C831 + C103 * C836) *
                       C47951) *
                      C48095 * C48110 * C48201) *
                     C47993)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C2355 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C2349 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C2356 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C47951) *
                     C48095 * C48110 * C47860 * C48254 +
                 ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                   C115 * C819 + C103 * C824) *
                      C2356 -
                  ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                    C113 * C433 + C101 * C450) *
                       C2349 +
                   (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                    C113 * C420 + C101 * C434) *
                       C2355) +
                  (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                   C115 * C827 + C103 * C834) *
                      C47951) *
                     C48095 * C48110 * C47860 * C48251 +
                 ((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                   C115 * C424 + C103 * C439) *
                      C2355 +
                  (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                   C115 * C442 + C103 * C454) *
                      C2349 -
                  (C115 * C1166 + C103 * C1178 + C114 * C1167 + C102 * C1179 +
                   C113 * C1168 + C101 * C1180) *
                      C2356 -
                  (C115 * C1181 + C103 * C1193 + C114 * C1182 + C102 * C1194 +
                   C113 * C1183 + C101 * C1195) *
                      C47951) *
                     C48095 * C48110 * C47860 * C48242 +
                 ((C113 * C2239 + C101 * C2242 + C114 * C2240 + C102 * C2243 +
                   C115 * C2241 + C103 * C2244) *
                      C2356 -
                  ((C115 * C1867 + C103 * C1879 + C114 * C1868 + C102 * C1880 +
                    C113 * C1869 + C101 * C1881) *
                       C2349 +
                   (C115 * C1861 + C103 * C1870 + C114 * C1862 + C102 * C1871 +
                    C113 * C1863 + C101 * C1872) *
                       C2355) +
                  (C113 * C2245 + C101 * C2248 + C114 * C2246 + C102 * C2249 +
                   C115 * C2247 + C103 * C2250) *
                      C47951) *
                     C48095 * C48110 * C47860 * C48223)) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C2355 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C2349 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C2356 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C47951) *
                      C48095 * C48110 * C48161 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C2356 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C2349 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C2355) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C47951) *
                      C48095 * C48110 * C47870) *
                     C47989 +
                 (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C2356 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C2349 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C2355) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C47951) *
                      C48095 * C48110 * C48161 +
                  ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                    C115 * C419 + C103 * C429) *
                       C2355 +
                   (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                    C115 * C432 + C103 * C449) *
                       C2349 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C2356 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C47951) *
                      C48095 * C48110 * C47870) *
                     C47996 +
                 (((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                    C115 * C424 + C103 * C439) *
                       C2355 +
                   (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                    C115 * C442 + C103 * C454) *
                       C2349 -
                   (C115 * C1166 + C103 * C1178 + C114 * C1167 + C102 * C1179 +
                    C113 * C1168 + C101 * C1180) *
                       C2356 -
                   (C115 * C1181 + C103 * C1193 + C114 * C1182 + C102 * C1194 +
                    C113 * C1183 + C101 * C1195) *
                       C47951) *
                      C48095 * C48110 * C48161 +
                  ((C113 * C1167 + C101 * C1179 + C114 * C1166 + C102 * C1178 +
                    C115 * C2031 + C103 * C2032) *
                       C2356 -
                   ((C115 * C443 + C103 * C455 + C114 * C442 + C102 * C454 +
                     C113 * C441 + C101 * C453) *
                        C2349 +
                    (C115 * C425 + C103 * C444 + C114 * C424 + C102 * C439 +
                     C113 * C423 + C101 * C438) *
                        C2355) +
                   (C113 * C1182 + C101 * C1194 + C114 * C1181 + C102 * C1193 +
                    C115 * C2033 + C103 * C2034) *
                       C47951) *
                      C48095 * C48110 * C47870) *
                     C3628)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C2355 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C2349 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C2356 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C47951) *
                      C48095 * C48110 * C48243 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C2356 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C2349 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C2355) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C47951) *
                      C48095 * C48110 * C48230 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C2355 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C2349 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C2356 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C47951) *
                      C48095 * C48110 * C48201) *
                     C3120 +
                 (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C2356 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C2349 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C2355) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C47951) *
                      C48095 * C48110 * C48243 +
                  ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                    C115 * C419 + C103 * C429) *
                       C2355 +
                   (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                    C115 * C432 + C103 * C449) *
                       C2349 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C2356 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C47951) *
                      C48095 * C48110 * C48230 +
                  ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                    C115 * C821 + C103 * C830) *
                       C2356 -
                   ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                     C113 * C431 + C101 * C448) *
                        C2349 +
                    (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                     C113 * C418 + C101 * C428) *
                        C2355) +
                   (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                    C115 * C831 + C103 * C836) *
                       C47951) *
                      C48095 * C48110 * C48201) *
                     C47993)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C2461 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C48253 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C2462 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C48249 +
                  (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                   C115 * C269 + C103 * C282) *
                      C2463 +
                  (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                   C115 * C285 + C103 * C299) *
                      C48239 -
                  (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                   C113 * C1031 + C101 * C1037) *
                      C2464 -
                  (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                   C113 * C1040 + C101 * C1049) *
                      C48217) *
                     C48095 * C48110 * C47860 * C3120 +
                 ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                   C115 * C819 + C103 * C824) *
                      C2462 -
                  ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                    C113 * C433 + C101 * C450) *
                       C48253 +
                   (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                    C113 * C420 + C101 * C434) *
                       C2461) +
                  (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                   C115 * C827 + C103 * C834) *
                      C48249 -
                  (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                   C113 * C1165 + C101 * C1174) *
                      C2463 -
                  (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                   C113 * C1177 + C101 * C1192) *
                      C48239 +
                  (C113 * C1559 + C101 * C1562 + C114 * C1560 + C102 * C1563 +
                   C115 * C1561 + C103 * C1564) *
                      C2464 +
                  (C113 * C1565 + C101 * C1568 + C114 * C1566 + C102 * C1569 +
                   C115 * C1567 + C103 * C1570) *
                      C48217) *
                     C48095 * C48110 * C47860 * C47993)) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C1303 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C1297 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C1304 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C1298 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C1305 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C1299 -
                   (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                    C113 * C1031 + C101 * C1037) *
                       C1306 -
                   (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                    C113 * C1040 + C101 * C1049) *
                       C48217) *
                      C48095 * C48110 * C48161 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C1304 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C1297 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C1303) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C1298 -
                   (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                    C113 * C268 + C101 * C281) *
                       C1305 -
                   (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                    C113 * C284 + C101 * C298) *
                       C1299 +
                   (C113 * C1030 + C101 * C1036 + C114 * C1029 + C102 * C1035 +
                    C115 * C1307 + C103 * C1308) *
                       C1306 +
                   (C113 * C1039 + C101 * C1048 + C114 * C1038 + C102 * C1047 +
                    C115 * C1309 + C103 * C1310) *
                       C48217) *
                      C48095 * C48110 * C47870) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C561 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48175 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C562 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C47951) *
                      C48095 * C48110 * C557 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C562 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48175 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C561) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C47951) *
                      C48095 * C48110 * C558 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C561 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48175 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C562 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C47951) *
                      C48095 * C48110 * C559 +
                  ((C113 * C270 + C101 * C286 + C114 * C272 + C102 * C290 +
                    C115 * C563 + C103 * C564) *
                       C562 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C48175 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C561) +
                   (C113 * C287 + C101 * C300 + C114 * C291 + C102 * C302 +
                    C115 * C565 + C103 * C566) *
                       C47951) *
                      C48095 * C48110 * C48211) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C561 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48175 -
                    (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                     C113 * C266 + C101 * C276) *
                        C562 -
                    (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                     C113 * C279 + C101 * C296) *
                        C47951) *
                       C48095 * C48110 * C48161 +
                   ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                     C115 * C270 + C103 * C286) *
                        C562 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48175 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C561) +
                    (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                     C115 * C287 + C103 * C300) *
                        C47951) *
                       C48095 * C48110 * C47870) *
                      C1681 +
                  (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C562 -
                    ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                      C113 * C433 + C101 * C450) *
                         C48175 +
                     (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                      C113 * C420 + C101 * C434) *
                         C561) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C47951) *
                       C48095 * C48110 * C48161 +
                   ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C561 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C48175 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C562 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C47951) *
                       C48095 * C48110 * C47870) *
                      C1682 +
                  (((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                     C115 * C424 + C103 * C439) *
                        C561 +
                    (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                     C115 * C442 + C103 * C454) *
                        C48175 -
                    (C115 * C1166 + C103 * C1178 + C114 * C1167 + C102 * C1179 +
                     C113 * C1168 + C101 * C1180) *
                        C562 -
                    (C115 * C1181 + C103 * C1193 + C114 * C1182 + C102 * C1194 +
                     C113 * C1183 + C101 * C1195) *
                        C47951) *
                       C48095 * C48110 * C48161 +
                   ((C113 * C1167 + C101 * C1179 + C114 * C1166 + C102 * C1178 +
                     C115 * C2031 + C103 * C2032) *
                        C562 -
                    ((C115 * C443 + C103 * C455 + C114 * C442 + C102 * C454 +
                      C113 * C441 + C101 * C453) *
                         C48175 +
                     (C115 * C425 + C103 * C444 + C114 * C424 + C102 * C439 +
                      C113 * C423 + C101 * C438) *
                         C561) +
                    (C113 * C1182 + C101 * C1194 + C114 * C1181 + C102 * C1193 +
                     C115 * C2033 + C103 * C2034) *
                        C47951) *
                       C48095 * C48110 * C47870) *
                      C48210)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C1303 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C1297 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C1304 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C1298 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C1305 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C1299 -
                   (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                    C113 * C1031 + C101 * C1037) *
                       C1306 -
                   (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                    C113 * C1040 + C101 * C1049) *
                       C48217) *
                      C48095 * C48110 * C47860 * C48176 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C1304 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C1297 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C1303) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C1298 -
                   (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                    C113 * C1165 + C101 * C1174) *
                       C1305 -
                   (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                    C113 * C1177 + C101 * C1192) *
                       C1299 +
                   (C113 * C1559 + C101 * C1562 + C114 * C1560 + C102 * C1563 +
                    C115 * C1561 + C103 * C1564) *
                       C1306 +
                   (C113 * C1565 + C101 * C1568 + C114 * C1566 + C102 * C1569 +
                    C115 * C1567 + C103 * C1570) *
                       C48217) *
                      C48095 * C48110 * C47860 * C47993)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C561 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48175 -
                    (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                     C113 * C266 + C101 * C276) *
                        C562 -
                    (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                     C113 * C279 + C101 * C296) *
                        C47951) *
                       C48095 * C48110 * C258 +
                   ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                     C115 * C270 + C103 * C286) *
                        C562 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48175 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C561) +
                    (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                     C115 * C287 + C103 * C300) *
                        C47951) *
                       C48095 * C48110 * C259 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C561 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48175 -
                    (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                     C113 * C264 + C101 * C274) *
                        C562 -
                    (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                     C113 * C277 + C101 * C294) *
                        C47951) *
                       C48095 * C48110 * C48201) *
                      C48176 +
                  (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C562 -
                    ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                      C113 * C433 + C101 * C450) *
                         C48175 +
                     (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                      C113 * C420 + C101 * C434) *
                         C561) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C47951) *
                       C48095 * C48110 * C258 +
                   ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C561 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C48175 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C562 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C47951) *
                       C48095 * C48110 * C259 +
                   ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                     C115 * C821 + C103 * C830) *
                        C562 -
                    ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                      C113 * C431 + C101 * C448) *
                         C48175 +
                     (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                      C113 * C418 + C101 * C428) *
                         C561) +
                    (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                     C115 * C831 + C103 * C836) *
                        C47951) *
                       C48095 * C48110 * C48201) *
                      C47993)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C561 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48175 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C562 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C47951) *
                      C48095 * C48110 * C47860 * C2133 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C562 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C48175 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C561) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C47951) *
                      C48095 * C48110 * C47860 * C2134 +
                  ((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                    C115 * C424 + C103 * C439) *
                       C561 +
                   (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                    C115 * C442 + C103 * C454) *
                       C48175 -
                   (C115 * C1166 + C103 * C1178 + C114 * C1167 + C102 * C1179 +
                    C113 * C1168 + C101 * C1180) *
                       C562 -
                   (C115 * C1181 + C103 * C1193 + C114 * C1182 + C102 * C1194 +
                    C113 * C1183 + C101 * C1195) *
                       C47951) *
                      C48095 * C48110 * C47860 * C2135 +
                  ((C113 * C2239 + C101 * C2242 + C114 * C2240 + C102 * C2243 +
                    C115 * C2241 + C103 * C2244) *
                       C562 -
                   ((C115 * C1867 + C103 * C1879 + C114 * C1868 + C102 * C1880 +
                     C113 * C1869 + C101 * C1881) *
                        C48175 +
                    (C115 * C1861 + C103 * C1870 + C114 * C1862 + C102 * C1871 +
                     C113 * C1863 + C101 * C1872) *
                        C561) +
                   (C113 * C2245 + C101 * C2248 + C114 * C2246 + C102 * C2249 +
                    C115 * C2247 + C103 * C2250) *
                       C47951) *
                      C48095 * C48110 * C47860 * C48223)) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                C115 * C119 + C103 * C126) *
                   C116 +
               (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                C115 * C129 + C103 * C140) *
                   C47888) *
                  C48095 * C48110 * C107 -
              ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                C113 * C128 + C101 * C139) *
                   C47888 +
               (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                C113 * C118 + C101 * C125) *
                   C116) *
                  C48095 * C48110 * C108 +
              ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                C115 * C121 + C103 * C132) *
                   C116 +
               (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                C115 * C133 + C103 * C142) *
                   C47888) *
                  C48095 * C48110 * C109 -
              ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                C113 * C130 + C101 * C141) *
                   C47888 +
               (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                C113 * C120 + C101 * C131) *
                   C116) *
                  C48095 * C48110 * C110 +
              ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                C115 * C123 + C103 * C136) *
                   C116 +
               (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                C115 * C137 + C103 * C144) *
                   C47888) *
                  C48095 * C48110 * C111) *
             C47906 +
         0.5 * std::pow(Pi, 2.5) *
             (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                C115 * C119 + C103 * C126) *
                   C261 +
               (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                C115 * C129 + C103 * C140) *
                   C48246 -
               (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                C113 * C266 + C101 * C276) *
                   C262 -
               (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                C113 * C279 + C101 * C296) *
                   C48234 +
               (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                C115 * C269 + C103 * C282) *
                   C263 +
               (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                C115 * C285 + C103 * C299) *
                   C48207) *
                  C48095 * C48110 * C258 +
              ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                C115 * C270 + C103 * C286) *
                   C262 -
               ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                 C113 * C128 + C101 * C139) *
                    C48246 +
                (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                 C113 * C118 + C101 * C125) *
                    C261) +
               (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                C115 * C287 + C103 * C300) *
                   C48234 -
               (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                C113 * C268 + C101 * C281) *
                   C263 -
               (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                C113 * C284 + C101 * C298) *
                   C48207) *
                  C48095 * C48110 * C259 +
              ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                C115 * C121 + C103 * C132) *
                   C261 +
               (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                C115 * C133 + C103 * C142) *
                   C48246 -
               (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                C113 * C264 + C101 * C274) *
                   C262 -
               (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                C113 * C277 + C101 * C294) *
                   C48234 +
               (C113 * C269 + C101 * C282 + C114 * C271 + C102 * C288 +
                C115 * C273 + C103 * C292) *
                   C263 +
               (C113 * C285 + C101 * C299 + C114 * C289 + C102 * C301 +
                C115 * C293 + C103 * C303) *
                   C48207) *
                  C48095 * C48110 * C48201) *
             C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C113 * C117 + C101 * C124 + C114 * C118 +
                                 C102 * C125 + C115 * C119 + C103 * C126) *
                                    C116 +
                                (C113 * C127 + C101 * C138 + C114 * C128 +
                                 C102 * C139 + C115 * C129 + C103 * C140) *
                                    C47888) *
                                   C48095 * C48110 * C258 -
                               ((C115 * C130 + C103 * C141 + C114 * C129 +
                                 C102 * C140 + C113 * C128 + C101 * C139) *
                                    C47888 +
                                (C115 * C120 + C103 * C131 + C114 * C119 +
                                 C102 * C126 + C113 * C118 + C101 * C125) *
                                    C116) *
                                   C48095 * C48110 * C259 +
                               ((C113 * C119 + C101 * C126 + C114 * C120 +
                                 C102 * C131 + C115 * C121 + C103 * C132) *
                                    C116 +
                                (C113 * C129 + C101 * C140 + C114 * C130 +
                                 C102 * C141 + C115 * C133 + C103 * C142) *
                                    C47888) *
                                   C48095 * C48110 * C48201) *
                                  C48247 +
                              (((C113 * C417 + C101 * C427 + C114 * C418 +
                                 C102 * C428 + C115 * C419 + C103 * C429) *
                                    C116 +
                                (C113 * C430 + C101 * C447 + C114 * C431 +
                                 C102 * C448 + C115 * C432 + C103 * C449) *
                                    C47888) *
                                   C48095 * C48110 * C259 -
                               ((C115 * C431 + C103 * C448 + C114 * C430 +
                                 C102 * C447 + C113 * C433 + C101 * C450) *
                                    C47888 +
                                (C115 * C418 + C103 * C428 + C114 * C417 +
                                 C102 * C427 + C113 * C420 + C101 * C434) *
                                    C116) *
                                   C48095 * C48110 * C258 -
                               ((C115 * C435 + C103 * C451 + C114 * C432 +
                                 C102 * C449 + C113 * C431 + C101 * C448) *
                                    C47888 +
                                (C115 * C421 + C103 * C436 + C114 * C419 +
                                 C102 * C429 + C113 * C418 + C101 * C428) *
                                    C116) *
                                   C48095 * C48110 * C48201) *
                                  C48236 +
                              (((C113 * C422 + C101 * C437 + C114 * C423 +
                                 C102 * C438 + C115 * C424 + C103 * C439) *
                                    C116 +
                                (C113 * C440 + C101 * C452 + C114 * C441 +
                                 C102 * C453 + C115 * C442 + C103 * C454) *
                                    C47888) *
                                   C48095 * C48110 * C258 -
                               ((C115 * C443 + C103 * C455 + C114 * C442 +
                                 C102 * C454 + C113 * C441 + C101 * C453) *
                                    C47888 +
                                (C115 * C425 + C103 * C444 + C114 * C424 +
                                 C102 * C439 + C113 * C423 + C101 * C438) *
                                    C116) *
                                   C48095 * C48110 * C259 +
                               ((C113 * C424 + C101 * C439 + C114 * C425 +
                                 C102 * C444 + C115 * C426 + C103 * C445) *
                                    C116 +
                                (C113 * C442 + C101 * C454 + C114 * C443 +
                                 C102 * C455 + C115 * C446 + C103 * C456) *
                                    C47888) *
                                   C48095 * C48110 * C48201) *
                                  C48210)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
            C115 * C119 + C103 * C126) *
               C953 +
           (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
            C115 * C129 + C103 * C140) *
               C947 -
           (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
            C113 * C266 + C101 * C276) *
               C954 -
           (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
            C113 * C279 + C101 * C296) *
               C948 +
           (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
            C115 * C269 + C103 * C282) *
               C955 +
           (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
            C115 * C285 + C103 * C299) *
               C48207) *
              C48095 * C48110 * C48243 +
          ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
            C115 * C270 + C103 * C286) *
               C954 -
           ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
             C113 * C128 + C101 * C139) *
                C947 +
            (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
             C113 * C118 + C101 * C125) *
                C953) +
           (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
            C115 * C287 + C103 * C300) *
               C948 -
           (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
            C113 * C268 + C101 * C281) *
               C955 -
           (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
            C113 * C284 + C101 * C298) *
               C48207) *
              C48095 * C48110 * C48230 +
          ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
            C115 * C121 + C103 * C132) *
               C953 +
           (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
            C115 * C133 + C103 * C142) *
               C947 -
           (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
            C113 * C264 + C101 * C274) *
               C954 -
           (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
            C113 * C277 + C101 * C294) *
               C948 +
           (C113 * C269 + C101 * C282 + C114 * C271 + C102 * C288 +
            C115 * C273 + C103 * C292) *
               C955 +
           (C113 * C285 + C101 * C299 + C114 * C289 + C102 * C301 +
            C115 * C293 + C103 * C303) *
               C48207) *
              C48095 * C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 + C115 * C119 +
           C103 * C126) *
              C1024 +
          (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 + C115 * C129 +
           C103 * C140) *
              C1018 -
          (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 + C113 * C266 +
           C101 * C276) *
              C1025 -
          (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 + C113 * C279 +
           C101 * C296) *
              C1019 +
          (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 + C115 * C269 +
           C103 * C282) *
              C1026 +
          (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 + C115 * C285 +
           C103 * C299) *
              C1020 -
          (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
           C113 * C1031 + C101 * C1037) *
              C1027 -
          (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
           C113 * C1040 + C101 * C1049) *
              C1021 +
          (C113 * C1032 + C101 * C1041 + C114 * C1033 + C102 * C1042 +
           C115 * C1034 + C103 * C1043) *
              C1028 +
          (C113 * C1044 + C101 * C1050 + C114 * C1045 + C102 * C1051 +
           C115 * C1046 + C103 * C1052) *
              C1022) *
         C48095 * C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C113 * C117 + C101 * C124 + C114 * C118 +
                                C102 * C125 + C115 * C119 + C103 * C126) *
                                   C953 +
                               (C113 * C127 + C101 * C138 + C114 * C128 +
                                C102 * C139 + C115 * C129 + C103 * C140) *
                                   C947 -
                               (C115 * C264 + C103 * C274 + C114 * C265 +
                                C102 * C275 + C113 * C266 + C101 * C276) *
                                   C954 -
                               (C115 * C277 + C103 * C294 + C114 * C278 +
                                C102 * C295 + C113 * C279 + C101 * C296) *
                                   C948 +
                               (C113 * C267 + C101 * C280 + C114 * C268 +
                                C102 * C281 + C115 * C269 + C103 * C282) *
                                   C955 +
                               (C113 * C283 + C101 * C297 + C114 * C284 +
                                C102 * C298 + C115 * C285 + C103 * C299) *
                                   C48207) *
                                  C48095 * C48110 * C47860 * C48247 +
                              ((C113 * C817 + C101 * C822 + C114 * C818 +
                                C102 * C823 + C115 * C819 + C103 * C824) *
                                   C954 -
                               ((C115 * C431 + C103 * C448 + C114 * C430 +
                                 C102 * C447 + C113 * C433 + C101 * C450) *
                                    C947 +
                                (C115 * C418 + C103 * C428 + C114 * C417 +
                                 C102 * C427 + C113 * C420 + C101 * C434) *
                                    C953) +
                               (C113 * C825 + C101 * C832 + C114 * C826 +
                                C102 * C833 + C115 * C827 + C103 * C834) *
                                   C948 -
                               (C115 * C1163 + C103 * C1172 + C114 * C1164 +
                                C102 * C1173 + C113 * C1165 + C101 * C1174) *
                                   C955 -
                               (C115 * C1175 + C103 * C1190 + C114 * C1176 +
                                C102 * C1191 + C113 * C1177 + C101 * C1192) *
                                   C48207) *
                                  C48095 * C48110 * C47860 * C48236 +
                              ((C113 * C422 + C101 * C437 + C114 * C423 +
                                C102 * C438 + C115 * C424 + C103 * C439) *
                                   C953 +
                               (C113 * C440 + C101 * C452 + C114 * C441 +
                                C102 * C453 + C115 * C442 + C103 * C454) *
                                   C947 -
                               (C115 * C1166 + C103 * C1178 + C114 * C1167 +
                                C102 * C1179 + C113 * C1168 + C101 * C1180) *
                                   C954 -
                               (C115 * C1181 + C103 * C1193 + C114 * C1182 +
                                C102 * C1194 + C113 * C1183 + C101 * C1195) *
                                   C948 +
                               (C113 * C1169 + C101 * C1184 + C114 * C1170 +
                                C102 * C1185 + C115 * C1171 + C103 * C1186) *
                                   C955 +
                               (C113 * C1187 + C101 * C1196 + C114 * C1188 +
                                C102 * C1197 + C115 * C1189 + C103 * C1198) *
                                   C48207) *
                                  C48095 * C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C113 * C117 + C101 * C124 + C114 * C118 +
                                 C102 * C125 + C115 * C119 + C103 * C126) *
                                    C116 +
                                (C113 * C127 + C101 * C138 + C114 * C128 +
                                 C102 * C139 + C115 * C129 + C103 * C140) *
                                    C47888) *
                                   C48095 * C48110 * C48243 -
                               ((C115 * C130 + C103 * C141 + C114 * C129 +
                                 C102 * C140 + C113 * C128 + C101 * C139) *
                                    C47888 +
                                (C115 * C120 + C103 * C131 + C114 * C119 +
                                 C102 * C126 + C113 * C118 + C101 * C125) *
                                    C116) *
                                   C48095 * C48110 * C48230 +
                               ((C113 * C119 + C101 * C126 + C114 * C120 +
                                 C102 * C131 + C115 * C121 + C103 * C132) *
                                    C116 +
                                (C113 * C129 + C101 * C140 + C114 * C130 +
                                 C102 * C141 + C115 * C133 + C103 * C142) *
                                    C47888) *
                                   C48095 * C48110 * C48201) *
                                  C1681 +
                              (((C113 * C417 + C101 * C427 + C114 * C418 +
                                 C102 * C428 + C115 * C419 + C103 * C429) *
                                    C116 +
                                (C113 * C430 + C101 * C447 + C114 * C431 +
                                 C102 * C448 + C115 * C432 + C103 * C449) *
                                    C47888) *
                                   C48095 * C48110 * C48230 -
                               ((C115 * C431 + C103 * C448 + C114 * C430 +
                                 C102 * C447 + C113 * C433 + C101 * C450) *
                                    C47888 +
                                (C115 * C418 + C103 * C428 + C114 * C417 +
                                 C102 * C427 + C113 * C420 + C101 * C434) *
                                    C116) *
                                   C48095 * C48110 * C48243 -
                               ((C115 * C435 + C103 * C451 + C114 * C432 +
                                 C102 * C449 + C113 * C431 + C101 * C448) *
                                    C47888 +
                                (C115 * C421 + C103 * C436 + C114 * C419 +
                                 C102 * C429 + C113 * C418 + C101 * C428) *
                                    C116) *
                                   C48095 * C48110 * C48201) *
                                  C1682 +
                              (((C113 * C422 + C101 * C437 + C114 * C423 +
                                 C102 * C438 + C115 * C424 + C103 * C439) *
                                    C116 +
                                (C113 * C440 + C101 * C452 + C114 * C441 +
                                 C102 * C453 + C115 * C442 + C103 * C454) *
                                    C47888) *
                                   C48095 * C48110 * C48243 -
                               ((C115 * C443 + C103 * C455 + C114 * C442 +
                                 C102 * C454 + C113 * C441 + C101 * C453) *
                                    C47888 +
                                (C115 * C425 + C103 * C444 + C114 * C424 +
                                 C102 * C439 + C113 * C423 + C101 * C438) *
                                    C116) *
                                   C48095 * C48110 * C48230 +
                               ((C113 * C424 + C101 * C439 + C114 * C425 +
                                 C102 * C444 + C115 * C426 + C103 * C445) *
                                    C116 +
                                (C113 * C442 + C101 * C454 + C114 * C443 +
                                 C102 * C455 + C115 * C446 + C103 * C456) *
                                    C47888) *
                                   C48095 * C48110 * C48201) *
                                  C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C113 * C117 + C101 * C124 + C114 * C118 +
                                C102 * C125 + C115 * C119 + C103 * C126) *
                                   C261 +
                               (C113 * C127 + C101 * C138 + C114 * C128 +
                                C102 * C139 + C115 * C129 + C103 * C140) *
                                   C48246 -
                               (C115 * C264 + C103 * C274 + C114 * C265 +
                                C102 * C275 + C113 * C266 + C101 * C276) *
                                   C262 -
                               (C115 * C277 + C103 * C294 + C114 * C278 +
                                C102 * C295 + C113 * C279 + C101 * C296) *
                                   C48234 +
                               (C113 * C267 + C101 * C280 + C114 * C268 +
                                C102 * C281 + C115 * C269 + C103 * C282) *
                                   C263 +
                               (C113 * C283 + C101 * C297 + C114 * C284 +
                                C102 * C298 + C115 * C285 + C103 * C299) *
                                   C48207) *
                                  C48095 * C48110 * C47860 * C1681 +
                              ((C113 * C817 + C101 * C822 + C114 * C818 +
                                C102 * C823 + C115 * C819 + C103 * C824) *
                                   C262 -
                               ((C115 * C431 + C103 * C448 + C114 * C430 +
                                 C102 * C447 + C113 * C433 + C101 * C450) *
                                    C48246 +
                                (C115 * C418 + C103 * C428 + C114 * C417 +
                                 C102 * C427 + C113 * C420 + C101 * C434) *
                                    C261) +
                               (C113 * C825 + C101 * C832 + C114 * C826 +
                                C102 * C833 + C115 * C827 + C103 * C834) *
                                   C48234 -
                               (C115 * C1163 + C103 * C1172 + C114 * C1164 +
                                C102 * C1173 + C113 * C1165 + C101 * C1174) *
                                   C263 -
                               (C115 * C1175 + C103 * C1190 + C114 * C1176 +
                                C102 * C1191 + C113 * C1177 + C101 * C1192) *
                                   C48207) *
                                  C48095 * C48110 * C47860 * C1682 +
                              ((C113 * C422 + C101 * C437 + C114 * C423 +
                                C102 * C438 + C115 * C424 + C103 * C439) *
                                   C261 +
                               (C113 * C440 + C101 * C452 + C114 * C441 +
                                C102 * C453 + C115 * C442 + C103 * C454) *
                                   C48246 -
                               (C115 * C1166 + C103 * C1178 + C114 * C1167 +
                                C102 * C1179 + C113 * C1168 + C101 * C1180) *
                                   C262 -
                               (C115 * C1181 + C103 * C1193 + C114 * C1182 +
                                C102 * C1194 + C113 * C1183 + C101 * C1195) *
                                   C48234 +
                               (C113 * C1169 + C101 * C1184 + C114 * C1170 +
                                C102 * C1185 + C115 * C1171 + C103 * C1186) *
                                   C263 +
                               (C113 * C1187 + C101 * C1196 + C114 * C1188 +
                                C102 * C1197 + C115 * C1189 + C103 * C1198) *
                                   C48207) *
                                  C48095 * C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
            C115 * C119 + C103 * C126) *
               C116 +
           (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
            C115 * C129 + C103 * C140) *
               C47888) *
              C48095 * C48110 * C47860 * C1856 -
          ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
            C113 * C433 + C101 * C450) *
               C47888 +
           (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
            C113 * C420 + C101 * C434) *
               C116) *
              C48095 * C48110 * C47860 * C1857 +
          ((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
            C115 * C424 + C103 * C439) *
               C116 +
           (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
            C115 * C442 + C103 * C454) *
               C47888) *
              C48095 * C48110 * C47860 * C1858 -
          ((C115 * C1867 + C103 * C1879 + C114 * C1868 + C102 * C1880 +
            C113 * C1869 + C101 * C1881) *
               C47888 +
           (C115 * C1861 + C103 * C1870 + C114 * C1862 + C102 * C1871 +
            C113 * C1863 + C101 * C1872) *
               C116) *
              C48095 * C48110 * C47860 * C1859 +
          ((C113 * C1864 + C101 * C1873 + C114 * C1865 + C102 * C1874 +
            C115 * C1866 + C103 * C1875) *
               C116 +
           (C113 * C1876 + C101 * C1882 + C114 * C1877 + C102 * C1883 +
            C115 * C1878 + C103 * C1884) *
               C47888) *
              C48095 * C48110 * C47860 * C1860)) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C953 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C947 -
                    (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                     C113 * C266 + C101 * C276) *
                        C954 -
                    (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                     C113 * C279 + C101 * C296) *
                        C948 +
                    (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                     C115 * C269 + C103 * C282) *
                        C955 +
                    (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                     C115 * C285 + C103 * C299) *
                        C48207) *
                       C48095 * C48110 * C48161 +
                   ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                     C115 * C270 + C103 * C286) *
                        C954 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C947 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C953) +
                    (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                     C115 * C287 + C103 * C300) *
                        C948 -
                    (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                     C113 * C268 + C101 * C281) *
                        C955 -
                    (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                     C113 * C284 + C101 * C298) *
                        C48207) *
                       C48095 * C48110 * C47870) *
                      C48176 +
                  (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C954 -
                    ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                      C113 * C433 + C101 * C450) *
                         C947 +
                     (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                      C113 * C420 + C101 * C434) *
                         C953) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C948 -
                    (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                     C113 * C1165 + C101 * C1174) *
                        C955 -
                    (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                     C113 * C1177 + C101 * C1192) *
                        C48207) *
                       C48095 * C48110 * C48161 +
                   ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C953 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C947 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C954 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C948 +
                    (C113 * C1164 + C101 * C1173 + C114 * C1163 + C102 * C1172 +
                     C115 * C1457 + C103 * C1458) *
                        C955 +
                    (C113 * C1176 + C101 * C1191 + C114 * C1175 + C102 * C1190 +
                     C115 * C1459 + C103 * C1460) *
                        C48207) *
                       C48095 * C48110 * C47870) *
                      C47993)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47888) *
                       C48095 * C48110 * C557 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47888 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48095 * C48110 * C558 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47888) *
                       C48095 * C48110 * C559 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47888 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C48095 * C48110 * C48211) *
                      C48176 +
                  (((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C116 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C47888) *
                       C48095 * C48110 * C558 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47888 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C116) *
                       C48095 * C48110 * C557 -
                   ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                     C113 * C431 + C101 * C448) *
                        C47888 +
                    (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                     C113 * C418 + C101 * C428) *
                        C116) *
                       C48095 * C48110 * C559 +
                   ((C113 * C419 + C101 * C429 + C114 * C421 + C102 * C436 +
                     C115 * C667 + C103 * C668) *
                        C116 +
                    (C113 * C432 + C101 * C449 + C114 * C435 + C102 * C451 +
                     C115 * C669 + C103 * C670) *
                        C47888) *
                       C48095 * C48110 * C48211) *
                      C47993)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47888) *
                       C48095 * C48110 * C48161 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47888 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48095 * C48110 * C47870) *
                      C2133 +
                  (((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C116 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C47888) *
                       C48095 * C48110 * C47870 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47888 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C116) *
                       C48095 * C48110 * C48161) *
                      C2134 +
                  (((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                     C115 * C424 + C103 * C439) *
                        C116 +
                    (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                     C115 * C442 + C103 * C454) *
                        C47888) *
                       C48095 * C48110 * C48161 -
                   ((C115 * C443 + C103 * C455 + C114 * C442 + C102 * C454 +
                     C113 * C441 + C101 * C453) *
                        C47888 +
                    (C115 * C425 + C103 * C444 + C114 * C424 + C102 * C439 +
                     C113 * C423 + C101 * C438) *
                        C116) *
                       C48095 * C48110 * C47870) *
                      C2135 +
                  (((C113 * C1862 + C101 * C1871 + C114 * C1861 + C102 * C1870 +
                     C115 * C2137 + C103 * C2138) *
                        C116 +
                    (C113 * C1868 + C101 * C1880 + C114 * C1867 + C102 * C1879 +
                     C115 * C2139 + C103 * C2140) *
                        C47888) *
                       C48095 * C48110 * C47870 -
                   ((C115 * C1867 + C103 * C1879 + C114 * C1868 + C102 * C1880 +
                     C113 * C1869 + C101 * C1881) *
                        C47888 +
                    (C115 * C1861 + C103 * C1870 + C114 * C1862 + C102 * C1871 +
                     C113 * C1863 + C101 * C1872) *
                        C116) *
                       C48095 * C48110 * C48161) *
                      C48223)) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C261 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48246 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C262 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C48234 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C263 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C48207) *
                      C48095 * C48110 * C258 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C262 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48246 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C261) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C48234 -
                   (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                    C113 * C268 + C101 * C281) *
                       C263 -
                   (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                    C113 * C284 + C101 * C298) *
                       C48207) *
                      C48095 * C48110 * C259 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C261 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48246 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C262 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C48234 +
                   (C113 * C269 + C101 * C282 + C114 * C271 + C102 * C288 +
                    C115 * C273 + C103 * C292) *
                       C263 +
                   (C113 * C285 + C101 * C299 + C114 * C289 + C102 * C301 +
                    C115 * C293 + C103 * C303) *
                       C48207) *
                      C48095 * C48110 * C48201) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47888) *
                      C48095 * C48110 * C107 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47888 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48095 * C48110 * C108 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47888) *
                      C48095 * C48110 * C109 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47888 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C48095 * C48110 * C110 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C47888) *
                      C48095 * C48110 * C111) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C953 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C947 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C954 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C948 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C955 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C48207) *
                      C48095 * C48110 * C48243 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C954 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C947 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C953) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C948 -
                   (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                    C113 * C268 + C101 * C281) *
                       C955 -
                   (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                    C113 * C284 + C101 * C298) *
                       C48207) *
                      C48095 * C48110 * C48230 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C953 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C947 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C954 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C948 +
                   (C113 * C269 + C101 * C282 + C114 * C271 + C102 * C288 +
                    C115 * C273 + C103 * C292) *
                       C955 +
                   (C113 * C285 + C101 * C299 + C114 * C289 + C102 * C301 +
                    C115 * C293 + C103 * C303) *
                       C48207) *
                      C48095 * C48110 * C48201) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C1024 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C1018 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C1025 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C1019 +
                  (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                   C115 * C269 + C103 * C282) *
                      C1026 +
                  (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                   C115 * C285 + C103 * C299) *
                      C1020 -
                  (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                   C113 * C1031 + C101 * C1037) *
                      C1027 -
                  (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                   C113 * C1040 + C101 * C1049) *
                      C1021 +
                  (C113 * C1032 + C101 * C1041 + C114 * C1033 + C102 * C1042 +
                   C115 * C1034 + C103 * C1043) *
                      C1028 +
                  (C113 * C1044 + C101 * C1050 + C114 * C1045 + C102 * C1051 +
                   C115 * C1046 + C103 * C1052) *
                      C1022) *
                 C48095 * C48110 * C47860 * C47906) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47888) *
                       C48095 * C48110 * C48243 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47888 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48095 * C48110 * C48230 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47888) *
                       C48095 * C48110 * C48201) *
                      C1681 +
                  (((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C116 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C47888) *
                       C48095 * C48110 * C48230 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47888 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C116) *
                       C48095 * C48110 * C48243 -
                   ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                     C113 * C431 + C101 * C448) *
                        C47888 +
                    (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                     C113 * C418 + C101 * C428) *
                        C116) *
                       C48095 * C48110 * C48201) *
                      C1682 +
                  (((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                     C115 * C424 + C103 * C439) *
                        C116 +
                    (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                     C115 * C442 + C103 * C454) *
                        C47888) *
                       C48095 * C48110 * C48243 -
                   ((C115 * C443 + C103 * C455 + C114 * C442 + C102 * C454 +
                     C113 * C441 + C101 * C453) *
                        C47888 +
                    (C115 * C425 + C103 * C444 + C114 * C424 + C102 * C439 +
                     C113 * C423 + C101 * C438) *
                        C116) *
                       C48095 * C48110 * C48230 +
                   ((C113 * C424 + C101 * C439 + C114 * C425 + C102 * C444 +
                     C115 * C426 + C103 * C445) *
                        C116 +
                    (C113 * C442 + C101 * C454 + C114 * C443 + C102 * C455 +
                     C115 * C446 + C103 * C456) *
                        C47888) *
                       C48095 * C48110 * C48201) *
                      C48210)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C261 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48246 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C262 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C48234 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C263 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C48207) *
                      C48095 * C48110 * C47860 * C1681 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C262 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C48246 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C261) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48234 -
                   (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                    C113 * C1165 + C101 * C1174) *
                       C263 -
                   (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                    C113 * C1177 + C101 * C1192) *
                       C48207) *
                      C48095 * C48110 * C47860 * C1682 +
                  ((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                    C115 * C424 + C103 * C439) *
                       C261 +
                   (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                    C115 * C442 + C103 * C454) *
                       C48246 -
                   (C115 * C1166 + C103 * C1178 + C114 * C1167 + C102 * C1179 +
                    C113 * C1168 + C101 * C1180) *
                       C262 -
                   (C115 * C1181 + C103 * C1193 + C114 * C1182 + C102 * C1194 +
                    C113 * C1183 + C101 * C1195) *
                       C48234 +
                   (C113 * C1169 + C101 * C1184 + C114 * C1170 + C102 * C1185 +
                    C115 * C1171 + C103 * C1186) *
                       C263 +
                   (C113 * C1187 + C101 * C1196 + C114 * C1188 + C102 * C1197 +
                    C115 * C1189 + C103 * C1198) *
                       C48207) *
                      C48095 * C48110 * C47860 * C48210)) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C561 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48175 -
                    (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                     C113 * C266 + C101 * C276) *
                        C562 -
                    (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                     C113 * C279 + C101 * C296) *
                        C47951) *
                       C48095 * C48110 * C47865 +
                   ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                     C115 * C270 + C103 * C286) *
                        C562 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48175 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C561) +
                    (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                     C115 * C287 + C103 * C300) *
                        C47951) *
                       C48095 * C48110 * C47873 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C561 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48175 -
                    (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                     C113 * C264 + C101 * C274) *
                        C562 -
                    (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                     C113 * C277 + C101 * C294) *
                        C47951) *
                       C48095 * C48110 * C2726) *
                      C3120 +
                  (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C562 -
                    ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                      C113 * C433 + C101 * C450) *
                         C48175 +
                     (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                      C113 * C420 + C101 * C434) *
                         C561) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C47951) *
                       C48095 * C48110 * C47865 +
                   ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C561 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C48175 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C562 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C47951) *
                       C48095 * C48110 * C47873 +
                   ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                     C115 * C821 + C103 * C830) *
                        C562 -
                    ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                      C113 * C431 + C101 * C448) *
                         C48175 +
                     (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                      C113 * C418 + C101 * C428) *
                         C561) +
                    (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                     C115 * C831 + C103 * C836) *
                        C47951) *
                       C48095 * C48110 * C2726) *
                      C47993)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C561 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48175 -
                    (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                     C113 * C266 + C101 * C276) *
                        C562 -
                    (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                     C113 * C279 + C101 * C296) *
                        C47951) *
                       C48095 * C48110 * C2459 +
                   ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                     C115 * C270 + C103 * C286) *
                        C562 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48175 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C561) +
                    (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                     C115 * C287 + C103 * C300) *
                        C47951) *
                       C48095 * C48110 * C47870) *
                      C47989 +
                  (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C562 -
                    ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                      C113 * C433 + C101 * C450) *
                         C48175 +
                     (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                      C113 * C420 + C101 * C434) *
                         C561) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C47951) *
                       C48095 * C48110 * C2459 +
                   ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C561 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C48175 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C562 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C47951) *
                       C48095 * C48110 * C47870) *
                      C47996 +
                  (((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                     C115 * C424 + C103 * C439) *
                        C561 +
                    (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                     C115 * C442 + C103 * C454) *
                        C48175 -
                    (C115 * C1166 + C103 * C1178 + C114 * C1167 + C102 * C1179 +
                     C113 * C1168 + C101 * C1180) *
                        C562 -
                    (C115 * C1181 + C103 * C1193 + C114 * C1182 + C102 * C1194 +
                     C113 * C1183 + C101 * C1195) *
                        C47951) *
                       C48095 * C48110 * C2459 +
                   ((C113 * C1167 + C101 * C1179 + C114 * C1166 + C102 * C1178 +
                     C115 * C2031 + C103 * C2032) *
                        C562 -
                    ((C115 * C443 + C103 * C455 + C114 * C442 + C102 * C454 +
                      C113 * C441 + C101 * C453) *
                         C48175 +
                     (C115 * C425 + C103 * C444 + C114 * C424 + C102 * C439 +
                      C113 * C423 + C101 * C438) *
                         C561) +
                    (C113 * C1182 + C101 * C1194 + C114 * C1181 + C102 * C1193 +
                     C115 * C2033 + C103 * C2034) *
                        C47951) *
                       C48095 * C48110 * C47870) *
                      C3628)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C261 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48246 -
                    (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                     C113 * C266 + C101 * C276) *
                        C262 -
                    (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                     C113 * C279 + C101 * C296) *
                        C48234 +
                    (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                     C115 * C269 + C103 * C282) *
                        C263 +
                    (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                     C115 * C285 + C103 * C299) *
                        C48207) *
                       C48095 * C48110 * C2459 +
                   ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                     C115 * C270 + C103 * C286) *
                        C262 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48246 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C261) +
                    (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                     C115 * C287 + C103 * C300) *
                        C48234 -
                    (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                     C113 * C268 + C101 * C281) *
                        C263 -
                    (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                     C113 * C284 + C101 * C298) *
                        C48207) *
                       C48095 * C48110 * C47870) *
                      C3120 +
                  (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C262 -
                    ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                      C113 * C433 + C101 * C450) *
                         C48246 +
                     (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                      C113 * C420 + C101 * C434) *
                         C261) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C48234 -
                    (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                     C113 * C1165 + C101 * C1174) *
                        C263 -
                    (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                     C113 * C1177 + C101 * C1192) *
                        C48207) *
                       C48095 * C48110 * C2459 +
                   ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C261 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C48246 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C262 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C48234 +
                    (C113 * C1164 + C101 * C1173 + C114 * C1163 + C102 * C1172 +
                     C115 * C1457 + C103 * C1458) *
                        C263 +
                    (C113 * C1176 + C101 * C1191 + C114 * C1175 + C102 * C1190 +
                     C115 * C1459 + C103 * C1460) *
                        C48207) *
                       C48095 * C48110 * C47870) *
                      C47993)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47888) *
                       C48095 * C48110 * C48252 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47888 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48095 * C48110 * C48245 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47888) *
                       C48095 * C48110 * C48232 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47888 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C48095 * C48110 * C48211) *
                      C3120 +
                  (((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C116 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C47888) *
                       C48095 * C48110 * C48245 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47888 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C116) *
                       C48095 * C48110 * C48252 -
                   ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                     C113 * C431 + C101 * C448) *
                        C47888 +
                    (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                     C113 * C418 + C101 * C428) *
                        C116) *
                       C48095 * C48110 * C48232 +
                   ((C113 * C419 + C101 * C429 + C114 * C421 + C102 * C436 +
                     C115 * C667 + C103 * C668) *
                        C116 +
                    (C113 * C432 + C101 * C449 + C114 * C435 + C102 * C451 +
                     C115 * C669 + C103 * C670) *
                        C47888) *
                       C48095 * C48110 * C48211) *
                      C47993)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47888) *
                       C48095 * C48110 * C2459 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47888 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48095 * C48110 * C47870) *
                      C48254 +
                  (((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C116 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C47888) *
                       C48095 * C48110 * C47870 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47888 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C116) *
                       C48095 * C48110 * C2459) *
                      C48251 +
                  (((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                     C115 * C424 + C103 * C439) *
                        C116 +
                    (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                     C115 * C442 + C103 * C454) *
                        C47888) *
                       C48095 * C48110 * C2459 -
                   ((C115 * C443 + C103 * C455 + C114 * C442 + C102 * C454 +
                     C113 * C441 + C101 * C453) *
                        C47888 +
                    (C115 * C425 + C103 * C444 + C114 * C424 + C102 * C439 +
                     C113 * C423 + C101 * C438) *
                        C116) *
                       C48095 * C48110 * C47870) *
                      C48242 +
                  (((C113 * C1862 + C101 * C1871 + C114 * C1861 + C102 * C1870 +
                     C115 * C2137 + C103 * C2138) *
                        C116 +
                    (C113 * C1868 + C101 * C1880 + C114 * C1867 + C102 * C1879 +
                     C115 * C2139 + C103 * C2140) *
                        C47888) *
                       C48095 * C48110 * C47870 -
                   ((C115 * C1867 + C103 * C1879 + C114 * C1868 + C102 * C1880 +
                     C113 * C1869 + C101 * C1881) *
                        C47888 +
                    (C115 * C1861 + C103 * C1870 + C114 * C1862 + C102 * C1871 +
                     C113 * C1863 + C101 * C1872) *
                        C116) *
                       C48095 * C48110 * C2459) *
                      C48223)) /
                    (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47888) *
                       C48095 * C48110 * C47865 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47888 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48095 * C48110 * C47873 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47888) *
                       C48095 * C48110 * C2726) *
                      C47989 +
                  (((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C116 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C47888) *
                       C48095 * C48110 * C47873 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47888 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C116) *
                       C48095 * C48110 * C47865 -
                   ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                     C113 * C431 + C101 * C448) *
                        C47888 +
                    (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                     C113 * C418 + C101 * C428) *
                        C116) *
                       C48095 * C48110 * C2726) *
                      C47996 +
                  (((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                     C115 * C424 + C103 * C439) *
                        C116 +
                    (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                     C115 * C442 + C103 * C454) *
                        C47888) *
                       C48095 * C48110 * C47865 -
                   ((C115 * C443 + C103 * C455 + C114 * C442 + C102 * C454 +
                     C113 * C441 + C101 * C453) *
                        C47888 +
                    (C115 * C425 + C103 * C444 + C114 * C424 + C102 * C439 +
                     C113 * C423 + C101 * C438) *
                        C116) *
                       C48095 * C48110 * C47873 +
                   ((C113 * C424 + C101 * C439 + C114 * C425 + C102 * C444 +
                     C115 * C426 + C103 * C445) *
                        C116 +
                    (C113 * C442 + C101 * C454 + C114 * C443 + C102 * C455 +
                     C115 * C446 + C103 * C456) *
                        C47888) *
                       C48095 * C48110 * C2726) *
                      C3628)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47888) *
                       C48095 * C48110 * C48252 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47888 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48095 * C48110 * C48245 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47888) *
                       C48095 * C48110 * C48232 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47888 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C48095 * C48110 * C48211) *
                      C3120 +
                  (((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C116 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C47888) *
                       C48095 * C48110 * C48245 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47888 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C116) *
                       C48095 * C48110 * C48252 -
                   ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                     C113 * C431 + C101 * C448) *
                        C47888 +
                    (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                     C113 * C418 + C101 * C428) *
                        C116) *
                       C48095 * C48110 * C48232 +
                   ((C113 * C419 + C101 * C429 + C114 * C421 + C102 * C436 +
                     C115 * C667 + C103 * C668) *
                        C116 +
                    (C113 * C432 + C101 * C449 + C114 * C435 + C102 * C451 +
                     C115 * C669 + C103 * C670) *
                        C47888) *
                       C48095 * C48110 * C48211) *
                      C47993)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C261 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48246 -
                    (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                     C113 * C266 + C101 * C276) *
                        C262 -
                    (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                     C113 * C279 + C101 * C296) *
                        C48234 +
                    (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                     C115 * C269 + C103 * C282) *
                        C263 +
                    (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                     C115 * C285 + C103 * C299) *
                        C48207) *
                       C48095 * C48110 * C2459 +
                   ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                     C115 * C270 + C103 * C286) *
                        C262 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48246 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C261) +
                    (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                     C115 * C287 + C103 * C300) *
                        C48234 -
                    (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                     C113 * C268 + C101 * C281) *
                        C263 -
                    (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                     C113 * C284 + C101 * C298) *
                        C48207) *
                       C48095 * C48110 * C47870) *
                      C3120 +
                  (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C262 -
                    ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                      C113 * C433 + C101 * C450) *
                         C48246 +
                     (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                      C113 * C420 + C101 * C434) *
                         C261) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C48234 -
                    (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                     C113 * C1165 + C101 * C1174) *
                        C263 -
                    (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                     C113 * C1177 + C101 * C1192) *
                        C48207) *
                       C48095 * C48110 * C2459 +
                   ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C261 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C48246 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C262 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C48234 +
                    (C113 * C1164 + C101 * C1173 + C114 * C1163 + C102 * C1172 +
                     C115 * C1457 + C103 * C1458) *
                        C263 +
                    (C113 * C1176 + C101 * C1191 + C114 * C1175 + C102 * C1190 +
                     C115 * C1459 + C103 * C1460) *
                        C48207) *
                       C48095 * C48110 * C47870) *
                      C47993)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C561 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48175 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C562 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C47951) *
                      C48095 * C48110 * C557 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C562 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48175 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C561) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C47951) *
                      C48095 * C48110 * C558 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C561 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48175 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C562 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C47951) *
                      C48095 * C48110 * C559 +
                  ((C113 * C270 + C101 * C286 + C114 * C272 + C102 * C290 +
                    C115 * C563 + C103 * C564) *
                       C562 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C48175 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C561) +
                   (C113 * C287 + C101 * C300 + C114 * C291 + C102 * C302 +
                    C115 * C565 + C103 * C566) *
                       C47951) *
                      C48095 * C48110 * C48211) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C1303 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C1297 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C1304 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C1298 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C1305 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C1299 -
                   (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                    C113 * C1031 + C101 * C1037) *
                       C1306 -
                   (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                    C113 * C1040 + C101 * C1049) *
                       C48217) *
                      C48095 * C48110 * C48161 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C1304 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C1297 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C1303) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C1298 -
                   (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                    C113 * C268 + C101 * C281) *
                       C1305 -
                   (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                    C113 * C284 + C101 * C298) *
                       C1299 +
                   (C113 * C1030 + C101 * C1036 + C114 * C1029 + C102 * C1035 +
                    C115 * C1307 + C103 * C1308) *
                       C1306 +
                   (C113 * C1039 + C101 * C1048 + C114 * C1038 + C102 * C1047 +
                    C115 * C1309 + C103 * C1310) *
                       C48217) *
                      C48095 * C48110 * C47870) *
                 C47906) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C561 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48175 -
                    (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                     C113 * C266 + C101 * C276) *
                        C562 -
                    (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                     C113 * C279 + C101 * C296) *
                        C47951) *
                       C48095 * C48110 * C258 +
                   ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                     C115 * C270 + C103 * C286) *
                        C562 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48175 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C561) +
                    (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                     C115 * C287 + C103 * C300) *
                        C47951) *
                       C48095 * C48110 * C259 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C561 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48175 -
                    (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                     C113 * C264 + C101 * C274) *
                        C562 -
                    (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                     C113 * C277 + C101 * C294) *
                        C47951) *
                       C48095 * C48110 * C48201) *
                      C48176 +
                  (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C562 -
                    ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                      C113 * C433 + C101 * C450) *
                         C48175 +
                     (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                      C113 * C420 + C101 * C434) *
                         C561) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C47951) *
                       C48095 * C48110 * C258 +
                   ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C561 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C48175 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C562 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C47951) *
                       C48095 * C48110 * C259 +
                   ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                     C115 * C821 + C103 * C830) *
                        C562 -
                    ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                      C113 * C431 + C101 * C448) *
                         C48175 +
                     (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                      C113 * C418 + C101 * C428) *
                         C561) +
                    (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                     C115 * C831 + C103 * C836) *
                        C47951) *
                       C48095 * C48110 * C48201) *
                      C47993)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C1303 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C1297 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C1304 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C1298 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C1305 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C1299 -
                   (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                    C113 * C1031 + C101 * C1037) *
                       C1306 -
                   (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                    C113 * C1040 + C101 * C1049) *
                       C48217) *
                      C48095 * C48110 * C47860 * C48176 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C1304 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C1297 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C1303) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C1298 -
                   (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                    C113 * C1165 + C101 * C1174) *
                       C1305 -
                   (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                    C113 * C1177 + C101 * C1192) *
                       C1299 +
                   (C113 * C1559 + C101 * C1562 + C114 * C1560 + C102 * C1563 +
                    C115 * C1561 + C103 * C1564) *
                       C1306 +
                   (C113 * C1565 + C101 * C1568 + C114 * C1566 + C102 * C1569 +
                    C115 * C1567 + C103 * C1570) *
                       C48217) *
                      C48095 * C48110 * C47860 * C47993)) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C261 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48246 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C262 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C48234 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C263 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C48207) *
                      C48095 * C48110 * C258 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C262 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48246 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C261) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C48234 -
                   (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                    C113 * C268 + C101 * C281) *
                       C263 -
                   (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                    C113 * C284 + C101 * C298) *
                       C48207) *
                      C48095 * C48110 * C259 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C261 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48246 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C262 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C48234 +
                   (C113 * C269 + C101 * C282 + C114 * C271 + C102 * C288 +
                    C115 * C273 + C103 * C292) *
                       C263 +
                   (C113 * C285 + C101 * C299 + C114 * C289 + C102 * C301 +
                    C115 * C293 + C103 * C303) *
                       C48207) *
                      C48095 * C48110 * C48201) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47888) *
                      C48095 * C48110 * C107 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47888 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48095 * C48110 * C108 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47888) *
                      C48095 * C48110 * C109 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47888 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C48095 * C48110 * C110 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C47888) *
                      C48095 * C48110 * C111) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47888) *
                       C48095 * C48110 * C258 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47888 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48095 * C48110 * C259 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47888) *
                       C48095 * C48110 * C48201) *
                      C48247 +
                  (((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C116 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C47888) *
                       C48095 * C48110 * C259 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47888 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C116) *
                       C48095 * C48110 * C258 -
                   ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                     C113 * C431 + C101 * C448) *
                        C47888 +
                    (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                     C113 * C418 + C101 * C428) *
                        C116) *
                       C48095 * C48110 * C48201) *
                      C48236 +
                  (((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                     C115 * C424 + C103 * C439) *
                        C116 +
                    (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                     C115 * C442 + C103 * C454) *
                        C47888) *
                       C48095 * C48110 * C258 -
                   ((C115 * C443 + C103 * C455 + C114 * C442 + C102 * C454 +
                     C113 * C441 + C101 * C453) *
                        C47888 +
                    (C115 * C425 + C103 * C444 + C114 * C424 + C102 * C439 +
                     C113 * C423 + C101 * C438) *
                        C116) *
                       C48095 * C48110 * C259 +
                   ((C113 * C424 + C101 * C439 + C114 * C425 + C102 * C444 +
                     C115 * C426 + C103 * C445) *
                        C116 +
                    (C113 * C442 + C101 * C454 + C114 * C443 + C102 * C455 +
                     C115 * C446 + C103 * C456) *
                        C47888) *
                       C48095 * C48110 * C48201) *
                      C48210)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C953 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C947 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C954 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C948 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C955 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C48207) *
                      C48095 * C48110 * C48243 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C954 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C947 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C953) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C948 -
                   (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                    C113 * C268 + C101 * C281) *
                       C955 -
                   (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                    C113 * C284 + C101 * C298) *
                       C48207) *
                      C48095 * C48110 * C48230 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C953 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C947 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C954 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C948 +
                   (C113 * C269 + C101 * C282 + C114 * C271 + C102 * C288 +
                    C115 * C273 + C103 * C292) *
                       C955 +
                   (C113 * C285 + C101 * C299 + C114 * C289 + C102 * C301 +
                    C115 * C293 + C103 * C303) *
                       C48207) *
                      C48095 * C48110 * C48201) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C1024 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C1018 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C1025 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C1019 +
                  (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                   C115 * C269 + C103 * C282) *
                      C1026 +
                  (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                   C115 * C285 + C103 * C299) *
                      C1020 -
                  (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                   C113 * C1031 + C101 * C1037) *
                      C1027 -
                  (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                   C113 * C1040 + C101 * C1049) *
                      C1021 +
                  (C113 * C1032 + C101 * C1041 + C114 * C1033 + C102 * C1042 +
                   C115 * C1034 + C103 * C1043) *
                      C1028 +
                  (C113 * C1044 + C101 * C1050 + C114 * C1045 + C102 * C1051 +
                   C115 * C1046 + C103 * C1052) *
                      C1022) *
                 C48095 * C48110 * C47860 * C47906) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C953 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C947 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C954 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C948 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C955 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C48207) *
                      C48095 * C48110 * C47860 * C48247 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C954 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C947 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C953) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C948 -
                   (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                    C113 * C1165 + C101 * C1174) *
                       C955 -
                   (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                    C113 * C1177 + C101 * C1192) *
                       C48207) *
                      C48095 * C48110 * C47860 * C48236 +
                  ((C113 * C422 + C101 * C437 + C114 * C423 + C102 * C438 +
                    C115 * C424 + C103 * C439) *
                       C953 +
                   (C113 * C440 + C101 * C452 + C114 * C441 + C102 * C453 +
                    C115 * C442 + C103 * C454) *
                       C947 -
                   (C115 * C1166 + C103 * C1178 + C114 * C1167 + C102 * C1179 +
                    C113 * C1168 + C101 * C1180) *
                       C954 -
                   (C115 * C1181 + C103 * C1193 + C114 * C1182 + C102 * C1194 +
                    C113 * C1183 + C101 * C1195) *
                       C948 +
                   (C113 * C1169 + C101 * C1184 + C114 * C1170 + C102 * C1185 +
                    C115 * C1171 + C103 * C1186) *
                       C955 +
                   (C113 * C1187 + C101 * C1196 + C114 * C1188 + C102 * C1197 +
                    C115 * C1189 + C103 * C1198) *
                       C48207) *
                      C48095 * C48110 * C47860 * C48210)) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C47888) *
                       C48095 * C48110 * C557 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C47888 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48095 * C48110 * C558 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C47888) *
                       C48095 * C48110 * C559 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C47888 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C48095 * C48110 * C48211) *
                      C48176 +
                  (((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C116 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C47888) *
                       C48095 * C48110 * C558 -
                   ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                     C113 * C433 + C101 * C450) *
                        C47888 +
                    (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                     C113 * C420 + C101 * C434) *
                        C116) *
                       C48095 * C48110 * C557 -
                   ((C115 * C435 + C103 * C451 + C114 * C432 + C102 * C449 +
                     C113 * C431 + C101 * C448) *
                        C47888 +
                    (C115 * C421 + C103 * C436 + C114 * C419 + C102 * C429 +
                     C113 * C418 + C101 * C428) *
                        C116) *
                       C48095 * C48110 * C559 +
                   ((C113 * C419 + C101 * C429 + C114 * C421 + C102 * C436 +
                     C115 * C667 + C103 * C668) *
                        C116 +
                    (C113 * C432 + C101 * C449 + C114 * C435 + C102 * C451 +
                     C115 * C669 + C103 * C670) *
                        C47888) *
                       C48095 * C48110 * C48211) *
                      C47993)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C953 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C947 -
                    (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                     C113 * C266 + C101 * C276) *
                        C954 -
                    (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                     C113 * C279 + C101 * C296) *
                        C948 +
                    (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                     C115 * C269 + C103 * C282) *
                        C955 +
                    (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                     C115 * C285 + C103 * C299) *
                        C48207) *
                       C48095 * C48110 * C48161 +
                   ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                     C115 * C270 + C103 * C286) *
                        C954 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C947 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C953) +
                    (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                     C115 * C287 + C103 * C300) *
                        C948 -
                    (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                     C113 * C268 + C101 * C281) *
                        C955 -
                    (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                     C113 * C284 + C101 * C298) *
                        C48207) *
                       C48095 * C48110 * C47870) *
                      C48176 +
                  (((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C954 -
                    ((C115 * C431 + C103 * C448 + C114 * C430 + C102 * C447 +
                      C113 * C433 + C101 * C450) *
                         C947 +
                     (C115 * C418 + C103 * C428 + C114 * C417 + C102 * C427 +
                      C113 * C420 + C101 * C434) *
                         C953) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C948 -
                    (C115 * C1163 + C103 * C1172 + C114 * C1164 + C102 * C1173 +
                     C113 * C1165 + C101 * C1174) *
                        C955 -
                    (C115 * C1175 + C103 * C1190 + C114 * C1176 + C102 * C1191 +
                     C113 * C1177 + C101 * C1192) *
                        C48207) *
                       C48095 * C48110 * C48161 +
                   ((C113 * C417 + C101 * C427 + C114 * C418 + C102 * C428 +
                     C115 * C419 + C103 * C429) *
                        C953 +
                    (C113 * C430 + C101 * C447 + C114 * C431 + C102 * C448 +
                     C115 * C432 + C103 * C449) *
                        C947 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C954 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C948 +
                    (C113 * C1164 + C101 * C1173 + C114 * C1163 + C102 * C1172 +
                     C115 * C1457 + C103 * C1458) *
                        C955 +
                    (C113 * C1176 + C101 * C1191 + C114 * C1175 + C102 * C1190 +
                     C115 * C1459 + C103 * C1460) *
                        C48207) *
                       C48095 * C48110 * C47870) *
                      C47993)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C47888) *
                      C48095 * C48110 * C107 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C47888 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48095 * C48110 * C108 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C47888) *
                      C48095 * C48110 * C109 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C47888 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C48095 * C48110 * C110 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C47888) *
                      C48095 * C48110 * C111) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C261 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48246 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C262 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C48234 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C263 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C48207) *
                      C48095 * C48110 * C258 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C262 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48246 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C261) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C48234 -
                   (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                    C113 * C268 + C101 * C281) *
                       C263 -
                   (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                    C113 * C284 + C101 * C298) *
                       C48207) *
                      C48095 * C48110 * C259 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C261 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48246 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C262 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C48234 +
                   (C113 * C269 + C101 * C282 + C114 * C271 + C102 * C288 +
                    C115 * C273 + C103 * C292) *
                       C263 +
                   (C113 * C285 + C101 * C299 + C114 * C289 + C102 * C301 +
                    C115 * C293 + C103 * C303) *
                       C48207) *
                      C48095 * C48110 * C48201) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C953 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C947 -
                   (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                    C113 * C266 + C101 * C276) *
                       C954 -
                   (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                    C113 * C279 + C101 * C296) *
                       C948 +
                   (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                    C115 * C269 + C103 * C282) *
                       C955 +
                   (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                    C115 * C285 + C103 * C299) *
                       C48207) *
                      C48095 * C48110 * C48243 +
                  ((C113 * C265 + C101 * C275 + C114 * C264 + C102 * C274 +
                    C115 * C270 + C103 * C286) *
                       C954 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C947 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C953) +
                   (C113 * C278 + C101 * C295 + C114 * C277 + C102 * C294 +
                    C115 * C287 + C103 * C300) *
                       C948 -
                   (C115 * C271 + C103 * C288 + C114 * C269 + C102 * C282 +
                    C113 * C268 + C101 * C281) *
                       C955 -
                   (C115 * C289 + C103 * C301 + C114 * C285 + C102 * C299 +
                    C113 * C284 + C101 * C298) *
                       C48207) *
                      C48095 * C48110 * C48230 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C953 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C947 -
                   (C115 * C272 + C103 * C290 + C114 * C270 + C102 * C286 +
                    C113 * C264 + C101 * C274) *
                       C954 -
                   (C115 * C291 + C103 * C302 + C114 * C287 + C102 * C300 +
                    C113 * C277 + C101 * C294) *
                       C948 +
                   (C113 * C269 + C101 * C282 + C114 * C271 + C102 * C288 +
                    C115 * C273 + C103 * C292) *
                       C955 +
                   (C113 * C285 + C101 * C299 + C114 * C289 + C102 * C301 +
                    C115 * C293 + C103 * C303) *
                       C48207) *
                      C48095 * C48110 * C48201) *
                 C47906) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C1024 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C1018 -
                  (C115 * C264 + C103 * C274 + C114 * C265 + C102 * C275 +
                   C113 * C266 + C101 * C276) *
                      C1025 -
                  (C115 * C277 + C103 * C294 + C114 * C278 + C102 * C295 +
                   C113 * C279 + C101 * C296) *
                      C1019 +
                  (C113 * C267 + C101 * C280 + C114 * C268 + C102 * C281 +
                   C115 * C269 + C103 * C282) *
                      C1026 +
                  (C113 * C283 + C101 * C297 + C114 * C284 + C102 * C298 +
                   C115 * C285 + C103 * C299) *
                      C1020 -
                  (C115 * C1029 + C103 * C1035 + C114 * C1030 + C102 * C1036 +
                   C113 * C1031 + C101 * C1037) *
                      C1027 -
                  (C115 * C1038 + C103 * C1047 + C114 * C1039 + C102 * C1048 +
                   C113 * C1040 + C101 * C1049) *
                      C1021 +
                  (C113 * C1032 + C101 * C1041 + C114 * C1033 + C102 * C1042 +
                   C115 * C1034 + C103 * C1043) *
                      C1028 +
                  (C113 * C1044 + C101 * C1050 + C114 * C1045 + C102 * C1051 +
                   C115 * C1046 + C103 * C1052) *
                      C1022) *
                 C48095 * C48110 * C47860 * C47906) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C47047 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47947 -
            (C4802 + C4803) * C47039 - (C4804 + C4805) * C47954 +
            (C4806 + C4807) * C47053 + (C4808 + C4809) * C2723) *
               C4603 +
           ((C4803 + C4802) * C47047 + (C4805 + C4804) * C47947 -
            (C4807 + C4806) * C47039 - (C4809 + C4808) * C47954 +
            (C5727 + C5726) * C47053 + (C5729 + C5728) * C2723) *
               C48225) *
              C48110 * C47865 +
          (((C4810 + C4811) * C47039 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47947 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C47047) +
            (C4812 + C4813) * C47954 - (C4814 + C4815) * C47053 -
            (C4816 + C4817) * C2723) *
               C4603 +
           ((C4815 + C4814) * C47039 -
            ((C4813 + C4812) * C47947 + (C4811 + C4810) * C47047) +
            (C4817 + C4816) * C47954 - (C6063 + C6062) * C47053 -
            (C6065 + C6064) * C2723) *
               C48225) *
              C48110 * C47873 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C47047 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C47947 -
            (C4818 + C4819) * C47039 - (C4820 + C4821) * C47954 +
            (C4822 + C4823) * C47053 + (C4824 + C4825) * C2723) *
               C4603 +
           ((C4819 + C4818) * C47047 + (C4821 + C4820) * C47947 -
            (C4823 + C4822) * C47039 - (C4825 + C4824) * C47954 +
            (C4605 * C1029 + C4601 * C1035 + C4606 * C1307 + C48194 * C1308) *
                C47053 +
            (C4605 * C1038 + C4601 * C1047 + C4606 * C1309 + C48194 * C1310) *
                C2723) *
               C48225) *
              C48110 * C2726) *
         C47906) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C47047 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47947 -
             (C4802 + C4803) * C47039 - (C4804 + C4805) * C47954 +
             (C4806 + C4807) * C47053 + (C4808 + C4809) * C2723) *
                C4603 +
            ((C4803 + C4802) * C47047 + (C4805 + C4804) * C47947 -
             (C4807 + C4806) * C47039 - (C4809 + C4808) * C47954 +
             (C5727 + C5726) * C47053 + (C5729 + C5728) * C2723) *
                C48225) *
               C48110 * C2459 +
           (((C4810 + C4811) * C47039 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C47947 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C47047) +
             (C4812 + C4813) * C47954 - (C4814 + C4815) * C47053 -
             (C4816 + C4817) * C2723) *
                C4603 +
            ((C4815 + C4814) * C47039 -
             ((C4813 + C4812) * C47947 + (C4811 + C4810) * C47047) +
             (C4817 + C4816) * C47954 - (C6063 + C6062) * C47053 -
             (C6065 + C6064) * C2723) *
                C48225) *
               C48110 * C47870) *
              C48176 +
          ((((C5462 + C5463) * C47039 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C47947 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C47047) +
             (C5464 + C5465) * C47954 - (C5912 + C5913) * C47053 -
             (C5914 + C5915) * C2723) *
                C4603 +
            ((C5913 + C5912) * C47039 -
             ((C5465 + C5464) * C47947 + (C5463 + C5462) * C47047) +
             (C5915 + C5914) * C47954 - (C6419 + C6418) * C47053 -
             (C6421 + C6420) * C2723) *
                C48225) *
               C48110 * C2459 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C47047 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47947 -
             (C5466 + C5467) * C47039 - (C5468 + C5469) * C47954 +
             (C6268 + C6269) * C47053 + (C6270 + C6271) * C2723) *
                C4603 +
            ((C5467 + C5466) * C47047 + (C5469 + C5468) * C47947 -
             (C6269 + C6268) * C47039 - (C6271 + C6270) * C47954 +
             (C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48194 * C1564) *
                 C47053 +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48194 * C1570) *
                 C2723) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2461 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48253 -
            (C4802 + C4803) * C2462 - (C4804 + C4805) * C48249 +
            (C4806 + C4807) * C2463 + (C4808 + C4809) * C48239 -
            (C5726 + C5727) * C2464 - (C5728 + C5729) * C48217) *
               C4603 +
           ((C4803 + C4802) * C2461 + (C4805 + C4804) * C48253 -
            (C4807 + C4806) * C2462 - (C4809 + C4808) * C48249 +
            (C5727 + C5726) * C2463 + (C5729 + C5728) * C48239 -
            (C5731 + C5730) * C2464 - (C5733 + C5732) * C48217) *
               C48225) *
              C48110 * C2459 +
          (((C4810 + C4811) * C2462 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48253 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C2461) +
            (C4812 + C4813) * C48249 - (C4814 + C4815) * C2463 -
            (C4816 + C4817) * C48239 + (C6062 + C6063) * C2464 +
            (C6064 + C6065) * C48217) *
               C4603 +
           ((C4815 + C4814) * C2462 -
            ((C4813 + C4812) * C48253 + (C4811 + C4810) * C2461) +
            (C4817 + C4816) * C48249 - (C6063 + C6062) * C2463 -
            (C6065 + C6064) * C48239 +
            (C4605 * C1033 + C4601 * C1042 + C4606 * C1034 + C48194 * C1043) *
                C2464 +
            (C4605 * C1045 + C4601 * C1051 + C4606 * C1046 + C48194 * C1052) *
                C48217) *
               C48225) *
              C48110 * C47870) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2355 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C2349 -
            (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
               C4603 +
           ((C4803 + C4802) * C2355 + (C4805 + C4804) * C2349 -
            (C4807 + C4806) * C2356 - (C4809 + C4808) * C47951) *
               C48225) *
              C48110 * C48252 +
          (((C4810 + C4811) * C2356 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C2349 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C2355) +
            (C4812 + C4813) * C47951) *
               C4603 +
           ((C4815 + C4814) * C2356 -
            ((C4813 + C4812) * C2349 + (C4811 + C4810) * C2355) +
            (C4817 + C4816) * C47951) *
               C48225) *
              C48110 * C48245 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C2355 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C2349 -
            (C4818 + C4819) * C2356 - (C4820 + C4821) * C47951) *
               C4603 +
           ((C4819 + C4818) * C2355 + (C4821 + C4820) * C2349 -
            (C4823 + C4822) * C2356 - (C4825 + C4824) * C47951) *
               C48225) *
              C48110 * C48232 +
          (((C5110 + C5111) * C2356 -
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C2349 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C2355) +
            (C5112 + C5113) * C47951) *
               C4603 +
           ((C4605 * C271 + C4601 * C288 + C4606 * C273 + C48194 * C292) *
                C2356 -
            ((C5113 + C5112) * C2349 + (C5111 + C5110) * C2355) +
            (C4605 * C289 + C4601 * C301 + C4606 * C293 + C48194 * C303) *
                C47951) *
               C48225) *
              C48110 * C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C2355 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C2349 -
             (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
                C4603 +
            ((C4803 + C4802) * C2355 + (C4805 + C4804) * C2349 -
             (C4807 + C4806) * C2356 - (C4809 + C4808) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C4810 + C4811) * C2356 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C2349 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C2355) +
             (C4812 + C4813) * C47951) *
                C4603 +
            ((C4815 + C4814) * C2356 -
             ((C4813 + C4812) * C2349 + (C4811 + C4810) * C2355) +
             (C4817 + C4816) * C47951) *
                C48225) *
               C48110 * C47870) *
              C48247 +
          ((((C5462 + C5463) * C2356 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C2349 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C2355) +
             (C5464 + C5465) * C47951) *
                C4603 +
            ((C5913 + C5912) * C2356 -
             ((C5465 + C5464) * C2349 + (C5463 + C5462) * C2355) +
             (C5915 + C5914) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C2355 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C2349 -
             (C5466 + C5467) * C2356 - (C5468 + C5469) * C47951) *
                C4603 +
            ((C5467 + C5466) * C2355 + (C5469 + C5468) * C2349 -
             (C6269 + C6268) * C2356 - (C6271 + C6270) * C47951) *
                C48225) *
               C48110 * C47870) *
              C48236 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C2355 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C2349 -
             (C5916 + C5917) * C2356 - (C5918 + C5919) * C47951) *
                C4603 +
            ((C5917 + C5916) * C2355 + (C5919 + C5918) * C2349 -
             (C5921 + C5920) * C2356 - (C5923 + C5922) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C7006 + C7007) * C2356 -
             ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                  C2349 +
              (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                  C2355) +
             (C7008 + C7009) * C47951) *
                C4603 +
            ((C4605 * C1170 + C4601 * C1185 + C4606 * C1171 + C48194 * C1186) *
                 C2356 -
             ((C7009 + C7008) * C2349 + (C7007 + C7006) * C2355) +
             (C4605 * C1188 + C4601 * C1197 + C4606 * C1189 + C48194 * C1198) *
                 C47951) *
                C48225) *
               C48110 * C47870) *
              C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C2355 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C2349 -
             (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
                C4603 +
            ((C4803 + C4802) * C2355 + (C4805 + C4804) * C2349 -
             (C4807 + C4806) * C2356 - (C4809 + C4808) * C47951) *
                C48225) *
               C48110 * C47865 +
           (((C4810 + C4811) * C2356 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C2349 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C2355) +
             (C4812 + C4813) * C47951) *
                C4603 +
            ((C4815 + C4814) * C2356 -
             ((C4813 + C4812) * C2349 + (C4811 + C4810) * C2355) +
             (C4817 + C4816) * C47951) *
                C48225) *
               C48110 * C47873 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C2355 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C2349 -
             (C4818 + C4819) * C2356 - (C4820 + C4821) * C47951) *
                C4603 +
            ((C4819 + C4818) * C2355 + (C4821 + C4820) * C2349 -
             (C4823 + C4822) * C2356 - (C4825 + C4824) * C47951) *
                C48225) *
               C48110 * C2726) *
              C48176 +
          ((((C5462 + C5463) * C2356 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C2349 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C2355) +
             (C5464 + C5465) * C47951) *
                C4603 +
            ((C5913 + C5912) * C2356 -
             ((C5465 + C5464) * C2349 + (C5463 + C5462) * C2355) +
             (C5915 + C5914) * C47951) *
                C48225) *
               C48110 * C47865 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C2355 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C2349 -
             (C5466 + C5467) * C2356 - (C5468 + C5469) * C47951) *
                C4603 +
            ((C5467 + C5466) * C2355 + (C5469 + C5468) * C2349 -
             (C6269 + C6268) * C2356 - (C6271 + C6270) * C47951) *
                C48225) *
               C48110 * C47873 +
           (((C5470 + C5471) * C2356 -
             ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                  C2349 +
              (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                  C2355) +
             (C5472 + C5473) * C47951) *
                C4603 +
            ((C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                 C2356 -
             ((C5473 + C5472) * C2349 + (C5471 + C5470) * C2355) +
             (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C2726) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2355 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C2349 -
            (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
               C4603 +
           ((C4803 + C4802) * C2355 + (C4805 + C4804) * C2349 -
            (C4807 + C4806) * C2356 - (C4809 + C4808) * C47951) *
               C48225) *
              C48110 * C48252 +
          (((C4810 + C4811) * C2356 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C2349 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C2355) +
            (C4812 + C4813) * C47951) *
               C4603 +
           ((C4815 + C4814) * C2356 -
            ((C4813 + C4812) * C2349 + (C4811 + C4810) * C2355) +
            (C4817 + C4816) * C47951) *
               C48225) *
              C48110 * C48245 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C2355 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C2349 -
            (C4818 + C4819) * C2356 - (C4820 + C4821) * C47951) *
               C4603 +
           ((C4819 + C4818) * C2355 + (C4821 + C4820) * C2349 -
            (C4823 + C4822) * C2356 - (C4825 + C4824) * C47951) *
               C48225) *
              C48110 * C48232 +
          (((C5110 + C5111) * C2356 -
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C2349 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C2355) +
            (C5112 + C5113) * C47951) *
               C4603 +
           ((C4605 * C271 + C4601 * C288 + C4606 * C273 + C48194 * C292) *
                C2356 -
            ((C5113 + C5112) * C2349 + (C5111 + C5110) * C2355) +
            (C4605 * C289 + C4601 * C301 + C4606 * C293 + C48194 * C303) *
                C47951) *
               C48225) *
              C48110 * C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2461 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48253 -
            (C4802 + C4803) * C2462 - (C4804 + C4805) * C48249 +
            (C4806 + C4807) * C2463 + (C4808 + C4809) * C48239 -
            (C5726 + C5727) * C2464 - (C5728 + C5729) * C48217) *
               C4603 +
           ((C4803 + C4802) * C2461 + (C4805 + C4804) * C48253 -
            (C4807 + C4806) * C2462 - (C4809 + C4808) * C48249 +
            (C5727 + C5726) * C2463 + (C5729 + C5728) * C48239 -
            (C5731 + C5730) * C2464 - (C5733 + C5732) * C48217) *
               C48225) *
              C48110 * C2459 +
          (((C4810 + C4811) * C2462 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48253 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C2461) +
            (C4812 + C4813) * C48249 - (C4814 + C4815) * C2463 -
            (C4816 + C4817) * C48239 + (C6062 + C6063) * C2464 +
            (C6064 + C6065) * C48217) *
               C4603 +
           ((C4815 + C4814) * C2462 -
            ((C4813 + C4812) * C48253 + (C4811 + C4810) * C2461) +
            (C4817 + C4816) * C48249 - (C6063 + C6062) * C2463 -
            (C6065 + C6064) * C48239 +
            (C4605 * C1033 + C4601 * C1042 + C4606 * C1034 + C48194 * C1043) *
                C2464 +
            (C4605 * C1045 + C4601 * C1051 + C4606 * C1046 + C48194 * C1052) *
                C48217) *
               C48225) *
              C48110 * C47870) *
         C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C47047 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47947 -
             (C4802 + C4803) * C47039 - (C4804 + C4805) * C47954 +
             (C4806 + C4807) * C47053 + (C4808 + C4809) * C2723) *
                C4603 +
            ((C4803 + C4802) * C47047 + (C4805 + C4804) * C47947 -
             (C4807 + C4806) * C47039 - (C4809 + C4808) * C47954 +
             (C5727 + C5726) * C47053 + (C5729 + C5728) * C2723) *
                C48225) *
               C48110 * C48161 +
           (((C4810 + C4811) * C47039 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C47947 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C47047) +
             (C4812 + C4813) * C47954 - (C4814 + C4815) * C47053 -
             (C4816 + C4817) * C2723) *
                C4603 +
            ((C4815 + C4814) * C47039 -
             ((C4813 + C4812) * C47947 + (C4811 + C4810) * C47047) +
             (C4817 + C4816) * C47954 - (C6063 + C6062) * C47053 -
             (C6065 + C6064) * C2723) *
                C48225) *
               C48110 * C47870) *
              C3120 +
          ((((C5462 + C5463) * C47039 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C47947 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C47047) +
             (C5464 + C5465) * C47954 - (C5912 + C5913) * C47053 -
             (C5914 + C5915) * C2723) *
                C4603 +
            ((C5913 + C5912) * C47039 -
             ((C5465 + C5464) * C47947 + (C5463 + C5462) * C47047) +
             (C5915 + C5914) * C47954 - (C6419 + C6418) * C47053 -
             (C6421 + C6420) * C2723) *
                C48225) *
               C48110 * C48161 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C47047 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47947 -
             (C5466 + C5467) * C47039 - (C5468 + C5469) * C47954 +
             (C6268 + C6269) * C47053 + (C6270 + C6271) * C2723) *
                C4603 +
            ((C5467 + C5466) * C47047 + (C5469 + C5468) * C47947 -
             (C6269 + C6268) * C47039 - (C6271 + C6270) * C47954 +
             (C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48194 * C1564) *
                 C47053 +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48194 * C1570) *
                 C2723) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C47047 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47947 -
            (C4802 + C4803) * C47039 - (C4804 + C4805) * C47954 +
            (C4806 + C4807) * C47053 + (C4808 + C4809) * C2723) *
               C4603 +
           ((C4803 + C4802) * C47047 + (C4805 + C4804) * C47947 -
            (C4807 + C4806) * C47039 - (C4809 + C4808) * C47954 +
            (C5727 + C5726) * C47053 + (C5729 + C5728) * C2723) *
               C48225) *
              C48110 * C47860 * C47989 +
          (((C5462 + C5463) * C47039 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47947 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C47047) +
            (C5464 + C5465) * C47954 - (C5912 + C5913) * C47053 -
            (C5914 + C5915) * C2723) *
               C4603 +
           ((C5913 + C5912) * C47039 -
            ((C5465 + C5464) * C47947 + (C5463 + C5462) * C47047) +
            (C5915 + C5914) * C47954 - (C6419 + C6418) * C47053 -
            (C6421 + C6420) * C2723) *
               C48225) *
              C48110 * C47860 * C47996 +
          (((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                C47047 +
            (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                C47947 -
            (C5916 + C5917) * C47039 - (C5918 + C5919) * C47954 +
            (C5920 + C5921) * C47053 + (C5922 + C5923) * C2723) *
               C4603 +
           ((C5917 + C5916) * C47047 + (C5919 + C5918) * C47947 -
            (C5921 + C5920) * C47039 - (C5923 + C5922) * C47954 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48194 * C5882) *
                C47053 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48194 * C5886) *
                C2723) *
               C48225) *
              C48110 * C47860 * C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2461 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48253 -
            (C4802 + C4803) * C2462 - (C4804 + C4805) * C48249 +
            (C4806 + C4807) * C2463 + (C4808 + C4809) * C48239 -
            (C5726 + C5727) * C2464 - (C5728 + C5729) * C48217) *
               C4603 +
           ((C4803 + C4802) * C2461 + (C4805 + C4804) * C48253 -
            (C4807 + C4806) * C2462 - (C4809 + C4808) * C48249 +
            (C5727 + C5726) * C2463 + (C5729 + C5728) * C48239 -
            (C5731 + C5730) * C2464 - (C5733 + C5732) * C48217) *
               C48225) *
              C48110 * C47860 * C3120 +
          (((C5462 + C5463) * C2462 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C48253 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C2461) +
            (C5464 + C5465) * C48249 - (C5912 + C5913) * C2463 -
            (C5914 + C5915) * C48239 + (C6418 + C6419) * C2464 +
            (C6420 + C6421) * C48217) *
               C4603 +
           ((C5913 + C5912) * C2462 -
            ((C5465 + C5464) * C48253 + (C5463 + C5462) * C2461) +
            (C5915 + C5914) * C48249 - (C6419 + C6418) * C2463 -
            (C6421 + C6420) * C48239 +
            (C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48194 * C6404) *
                C2464 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48194 * C6408) *
                C48217) *
               C48225) *
              C48110 * C47860 * C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C2355 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C2349 -
             (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
                C4603 +
            ((C4803 + C4802) * C2355 + (C4805 + C4804) * C2349 -
             (C4807 + C4806) * C2356 - (C4809 + C4808) * C47951) *
                C48225) *
               C48110 * C48243 +
           (((C4810 + C4811) * C2356 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C2349 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C2355) +
             (C4812 + C4813) * C47951) *
                C4603 +
            ((C4815 + C4814) * C2356 -
             ((C4813 + C4812) * C2349 + (C4811 + C4810) * C2355) +
             (C4817 + C4816) * C47951) *
                C48225) *
               C48110 * C48230 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C2355 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C2349 -
             (C4818 + C4819) * C2356 - (C4820 + C4821) * C47951) *
                C4603 +
            ((C4819 + C4818) * C2355 + (C4821 + C4820) * C2349 -
             (C4823 + C4822) * C2356 - (C4825 + C4824) * C47951) *
                C48225) *
               C48110 * C48201) *
              C3120 +
          ((((C5462 + C5463) * C2356 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C2349 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C2355) +
             (C5464 + C5465) * C47951) *
                C4603 +
            ((C5913 + C5912) * C2356 -
             ((C5465 + C5464) * C2349 + (C5463 + C5462) * C2355) +
             (C5915 + C5914) * C47951) *
                C48225) *
               C48110 * C48243 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C2355 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C2349 -
             (C5466 + C5467) * C2356 - (C5468 + C5469) * C47951) *
                C4603 +
            ((C5467 + C5466) * C2355 + (C5469 + C5468) * C2349 -
             (C6269 + C6268) * C2356 - (C6271 + C6270) * C47951) *
                C48225) *
               C48110 * C48230 +
           (((C5470 + C5471) * C2356 -
             ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                  C2349 +
              (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                  C2355) +
             (C5472 + C5473) * C47951) *
                C4603 +
            ((C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                 C2356 -
             ((C5473 + C5472) * C2349 + (C5471 + C5470) * C2355) +
             (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2355 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C2349 -
            (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
               C4603 +
           ((C4803 + C4802) * C2355 + (C4805 + C4804) * C2349 -
            (C4807 + C4806) * C2356 - (C4809 + C4808) * C47951) *
               C48225) *
              C48110 * C47860 * C48254 +
          (((C5462 + C5463) * C2356 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C2349 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C2355) +
            (C5464 + C5465) * C47951) *
               C4603 +
           ((C5913 + C5912) * C2356 -
            ((C5465 + C5464) * C2349 + (C5463 + C5462) * C2355) +
            (C5915 + C5914) * C47951) *
               C48225) *
              C48110 * C47860 * C48251 +
          (((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                C2355 +
            (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                C2349 -
            (C5916 + C5917) * C2356 - (C5918 + C5919) * C47951) *
               C4603 +
           ((C5917 + C5916) * C2355 + (C5919 + C5918) * C2349 -
            (C5921 + C5920) * C2356 - (C5923 + C5922) * C47951) *
               C48225) *
              C48110 * C47860 * C48242 +
          (((C7286 + C7287) * C2356 -
            ((C4606 * C1868 + C48194 * C1880 + C4605 * C1869 + C4601 * C1881) *
                 C2349 +
             (C4606 * C1862 + C48194 * C1871 + C4605 * C1863 + C4601 * C1872) *
                 C2355) +
            (C7288 + C7289) * C47951) *
               C4603 +
           ((C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48194 * C7272) *
                C2356 -
            ((C7289 + C7288) * C2349 + (C7287 + C7286) * C2355) +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48194 * C7276) *
                C47951) *
               C48225) *
              C48110 * C47860 * C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C2355 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C2349 -
             (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
                C4603 +
            ((C4803 + C4802) * C2355 + (C4805 + C4804) * C2349 -
             (C4807 + C4806) * C2356 - (C4809 + C4808) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C4810 + C4811) * C2356 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C2349 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C2355) +
             (C4812 + C4813) * C47951) *
                C4603 +
            ((C4815 + C4814) * C2356 -
             ((C4813 + C4812) * C2349 + (C4811 + C4810) * C2355) +
             (C4817 + C4816) * C47951) *
                C48225) *
               C48110 * C47870) *
              C47989 +
          ((((C5462 + C5463) * C2356 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C2349 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C2355) +
             (C5464 + C5465) * C47951) *
                C4603 +
            ((C5913 + C5912) * C2356 -
             ((C5465 + C5464) * C2349 + (C5463 + C5462) * C2355) +
             (C5915 + C5914) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C2355 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C2349 -
             (C5466 + C5467) * C2356 - (C5468 + C5469) * C47951) *
                C4603 +
            ((C5467 + C5466) * C2355 + (C5469 + C5468) * C2349 -
             (C6269 + C6268) * C2356 - (C6271 + C6270) * C47951) *
                C48225) *
               C48110 * C47870) *
              C47996 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C2355 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C2349 -
             (C5916 + C5917) * C2356 - (C5918 + C5919) * C47951) *
                C4603 +
            ((C5917 + C5916) * C2355 + (C5919 + C5918) * C2349 -
             (C5921 + C5920) * C2356 - (C5923 + C5922) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C7006 + C7007) * C2356 -
             ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                  C2349 +
              (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                  C2355) +
             (C7008 + C7009) * C47951) *
                C4603 +
            ((C4605 * C1170 + C4601 * C1185 + C4606 * C1171 + C48194 * C1186) *
                 C2356 -
             ((C7009 + C7008) * C2349 + (C7007 + C7006) * C2355) +
             (C4605 * C1188 + C4601 * C1197 + C4606 * C1189 + C48194 * C1198) *
                 C47951) *
                C48225) *
               C48110 * C47870) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C2355 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C2349 -
             (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
                C4603 +
            ((C4803 + C4802) * C2355 + (C4805 + C4804) * C2349 -
             (C4807 + C4806) * C2356 - (C4809 + C4808) * C47951) *
                C48225) *
               C48110 * C48243 +
           (((C4810 + C4811) * C2356 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C2349 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C2355) +
             (C4812 + C4813) * C47951) *
                C4603 +
            ((C4815 + C4814) * C2356 -
             ((C4813 + C4812) * C2349 + (C4811 + C4810) * C2355) +
             (C4817 + C4816) * C47951) *
                C48225) *
               C48110 * C48230 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C2355 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C2349 -
             (C4818 + C4819) * C2356 - (C4820 + C4821) * C47951) *
                C4603 +
            ((C4819 + C4818) * C2355 + (C4821 + C4820) * C2349 -
             (C4823 + C4822) * C2356 - (C4825 + C4824) * C47951) *
                C48225) *
               C48110 * C48201) *
              C3120 +
          ((((C5462 + C5463) * C2356 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C2349 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C2355) +
             (C5464 + C5465) * C47951) *
                C4603 +
            ((C5913 + C5912) * C2356 -
             ((C5465 + C5464) * C2349 + (C5463 + C5462) * C2355) +
             (C5915 + C5914) * C47951) *
                C48225) *
               C48110 * C48243 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C2355 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C2349 -
             (C5466 + C5467) * C2356 - (C5468 + C5469) * C47951) *
                C4603 +
            ((C5467 + C5466) * C2355 + (C5469 + C5468) * C2349 -
             (C6269 + C6268) * C2356 - (C6271 + C6270) * C47951) *
                C48225) *
               C48110 * C48230 +
           (((C5470 + C5471) * C2356 -
             ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                  C2349 +
              (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                  C2355) +
             (C5472 + C5473) * C47951) *
                C4603 +
            ((C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                 C2356 -
             ((C5473 + C5472) * C2349 + (C5471 + C5470) * C2355) +
             (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2461 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48253 -
            (C4802 + C4803) * C2462 - (C4804 + C4805) * C48249 +
            (C4806 + C4807) * C2463 + (C4808 + C4809) * C48239 -
            (C5726 + C5727) * C2464 - (C5728 + C5729) * C48217) *
               C4603 +
           ((C4803 + C4802) * C2461 + (C4805 + C4804) * C48253 -
            (C4807 + C4806) * C2462 - (C4809 + C4808) * C48249 +
            (C5727 + C5726) * C2463 + (C5729 + C5728) * C48239 -
            (C5731 + C5730) * C2464 - (C5733 + C5732) * C48217) *
               C48225) *
              C48110 * C47860 * C3120 +
          (((C5462 + C5463) * C2462 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C48253 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C2461) +
            (C5464 + C5465) * C48249 - (C5912 + C5913) * C2463 -
            (C5914 + C5915) * C48239 + (C6418 + C6419) * C2464 +
            (C6420 + C6421) * C48217) *
               C4603 +
           ((C5913 + C5912) * C2462 -
            ((C5465 + C5464) * C48253 + (C5463 + C5462) * C2461) +
            (C5915 + C5914) * C48249 - (C6419 + C6418) * C2463 -
            (C6421 + C6420) * C48239 +
            (C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48194 * C6404) *
                C2464 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48194 * C6408) *
                C48217) *
               C48225) *
              C48110 * C47860 * C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C1303 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C1297 -
            (C4802 + C4803) * C1304 - (C4804 + C4805) * C1298 +
            (C4806 + C4807) * C1305 + (C4808 + C4809) * C1299 -
            (C5726 + C5727) * C1306 - (C5728 + C5729) * C48217) *
               C4603 +
           ((C4803 + C4802) * C1303 + (C4805 + C4804) * C1297 -
            (C4807 + C4806) * C1304 - (C4809 + C4808) * C1298 +
            (C5727 + C5726) * C1305 + (C5729 + C5728) * C1299 -
            (C5731 + C5730) * C1306 - (C5733 + C5732) * C48217) *
               C48225) *
              C48110 * C48161 +
          (((C4810 + C4811) * C1304 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C1297 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C1303) +
            (C4812 + C4813) * C1298 - (C4814 + C4815) * C1305 -
            (C4816 + C4817) * C1299 + (C6062 + C6063) * C1306 +
            (C6064 + C6065) * C48217) *
               C4603 +
           ((C4815 + C4814) * C1304 -
            ((C4813 + C4812) * C1297 + (C4811 + C4810) * C1303) +
            (C4817 + C4816) * C1298 - (C6063 + C6062) * C1305 -
            (C6065 + C6064) * C1299 +
            (C4605 * C1033 + C4601 * C1042 + C4606 * C1034 + C48194 * C1043) *
                C1306 +
            (C4605 * C1045 + C4601 * C1051 + C4606 * C1046 + C48194 * C1052) *
                C48217) *
               C48225) *
              C48110 * C47870) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C561 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48175 -
            (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
               C4603 +
           ((C4803 + C4802) * C561 + (C4805 + C4804) * C48175 -
            (C4807 + C4806) * C562 - (C4809 + C4808) * C47951) *
               C48225) *
              C48110 * C557 +
          (((C4810 + C4811) * C562 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48175 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C561) +
            (C4812 + C4813) * C47951) *
               C4603 +
           ((C4815 + C4814) * C562 -
            ((C4813 + C4812) * C48175 + (C4811 + C4810) * C561) +
            (C4817 + C4816) * C47951) *
               C48225) *
              C48110 * C558 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C561 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C48175 -
            (C4818 + C4819) * C562 - (C4820 + C4821) * C47951) *
               C4603 +
           ((C4819 + C4818) * C561 + (C4821 + C4820) * C48175 -
            (C4823 + C4822) * C562 - (C4825 + C4824) * C47951) *
               C48225) *
              C48110 * C559 +
          (((C5110 + C5111) * C562 -
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C48175 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C561) +
            (C5112 + C5113) * C47951) *
               C4603 +
           ((C4605 * C271 + C4601 * C288 + C4606 * C273 + C48194 * C292) *
                C562 -
            ((C5113 + C5112) * C48175 + (C5111 + C5110) * C561) +
            (C4605 * C289 + C4601 * C301 + C4606 * C293 + C48194 * C303) *
                C47951) *
               C48225) *
              C48110 * C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C561 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48175 -
             (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
                C4603 +
            ((C4803 + C4802) * C561 + (C4805 + C4804) * C48175 -
             (C4807 + C4806) * C562 - (C4809 + C4808) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C4810 + C4811) * C562 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48175 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C561) +
             (C4812 + C4813) * C47951) *
                C4603 +
            ((C4815 + C4814) * C562 -
             ((C4813 + C4812) * C48175 + (C4811 + C4810) * C561) +
             (C4817 + C4816) * C47951) *
                C48225) *
               C48110 * C47870) *
              C1681 +
          ((((C5462 + C5463) * C562 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C48175 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C561) +
             (C5464 + C5465) * C47951) *
                C4603 +
            ((C5913 + C5912) * C562 -
             ((C5465 + C5464) * C48175 + (C5463 + C5462) * C561) +
             (C5915 + C5914) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C561 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C48175 -
             (C5466 + C5467) * C562 - (C5468 + C5469) * C47951) *
                C4603 +
            ((C5467 + C5466) * C561 + (C5469 + C5468) * C48175 -
             (C6269 + C6268) * C562 - (C6271 + C6270) * C47951) *
                C48225) *
               C48110 * C47870) *
              C1682 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C561 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C48175 -
             (C5916 + C5917) * C562 - (C5918 + C5919) * C47951) *
                C4603 +
            ((C5917 + C5916) * C561 + (C5919 + C5918) * C48175 -
             (C5921 + C5920) * C562 - (C5923 + C5922) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C7006 + C7007) * C562 -
             ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                  C48175 +
              (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                  C561) +
             (C7008 + C7009) * C47951) *
                C4603 +
            ((C4605 * C1170 + C4601 * C1185 + C4606 * C1171 + C48194 * C1186) *
                 C562 -
             ((C7009 + C7008) * C48175 + (C7007 + C7006) * C561) +
             (C4605 * C1188 + C4601 * C1197 + C4606 * C1189 + C48194 * C1198) *
                 C47951) *
                C48225) *
               C48110 * C47870) *
              C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C1303 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C1297 -
            (C4802 + C4803) * C1304 - (C4804 + C4805) * C1298 +
            (C4806 + C4807) * C1305 + (C4808 + C4809) * C1299 -
            (C5726 + C5727) * C1306 - (C5728 + C5729) * C48217) *
               C4603 +
           ((C4803 + C4802) * C1303 + (C4805 + C4804) * C1297 -
            (C4807 + C4806) * C1304 - (C4809 + C4808) * C1298 +
            (C5727 + C5726) * C1305 + (C5729 + C5728) * C1299 -
            (C5731 + C5730) * C1306 - (C5733 + C5732) * C48217) *
               C48225) *
              C48110 * C47860 * C48176 +
          (((C5462 + C5463) * C1304 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C1297 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C1303) +
            (C5464 + C5465) * C1298 - (C5912 + C5913) * C1305 -
            (C5914 + C5915) * C1299 + (C6418 + C6419) * C1306 +
            (C6420 + C6421) * C48217) *
               C4603 +
           ((C5913 + C5912) * C1304 -
            ((C5465 + C5464) * C1297 + (C5463 + C5462) * C1303) +
            (C5915 + C5914) * C1298 - (C6419 + C6418) * C1305 -
            (C6421 + C6420) * C1299 +
            (C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48194 * C6404) *
                C1306 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48194 * C6408) *
                C48217) *
               C48225) *
              C48110 * C47860 * C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C561 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48175 -
             (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
                C4603 +
            ((C4803 + C4802) * C561 + (C4805 + C4804) * C48175 -
             (C4807 + C4806) * C562 - (C4809 + C4808) * C47951) *
                C48225) *
               C48110 * C258 +
           (((C4810 + C4811) * C562 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48175 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C561) +
             (C4812 + C4813) * C47951) *
                C4603 +
            ((C4815 + C4814) * C562 -
             ((C4813 + C4812) * C48175 + (C4811 + C4810) * C561) +
             (C4817 + C4816) * C47951) *
                C48225) *
               C48110 * C259 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C561 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C48175 -
             (C4818 + C4819) * C562 - (C4820 + C4821) * C47951) *
                C4603 +
            ((C4819 + C4818) * C561 + (C4821 + C4820) * C48175 -
             (C4823 + C4822) * C562 - (C4825 + C4824) * C47951) *
                C48225) *
               C48110 * C48201) *
              C48176 +
          ((((C5462 + C5463) * C562 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C48175 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C561) +
             (C5464 + C5465) * C47951) *
                C4603 +
            ((C4605 * C1165 + C4601 * C1174 + C4606 * C1164 + C48194 * C1173) *
                 C562 -
             ((C5465 + C5464) * C48175 + (C5463 + C5462) * C561) +
             (C4605 * C1177 + C4601 * C1192 + C4606 * C1176 + C48194 * C1191) *
                 C47951) *
                C48225) *
               C48110 * C258 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C561 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C48175 -
             (C5466 + C5467) * C562 - (C5468 + C5469) * C47951) *
                C4603 +
            ((C5467 + C5466) * C561 + (C5469 + C5468) * C48175 -
             (C4606 * C1163 + C48194 * C1172 + C4605 * C1164 + C4601 * C1173) *
                 C562 -
             (C4606 * C1175 + C48194 * C1190 + C4605 * C1176 + C4601 * C1191) *
                 C47951) *
                C48225) *
               C48110 * C259 +
           (((C5470 + C5471) * C562 -
             ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                  C48175 +
              (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                  C561) +
             (C5472 + C5473) * C47951) *
                C4603 +
            ((C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                 C562 -
             ((C5473 + C5472) * C48175 + (C5471 + C5470) * C561) +
             (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C561 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48175 -
            (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
               C4603 +
           ((C4803 + C4802) * C561 + (C4805 + C4804) * C48175 -
            (C4807 + C4806) * C562 - (C4809 + C4808) * C47951) *
               C48225) *
              C48110 * C47860 * C2133 +
          (((C5462 + C5463) * C562 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C48175 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C561) +
            (C5464 + C5465) * C47951) *
               C4603 +
           ((C5913 + C5912) * C562 -
            ((C5465 + C5464) * C48175 + (C5463 + C5462) * C561) +
            (C5915 + C5914) * C47951) *
               C48225) *
              C48110 * C47860 * C2134 +
          (((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                C561 +
            (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                C48175 -
            (C5916 + C5917) * C562 - (C5918 + C5919) * C47951) *
               C4603 +
           ((C5917 + C5916) * C561 + (C5919 + C5918) * C48175 -
            (C5921 + C5920) * C562 - (C5923 + C5922) * C47951) *
               C48225) *
              C48110 * C47860 * C2135 +
          (((C7286 + C7287) * C562 -
            ((C4606 * C1868 + C48194 * C1880 + C4605 * C1869 + C4601 * C1881) *
                 C48175 +
             (C4606 * C1862 + C48194 * C1871 + C4605 * C1863 + C4601 * C1872) *
                 C561) +
            (C7288 + C7289) * C47951) *
               C4603 +
           ((C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48194 * C7272) *
                C562 -
            ((C7289 + C7288) * C48175 + (C7287 + C7286) * C561) +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48194 * C7276) *
                C47951) *
               C48225) *
              C48110 * C47860 * C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                    C116 +
                (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                    C47888) *
                   C4603 +
               ((C4605 * C266 + C4601 * C276 + C4606 * C265 + C48194 * C275) *
                    C116 +
                (C4605 * C279 + C4601 * C296 + C4606 * C278 + C48194 * C295) *
                    C47888) *
                   C48225) *
                  C48110 * C107 -
              (((C4606 * C277 + C48194 * C294 + C4605 * C278 + C4601 * C295) *
                    C47888 +
                (C4606 * C264 + C48194 * C274 + C4605 * C265 + C4601 * C275) *
                    C116) *
                   C48225 +
               ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                    C47888 +
                (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                    C116) *
                   C4603) *
                  C48110 * C108 +
              (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                    C116 +
                (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                    C47888) *
                   C4603 +
               ((C4605 * C264 + C4601 * C274 + C4606 * C270 + C48194 * C286) *
                    C116 +
                (C4605 * C277 + C4601 * C294 + C4606 * C287 + C48194 * C300) *
                    C47888) *
                   C48225) *
                  C48110 * C109 -
              (((C4606 * C291 + C48194 * C302 + C4605 * C287 + C4601 * C300) *
                    C47888 +
                (C4606 * C272 + C48194 * C290 + C4605 * C270 + C4601 * C286) *
                    C116) *
                   C48225 +
               ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                    C47888 +
                (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                    C116) *
                   C4603) *
                  C48110 * C110 +
              (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48194 * C135) *
                    C116 +
                (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48194 * C143) *
                    C47888) *
                   C4603 +
               ((C4605 * C272 + C4601 * C290 + C4606 * C563 + C48194 * C564) *
                    C116 +
                (C4605 * C291 + C4601 * C302 + C4606 * C565 + C48194 * C566) *
                    C47888) *
                   C48225) *
                  C48110 * C111) *
             C47906 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                    C261 +
                (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                    C48246 -
                (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
                (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
                   C4603 +
               ((C4803 + C4802) * C261 + (C4805 + C4804) * C48246 -
                (C4807 + C4806) * C262 - (C4809 + C4808) * C48234 +
                (C4605 * C1031 + C4601 * C1037 + C4606 * C1030 +
                 C48194 * C1036) *
                    C263 +
                (C4605 * C1040 + C4601 * C1049 + C4606 * C1039 +
                 C48194 * C1048) *
                    C48207) *
                   C48225) *
                  C48110 * C258 +
              (((C4810 + C4811) * C262 -
                ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                     C48246 +
                 (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                     C261) +
                (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
                (C4816 + C4817) * C48207) *
                   C4603 +
               ((C4815 + C4814) * C262 -
                ((C4813 + C4812) * C48246 + (C4811 + C4810) * C261) +
                (C4817 + C4816) * C48234 -
                (C4606 * C1029 + C48194 * C1035 + C4605 * C1030 +
                 C4601 * C1036) *
                    C263 -
                (C4606 * C1038 + C48194 * C1047 + C4605 * C1039 +
                 C4601 * C1048) *
                    C48207) *
                   C48225) *
                  C48110 * C259 +
              (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                    C261 +
                (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                    C48246 -
                (C4818 + C4819) * C262 - (C4820 + C4821) * C48234 +
                (C4822 + C4823) * C263 + (C4824 + C4825) * C48207) *
                   C4603 +
               ((C4819 + C4818) * C261 + (C4821 + C4820) * C48246 -
                (C4823 + C4822) * C262 - (C4825 + C4824) * C48234 +
                (C4605 * C1029 + C4601 * C1035 + C4606 * C1307 +
                 C48194 * C1308) *
                    C263 +
                (C4605 * C1038 + C4601 * C1047 + C4606 * C1309 +
                 C48194 * C1310) *
                    C48207) *
                   C48225) *
                  C48110 * C48201) *
             C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C258 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C259 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C4603 +
            ((C4819 + C4818) * C116 + (C4821 + C4820) * C47888) * C48225) *
               C48110 * C48201) *
              C48247 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C4605 * C818 + C4601 * C823 + C4606 * C819 + C48194 * C824) *
                 C116 +
             (C4605 * C826 + C4601 * C833 + C4606 * C827 + C48194 * C834) *
                 C47888) *
                C48225) *
               C48110 * C259 -
           (((C4606 * C826 + C48194 * C833 + C4605 * C825 + C4601 * C832) *
                 C47888 +
             (C4606 * C818 + C48194 * C823 + C4605 * C817 + C4601 * C822) *
                 C116) *
                C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C258 -
           (((C4606 * C829 + C48194 * C835 + C4605 * C827 + C4601 * C834) *
                 C47888 +
             (C4606 * C820 + C48194 * C828 + C4605 * C819 + C4601 * C824) *
                 C116) *
                C48225 +
            ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                 C47888 +
             (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C4603) *
               C48110 * C48201) *
              C48236 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C116 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C47888) *
                C4603 +
            ((C4605 * C1168 + C4601 * C1180 + C4606 * C1167 + C48194 * C1179) *
                 C116 +
             (C4605 * C1183 + C4601 * C1195 + C4606 * C1182 + C48194 * C1194) *
                 C47888) *
                C48225) *
               C48110 * C258 -
           (((C4606 * C1181 + C48194 * C1193 + C4605 * C1182 + C4601 * C1194) *
                 C47888 +
             (C4606 * C1166 + C48194 * C1178 + C4605 * C1167 + C4601 * C1179) *
                 C116) *
                C48225 +
            ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                 C47888 +
             (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                 C116) *
                C4603) *
               C48110 * C259 +
           (((C4605 * C424 + C4601 * C439 + C4606 * C425 + C48194 * C444) *
                 C116 +
             (C4605 * C442 + C4601 * C454 + C4606 * C443 + C48194 * C455) *
                 C47888) *
                C4603 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C116 +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47888) *
                C48225) *
               C48110 * C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C953 + (C4805 + C4804) * C947 -
            (C4807 + C4806) * C954 - (C4809 + C4808) * C948 +
            (C4605 * C1031 + C4601 * C1037 + C4606 * C1030 + C48194 * C1036) *
                C955 +
            (C4605 * C1040 + C4601 * C1049 + C4606 * C1039 + C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48243 +
          (((C4810 + C4811) * C954 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C947 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C953) +
            (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
            (C4816 + C4817) * C48207) *
               C4603 +
           ((C4815 + C4814) * C954 -
            ((C4813 + C4812) * C947 + (C4811 + C4810) * C953) +
            (C4817 + C4816) * C948 -
            (C4606 * C1029 + C48194 * C1035 + C4605 * C1030 + C4601 * C1036) *
                C955 -
            (C4606 * C1038 + C48194 * C1047 + C4605 * C1039 + C4601 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48230 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C953 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C947 -
            (C4818 + C4819) * C954 - (C4820 + C4821) * C948 +
            (C4822 + C4823) * C955 + (C4824 + C4825) * C48207) *
               C4603 +
           ((C4819 + C4818) * C953 + (C4821 + C4820) * C947 -
            (C4823 + C4822) * C954 - (C4825 + C4824) * C948 +
            (C4605 * C1029 + C4601 * C1035 + C4606 * C1307 + C48194 * C1308) *
                C955 +
            (C4605 * C1038 + C4601 * C1047 + C4606 * C1309 + C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
               C1024 +
           (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
               C1018 -
           (C4802 + C4803) * C1025 - (C4804 + C4805) * C1019 +
           (C4806 + C4807) * C1026 + (C4808 + C4809) * C1020 -
           (C5726 + C5727) * C1027 - (C5728 + C5729) * C1021 +
           (C5730 + C5731) * C1028 + (C5732 + C5733) * C1022) *
              C4603 +
          ((C4803 + C4802) * C1024 + (C4805 + C4804) * C1018 -
           (C4807 + C4806) * C1025 - (C4809 + C4808) * C1019 +
           (C5727 + C5726) * C1026 + (C5729 + C5728) * C1020 -
           (C5731 + C5730) * C1027 - (C5733 + C5732) * C1021 +
           (C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48194 * C5704) *
               C1028 +
           (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48194 * C5708) *
               C1022) *
              C48225) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C953 + (C4805 + C4804) * C947 -
            (C4807 + C4806) * C954 - (C4809 + C4808) * C948 +
            (C5727 + C5726) * C955 + (C5729 + C5728) * C48207) *
               C48225) *
              C48110 * C47860 * C48247 +
          (((C5462 + C5463) * C954 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C947 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C953) +
            (C5464 + C5465) * C948 - (C5912 + C5913) * C955 -
            (C5914 + C5915) * C48207) *
               C4603 +
           ((C5913 + C5912) * C954 -
            ((C5465 + C5464) * C947 + (C5463 + C5462) * C953) +
            (C5915 + C5914) * C948 -
            (C4606 * C1560 + C48194 * C1563 + C4605 * C1559 + C4601 * C1562) *
                C955 -
            (C4606 * C1566 + C48194 * C1569 + C4605 * C1565 + C4601 * C1568) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48236 +
          (((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                C953 +
            (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                C947 -
            (C5916 + C5917) * C954 - (C5918 + C5919) * C948 +
            (C5920 + C5921) * C955 + (C5922 + C5923) * C48207) *
               C4603 +
           ((C5917 + C5916) * C953 + (C5919 + C5918) * C947 -
            (C5921 + C5920) * C954 - (C5923 + C5922) * C948 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48194 * C5882) *
                C955 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48194 * C5886) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C48243 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C48230 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C4603 +
            ((C4819 + C4818) * C116 + (C4821 + C4820) * C47888) * C48225) *
               C48110 * C48201) *
              C1681 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C5467 + C5466) * C116 + (C5469 + C5468) * C47888) * C48225) *
               C48110 * C48230 -
           (((C5465 + C5464) * C47888 + (C5463 + C5462) * C116) * C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C48243 -
           (((C5473 + C5472) * C47888 + (C5471 + C5470) * C116) * C48225 +
            ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                 C47888 +
             (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C4603) *
               C48110 * C48201) *
              C1682 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C116 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C47888) *
                C4603 +
            ((C5917 + C5916) * C116 + (C5919 + C5918) * C47888) * C48225) *
               C48110 * C48243 -
           (((C4606 * C1181 + C48194 * C1193 + C4605 * C1182 + C4601 * C1194) *
                 C47888 +
             (C4606 * C1166 + C48194 * C1178 + C4605 * C1167 + C4601 * C1179) *
                 C116) *
                C48225 +
            ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                 C47888 +
             (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                 C116) *
                C4603) *
               C48110 * C48230 +
           (((C4605 * C424 + C4601 * C439 + C4606 * C425 + C48194 * C444) *
                 C116 +
             (C4605 * C442 + C4601 * C454 + C4606 * C443 + C48194 * C455) *
                 C47888) *
                C4603 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C116 +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47888) *
                C48225) *
               C48110 * C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C261 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48246 -
            (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
            (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C261 + (C4805 + C4804) * C48246 -
            (C4807 + C4806) * C262 - (C4809 + C4808) * C48234 +
            (C5727 + C5726) * C263 + (C5729 + C5728) * C48207) *
               C48225) *
              C48110 * C47860 * C1681 +
          (((C5462 + C5463) * C262 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C48246 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C261) +
            (C5464 + C5465) * C48234 - (C5912 + C5913) * C263 -
            (C5914 + C5915) * C48207) *
               C4603 +
           ((C5913 + C5912) * C262 -
            ((C5465 + C5464) * C48246 + (C5463 + C5462) * C261) +
            (C5915 + C5914) * C48234 - (C6419 + C6418) * C263 -
            (C6421 + C6420) * C48207) *
               C48225) *
              C48110 * C47860 * C1682 +
          (((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                C261 +
            (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                C48246 -
            (C5916 + C5917) * C262 - (C5918 + C5919) * C48234 +
            (C5920 + C5921) * C263 + (C5922 + C5923) * C48207) *
               C4603 +
           ((C5917 + C5916) * C261 + (C5919 + C5918) * C48246 -
            (C5921 + C5920) * C262 - (C5923 + C5922) * C48234 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48194 * C5882) *
                C263 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48194 * C5886) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47888) *
               C4603 +
           ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
              C48110 * C47860 * C1856 -
          (((C5465 + C5464) * C47888 + (C5463 + C5462) * C116) * C48225 +
           ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                C47888 +
            (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                C116) *
               C4603) *
              C48110 * C47860 * C1857 +
          (((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                C116 +
            (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                C47888) *
               C4603 +
           ((C5917 + C5916) * C116 + (C5919 + C5918) * C47888) * C48225) *
              C48110 * C47860 * C1858 -
          (((C4606 * C2246 + C48194 * C2249 + C4605 * C2245 + C4601 * C2248) *
                C47888 +
            (C4606 * C2240 + C48194 * C2243 + C4605 * C2239 + C4601 * C2242) *
                C116) *
               C48225 +
           ((C4606 * C1868 + C48194 * C1880 + C4605 * C1869 + C4601 * C1881) *
                C47888 +
            (C4606 * C1862 + C48194 * C1871 + C4605 * C1863 + C4601 * C1872) *
                C116) *
               C4603) *
              C48110 * C47860 * C1859 +
          (((C4605 * C1864 + C4601 * C1873 + C4606 * C1865 + C48194 * C1874) *
                C116 +
            (C4605 * C1876 + C4601 * C1882 + C4606 * C1877 + C48194 * C1883) *
                C47888) *
               C4603 +
           ((C4605 * C6795 + C4601 * C6797 + C4606 * C6796 + C48194 * C6798) *
                C116 +
            (C4605 * C6799 + C4601 * C6801 + C4606 * C6800 + C48194 * C6802) *
                C47888) *
               C48225) *
              C48110 * C47860 * C1860)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C953 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C947 -
             (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
             (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
                C4603 +
            ((C4803 + C4802) * C953 + (C4805 + C4804) * C947 -
             (C4807 + C4806) * C954 - (C4809 + C4808) * C948 +
             (C5727 + C5726) * C955 + (C5729 + C5728) * C48207) *
                C48225) *
               C48110 * C48161 +
           (((C4810 + C4811) * C954 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C947 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C953) +
             (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
             (C4816 + C4817) * C48207) *
                C4603 +
            ((C4815 + C4814) * C954 -
             ((C4813 + C4812) * C947 + (C4811 + C4810) * C953) +
             (C4817 + C4816) * C948 - (C6063 + C6062) * C955 -
             (C6065 + C6064) * C48207) *
                C48225) *
               C48110 * C47870) *
              C48176 +
          ((((C5462 + C5463) * C954 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C947 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C953) +
             (C5464 + C5465) * C948 - (C5912 + C5913) * C955 -
             (C5914 + C5915) * C48207) *
                C4603 +
            ((C5913 + C5912) * C954 -
             ((C5465 + C5464) * C947 + (C5463 + C5462) * C953) +
             (C5915 + C5914) * C948 -
             (C4606 * C1560 + C48194 * C1563 + C4605 * C1559 + C4601 * C1562) *
                 C955 -
             (C4606 * C1566 + C48194 * C1569 + C4605 * C1565 + C4601 * C1568) *
                 C48207) *
                C48225) *
               C48110 * C48161 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C953 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C947 -
             (C5466 + C5467) * C954 - (C5468 + C5469) * C948 +
             (C6268 + C6269) * C955 + (C6270 + C6271) * C48207) *
                C4603 +
            ((C5467 + C5466) * C953 + (C5469 + C5468) * C947 -
             (C6269 + C6268) * C954 - (C6271 + C6270) * C948 +
             (C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48194 * C1564) *
                 C955 +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48194 * C1570) *
                 C48207) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C557 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C558 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C4603 +
            ((C4819 + C4818) * C116 + (C4821 + C4820) * C47888) * C48225) *
               C48110 * C559 -
           (((C5113 + C5112) * C47888 + (C5111 + C5110) * C116) * C48225 +
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C47888 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C4603) *
               C48110 * C48211) *
              C48176 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C4605 * C818 + C4601 * C823 + C4606 * C819 + C48194 * C824) *
                 C116 +
             (C4605 * C826 + C4601 * C833 + C4606 * C827 + C48194 * C834) *
                 C47888) *
                C48225) *
               C48110 * C558 -
           (((C4606 * C826 + C48194 * C833 + C4605 * C825 + C4601 * C832) *
                 C47888 +
             (C4606 * C818 + C48194 * C823 + C4605 * C817 + C4601 * C822) *
                 C116) *
                C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C557 -
           (((C4606 * C829 + C48194 * C835 + C4605 * C827 + C4601 * C834) *
                 C47888 +
             (C4606 * C820 + C48194 * C828 + C4605 * C819 + C4601 * C824) *
                 C116) *
                C48225 +
            ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                 C47888 +
             (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C4603) *
               C48110 * C559 +
           (((C4605 * C419 + C4601 * C429 + C4606 * C421 + C48194 * C436) *
                 C116 +
             (C4605 * C432 + C4601 * C449 + C4606 * C435 + C48194 * C451) *
                 C47888) *
                C4603 +
            ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48194 * C830) *
                 C116 +
             (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48194 * C836) *
                 C47888) *
                C48225) *
               C48110 * C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C48161 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C47870) *
              C2133 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C5467 + C5466) * C116 + (C5469 + C5468) * C47888) * C48225) *
               C48110 * C47870 -
           (((C5465 + C5464) * C47888 + (C5463 + C5462) * C116) * C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C48161) *
              C2134 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C116 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C47888) *
                C4603 +
            ((C5917 + C5916) * C116 + (C5919 + C5918) * C47888) * C48225) *
               C48110 * C48161 -
           (((C7009 + C7008) * C47888 + (C7007 + C7006) * C116) * C48225 +
            ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                 C47888 +
             (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                 C116) *
                C4603) *
               C48110 * C47870) *
              C2135 +
          ((((C4605 * C1862 + C4601 * C1871 + C4606 * C1861 + C48194 * C1870) *
                 C116 +
             (C4605 * C1868 + C4601 * C1880 + C4606 * C1867 + C48194 * C1879) *
                 C47888) *
                C4603 +
            ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48194 * C2244) *
                 C116 +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48194 * C2250) *
                 C47888) *
                C48225) *
               C48110 * C47870 -
           (((C4606 * C2246 + C48194 * C2249 + C4605 * C2245 + C4601 * C2248) *
                 C47888 +
             (C4606 * C2240 + C48194 * C2243 + C4605 * C2239 + C4601 * C2242) *
                 C116) *
                C48225 +
            ((C4606 * C1868 + C48194 * C1880 + C4605 * C1869 + C4601 * C1881) *
                 C47888 +
             (C4606 * C1862 + C48194 * C1871 + C4605 * C1863 + C4601 * C1872) *
                 C116) *
                C4603) *
               C48110 * C48161) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C261 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48246 -
            (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
            (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C261 + (C4805 + C4804) * C48246 -
            (C4807 + C4806) * C262 - (C4809 + C4808) * C48234 +
            (C4605 * C1031 + C4601 * C1037 + C4606 * C1030 + C48194 * C1036) *
                C263 +
            (C4605 * C1040 + C4601 * C1049 + C4606 * C1039 + C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C258 +
          (((C4810 + C4811) * C262 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48246 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C261) +
            (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
            (C4816 + C4817) * C48207) *
               C4603 +
           ((C4815 + C4814) * C262 -
            ((C4813 + C4812) * C48246 + (C4811 + C4810) * C261) +
            (C4817 + C4816) * C48234 -
            (C4606 * C1029 + C48194 * C1035 + C4605 * C1030 + C4601 * C1036) *
                C263 -
            (C4606 * C1038 + C48194 * C1047 + C4605 * C1039 + C4601 * C1048) *
                C48207) *
               C48225) *
              C48110 * C259 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C261 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C48246 -
            (C4818 + C4819) * C262 - (C4820 + C4821) * C48234 +
            (C4822 + C4823) * C263 + (C4824 + C4825) * C48207) *
               C4603 +
           ((C4819 + C4818) * C261 + (C4821 + C4820) * C48246 -
            (C4823 + C4822) * C262 - (C4825 + C4824) * C48234 +
            (C4605 * C1029 + C4601 * C1035 + C4606 * C1307 + C48194 * C1308) *
                C263 +
            (C4605 * C1038 + C4601 * C1047 + C4606 * C1309 + C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47888) *
               C4603 +
           ((C4605 * C266 + C4601 * C276 + C4606 * C265 + C48194 * C275) *
                C116 +
            (C4605 * C279 + C4601 * C296 + C4606 * C278 + C48194 * C295) *
                C47888) *
               C48225) *
              C48110 * C107 -
          (((C4606 * C277 + C48194 * C294 + C4605 * C278 + C4601 * C295) *
                C47888 +
            (C4606 * C264 + C48194 * C274 + C4605 * C265 + C4601 * C275) *
                C116) *
               C48225 +
           ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                C47888 +
            (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C4603) *
              C48110 * C108 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C47888) *
               C4603 +
           ((C4605 * C264 + C4601 * C274 + C4606 * C270 + C48194 * C286) *
                C116 +
            (C4605 * C277 + C4601 * C294 + C4606 * C287 + C48194 * C300) *
                C47888) *
               C48225) *
              C48110 * C109 -
          (((C4606 * C291 + C48194 * C302 + C4605 * C287 + C4601 * C300) *
                C47888 +
            (C4606 * C272 + C48194 * C290 + C4605 * C270 + C4601 * C286) *
                C116) *
               C48225 +
           ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                C47888 +
            (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C4603) *
              C48110 * C110 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48194 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48194 * C143) *
                C47888) *
               C4603 +
           ((C4605 * C272 + C4601 * C290 + C4606 * C563 + C48194 * C564) *
                C116 +
            (C4605 * C291 + C4601 * C302 + C4606 * C565 + C48194 * C566) *
                C47888) *
               C48225) *
              C48110 * C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C953 + (C4805 + C4804) * C947 -
            (C4807 + C4806) * C954 - (C4809 + C4808) * C948 +
            (C4605 * C1031 + C4601 * C1037 + C4606 * C1030 + C48194 * C1036) *
                C955 +
            (C4605 * C1040 + C4601 * C1049 + C4606 * C1039 + C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48243 +
          (((C4810 + C4811) * C954 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C947 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C953) +
            (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
            (C4816 + C4817) * C48207) *
               C4603 +
           ((C4815 + C4814) * C954 -
            ((C4813 + C4812) * C947 + (C4811 + C4810) * C953) +
            (C4817 + C4816) * C948 -
            (C4606 * C1029 + C48194 * C1035 + C4605 * C1030 + C4601 * C1036) *
                C955 -
            (C4606 * C1038 + C48194 * C1047 + C4605 * C1039 + C4601 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48230 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C953 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C947 -
            (C4818 + C4819) * C954 - (C4820 + C4821) * C948 +
            (C4822 + C4823) * C955 + (C4824 + C4825) * C48207) *
               C4603 +
           ((C4819 + C4818) * C953 + (C4821 + C4820) * C947 -
            (C4823 + C4822) * C954 - (C4825 + C4824) * C948 +
            (C4605 * C1029 + C4601 * C1035 + C4606 * C1307 + C48194 * C1308) *
                C955 +
            (C4605 * C1038 + C4601 * C1047 + C4606 * C1309 + C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
               C1024 +
           (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
               C1018 -
           (C4802 + C4803) * C1025 - (C4804 + C4805) * C1019 +
           (C4806 + C4807) * C1026 + (C4808 + C4809) * C1020 -
           (C5726 + C5727) * C1027 - (C5728 + C5729) * C1021 +
           (C5730 + C5731) * C1028 + (C5732 + C5733) * C1022) *
              C4603 +
          ((C4803 + C4802) * C1024 + (C4805 + C4804) * C1018 -
           (C4807 + C4806) * C1025 - (C4809 + C4808) * C1019 +
           (C5727 + C5726) * C1026 + (C5729 + C5728) * C1020 -
           (C5731 + C5730) * C1027 - (C5733 + C5732) * C1021 +
           (C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48194 * C5704) *
               C1028 +
           (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48194 * C5708) *
               C1022) *
              C48225) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C48243 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C48230 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C4603 +
            ((C4819 + C4818) * C116 + (C4821 + C4820) * C47888) * C48225) *
               C48110 * C48201) *
              C1681 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C5467 + C5466) * C116 + (C5469 + C5468) * C47888) * C48225) *
               C48110 * C48230 -
           (((C5465 + C5464) * C47888 + (C5463 + C5462) * C116) * C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C48243 -
           (((C5473 + C5472) * C47888 + (C5471 + C5470) * C116) * C48225 +
            ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                 C47888 +
             (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C4603) *
               C48110 * C48201) *
              C1682 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C116 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C47888) *
                C4603 +
            ((C5917 + C5916) * C116 + (C5919 + C5918) * C47888) * C48225) *
               C48110 * C48243 -
           (((C4606 * C1181 + C48194 * C1193 + C4605 * C1182 + C4601 * C1194) *
                 C47888 +
             (C4606 * C1166 + C48194 * C1178 + C4605 * C1167 + C4601 * C1179) *
                 C116) *
                C48225 +
            ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                 C47888 +
             (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                 C116) *
                C4603) *
               C48110 * C48230 +
           (((C4605 * C424 + C4601 * C439 + C4606 * C425 + C48194 * C444) *
                 C116 +
             (C4605 * C442 + C4601 * C454 + C4606 * C443 + C48194 * C455) *
                 C47888) *
                C4603 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C116 +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47888) *
                C48225) *
               C48110 * C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C261 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48246 -
            (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
            (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C261 + (C4805 + C4804) * C48246 -
            (C4807 + C4806) * C262 - (C4809 + C4808) * C48234 +
            (C5727 + C5726) * C263 + (C5729 + C5728) * C48207) *
               C48225) *
              C48110 * C47860 * C1681 +
          (((C5462 + C5463) * C262 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C48246 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C261) +
            (C5464 + C5465) * C48234 - (C5912 + C5913) * C263 -
            (C5914 + C5915) * C48207) *
               C4603 +
           ((C5913 + C5912) * C262 -
            ((C5465 + C5464) * C48246 + (C5463 + C5462) * C261) +
            (C5915 + C5914) * C48234 - (C6419 + C6418) * C263 -
            (C6421 + C6420) * C48207) *
               C48225) *
              C48110 * C47860 * C1682 +
          (((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                C261 +
            (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                C48246 -
            (C5916 + C5917) * C262 - (C5918 + C5919) * C48234 +
            (C5920 + C5921) * C263 + (C5922 + C5923) * C48207) *
               C4603 +
           ((C5917 + C5916) * C261 + (C5919 + C5918) * C48246 -
            (C5921 + C5920) * C262 - (C5923 + C5922) * C48234 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48194 * C5882) *
                C263 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48194 * C5886) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C561 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48175 -
             (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
                C4603 +
            ((C4803 + C4802) * C561 + (C4805 + C4804) * C48175 -
             (C4807 + C4806) * C562 - (C4809 + C4808) * C47951) *
                C48225) *
               C48110 * C47865 +
           (((C4810 + C4811) * C562 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48175 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C561) +
             (C4812 + C4813) * C47951) *
                C4603 +
            ((C4815 + C4814) * C562 -
             ((C4813 + C4812) * C48175 + (C4811 + C4810) * C561) +
             (C4817 + C4816) * C47951) *
                C48225) *
               C48110 * C47873 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C561 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C48175 -
             (C4818 + C4819) * C562 - (C4820 + C4821) * C47951) *
                C4603 +
            ((C4819 + C4818) * C561 + (C4821 + C4820) * C48175 -
             (C4823 + C4822) * C562 - (C4825 + C4824) * C47951) *
                C48225) *
               C48110 * C2726) *
              C3120 +
          ((((C5462 + C5463) * C562 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C48175 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C561) +
             (C5464 + C5465) * C47951) *
                C4603 +
            ((C5913 + C5912) * C562 -
             ((C5465 + C5464) * C48175 + (C5463 + C5462) * C561) +
             (C5915 + C5914) * C47951) *
                C48225) *
               C48110 * C47865 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C561 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C48175 -
             (C5466 + C5467) * C562 - (C5468 + C5469) * C47951) *
                C4603 +
            ((C5467 + C5466) * C561 + (C5469 + C5468) * C48175 -
             (C6269 + C6268) * C562 - (C6271 + C6270) * C47951) *
                C48225) *
               C48110 * C47873 +
           (((C5470 + C5471) * C562 -
             ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                  C48175 +
              (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                  C561) +
             (C5472 + C5473) * C47951) *
                C4603 +
            ((C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                 C562 -
             ((C5473 + C5472) * C48175 + (C5471 + C5470) * C561) +
             (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C2726) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C561 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48175 -
             (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
                C4603 +
            ((C4803 + C4802) * C561 + (C4805 + C4804) * C48175 -
             (C4807 + C4806) * C562 - (C4809 + C4808) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C4810 + C4811) * C562 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48175 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C561) +
             (C4812 + C4813) * C47951) *
                C4603 +
            ((C4815 + C4814) * C562 -
             ((C4813 + C4812) * C48175 + (C4811 + C4810) * C561) +
             (C4817 + C4816) * C47951) *
                C48225) *
               C48110 * C47870) *
              C47989 +
          ((((C5462 + C5463) * C562 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C48175 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C561) +
             (C5464 + C5465) * C47951) *
                C4603 +
            ((C5913 + C5912) * C562 -
             ((C5465 + C5464) * C48175 + (C5463 + C5462) * C561) +
             (C5915 + C5914) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C561 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C48175 -
             (C5466 + C5467) * C562 - (C5468 + C5469) * C47951) *
                C4603 +
            ((C5467 + C5466) * C561 + (C5469 + C5468) * C48175 -
             (C6269 + C6268) * C562 - (C6271 + C6270) * C47951) *
                C48225) *
               C48110 * C47870) *
              C47996 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C561 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C48175 -
             (C5916 + C5917) * C562 - (C5918 + C5919) * C47951) *
                C4603 +
            ((C5917 + C5916) * C561 + (C5919 + C5918) * C48175 -
             (C5921 + C5920) * C562 - (C5923 + C5922) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C7006 + C7007) * C562 -
             ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                  C48175 +
              (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                  C561) +
             (C7008 + C7009) * C47951) *
                C4603 +
            ((C4605 * C1170 + C4601 * C1185 + C4606 * C1171 + C48194 * C1186) *
                 C562 -
             ((C7009 + C7008) * C48175 + (C7007 + C7006) * C561) +
             (C4605 * C1188 + C4601 * C1197 + C4606 * C1189 + C48194 * C1198) *
                 C47951) *
                C48225) *
               C48110 * C47870) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C261 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48246 -
             (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
             (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
                C4603 +
            ((C4803 + C4802) * C261 + (C4805 + C4804) * C48246 -
             (C4807 + C4806) * C262 - (C4809 + C4808) * C48234 +
             (C5727 + C5726) * C263 + (C5729 + C5728) * C48207) *
                C48225) *
               C48110 * C2459 +
           (((C4810 + C4811) * C262 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48246 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C261) +
             (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
             (C4816 + C4817) * C48207) *
                C4603 +
            ((C4815 + C4814) * C262 -
             ((C4813 + C4812) * C48246 + (C4811 + C4810) * C261) +
             (C4817 + C4816) * C48234 - (C6063 + C6062) * C263 -
             (C6065 + C6064) * C48207) *
                C48225) *
               C48110 * C47870) *
              C3120 +
          ((((C5462 + C5463) * C262 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C48246 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C261) +
             (C5464 + C5465) * C48234 - (C5912 + C5913) * C263 -
             (C5914 + C5915) * C48207) *
                C4603 +
            ((C5913 + C5912) * C262 -
             ((C5465 + C5464) * C48246 + (C5463 + C5462) * C261) +
             (C5915 + C5914) * C48234 - (C6419 + C6418) * C263 -
             (C6421 + C6420) * C48207) *
                C48225) *
               C48110 * C2459 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C261 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C48246 -
             (C5466 + C5467) * C262 - (C5468 + C5469) * C48234 +
             (C6268 + C6269) * C263 + (C6270 + C6271) * C48207) *
                C4603 +
            ((C5467 + C5466) * C261 + (C5469 + C5468) * C48246 -
             (C6269 + C6268) * C262 - (C6271 + C6270) * C48234 +
             (C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48194 * C1564) *
                 C263 +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48194 * C1570) *
                 C48207) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C48252 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C48245 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C4603 +
            ((C4819 + C4818) * C116 + (C4821 + C4820) * C47888) * C48225) *
               C48110 * C48232 -
           (((C5113 + C5112) * C47888 + (C5111 + C5110) * C116) * C48225 +
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C47888 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C4603) *
               C48110 * C48211) *
              C3120 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C5467 + C5466) * C116 + (C5469 + C5468) * C47888) * C48225) *
               C48110 * C48245 -
           (((C5465 + C5464) * C47888 + (C5463 + C5462) * C116) * C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C48252 -
           (((C5473 + C5472) * C47888 + (C5471 + C5470) * C116) * C48225 +
            ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                 C47888 +
             (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C4603) *
               C48110 * C48232 +
           (((C4605 * C419 + C4601 * C429 + C4606 * C421 + C48194 * C436) *
                 C116 +
             (C4605 * C432 + C4601 * C449 + C4606 * C435 + C48194 * C451) *
                 C47888) *
                C4603 +
            ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48194 * C830) *
                 C116 +
             (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48194 * C836) *
                 C47888) *
                C48225) *
               C48110 * C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C2459 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C47870) *
              C48254 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C5467 + C5466) * C116 + (C5469 + C5468) * C47888) * C48225) *
               C48110 * C47870 -
           (((C5465 + C5464) * C47888 + (C5463 + C5462) * C116) * C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C2459) *
              C48251 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C116 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C47888) *
                C4603 +
            ((C5917 + C5916) * C116 + (C5919 + C5918) * C47888) * C48225) *
               C48110 * C2459 -
           (((C7009 + C7008) * C47888 + (C7007 + C7006) * C116) * C48225 +
            ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                 C47888 +
             (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                 C116) *
                C4603) *
               C48110 * C47870) *
              C48242 +
          ((((C4605 * C1862 + C4601 * C1871 + C4606 * C1861 + C48194 * C1870) *
                 C116 +
             (C4605 * C1868 + C4601 * C1880 + C4606 * C1867 + C48194 * C1879) *
                 C47888) *
                C4603 +
            ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48194 * C2244) *
                 C116 +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48194 * C2250) *
                 C47888) *
                C48225) *
               C48110 * C47870 -
           (((C7289 + C7288) * C47888 + (C7287 + C7286) * C116) * C48225 +
            ((C4606 * C1868 + C48194 * C1880 + C4605 * C1869 + C4601 * C1881) *
                 C47888 +
             (C4606 * C1862 + C48194 * C1871 + C4605 * C1863 + C4601 * C1872) *
                 C116) *
                C4603) *
               C48110 * C2459) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C47865 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C47873 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C4603 +
            ((C4819 + C4818) * C116 + (C4821 + C4820) * C47888) * C48225) *
               C48110 * C2726) *
              C47989 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C5467 + C5466) * C116 + (C5469 + C5468) * C47888) * C48225) *
               C48110 * C47873 -
           (((C5465 + C5464) * C47888 + (C5463 + C5462) * C116) * C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C47865 -
           (((C5473 + C5472) * C47888 + (C5471 + C5470) * C116) * C48225 +
            ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                 C47888 +
             (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C4603) *
               C48110 * C2726) *
              C47996 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C116 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C47888) *
                C4603 +
            ((C5917 + C5916) * C116 + (C5919 + C5918) * C47888) * C48225) *
               C48110 * C47865 -
           (((C7009 + C7008) * C47888 + (C7007 + C7006) * C116) * C48225 +
            ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                 C47888 +
             (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                 C116) *
                C4603) *
               C48110 * C47873 +
           (((C4605 * C424 + C4601 * C439 + C4606 * C425 + C48194 * C444) *
                 C116 +
             (C4605 * C442 + C4601 * C454 + C4606 * C443 + C48194 * C455) *
                 C47888) *
                C4603 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C116 +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47888) *
                C48225) *
               C48110 * C2726) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C48252 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C48245 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C4603 +
            ((C4819 + C4818) * C116 + (C4821 + C4820) * C47888) * C48225) *
               C48110 * C48232 -
           (((C5113 + C5112) * C47888 + (C5111 + C5110) * C116) * C48225 +
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C47888 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C4603) *
               C48110 * C48211) *
              C3120 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C5467 + C5466) * C116 + (C5469 + C5468) * C47888) * C48225) *
               C48110 * C48245 -
           (((C5465 + C5464) * C47888 + (C5463 + C5462) * C116) * C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C48252 -
           (((C5473 + C5472) * C47888 + (C5471 + C5470) * C116) * C48225 +
            ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                 C47888 +
             (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C4603) *
               C48110 * C48232 +
           (((C4605 * C419 + C4601 * C429 + C4606 * C421 + C48194 * C436) *
                 C116 +
             (C4605 * C432 + C4601 * C449 + C4606 * C435 + C48194 * C451) *
                 C47888) *
                C4603 +
            ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48194 * C830) *
                 C116 +
             (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48194 * C836) *
                 C47888) *
                C48225) *
               C48110 * C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C261 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48246 -
             (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
             (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
                C4603 +
            ((C4803 + C4802) * C261 + (C4805 + C4804) * C48246 -
             (C4807 + C4806) * C262 - (C4809 + C4808) * C48234 +
             (C5727 + C5726) * C263 + (C5729 + C5728) * C48207) *
                C48225) *
               C48110 * C2459 +
           (((C4810 + C4811) * C262 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48246 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C261) +
             (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
             (C4816 + C4817) * C48207) *
                C4603 +
            ((C4815 + C4814) * C262 -
             ((C4813 + C4812) * C48246 + (C4811 + C4810) * C261) +
             (C4817 + C4816) * C48234 - (C6063 + C6062) * C263 -
             (C6065 + C6064) * C48207) *
                C48225) *
               C48110 * C47870) *
              C3120 +
          ((((C5462 + C5463) * C262 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C48246 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C261) +
             (C5464 + C5465) * C48234 - (C5912 + C5913) * C263 -
             (C5914 + C5915) * C48207) *
                C4603 +
            ((C5913 + C5912) * C262 -
             ((C5465 + C5464) * C48246 + (C5463 + C5462) * C261) +
             (C5915 + C5914) * C48234 - (C6419 + C6418) * C263 -
             (C6421 + C6420) * C48207) *
                C48225) *
               C48110 * C2459 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C261 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C48246 -
             (C5466 + C5467) * C262 - (C5468 + C5469) * C48234 +
             (C6268 + C6269) * C263 + (C6270 + C6271) * C48207) *
                C4603 +
            ((C5467 + C5466) * C261 + (C5469 + C5468) * C48246 -
             (C6269 + C6268) * C262 - (C6271 + C6270) * C48234 +
             (C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48194 * C1564) *
                 C263 +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48194 * C1570) *
                 C48207) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C561 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48175 -
            (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
               C4603 +
           ((C4803 + C4802) * C561 + (C4805 + C4804) * C48175 -
            (C4807 + C4806) * C562 - (C4809 + C4808) * C47951) *
               C48225) *
              C48110 * C557 +
          (((C4810 + C4811) * C562 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48175 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C561) +
            (C4812 + C4813) * C47951) *
               C4603 +
           ((C4815 + C4814) * C562 -
            ((C4813 + C4812) * C48175 + (C4811 + C4810) * C561) +
            (C4817 + C4816) * C47951) *
               C48225) *
              C48110 * C558 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C561 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C48175 -
            (C4818 + C4819) * C562 - (C4820 + C4821) * C47951) *
               C4603 +
           ((C4819 + C4818) * C561 + (C4821 + C4820) * C48175 -
            (C4823 + C4822) * C562 - (C4825 + C4824) * C47951) *
               C48225) *
              C48110 * C559 +
          (((C5110 + C5111) * C562 -
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C48175 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C561) +
            (C5112 + C5113) * C47951) *
               C4603 +
           ((C4605 * C271 + C4601 * C288 + C4606 * C273 + C48194 * C292) *
                C562 -
            ((C5113 + C5112) * C48175 + (C5111 + C5110) * C561) +
            (C4605 * C289 + C4601 * C301 + C4606 * C293 + C48194 * C303) *
                C47951) *
               C48225) *
              C48110 * C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C1303 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C1297 -
            (C4802 + C4803) * C1304 - (C4804 + C4805) * C1298 +
            (C4806 + C4807) * C1305 + (C4808 + C4809) * C1299 -
            (C5726 + C5727) * C1306 - (C5728 + C5729) * C48217) *
               C4603 +
           ((C4803 + C4802) * C1303 + (C4805 + C4804) * C1297 -
            (C4807 + C4806) * C1304 - (C4809 + C4808) * C1298 +
            (C5727 + C5726) * C1305 + (C5729 + C5728) * C1299 -
            (C5731 + C5730) * C1306 - (C5733 + C5732) * C48217) *
               C48225) *
              C48110 * C48161 +
          (((C4810 + C4811) * C1304 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C1297 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C1303) +
            (C4812 + C4813) * C1298 - (C4814 + C4815) * C1305 -
            (C4816 + C4817) * C1299 + (C6062 + C6063) * C1306 +
            (C6064 + C6065) * C48217) *
               C4603 +
           ((C4815 + C4814) * C1304 -
            ((C4813 + C4812) * C1297 + (C4811 + C4810) * C1303) +
            (C4817 + C4816) * C1298 - (C6063 + C6062) * C1305 -
            (C6065 + C6064) * C1299 +
            (C4605 * C1033 + C4601 * C1042 + C4606 * C1034 + C48194 * C1043) *
                C1306 +
            (C4605 * C1045 + C4601 * C1051 + C4606 * C1046 + C48194 * C1052) *
                C48217) *
               C48225) *
              C48110 * C47870) *
         C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C561 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48175 -
             (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
                C4603 +
            ((C4803 + C4802) * C561 + (C4805 + C4804) * C48175 -
             (C4807 + C4806) * C562 - (C4809 + C4808) * C47951) *
                C48225) *
               C48110 * C258 +
           (((C4810 + C4811) * C562 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48175 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C561) +
             (C4812 + C4813) * C47951) *
                C4603 +
            ((C4815 + C4814) * C562 -
             ((C4813 + C4812) * C48175 + (C4811 + C4810) * C561) +
             (C4817 + C4816) * C47951) *
                C48225) *
               C48110 * C259 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C561 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C48175 -
             (C4818 + C4819) * C562 - (C4820 + C4821) * C47951) *
                C4603 +
            ((C4819 + C4818) * C561 + (C4821 + C4820) * C48175 -
             (C4823 + C4822) * C562 - (C4825 + C4824) * C47951) *
                C48225) *
               C48110 * C48201) *
              C48176 +
          ((((C5462 + C5463) * C562 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C48175 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C561) +
             (C5464 + C5465) * C47951) *
                C4603 +
            ((C4605 * C1165 + C4601 * C1174 + C4606 * C1164 + C48194 * C1173) *
                 C562 -
             ((C5465 + C5464) * C48175 + (C5463 + C5462) * C561) +
             (C4605 * C1177 + C4601 * C1192 + C4606 * C1176 + C48194 * C1191) *
                 C47951) *
                C48225) *
               C48110 * C258 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C561 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C48175 -
             (C5466 + C5467) * C562 - (C5468 + C5469) * C47951) *
                C4603 +
            ((C5467 + C5466) * C561 + (C5469 + C5468) * C48175 -
             (C4606 * C1163 + C48194 * C1172 + C4605 * C1164 + C4601 * C1173) *
                 C562 -
             (C4606 * C1175 + C48194 * C1190 + C4605 * C1176 + C4601 * C1191) *
                 C47951) *
                C48225) *
               C48110 * C259 +
           (((C5470 + C5471) * C562 -
             ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                  C48175 +
              (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                  C561) +
             (C5472 + C5473) * C47951) *
                C4603 +
            ((C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                 C562 -
             ((C5473 + C5472) * C48175 + (C5471 + C5470) * C561) +
             (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C1303 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C1297 -
            (C4802 + C4803) * C1304 - (C4804 + C4805) * C1298 +
            (C4806 + C4807) * C1305 + (C4808 + C4809) * C1299 -
            (C5726 + C5727) * C1306 - (C5728 + C5729) * C48217) *
               C4603 +
           ((C4803 + C4802) * C1303 + (C4805 + C4804) * C1297 -
            (C4807 + C4806) * C1304 - (C4809 + C4808) * C1298 +
            (C5727 + C5726) * C1305 + (C5729 + C5728) * C1299 -
            (C5731 + C5730) * C1306 - (C5733 + C5732) * C48217) *
               C48225) *
              C48110 * C47860 * C48176 +
          (((C5462 + C5463) * C1304 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C1297 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C1303) +
            (C5464 + C5465) * C1298 - (C5912 + C5913) * C1305 -
            (C5914 + C5915) * C1299 + (C6418 + C6419) * C1306 +
            (C6420 + C6421) * C48217) *
               C4603 +
           ((C5913 + C5912) * C1304 -
            ((C5465 + C5464) * C1297 + (C5463 + C5462) * C1303) +
            (C5915 + C5914) * C1298 - (C6419 + C6418) * C1305 -
            (C6421 + C6420) * C1299 +
            (C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48194 * C6404) *
                C1306 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48194 * C6408) *
                C48217) *
               C48225) *
              C48110 * C47860 * C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C261 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48246 -
            (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
            (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C261 + (C4805 + C4804) * C48246 -
            (C4807 + C4806) * C262 - (C4809 + C4808) * C48234 +
            (C4605 * C1031 + C4601 * C1037 + C4606 * C1030 + C48194 * C1036) *
                C263 +
            (C4605 * C1040 + C4601 * C1049 + C4606 * C1039 + C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C258 +
          (((C4810 + C4811) * C262 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48246 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C261) +
            (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
            (C4816 + C4817) * C48207) *
               C4603 +
           ((C4815 + C4814) * C262 -
            ((C4813 + C4812) * C48246 + (C4811 + C4810) * C261) +
            (C4817 + C4816) * C48234 -
            (C4606 * C1029 + C48194 * C1035 + C4605 * C1030 + C4601 * C1036) *
                C263 -
            (C4606 * C1038 + C48194 * C1047 + C4605 * C1039 + C4601 * C1048) *
                C48207) *
               C48225) *
              C48110 * C259 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C261 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C48246 -
            (C4818 + C4819) * C262 - (C4820 + C4821) * C48234 +
            (C4822 + C4823) * C263 + (C4824 + C4825) * C48207) *
               C4603 +
           ((C4819 + C4818) * C261 + (C4821 + C4820) * C48246 -
            (C4823 + C4822) * C262 - (C4825 + C4824) * C48234 +
            (C4605 * C1029 + C4601 * C1035 + C4606 * C1307 + C48194 * C1308) *
                C263 +
            (C4605 * C1038 + C4601 * C1047 + C4606 * C1309 + C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47888) *
               C4603 +
           ((C4605 * C266 + C4601 * C276 + C4606 * C265 + C48194 * C275) *
                C116 +
            (C4605 * C279 + C4601 * C296 + C4606 * C278 + C48194 * C295) *
                C47888) *
               C48225) *
              C48110 * C107 -
          (((C4606 * C277 + C48194 * C294 + C4605 * C278 + C4601 * C295) *
                C47888 +
            (C4606 * C264 + C48194 * C274 + C4605 * C265 + C4601 * C275) *
                C116) *
               C48225 +
           ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                C47888 +
            (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C4603) *
              C48110 * C108 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C47888) *
               C4603 +
           ((C4605 * C264 + C4601 * C274 + C4606 * C270 + C48194 * C286) *
                C116 +
            (C4605 * C277 + C4601 * C294 + C4606 * C287 + C48194 * C300) *
                C47888) *
               C48225) *
              C48110 * C109 -
          (((C4606 * C291 + C48194 * C302 + C4605 * C287 + C4601 * C300) *
                C47888 +
            (C4606 * C272 + C48194 * C290 + C4605 * C270 + C4601 * C286) *
                C116) *
               C48225 +
           ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                C47888 +
            (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C4603) *
              C48110 * C110 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48194 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48194 * C143) *
                C47888) *
               C4603 +
           ((C4605 * C272 + C4601 * C290 + C4606 * C563 + C48194 * C564) *
                C116 +
            (C4605 * C291 + C4601 * C302 + C4606 * C565 + C48194 * C566) *
                C47888) *
               C48225) *
              C48110 * C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C258 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C259 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C4603 +
            ((C4819 + C4818) * C116 + (C4821 + C4820) * C47888) * C48225) *
               C48110 * C48201) *
              C48247 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C4605 * C818 + C4601 * C823 + C4606 * C819 + C48194 * C824) *
                 C116 +
             (C4605 * C826 + C4601 * C833 + C4606 * C827 + C48194 * C834) *
                 C47888) *
                C48225) *
               C48110 * C259 -
           (((C4606 * C826 + C48194 * C833 + C4605 * C825 + C4601 * C832) *
                 C47888 +
             (C4606 * C818 + C48194 * C823 + C4605 * C817 + C4601 * C822) *
                 C116) *
                C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C258 -
           (((C4606 * C829 + C48194 * C835 + C4605 * C827 + C4601 * C834) *
                 C47888 +
             (C4606 * C820 + C48194 * C828 + C4605 * C819 + C4601 * C824) *
                 C116) *
                C48225 +
            ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                 C47888 +
             (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C4603) *
               C48110 * C48201) *
              C48236 +
          ((((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                 C116 +
             (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                 C47888) *
                C4603 +
            ((C4605 * C1168 + C4601 * C1180 + C4606 * C1167 + C48194 * C1179) *
                 C116 +
             (C4605 * C1183 + C4601 * C1195 + C4606 * C1182 + C48194 * C1194) *
                 C47888) *
                C48225) *
               C48110 * C258 -
           (((C4606 * C1181 + C48194 * C1193 + C4605 * C1182 + C4601 * C1194) *
                 C47888 +
             (C4606 * C1166 + C48194 * C1178 + C4605 * C1167 + C4601 * C1179) *
                 C116) *
                C48225 +
            ((C4606 * C442 + C48194 * C454 + C4605 * C441 + C4601 * C453) *
                 C47888 +
             (C4606 * C424 + C48194 * C439 + C4605 * C423 + C4601 * C438) *
                 C116) *
                C4603) *
               C48110 * C259 +
           (((C4605 * C424 + C4601 * C439 + C4606 * C425 + C48194 * C444) *
                 C116 +
             (C4605 * C442 + C4601 * C454 + C4606 * C443 + C48194 * C455) *
                 C47888) *
                C4603 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C116 +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47888) *
                C48225) *
               C48110 * C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C953 + (C4805 + C4804) * C947 -
            (C4807 + C4806) * C954 - (C4809 + C4808) * C948 +
            (C4605 * C1031 + C4601 * C1037 + C4606 * C1030 + C48194 * C1036) *
                C955 +
            (C4605 * C1040 + C4601 * C1049 + C4606 * C1039 + C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48243 +
          (((C4810 + C4811) * C954 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C947 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C953) +
            (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
            (C4816 + C4817) * C48207) *
               C4603 +
           ((C4815 + C4814) * C954 -
            ((C4813 + C4812) * C947 + (C4811 + C4810) * C953) +
            (C4817 + C4816) * C948 -
            (C4606 * C1029 + C48194 * C1035 + C4605 * C1030 + C4601 * C1036) *
                C955 -
            (C4606 * C1038 + C48194 * C1047 + C4605 * C1039 + C4601 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48230 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C953 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C947 -
            (C4818 + C4819) * C954 - (C4820 + C4821) * C948 +
            (C4822 + C4823) * C955 + (C4824 + C4825) * C48207) *
               C4603 +
           ((C4819 + C4818) * C953 + (C4821 + C4820) * C947 -
            (C4823 + C4822) * C954 - (C4825 + C4824) * C948 +
            (C4605 * C1029 + C4601 * C1035 + C4606 * C1307 + C48194 * C1308) *
                C955 +
            (C4605 * C1038 + C4601 * C1047 + C4606 * C1309 + C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
               C1024 +
           (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
               C1018 -
           (C4802 + C4803) * C1025 - (C4804 + C4805) * C1019 +
           (C4806 + C4807) * C1026 + (C4808 + C4809) * C1020 -
           (C5726 + C5727) * C1027 - (C5728 + C5729) * C1021 +
           (C5730 + C5731) * C1028 + (C5732 + C5733) * C1022) *
              C4603 +
          ((C4803 + C4802) * C1024 + (C4805 + C4804) * C1018 -
           (C4807 + C4806) * C1025 - (C4809 + C4808) * C1019 +
           (C5727 + C5726) * C1026 + (C5729 + C5728) * C1020 -
           (C5731 + C5730) * C1027 - (C5733 + C5732) * C1021 +
           (C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48194 * C5704) *
               C1028 +
           (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48194 * C5708) *
               C1022) *
              C48225) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C953 + (C4805 + C4804) * C947 -
            (C4807 + C4806) * C954 - (C4809 + C4808) * C948 +
            (C5727 + C5726) * C955 + (C5729 + C5728) * C48207) *
               C48225) *
              C48110 * C47860 * C48247 +
          (((C5462 + C5463) * C954 -
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C947 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C953) +
            (C5464 + C5465) * C948 - (C5912 + C5913) * C955 -
            (C5914 + C5915) * C48207) *
               C4603 +
           ((C5913 + C5912) * C954 -
            ((C5465 + C5464) * C947 + (C5463 + C5462) * C953) +
            (C5915 + C5914) * C948 -
            (C4606 * C1560 + C48194 * C1563 + C4605 * C1559 + C4601 * C1562) *
                C955 -
            (C4606 * C1566 + C48194 * C1569 + C4605 * C1565 + C4601 * C1568) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48236 +
          (((C4605 * C422 + C4601 * C437 + C4606 * C423 + C48194 * C438) *
                C953 +
            (C4605 * C440 + C4601 * C452 + C4606 * C441 + C48194 * C453) *
                C947 -
            (C5916 + C5917) * C954 - (C5918 + C5919) * C948 +
            (C5920 + C5921) * C955 + (C5922 + C5923) * C48207) *
               C4603 +
           ((C5917 + C5916) * C953 + (C5919 + C5918) * C947 -
            (C5921 + C5920) * C954 - (C5923 + C5922) * C948 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48194 * C5882) *
                C955 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48194 * C5886) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C4603 +
            ((C4803 + C4802) * C116 + (C4805 + C4804) * C47888) * C48225) *
               C48110 * C557 -
           (((C4813 + C4812) * C47888 + (C4811 + C4810) * C116) * C48225 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48110 * C558 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C4603 +
            ((C4819 + C4818) * C116 + (C4821 + C4820) * C47888) * C48225) *
               C48110 * C559 -
           (((C5113 + C5112) * C47888 + (C5111 + C5110) * C116) * C48225 +
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C47888 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C4603) *
               C48110 * C48211) *
              C48176 +
          ((((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C47888) *
                C4603 +
            ((C4605 * C818 + C4601 * C823 + C4606 * C819 + C48194 * C824) *
                 C116 +
             (C4605 * C826 + C4601 * C833 + C4606 * C827 + C48194 * C834) *
                 C47888) *
                C48225) *
               C48110 * C558 -
           (((C4606 * C826 + C48194 * C833 + C4605 * C825 + C4601 * C832) *
                 C47888 +
             (C4606 * C818 + C48194 * C823 + C4605 * C817 + C4601 * C822) *
                 C116) *
                C48225 +
            ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                 C47888 +
             (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                 C116) *
                C4603) *
               C48110 * C557 -
           (((C4606 * C829 + C48194 * C835 + C4605 * C827 + C4601 * C834) *
                 C47888 +
             (C4606 * C820 + C48194 * C828 + C4605 * C819 + C4601 * C824) *
                 C116) *
                C48225 +
            ((C4606 * C432 + C48194 * C449 + C4605 * C431 + C4601 * C448) *
                 C47888 +
             (C4606 * C419 + C48194 * C429 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C4603) *
               C48110 * C559 +
           (((C4605 * C419 + C4601 * C429 + C4606 * C421 + C48194 * C436) *
                 C116 +
             (C4605 * C432 + C4601 * C449 + C4606 * C435 + C48194 * C451) *
                 C47888) *
                C4603 +
            ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48194 * C830) *
                 C116 +
             (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48194 * C836) *
                 C47888) *
                C48225) *
               C48110 * C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C953 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C947 -
             (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
             (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
                C4603 +
            ((C4803 + C4802) * C953 + (C4805 + C4804) * C947 -
             (C4807 + C4806) * C954 - (C4809 + C4808) * C948 +
             (C5727 + C5726) * C955 + (C5729 + C5728) * C48207) *
                C48225) *
               C48110 * C48161 +
           (((C4810 + C4811) * C954 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C947 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C953) +
             (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
             (C4816 + C4817) * C48207) *
                C4603 +
            ((C4815 + C4814) * C954 -
             ((C4813 + C4812) * C947 + (C4811 + C4810) * C953) +
             (C4817 + C4816) * C948 - (C6063 + C6062) * C955 -
             (C6065 + C6064) * C48207) *
                C48225) *
               C48110 * C47870) *
              C48176 +
          ((((C5462 + C5463) * C954 -
             ((C4606 * C430 + C48194 * C447 + C4605 * C433 + C4601 * C450) *
                  C947 +
              (C4606 * C417 + C48194 * C427 + C4605 * C420 + C4601 * C434) *
                  C953) +
             (C5464 + C5465) * C948 - (C5912 + C5913) * C955 -
             (C5914 + C5915) * C48207) *
                C4603 +
            ((C5913 + C5912) * C954 -
             ((C5465 + C5464) * C947 + (C5463 + C5462) * C953) +
             (C5915 + C5914) * C948 -
             (C4606 * C1560 + C48194 * C1563 + C4605 * C1559 + C4601 * C1562) *
                 C955 -
             (C4606 * C1566 + C48194 * C1569 + C4605 * C1565 + C4601 * C1568) *
                 C48207) *
                C48225) *
               C48110 * C48161 +
           (((C4605 * C417 + C4601 * C427 + C4606 * C418 + C48194 * C428) *
                 C953 +
             (C4605 * C430 + C4601 * C447 + C4606 * C431 + C48194 * C448) *
                 C947 -
             (C5466 + C5467) * C954 - (C5468 + C5469) * C948 +
             (C6268 + C6269) * C955 + (C6270 + C6271) * C48207) *
                C4603 +
            ((C5467 + C5466) * C953 + (C5469 + C5468) * C947 -
             (C6269 + C6268) * C954 - (C6271 + C6270) * C948 +
             (C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48194 * C1564) *
                 C955 +
             (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48194 * C1570) *
                 C48207) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47888) *
               C4603 +
           ((C4605 * C266 + C4601 * C276 + C4606 * C265 + C48194 * C275) *
                C116 +
            (C4605 * C279 + C4601 * C296 + C4606 * C278 + C48194 * C295) *
                C47888) *
               C48225) *
              C48110 * C107 -
          (((C4606 * C277 + C48194 * C294 + C4605 * C278 + C4601 * C295) *
                C47888 +
            (C4606 * C264 + C48194 * C274 + C4605 * C265 + C4601 * C275) *
                C116) *
               C48225 +
           ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                C47888 +
            (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C4603) *
              C48110 * C108 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C47888) *
               C4603 +
           ((C4605 * C264 + C4601 * C274 + C4606 * C270 + C48194 * C286) *
                C116 +
            (C4605 * C277 + C4601 * C294 + C4606 * C287 + C48194 * C300) *
                C47888) *
               C48225) *
              C48110 * C109 -
          (((C4606 * C291 + C48194 * C302 + C4605 * C287 + C4601 * C300) *
                C47888 +
            (C4606 * C272 + C48194 * C290 + C4605 * C270 + C4601 * C286) *
                C116) *
               C48225 +
           ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                C47888 +
            (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C4603) *
              C48110 * C110 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48194 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48194 * C143) *
                C47888) *
               C4603 +
           ((C4605 * C272 + C4601 * C290 + C4606 * C563 + C48194 * C564) *
                C116 +
            (C4605 * C291 + C4601 * C302 + C4606 * C565 + C48194 * C566) *
                C47888) *
               C48225) *
              C48110 * C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C261 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48246 -
            (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
            (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C261 + (C4805 + C4804) * C48246 -
            (C4807 + C4806) * C262 - (C4809 + C4808) * C48234 +
            (C4605 * C1031 + C4601 * C1037 + C4606 * C1030 + C48194 * C1036) *
                C263 +
            (C4605 * C1040 + C4601 * C1049 + C4606 * C1039 + C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C258 +
          (((C4810 + C4811) * C262 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48246 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C261) +
            (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
            (C4816 + C4817) * C48207) *
               C4603 +
           ((C4815 + C4814) * C262 -
            ((C4813 + C4812) * C48246 + (C4811 + C4810) * C261) +
            (C4817 + C4816) * C48234 -
            (C4606 * C1029 + C48194 * C1035 + C4605 * C1030 + C4601 * C1036) *
                C263 -
            (C4606 * C1038 + C48194 * C1047 + C4605 * C1039 + C4601 * C1048) *
                C48207) *
               C48225) *
              C48110 * C259 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C261 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C48246 -
            (C4818 + C4819) * C262 - (C4820 + C4821) * C48234 +
            (C4822 + C4823) * C263 + (C4824 + C4825) * C48207) *
               C4603 +
           ((C4819 + C4818) * C261 + (C4821 + C4820) * C48246 -
            (C4823 + C4822) * C262 - (C4825 + C4824) * C48234 +
            (C4605 * C1029 + C4601 * C1035 + C4606 * C1307 + C48194 * C1308) *
                C263 +
            (C4605 * C1038 + C4601 * C1047 + C4606 * C1309 + C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C4603 +
           ((C4803 + C4802) * C953 + (C4805 + C4804) * C947 -
            (C4807 + C4806) * C954 - (C4809 + C4808) * C948 +
            (C4605 * C1031 + C4601 * C1037 + C4606 * C1030 + C48194 * C1036) *
                C955 +
            (C4605 * C1040 + C4601 * C1049 + C4606 * C1039 + C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48243 +
          (((C4810 + C4811) * C954 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C947 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C953) +
            (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
            (C4816 + C4817) * C48207) *
               C4603 +
           ((C4815 + C4814) * C954 -
            ((C4813 + C4812) * C947 + (C4811 + C4810) * C953) +
            (C4817 + C4816) * C948 -
            (C4606 * C1029 + C48194 * C1035 + C4605 * C1030 + C4601 * C1036) *
                C955 -
            (C4606 * C1038 + C48194 * C1047 + C4605 * C1039 + C4601 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48230 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C953 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C947 -
            (C4818 + C4819) * C954 - (C4820 + C4821) * C948 +
            (C4822 + C4823) * C955 + (C4824 + C4825) * C48207) *
               C4603 +
           ((C4819 + C4818) * C953 + (C4821 + C4820) * C947 -
            (C4823 + C4822) * C954 - (C4825 + C4824) * C948 +
            (C4605 * C1029 + C4601 * C1035 + C4606 * C1307 + C48194 * C1308) *
                C955 +
            (C4605 * C1038 + C4601 * C1047 + C4606 * C1309 + C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
               C1024 +
           (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
               C1018 -
           (C4802 + C4803) * C1025 - (C4804 + C4805) * C1019 +
           (C4806 + C4807) * C1026 + (C4808 + C4809) * C1020 -
           (C5726 + C5727) * C1027 - (C5728 + C5729) * C1021 +
           (C5730 + C5731) * C1028 + (C5732 + C5733) * C1022) *
              C4603 +
          ((C4803 + C4802) * C1024 + (C4805 + C4804) * C1018 -
           (C4807 + C4806) * C1025 - (C4809 + C4808) * C1019 +
           (C5727 + C5726) * C1026 + (C5729 + C5728) * C1020 -
           (C5731 + C5730) * C1027 - (C5733 + C5732) * C1021 +
           (C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48194 * C5704) *
               C1028 +
           (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48194 * C5708) *
               C1022) *
              C48225) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C47047 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47947 -
            (C4802 + C4803) * C47039 - (C4804 + C4805) * C47954 +
            (C4806 + C4807) * C47053 + (C4808 + C4809) * C2723) *
               C48095 * C10335 +
           ((C10678 + C10679) * C47047 + (C10680 + C10681) * C47947 -
            (C5463 + C5462) * C47039 - (C5465 + C5464) * C47954 +
            (C5913 + C5912) * C47053 + (C5915 + C5914) * C2723) *
               C48095 * C48227) *
              C47865 +
          (((C4810 + C4811) * C47039 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47947 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C47047) +
            (C4812 + C4813) * C47954 - (C4814 + C4815) * C47053 -
            (C4816 + C4817) * C2723) *
               C48095 * C10335 +
           ((C5467 + C5466) * C47039 -
            ((C10682 + C10683) * C47947 + (C10684 + C10685) * C47047) +
            (C5469 + C5468) * C47954 - (C6269 + C6268) * C47053 -
            (C6271 + C6270) * C2723) *
               C48095 * C48227) *
              C47873 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C47047 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C47947 -
            (C4818 + C4819) * C47039 - (C4820 + C4821) * C47954 +
            (C4822 + C4823) * C47053 + (C4824 + C4825) * C2723) *
               C48095 * C10335 +
           ((C10686 + C10687) * C47047 + (C10688 + C10689) * C47947 -
            (C5471 + C5470) * C47039 - (C5473 + C5472) * C47954 +
            (C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                C47053 +
            (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                C2723) *
               C48095 * C48227) *
              C2726) *
         C47906) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C47047 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47947 -
             (C4802 + C4803) * C47039 - (C4804 + C4805) * C47954 +
             (C4806 + C4807) * C47053 + (C4808 + C4809) * C2723) *
                C48095 * C10335 +
            ((C10678 + C10679) * C47047 + (C10680 + C10681) * C47947 -
             (C5463 + C5462) * C47039 - (C5465 + C5464) * C47954 +
             (C5913 + C5912) * C47053 + (C5915 + C5914) * C2723) *
                C48095 * C48227) *
               C2459 +
           (((C4810 + C4811) * C47039 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C47947 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C47047) +
             (C4812 + C4813) * C47954 - (C4814 + C4815) * C47053 -
             (C4816 + C4817) * C2723) *
                C48095 * C10335 +
            ((C5467 + C5466) * C47039 -
             ((C10682 + C10683) * C47947 + (C10684 + C10685) * C47047) +
             (C5469 + C5468) * C47954 - (C6269 + C6268) * C47053 -
             (C6271 + C6270) * C2723) *
                C48095 * C48227) *
               C47870) *
              C48176 +
          ((((C5462 + C5463) * C47039 -
             ((C10681 + C10680) * C47947 + (C10679 + C10678) * C47047) +
             (C5464 + C5465) * C47954 - (C5912 + C5913) * C47053 -
             (C5914 + C5915) * C2723) *
                C48095 * C10335 +
            ((C5917 + C5916) * C47039 -
             ((C10694 + C10695) * C47947 + (C10696 + C10697) * C47047) +
             (C5919 + C5918) * C47954 - (C5921 + C5920) * C47053 -
             (C5923 + C5922) * C2723) *
                C48095 * C48227) *
               C2459 +
           (((C10685 + C10684) * C47047 + (C10683 + C10682) * C47947 -
             (C5466 + C5467) * C47039 - (C5468 + C5469) * C47954 +
             (C6268 + C6269) * C47053 + (C6270 + C6271) * C2723) *
                C48095 * C10335 +
            ((C10690 + C10691) * C47047 + (C10692 + C10693) * C47947 -
             (C7007 + C7006) * C47039 - (C7009 + C7008) * C47954 +
             (C4605 * C1170 + C4601 * C1185 + C4606 * C1171 + C48194 * C1186) *
                 C47053 +
             (C4605 * C1188 + C4601 * C1197 + C4606 * C1189 + C48194 * C1198) *
                 C2723) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2461 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48253 -
            (C4802 + C4803) * C2462 - (C4804 + C4805) * C48249 +
            (C4806 + C4807) * C2463 + (C4808 + C4809) * C48239 -
            (C5726 + C5727) * C2464 - (C5728 + C5729) * C48217) *
               C48095 * C10335 +
           ((C10678 + C10679) * C2461 + (C10680 + C10681) * C48253 -
            (C5463 + C5462) * C2462 - (C5465 + C5464) * C48249 +
            (C5913 + C5912) * C2463 + (C5915 + C5914) * C48239 -
            (C6419 + C6418) * C2464 - (C6421 + C6420) * C48217) *
               C48095 * C48227) *
              C2459 +
          (((C4810 + C4811) * C2462 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48253 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C2461) +
            (C4812 + C4813) * C48249 - (C4814 + C4815) * C2463 -
            (C4816 + C4817) * C48239 + (C6062 + C6063) * C2464 +
            (C6064 + C6065) * C48217) *
               C48095 * C10335 +
           ((C5467 + C5466) * C2462 -
            ((C10682 + C10683) * C48253 + (C10684 + C10685) * C2461) +
            (C5469 + C5468) * C48249 - (C6269 + C6268) * C2463 -
            (C6271 + C6270) * C48239 +
            (C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48194 * C1564) *
                C2464 +
            (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48194 * C1570) *
                C48217) *
               C48095 * C48227) *
              C47870) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2355 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C2349 -
            (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
               C48095 * C10335 +
           ((C10678 + C10679) * C2355 + (C10680 + C10681) * C2349 -
            (C5463 + C5462) * C2356 - (C5465 + C5464) * C47951) *
               C48095 * C48227) *
              C48252 +
          (((C4810 + C4811) * C2356 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C2349 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C2355) +
            (C4812 + C4813) * C47951) *
               C48095 * C10335 +
           ((C5467 + C5466) * C2356 -
            ((C10682 + C10683) * C2349 + (C10684 + C10685) * C2355) +
            (C5469 + C5468) * C47951) *
               C48095 * C48227) *
              C48245 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C2355 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C2349 -
            (C4818 + C4819) * C2356 - (C4820 + C4821) * C47951) *
               C48095 * C10335 +
           ((C10686 + C10687) * C2355 + (C10688 + C10689) * C2349 -
            (C5471 + C5470) * C2356 - (C5473 + C5472) * C47951) *
               C48095 * C48227) *
              C48232 +
          (((C5110 + C5111) * C2356 -
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C2349 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C2355) +
            (C5112 + C5113) * C47951) *
               C48095 * C10335 +
           ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48194 * C830) *
                C2356 -
            ((C10970 + C10971) * C2349 + (C10972 + C10973) * C2355) +
            (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48194 * C836) *
                C47951) *
               C48095 * C48227) *
              C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C2355 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C2349 -
             (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
                C48095 * C10335 +
            ((C10678 + C10679) * C2355 + (C10680 + C10681) * C2349 -
             (C5463 + C5462) * C2356 - (C5465 + C5464) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C4810 + C4811) * C2356 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C2349 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C2355) +
             (C4812 + C4813) * C47951) *
                C48095 * C10335 +
            ((C5467 + C5466) * C2356 -
             ((C10682 + C10683) * C2349 + (C10684 + C10685) * C2355) +
             (C5469 + C5468) * C47951) *
                C48095 * C48227) *
               C47870) *
              C48247 +
          ((((C5462 + C5463) * C2356 -
             ((C10681 + C10680) * C2349 + (C10679 + C10678) * C2355) +
             (C5464 + C5465) * C47951) *
                C48095 * C10335 +
            ((C5917 + C5916) * C2356 -
             ((C10694 + C10695) * C2349 + (C10696 + C10697) * C2355) +
             (C5919 + C5918) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C10685 + C10684) * C2355 + (C10683 + C10682) * C2349 -
             (C5466 + C5467) * C2356 - (C5468 + C5469) * C47951) *
                C48095 * C10335 +
            ((C10690 + C10691) * C2355 + (C10692 + C10693) * C2349 -
             (C7007 + C7006) * C2356 - (C7009 + C7008) * C47951) *
                C48095 * C48227) *
               C47870) *
              C48236 +
          ((((C10697 + C10696) * C2355 + (C10695 + C10694) * C2349 -
             (C5916 + C5917) * C2356 - (C5918 + C5919) * C47951) *
                C48095 * C10335 +
            ((C12394 + C12395) * C2355 + (C12396 + C12397) * C2349 -
             (C7287 + C7286) * C2356 - (C7289 + C7288) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C7006 + C7007) * C2356 -
             ((C10693 + C10692) * C2349 + (C10691 + C10690) * C2355) +
             (C7008 + C7009) * C47951) *
                C48095 * C10335 +
            ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48194 * C2244) *
                 C2356 -
             ((C12734 + C12735) * C2349 + (C12736 + C12737) * C2355) +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48194 * C2250) *
                 C47951) *
                C48095 * C48227) *
               C47870) *
              C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C2355 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C2349 -
             (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
                C48095 * C10335 +
            ((C10678 + C10679) * C2355 + (C10680 + C10681) * C2349 -
             (C5463 + C5462) * C2356 - (C5465 + C5464) * C47951) *
                C48095 * C48227) *
               C47865 +
           (((C4810 + C4811) * C2356 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C2349 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C2355) +
             (C4812 + C4813) * C47951) *
                C48095 * C10335 +
            ((C5467 + C5466) * C2356 -
             ((C10682 + C10683) * C2349 + (C10684 + C10685) * C2355) +
             (C5469 + C5468) * C47951) *
                C48095 * C48227) *
               C47873 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C2355 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C2349 -
             (C4818 + C4819) * C2356 - (C4820 + C4821) * C47951) *
                C48095 * C10335 +
            ((C10686 + C10687) * C2355 + (C10688 + C10689) * C2349 -
             (C5471 + C5470) * C2356 - (C5473 + C5472) * C47951) *
                C48095 * C48227) *
               C2726) *
              C48176 +
          ((((C5462 + C5463) * C2356 -
             ((C10681 + C10680) * C2349 + (C10679 + C10678) * C2355) +
             (C5464 + C5465) * C47951) *
                C48095 * C10335 +
            ((C5917 + C5916) * C2356 -
             ((C10694 + C10695) * C2349 + (C10696 + C10697) * C2355) +
             (C5919 + C5918) * C47951) *
                C48095 * C48227) *
               C47865 +
           (((C10685 + C10684) * C2355 + (C10683 + C10682) * C2349 -
             (C5466 + C5467) * C2356 - (C5468 + C5469) * C47951) *
                C48095 * C10335 +
            ((C10690 + C10691) * C2355 + (C10692 + C10693) * C2349 -
             (C7007 + C7006) * C2356 - (C7009 + C7008) * C47951) *
                C48095 * C48227) *
               C47873 +
           (((C5470 + C5471) * C2356 -
             ((C10689 + C10688) * C2349 + (C10687 + C10686) * C2355) +
             (C5472 + C5473) * C47951) *
                C48095 * C10335 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C2356 -
             ((C10698 + C10699) * C2349 + (C10700 + C10701) * C2355) +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C2726) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2355 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C2349 -
            (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
               C48095 * C10335 +
           ((C10678 + C10679) * C2355 + (C10680 + C10681) * C2349 -
            (C5463 + C5462) * C2356 - (C5465 + C5464) * C47951) *
               C48095 * C48227) *
              C48252 +
          (((C4810 + C4811) * C2356 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C2349 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C2355) +
            (C4812 + C4813) * C47951) *
               C48095 * C10335 +
           ((C5467 + C5466) * C2356 -
            ((C10682 + C10683) * C2349 + (C10684 + C10685) * C2355) +
            (C5469 + C5468) * C47951) *
               C48095 * C48227) *
              C48245 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C2355 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C2349 -
            (C4818 + C4819) * C2356 - (C4820 + C4821) * C47951) *
               C48095 * C10335 +
           ((C10686 + C10687) * C2355 + (C10688 + C10689) * C2349 -
            (C5471 + C5470) * C2356 - (C5473 + C5472) * C47951) *
               C48095 * C48227) *
              C48232 +
          (((C5110 + C5111) * C2356 -
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C2349 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C2355) +
            (C5112 + C5113) * C47951) *
               C48095 * C10335 +
           ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48194 * C830) *
                C2356 -
            ((C10970 + C10971) * C2349 + (C10972 + C10973) * C2355) +
            (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48194 * C836) *
                C47951) *
               C48095 * C48227) *
              C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2461 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48253 -
            (C4802 + C4803) * C2462 - (C4804 + C4805) * C48249 +
            (C4806 + C4807) * C2463 + (C4808 + C4809) * C48239 -
            (C5726 + C5727) * C2464 - (C5728 + C5729) * C48217) *
               C48095 * C10335 +
           ((C10678 + C10679) * C2461 + (C10680 + C10681) * C48253 -
            (C5463 + C5462) * C2462 - (C5465 + C5464) * C48249 +
            (C5913 + C5912) * C2463 + (C5915 + C5914) * C48239 -
            (C6419 + C6418) * C2464 - (C6421 + C6420) * C48217) *
               C48095 * C48227) *
              C2459 +
          (((C4810 + C4811) * C2462 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48253 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C2461) +
            (C4812 + C4813) * C48249 - (C4814 + C4815) * C2463 -
            (C4816 + C4817) * C48239 + (C6062 + C6063) * C2464 +
            (C6064 + C6065) * C48217) *
               C48095 * C10335 +
           ((C5467 + C5466) * C2462 -
            ((C10682 + C10683) * C48253 + (C10684 + C10685) * C2461) +
            (C5469 + C5468) * C48249 - (C6269 + C6268) * C2463 -
            (C6271 + C6270) * C48239 +
            (C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48194 * C1564) *
                C2464 +
            (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48194 * C1570) *
                C48217) *
               C48095 * C48227) *
              C47870) *
         C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C47047 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47947 -
             (C4802 + C4803) * C47039 - (C4804 + C4805) * C47954 +
             (C4806 + C4807) * C47053 + (C4808 + C4809) * C2723) *
                C48095 * C10335 +
            ((C10678 + C10679) * C47047 + (C10680 + C10681) * C47947 -
             (C5463 + C5462) * C47039 - (C5465 + C5464) * C47954 +
             (C5913 + C5912) * C47053 + (C5915 + C5914) * C2723) *
                C48095 * C48227) *
               C48161 +
           (((C4810 + C4811) * C47039 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C47947 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C47047) +
             (C4812 + C4813) * C47954 - (C4814 + C4815) * C47053 -
             (C4816 + C4817) * C2723) *
                C48095 * C10335 +
            ((C5467 + C5466) * C47039 -
             ((C10682 + C10683) * C47947 + (C10684 + C10685) * C47047) +
             (C5469 + C5468) * C47954 - (C6269 + C6268) * C47053 -
             (C6271 + C6270) * C2723) *
                C48095 * C48227) *
               C47870) *
              C3120 +
          ((((C5462 + C5463) * C47039 -
             ((C10681 + C10680) * C47947 + (C10679 + C10678) * C47047) +
             (C5464 + C5465) * C47954 - (C5912 + C5913) * C47053 -
             (C5914 + C5915) * C2723) *
                C48095 * C10335 +
            ((C5917 + C5916) * C47039 -
             ((C10694 + C10695) * C47947 + (C10696 + C10697) * C47047) +
             (C5919 + C5918) * C47954 - (C5921 + C5920) * C47053 -
             (C5923 + C5922) * C2723) *
                C48095 * C48227) *
               C48161 +
           (((C10685 + C10684) * C47047 + (C10683 + C10682) * C47947 -
             (C5466 + C5467) * C47039 - (C5468 + C5469) * C47954 +
             (C6268 + C6269) * C47053 + (C6270 + C6271) * C2723) *
                C48095 * C10335 +
            ((C10690 + C10691) * C47047 + (C10692 + C10693) * C47947 -
             (C7007 + C7006) * C47039 - (C7009 + C7008) * C47954 +
             (C4605 * C1170 + C4601 * C1185 + C4606 * C1171 + C48194 * C1186) *
                 C47053 +
             (C4605 * C1188 + C4601 * C1197 + C4606 * C1189 + C48194 * C1198) *
                 C2723) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C47047 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47947 -
            (C4802 + C4803) * C47039 - (C4804 + C4805) * C47954 +
            (C4806 + C4807) * C47053 + (C4808 + C4809) * C2723) *
               C48095 * C10335 +
           ((C10678 + C10679) * C47047 + (C10680 + C10681) * C47947 -
            (C5463 + C5462) * C47039 - (C5465 + C5464) * C47954 +
            (C5913 + C5912) * C47053 + (C5915 + C5914) * C2723) *
               C48095 * C48227) *
              C47860 * C47989 +
          (((C5462 + C5463) * C47039 -
            ((C10681 + C10680) * C47947 + (C10679 + C10678) * C47047) +
            (C5464 + C5465) * C47954 - (C5912 + C5913) * C47053 -
            (C5914 + C5915) * C2723) *
               C48095 * C10335 +
           ((C5917 + C5916) * C47039 -
            ((C10694 + C10695) * C47947 + (C10696 + C10697) * C47047) +
            (C5919 + C5918) * C47954 - (C5921 + C5920) * C47053 -
            (C5923 + C5922) * C2723) *
               C48095 * C48227) *
              C47860 * C47996 +
          (((C10697 + C10696) * C47047 + (C10695 + C10694) * C47947 -
            (C5916 + C5917) * C47039 - (C5918 + C5919) * C47954 +
            (C5920 + C5921) * C47053 + (C5922 + C5923) * C2723) *
               C48095 * C10335 +
           ((C12394 + C12395) * C47047 + (C12396 + C12397) * C47947 -
            (C7287 + C7286) * C47039 - (C7289 + C7288) * C47954 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48194 * C7272) *
                C47053 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48194 * C7276) *
                C2723) *
               C48095 * C48227) *
              C47860 * C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2461 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48253 -
            (C4802 + C4803) * C2462 - (C4804 + C4805) * C48249 +
            (C4806 + C4807) * C2463 + (C4808 + C4809) * C48239 -
            (C5726 + C5727) * C2464 - (C5728 + C5729) * C48217) *
               C48095 * C10335 +
           ((C10678 + C10679) * C2461 + (C10680 + C10681) * C48253 -
            (C5463 + C5462) * C2462 - (C5465 + C5464) * C48249 +
            (C5913 + C5912) * C2463 + (C5915 + C5914) * C48239 -
            (C6419 + C6418) * C2464 - (C6421 + C6420) * C48217) *
               C48095 * C48227) *
              C47860 * C3120 +
          (((C5462 + C5463) * C2462 -
            ((C10681 + C10680) * C48253 + (C10679 + C10678) * C2461) +
            (C5464 + C5465) * C48249 - (C5912 + C5913) * C2463 -
            (C5914 + C5915) * C48239 + (C6418 + C6419) * C2464 +
            (C6420 + C6421) * C48217) *
               C48095 * C10335 +
           ((C5917 + C5916) * C2462 -
            ((C10694 + C10695) * C48253 + (C10696 + C10697) * C2461) +
            (C5919 + C5918) * C48249 - (C5921 + C5920) * C2463 -
            (C5923 + C5922) * C48239 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48194 * C5882) *
                C2464 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48194 * C5886) *
                C48217) *
               C48095 * C48227) *
              C47860 * C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C2355 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C2349 -
             (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
                C48095 * C10335 +
            ((C10678 + C10679) * C2355 + (C10680 + C10681) * C2349 -
             (C5463 + C5462) * C2356 - (C5465 + C5464) * C47951) *
                C48095 * C48227) *
               C48243 +
           (((C4810 + C4811) * C2356 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C2349 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C2355) +
             (C4812 + C4813) * C47951) *
                C48095 * C10335 +
            ((C5467 + C5466) * C2356 -
             ((C10682 + C10683) * C2349 + (C10684 + C10685) * C2355) +
             (C5469 + C5468) * C47951) *
                C48095 * C48227) *
               C48230 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C2355 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C2349 -
             (C4818 + C4819) * C2356 - (C4820 + C4821) * C47951) *
                C48095 * C10335 +
            ((C10686 + C10687) * C2355 + (C10688 + C10689) * C2349 -
             (C5471 + C5470) * C2356 - (C5473 + C5472) * C47951) *
                C48095 * C48227) *
               C48201) *
              C3120 +
          ((((C5462 + C5463) * C2356 -
             ((C10681 + C10680) * C2349 + (C10679 + C10678) * C2355) +
             (C5464 + C5465) * C47951) *
                C48095 * C10335 +
            ((C5917 + C5916) * C2356 -
             ((C10694 + C10695) * C2349 + (C10696 + C10697) * C2355) +
             (C5919 + C5918) * C47951) *
                C48095 * C48227) *
               C48243 +
           (((C10685 + C10684) * C2355 + (C10683 + C10682) * C2349 -
             (C5466 + C5467) * C2356 - (C5468 + C5469) * C47951) *
                C48095 * C10335 +
            ((C10690 + C10691) * C2355 + (C10692 + C10693) * C2349 -
             (C7007 + C7006) * C2356 - (C7009 + C7008) * C47951) *
                C48095 * C48227) *
               C48230 +
           (((C5470 + C5471) * C2356 -
             ((C10689 + C10688) * C2349 + (C10687 + C10686) * C2355) +
             (C5472 + C5473) * C47951) *
                C48095 * C10335 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C2356 -
             ((C10698 + C10699) * C2349 + (C10700 + C10701) * C2355) +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2355 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C2349 -
            (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
               C48095 * C10335 +
           ((C10678 + C10679) * C2355 + (C10680 + C10681) * C2349 -
            (C5463 + C5462) * C2356 - (C5465 + C5464) * C47951) *
               C48095 * C48227) *
              C47860 * C48254 +
          (((C5462 + C5463) * C2356 -
            ((C10681 + C10680) * C2349 + (C10679 + C10678) * C2355) +
            (C5464 + C5465) * C47951) *
               C48095 * C10335 +
           ((C5917 + C5916) * C2356 -
            ((C10694 + C10695) * C2349 + (C10696 + C10697) * C2355) +
            (C5919 + C5918) * C47951) *
               C48095 * C48227) *
              C47860 * C48251 +
          (((C10697 + C10696) * C2355 + (C10695 + C10694) * C2349 -
            (C5916 + C5917) * C2356 - (C5918 + C5919) * C47951) *
               C48095 * C10335 +
           ((C12394 + C12395) * C2355 + (C12396 + C12397) * C2349 -
            (C7287 + C7286) * C2356 - (C7289 + C7288) * C47951) *
               C48095 * C48227) *
              C47860 * C48242 +
          (((C7286 + C7287) * C2356 -
            ((C12397 + C12396) * C2349 + (C12395 + C12394) * C2355) +
            (C7288 + C7289) * C47951) *
               C48095 * C10335 +
           ((C4605 * C6795 + C4601 * C6797 + C4606 * C6796 + C48194 * C6798) *
                C2356 -
            ((C12398 + C12399) * C2349 + (C12400 + C12401) * C2355) +
            (C4605 * C6799 + C4601 * C6801 + C4606 * C6800 + C48194 * C6802) *
                C47951) *
               C48095 * C48227) *
              C47860 * C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C2355 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C2349 -
             (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
                C48095 * C10335 +
            ((C10678 + C10679) * C2355 + (C10680 + C10681) * C2349 -
             (C5463 + C5462) * C2356 - (C5465 + C5464) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C4810 + C4811) * C2356 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C2349 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C2355) +
             (C4812 + C4813) * C47951) *
                C48095 * C10335 +
            ((C5467 + C5466) * C2356 -
             ((C10682 + C10683) * C2349 + (C10684 + C10685) * C2355) +
             (C5469 + C5468) * C47951) *
                C48095 * C48227) *
               C47870) *
              C47989 +
          ((((C5462 + C5463) * C2356 -
             ((C10681 + C10680) * C2349 + (C10679 + C10678) * C2355) +
             (C5464 + C5465) * C47951) *
                C48095 * C10335 +
            ((C5917 + C5916) * C2356 -
             ((C10694 + C10695) * C2349 + (C10696 + C10697) * C2355) +
             (C5919 + C5918) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C10685 + C10684) * C2355 + (C10683 + C10682) * C2349 -
             (C5466 + C5467) * C2356 - (C5468 + C5469) * C47951) *
                C48095 * C10335 +
            ((C10690 + C10691) * C2355 + (C10692 + C10693) * C2349 -
             (C7007 + C7006) * C2356 - (C7009 + C7008) * C47951) *
                C48095 * C48227) *
               C47870) *
              C47996 +
          ((((C10697 + C10696) * C2355 + (C10695 + C10694) * C2349 -
             (C5916 + C5917) * C2356 - (C5918 + C5919) * C47951) *
                C48095 * C10335 +
            ((C12394 + C12395) * C2355 + (C12396 + C12397) * C2349 -
             (C7287 + C7286) * C2356 - (C7289 + C7288) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C7006 + C7007) * C2356 -
             ((C10693 + C10692) * C2349 + (C10691 + C10690) * C2355) +
             (C7008 + C7009) * C47951) *
                C48095 * C10335 +
            ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48194 * C2244) *
                 C2356 -
             ((C12734 + C12735) * C2349 + (C12736 + C12737) * C2355) +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48194 * C2250) *
                 C47951) *
                C48095 * C48227) *
               C47870) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C2355 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C2349 -
             (C4802 + C4803) * C2356 - (C4804 + C4805) * C47951) *
                C48095 * C10335 +
            ((C10678 + C10679) * C2355 + (C10680 + C10681) * C2349 -
             (C5463 + C5462) * C2356 - (C5465 + C5464) * C47951) *
                C48095 * C48227) *
               C48243 +
           (((C4810 + C4811) * C2356 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C2349 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C2355) +
             (C4812 + C4813) * C47951) *
                C48095 * C10335 +
            ((C5467 + C5466) * C2356 -
             ((C10682 + C10683) * C2349 + (C10684 + C10685) * C2355) +
             (C5469 + C5468) * C47951) *
                C48095 * C48227) *
               C48230 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C2355 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C2349 -
             (C4818 + C4819) * C2356 - (C4820 + C4821) * C47951) *
                C48095 * C10335 +
            ((C10686 + C10687) * C2355 + (C10688 + C10689) * C2349 -
             (C5471 + C5470) * C2356 - (C5473 + C5472) * C47951) *
                C48095 * C48227) *
               C48201) *
              C3120 +
          ((((C5462 + C5463) * C2356 -
             ((C10681 + C10680) * C2349 + (C10679 + C10678) * C2355) +
             (C5464 + C5465) * C47951) *
                C48095 * C10335 +
            ((C5917 + C5916) * C2356 -
             ((C10694 + C10695) * C2349 + (C10696 + C10697) * C2355) +
             (C5919 + C5918) * C47951) *
                C48095 * C48227) *
               C48243 +
           (((C10685 + C10684) * C2355 + (C10683 + C10682) * C2349 -
             (C5466 + C5467) * C2356 - (C5468 + C5469) * C47951) *
                C48095 * C10335 +
            ((C10690 + C10691) * C2355 + (C10692 + C10693) * C2349 -
             (C7007 + C7006) * C2356 - (C7009 + C7008) * C47951) *
                C48095 * C48227) *
               C48230 +
           (((C5470 + C5471) * C2356 -
             ((C10689 + C10688) * C2349 + (C10687 + C10686) * C2355) +
             (C5472 + C5473) * C47951) *
                C48095 * C10335 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C2356 -
             ((C10698 + C10699) * C2349 + (C10700 + C10701) * C2355) +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C2461 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48253 -
            (C4802 + C4803) * C2462 - (C4804 + C4805) * C48249 +
            (C4806 + C4807) * C2463 + (C4808 + C4809) * C48239 -
            (C5726 + C5727) * C2464 - (C5728 + C5729) * C48217) *
               C48095 * C10335 +
           ((C10678 + C10679) * C2461 + (C10680 + C10681) * C48253 -
            (C5463 + C5462) * C2462 - (C5465 + C5464) * C48249 +
            (C5913 + C5912) * C2463 + (C5915 + C5914) * C48239 -
            (C6419 + C6418) * C2464 - (C6421 + C6420) * C48217) *
               C48095 * C48227) *
              C47860 * C3120 +
          (((C5462 + C5463) * C2462 -
            ((C10681 + C10680) * C48253 + (C10679 + C10678) * C2461) +
            (C5464 + C5465) * C48249 - (C5912 + C5913) * C2463 -
            (C5914 + C5915) * C48239 + (C6418 + C6419) * C2464 +
            (C6420 + C6421) * C48217) *
               C48095 * C10335 +
           ((C5917 + C5916) * C2462 -
            ((C10694 + C10695) * C48253 + (C10696 + C10697) * C2461) +
            (C5919 + C5918) * C48249 - (C5921 + C5920) * C2463 -
            (C5923 + C5922) * C48239 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48194 * C5882) *
                C2464 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48194 * C5886) *
                C48217) *
               C48095 * C48227) *
              C47860 * C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C1303 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C1297 -
            (C4802 + C4803) * C1304 - (C4804 + C4805) * C1298 +
            (C4806 + C4807) * C1305 + (C4808 + C4809) * C1299 -
            (C5726 + C5727) * C1306 - (C5728 + C5729) * C48217) *
               C48095 * C10335 +
           ((C10678 + C10679) * C1303 + (C10680 + C10681) * C1297 -
            (C5463 + C5462) * C1304 - (C5465 + C5464) * C1298 +
            (C5913 + C5912) * C1305 + (C5915 + C5914) * C1299 -
            (C6419 + C6418) * C1306 - (C6421 + C6420) * C48217) *
               C48095 * C48227) *
              C48161 +
          (((C4810 + C4811) * C1304 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C1297 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C1303) +
            (C4812 + C4813) * C1298 - (C4814 + C4815) * C1305 -
            (C4816 + C4817) * C1299 + (C6062 + C6063) * C1306 +
            (C6064 + C6065) * C48217) *
               C48095 * C10335 +
           ((C5467 + C5466) * C1304 -
            ((C10682 + C10683) * C1297 + (C10684 + C10685) * C1303) +
            (C5469 + C5468) * C1298 - (C6269 + C6268) * C1305 -
            (C6271 + C6270) * C1299 +
            (C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48194 * C1564) *
                C1306 +
            (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48194 * C1570) *
                C48217) *
               C48095 * C48227) *
              C47870) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C561 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48175 -
            (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
               C48095 * C10335 +
           ((C10678 + C10679) * C561 + (C10680 + C10681) * C48175 -
            (C5463 + C5462) * C562 - (C5465 + C5464) * C47951) *
               C48095 * C48227) *
              C557 +
          (((C4810 + C4811) * C562 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48175 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C561) +
            (C4812 + C4813) * C47951) *
               C48095 * C10335 +
           ((C5467 + C5466) * C562 -
            ((C10682 + C10683) * C48175 + (C10684 + C10685) * C561) +
            (C5469 + C5468) * C47951) *
               C48095 * C48227) *
              C558 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C561 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C48175 -
            (C4818 + C4819) * C562 - (C4820 + C4821) * C47951) *
               C48095 * C10335 +
           ((C10686 + C10687) * C561 + (C10688 + C10689) * C48175 -
            (C5471 + C5470) * C562 - (C5473 + C5472) * C47951) *
               C48095 * C48227) *
              C559 +
          (((C5110 + C5111) * C562 -
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C48175 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C561) +
            (C5112 + C5113) * C47951) *
               C48095 * C10335 +
           ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48194 * C830) *
                C562 -
            ((C4606 * C435 + C48194 * C451 + C4605 * C432 + C4601 * C449) *
                 C48175 +
             (C4606 * C421 + C48194 * C436 + C4605 * C419 + C4601 * C429) *
                 C561) +
            (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48194 * C836) *
                C47951) *
               C48095 * C48227) *
              C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C561 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48175 -
             (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
                C48095 * C10335 +
            ((C10678 + C10679) * C561 + (C10680 + C10681) * C48175 -
             (C5463 + C5462) * C562 - (C5465 + C5464) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C4810 + C4811) * C562 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48175 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C561) +
             (C4812 + C4813) * C47951) *
                C48095 * C10335 +
            ((C5467 + C5466) * C562 -
             ((C10682 + C10683) * C48175 + (C10684 + C10685) * C561) +
             (C5469 + C5468) * C47951) *
                C48095 * C48227) *
               C47870) *
              C1681 +
          ((((C5462 + C5463) * C562 -
             ((C10681 + C10680) * C48175 + (C10679 + C10678) * C561) +
             (C5464 + C5465) * C47951) *
                C48095 * C10335 +
            ((C5917 + C5916) * C562 -
             ((C10694 + C10695) * C48175 + (C10696 + C10697) * C561) +
             (C5919 + C5918) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C10685 + C10684) * C561 + (C10683 + C10682) * C48175 -
             (C5466 + C5467) * C562 - (C5468 + C5469) * C47951) *
                C48095 * C10335 +
            ((C10690 + C10691) * C561 + (C10692 + C10693) * C48175 -
             (C7007 + C7006) * C562 - (C7009 + C7008) * C47951) *
                C48095 * C48227) *
               C47870) *
              C1682 +
          ((((C10697 + C10696) * C561 + (C10695 + C10694) * C48175 -
             (C5916 + C5917) * C562 - (C5918 + C5919) * C47951) *
                C48095 * C10335 +
            ((C12394 + C12395) * C561 + (C12396 + C12397) * C48175 -
             (C7287 + C7286) * C562 - (C7289 + C7288) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C7006 + C7007) * C562 -
             ((C10693 + C10692) * C48175 + (C10691 + C10690) * C561) +
             (C7008 + C7009) * C47951) *
                C48095 * C10335 +
            ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48194 * C2244) *
                 C562 -
             ((C4606 * C1867 + C48194 * C1879 + C4605 * C1868 + C4601 * C1880) *
                  C48175 +
              (C4606 * C1861 + C48194 * C1870 + C4605 * C1862 + C4601 * C1871) *
                  C561) +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48194 * C2250) *
                 C47951) *
                C48095 * C48227) *
               C47870) *
              C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C1303 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C1297 -
            (C4802 + C4803) * C1304 - (C4804 + C4805) * C1298 +
            (C4806 + C4807) * C1305 + (C4808 + C4809) * C1299 -
            (C5726 + C5727) * C1306 - (C5728 + C5729) * C48217) *
               C48095 * C10335 +
           ((C10678 + C10679) * C1303 + (C10680 + C10681) * C1297 -
            (C5463 + C5462) * C1304 - (C5465 + C5464) * C1298 +
            (C5913 + C5912) * C1305 + (C5915 + C5914) * C1299 -
            (C6419 + C6418) * C1306 - (C6421 + C6420) * C48217) *
               C48095 * C48227) *
              C47860 * C48176 +
          (((C5462 + C5463) * C1304 -
            ((C10681 + C10680) * C1297 + (C10679 + C10678) * C1303) +
            (C5464 + C5465) * C1298 - (C5912 + C5913) * C1305 -
            (C5914 + C5915) * C1299 + (C6418 + C6419) * C1306 +
            (C6420 + C6421) * C48217) *
               C48095 * C10335 +
           ((C5917 + C5916) * C1304 -
            ((C10694 + C10695) * C1297 + (C10696 + C10697) * C1303) +
            (C5919 + C5918) * C1298 - (C5921 + C5920) * C1305 -
            (C5923 + C5922) * C1299 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48194 * C5882) *
                C1306 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48194 * C5886) *
                C48217) *
               C48095 * C48227) *
              C47860 * C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C561 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48175 -
             (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
                C48095 * C10335 +
            ((C10678 + C10679) * C561 + (C10680 + C10681) * C48175 -
             (C5463 + C5462) * C562 - (C5465 + C5464) * C47951) *
                C48095 * C48227) *
               C258 +
           (((C4810 + C4811) * C562 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48175 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C561) +
             (C4812 + C4813) * C47951) *
                C48095 * C10335 +
            ((C5467 + C5466) * C562 -
             ((C10682 + C10683) * C48175 + (C10684 + C10685) * C561) +
             (C5469 + C5468) * C47951) *
                C48095 * C48227) *
               C259 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C561 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C48175 -
             (C4818 + C4819) * C562 - (C4820 + C4821) * C47951) *
                C48095 * C10335 +
            ((C10686 + C10687) * C561 + (C10688 + C10689) * C48175 -
             (C5471 + C5470) * C562 - (C5473 + C5472) * C47951) *
                C48095 * C48227) *
               C48201) *
              C48176 +
          ((((C5462 + C5463) * C562 -
             ((C10681 + C10680) * C48175 + (C10679 + C10678) * C561) +
             (C5464 + C5465) * C47951) *
                C48095 * C10335 +
            ((C5917 + C5916) * C562 -
             ((C10694 + C10695) * C48175 + (C10696 + C10697) * C561) +
             (C5919 + C5918) * C47951) *
                C48095 * C48227) *
               C258 +
           (((C10685 + C10684) * C561 + (C10683 + C10682) * C48175 -
             (C5466 + C5467) * C562 - (C5468 + C5469) * C47951) *
                C48095 * C10335 +
            ((C10690 + C10691) * C561 + (C10692 + C10693) * C48175 -
             (C7007 + C7006) * C562 - (C7009 + C7008) * C47951) *
                C48095 * C48227) *
               C259 +
           (((C5470 + C5471) * C562 -
             ((C10689 + C10688) * C48175 + (C10687 + C10686) * C561) +
             (C5472 + C5473) * C47951) *
                C48095 * C10335 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C562 -
             ((C10698 + C10699) * C48175 + (C10700 + C10701) * C561) +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C561 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48175 -
            (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
               C48095 * C10335 +
           ((C10678 + C10679) * C561 + (C10680 + C10681) * C48175 -
            (C5463 + C5462) * C562 - (C5465 + C5464) * C47951) *
               C48095 * C48227) *
              C47860 * C2133 +
          (((C5462 + C5463) * C562 -
            ((C10681 + C10680) * C48175 + (C10679 + C10678) * C561) +
            (C5464 + C5465) * C47951) *
               C48095 * C10335 +
           ((C5917 + C5916) * C562 -
            ((C10694 + C10695) * C48175 + (C10696 + C10697) * C561) +
            (C5919 + C5918) * C47951) *
               C48095 * C48227) *
              C47860 * C2134 +
          (((C10697 + C10696) * C561 + (C10695 + C10694) * C48175 -
            (C5916 + C5917) * C562 - (C5918 + C5919) * C47951) *
               C48095 * C10335 +
           ((C12394 + C12395) * C561 + (C12396 + C12397) * C48175 -
            (C7287 + C7286) * C562 - (C7289 + C7288) * C47951) *
               C48095 * C48227) *
              C47860 * C2135 +
          (((C7286 + C7287) * C562 -
            ((C12397 + C12396) * C48175 + (C12395 + C12394) * C561) +
            (C7288 + C7289) * C47951) *
               C48095 * C10335 +
           ((C4605 * C6795 + C4601 * C6797 + C4606 * C6796 + C48194 * C6798) *
                C562 -
            ((C12398 + C12399) * C48175 + (C12400 + C12401) * C561) +
            (C4605 * C6799 + C4601 * C6801 + C4606 * C6800 + C48194 * C6802) *
                C47951) *
               C48095 * C48227) *
              C47860 * C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                    C116 +
                (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                    C47888) *
                   C48095 * C10335 +
               ((C4605 * C420 + C4601 * C434 + C4606 * C417 + C48194 * C427) *
                    C116 +
                (C4605 * C433 + C4601 * C450 + C4606 * C430 + C48194 * C447) *
                    C47888) *
                   C48095 * C48227) *
                  C107 -
              (((C4606 * C431 + C48194 * C448 + C4605 * C430 + C4601 * C447) *
                    C47888 +
                (C4606 * C418 + C48194 * C428 + C4605 * C417 + C4601 * C427) *
                    C116) *
                   C48095 * C48227 +
               ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                    C47888 +
                (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                    C116) *
                   C48095 * C10335) *
                  C108 +
              (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                    C116 +
                (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                    C47888) *
                   C48095 * C10335 +
               ((C4605 * C418 + C4601 * C428 + C4606 * C419 + C48194 * C429) *
                    C116 +
                (C4605 * C431 + C4601 * C448 + C4606 * C432 + C48194 * C449) *
                    C47888) *
                   C48095 * C48227) *
                  C109 -
              (((C4606 * C435 + C48194 * C451 + C4605 * C432 + C4601 * C449) *
                    C47888 +
                (C4606 * C421 + C48194 * C436 + C4605 * C419 + C4601 * C429) *
                    C116) *
                   C48095 * C48227 +
               ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                    C47888 +
                (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                    C116) *
                   C48095 * C10335) *
                  C110 +
              (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48194 * C135) *
                    C116 +
                (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48194 * C143) *
                    C47888) *
                   C48095 * C10335 +
               ((C4605 * C421 + C4601 * C436 + C4606 * C667 + C48194 * C668) *
                    C116 +
                (C4605 * C435 + C4601 * C451 + C4606 * C669 + C48194 * C670) *
                    C47888) *
                   C48095 * C48227) *
                  C111) *
             C47906 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                    C261 +
                (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                    C48246 -
                (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
                (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
                   C48095 * C10335 +
               ((C4605 * C420 + C4601 * C434 + C4606 * C417 + C48194 * C427) *
                    C261 +
                (C4605 * C433 + C4601 * C450 + C4606 * C430 + C48194 * C447) *
                    C48246 -
                (C5463 + C5462) * C262 - (C5465 + C5464) * C48234 +
                (C5913 + C5912) * C263 + (C5915 + C5914) * C48207) *
                   C48095 * C48227) *
                  C258 +
              (((C4810 + C4811) * C262 -
                ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                     C48246 +
                 (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                     C261) +
                (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
                (C4816 + C4817) * C48207) *
                   C48095 * C10335 +
               ((C5467 + C5466) * C262 -
                ((C4606 * C431 + C48194 * C448 + C4605 * C430 + C4601 * C447) *
                     C48246 +
                 (C4606 * C418 + C48194 * C428 + C4605 * C417 + C4601 * C427) *
                     C261) +
                (C5469 + C5468) * C48234 - (C6269 + C6268) * C263 -
                (C6271 + C6270) * C48207) *
                   C48095 * C48227) *
                  C259 +
              (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                    C261 +
                (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                    C48246 -
                (C4818 + C4819) * C262 - (C4820 + C4821) * C48234 +
                (C4822 + C4823) * C263 + (C4824 + C4825) * C48207) *
                   C48095 * C10335 +
               ((C4605 * C418 + C4601 * C428 + C4606 * C419 + C48194 * C429) *
                    C261 +
                (C4605 * C431 + C4601 * C448 + C4606 * C432 + C48194 * C449) *
                    C48246 -
                (C5471 + C5470) * C262 - (C5473 + C5472) * C48234 +
                (C4605 * C1163 + C4601 * C1172 + C4606 * C1457 +
                 C48194 * C1458) *
                    C263 +
                (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 +
                 C48194 * C1460) *
                    C48207) *
                   C48095 * C48227) *
                  C48201) *
             C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C258 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C259 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C10335 +
            ((C10686 + C10687) * C116 + (C10688 + C10689) * C47888) * C48095 *
                C48227) *
               C48201) *
              C48247 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C259 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C258 -
           (((C10698 + C10699) * C47888 + (C10700 + C10701) * C116) * C48095 *
                C48227 +
            ((C10689 + C10688) * C47888 + (C10687 + C10686) * C116) * C48095 *
                C10335) *
               C48201) *
              C48236 +
          ((((C10697 + C10696) * C116 + (C10695 + C10694) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48194 * C1871) *
                 C116 +
             (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48194 * C1880) *
                 C47888) *
                C48095 * C48227) *
               C258 -
           (((C4606 * C1867 + C48194 * C1879 + C4605 * C1868 + C4601 * C1880) *
                 C47888 +
             (C4606 * C1861 + C48194 * C1870 + C4605 * C1862 + C4601 * C1871) *
                 C116) *
                C48095 * C48227 +
            ((C10693 + C10692) * C47888 + (C10691 + C10690) * C116) * C48095 *
                C10335) *
               C259 +
           (((C10701 + C10700) * C116 + (C10699 + C10698) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1861 + C4601 * C1870 + C4606 * C2137 + C48194 * C2138) *
                 C116 +
             (C4605 * C1867 + C4601 * C1879 + C4606 * C2139 + C48194 * C2140) *
                 C47888) *
                C48095 * C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C10678 + C10679) * C953 + (C10680 + C10681) * C947 -
            (C5463 + C5462) * C954 - (C5465 + C5464) * C948 +
            (C5913 + C5912) * C955 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C48243 +
          (((C4810 + C4811) * C954 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C947 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C953) +
            (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
            (C4816 + C4817) * C48207) *
               C48095 * C10335 +
           ((C5467 + C5466) * C954 -
            ((C10682 + C10683) * C947 + (C10684 + C10685) * C953) +
            (C5469 + C5468) * C948 - (C6269 + C6268) * C955 -
            (C6271 + C6270) * C48207) *
               C48095 * C48227) *
              C48230 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C953 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C947 -
            (C4818 + C4819) * C954 - (C4820 + C4821) * C948 +
            (C4822 + C4823) * C955 + (C4824 + C4825) * C48207) *
               C48095 * C10335 +
           ((C10686 + C10687) * C953 + (C10688 + C10689) * C947 -
            (C5471 + C5470) * C954 - (C5473 + C5472) * C948 +
            (C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                C955 +
            (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
               C1024 +
           (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
               C1018 -
           (C4802 + C4803) * C1025 - (C4804 + C4805) * C1019 +
           (C4806 + C4807) * C1026 + (C4808 + C4809) * C1020 -
           (C5726 + C5727) * C1027 - (C5728 + C5729) * C1021 +
           (C5730 + C5731) * C1028 + (C5732 + C5733) * C1022) *
              C48095 * C10335 +
          ((C10678 + C10679) * C1024 + (C10680 + C10681) * C1018 -
           (C5463 + C5462) * C1025 - (C5465 + C5464) * C1019 +
           (C5913 + C5912) * C1026 + (C5915 + C5914) * C1020 -
           (C6419 + C6418) * C1027 - (C6421 + C6420) * C1021 +
           (C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48194 * C6404) *
               C1028 +
           (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48194 * C6408) *
               C1022) *
              C48095 * C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C10678 + C10679) * C953 + (C10680 + C10681) * C947 -
            (C5463 + C5462) * C954 - (C5465 + C5464) * C948 +
            (C5913 + C5912) * C955 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C47860 * C48247 +
          (((C5462 + C5463) * C954 -
            ((C10681 + C10680) * C947 + (C10679 + C10678) * C953) +
            (C5464 + C5465) * C948 - (C5912 + C5913) * C955 -
            (C5914 + C5915) * C48207) *
               C48095 * C10335 +
           ((C5917 + C5916) * C954 -
            ((C10694 + C10695) * C947 + (C10696 + C10697) * C953) +
            (C5919 + C5918) * C948 - (C5921 + C5920) * C955 -
            (C5923 + C5922) * C48207) *
               C48095 * C48227) *
              C47860 * C48236 +
          (((C10697 + C10696) * C953 + (C10695 + C10694) * C947 -
            (C5916 + C5917) * C954 - (C5918 + C5919) * C948 +
            (C5920 + C5921) * C955 + (C5922 + C5923) * C48207) *
               C48095 * C10335 +
           ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48194 * C1871) *
                C953 +
            (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48194 * C1880) *
                C947 -
            (C7287 + C7286) * C954 - (C7289 + C7288) * C948 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48194 * C7272) *
                C955 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48194 * C7276) *
                C48207) *
               C48095 * C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C48243 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C48230 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C10335 +
            ((C10686 + C10687) * C116 + (C10688 + C10689) * C47888) * C48095 *
                C48227) *
               C48201) *
              C1681 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C48230 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C48243 -
           (((C10698 + C10699) * C47888 + (C10700 + C10701) * C116) * C48095 *
                C48227 +
            ((C10689 + C10688) * C47888 + (C10687 + C10686) * C116) * C48095 *
                C10335) *
               C48201) *
              C1682 +
          ((((C10697 + C10696) * C116 + (C10695 + C10694) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48194 * C1871) *
                 C116 +
             (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48194 * C1880) *
                 C47888) *
                C48095 * C48227) *
               C48243 -
           (((C4606 * C1867 + C48194 * C1879 + C4605 * C1868 + C4601 * C1880) *
                 C47888 +
             (C4606 * C1861 + C48194 * C1870 + C4605 * C1862 + C4601 * C1871) *
                 C116) *
                C48095 * C48227 +
            ((C10693 + C10692) * C47888 + (C10691 + C10690) * C116) * C48095 *
                C10335) *
               C48230 +
           (((C10701 + C10700) * C116 + (C10699 + C10698) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1861 + C4601 * C1870 + C4606 * C2137 + C48194 * C2138) *
                 C116 +
             (C4605 * C1867 + C4601 * C1879 + C4606 * C2139 + C48194 * C2140) *
                 C47888) *
                C48095 * C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C261 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48246 -
            (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
            (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C10678 + C10679) * C261 + (C10680 + C10681) * C48246 -
            (C5463 + C5462) * C262 - (C5465 + C5464) * C48234 +
            (C5913 + C5912) * C263 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C47860 * C1681 +
          (((C5462 + C5463) * C262 -
            ((C10681 + C10680) * C48246 + (C10679 + C10678) * C261) +
            (C5464 + C5465) * C48234 - (C5912 + C5913) * C263 -
            (C5914 + C5915) * C48207) *
               C48095 * C10335 +
           ((C5917 + C5916) * C262 -
            ((C10694 + C10695) * C48246 + (C10696 + C10697) * C261) +
            (C5919 + C5918) * C48234 - (C5921 + C5920) * C263 -
            (C5923 + C5922) * C48207) *
               C48095 * C48227) *
              C47860 * C1682 +
          (((C10697 + C10696) * C261 + (C10695 + C10694) * C48246 -
            (C5916 + C5917) * C262 - (C5918 + C5919) * C48234 +
            (C5920 + C5921) * C263 + (C5922 + C5923) * C48207) *
               C48095 * C10335 +
           ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48194 * C1871) *
                C261 +
            (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48194 * C1880) *
                C48246 -
            (C7287 + C7286) * C262 - (C7289 + C7288) * C48234 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48194 * C7272) *
                C263 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48194 * C7276) *
                C48207) *
               C48095 * C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47888) *
               C48095 * C10335 +
           ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
               C48227) *
              C47860 * C1856 -
          (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
               C48227 +
           ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
               C10335) *
              C47860 * C1857 +
          (((C10697 + C10696) * C116 + (C10695 + C10694) * C47888) * C48095 *
               C10335 +
           ((C12394 + C12395) * C116 + (C12396 + C12397) * C47888) * C48095 *
               C48227) *
              C47860 * C1858 -
          (((C12398 + C12399) * C47888 + (C12400 + C12401) * C116) * C48095 *
               C48227 +
           ((C12397 + C12396) * C47888 + (C12395 + C12394) * C116) * C48095 *
               C10335) *
              C47860 * C1859 +
          (((C12401 + C12400) * C116 + (C12399 + C12398) * C47888) * C48095 *
               C10335 +
           ((C4605 * C12369 + C4601 * C12371 + C4606 * C12370 +
             C48194 * C12372) *
                C116 +
            (C4605 * C12373 + C4601 * C12375 + C4606 * C12374 +
             C48194 * C12376) *
                C47888) *
               C48095 * C48227) *
              C47860 * C1860)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C953 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C947 -
             (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
             (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
                C48095 * C10335 +
            ((C10678 + C10679) * C953 + (C10680 + C10681) * C947 -
             (C5463 + C5462) * C954 - (C5465 + C5464) * C948 +
             (C5913 + C5912) * C955 + (C5915 + C5914) * C48207) *
                C48095 * C48227) *
               C48161 +
           (((C4810 + C4811) * C954 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C947 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C953) +
             (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
             (C4816 + C4817) * C48207) *
                C48095 * C10335 +
            ((C5467 + C5466) * C954 -
             ((C10682 + C10683) * C947 + (C10684 + C10685) * C953) +
             (C5469 + C5468) * C948 - (C6269 + C6268) * C955 -
             (C6271 + C6270) * C48207) *
                C48095 * C48227) *
               C47870) *
              C48176 +
          ((((C5462 + C5463) * C954 -
             ((C10681 + C10680) * C947 + (C10679 + C10678) * C953) +
             (C5464 + C5465) * C948 - (C5912 + C5913) * C955 -
             (C5914 + C5915) * C48207) *
                C48095 * C10335 +
            ((C5917 + C5916) * C954 -
             ((C10694 + C10695) * C947 + (C10696 + C10697) * C953) +
             (C5919 + C5918) * C948 - (C5921 + C5920) * C955 -
             (C5923 + C5922) * C48207) *
                C48095 * C48227) *
               C48161 +
           (((C10685 + C10684) * C953 + (C10683 + C10682) * C947 -
             (C5466 + C5467) * C954 - (C5468 + C5469) * C948 +
             (C6268 + C6269) * C955 + (C6270 + C6271) * C48207) *
                C48095 * C10335 +
            ((C10690 + C10691) * C953 + (C10692 + C10693) * C947 -
             (C7007 + C7006) * C954 - (C7009 + C7008) * C948 +
             (C4605 * C1170 + C4601 * C1185 + C4606 * C1171 + C48194 * C1186) *
                 C955 +
             (C4605 * C1188 + C4601 * C1197 + C4606 * C1189 + C48194 * C1198) *
                 C48207) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C557 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C558 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C10335 +
            ((C10686 + C10687) * C116 + (C10688 + C10689) * C47888) * C48095 *
                C48227) *
               C559 -
           (((C10970 + C10971) * C47888 + (C10972 + C10973) * C116) * C48095 *
                C48227 +
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C47888 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C48095 * C10335) *
               C48211) *
              C48176 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C558 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C557 -
           (((C10698 + C10699) * C47888 + (C10700 + C10701) * C116) * C48095 *
                C48227 +
            ((C10689 + C10688) * C47888 + (C10687 + C10686) * C116) * C48095 *
                C10335) *
               C559 +
           (((C10973 + C10972) * C116 + (C10971 + C10970) * C47888) * C48095 *
                C10335 +
            ((C4605 * C425 + C4601 * C444 + C4606 * C426 + C48194 * C445) *
                 C116 +
             (C4605 * C443 + C4601 * C455 + C4606 * C446 + C48194 * C456) *
                 C47888) *
                C48095 * C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C48161 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C47870) *
              C2133 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C47870 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C48161) *
              C2134 +
          ((((C10697 + C10696) * C116 + (C10695 + C10694) * C47888) * C48095 *
                C10335 +
            ((C12394 + C12395) * C116 + (C12396 + C12397) * C47888) * C48095 *
                C48227) *
               C48161 -
           (((C12734 + C12735) * C47888 + (C12736 + C12737) * C116) * C48095 *
                C48227 +
            ((C10693 + C10692) * C47888 + (C10691 + C10690) * C116) * C48095 *
                C10335) *
               C47870) *
              C2135 +
          ((((C12737 + C12736) * C116 + (C12735 + C12734) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1865 + C4601 * C1874 + C4606 * C1866 + C48194 * C1875) *
                 C116 +
             (C4605 * C1877 + C4601 * C1883 + C4606 * C1878 + C48194 * C1884) *
                 C47888) *
                C48095 * C48227) *
               C47870 -
           (((C12398 + C12399) * C47888 + (C12400 + C12401) * C116) * C48095 *
                C48227 +
            ((C12397 + C12396) * C47888 + (C12395 + C12394) * C116) * C48095 *
                C10335) *
               C48161) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C261 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48246 -
            (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
            (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C4605 * C420 + C4601 * C434 + C4606 * C417 + C48194 * C427) *
                C261 +
            (C4605 * C433 + C4601 * C450 + C4606 * C430 + C48194 * C447) *
                C48246 -
            (C5463 + C5462) * C262 - (C5465 + C5464) * C48234 +
            (C5913 + C5912) * C263 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C258 +
          (((C4810 + C4811) * C262 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48246 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C261) +
            (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
            (C4816 + C4817) * C48207) *
               C48095 * C10335 +
           ((C5467 + C5466) * C262 -
            ((C4606 * C431 + C48194 * C448 + C4605 * C430 + C4601 * C447) *
                 C48246 +
             (C4606 * C418 + C48194 * C428 + C4605 * C417 + C4601 * C427) *
                 C261) +
            (C5469 + C5468) * C48234 - (C6269 + C6268) * C263 -
            (C6271 + C6270) * C48207) *
               C48095 * C48227) *
              C259 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C261 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C48246 -
            (C4818 + C4819) * C262 - (C4820 + C4821) * C48234 +
            (C4822 + C4823) * C263 + (C4824 + C4825) * C48207) *
               C48095 * C10335 +
           ((C4605 * C418 + C4601 * C428 + C4606 * C419 + C48194 * C429) *
                C261 +
            (C4605 * C431 + C4601 * C448 + C4606 * C432 + C48194 * C449) *
                C48246 -
            (C5471 + C5470) * C262 - (C5473 + C5472) * C48234 +
            (C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                C263 +
            (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47888) *
               C48095 * C10335 +
           ((C4605 * C420 + C4601 * C434 + C4606 * C417 + C48194 * C427) *
                C116 +
            (C4605 * C433 + C4601 * C450 + C4606 * C430 + C48194 * C447) *
                C47888) *
               C48095 * C48227) *
              C107 -
          (((C4606 * C431 + C48194 * C448 + C4605 * C430 + C4601 * C447) *
                C47888 +
            (C4606 * C418 + C48194 * C428 + C4605 * C417 + C4601 * C427) *
                C116) *
               C48095 * C48227 +
           ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                C47888 +
            (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C48095 * C10335) *
              C108 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C47888) *
               C48095 * C10335 +
           ((C4605 * C418 + C4601 * C428 + C4606 * C419 + C48194 * C429) *
                C116 +
            (C4605 * C431 + C4601 * C448 + C4606 * C432 + C48194 * C449) *
                C47888) *
               C48095 * C48227) *
              C109 -
          (((C4606 * C435 + C48194 * C451 + C4605 * C432 + C4601 * C449) *
                C47888 +
            (C4606 * C421 + C48194 * C436 + C4605 * C419 + C4601 * C429) *
                C116) *
               C48095 * C48227 +
           ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                C47888 +
            (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C48095 * C10335) *
              C110 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48194 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48194 * C143) *
                C47888) *
               C48095 * C10335 +
           ((C4605 * C421 + C4601 * C436 + C4606 * C667 + C48194 * C668) *
                C116 +
            (C4605 * C435 + C4601 * C451 + C4606 * C669 + C48194 * C670) *
                C47888) *
               C48095 * C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C10678 + C10679) * C953 + (C10680 + C10681) * C947 -
            (C5463 + C5462) * C954 - (C5465 + C5464) * C948 +
            (C5913 + C5912) * C955 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C48243 +
          (((C4810 + C4811) * C954 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C947 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C953) +
            (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
            (C4816 + C4817) * C48207) *
               C48095 * C10335 +
           ((C5467 + C5466) * C954 -
            ((C10682 + C10683) * C947 + (C10684 + C10685) * C953) +
            (C5469 + C5468) * C948 - (C6269 + C6268) * C955 -
            (C6271 + C6270) * C48207) *
               C48095 * C48227) *
              C48230 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C953 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C947 -
            (C4818 + C4819) * C954 - (C4820 + C4821) * C948 +
            (C4822 + C4823) * C955 + (C4824 + C4825) * C48207) *
               C48095 * C10335 +
           ((C10686 + C10687) * C953 + (C10688 + C10689) * C947 -
            (C5471 + C5470) * C954 - (C5473 + C5472) * C948 +
            (C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                C955 +
            (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
               C1024 +
           (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
               C1018 -
           (C4802 + C4803) * C1025 - (C4804 + C4805) * C1019 +
           (C4806 + C4807) * C1026 + (C4808 + C4809) * C1020 -
           (C5726 + C5727) * C1027 - (C5728 + C5729) * C1021 +
           (C5730 + C5731) * C1028 + (C5732 + C5733) * C1022) *
              C48095 * C10335 +
          ((C10678 + C10679) * C1024 + (C10680 + C10681) * C1018 -
           (C5463 + C5462) * C1025 - (C5465 + C5464) * C1019 +
           (C5913 + C5912) * C1026 + (C5915 + C5914) * C1020 -
           (C6419 + C6418) * C1027 - (C6421 + C6420) * C1021 +
           (C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48194 * C6404) *
               C1028 +
           (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48194 * C6408) *
               C1022) *
              C48095 * C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C48243 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C48230 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C10335 +
            ((C10686 + C10687) * C116 + (C10688 + C10689) * C47888) * C48095 *
                C48227) *
               C48201) *
              C1681 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C48230 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C48243 -
           (((C10698 + C10699) * C47888 + (C10700 + C10701) * C116) * C48095 *
                C48227 +
            ((C10689 + C10688) * C47888 + (C10687 + C10686) * C116) * C48095 *
                C10335) *
               C48201) *
              C1682 +
          ((((C10697 + C10696) * C116 + (C10695 + C10694) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48194 * C1871) *
                 C116 +
             (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48194 * C1880) *
                 C47888) *
                C48095 * C48227) *
               C48243 -
           (((C4606 * C1867 + C48194 * C1879 + C4605 * C1868 + C4601 * C1880) *
                 C47888 +
             (C4606 * C1861 + C48194 * C1870 + C4605 * C1862 + C4601 * C1871) *
                 C116) *
                C48095 * C48227 +
            ((C10693 + C10692) * C47888 + (C10691 + C10690) * C116) * C48095 *
                C10335) *
               C48230 +
           (((C10701 + C10700) * C116 + (C10699 + C10698) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1861 + C4601 * C1870 + C4606 * C2137 + C48194 * C2138) *
                 C116 +
             (C4605 * C1867 + C4601 * C1879 + C4606 * C2139 + C48194 * C2140) *
                 C47888) *
                C48095 * C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C261 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48246 -
            (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
            (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C10678 + C10679) * C261 + (C10680 + C10681) * C48246 -
            (C5463 + C5462) * C262 - (C5465 + C5464) * C48234 +
            (C5913 + C5912) * C263 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C47860 * C1681 +
          (((C5462 + C5463) * C262 -
            ((C10681 + C10680) * C48246 + (C10679 + C10678) * C261) +
            (C5464 + C5465) * C48234 - (C5912 + C5913) * C263 -
            (C5914 + C5915) * C48207) *
               C48095 * C10335 +
           ((C5917 + C5916) * C262 -
            ((C10694 + C10695) * C48246 + (C10696 + C10697) * C261) +
            (C5919 + C5918) * C48234 - (C5921 + C5920) * C263 -
            (C5923 + C5922) * C48207) *
               C48095 * C48227) *
              C47860 * C1682 +
          (((C10697 + C10696) * C261 + (C10695 + C10694) * C48246 -
            (C5916 + C5917) * C262 - (C5918 + C5919) * C48234 +
            (C5920 + C5921) * C263 + (C5922 + C5923) * C48207) *
               C48095 * C10335 +
           ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48194 * C1871) *
                C261 +
            (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48194 * C1880) *
                C48246 -
            (C7287 + C7286) * C262 - (C7289 + C7288) * C48234 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48194 * C7272) *
                C263 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48194 * C7276) *
                C48207) *
               C48095 * C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C561 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48175 -
             (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
                C48095 * C10335 +
            ((C10678 + C10679) * C561 + (C10680 + C10681) * C48175 -
             (C5463 + C5462) * C562 - (C5465 + C5464) * C47951) *
                C48095 * C48227) *
               C47865 +
           (((C4810 + C4811) * C562 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48175 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C561) +
             (C4812 + C4813) * C47951) *
                C48095 * C10335 +
            ((C5467 + C5466) * C562 -
             ((C10682 + C10683) * C48175 + (C10684 + C10685) * C561) +
             (C5469 + C5468) * C47951) *
                C48095 * C48227) *
               C47873 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C561 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C48175 -
             (C4818 + C4819) * C562 - (C4820 + C4821) * C47951) *
                C48095 * C10335 +
            ((C10686 + C10687) * C561 + (C10688 + C10689) * C48175 -
             (C5471 + C5470) * C562 - (C5473 + C5472) * C47951) *
                C48095 * C48227) *
               C2726) *
              C3120 +
          ((((C5462 + C5463) * C562 -
             ((C10681 + C10680) * C48175 + (C10679 + C10678) * C561) +
             (C5464 + C5465) * C47951) *
                C48095 * C10335 +
            ((C5917 + C5916) * C562 -
             ((C10694 + C10695) * C48175 + (C10696 + C10697) * C561) +
             (C5919 + C5918) * C47951) *
                C48095 * C48227) *
               C47865 +
           (((C10685 + C10684) * C561 + (C10683 + C10682) * C48175 -
             (C5466 + C5467) * C562 - (C5468 + C5469) * C47951) *
                C48095 * C10335 +
            ((C10690 + C10691) * C561 + (C10692 + C10693) * C48175 -
             (C7007 + C7006) * C562 - (C7009 + C7008) * C47951) *
                C48095 * C48227) *
               C47873 +
           (((C5470 + C5471) * C562 -
             ((C10689 + C10688) * C48175 + (C10687 + C10686) * C561) +
             (C5472 + C5473) * C47951) *
                C48095 * C10335 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C562 -
             ((C10698 + C10699) * C48175 + (C10700 + C10701) * C561) +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C2726) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C561 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48175 -
             (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
                C48095 * C10335 +
            ((C10678 + C10679) * C561 + (C10680 + C10681) * C48175 -
             (C5463 + C5462) * C562 - (C5465 + C5464) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C4810 + C4811) * C562 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48175 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C561) +
             (C4812 + C4813) * C47951) *
                C48095 * C10335 +
            ((C5467 + C5466) * C562 -
             ((C10682 + C10683) * C48175 + (C10684 + C10685) * C561) +
             (C5469 + C5468) * C47951) *
                C48095 * C48227) *
               C47870) *
              C47989 +
          ((((C5462 + C5463) * C562 -
             ((C10681 + C10680) * C48175 + (C10679 + C10678) * C561) +
             (C5464 + C5465) * C47951) *
                C48095 * C10335 +
            ((C5917 + C5916) * C562 -
             ((C10694 + C10695) * C48175 + (C10696 + C10697) * C561) +
             (C5919 + C5918) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C10685 + C10684) * C561 + (C10683 + C10682) * C48175 -
             (C5466 + C5467) * C562 - (C5468 + C5469) * C47951) *
                C48095 * C10335 +
            ((C10690 + C10691) * C561 + (C10692 + C10693) * C48175 -
             (C7007 + C7006) * C562 - (C7009 + C7008) * C47951) *
                C48095 * C48227) *
               C47870) *
              C47996 +
          ((((C10697 + C10696) * C561 + (C10695 + C10694) * C48175 -
             (C5916 + C5917) * C562 - (C5918 + C5919) * C47951) *
                C48095 * C10335 +
            ((C12394 + C12395) * C561 + (C12396 + C12397) * C48175 -
             (C7287 + C7286) * C562 - (C7289 + C7288) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C7006 + C7007) * C562 -
             ((C10693 + C10692) * C48175 + (C10691 + C10690) * C561) +
             (C7008 + C7009) * C47951) *
                C48095 * C10335 +
            ((C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48194 * C2244) *
                 C562 -
             ((C12734 + C12735) * C48175 + (C12736 + C12737) * C561) +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48194 * C2250) *
                 C47951) *
                C48095 * C48227) *
               C47870) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C261 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48246 -
             (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
             (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
                C48095 * C10335 +
            ((C10678 + C10679) * C261 + (C10680 + C10681) * C48246 -
             (C5463 + C5462) * C262 - (C5465 + C5464) * C48234 +
             (C5913 + C5912) * C263 + (C5915 + C5914) * C48207) *
                C48095 * C48227) *
               C2459 +
           (((C4810 + C4811) * C262 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48246 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C261) +
             (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
             (C4816 + C4817) * C48207) *
                C48095 * C10335 +
            ((C5467 + C5466) * C262 -
             ((C10682 + C10683) * C48246 + (C10684 + C10685) * C261) +
             (C5469 + C5468) * C48234 - (C6269 + C6268) * C263 -
             (C6271 + C6270) * C48207) *
                C48095 * C48227) *
               C47870) *
              C3120 +
          ((((C5462 + C5463) * C262 -
             ((C10681 + C10680) * C48246 + (C10679 + C10678) * C261) +
             (C5464 + C5465) * C48234 - (C5912 + C5913) * C263 -
             (C5914 + C5915) * C48207) *
                C48095 * C10335 +
            ((C5917 + C5916) * C262 -
             ((C10694 + C10695) * C48246 + (C10696 + C10697) * C261) +
             (C5919 + C5918) * C48234 - (C5921 + C5920) * C263 -
             (C5923 + C5922) * C48207) *
                C48095 * C48227) *
               C2459 +
           (((C10685 + C10684) * C261 + (C10683 + C10682) * C48246 -
             (C5466 + C5467) * C262 - (C5468 + C5469) * C48234 +
             (C6268 + C6269) * C263 + (C6270 + C6271) * C48207) *
                C48095 * C10335 +
            ((C10690 + C10691) * C261 + (C10692 + C10693) * C48246 -
             (C7007 + C7006) * C262 - (C7009 + C7008) * C48234 +
             (C4605 * C1170 + C4601 * C1185 + C4606 * C1171 + C48194 * C1186) *
                 C263 +
             (C4605 * C1188 + C4601 * C1197 + C4606 * C1189 + C48194 * C1198) *
                 C48207) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C48252 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C48245 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C10335 +
            ((C10686 + C10687) * C116 + (C10688 + C10689) * C47888) * C48095 *
                C48227) *
               C48232 -
           (((C10970 + C10971) * C47888 + (C10972 + C10973) * C116) * C48095 *
                C48227 +
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C47888 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C48095 * C10335) *
               C48211) *
              C3120 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C48245 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C48252 -
           (((C10698 + C10699) * C47888 + (C10700 + C10701) * C116) * C48095 *
                C48227 +
            ((C10689 + C10688) * C47888 + (C10687 + C10686) * C116) * C48095 *
                C10335) *
               C48232 +
           (((C10973 + C10972) * C116 + (C10971 + C10970) * C47888) * C48095 *
                C10335 +
            ((C4605 * C425 + C4601 * C444 + C4606 * C426 + C48194 * C445) *
                 C116 +
             (C4605 * C443 + C4601 * C455 + C4606 * C446 + C48194 * C456) *
                 C47888) *
                C48095 * C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C2459 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C47870) *
              C48254 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C47870 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C2459) *
              C48251 +
          ((((C10697 + C10696) * C116 + (C10695 + C10694) * C47888) * C48095 *
                C10335 +
            ((C12394 + C12395) * C116 + (C12396 + C12397) * C47888) * C48095 *
                C48227) *
               C2459 -
           (((C12734 + C12735) * C47888 + (C12736 + C12737) * C116) * C48095 *
                C48227 +
            ((C10693 + C10692) * C47888 + (C10691 + C10690) * C116) * C48095 *
                C10335) *
               C47870) *
              C48242 +
          ((((C12737 + C12736) * C116 + (C12735 + C12734) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1865 + C4601 * C1874 + C4606 * C1866 + C48194 * C1875) *
                 C116 +
             (C4605 * C1877 + C4601 * C1883 + C4606 * C1878 + C48194 * C1884) *
                 C47888) *
                C48095 * C48227) *
               C47870 -
           (((C12398 + C12399) * C47888 + (C12400 + C12401) * C116) * C48095 *
                C48227 +
            ((C12397 + C12396) * C47888 + (C12395 + C12394) * C116) * C48095 *
                C10335) *
               C2459) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C47865 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C47873 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C10335 +
            ((C10686 + C10687) * C116 + (C10688 + C10689) * C47888) * C48095 *
                C48227) *
               C2726) *
              C47989 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C47873 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C47865 -
           (((C10698 + C10699) * C47888 + (C10700 + C10701) * C116) * C48095 *
                C48227 +
            ((C10689 + C10688) * C47888 + (C10687 + C10686) * C116) * C48095 *
                C10335) *
               C2726) *
              C47996 +
          ((((C10697 + C10696) * C116 + (C10695 + C10694) * C47888) * C48095 *
                C10335 +
            ((C12394 + C12395) * C116 + (C12396 + C12397) * C47888) * C48095 *
                C48227) *
               C47865 -
           (((C12734 + C12735) * C47888 + (C12736 + C12737) * C116) * C48095 *
                C48227 +
            ((C10693 + C10692) * C47888 + (C10691 + C10690) * C116) * C48095 *
                C10335) *
               C47873 +
           (((C10701 + C10700) * C116 + (C10699 + C10698) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1861 + C4601 * C1870 + C4606 * C2137 + C48194 * C2138) *
                 C116 +
             (C4605 * C1867 + C4601 * C1879 + C4606 * C2139 + C48194 * C2140) *
                 C47888) *
                C48095 * C48227) *
               C2726) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C48252 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C48245 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C10335 +
            ((C10686 + C10687) * C116 + (C10688 + C10689) * C47888) * C48095 *
                C48227) *
               C48232 -
           (((C10970 + C10971) * C47888 + (C10972 + C10973) * C116) * C48095 *
                C48227 +
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C47888 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C48095 * C10335) *
               C48211) *
              C3120 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C48245 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C48252 -
           (((C10698 + C10699) * C47888 + (C10700 + C10701) * C116) * C48095 *
                C48227 +
            ((C10689 + C10688) * C47888 + (C10687 + C10686) * C116) * C48095 *
                C10335) *
               C48232 +
           (((C10973 + C10972) * C116 + (C10971 + C10970) * C47888) * C48095 *
                C10335 +
            ((C4605 * C425 + C4601 * C444 + C4606 * C426 + C48194 * C445) *
                 C116 +
             (C4605 * C443 + C4601 * C455 + C4606 * C446 + C48194 * C456) *
                 C47888) *
                C48095 * C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C261 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48246 -
             (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
             (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
                C48095 * C10335 +
            ((C10678 + C10679) * C261 + (C10680 + C10681) * C48246 -
             (C5463 + C5462) * C262 - (C5465 + C5464) * C48234 +
             (C5913 + C5912) * C263 + (C5915 + C5914) * C48207) *
                C48095 * C48227) *
               C2459 +
           (((C4810 + C4811) * C262 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48246 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C261) +
             (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
             (C4816 + C4817) * C48207) *
                C48095 * C10335 +
            ((C5467 + C5466) * C262 -
             ((C10682 + C10683) * C48246 + (C10684 + C10685) * C261) +
             (C5469 + C5468) * C48234 - (C6269 + C6268) * C263 -
             (C6271 + C6270) * C48207) *
                C48095 * C48227) *
               C47870) *
              C3120 +
          ((((C5462 + C5463) * C262 -
             ((C10681 + C10680) * C48246 + (C10679 + C10678) * C261) +
             (C5464 + C5465) * C48234 - (C5912 + C5913) * C263 -
             (C5914 + C5915) * C48207) *
                C48095 * C10335 +
            ((C5917 + C5916) * C262 -
             ((C10694 + C10695) * C48246 + (C10696 + C10697) * C261) +
             (C5919 + C5918) * C48234 - (C5921 + C5920) * C263 -
             (C5923 + C5922) * C48207) *
                C48095 * C48227) *
               C2459 +
           (((C10685 + C10684) * C261 + (C10683 + C10682) * C48246 -
             (C5466 + C5467) * C262 - (C5468 + C5469) * C48234 +
             (C6268 + C6269) * C263 + (C6270 + C6271) * C48207) *
                C48095 * C10335 +
            ((C10690 + C10691) * C261 + (C10692 + C10693) * C48246 -
             (C7007 + C7006) * C262 - (C7009 + C7008) * C48234 +
             (C4605 * C1170 + C4601 * C1185 + C4606 * C1171 + C48194 * C1186) *
                 C263 +
             (C4605 * C1188 + C4601 * C1197 + C4606 * C1189 + C48194 * C1198) *
                 C48207) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C561 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48175 -
            (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
               C48095 * C10335 +
           ((C10678 + C10679) * C561 + (C10680 + C10681) * C48175 -
            (C5463 + C5462) * C562 - (C5465 + C5464) * C47951) *
               C48095 * C48227) *
              C557 +
          (((C4810 + C4811) * C562 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48175 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C561) +
            (C4812 + C4813) * C47951) *
               C48095 * C10335 +
           ((C5467 + C5466) * C562 -
            ((C10682 + C10683) * C48175 + (C10684 + C10685) * C561) +
            (C5469 + C5468) * C47951) *
               C48095 * C48227) *
              C558 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C561 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C48175 -
            (C4818 + C4819) * C562 - (C4820 + C4821) * C47951) *
               C48095 * C10335 +
           ((C10686 + C10687) * C561 + (C10688 + C10689) * C48175 -
            (C5471 + C5470) * C562 - (C5473 + C5472) * C47951) *
               C48095 * C48227) *
              C559 +
          (((C5110 + C5111) * C562 -
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C48175 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C561) +
            (C5112 + C5113) * C47951) *
               C48095 * C10335 +
           ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48194 * C830) *
                C562 -
            ((C4606 * C435 + C48194 * C451 + C4605 * C432 + C4601 * C449) *
                 C48175 +
             (C4606 * C421 + C48194 * C436 + C4605 * C419 + C4601 * C429) *
                 C561) +
            (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48194 * C836) *
                C47951) *
               C48095 * C48227) *
              C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C1303 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C1297 -
            (C4802 + C4803) * C1304 - (C4804 + C4805) * C1298 +
            (C4806 + C4807) * C1305 + (C4808 + C4809) * C1299 -
            (C5726 + C5727) * C1306 - (C5728 + C5729) * C48217) *
               C48095 * C10335 +
           ((C10678 + C10679) * C1303 + (C10680 + C10681) * C1297 -
            (C5463 + C5462) * C1304 - (C5465 + C5464) * C1298 +
            (C5913 + C5912) * C1305 + (C5915 + C5914) * C1299 -
            (C6419 + C6418) * C1306 - (C6421 + C6420) * C48217) *
               C48095 * C48227) *
              C48161 +
          (((C4810 + C4811) * C1304 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C1297 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C1303) +
            (C4812 + C4813) * C1298 - (C4814 + C4815) * C1305 -
            (C4816 + C4817) * C1299 + (C6062 + C6063) * C1306 +
            (C6064 + C6065) * C48217) *
               C48095 * C10335 +
           ((C5467 + C5466) * C1304 -
            ((C10682 + C10683) * C1297 + (C10684 + C10685) * C1303) +
            (C5469 + C5468) * C1298 - (C6269 + C6268) * C1305 -
            (C6271 + C6270) * C1299 +
            (C4605 * C1560 + C4601 * C1563 + C4606 * C1561 + C48194 * C1564) *
                C1306 +
            (C4605 * C1566 + C4601 * C1569 + C4606 * C1567 + C48194 * C1570) *
                C48217) *
               C48095 * C48227) *
              C47870) *
         C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C561 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C48175 -
             (C4802 + C4803) * C562 - (C4804 + C4805) * C47951) *
                C48095 * C10335 +
            ((C10678 + C10679) * C561 + (C10680 + C10681) * C48175 -
             (C5463 + C5462) * C562 - (C5465 + C5464) * C47951) *
                C48095 * C48227) *
               C258 +
           (((C4810 + C4811) * C562 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C48175 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C561) +
             (C4812 + C4813) * C47951) *
                C48095 * C10335 +
            ((C5467 + C5466) * C562 -
             ((C10682 + C10683) * C48175 + (C10684 + C10685) * C561) +
             (C5469 + C5468) * C47951) *
                C48095 * C48227) *
               C259 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C561 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C48175 -
             (C4818 + C4819) * C562 - (C4820 + C4821) * C47951) *
                C48095 * C10335 +
            ((C10686 + C10687) * C561 + (C10688 + C10689) * C48175 -
             (C5471 + C5470) * C562 - (C5473 + C5472) * C47951) *
                C48095 * C48227) *
               C48201) *
              C48176 +
          ((((C5462 + C5463) * C562 -
             ((C10681 + C10680) * C48175 + (C10679 + C10678) * C561) +
             (C5464 + C5465) * C47951) *
                C48095 * C10335 +
            ((C5917 + C5916) * C562 -
             ((C10694 + C10695) * C48175 + (C10696 + C10697) * C561) +
             (C5919 + C5918) * C47951) *
                C48095 * C48227) *
               C258 +
           (((C10685 + C10684) * C561 + (C10683 + C10682) * C48175 -
             (C5466 + C5467) * C562 - (C5468 + C5469) * C47951) *
                C48095 * C10335 +
            ((C10690 + C10691) * C561 + (C10692 + C10693) * C48175 -
             (C7007 + C7006) * C562 - (C7009 + C7008) * C47951) *
                C48095 * C48227) *
               C259 +
           (((C5470 + C5471) * C562 -
             ((C10689 + C10688) * C48175 + (C10687 + C10686) * C561) +
             (C5472 + C5473) * C47951) *
                C48095 * C10335 +
            ((C4605 * C1166 + C4601 * C1178 + C4606 * C2031 + C48194 * C2032) *
                 C562 -
             ((C10698 + C10699) * C48175 + (C10700 + C10701) * C561) +
             (C4605 * C1181 + C4601 * C1193 + C4606 * C2033 + C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C1303 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C1297 -
            (C4802 + C4803) * C1304 - (C4804 + C4805) * C1298 +
            (C4806 + C4807) * C1305 + (C4808 + C4809) * C1299 -
            (C5726 + C5727) * C1306 - (C5728 + C5729) * C48217) *
               C48095 * C10335 +
           ((C10678 + C10679) * C1303 + (C10680 + C10681) * C1297 -
            (C5463 + C5462) * C1304 - (C5465 + C5464) * C1298 +
            (C5913 + C5912) * C1305 + (C5915 + C5914) * C1299 -
            (C6419 + C6418) * C1306 - (C6421 + C6420) * C48217) *
               C48095 * C48227) *
              C47860 * C48176 +
          (((C5462 + C5463) * C1304 -
            ((C10681 + C10680) * C1297 + (C10679 + C10678) * C1303) +
            (C5464 + C5465) * C1298 - (C5912 + C5913) * C1305 -
            (C5914 + C5915) * C1299 + (C6418 + C6419) * C1306 +
            (C6420 + C6421) * C48217) *
               C48095 * C10335 +
           ((C5917 + C5916) * C1304 -
            ((C10694 + C10695) * C1297 + (C10696 + C10697) * C1303) +
            (C5919 + C5918) * C1298 - (C5921 + C5920) * C1305 -
            (C5923 + C5922) * C1299 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48194 * C5882) *
                C1306 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48194 * C5886) *
                C48217) *
               C48095 * C48227) *
              C47860 * C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C261 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48246 -
            (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
            (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C4605 * C420 + C4601 * C434 + C4606 * C417 + C48194 * C427) *
                C261 +
            (C4605 * C433 + C4601 * C450 + C4606 * C430 + C48194 * C447) *
                C48246 -
            (C5463 + C5462) * C262 - (C5465 + C5464) * C48234 +
            (C5913 + C5912) * C263 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C258 +
          (((C4810 + C4811) * C262 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48246 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C261) +
            (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
            (C4816 + C4817) * C48207) *
               C48095 * C10335 +
           ((C5467 + C5466) * C262 -
            ((C4606 * C431 + C48194 * C448 + C4605 * C430 + C4601 * C447) *
                 C48246 +
             (C4606 * C418 + C48194 * C428 + C4605 * C417 + C4601 * C427) *
                 C261) +
            (C5469 + C5468) * C48234 - (C6269 + C6268) * C263 -
            (C6271 + C6270) * C48207) *
               C48095 * C48227) *
              C259 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C261 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C48246 -
            (C4818 + C4819) * C262 - (C4820 + C4821) * C48234 +
            (C4822 + C4823) * C263 + (C4824 + C4825) * C48207) *
               C48095 * C10335 +
           ((C4605 * C418 + C4601 * C428 + C4606 * C419 + C48194 * C429) *
                C261 +
            (C4605 * C431 + C4601 * C448 + C4606 * C432 + C48194 * C449) *
                C48246 -
            (C5471 + C5470) * C262 - (C5473 + C5472) * C48234 +
            (C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                C263 +
            (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47888) *
               C48095 * C10335 +
           ((C4605 * C420 + C4601 * C434 + C4606 * C417 + C48194 * C427) *
                C116 +
            (C4605 * C433 + C4601 * C450 + C4606 * C430 + C48194 * C447) *
                C47888) *
               C48095 * C48227) *
              C107 -
          (((C4606 * C431 + C48194 * C448 + C4605 * C430 + C4601 * C447) *
                C47888 +
            (C4606 * C418 + C48194 * C428 + C4605 * C417 + C4601 * C427) *
                C116) *
               C48095 * C48227 +
           ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                C47888 +
            (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C48095 * C10335) *
              C108 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C47888) *
               C48095 * C10335 +
           ((C4605 * C418 + C4601 * C428 + C4606 * C419 + C48194 * C429) *
                C116 +
            (C4605 * C431 + C4601 * C448 + C4606 * C432 + C48194 * C449) *
                C47888) *
               C48095 * C48227) *
              C109 -
          (((C4606 * C435 + C48194 * C451 + C4605 * C432 + C4601 * C449) *
                C47888 +
            (C4606 * C421 + C48194 * C436 + C4605 * C419 + C4601 * C429) *
                C116) *
               C48095 * C48227 +
           ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                C47888 +
            (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C48095 * C10335) *
              C110 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48194 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48194 * C143) *
                C47888) *
               C48095 * C10335 +
           ((C4605 * C421 + C4601 * C436 + C4606 * C667 + C48194 * C668) *
                C116 +
            (C4605 * C435 + C4601 * C451 + C4606 * C669 + C48194 * C670) *
                C47888) *
               C48095 * C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C258 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C259 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C10335 +
            ((C10686 + C10687) * C116 + (C10688 + C10689) * C47888) * C48095 *
                C48227) *
               C48201) *
              C48247 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C259 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C258 -
           (((C10698 + C10699) * C47888 + (C10700 + C10701) * C116) * C48095 *
                C48227 +
            ((C10689 + C10688) * C47888 + (C10687 + C10686) * C116) * C48095 *
                C10335) *
               C48201) *
              C48236 +
          ((((C10697 + C10696) * C116 + (C10695 + C10694) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48194 * C1871) *
                 C116 +
             (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48194 * C1880) *
                 C47888) *
                C48095 * C48227) *
               C258 -
           (((C4606 * C1867 + C48194 * C1879 + C4605 * C1868 + C4601 * C1880) *
                 C47888 +
             (C4606 * C1861 + C48194 * C1870 + C4605 * C1862 + C4601 * C1871) *
                 C116) *
                C48095 * C48227 +
            ((C10693 + C10692) * C47888 + (C10691 + C10690) * C116) * C48095 *
                C10335) *
               C259 +
           (((C10701 + C10700) * C116 + (C10699 + C10698) * C47888) * C48095 *
                C10335 +
            ((C4605 * C1861 + C4601 * C1870 + C4606 * C2137 + C48194 * C2138) *
                 C116 +
             (C4605 * C1867 + C4601 * C1879 + C4606 * C2139 + C48194 * C2140) *
                 C47888) *
                C48095 * C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C10678 + C10679) * C953 + (C10680 + C10681) * C947 -
            (C5463 + C5462) * C954 - (C5465 + C5464) * C948 +
            (C5913 + C5912) * C955 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C48243 +
          (((C4810 + C4811) * C954 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C947 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C953) +
            (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
            (C4816 + C4817) * C48207) *
               C48095 * C10335 +
           ((C5467 + C5466) * C954 -
            ((C10682 + C10683) * C947 + (C10684 + C10685) * C953) +
            (C5469 + C5468) * C948 - (C6269 + C6268) * C955 -
            (C6271 + C6270) * C48207) *
               C48095 * C48227) *
              C48230 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C953 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C947 -
            (C4818 + C4819) * C954 - (C4820 + C4821) * C948 +
            (C4822 + C4823) * C955 + (C4824 + C4825) * C48207) *
               C48095 * C10335 +
           ((C10686 + C10687) * C953 + (C10688 + C10689) * C947 -
            (C5471 + C5470) * C954 - (C5473 + C5472) * C948 +
            (C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                C955 +
            (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
               C1024 +
           (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
               C1018 -
           (C4802 + C4803) * C1025 - (C4804 + C4805) * C1019 +
           (C4806 + C4807) * C1026 + (C4808 + C4809) * C1020 -
           (C5726 + C5727) * C1027 - (C5728 + C5729) * C1021 +
           (C5730 + C5731) * C1028 + (C5732 + C5733) * C1022) *
              C48095 * C10335 +
          ((C10678 + C10679) * C1024 + (C10680 + C10681) * C1018 -
           (C5463 + C5462) * C1025 - (C5465 + C5464) * C1019 +
           (C5913 + C5912) * C1026 + (C5915 + C5914) * C1020 -
           (C6419 + C6418) * C1027 - (C6421 + C6420) * C1021 +
           (C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48194 * C6404) *
               C1028 +
           (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48194 * C6408) *
               C1022) *
              C48095 * C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C10678 + C10679) * C953 + (C10680 + C10681) * C947 -
            (C5463 + C5462) * C954 - (C5465 + C5464) * C948 +
            (C5913 + C5912) * C955 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C47860 * C48247 +
          (((C5462 + C5463) * C954 -
            ((C10681 + C10680) * C947 + (C10679 + C10678) * C953) +
            (C5464 + C5465) * C948 - (C5912 + C5913) * C955 -
            (C5914 + C5915) * C48207) *
               C48095 * C10335 +
           ((C5917 + C5916) * C954 -
            ((C10694 + C10695) * C947 + (C10696 + C10697) * C953) +
            (C5919 + C5918) * C948 - (C5921 + C5920) * C955 -
            (C5923 + C5922) * C48207) *
               C48095 * C48227) *
              C47860 * C48236 +
          (((C10697 + C10696) * C953 + (C10695 + C10694) * C947 -
            (C5916 + C5917) * C954 - (C5918 + C5919) * C948 +
            (C5920 + C5921) * C955 + (C5922 + C5923) * C48207) *
               C48095 * C10335 +
           ((C4605 * C1863 + C4601 * C1872 + C4606 * C1862 + C48194 * C1871) *
                C953 +
            (C4605 * C1869 + C4601 * C1881 + C4606 * C1868 + C48194 * C1880) *
                C947 -
            (C7287 + C7286) * C954 - (C7289 + C7288) * C948 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48194 * C7272) *
                C955 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48194 * C7276) *
                C48207) *
               C48095 * C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C10335 +
            ((C10678 + C10679) * C116 + (C10680 + C10681) * C47888) * C48095 *
                C48227) *
               C557 -
           (((C10682 + C10683) * C47888 + (C10684 + C10685) * C116) * C48095 *
                C48227 +
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C47888 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48095 * C10335) *
               C558 +
           (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C10335 +
            ((C10686 + C10687) * C116 + (C10688 + C10689) * C47888) * C48095 *
                C48227) *
               C559 -
           (((C10970 + C10971) * C47888 + (C10972 + C10973) * C116) * C48095 *
                C48227 +
            ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                 C47888 +
             (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C48095 * C10335) *
               C48211) *
              C48176 +
          ((((C10685 + C10684) * C116 + (C10683 + C10682) * C47888) * C48095 *
                C10335 +
            ((C10690 + C10691) * C116 + (C10692 + C10693) * C47888) * C48095 *
                C48227) *
               C558 -
           (((C10694 + C10695) * C47888 + (C10696 + C10697) * C116) * C48095 *
                C48227 +
            ((C10681 + C10680) * C47888 + (C10679 + C10678) * C116) * C48095 *
                C10335) *
               C557 -
           (((C10698 + C10699) * C47888 + (C10700 + C10701) * C116) * C48095 *
                C48227 +
            ((C10689 + C10688) * C47888 + (C10687 + C10686) * C116) * C48095 *
                C10335) *
               C559 +
           (((C10973 + C10972) * C116 + (C10971 + C10970) * C47888) * C48095 *
                C10335 +
            ((C4605 * C425 + C4601 * C444 + C4606 * C426 + C48194 * C445) *
                 C116 +
             (C4605 * C443 + C4601 * C455 + C4606 * C446 + C48194 * C456) *
                 C47888) *
                C48095 * C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                 C953 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                 C947 -
             (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
             (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
                C48095 * C10335 +
            ((C10678 + C10679) * C953 + (C10680 + C10681) * C947 -
             (C5463 + C5462) * C954 - (C5465 + C5464) * C948 +
             (C5913 + C5912) * C955 + (C5915 + C5914) * C48207) *
                C48095 * C48227) *
               C48161 +
           (((C4810 + C4811) * C954 -
             ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                  C947 +
              (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                  C953) +
             (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
             (C4816 + C4817) * C48207) *
                C48095 * C10335 +
            ((C5467 + C5466) * C954 -
             ((C10682 + C10683) * C947 + (C10684 + C10685) * C953) +
             (C5469 + C5468) * C948 - (C6269 + C6268) * C955 -
             (C6271 + C6270) * C48207) *
                C48095 * C48227) *
               C47870) *
              C48176 +
          ((((C5462 + C5463) * C954 -
             ((C10681 + C10680) * C947 + (C10679 + C10678) * C953) +
             (C5464 + C5465) * C948 - (C5912 + C5913) * C955 -
             (C5914 + C5915) * C48207) *
                C48095 * C10335 +
            ((C5917 + C5916) * C954 -
             ((C10694 + C10695) * C947 + (C10696 + C10697) * C953) +
             (C5919 + C5918) * C948 - (C5921 + C5920) * C955 -
             (C5923 + C5922) * C48207) *
                C48095 * C48227) *
               C48161 +
           (((C10685 + C10684) * C953 + (C10683 + C10682) * C947 -
             (C5466 + C5467) * C954 - (C5468 + C5469) * C948 +
             (C6268 + C6269) * C955 + (C6270 + C6271) * C48207) *
                C48095 * C10335 +
            ((C10690 + C10691) * C953 + (C10692 + C10693) * C947 -
             (C7007 + C7006) * C954 - (C7009 + C7008) * C948 +
             (C4605 * C1170 + C4601 * C1185 + C4606 * C1171 + C48194 * C1186) *
                 C955 +
             (C4605 * C1188 + C4601 * C1197 + C4606 * C1189 + C48194 * C1198) *
                 C48207) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C47888) *
               C48095 * C10335 +
           ((C4605 * C420 + C4601 * C434 + C4606 * C417 + C48194 * C427) *
                C116 +
            (C4605 * C433 + C4601 * C450 + C4606 * C430 + C48194 * C447) *
                C47888) *
               C48095 * C48227) *
              C107 -
          (((C4606 * C431 + C48194 * C448 + C4605 * C430 + C4601 * C447) *
                C47888 +
            (C4606 * C418 + C48194 * C428 + C4605 * C417 + C4601 * C427) *
                C116) *
               C48095 * C48227 +
           ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                C47888 +
            (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C48095 * C10335) *
              C108 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C47888) *
               C48095 * C10335 +
           ((C4605 * C418 + C4601 * C428 + C4606 * C419 + C48194 * C429) *
                C116 +
            (C4605 * C431 + C4601 * C448 + C4606 * C432 + C48194 * C449) *
                C47888) *
               C48095 * C48227) *
              C109 -
          (((C4606 * C435 + C48194 * C451 + C4605 * C432 + C4601 * C449) *
                C47888 +
            (C4606 * C421 + C48194 * C436 + C4605 * C419 + C4601 * C429) *
                C116) *
               C48095 * C48227 +
           ((C4606 * C133 + C48194 * C142 + C4605 * C130 + C4601 * C141) *
                C47888 +
            (C4606 * C121 + C48194 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C48095 * C10335) *
              C110 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48194 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48194 * C143) *
                C47888) *
               C48095 * C10335 +
           ((C4605 * C421 + C4601 * C436 + C4606 * C667 + C48194 * C668) *
                C116 +
            (C4605 * C435 + C4601 * C451 + C4606 * C669 + C48194 * C670) *
                C47888) *
               C48095 * C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C261 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C48246 -
            (C4802 + C4803) * C262 - (C4804 + C4805) * C48234 +
            (C4806 + C4807) * C263 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C4605 * C420 + C4601 * C434 + C4606 * C417 + C48194 * C427) *
                C261 +
            (C4605 * C433 + C4601 * C450 + C4606 * C430 + C48194 * C447) *
                C48246 -
            (C5463 + C5462) * C262 - (C5465 + C5464) * C48234 +
            (C5913 + C5912) * C263 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C258 +
          (((C4810 + C4811) * C262 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C48246 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C261) +
            (C4812 + C4813) * C48234 - (C4814 + C4815) * C263 -
            (C4816 + C4817) * C48207) *
               C48095 * C10335 +
           ((C5467 + C5466) * C262 -
            ((C4606 * C431 + C48194 * C448 + C4605 * C430 + C4601 * C447) *
                 C48246 +
             (C4606 * C418 + C48194 * C428 + C4605 * C417 + C4601 * C427) *
                 C261) +
            (C5469 + C5468) * C48234 - (C6269 + C6268) * C263 -
            (C6271 + C6270) * C48207) *
               C48095 * C48227) *
              C259 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C261 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C48246 -
            (C4818 + C4819) * C262 - (C4820 + C4821) * C48234 +
            (C4822 + C4823) * C263 + (C4824 + C4825) * C48207) *
               C48095 * C10335 +
           ((C4605 * C418 + C4601 * C428 + C4606 * C419 + C48194 * C429) *
                C261 +
            (C4605 * C431 + C4601 * C448 + C4606 * C432 + C48194 * C449) *
                C48246 -
            (C5471 + C5470) * C262 - (C5473 + C5472) * C48234 +
            (C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                C263 +
            (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
                C953 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
                C947 -
            (C4802 + C4803) * C954 - (C4804 + C4805) * C948 +
            (C4806 + C4807) * C955 + (C4808 + C4809) * C48207) *
               C48095 * C10335 +
           ((C10678 + C10679) * C953 + (C10680 + C10681) * C947 -
            (C5463 + C5462) * C954 - (C5465 + C5464) * C948 +
            (C5913 + C5912) * C955 + (C5915 + C5914) * C48207) *
               C48095 * C48227) *
              C48243 +
          (((C4810 + C4811) * C954 -
            ((C4606 * C129 + C48194 * C140 + C4605 * C128 + C4601 * C139) *
                 C947 +
             (C4606 * C119 + C48194 * C126 + C4605 * C118 + C4601 * C125) *
                 C953) +
            (C4812 + C4813) * C948 - (C4814 + C4815) * C955 -
            (C4816 + C4817) * C48207) *
               C48095 * C10335 +
           ((C5467 + C5466) * C954 -
            ((C10682 + C10683) * C947 + (C10684 + C10685) * C953) +
            (C5469 + C5468) * C948 - (C6269 + C6268) * C955 -
            (C6271 + C6270) * C48207) *
               C48095 * C48227) *
              C48230 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48194 * C131) *
                C953 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48194 * C141) *
                C947 -
            (C4818 + C4819) * C954 - (C4820 + C4821) * C948 +
            (C4822 + C4823) * C955 + (C4824 + C4825) * C48207) *
               C48095 * C10335 +
           ((C10686 + C10687) * C953 + (C10688 + C10689) * C947 -
            (C5471 + C5470) * C954 - (C5473 + C5472) * C948 +
            (C4605 * C1163 + C4601 * C1172 + C4606 * C1457 + C48194 * C1458) *
                C955 +
            (C4605 * C1175 + C4601 * C1190 + C4606 * C1459 + C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48194 * C125) *
               C1024 +
           (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48194 * C139) *
               C1018 -
           (C4802 + C4803) * C1025 - (C4804 + C4805) * C1019 +
           (C4806 + C4807) * C1026 + (C4808 + C4809) * C1020 -
           (C5726 + C5727) * C1027 - (C5728 + C5729) * C1021 +
           (C5730 + C5731) * C1028 + (C5732 + C5733) * C1022) *
              C48095 * C10335 +
          ((C10678 + C10679) * C1024 + (C10680 + C10681) * C1018 -
           (C5463 + C5462) * C1025 - (C5465 + C5464) * C1019 +
           (C5913 + C5912) * C1026 + (C5915 + C5914) * C1020 -
           (C6419 + C6418) * C1027 - (C6421 + C6420) * C1021 +
           (C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48194 * C6404) *
               C1028 +
           (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48194 * C6408) *
               C1022) *
              C48095 * C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C47047 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47947 -
            (C16114 + C16115) * C47039 - (C16116 + C16117) * C47954 +
            (C16118 + C16119) * C47053 + (C16120 + C16121) * C2723) *
               C15915 +
           ((C16115 + C16114) * C47047 + (C16117 + C16116) * C47947 -
            (C16119 + C16118) * C47039 - (C16121 + C16120) * C47954 +
            (C17031 + C17030) * C47053 + (C17033 + C17032) * C2723) *
               C48225) *
              C48110 * C47865 +
          (((C16122 + C16123) * C47039 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47947 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C47047) +
            (C16124 + C16125) * C47954 - (C16126 + C16127) * C47053 -
            (C16128 + C16129) * C2723) *
               C15915 +
           ((C16127 + C16126) * C47039 -
            ((C16125 + C16124) * C47947 + (C16123 + C16122) * C47047) +
            (C16129 + C16128) * C47954 - (C17359 + C17358) * C47053 -
            (C17361 + C17360) * C2723) *
               C48225) *
              C48110 * C47873 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C47047 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C47947 -
            (C16130 + C16131) * C47039 - (C16132 + C16133) * C47954 +
            (C16134 + C16135) * C47053 + (C16136 + C16137) * C2723) *
               C15915 +
           ((C16131 + C16130) * C47047 + (C16133 + C16132) * C47947 -
            (C16135 + C16134) * C47039 - (C16137 + C16136) * C47954 +
            (C15917 * C1029 + C15913 * C1035 + C15918 * C1307 +
             C48194 * C1308) *
                C47053 +
            (C15917 * C1038 + C15913 * C1047 + C15918 * C1309 +
             C48194 * C1310) *
                C2723) *
               C48225) *
              C48110 * C2726) *
         C47906) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C47047 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47947 -
             (C16114 + C16115) * C47039 - (C16116 + C16117) * C47954 +
             (C16118 + C16119) * C47053 + (C16120 + C16121) * C2723) *
                C15915 +
            ((C16115 + C16114) * C47047 + (C16117 + C16116) * C47947 -
             (C16119 + C16118) * C47039 - (C16121 + C16120) * C47954 +
             (C17031 + C17030) * C47053 + (C17033 + C17032) * C2723) *
                C48225) *
               C48110 * C2459 +
           (((C16122 + C16123) * C47039 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C47947 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C47047) +
             (C16124 + C16125) * C47954 - (C16126 + C16127) * C47053 -
             (C16128 + C16129) * C2723) *
                C15915 +
            ((C16127 + C16126) * C47039 -
             ((C16125 + C16124) * C47947 + (C16123 + C16122) * C47047) +
             (C16129 + C16128) * C47954 - (C17359 + C17358) * C47053 -
             (C17361 + C17360) * C2723) *
                C48225) *
               C48110 * C47870) *
              C48176 +
          ((((C16774 + C16775) * C47039 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C47947 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C47047) +
             (C16776 + C16777) * C47954 - (C17208 + C17209) * C47053 -
             (C17210 + C17211) * C2723) *
                C15915 +
            ((C17209 + C17208) * C47039 -
             ((C16777 + C16776) * C47947 + (C16775 + C16774) * C47047) +
             (C17211 + C17210) * C47954 - (C17707 + C17706) * C47053 -
             (C17709 + C17708) * C2723) *
                C48225) *
               C48110 * C2459 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C47047 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47947 -
             (C16778 + C16779) * C47039 - (C16780 + C16781) * C47954 +
             (C17564 + C17565) * C47053 + (C17566 + C17567) * C2723) *
                C15915 +
            ((C16779 + C16778) * C47047 + (C16781 + C16780) * C47947 -
             (C17565 + C17564) * C47039 - (C17567 + C17566) * C47954 +
             (C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48194 * C1564) *
                 C47053 +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48194 * C1570) *
                 C2723) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2461 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48253 -
            (C16114 + C16115) * C2462 - (C16116 + C16117) * C48249 +
            (C16118 + C16119) * C2463 + (C16120 + C16121) * C48239 -
            (C17030 + C17031) * C2464 - (C17032 + C17033) * C48217) *
               C15915 +
           ((C16115 + C16114) * C2461 + (C16117 + C16116) * C48253 -
            (C16119 + C16118) * C2462 - (C16121 + C16120) * C48249 +
            (C17031 + C17030) * C2463 + (C17033 + C17032) * C48239 -
            (C17035 + C17034) * C2464 - (C17037 + C17036) * C48217) *
               C48225) *
              C48110 * C2459 +
          (((C16122 + C16123) * C2462 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48253 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C2461) +
            (C16124 + C16125) * C48249 - (C16126 + C16127) * C2463 -
            (C16128 + C16129) * C48239 + (C17358 + C17359) * C2464 +
            (C17360 + C17361) * C48217) *
               C15915 +
           ((C16127 + C16126) * C2462 -
            ((C16125 + C16124) * C48253 + (C16123 + C16122) * C2461) +
            (C16129 + C16128) * C48249 - (C17359 + C17358) * C2463 -
            (C17361 + C17360) * C48239 +
            (C15917 * C1033 + C15913 * C1042 + C15918 * C1034 +
             C48194 * C1043) *
                C2464 +
            (C15917 * C1045 + C15913 * C1051 + C15918 * C1046 +
             C48194 * C1052) *
                C48217) *
               C48225) *
              C48110 * C47870) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2355 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C2349 -
            (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
               C15915 +
           ((C16115 + C16114) * C2355 + (C16117 + C16116) * C2349 -
            (C16119 + C16118) * C2356 - (C16121 + C16120) * C47951) *
               C48225) *
              C48110 * C48252 +
          (((C16122 + C16123) * C2356 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C2349 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C2355) +
            (C16124 + C16125) * C47951) *
               C15915 +
           ((C16127 + C16126) * C2356 -
            ((C16125 + C16124) * C2349 + (C16123 + C16122) * C2355) +
            (C16129 + C16128) * C47951) *
               C48225) *
              C48110 * C48245 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C2355 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C2349 -
            (C16130 + C16131) * C2356 - (C16132 + C16133) * C47951) *
               C15915 +
           ((C16131 + C16130) * C2355 + (C16133 + C16132) * C2349 -
            (C16135 + C16134) * C2356 - (C16137 + C16136) * C47951) *
               C48225) *
              C48110 * C48232 +
          (((C16422 + C16423) * C2356 -
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C2349 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C2355) +
            (C16424 + C16425) * C47951) *
               C15915 +
           ((C15917 * C271 + C15913 * C288 + C15918 * C273 + C48194 * C292) *
                C2356 -
            ((C16425 + C16424) * C2349 + (C16423 + C16422) * C2355) +
            (C15917 * C289 + C15913 * C301 + C15918 * C293 + C48194 * C303) *
                C47951) *
               C48225) *
              C48110 * C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C2355 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C2349 -
             (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
                C15915 +
            ((C16115 + C16114) * C2355 + (C16117 + C16116) * C2349 -
             (C16119 + C16118) * C2356 - (C16121 + C16120) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C16122 + C16123) * C2356 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C2349 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C2355) +
             (C16124 + C16125) * C47951) *
                C15915 +
            ((C16127 + C16126) * C2356 -
             ((C16125 + C16124) * C2349 + (C16123 + C16122) * C2355) +
             (C16129 + C16128) * C47951) *
                C48225) *
               C48110 * C47870) *
              C48247 +
          ((((C16774 + C16775) * C2356 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C2349 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C2355) +
             (C16776 + C16777) * C47951) *
                C15915 +
            ((C17209 + C17208) * C2356 -
             ((C16777 + C16776) * C2349 + (C16775 + C16774) * C2355) +
             (C17211 + C17210) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C2355 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C2349 -
             (C16778 + C16779) * C2356 - (C16780 + C16781) * C47951) *
                C15915 +
            ((C16779 + C16778) * C2355 + (C16781 + C16780) * C2349 -
             (C17565 + C17564) * C2356 - (C17567 + C17566) * C47951) *
                C48225) *
               C48110 * C47870) *
              C48236 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C2355 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C2349 -
             (C17212 + C17213) * C2356 - (C17214 + C17215) * C47951) *
                C15915 +
            ((C17213 + C17212) * C2355 + (C17215 + C17214) * C2349 -
             (C17217 + C17216) * C2356 - (C17219 + C17218) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C18286 + C18287) * C2356 -
             ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                  C2349 +
              (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                  C2355) +
             (C18288 + C18289) * C47951) *
                C15915 +
            ((C15917 * C1170 + C15913 * C1185 + C15918 * C1171 +
              C48194 * C1186) *
                 C2356 -
             ((C18289 + C18288) * C2349 + (C18287 + C18286) * C2355) +
             (C15917 * C1188 + C15913 * C1197 + C15918 * C1189 +
              C48194 * C1198) *
                 C47951) *
                C48225) *
               C48110 * C47870) *
              C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C2355 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C2349 -
             (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
                C15915 +
            ((C16115 + C16114) * C2355 + (C16117 + C16116) * C2349 -
             (C16119 + C16118) * C2356 - (C16121 + C16120) * C47951) *
                C48225) *
               C48110 * C47865 +
           (((C16122 + C16123) * C2356 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C2349 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C2355) +
             (C16124 + C16125) * C47951) *
                C15915 +
            ((C16127 + C16126) * C2356 -
             ((C16125 + C16124) * C2349 + (C16123 + C16122) * C2355) +
             (C16129 + C16128) * C47951) *
                C48225) *
               C48110 * C47873 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C2355 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C2349 -
             (C16130 + C16131) * C2356 - (C16132 + C16133) * C47951) *
                C15915 +
            ((C16131 + C16130) * C2355 + (C16133 + C16132) * C2349 -
             (C16135 + C16134) * C2356 - (C16137 + C16136) * C47951) *
                C48225) *
               C48110 * C2726) *
              C48176 +
          ((((C16774 + C16775) * C2356 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C2349 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C2355) +
             (C16776 + C16777) * C47951) *
                C15915 +
            ((C17209 + C17208) * C2356 -
             ((C16777 + C16776) * C2349 + (C16775 + C16774) * C2355) +
             (C17211 + C17210) * C47951) *
                C48225) *
               C48110 * C47865 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C2355 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C2349 -
             (C16778 + C16779) * C2356 - (C16780 + C16781) * C47951) *
                C15915 +
            ((C16779 + C16778) * C2355 + (C16781 + C16780) * C2349 -
             (C17565 + C17564) * C2356 - (C17567 + C17566) * C47951) *
                C48225) *
               C48110 * C47873 +
           (((C16782 + C16783) * C2356 -
             ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                  C2349 +
              (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                  C2355) +
             (C16784 + C16785) * C47951) *
                C15915 +
            ((C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
              C48194 * C1458) *
                 C2356 -
             ((C16785 + C16784) * C2349 + (C16783 + C16782) * C2355) +
             (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
              C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C2726) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2355 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C2349 -
            (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
               C15915 +
           ((C16115 + C16114) * C2355 + (C16117 + C16116) * C2349 -
            (C16119 + C16118) * C2356 - (C16121 + C16120) * C47951) *
               C48225) *
              C48110 * C48252 +
          (((C16122 + C16123) * C2356 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C2349 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C2355) +
            (C16124 + C16125) * C47951) *
               C15915 +
           ((C16127 + C16126) * C2356 -
            ((C16125 + C16124) * C2349 + (C16123 + C16122) * C2355) +
            (C16129 + C16128) * C47951) *
               C48225) *
              C48110 * C48245 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C2355 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C2349 -
            (C16130 + C16131) * C2356 - (C16132 + C16133) * C47951) *
               C15915 +
           ((C16131 + C16130) * C2355 + (C16133 + C16132) * C2349 -
            (C16135 + C16134) * C2356 - (C16137 + C16136) * C47951) *
               C48225) *
              C48110 * C48232 +
          (((C16422 + C16423) * C2356 -
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C2349 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C2355) +
            (C16424 + C16425) * C47951) *
               C15915 +
           ((C15917 * C271 + C15913 * C288 + C15918 * C273 + C48194 * C292) *
                C2356 -
            ((C16425 + C16424) * C2349 + (C16423 + C16422) * C2355) +
            (C15917 * C289 + C15913 * C301 + C15918 * C293 + C48194 * C303) *
                C47951) *
               C48225) *
              C48110 * C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2461 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48253 -
            (C16114 + C16115) * C2462 - (C16116 + C16117) * C48249 +
            (C16118 + C16119) * C2463 + (C16120 + C16121) * C48239 -
            (C17030 + C17031) * C2464 - (C17032 + C17033) * C48217) *
               C15915 +
           ((C16115 + C16114) * C2461 + (C16117 + C16116) * C48253 -
            (C16119 + C16118) * C2462 - (C16121 + C16120) * C48249 +
            (C17031 + C17030) * C2463 + (C17033 + C17032) * C48239 -
            (C17035 + C17034) * C2464 - (C17037 + C17036) * C48217) *
               C48225) *
              C48110 * C2459 +
          (((C16122 + C16123) * C2462 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48253 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C2461) +
            (C16124 + C16125) * C48249 - (C16126 + C16127) * C2463 -
            (C16128 + C16129) * C48239 + (C17358 + C17359) * C2464 +
            (C17360 + C17361) * C48217) *
               C15915 +
           ((C16127 + C16126) * C2462 -
            ((C16125 + C16124) * C48253 + (C16123 + C16122) * C2461) +
            (C16129 + C16128) * C48249 - (C17359 + C17358) * C2463 -
            (C17361 + C17360) * C48239 +
            (C15917 * C1033 + C15913 * C1042 + C15918 * C1034 +
             C48194 * C1043) *
                C2464 +
            (C15917 * C1045 + C15913 * C1051 + C15918 * C1046 +
             C48194 * C1052) *
                C48217) *
               C48225) *
              C48110 * C47870) *
         C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C47047 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47947 -
             (C16114 + C16115) * C47039 - (C16116 + C16117) * C47954 +
             (C16118 + C16119) * C47053 + (C16120 + C16121) * C2723) *
                C15915 +
            ((C16115 + C16114) * C47047 + (C16117 + C16116) * C47947 -
             (C16119 + C16118) * C47039 - (C16121 + C16120) * C47954 +
             (C17031 + C17030) * C47053 + (C17033 + C17032) * C2723) *
                C48225) *
               C48110 * C48161 +
           (((C16122 + C16123) * C47039 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C47947 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C47047) +
             (C16124 + C16125) * C47954 - (C16126 + C16127) * C47053 -
             (C16128 + C16129) * C2723) *
                C15915 +
            ((C16127 + C16126) * C47039 -
             ((C16125 + C16124) * C47947 + (C16123 + C16122) * C47047) +
             (C16129 + C16128) * C47954 - (C17359 + C17358) * C47053 -
             (C17361 + C17360) * C2723) *
                C48225) *
               C48110 * C47870) *
              C3120 +
          ((((C16774 + C16775) * C47039 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C47947 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C47047) +
             (C16776 + C16777) * C47954 - (C17208 + C17209) * C47053 -
             (C17210 + C17211) * C2723) *
                C15915 +
            ((C17209 + C17208) * C47039 -
             ((C16777 + C16776) * C47947 + (C16775 + C16774) * C47047) +
             (C17211 + C17210) * C47954 - (C17707 + C17706) * C47053 -
             (C17709 + C17708) * C2723) *
                C48225) *
               C48110 * C48161 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C47047 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47947 -
             (C16778 + C16779) * C47039 - (C16780 + C16781) * C47954 +
             (C17564 + C17565) * C47053 + (C17566 + C17567) * C2723) *
                C15915 +
            ((C16779 + C16778) * C47047 + (C16781 + C16780) * C47947 -
             (C17565 + C17564) * C47039 - (C17567 + C17566) * C47954 +
             (C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48194 * C1564) *
                 C47053 +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48194 * C1570) *
                 C2723) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C47047 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47947 -
            (C16114 + C16115) * C47039 - (C16116 + C16117) * C47954 +
            (C16118 + C16119) * C47053 + (C16120 + C16121) * C2723) *
               C15915 +
           ((C16115 + C16114) * C47047 + (C16117 + C16116) * C47947 -
            (C16119 + C16118) * C47039 - (C16121 + C16120) * C47954 +
            (C17031 + C17030) * C47053 + (C17033 + C17032) * C2723) *
               C48225) *
              C48110 * C47860 * C47989 +
          (((C16774 + C16775) * C47039 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47947 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C47047) +
            (C16776 + C16777) * C47954 - (C17208 + C17209) * C47053 -
            (C17210 + C17211) * C2723) *
               C15915 +
           ((C17209 + C17208) * C47039 -
            ((C16777 + C16776) * C47947 + (C16775 + C16774) * C47047) +
            (C17211 + C17210) * C47954 - (C17707 + C17706) * C47053 -
            (C17709 + C17708) * C2723) *
               C48225) *
              C48110 * C47860 * C47996 +
          (((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                C47047 +
            (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                C47947 -
            (C17212 + C17213) * C47039 - (C17214 + C17215) * C47954 +
            (C17216 + C17217) * C47053 + (C17218 + C17219) * C2723) *
               C15915 +
           ((C17213 + C17212) * C47047 + (C17215 + C17214) * C47947 -
            (C17217 + C17216) * C47039 - (C17219 + C17218) * C47954 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48194 * C5882) *
                C47053 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48194 * C5886) *
                C2723) *
               C48225) *
              C48110 * C47860 * C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2461 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48253 -
            (C16114 + C16115) * C2462 - (C16116 + C16117) * C48249 +
            (C16118 + C16119) * C2463 + (C16120 + C16121) * C48239 -
            (C17030 + C17031) * C2464 - (C17032 + C17033) * C48217) *
               C15915 +
           ((C16115 + C16114) * C2461 + (C16117 + C16116) * C48253 -
            (C16119 + C16118) * C2462 - (C16121 + C16120) * C48249 +
            (C17031 + C17030) * C2463 + (C17033 + C17032) * C48239 -
            (C17035 + C17034) * C2464 - (C17037 + C17036) * C48217) *
               C48225) *
              C48110 * C47860 * C3120 +
          (((C16774 + C16775) * C2462 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C48253 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C2461) +
            (C16776 + C16777) * C48249 - (C17208 + C17209) * C2463 -
            (C17210 + C17211) * C48239 + (C17706 + C17707) * C2464 +
            (C17708 + C17709) * C48217) *
               C15915 +
           ((C17209 + C17208) * C2462 -
            ((C16777 + C16776) * C48253 + (C16775 + C16774) * C2461) +
            (C17211 + C17210) * C48249 - (C17707 + C17706) * C2463 -
            (C17709 + C17708) * C48239 +
            (C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48194 * C6404) *
                C2464 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48194 * C6408) *
                C48217) *
               C48225) *
              C48110 * C47860 * C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C2355 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C2349 -
             (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
                C15915 +
            ((C16115 + C16114) * C2355 + (C16117 + C16116) * C2349 -
             (C16119 + C16118) * C2356 - (C16121 + C16120) * C47951) *
                C48225) *
               C48110 * C48243 +
           (((C16122 + C16123) * C2356 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C2349 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C2355) +
             (C16124 + C16125) * C47951) *
                C15915 +
            ((C16127 + C16126) * C2356 -
             ((C16125 + C16124) * C2349 + (C16123 + C16122) * C2355) +
             (C16129 + C16128) * C47951) *
                C48225) *
               C48110 * C48230 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C2355 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C2349 -
             (C16130 + C16131) * C2356 - (C16132 + C16133) * C47951) *
                C15915 +
            ((C16131 + C16130) * C2355 + (C16133 + C16132) * C2349 -
             (C16135 + C16134) * C2356 - (C16137 + C16136) * C47951) *
                C48225) *
               C48110 * C48201) *
              C3120 +
          ((((C16774 + C16775) * C2356 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C2349 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C2355) +
             (C16776 + C16777) * C47951) *
                C15915 +
            ((C17209 + C17208) * C2356 -
             ((C16777 + C16776) * C2349 + (C16775 + C16774) * C2355) +
             (C17211 + C17210) * C47951) *
                C48225) *
               C48110 * C48243 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C2355 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C2349 -
             (C16778 + C16779) * C2356 - (C16780 + C16781) * C47951) *
                C15915 +
            ((C16779 + C16778) * C2355 + (C16781 + C16780) * C2349 -
             (C17565 + C17564) * C2356 - (C17567 + C17566) * C47951) *
                C48225) *
               C48110 * C48230 +
           (((C16782 + C16783) * C2356 -
             ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                  C2349 +
              (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                  C2355) +
             (C16784 + C16785) * C47951) *
                C15915 +
            ((C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
              C48194 * C1458) *
                 C2356 -
             ((C16785 + C16784) * C2349 + (C16783 + C16782) * C2355) +
             (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
              C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2355 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C2349 -
            (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
               C15915 +
           ((C16115 + C16114) * C2355 + (C16117 + C16116) * C2349 -
            (C16119 + C16118) * C2356 - (C16121 + C16120) * C47951) *
               C48225) *
              C48110 * C47860 * C48254 +
          (((C16774 + C16775) * C2356 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C2349 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C2355) +
            (C16776 + C16777) * C47951) *
               C15915 +
           ((C17209 + C17208) * C2356 -
            ((C16777 + C16776) * C2349 + (C16775 + C16774) * C2355) +
            (C17211 + C17210) * C47951) *
               C48225) *
              C48110 * C47860 * C48251 +
          (((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                C2355 +
            (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                C2349 -
            (C17212 + C17213) * C2356 - (C17214 + C17215) * C47951) *
               C15915 +
           ((C17213 + C17212) * C2355 + (C17215 + C17214) * C2349 -
            (C17217 + C17216) * C2356 - (C17219 + C17218) * C47951) *
               C48225) *
              C48110 * C47860 * C48242 +
          (((C18558 + C18559) * C2356 -
            ((C15918 * C1868 + C48194 * C1880 + C15917 * C1869 +
              C15913 * C1881) *
                 C2349 +
             (C15918 * C1862 + C48194 * C1871 + C15917 * C1863 +
              C15913 * C1872) *
                 C2355) +
            (C18560 + C18561) * C47951) *
               C15915 +
           ((C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48194 * C7272) *
                C2356 -
            ((C18561 + C18560) * C2349 + (C18559 + C18558) * C2355) +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48194 * C7276) *
                C47951) *
               C48225) *
              C48110 * C47860 * C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C2355 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C2349 -
             (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
                C15915 +
            ((C16115 + C16114) * C2355 + (C16117 + C16116) * C2349 -
             (C16119 + C16118) * C2356 - (C16121 + C16120) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C16122 + C16123) * C2356 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C2349 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C2355) +
             (C16124 + C16125) * C47951) *
                C15915 +
            ((C16127 + C16126) * C2356 -
             ((C16125 + C16124) * C2349 + (C16123 + C16122) * C2355) +
             (C16129 + C16128) * C47951) *
                C48225) *
               C48110 * C47870) *
              C47989 +
          ((((C16774 + C16775) * C2356 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C2349 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C2355) +
             (C16776 + C16777) * C47951) *
                C15915 +
            ((C17209 + C17208) * C2356 -
             ((C16777 + C16776) * C2349 + (C16775 + C16774) * C2355) +
             (C17211 + C17210) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C2355 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C2349 -
             (C16778 + C16779) * C2356 - (C16780 + C16781) * C47951) *
                C15915 +
            ((C16779 + C16778) * C2355 + (C16781 + C16780) * C2349 -
             (C17565 + C17564) * C2356 - (C17567 + C17566) * C47951) *
                C48225) *
               C48110 * C47870) *
              C47996 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C2355 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C2349 -
             (C17212 + C17213) * C2356 - (C17214 + C17215) * C47951) *
                C15915 +
            ((C17213 + C17212) * C2355 + (C17215 + C17214) * C2349 -
             (C17217 + C17216) * C2356 - (C17219 + C17218) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C18286 + C18287) * C2356 -
             ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                  C2349 +
              (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                  C2355) +
             (C18288 + C18289) * C47951) *
                C15915 +
            ((C15917 * C1170 + C15913 * C1185 + C15918 * C1171 +
              C48194 * C1186) *
                 C2356 -
             ((C18289 + C18288) * C2349 + (C18287 + C18286) * C2355) +
             (C15917 * C1188 + C15913 * C1197 + C15918 * C1189 +
              C48194 * C1198) *
                 C47951) *
                C48225) *
               C48110 * C47870) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C2355 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C2349 -
             (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
                C15915 +
            ((C16115 + C16114) * C2355 + (C16117 + C16116) * C2349 -
             (C16119 + C16118) * C2356 - (C16121 + C16120) * C47951) *
                C48225) *
               C48110 * C48243 +
           (((C16122 + C16123) * C2356 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C2349 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C2355) +
             (C16124 + C16125) * C47951) *
                C15915 +
            ((C16127 + C16126) * C2356 -
             ((C16125 + C16124) * C2349 + (C16123 + C16122) * C2355) +
             (C16129 + C16128) * C47951) *
                C48225) *
               C48110 * C48230 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C2355 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C2349 -
             (C16130 + C16131) * C2356 - (C16132 + C16133) * C47951) *
                C15915 +
            ((C16131 + C16130) * C2355 + (C16133 + C16132) * C2349 -
             (C16135 + C16134) * C2356 - (C16137 + C16136) * C47951) *
                C48225) *
               C48110 * C48201) *
              C3120 +
          ((((C16774 + C16775) * C2356 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C2349 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C2355) +
             (C16776 + C16777) * C47951) *
                C15915 +
            ((C17209 + C17208) * C2356 -
             ((C16777 + C16776) * C2349 + (C16775 + C16774) * C2355) +
             (C17211 + C17210) * C47951) *
                C48225) *
               C48110 * C48243 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C2355 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C2349 -
             (C16778 + C16779) * C2356 - (C16780 + C16781) * C47951) *
                C15915 +
            ((C16779 + C16778) * C2355 + (C16781 + C16780) * C2349 -
             (C17565 + C17564) * C2356 - (C17567 + C17566) * C47951) *
                C48225) *
               C48110 * C48230 +
           (((C16782 + C16783) * C2356 -
             ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                  C2349 +
              (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                  C2355) +
             (C16784 + C16785) * C47951) *
                C15915 +
            ((C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
              C48194 * C1458) *
                 C2356 -
             ((C16785 + C16784) * C2349 + (C16783 + C16782) * C2355) +
             (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
              C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2461 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48253 -
            (C16114 + C16115) * C2462 - (C16116 + C16117) * C48249 +
            (C16118 + C16119) * C2463 + (C16120 + C16121) * C48239 -
            (C17030 + C17031) * C2464 - (C17032 + C17033) * C48217) *
               C15915 +
           ((C16115 + C16114) * C2461 + (C16117 + C16116) * C48253 -
            (C16119 + C16118) * C2462 - (C16121 + C16120) * C48249 +
            (C17031 + C17030) * C2463 + (C17033 + C17032) * C48239 -
            (C17035 + C17034) * C2464 - (C17037 + C17036) * C48217) *
               C48225) *
              C48110 * C47860 * C3120 +
          (((C16774 + C16775) * C2462 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C48253 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C2461) +
            (C16776 + C16777) * C48249 - (C17208 + C17209) * C2463 -
            (C17210 + C17211) * C48239 + (C17706 + C17707) * C2464 +
            (C17708 + C17709) * C48217) *
               C15915 +
           ((C17209 + C17208) * C2462 -
            ((C16777 + C16776) * C48253 + (C16775 + C16774) * C2461) +
            (C17211 + C17210) * C48249 - (C17707 + C17706) * C2463 -
            (C17709 + C17708) * C48239 +
            (C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48194 * C6404) *
                C2464 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48194 * C6408) *
                C48217) *
               C48225) *
              C48110 * C47860 * C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C1303 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C1297 -
            (C16114 + C16115) * C1304 - (C16116 + C16117) * C1298 +
            (C16118 + C16119) * C1305 + (C16120 + C16121) * C1299 -
            (C17030 + C17031) * C1306 - (C17032 + C17033) * C48217) *
               C15915 +
           ((C16115 + C16114) * C1303 + (C16117 + C16116) * C1297 -
            (C16119 + C16118) * C1304 - (C16121 + C16120) * C1298 +
            (C17031 + C17030) * C1305 + (C17033 + C17032) * C1299 -
            (C17035 + C17034) * C1306 - (C17037 + C17036) * C48217) *
               C48225) *
              C48110 * C48161 +
          (((C16122 + C16123) * C1304 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C1297 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C1303) +
            (C16124 + C16125) * C1298 - (C16126 + C16127) * C1305 -
            (C16128 + C16129) * C1299 + (C17358 + C17359) * C1306 +
            (C17360 + C17361) * C48217) *
               C15915 +
           ((C16127 + C16126) * C1304 -
            ((C16125 + C16124) * C1297 + (C16123 + C16122) * C1303) +
            (C16129 + C16128) * C1298 - (C17359 + C17358) * C1305 -
            (C17361 + C17360) * C1299 +
            (C15917 * C1033 + C15913 * C1042 + C15918 * C1034 +
             C48194 * C1043) *
                C1306 +
            (C15917 * C1045 + C15913 * C1051 + C15918 * C1046 +
             C48194 * C1052) *
                C48217) *
               C48225) *
              C48110 * C47870) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C561 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48175 -
            (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
               C15915 +
           ((C16115 + C16114) * C561 + (C16117 + C16116) * C48175 -
            (C16119 + C16118) * C562 - (C16121 + C16120) * C47951) *
               C48225) *
              C48110 * C557 +
          (((C16122 + C16123) * C562 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48175 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C561) +
            (C16124 + C16125) * C47951) *
               C15915 +
           ((C16127 + C16126) * C562 -
            ((C16125 + C16124) * C48175 + (C16123 + C16122) * C561) +
            (C16129 + C16128) * C47951) *
               C48225) *
              C48110 * C558 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C561 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C48175 -
            (C16130 + C16131) * C562 - (C16132 + C16133) * C47951) *
               C15915 +
           ((C16131 + C16130) * C561 + (C16133 + C16132) * C48175 -
            (C16135 + C16134) * C562 - (C16137 + C16136) * C47951) *
               C48225) *
              C48110 * C559 +
          (((C16422 + C16423) * C562 -
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C48175 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C561) +
            (C16424 + C16425) * C47951) *
               C15915 +
           ((C15917 * C271 + C15913 * C288 + C15918 * C273 + C48194 * C292) *
                C562 -
            ((C16425 + C16424) * C48175 + (C16423 + C16422) * C561) +
            (C15917 * C289 + C15913 * C301 + C15918 * C293 + C48194 * C303) *
                C47951) *
               C48225) *
              C48110 * C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C561 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48175 -
             (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
                C15915 +
            ((C16115 + C16114) * C561 + (C16117 + C16116) * C48175 -
             (C16119 + C16118) * C562 - (C16121 + C16120) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C16122 + C16123) * C562 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48175 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C561) +
             (C16124 + C16125) * C47951) *
                C15915 +
            ((C16127 + C16126) * C562 -
             ((C16125 + C16124) * C48175 + (C16123 + C16122) * C561) +
             (C16129 + C16128) * C47951) *
                C48225) *
               C48110 * C47870) *
              C1681 +
          ((((C16774 + C16775) * C562 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C48175 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C561) +
             (C16776 + C16777) * C47951) *
                C15915 +
            ((C17209 + C17208) * C562 -
             ((C16777 + C16776) * C48175 + (C16775 + C16774) * C561) +
             (C17211 + C17210) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C561 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C48175 -
             (C16778 + C16779) * C562 - (C16780 + C16781) * C47951) *
                C15915 +
            ((C16779 + C16778) * C561 + (C16781 + C16780) * C48175 -
             (C17565 + C17564) * C562 - (C17567 + C17566) * C47951) *
                C48225) *
               C48110 * C47870) *
              C1682 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C561 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C48175 -
             (C17212 + C17213) * C562 - (C17214 + C17215) * C47951) *
                C15915 +
            ((C17213 + C17212) * C561 + (C17215 + C17214) * C48175 -
             (C17217 + C17216) * C562 - (C17219 + C17218) * C47951) *
                C48225) *
               C48110 * C48161 +
           (((C18286 + C18287) * C562 -
             ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                  C48175 +
              (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                  C561) +
             (C18288 + C18289) * C47951) *
                C15915 +
            ((C15917 * C1170 + C15913 * C1185 + C15918 * C1171 +
              C48194 * C1186) *
                 C562 -
             ((C18289 + C18288) * C48175 + (C18287 + C18286) * C561) +
             (C15917 * C1188 + C15913 * C1197 + C15918 * C1189 +
              C48194 * C1198) *
                 C47951) *
                C48225) *
               C48110 * C47870) *
              C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C1303 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C1297 -
            (C16114 + C16115) * C1304 - (C16116 + C16117) * C1298 +
            (C16118 + C16119) * C1305 + (C16120 + C16121) * C1299 -
            (C17030 + C17031) * C1306 - (C17032 + C17033) * C48217) *
               C15915 +
           ((C16115 + C16114) * C1303 + (C16117 + C16116) * C1297 -
            (C16119 + C16118) * C1304 - (C16121 + C16120) * C1298 +
            (C17031 + C17030) * C1305 + (C17033 + C17032) * C1299 -
            (C17035 + C17034) * C1306 - (C17037 + C17036) * C48217) *
               C48225) *
              C48110 * C47860 * C48176 +
          (((C16774 + C16775) * C1304 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C1297 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C1303) +
            (C16776 + C16777) * C1298 - (C17208 + C17209) * C1305 -
            (C17210 + C17211) * C1299 + (C17706 + C17707) * C1306 +
            (C17708 + C17709) * C48217) *
               C15915 +
           ((C17209 + C17208) * C1304 -
            ((C16777 + C16776) * C1297 + (C16775 + C16774) * C1303) +
            (C17211 + C17210) * C1298 - (C17707 + C17706) * C1305 -
            (C17709 + C17708) * C1299 +
            (C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48194 * C6404) *
                C1306 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48194 * C6408) *
                C48217) *
               C48225) *
              C48110 * C47860 * C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C561 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48175 -
             (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
                C15915 +
            ((C16115 + C16114) * C561 + (C16117 + C16116) * C48175 -
             (C16119 + C16118) * C562 - (C16121 + C16120) * C47951) *
                C48225) *
               C48110 * C258 +
           (((C16122 + C16123) * C562 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48175 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C561) +
             (C16124 + C16125) * C47951) *
                C15915 +
            ((C16127 + C16126) * C562 -
             ((C16125 + C16124) * C48175 + (C16123 + C16122) * C561) +
             (C16129 + C16128) * C47951) *
                C48225) *
               C48110 * C259 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C561 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C48175 -
             (C16130 + C16131) * C562 - (C16132 + C16133) * C47951) *
                C15915 +
            ((C16131 + C16130) * C561 + (C16133 + C16132) * C48175 -
             (C16135 + C16134) * C562 - (C16137 + C16136) * C47951) *
                C48225) *
               C48110 * C48201) *
              C48176 +
          ((((C16774 + C16775) * C562 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C48175 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C561) +
             (C16776 + C16777) * C47951) *
                C15915 +
            ((C15917 * C1165 + C15913 * C1174 + C15918 * C1164 +
              C48194 * C1173) *
                 C562 -
             ((C16777 + C16776) * C48175 + (C16775 + C16774) * C561) +
             (C15917 * C1177 + C15913 * C1192 + C15918 * C1176 +
              C48194 * C1191) *
                 C47951) *
                C48225) *
               C48110 * C258 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C561 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C48175 -
             (C16778 + C16779) * C562 - (C16780 + C16781) * C47951) *
                C15915 +
            ((C16779 + C16778) * C561 + (C16781 + C16780) * C48175 -
             (C15918 * C1163 + C48194 * C1172 + C15917 * C1164 +
              C15913 * C1173) *
                 C562 -
             (C15918 * C1175 + C48194 * C1190 + C15917 * C1176 +
              C15913 * C1191) *
                 C47951) *
                C48225) *
               C48110 * C259 +
           (((C16782 + C16783) * C562 -
             ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                  C48175 +
              (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                  C561) +
             (C16784 + C16785) * C47951) *
                C15915 +
            ((C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
              C48194 * C1458) *
                 C562 -
             ((C16785 + C16784) * C48175 + (C16783 + C16782) * C561) +
             (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
              C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C561 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48175 -
            (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
               C15915 +
           ((C16115 + C16114) * C561 + (C16117 + C16116) * C48175 -
            (C16119 + C16118) * C562 - (C16121 + C16120) * C47951) *
               C48225) *
              C48110 * C47860 * C2133 +
          (((C16774 + C16775) * C562 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C48175 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C561) +
            (C16776 + C16777) * C47951) *
               C15915 +
           ((C17209 + C17208) * C562 -
            ((C16777 + C16776) * C48175 + (C16775 + C16774) * C561) +
            (C17211 + C17210) * C47951) *
               C48225) *
              C48110 * C47860 * C2134 +
          (((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                C561 +
            (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                C48175 -
            (C17212 + C17213) * C562 - (C17214 + C17215) * C47951) *
               C15915 +
           ((C17213 + C17212) * C561 + (C17215 + C17214) * C48175 -
            (C17217 + C17216) * C562 - (C17219 + C17218) * C47951) *
               C48225) *
              C48110 * C47860 * C2135 +
          (((C18558 + C18559) * C562 -
            ((C15918 * C1868 + C48194 * C1880 + C15917 * C1869 +
              C15913 * C1881) *
                 C48175 +
             (C15918 * C1862 + C48194 * C1871 + C15917 * C1863 +
              C15913 * C1872) *
                 C561) +
            (C18560 + C18561) * C47951) *
               C15915 +
           ((C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48194 * C7272) *
                C562 -
            ((C18561 + C18560) * C48175 + (C18559 + C18558) * C561) +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48194 * C7276) *
                C47951) *
               C48225) *
              C48110 * C47860 * C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C15917 * C117 + C15913 * C124 + C15918 * C118 +
                 C48194 * C125) *
                    C116 +
                (C15917 * C127 + C15913 * C138 + C15918 * C128 +
                 C48194 * C139) *
                    C47888) *
                   C15915 +
               ((C15917 * C266 + C15913 * C276 + C15918 * C265 +
                 C48194 * C275) *
                    C116 +
                (C15917 * C279 + C15913 * C296 + C15918 * C278 +
                 C48194 * C295) *
                    C47888) *
                   C48225) *
                  C48110 * C107 -
              (((C15918 * C277 + C48194 * C294 + C15917 * C278 +
                 C15913 * C295) *
                    C47888 +
                (C15918 * C264 + C48194 * C274 + C15917 * C265 +
                 C15913 * C275) *
                    C116) *
                   C48225 +
               ((C15918 * C129 + C48194 * C140 + C15917 * C128 +
                 C15913 * C139) *
                    C47888 +
                (C15918 * C119 + C48194 * C126 + C15917 * C118 +
                 C15913 * C125) *
                    C116) *
                   C15915) *
                  C48110 * C108 +
              (((C15917 * C119 + C15913 * C126 + C15918 * C120 +
                 C48194 * C131) *
                    C116 +
                (C15917 * C129 + C15913 * C140 + C15918 * C130 +
                 C48194 * C141) *
                    C47888) *
                   C15915 +
               ((C15917 * C264 + C15913 * C274 + C15918 * C270 +
                 C48194 * C286) *
                    C116 +
                (C15917 * C277 + C15913 * C294 + C15918 * C287 +
                 C48194 * C300) *
                    C47888) *
                   C48225) *
                  C48110 * C109 -
              (((C15918 * C291 + C48194 * C302 + C15917 * C287 +
                 C15913 * C300) *
                    C47888 +
                (C15918 * C272 + C48194 * C290 + C15917 * C270 +
                 C15913 * C286) *
                    C116) *
                   C48225 +
               ((C15918 * C133 + C48194 * C142 + C15917 * C130 +
                 C15913 * C141) *
                    C47888 +
                (C15918 * C121 + C48194 * C132 + C15917 * C120 +
                 C15913 * C131) *
                    C116) *
                   C15915) *
                  C48110 * C110 +
              (((C15917 * C121 + C15913 * C132 + C15918 * C122 +
                 C48194 * C135) *
                    C116 +
                (C15917 * C133 + C15913 * C142 + C15918 * C134 +
                 C48194 * C143) *
                    C47888) *
                   C15915 +
               ((C15917 * C272 + C15913 * C290 + C15918 * C563 +
                 C48194 * C564) *
                    C116 +
                (C15917 * C291 + C15913 * C302 + C15918 * C565 +
                 C48194 * C566) *
                    C47888) *
                   C48225) *
                  C48110 * C111) *
             C47906 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15917 * C117 + C15913 * C124 + C15918 * C118 +
                 C48194 * C125) *
                    C261 +
                (C15917 * C127 + C15913 * C138 + C15918 * C128 +
                 C48194 * C139) *
                    C48246 -
                (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
                (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
                   C15915 +
               ((C16115 + C16114) * C261 + (C16117 + C16116) * C48246 -
                (C16119 + C16118) * C262 - (C16121 + C16120) * C48234 +
                (C15917 * C1031 + C15913 * C1037 + C15918 * C1030 +
                 C48194 * C1036) *
                    C263 +
                (C15917 * C1040 + C15913 * C1049 + C15918 * C1039 +
                 C48194 * C1048) *
                    C48207) *
                   C48225) *
                  C48110 * C258 +
              (((C16122 + C16123) * C262 -
                ((C15918 * C129 + C48194 * C140 + C15917 * C128 +
                  C15913 * C139) *
                     C48246 +
                 (C15918 * C119 + C48194 * C126 + C15917 * C118 +
                  C15913 * C125) *
                     C261) +
                (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
                (C16128 + C16129) * C48207) *
                   C15915 +
               ((C16127 + C16126) * C262 -
                ((C16125 + C16124) * C48246 + (C16123 + C16122) * C261) +
                (C16129 + C16128) * C48234 -
                (C15918 * C1029 + C48194 * C1035 + C15917 * C1030 +
                 C15913 * C1036) *
                    C263 -
                (C15918 * C1038 + C48194 * C1047 + C15917 * C1039 +
                 C15913 * C1048) *
                    C48207) *
                   C48225) *
                  C48110 * C259 +
              (((C15917 * C119 + C15913 * C126 + C15918 * C120 +
                 C48194 * C131) *
                    C261 +
                (C15917 * C129 + C15913 * C140 + C15918 * C130 +
                 C48194 * C141) *
                    C48246 -
                (C16130 + C16131) * C262 - (C16132 + C16133) * C48234 +
                (C16134 + C16135) * C263 + (C16136 + C16137) * C48207) *
                   C15915 +
               ((C16131 + C16130) * C261 + (C16133 + C16132) * C48246 -
                (C16135 + C16134) * C262 - (C16137 + C16136) * C48234 +
                (C15917 * C1029 + C15913 * C1035 + C15918 * C1307 +
                 C48194 * C1308) *
                    C263 +
                (C15917 * C1038 + C15913 * C1047 + C15918 * C1309 +
                 C48194 * C1310) *
                    C48207) *
                   C48225) *
                  C48110 * C48201) *
             C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C258 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C259 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C15915 +
            ((C16131 + C16130) * C116 + (C16133 + C16132) * C47888) * C48225) *
               C48110 * C48201) *
              C48247 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C15917 * C818 + C15913 * C823 + C15918 * C819 + C48194 * C824) *
                 C116 +
             (C15917 * C826 + C15913 * C833 + C15918 * C827 + C48194 * C834) *
                 C47888) *
                C48225) *
               C48110 * C259 -
           (((C15918 * C826 + C48194 * C833 + C15917 * C825 + C15913 * C832) *
                 C47888 +
             (C15918 * C818 + C48194 * C823 + C15917 * C817 + C15913 * C822) *
                 C116) *
                C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C258 -
           (((C15918 * C829 + C48194 * C835 + C15917 * C827 + C15913 * C834) *
                 C47888 +
             (C15918 * C820 + C48194 * C828 + C15917 * C819 + C15913 * C824) *
                 C116) *
                C48225 +
            ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                 C47888 +
             (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C15915) *
               C48110 * C48201) *
              C48236 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C116 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C47888) *
                C15915 +
            ((C15917 * C1168 + C15913 * C1180 + C15918 * C1167 +
              C48194 * C1179) *
                 C116 +
             (C15917 * C1183 + C15913 * C1195 + C15918 * C1182 +
              C48194 * C1194) *
                 C47888) *
                C48225) *
               C48110 * C258 -
           (((C15918 * C1181 + C48194 * C1193 + C15917 * C1182 +
              C15913 * C1194) *
                 C47888 +
             (C15918 * C1166 + C48194 * C1178 + C15917 * C1167 +
              C15913 * C1179) *
                 C116) *
                C48225 +
            ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                 C47888 +
             (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                 C116) *
                C15915) *
               C48110 * C259 +
           (((C15917 * C424 + C15913 * C439 + C15918 * C425 + C48194 * C444) *
                 C116 +
             (C15917 * C442 + C15913 * C454 + C15918 * C443 + C48194 * C455) *
                 C47888) *
                C15915 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C116 +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47888) *
                C48225) *
               C48110 * C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C953 + (C16117 + C16116) * C947 -
            (C16119 + C16118) * C954 - (C16121 + C16120) * C948 +
            (C15917 * C1031 + C15913 * C1037 + C15918 * C1030 +
             C48194 * C1036) *
                C955 +
            (C15917 * C1040 + C15913 * C1049 + C15918 * C1039 +
             C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48243 +
          (((C16122 + C16123) * C954 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C947 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C953) +
            (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
            (C16128 + C16129) * C48207) *
               C15915 +
           ((C16127 + C16126) * C954 -
            ((C16125 + C16124) * C947 + (C16123 + C16122) * C953) +
            (C16129 + C16128) * C948 -
            (C15918 * C1029 + C48194 * C1035 + C15917 * C1030 +
             C15913 * C1036) *
                C955 -
            (C15918 * C1038 + C48194 * C1047 + C15917 * C1039 +
             C15913 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48230 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C953 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C947 -
            (C16130 + C16131) * C954 - (C16132 + C16133) * C948 +
            (C16134 + C16135) * C955 + (C16136 + C16137) * C48207) *
               C15915 +
           ((C16131 + C16130) * C953 + (C16133 + C16132) * C947 -
            (C16135 + C16134) * C954 - (C16137 + C16136) * C948 +
            (C15917 * C1029 + C15913 * C1035 + C15918 * C1307 +
             C48194 * C1308) *
                C955 +
            (C15917 * C1038 + C15913 * C1047 + C15918 * C1309 +
             C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
               C1024 +
           (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
               C1018 -
           (C16114 + C16115) * C1025 - (C16116 + C16117) * C1019 +
           (C16118 + C16119) * C1026 + (C16120 + C16121) * C1020 -
           (C17030 + C17031) * C1027 - (C17032 + C17033) * C1021 +
           (C17034 + C17035) * C1028 + (C17036 + C17037) * C1022) *
              C15915 +
          ((C16115 + C16114) * C1024 + (C16117 + C16116) * C1018 -
           (C16119 + C16118) * C1025 - (C16121 + C16120) * C1019 +
           (C17031 + C17030) * C1026 + (C17033 + C17032) * C1020 -
           (C17035 + C17034) * C1027 - (C17037 + C17036) * C1021 +
           (C15917 * C5701 + C15913 * C5703 + C15918 * C5702 + C48194 * C5704) *
               C1028 +
           (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 + C48194 * C5708) *
               C1022) *
              C48225) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C953 + (C16117 + C16116) * C947 -
            (C16119 + C16118) * C954 - (C16121 + C16120) * C948 +
            (C17031 + C17030) * C955 + (C17033 + C17032) * C48207) *
               C48225) *
              C48110 * C47860 * C48247 +
          (((C16774 + C16775) * C954 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C947 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C953) +
            (C16776 + C16777) * C948 - (C17208 + C17209) * C955 -
            (C17210 + C17211) * C48207) *
               C15915 +
           ((C17209 + C17208) * C954 -
            ((C16777 + C16776) * C947 + (C16775 + C16774) * C953) +
            (C17211 + C17210) * C948 -
            (C15918 * C1560 + C48194 * C1563 + C15917 * C1559 +
             C15913 * C1562) *
                C955 -
            (C15918 * C1566 + C48194 * C1569 + C15917 * C1565 +
             C15913 * C1568) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48236 +
          (((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                C953 +
            (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                C947 -
            (C17212 + C17213) * C954 - (C17214 + C17215) * C948 +
            (C17216 + C17217) * C955 + (C17218 + C17219) * C48207) *
               C15915 +
           ((C17213 + C17212) * C953 + (C17215 + C17214) * C947 -
            (C17217 + C17216) * C954 - (C17219 + C17218) * C948 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48194 * C5882) *
                C955 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48194 * C5886) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C48243 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C48230 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C15915 +
            ((C16131 + C16130) * C116 + (C16133 + C16132) * C47888) * C48225) *
               C48110 * C48201) *
              C1681 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C16779 + C16778) * C116 + (C16781 + C16780) * C47888) * C48225) *
               C48110 * C48230 -
           (((C16777 + C16776) * C47888 + (C16775 + C16774) * C116) * C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C48243 -
           (((C16785 + C16784) * C47888 + (C16783 + C16782) * C116) * C48225 +
            ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                 C47888 +
             (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C15915) *
               C48110 * C48201) *
              C1682 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C116 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C47888) *
                C15915 +
            ((C17213 + C17212) * C116 + (C17215 + C17214) * C47888) * C48225) *
               C48110 * C48243 -
           (((C15918 * C1181 + C48194 * C1193 + C15917 * C1182 +
              C15913 * C1194) *
                 C47888 +
             (C15918 * C1166 + C48194 * C1178 + C15917 * C1167 +
              C15913 * C1179) *
                 C116) *
                C48225 +
            ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                 C47888 +
             (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                 C116) *
                C15915) *
               C48110 * C48230 +
           (((C15917 * C424 + C15913 * C439 + C15918 * C425 + C48194 * C444) *
                 C116 +
             (C15917 * C442 + C15913 * C454 + C15918 * C443 + C48194 * C455) *
                 C47888) *
                C15915 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C116 +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47888) *
                C48225) *
               C48110 * C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C261 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48246 -
            (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
            (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C261 + (C16117 + C16116) * C48246 -
            (C16119 + C16118) * C262 - (C16121 + C16120) * C48234 +
            (C17031 + C17030) * C263 + (C17033 + C17032) * C48207) *
               C48225) *
              C48110 * C47860 * C1681 +
          (((C16774 + C16775) * C262 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C48246 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C261) +
            (C16776 + C16777) * C48234 - (C17208 + C17209) * C263 -
            (C17210 + C17211) * C48207) *
               C15915 +
           ((C17209 + C17208) * C262 -
            ((C16777 + C16776) * C48246 + (C16775 + C16774) * C261) +
            (C17211 + C17210) * C48234 - (C17707 + C17706) * C263 -
            (C17709 + C17708) * C48207) *
               C48225) *
              C48110 * C47860 * C1682 +
          (((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                C261 +
            (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                C48246 -
            (C17212 + C17213) * C262 - (C17214 + C17215) * C48234 +
            (C17216 + C17217) * C263 + (C17218 + C17219) * C48207) *
               C15915 +
           ((C17213 + C17212) * C261 + (C17215 + C17214) * C48246 -
            (C17217 + C17216) * C262 - (C17219 + C17218) * C48234 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48194 * C5882) *
                C263 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48194 * C5886) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47888) *
               C15915 +
           ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
              C48110 * C47860 * C1856 -
          (((C16777 + C16776) * C47888 + (C16775 + C16774) * C116) * C48225 +
           ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                C47888 +
            (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                C116) *
               C15915) *
              C48110 * C47860 * C1857 +
          (((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                C116 +
            (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                C47888) *
               C15915 +
           ((C17213 + C17212) * C116 + (C17215 + C17214) * C47888) * C48225) *
              C48110 * C47860 * C1858 -
          (((C15918 * C2246 + C48194 * C2249 + C15917 * C2245 +
             C15913 * C2248) *
                C47888 +
            (C15918 * C2240 + C48194 * C2243 + C15917 * C2239 +
             C15913 * C2242) *
                C116) *
               C48225 +
           ((C15918 * C1868 + C48194 * C1880 + C15917 * C1869 +
             C15913 * C1881) *
                C47888 +
            (C15918 * C1862 + C48194 * C1871 + C15917 * C1863 +
             C15913 * C1872) *
                C116) *
               C15915) *
              C48110 * C47860 * C1859 +
          (((C15917 * C1864 + C15913 * C1873 + C15918 * C1865 +
             C48194 * C1874) *
                C116 +
            (C15917 * C1876 + C15913 * C1882 + C15918 * C1877 +
             C48194 * C1883) *
                C47888) *
               C15915 +
           ((C15917 * C6795 + C15913 * C6797 + C15918 * C6796 +
             C48194 * C6798) *
                C116 +
            (C15917 * C6799 + C15913 * C6801 + C15918 * C6800 +
             C48194 * C6802) *
                C47888) *
               C48225) *
              C48110 * C47860 * C1860)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C953 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C947 -
             (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
             (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
                C15915 +
            ((C16115 + C16114) * C953 + (C16117 + C16116) * C947 -
             (C16119 + C16118) * C954 - (C16121 + C16120) * C948 +
             (C17031 + C17030) * C955 + (C17033 + C17032) * C48207) *
                C48225) *
               C48110 * C48161 +
           (((C16122 + C16123) * C954 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C947 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C953) +
             (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
             (C16128 + C16129) * C48207) *
                C15915 +
            ((C16127 + C16126) * C954 -
             ((C16125 + C16124) * C947 + (C16123 + C16122) * C953) +
             (C16129 + C16128) * C948 - (C17359 + C17358) * C955 -
             (C17361 + C17360) * C48207) *
                C48225) *
               C48110 * C47870) *
              C48176 +
          ((((C16774 + C16775) * C954 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C947 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C953) +
             (C16776 + C16777) * C948 - (C17208 + C17209) * C955 -
             (C17210 + C17211) * C48207) *
                C15915 +
            ((C17209 + C17208) * C954 -
             ((C16777 + C16776) * C947 + (C16775 + C16774) * C953) +
             (C17211 + C17210) * C948 -
             (C15918 * C1560 + C48194 * C1563 + C15917 * C1559 +
              C15913 * C1562) *
                 C955 -
             (C15918 * C1566 + C48194 * C1569 + C15917 * C1565 +
              C15913 * C1568) *
                 C48207) *
                C48225) *
               C48110 * C48161 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C953 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C947 -
             (C16778 + C16779) * C954 - (C16780 + C16781) * C948 +
             (C17564 + C17565) * C955 + (C17566 + C17567) * C48207) *
                C15915 +
            ((C16779 + C16778) * C953 + (C16781 + C16780) * C947 -
             (C17565 + C17564) * C954 - (C17567 + C17566) * C948 +
             (C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48194 * C1564) *
                 C955 +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48194 * C1570) *
                 C48207) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C557 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C558 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C15915 +
            ((C16131 + C16130) * C116 + (C16133 + C16132) * C47888) * C48225) *
               C48110 * C559 -
           (((C16425 + C16424) * C47888 + (C16423 + C16422) * C116) * C48225 +
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C47888 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C15915) *
               C48110 * C48211) *
              C48176 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C15917 * C818 + C15913 * C823 + C15918 * C819 + C48194 * C824) *
                 C116 +
             (C15917 * C826 + C15913 * C833 + C15918 * C827 + C48194 * C834) *
                 C47888) *
                C48225) *
               C48110 * C558 -
           (((C15918 * C826 + C48194 * C833 + C15917 * C825 + C15913 * C832) *
                 C47888 +
             (C15918 * C818 + C48194 * C823 + C15917 * C817 + C15913 * C822) *
                 C116) *
                C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C557 -
           (((C15918 * C829 + C48194 * C835 + C15917 * C827 + C15913 * C834) *
                 C47888 +
             (C15918 * C820 + C48194 * C828 + C15917 * C819 + C15913 * C824) *
                 C116) *
                C48225 +
            ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                 C47888 +
             (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C15915) *
               C48110 * C559 +
           (((C15917 * C419 + C15913 * C429 + C15918 * C421 + C48194 * C436) *
                 C116 +
             (C15917 * C432 + C15913 * C449 + C15918 * C435 + C48194 * C451) *
                 C47888) *
                C15915 +
            ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48194 * C830) *
                 C116 +
             (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48194 * C836) *
                 C47888) *
                C48225) *
               C48110 * C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C48161 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C47870) *
              C2133 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C16779 + C16778) * C116 + (C16781 + C16780) * C47888) * C48225) *
               C48110 * C47870 -
           (((C16777 + C16776) * C47888 + (C16775 + C16774) * C116) * C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C48161) *
              C2134 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C116 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C47888) *
                C15915 +
            ((C17213 + C17212) * C116 + (C17215 + C17214) * C47888) * C48225) *
               C48110 * C48161 -
           (((C18289 + C18288) * C47888 + (C18287 + C18286) * C116) * C48225 +
            ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                 C47888 +
             (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                 C116) *
                C15915) *
               C48110 * C47870) *
              C2135 +
          ((((C15917 * C1862 + C15913 * C1871 + C15918 * C1861 +
              C48194 * C1870) *
                 C116 +
             (C15917 * C1868 + C15913 * C1880 + C15918 * C1867 +
              C48194 * C1879) *
                 C47888) *
                C15915 +
            ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48194 * C2244) *
                 C116 +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48194 * C2250) *
                 C47888) *
                C48225) *
               C48110 * C47870 -
           (((C15918 * C2246 + C48194 * C2249 + C15917 * C2245 +
              C15913 * C2248) *
                 C47888 +
             (C15918 * C2240 + C48194 * C2243 + C15917 * C2239 +
              C15913 * C2242) *
                 C116) *
                C48225 +
            ((C15918 * C1868 + C48194 * C1880 + C15917 * C1869 +
              C15913 * C1881) *
                 C47888 +
             (C15918 * C1862 + C48194 * C1871 + C15917 * C1863 +
              C15913 * C1872) *
                 C116) *
                C15915) *
               C48110 * C48161) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C261 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48246 -
            (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
            (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C261 + (C16117 + C16116) * C48246 -
            (C16119 + C16118) * C262 - (C16121 + C16120) * C48234 +
            (C15917 * C1031 + C15913 * C1037 + C15918 * C1030 +
             C48194 * C1036) *
                C263 +
            (C15917 * C1040 + C15913 * C1049 + C15918 * C1039 +
             C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C258 +
          (((C16122 + C16123) * C262 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48246 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C261) +
            (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
            (C16128 + C16129) * C48207) *
               C15915 +
           ((C16127 + C16126) * C262 -
            ((C16125 + C16124) * C48246 + (C16123 + C16122) * C261) +
            (C16129 + C16128) * C48234 -
            (C15918 * C1029 + C48194 * C1035 + C15917 * C1030 +
             C15913 * C1036) *
                C263 -
            (C15918 * C1038 + C48194 * C1047 + C15917 * C1039 +
             C15913 * C1048) *
                C48207) *
               C48225) *
              C48110 * C259 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C261 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C48246 -
            (C16130 + C16131) * C262 - (C16132 + C16133) * C48234 +
            (C16134 + C16135) * C263 + (C16136 + C16137) * C48207) *
               C15915 +
           ((C16131 + C16130) * C261 + (C16133 + C16132) * C48246 -
            (C16135 + C16134) * C262 - (C16137 + C16136) * C48234 +
            (C15917 * C1029 + C15913 * C1035 + C15918 * C1307 +
             C48194 * C1308) *
                C263 +
            (C15917 * C1038 + C15913 * C1047 + C15918 * C1309 +
             C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47888) *
               C15915 +
           ((C15917 * C266 + C15913 * C276 + C15918 * C265 + C48194 * C275) *
                C116 +
            (C15917 * C279 + C15913 * C296 + C15918 * C278 + C48194 * C295) *
                C47888) *
               C48225) *
              C48110 * C107 -
          (((C15918 * C277 + C48194 * C294 + C15917 * C278 + C15913 * C295) *
                C47888 +
            (C15918 * C264 + C48194 * C274 + C15917 * C265 + C15913 * C275) *
                C116) *
               C48225 +
           ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                C47888 +
            (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C15915) *
              C48110 * C108 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C47888) *
               C15915 +
           ((C15917 * C264 + C15913 * C274 + C15918 * C270 + C48194 * C286) *
                C116 +
            (C15917 * C277 + C15913 * C294 + C15918 * C287 + C48194 * C300) *
                C47888) *
               C48225) *
              C48110 * C109 -
          (((C15918 * C291 + C48194 * C302 + C15917 * C287 + C15913 * C300) *
                C47888 +
            (C15918 * C272 + C48194 * C290 + C15917 * C270 + C15913 * C286) *
                C116) *
               C48225 +
           ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                C47888 +
            (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C15915) *
              C48110 * C110 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48194 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48194 * C143) *
                C47888) *
               C15915 +
           ((C15917 * C272 + C15913 * C290 + C15918 * C563 + C48194 * C564) *
                C116 +
            (C15917 * C291 + C15913 * C302 + C15918 * C565 + C48194 * C566) *
                C47888) *
               C48225) *
              C48110 * C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C953 + (C16117 + C16116) * C947 -
            (C16119 + C16118) * C954 - (C16121 + C16120) * C948 +
            (C15917 * C1031 + C15913 * C1037 + C15918 * C1030 +
             C48194 * C1036) *
                C955 +
            (C15917 * C1040 + C15913 * C1049 + C15918 * C1039 +
             C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48243 +
          (((C16122 + C16123) * C954 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C947 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C953) +
            (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
            (C16128 + C16129) * C48207) *
               C15915 +
           ((C16127 + C16126) * C954 -
            ((C16125 + C16124) * C947 + (C16123 + C16122) * C953) +
            (C16129 + C16128) * C948 -
            (C15918 * C1029 + C48194 * C1035 + C15917 * C1030 +
             C15913 * C1036) *
                C955 -
            (C15918 * C1038 + C48194 * C1047 + C15917 * C1039 +
             C15913 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48230 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C953 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C947 -
            (C16130 + C16131) * C954 - (C16132 + C16133) * C948 +
            (C16134 + C16135) * C955 + (C16136 + C16137) * C48207) *
               C15915 +
           ((C16131 + C16130) * C953 + (C16133 + C16132) * C947 -
            (C16135 + C16134) * C954 - (C16137 + C16136) * C948 +
            (C15917 * C1029 + C15913 * C1035 + C15918 * C1307 +
             C48194 * C1308) *
                C955 +
            (C15917 * C1038 + C15913 * C1047 + C15918 * C1309 +
             C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
               C1024 +
           (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
               C1018 -
           (C16114 + C16115) * C1025 - (C16116 + C16117) * C1019 +
           (C16118 + C16119) * C1026 + (C16120 + C16121) * C1020 -
           (C17030 + C17031) * C1027 - (C17032 + C17033) * C1021 +
           (C17034 + C17035) * C1028 + (C17036 + C17037) * C1022) *
              C15915 +
          ((C16115 + C16114) * C1024 + (C16117 + C16116) * C1018 -
           (C16119 + C16118) * C1025 - (C16121 + C16120) * C1019 +
           (C17031 + C17030) * C1026 + (C17033 + C17032) * C1020 -
           (C17035 + C17034) * C1027 - (C17037 + C17036) * C1021 +
           (C15917 * C5701 + C15913 * C5703 + C15918 * C5702 + C48194 * C5704) *
               C1028 +
           (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 + C48194 * C5708) *
               C1022) *
              C48225) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C48243 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C48230 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C15915 +
            ((C16131 + C16130) * C116 + (C16133 + C16132) * C47888) * C48225) *
               C48110 * C48201) *
              C1681 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C16779 + C16778) * C116 + (C16781 + C16780) * C47888) * C48225) *
               C48110 * C48230 -
           (((C16777 + C16776) * C47888 + (C16775 + C16774) * C116) * C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C48243 -
           (((C16785 + C16784) * C47888 + (C16783 + C16782) * C116) * C48225 +
            ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                 C47888 +
             (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C15915) *
               C48110 * C48201) *
              C1682 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C116 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C47888) *
                C15915 +
            ((C17213 + C17212) * C116 + (C17215 + C17214) * C47888) * C48225) *
               C48110 * C48243 -
           (((C15918 * C1181 + C48194 * C1193 + C15917 * C1182 +
              C15913 * C1194) *
                 C47888 +
             (C15918 * C1166 + C48194 * C1178 + C15917 * C1167 +
              C15913 * C1179) *
                 C116) *
                C48225 +
            ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                 C47888 +
             (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                 C116) *
                C15915) *
               C48110 * C48230 +
           (((C15917 * C424 + C15913 * C439 + C15918 * C425 + C48194 * C444) *
                 C116 +
             (C15917 * C442 + C15913 * C454 + C15918 * C443 + C48194 * C455) *
                 C47888) *
                C15915 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C116 +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47888) *
                C48225) *
               C48110 * C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C261 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48246 -
            (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
            (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C261 + (C16117 + C16116) * C48246 -
            (C16119 + C16118) * C262 - (C16121 + C16120) * C48234 +
            (C17031 + C17030) * C263 + (C17033 + C17032) * C48207) *
               C48225) *
              C48110 * C47860 * C1681 +
          (((C16774 + C16775) * C262 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C48246 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C261) +
            (C16776 + C16777) * C48234 - (C17208 + C17209) * C263 -
            (C17210 + C17211) * C48207) *
               C15915 +
           ((C17209 + C17208) * C262 -
            ((C16777 + C16776) * C48246 + (C16775 + C16774) * C261) +
            (C17211 + C17210) * C48234 - (C17707 + C17706) * C263 -
            (C17709 + C17708) * C48207) *
               C48225) *
              C48110 * C47860 * C1682 +
          (((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                C261 +
            (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                C48246 -
            (C17212 + C17213) * C262 - (C17214 + C17215) * C48234 +
            (C17216 + C17217) * C263 + (C17218 + C17219) * C48207) *
               C15915 +
           ((C17213 + C17212) * C261 + (C17215 + C17214) * C48246 -
            (C17217 + C17216) * C262 - (C17219 + C17218) * C48234 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48194 * C5882) *
                C263 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48194 * C5886) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C561 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48175 -
             (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
                C15915 +
            ((C16115 + C16114) * C561 + (C16117 + C16116) * C48175 -
             (C16119 + C16118) * C562 - (C16121 + C16120) * C47951) *
                C48225) *
               C48110 * C47865 +
           (((C16122 + C16123) * C562 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48175 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C561) +
             (C16124 + C16125) * C47951) *
                C15915 +
            ((C16127 + C16126) * C562 -
             ((C16125 + C16124) * C48175 + (C16123 + C16122) * C561) +
             (C16129 + C16128) * C47951) *
                C48225) *
               C48110 * C47873 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C561 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C48175 -
             (C16130 + C16131) * C562 - (C16132 + C16133) * C47951) *
                C15915 +
            ((C16131 + C16130) * C561 + (C16133 + C16132) * C48175 -
             (C16135 + C16134) * C562 - (C16137 + C16136) * C47951) *
                C48225) *
               C48110 * C2726) *
              C3120 +
          ((((C16774 + C16775) * C562 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C48175 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C561) +
             (C16776 + C16777) * C47951) *
                C15915 +
            ((C17209 + C17208) * C562 -
             ((C16777 + C16776) * C48175 + (C16775 + C16774) * C561) +
             (C17211 + C17210) * C47951) *
                C48225) *
               C48110 * C47865 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C561 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C48175 -
             (C16778 + C16779) * C562 - (C16780 + C16781) * C47951) *
                C15915 +
            ((C16779 + C16778) * C561 + (C16781 + C16780) * C48175 -
             (C17565 + C17564) * C562 - (C17567 + C17566) * C47951) *
                C48225) *
               C48110 * C47873 +
           (((C16782 + C16783) * C562 -
             ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                  C48175 +
              (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                  C561) +
             (C16784 + C16785) * C47951) *
                C15915 +
            ((C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
              C48194 * C1458) *
                 C562 -
             ((C16785 + C16784) * C48175 + (C16783 + C16782) * C561) +
             (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
              C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C2726) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C561 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48175 -
             (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
                C15915 +
            ((C16115 + C16114) * C561 + (C16117 + C16116) * C48175 -
             (C16119 + C16118) * C562 - (C16121 + C16120) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C16122 + C16123) * C562 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48175 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C561) +
             (C16124 + C16125) * C47951) *
                C15915 +
            ((C16127 + C16126) * C562 -
             ((C16125 + C16124) * C48175 + (C16123 + C16122) * C561) +
             (C16129 + C16128) * C47951) *
                C48225) *
               C48110 * C47870) *
              C47989 +
          ((((C16774 + C16775) * C562 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C48175 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C561) +
             (C16776 + C16777) * C47951) *
                C15915 +
            ((C17209 + C17208) * C562 -
             ((C16777 + C16776) * C48175 + (C16775 + C16774) * C561) +
             (C17211 + C17210) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C561 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C48175 -
             (C16778 + C16779) * C562 - (C16780 + C16781) * C47951) *
                C15915 +
            ((C16779 + C16778) * C561 + (C16781 + C16780) * C48175 -
             (C17565 + C17564) * C562 - (C17567 + C17566) * C47951) *
                C48225) *
               C48110 * C47870) *
              C47996 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C561 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C48175 -
             (C17212 + C17213) * C562 - (C17214 + C17215) * C47951) *
                C15915 +
            ((C17213 + C17212) * C561 + (C17215 + C17214) * C48175 -
             (C17217 + C17216) * C562 - (C17219 + C17218) * C47951) *
                C48225) *
               C48110 * C2459 +
           (((C18286 + C18287) * C562 -
             ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                  C48175 +
              (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                  C561) +
             (C18288 + C18289) * C47951) *
                C15915 +
            ((C15917 * C1170 + C15913 * C1185 + C15918 * C1171 +
              C48194 * C1186) *
                 C562 -
             ((C18289 + C18288) * C48175 + (C18287 + C18286) * C561) +
             (C15917 * C1188 + C15913 * C1197 + C15918 * C1189 +
              C48194 * C1198) *
                 C47951) *
                C48225) *
               C48110 * C47870) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C261 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48246 -
             (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
             (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
                C15915 +
            ((C16115 + C16114) * C261 + (C16117 + C16116) * C48246 -
             (C16119 + C16118) * C262 - (C16121 + C16120) * C48234 +
             (C17031 + C17030) * C263 + (C17033 + C17032) * C48207) *
                C48225) *
               C48110 * C2459 +
           (((C16122 + C16123) * C262 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48246 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C261) +
             (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
             (C16128 + C16129) * C48207) *
                C15915 +
            ((C16127 + C16126) * C262 -
             ((C16125 + C16124) * C48246 + (C16123 + C16122) * C261) +
             (C16129 + C16128) * C48234 - (C17359 + C17358) * C263 -
             (C17361 + C17360) * C48207) *
                C48225) *
               C48110 * C47870) *
              C3120 +
          ((((C16774 + C16775) * C262 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C48246 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C261) +
             (C16776 + C16777) * C48234 - (C17208 + C17209) * C263 -
             (C17210 + C17211) * C48207) *
                C15915 +
            ((C17209 + C17208) * C262 -
             ((C16777 + C16776) * C48246 + (C16775 + C16774) * C261) +
             (C17211 + C17210) * C48234 - (C17707 + C17706) * C263 -
             (C17709 + C17708) * C48207) *
                C48225) *
               C48110 * C2459 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C261 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C48246 -
             (C16778 + C16779) * C262 - (C16780 + C16781) * C48234 +
             (C17564 + C17565) * C263 + (C17566 + C17567) * C48207) *
                C15915 +
            ((C16779 + C16778) * C261 + (C16781 + C16780) * C48246 -
             (C17565 + C17564) * C262 - (C17567 + C17566) * C48234 +
             (C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48194 * C1564) *
                 C263 +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48194 * C1570) *
                 C48207) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C48252 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C48245 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C15915 +
            ((C16131 + C16130) * C116 + (C16133 + C16132) * C47888) * C48225) *
               C48110 * C48232 -
           (((C16425 + C16424) * C47888 + (C16423 + C16422) * C116) * C48225 +
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C47888 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C15915) *
               C48110 * C48211) *
              C3120 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C16779 + C16778) * C116 + (C16781 + C16780) * C47888) * C48225) *
               C48110 * C48245 -
           (((C16777 + C16776) * C47888 + (C16775 + C16774) * C116) * C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C48252 -
           (((C16785 + C16784) * C47888 + (C16783 + C16782) * C116) * C48225 +
            ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                 C47888 +
             (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C15915) *
               C48110 * C48232 +
           (((C15917 * C419 + C15913 * C429 + C15918 * C421 + C48194 * C436) *
                 C116 +
             (C15917 * C432 + C15913 * C449 + C15918 * C435 + C48194 * C451) *
                 C47888) *
                C15915 +
            ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48194 * C830) *
                 C116 +
             (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48194 * C836) *
                 C47888) *
                C48225) *
               C48110 * C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C2459 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C47870) *
              C48254 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C16779 + C16778) * C116 + (C16781 + C16780) * C47888) * C48225) *
               C48110 * C47870 -
           (((C16777 + C16776) * C47888 + (C16775 + C16774) * C116) * C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C2459) *
              C48251 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C116 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C47888) *
                C15915 +
            ((C17213 + C17212) * C116 + (C17215 + C17214) * C47888) * C48225) *
               C48110 * C2459 -
           (((C18289 + C18288) * C47888 + (C18287 + C18286) * C116) * C48225 +
            ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                 C47888 +
             (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                 C116) *
                C15915) *
               C48110 * C47870) *
              C48242 +
          ((((C15917 * C1862 + C15913 * C1871 + C15918 * C1861 +
              C48194 * C1870) *
                 C116 +
             (C15917 * C1868 + C15913 * C1880 + C15918 * C1867 +
              C48194 * C1879) *
                 C47888) *
                C15915 +
            ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48194 * C2244) *
                 C116 +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48194 * C2250) *
                 C47888) *
                C48225) *
               C48110 * C47870 -
           (((C18561 + C18560) * C47888 + (C18559 + C18558) * C116) * C48225 +
            ((C15918 * C1868 + C48194 * C1880 + C15917 * C1869 +
              C15913 * C1881) *
                 C47888 +
             (C15918 * C1862 + C48194 * C1871 + C15917 * C1863 +
              C15913 * C1872) *
                 C116) *
                C15915) *
               C48110 * C2459) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C47865 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C47873 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C15915 +
            ((C16131 + C16130) * C116 + (C16133 + C16132) * C47888) * C48225) *
               C48110 * C2726) *
              C47989 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C16779 + C16778) * C116 + (C16781 + C16780) * C47888) * C48225) *
               C48110 * C47873 -
           (((C16777 + C16776) * C47888 + (C16775 + C16774) * C116) * C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C47865 -
           (((C16785 + C16784) * C47888 + (C16783 + C16782) * C116) * C48225 +
            ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                 C47888 +
             (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C15915) *
               C48110 * C2726) *
              C47996 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C116 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C47888) *
                C15915 +
            ((C17213 + C17212) * C116 + (C17215 + C17214) * C47888) * C48225) *
               C48110 * C47865 -
           (((C18289 + C18288) * C47888 + (C18287 + C18286) * C116) * C48225 +
            ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                 C47888 +
             (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                 C116) *
                C15915) *
               C48110 * C47873 +
           (((C15917 * C424 + C15913 * C439 + C15918 * C425 + C48194 * C444) *
                 C116 +
             (C15917 * C442 + C15913 * C454 + C15918 * C443 + C48194 * C455) *
                 C47888) *
                C15915 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C116 +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47888) *
                C48225) *
               C48110 * C2726) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C48252 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C48245 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C15915 +
            ((C16131 + C16130) * C116 + (C16133 + C16132) * C47888) * C48225) *
               C48110 * C48232 -
           (((C16425 + C16424) * C47888 + (C16423 + C16422) * C116) * C48225 +
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C47888 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C15915) *
               C48110 * C48211) *
              C3120 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C16779 + C16778) * C116 + (C16781 + C16780) * C47888) * C48225) *
               C48110 * C48245 -
           (((C16777 + C16776) * C47888 + (C16775 + C16774) * C116) * C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C48252 -
           (((C16785 + C16784) * C47888 + (C16783 + C16782) * C116) * C48225 +
            ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                 C47888 +
             (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C15915) *
               C48110 * C48232 +
           (((C15917 * C419 + C15913 * C429 + C15918 * C421 + C48194 * C436) *
                 C116 +
             (C15917 * C432 + C15913 * C449 + C15918 * C435 + C48194 * C451) *
                 C47888) *
                C15915 +
            ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48194 * C830) *
                 C116 +
             (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48194 * C836) *
                 C47888) *
                C48225) *
               C48110 * C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C261 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48246 -
             (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
             (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
                C15915 +
            ((C16115 + C16114) * C261 + (C16117 + C16116) * C48246 -
             (C16119 + C16118) * C262 - (C16121 + C16120) * C48234 +
             (C17031 + C17030) * C263 + (C17033 + C17032) * C48207) *
                C48225) *
               C48110 * C2459 +
           (((C16122 + C16123) * C262 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48246 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C261) +
             (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
             (C16128 + C16129) * C48207) *
                C15915 +
            ((C16127 + C16126) * C262 -
             ((C16125 + C16124) * C48246 + (C16123 + C16122) * C261) +
             (C16129 + C16128) * C48234 - (C17359 + C17358) * C263 -
             (C17361 + C17360) * C48207) *
                C48225) *
               C48110 * C47870) *
              C3120 +
          ((((C16774 + C16775) * C262 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C48246 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C261) +
             (C16776 + C16777) * C48234 - (C17208 + C17209) * C263 -
             (C17210 + C17211) * C48207) *
                C15915 +
            ((C17209 + C17208) * C262 -
             ((C16777 + C16776) * C48246 + (C16775 + C16774) * C261) +
             (C17211 + C17210) * C48234 - (C17707 + C17706) * C263 -
             (C17709 + C17708) * C48207) *
                C48225) *
               C48110 * C2459 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C261 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C48246 -
             (C16778 + C16779) * C262 - (C16780 + C16781) * C48234 +
             (C17564 + C17565) * C263 + (C17566 + C17567) * C48207) *
                C15915 +
            ((C16779 + C16778) * C261 + (C16781 + C16780) * C48246 -
             (C17565 + C17564) * C262 - (C17567 + C17566) * C48234 +
             (C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48194 * C1564) *
                 C263 +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48194 * C1570) *
                 C48207) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C561 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48175 -
            (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
               C15915 +
           ((C16115 + C16114) * C561 + (C16117 + C16116) * C48175 -
            (C16119 + C16118) * C562 - (C16121 + C16120) * C47951) *
               C48225) *
              C48110 * C557 +
          (((C16122 + C16123) * C562 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48175 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C561) +
            (C16124 + C16125) * C47951) *
               C15915 +
           ((C16127 + C16126) * C562 -
            ((C16125 + C16124) * C48175 + (C16123 + C16122) * C561) +
            (C16129 + C16128) * C47951) *
               C48225) *
              C48110 * C558 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C561 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C48175 -
            (C16130 + C16131) * C562 - (C16132 + C16133) * C47951) *
               C15915 +
           ((C16131 + C16130) * C561 + (C16133 + C16132) * C48175 -
            (C16135 + C16134) * C562 - (C16137 + C16136) * C47951) *
               C48225) *
              C48110 * C559 +
          (((C16422 + C16423) * C562 -
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C48175 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C561) +
            (C16424 + C16425) * C47951) *
               C15915 +
           ((C15917 * C271 + C15913 * C288 + C15918 * C273 + C48194 * C292) *
                C562 -
            ((C16425 + C16424) * C48175 + (C16423 + C16422) * C561) +
            (C15917 * C289 + C15913 * C301 + C15918 * C293 + C48194 * C303) *
                C47951) *
               C48225) *
              C48110 * C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C1303 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C1297 -
            (C16114 + C16115) * C1304 - (C16116 + C16117) * C1298 +
            (C16118 + C16119) * C1305 + (C16120 + C16121) * C1299 -
            (C17030 + C17031) * C1306 - (C17032 + C17033) * C48217) *
               C15915 +
           ((C16115 + C16114) * C1303 + (C16117 + C16116) * C1297 -
            (C16119 + C16118) * C1304 - (C16121 + C16120) * C1298 +
            (C17031 + C17030) * C1305 + (C17033 + C17032) * C1299 -
            (C17035 + C17034) * C1306 - (C17037 + C17036) * C48217) *
               C48225) *
              C48110 * C48161 +
          (((C16122 + C16123) * C1304 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C1297 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C1303) +
            (C16124 + C16125) * C1298 - (C16126 + C16127) * C1305 -
            (C16128 + C16129) * C1299 + (C17358 + C17359) * C1306 +
            (C17360 + C17361) * C48217) *
               C15915 +
           ((C16127 + C16126) * C1304 -
            ((C16125 + C16124) * C1297 + (C16123 + C16122) * C1303) +
            (C16129 + C16128) * C1298 - (C17359 + C17358) * C1305 -
            (C17361 + C17360) * C1299 +
            (C15917 * C1033 + C15913 * C1042 + C15918 * C1034 +
             C48194 * C1043) *
                C1306 +
            (C15917 * C1045 + C15913 * C1051 + C15918 * C1046 +
             C48194 * C1052) *
                C48217) *
               C48225) *
              C48110 * C47870) *
         C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C561 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48175 -
             (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
                C15915 +
            ((C16115 + C16114) * C561 + (C16117 + C16116) * C48175 -
             (C16119 + C16118) * C562 - (C16121 + C16120) * C47951) *
                C48225) *
               C48110 * C258 +
           (((C16122 + C16123) * C562 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48175 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C561) +
             (C16124 + C16125) * C47951) *
                C15915 +
            ((C16127 + C16126) * C562 -
             ((C16125 + C16124) * C48175 + (C16123 + C16122) * C561) +
             (C16129 + C16128) * C47951) *
                C48225) *
               C48110 * C259 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C561 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C48175 -
             (C16130 + C16131) * C562 - (C16132 + C16133) * C47951) *
                C15915 +
            ((C16131 + C16130) * C561 + (C16133 + C16132) * C48175 -
             (C16135 + C16134) * C562 - (C16137 + C16136) * C47951) *
                C48225) *
               C48110 * C48201) *
              C48176 +
          ((((C16774 + C16775) * C562 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C48175 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C561) +
             (C16776 + C16777) * C47951) *
                C15915 +
            ((C15917 * C1165 + C15913 * C1174 + C15918 * C1164 +
              C48194 * C1173) *
                 C562 -
             ((C16777 + C16776) * C48175 + (C16775 + C16774) * C561) +
             (C15917 * C1177 + C15913 * C1192 + C15918 * C1176 +
              C48194 * C1191) *
                 C47951) *
                C48225) *
               C48110 * C258 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C561 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C48175 -
             (C16778 + C16779) * C562 - (C16780 + C16781) * C47951) *
                C15915 +
            ((C16779 + C16778) * C561 + (C16781 + C16780) * C48175 -
             (C15918 * C1163 + C48194 * C1172 + C15917 * C1164 +
              C15913 * C1173) *
                 C562 -
             (C15918 * C1175 + C48194 * C1190 + C15917 * C1176 +
              C15913 * C1191) *
                 C47951) *
                C48225) *
               C48110 * C259 +
           (((C16782 + C16783) * C562 -
             ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                  C48175 +
              (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                  C561) +
             (C16784 + C16785) * C47951) *
                C15915 +
            ((C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
              C48194 * C1458) *
                 C562 -
             ((C16785 + C16784) * C48175 + (C16783 + C16782) * C561) +
             (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
              C48194 * C1460) *
                 C47951) *
                C48225) *
               C48110 * C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C1303 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C1297 -
            (C16114 + C16115) * C1304 - (C16116 + C16117) * C1298 +
            (C16118 + C16119) * C1305 + (C16120 + C16121) * C1299 -
            (C17030 + C17031) * C1306 - (C17032 + C17033) * C48217) *
               C15915 +
           ((C16115 + C16114) * C1303 + (C16117 + C16116) * C1297 -
            (C16119 + C16118) * C1304 - (C16121 + C16120) * C1298 +
            (C17031 + C17030) * C1305 + (C17033 + C17032) * C1299 -
            (C17035 + C17034) * C1306 - (C17037 + C17036) * C48217) *
               C48225) *
              C48110 * C47860 * C48176 +
          (((C16774 + C16775) * C1304 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C1297 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C1303) +
            (C16776 + C16777) * C1298 - (C17208 + C17209) * C1305 -
            (C17210 + C17211) * C1299 + (C17706 + C17707) * C1306 +
            (C17708 + C17709) * C48217) *
               C15915 +
           ((C17209 + C17208) * C1304 -
            ((C16777 + C16776) * C1297 + (C16775 + C16774) * C1303) +
            (C17211 + C17210) * C1298 - (C17707 + C17706) * C1305 -
            (C17709 + C17708) * C1299 +
            (C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48194 * C6404) *
                C1306 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48194 * C6408) *
                C48217) *
               C48225) *
              C48110 * C47860 * C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C261 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48246 -
            (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
            (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C261 + (C16117 + C16116) * C48246 -
            (C16119 + C16118) * C262 - (C16121 + C16120) * C48234 +
            (C15917 * C1031 + C15913 * C1037 + C15918 * C1030 +
             C48194 * C1036) *
                C263 +
            (C15917 * C1040 + C15913 * C1049 + C15918 * C1039 +
             C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C258 +
          (((C16122 + C16123) * C262 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48246 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C261) +
            (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
            (C16128 + C16129) * C48207) *
               C15915 +
           ((C16127 + C16126) * C262 -
            ((C16125 + C16124) * C48246 + (C16123 + C16122) * C261) +
            (C16129 + C16128) * C48234 -
            (C15918 * C1029 + C48194 * C1035 + C15917 * C1030 +
             C15913 * C1036) *
                C263 -
            (C15918 * C1038 + C48194 * C1047 + C15917 * C1039 +
             C15913 * C1048) *
                C48207) *
               C48225) *
              C48110 * C259 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C261 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C48246 -
            (C16130 + C16131) * C262 - (C16132 + C16133) * C48234 +
            (C16134 + C16135) * C263 + (C16136 + C16137) * C48207) *
               C15915 +
           ((C16131 + C16130) * C261 + (C16133 + C16132) * C48246 -
            (C16135 + C16134) * C262 - (C16137 + C16136) * C48234 +
            (C15917 * C1029 + C15913 * C1035 + C15918 * C1307 +
             C48194 * C1308) *
                C263 +
            (C15917 * C1038 + C15913 * C1047 + C15918 * C1309 +
             C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47888) *
               C15915 +
           ((C15917 * C266 + C15913 * C276 + C15918 * C265 + C48194 * C275) *
                C116 +
            (C15917 * C279 + C15913 * C296 + C15918 * C278 + C48194 * C295) *
                C47888) *
               C48225) *
              C48110 * C107 -
          (((C15918 * C277 + C48194 * C294 + C15917 * C278 + C15913 * C295) *
                C47888 +
            (C15918 * C264 + C48194 * C274 + C15917 * C265 + C15913 * C275) *
                C116) *
               C48225 +
           ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                C47888 +
            (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C15915) *
              C48110 * C108 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C47888) *
               C15915 +
           ((C15917 * C264 + C15913 * C274 + C15918 * C270 + C48194 * C286) *
                C116 +
            (C15917 * C277 + C15913 * C294 + C15918 * C287 + C48194 * C300) *
                C47888) *
               C48225) *
              C48110 * C109 -
          (((C15918 * C291 + C48194 * C302 + C15917 * C287 + C15913 * C300) *
                C47888 +
            (C15918 * C272 + C48194 * C290 + C15917 * C270 + C15913 * C286) *
                C116) *
               C48225 +
           ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                C47888 +
            (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C15915) *
              C48110 * C110 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48194 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48194 * C143) *
                C47888) *
               C15915 +
           ((C15917 * C272 + C15913 * C290 + C15918 * C563 + C48194 * C564) *
                C116 +
            (C15917 * C291 + C15913 * C302 + C15918 * C565 + C48194 * C566) *
                C47888) *
               C48225) *
              C48110 * C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C258 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C259 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C15915 +
            ((C16131 + C16130) * C116 + (C16133 + C16132) * C47888) * C48225) *
               C48110 * C48201) *
              C48247 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C15917 * C818 + C15913 * C823 + C15918 * C819 + C48194 * C824) *
                 C116 +
             (C15917 * C826 + C15913 * C833 + C15918 * C827 + C48194 * C834) *
                 C47888) *
                C48225) *
               C48110 * C259 -
           (((C15918 * C826 + C48194 * C833 + C15917 * C825 + C15913 * C832) *
                 C47888 +
             (C15918 * C818 + C48194 * C823 + C15917 * C817 + C15913 * C822) *
                 C116) *
                C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C258 -
           (((C15918 * C829 + C48194 * C835 + C15917 * C827 + C15913 * C834) *
                 C47888 +
             (C15918 * C820 + C48194 * C828 + C15917 * C819 + C15913 * C824) *
                 C116) *
                C48225 +
            ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                 C47888 +
             (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C15915) *
               C48110 * C48201) *
              C48236 +
          ((((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                 C116 +
             (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                 C47888) *
                C15915 +
            ((C15917 * C1168 + C15913 * C1180 + C15918 * C1167 +
              C48194 * C1179) *
                 C116 +
             (C15917 * C1183 + C15913 * C1195 + C15918 * C1182 +
              C48194 * C1194) *
                 C47888) *
                C48225) *
               C48110 * C258 -
           (((C15918 * C1181 + C48194 * C1193 + C15917 * C1182 +
              C15913 * C1194) *
                 C47888 +
             (C15918 * C1166 + C48194 * C1178 + C15917 * C1167 +
              C15913 * C1179) *
                 C116) *
                C48225 +
            ((C15918 * C442 + C48194 * C454 + C15917 * C441 + C15913 * C453) *
                 C47888 +
             (C15918 * C424 + C48194 * C439 + C15917 * C423 + C15913 * C438) *
                 C116) *
                C15915) *
               C48110 * C259 +
           (((C15917 * C424 + C15913 * C439 + C15918 * C425 + C48194 * C444) *
                 C116 +
             (C15917 * C442 + C15913 * C454 + C15918 * C443 + C48194 * C455) *
                 C47888) *
                C15915 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C116 +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47888) *
                C48225) *
               C48110 * C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C953 + (C16117 + C16116) * C947 -
            (C16119 + C16118) * C954 - (C16121 + C16120) * C948 +
            (C15917 * C1031 + C15913 * C1037 + C15918 * C1030 +
             C48194 * C1036) *
                C955 +
            (C15917 * C1040 + C15913 * C1049 + C15918 * C1039 +
             C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48243 +
          (((C16122 + C16123) * C954 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C947 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C953) +
            (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
            (C16128 + C16129) * C48207) *
               C15915 +
           ((C16127 + C16126) * C954 -
            ((C16125 + C16124) * C947 + (C16123 + C16122) * C953) +
            (C16129 + C16128) * C948 -
            (C15918 * C1029 + C48194 * C1035 + C15917 * C1030 +
             C15913 * C1036) *
                C955 -
            (C15918 * C1038 + C48194 * C1047 + C15917 * C1039 +
             C15913 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48230 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C953 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C947 -
            (C16130 + C16131) * C954 - (C16132 + C16133) * C948 +
            (C16134 + C16135) * C955 + (C16136 + C16137) * C48207) *
               C15915 +
           ((C16131 + C16130) * C953 + (C16133 + C16132) * C947 -
            (C16135 + C16134) * C954 - (C16137 + C16136) * C948 +
            (C15917 * C1029 + C15913 * C1035 + C15918 * C1307 +
             C48194 * C1308) *
                C955 +
            (C15917 * C1038 + C15913 * C1047 + C15918 * C1309 +
             C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
               C1024 +
           (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
               C1018 -
           (C16114 + C16115) * C1025 - (C16116 + C16117) * C1019 +
           (C16118 + C16119) * C1026 + (C16120 + C16121) * C1020 -
           (C17030 + C17031) * C1027 - (C17032 + C17033) * C1021 +
           (C17034 + C17035) * C1028 + (C17036 + C17037) * C1022) *
              C15915 +
          ((C16115 + C16114) * C1024 + (C16117 + C16116) * C1018 -
           (C16119 + C16118) * C1025 - (C16121 + C16120) * C1019 +
           (C17031 + C17030) * C1026 + (C17033 + C17032) * C1020 -
           (C17035 + C17034) * C1027 - (C17037 + C17036) * C1021 +
           (C15917 * C5701 + C15913 * C5703 + C15918 * C5702 + C48194 * C5704) *
               C1028 +
           (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 + C48194 * C5708) *
               C1022) *
              C48225) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C953 + (C16117 + C16116) * C947 -
            (C16119 + C16118) * C954 - (C16121 + C16120) * C948 +
            (C17031 + C17030) * C955 + (C17033 + C17032) * C48207) *
               C48225) *
              C48110 * C47860 * C48247 +
          (((C16774 + C16775) * C954 -
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C947 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C953) +
            (C16776 + C16777) * C948 - (C17208 + C17209) * C955 -
            (C17210 + C17211) * C48207) *
               C15915 +
           ((C17209 + C17208) * C954 -
            ((C16777 + C16776) * C947 + (C16775 + C16774) * C953) +
            (C17211 + C17210) * C948 -
            (C15918 * C1560 + C48194 * C1563 + C15917 * C1559 +
             C15913 * C1562) *
                C955 -
            (C15918 * C1566 + C48194 * C1569 + C15917 * C1565 +
             C15913 * C1568) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48236 +
          (((C15917 * C422 + C15913 * C437 + C15918 * C423 + C48194 * C438) *
                C953 +
            (C15917 * C440 + C15913 * C452 + C15918 * C441 + C48194 * C453) *
                C947 -
            (C17212 + C17213) * C954 - (C17214 + C17215) * C948 +
            (C17216 + C17217) * C955 + (C17218 + C17219) * C48207) *
               C15915 +
           ((C17213 + C17212) * C953 + (C17215 + C17214) * C947 -
            (C17217 + C17216) * C954 - (C17219 + C17218) * C948 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48194 * C5882) *
                C955 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48194 * C5886) *
                C48207) *
               C48225) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C15915 +
            ((C16115 + C16114) * C116 + (C16117 + C16116) * C47888) * C48225) *
               C48110 * C557 -
           (((C16125 + C16124) * C47888 + (C16123 + C16122) * C116) * C48225 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48110 * C558 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C15915 +
            ((C16131 + C16130) * C116 + (C16133 + C16132) * C47888) * C48225) *
               C48110 * C559 -
           (((C16425 + C16424) * C47888 + (C16423 + C16422) * C116) * C48225 +
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C47888 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C15915) *
               C48110 * C48211) *
              C48176 +
          ((((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C47888) *
                C15915 +
            ((C15917 * C818 + C15913 * C823 + C15918 * C819 + C48194 * C824) *
                 C116 +
             (C15917 * C826 + C15913 * C833 + C15918 * C827 + C48194 * C834) *
                 C47888) *
                C48225) *
               C48110 * C558 -
           (((C15918 * C826 + C48194 * C833 + C15917 * C825 + C15913 * C832) *
                 C47888 +
             (C15918 * C818 + C48194 * C823 + C15917 * C817 + C15913 * C822) *
                 C116) *
                C48225 +
            ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                 C47888 +
             (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                 C116) *
                C15915) *
               C48110 * C557 -
           (((C15918 * C829 + C48194 * C835 + C15917 * C827 + C15913 * C834) *
                 C47888 +
             (C15918 * C820 + C48194 * C828 + C15917 * C819 + C15913 * C824) *
                 C116) *
                C48225 +
            ((C15918 * C432 + C48194 * C449 + C15917 * C431 + C15913 * C448) *
                 C47888 +
             (C15918 * C419 + C48194 * C429 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C15915) *
               C48110 * C559 +
           (((C15917 * C419 + C15913 * C429 + C15918 * C421 + C48194 * C436) *
                 C116 +
             (C15917 * C432 + C15913 * C449 + C15918 * C435 + C48194 * C451) *
                 C47888) *
                C15915 +
            ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48194 * C830) *
                 C116 +
             (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48194 * C836) *
                 C47888) *
                C48225) *
               C48110 * C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C953 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C947 -
             (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
             (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
                C15915 +
            ((C16115 + C16114) * C953 + (C16117 + C16116) * C947 -
             (C16119 + C16118) * C954 - (C16121 + C16120) * C948 +
             (C17031 + C17030) * C955 + (C17033 + C17032) * C48207) *
                C48225) *
               C48110 * C48161 +
           (((C16122 + C16123) * C954 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C947 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C953) +
             (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
             (C16128 + C16129) * C48207) *
                C15915 +
            ((C16127 + C16126) * C954 -
             ((C16125 + C16124) * C947 + (C16123 + C16122) * C953) +
             (C16129 + C16128) * C948 - (C17359 + C17358) * C955 -
             (C17361 + C17360) * C48207) *
                C48225) *
               C48110 * C47870) *
              C48176 +
          ((((C16774 + C16775) * C954 -
             ((C15918 * C430 + C48194 * C447 + C15917 * C433 + C15913 * C450) *
                  C947 +
              (C15918 * C417 + C48194 * C427 + C15917 * C420 + C15913 * C434) *
                  C953) +
             (C16776 + C16777) * C948 - (C17208 + C17209) * C955 -
             (C17210 + C17211) * C48207) *
                C15915 +
            ((C17209 + C17208) * C954 -
             ((C16777 + C16776) * C947 + (C16775 + C16774) * C953) +
             (C17211 + C17210) * C948 -
             (C15918 * C1560 + C48194 * C1563 + C15917 * C1559 +
              C15913 * C1562) *
                 C955 -
             (C15918 * C1566 + C48194 * C1569 + C15917 * C1565 +
              C15913 * C1568) *
                 C48207) *
                C48225) *
               C48110 * C48161 +
           (((C15917 * C417 + C15913 * C427 + C15918 * C418 + C48194 * C428) *
                 C953 +
             (C15917 * C430 + C15913 * C447 + C15918 * C431 + C48194 * C448) *
                 C947 -
             (C16778 + C16779) * C954 - (C16780 + C16781) * C948 +
             (C17564 + C17565) * C955 + (C17566 + C17567) * C48207) *
                C15915 +
            ((C16779 + C16778) * C953 + (C16781 + C16780) * C947 -
             (C17565 + C17564) * C954 - (C17567 + C17566) * C948 +
             (C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
              C48194 * C1564) *
                 C955 +
             (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
              C48194 * C1570) *
                 C48207) *
                C48225) *
               C48110 * C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47888) *
               C15915 +
           ((C15917 * C266 + C15913 * C276 + C15918 * C265 + C48194 * C275) *
                C116 +
            (C15917 * C279 + C15913 * C296 + C15918 * C278 + C48194 * C295) *
                C47888) *
               C48225) *
              C48110 * C107 -
          (((C15918 * C277 + C48194 * C294 + C15917 * C278 + C15913 * C295) *
                C47888 +
            (C15918 * C264 + C48194 * C274 + C15917 * C265 + C15913 * C275) *
                C116) *
               C48225 +
           ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                C47888 +
            (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C15915) *
              C48110 * C108 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C47888) *
               C15915 +
           ((C15917 * C264 + C15913 * C274 + C15918 * C270 + C48194 * C286) *
                C116 +
            (C15917 * C277 + C15913 * C294 + C15918 * C287 + C48194 * C300) *
                C47888) *
               C48225) *
              C48110 * C109 -
          (((C15918 * C291 + C48194 * C302 + C15917 * C287 + C15913 * C300) *
                C47888 +
            (C15918 * C272 + C48194 * C290 + C15917 * C270 + C15913 * C286) *
                C116) *
               C48225 +
           ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                C47888 +
            (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C15915) *
              C48110 * C110 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48194 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48194 * C143) *
                C47888) *
               C15915 +
           ((C15917 * C272 + C15913 * C290 + C15918 * C563 + C48194 * C564) *
                C116 +
            (C15917 * C291 + C15913 * C302 + C15918 * C565 + C48194 * C566) *
                C47888) *
               C48225) *
              C48110 * C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C261 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48246 -
            (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
            (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C261 + (C16117 + C16116) * C48246 -
            (C16119 + C16118) * C262 - (C16121 + C16120) * C48234 +
            (C15917 * C1031 + C15913 * C1037 + C15918 * C1030 +
             C48194 * C1036) *
                C263 +
            (C15917 * C1040 + C15913 * C1049 + C15918 * C1039 +
             C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C258 +
          (((C16122 + C16123) * C262 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48246 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C261) +
            (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
            (C16128 + C16129) * C48207) *
               C15915 +
           ((C16127 + C16126) * C262 -
            ((C16125 + C16124) * C48246 + (C16123 + C16122) * C261) +
            (C16129 + C16128) * C48234 -
            (C15918 * C1029 + C48194 * C1035 + C15917 * C1030 +
             C15913 * C1036) *
                C263 -
            (C15918 * C1038 + C48194 * C1047 + C15917 * C1039 +
             C15913 * C1048) *
                C48207) *
               C48225) *
              C48110 * C259 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C261 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C48246 -
            (C16130 + C16131) * C262 - (C16132 + C16133) * C48234 +
            (C16134 + C16135) * C263 + (C16136 + C16137) * C48207) *
               C15915 +
           ((C16131 + C16130) * C261 + (C16133 + C16132) * C48246 -
            (C16135 + C16134) * C262 - (C16137 + C16136) * C48234 +
            (C15917 * C1029 + C15913 * C1035 + C15918 * C1307 +
             C48194 * C1308) *
                C263 +
            (C15917 * C1038 + C15913 * C1047 + C15918 * C1309 +
             C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C15915 +
           ((C16115 + C16114) * C953 + (C16117 + C16116) * C947 -
            (C16119 + C16118) * C954 - (C16121 + C16120) * C948 +
            (C15917 * C1031 + C15913 * C1037 + C15918 * C1030 +
             C48194 * C1036) *
                C955 +
            (C15917 * C1040 + C15913 * C1049 + C15918 * C1039 +
             C48194 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48243 +
          (((C16122 + C16123) * C954 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C947 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C953) +
            (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
            (C16128 + C16129) * C48207) *
               C15915 +
           ((C16127 + C16126) * C954 -
            ((C16125 + C16124) * C947 + (C16123 + C16122) * C953) +
            (C16129 + C16128) * C948 -
            (C15918 * C1029 + C48194 * C1035 + C15917 * C1030 +
             C15913 * C1036) *
                C955 -
            (C15918 * C1038 + C48194 * C1047 + C15917 * C1039 +
             C15913 * C1048) *
                C48207) *
               C48225) *
              C48110 * C48230 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C953 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C947 -
            (C16130 + C16131) * C954 - (C16132 + C16133) * C948 +
            (C16134 + C16135) * C955 + (C16136 + C16137) * C48207) *
               C15915 +
           ((C16131 + C16130) * C953 + (C16133 + C16132) * C947 -
            (C16135 + C16134) * C954 - (C16137 + C16136) * C948 +
            (C15917 * C1029 + C15913 * C1035 + C15918 * C1307 +
             C48194 * C1308) *
                C955 +
            (C15917 * C1038 + C15913 * C1047 + C15918 * C1309 +
             C48194 * C1310) *
                C48207) *
               C48225) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
               C1024 +
           (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
               C1018 -
           (C16114 + C16115) * C1025 - (C16116 + C16117) * C1019 +
           (C16118 + C16119) * C1026 + (C16120 + C16121) * C1020 -
           (C17030 + C17031) * C1027 - (C17032 + C17033) * C1021 +
           (C17034 + C17035) * C1028 + (C17036 + C17037) * C1022) *
              C15915 +
          ((C16115 + C16114) * C1024 + (C16117 + C16116) * C1018 -
           (C16119 + C16118) * C1025 - (C16121 + C16120) * C1019 +
           (C17031 + C17030) * C1026 + (C17033 + C17032) * C1020 -
           (C17035 + C17034) * C1027 - (C17037 + C17036) * C1021 +
           (C15917 * C5701 + C15913 * C5703 + C15918 * C5702 + C48194 * C5704) *
               C1028 +
           (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 + C48194 * C5708) *
               C1022) *
              C48225) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C47047 +
            (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
            C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
               C21588 +
           (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
            C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
               C21589 +
           (C21741 * C47047 + C21742 * C47947 - C21743 * C47039 -
            C21744 * C47954 + C22441 * C47053 + C22442 * C2723) *
               C21590) *
              C48110 * C47865 +
          ((C21745 * C47039 -
            ((C21591 * C128 + C47839 * C139) * C47947 +
             (C21591 * C118 + C47839 * C125) * C47047) +
            C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
               C21588 +
           (C21747 * C47039 - (C21746 * C47947 + C21745 * C47047) +
            C21748 * C47954 - C21749 * C47053 - C21750 * C2723) *
               C21589 +
           (C21749 * C47039 - (C21748 * C47947 + C21747 * C47047) +
            C21750 * C47954 - C22685 * C47053 - C22686 * C2723) *
               C21590) *
              C48110 * C47873 +
          (((C21591 * C119 + C47839 * C126) * C47047 +
            (C21591 * C129 + C47839 * C140) * C47947 - C21751 * C47039 -
            C21752 * C47954 + C21753 * C47053 + C21754 * C2723) *
               C21588 +
           (C21751 * C47047 + C21752 * C47947 - C21753 * C47039 -
            C21754 * C47954 + C21755 * C47053 + C21756 * C2723) *
               C21589 +
           (C21753 * C47047 + C21754 * C47947 - C21755 * C47039 -
            C21756 * C47954 + (C21591 * C1034 + C47839 * C1043) * C47053 +
            (C21591 * C1046 + C47839 * C1052) * C2723) *
               C21590) *
              C48110 * C2726) *
         C47906) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C47047 +
             (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
             C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                C21588 +
            (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
             C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
                C21589 +
            (C21741 * C47047 + C21742 * C47947 - C21743 * C47039 -
             C21744 * C47954 + C22441 * C47053 + C22442 * C2723) *
                C21590) *
               C48110 * C2459 +
           ((C21745 * C47039 -
             ((C21591 * C128 + C47839 * C139) * C47947 +
              (C21591 * C118 + C47839 * C125) * C47047) +
             C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
                C21588 +
            (C21747 * C47039 - (C21746 * C47947 + C21745 * C47047) +
             C21748 * C47954 - C21749 * C47053 - C21750 * C2723) *
                C21589 +
            (C21749 * C47039 - (C21748 * C47947 + C21747 * C47047) +
             C21750 * C47954 - C22685 * C47053 - C22686 * C2723) *
                C21590) *
               C48110 * C47870) *
              C48176 +
          (((C22245 * C47039 -
             ((C21591 * C433 + C47839 * C450) * C47947 +
              (C21591 * C420 + C47839 * C434) * C47047) +
             C22246 * C47954 - C22247 * C47053 - C22248 * C2723) *
                C21588 +
            (C22247 * C47039 - (C22246 * C47947 + C22245 * C47047) +
             C22248 * C47954 - C22575 * C47053 - C22576 * C2723) *
                C21589 +
            (C22575 * C47039 - (C22248 * C47947 + C22247 * C47047) +
             C22576 * C47954 - C22945 * C47053 - C22946 * C2723) *
                C21590) *
               C48110 * C2459 +
           (((C21591 * C417 + C47839 * C427) * C47047 +
             (C21591 * C430 + C47839 * C447) * C47947 - C22249 * C47039 -
             C22250 * C47954 + C22251 * C47053 + C22252 * C2723) *
                C21588 +
            (C22249 * C47047 + C22250 * C47947 - C22251 * C47039 -
             C22252 * C47954 + C22837 * C47053 + C22838 * C2723) *
                C21589 +
            (C22251 * C47047 + C22252 * C47947 - C22837 * C47039 -
             C22838 * C47954 + (C21591 * C6402 + C47839 * C6404) * C47053 +
             (C21591 * C6406 + C47839 * C6408) * C2723) *
                C21590) *
               C48110 * C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2461 +
                     (C21591 * C127 + C47839 * C138) * C48253 - C21739 * C2462 -
                     C21740 * C48249 + C21741 * C2463 + C21742 * C48239 -
                     C21743 * C2464 - C21744 * C48217) *
                        C21588 +
                    (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                     C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                     C22441 * C2464 - C22442 * C48217) *
                        C21589 +
                    (C21741 * C2461 + C21742 * C48253 - C21743 * C2462 -
                     C21744 * C48249 + C22441 * C2463 + C22442 * C48239 -
                     C22443 * C2464 - C22444 * C48217) *
                        C21590) *
                       C48110 * C2459 +
                   ((C21745 * C2462 -
                     ((C21591 * C128 + C47839 * C139) * C48253 +
                      (C21591 * C118 + C47839 * C125) * C2461) +
                     C21746 * C48249 - C21747 * C2463 - C21748 * C48239 +
                     C21749 * C2464 + C21750 * C48217) *
                        C21588 +
                    (C21747 * C2462 - (C21746 * C48253 + C21745 * C2461) +
                     C21748 * C48249 - C21749 * C2463 - C21750 * C48239 +
                     C22685 * C2464 + C22686 * C48217) *
                        C21589 +
                    (C21749 * C2462 - (C21748 * C48253 + C21747 * C2461) +
                     C21750 * C48249 - C22685 * C2463 - C22686 * C48239 +
                     (C21591 * C5702 + C47839 * C5704) * C2464 +
                     (C21591 * C5706 + C47839 * C5708) * C48217) *
                        C21590) *
                       C48110 * C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2355 +
                     (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                     C21740 * C47951) *
                        C21588 +
                    (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                     C21742 * C47951) *
                        C21589 +
                    (C21741 * C2355 + C21742 * C2349 - C21743 * C2356 -
                     C21744 * C47951) *
                        C21590) *
                       C48110 * C48252 +
                   ((C21745 * C2356 -
                     ((C21591 * C128 + C47839 * C139) * C2349 +
                      (C21591 * C118 + C47839 * C125) * C2355) +
                     C21746 * C47951) *
                        C21588 +
                    (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                     C21748 * C47951) *
                        C21589 +
                    (C21749 * C2356 - (C21748 * C2349 + C21747 * C2355) +
                     C21750 * C47951) *
                        C21590) *
                       C48110 * C48245 +
                   (((C21591 * C119 + C47839 * C126) * C2355 +
                     (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                     C21752 * C47951) *
                        C21588 +
                    (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                     C21754 * C47951) *
                        C21589 +
                    (C21753 * C2355 + C21754 * C2349 - C21755 * C2356 -
                     C21756 * C47951) *
                        C21590) *
                       C48110 * C48232 +
                   ((C21973 * C2356 -
                     ((C21591 * C130 + C47839 * C141) * C2349 +
                      (C21591 * C120 + C47839 * C131) * C2355) +
                     C21974 * C47951) *
                        C21588 +
                    (C21975 * C2356 - (C21974 * C2349 + C21973 * C2355) +
                     C21976 * C47951) *
                        C21589 +
                    ((C21591 * C1307 + C47839 * C1308) * C2356 -
                     (C21976 * C2349 + C21975 * C2355) +
                     (C21591 * C1309 + C47839 * C1310) * C47951) *
                        C21590) *
                       C48110 * C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C21588 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C21589 +
                     (C21741 * C2355 + C21742 * C2349 - C21743 * C2356 -
                      C21744 * C47951) *
                         C21590) *
                        C48110 * C2459 +
                    ((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C21588 +
                     (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                      C21748 * C47951) *
                         C21589 +
                     (C21749 * C2356 - (C21748 * C2349 + C21747 * C2355) +
                      C21750 * C47951) *
                         C21590) *
                        C48110 * C47870) *
                       C48247 +
                   (((C22245 * C2356 -
                      ((C21591 * C433 + C47839 * C450) * C2349 +
                       (C21591 * C420 + C47839 * C434) * C2355) +
                      C22246 * C47951) *
                         C21588 +
                     (C22247 * C2356 - (C22246 * C2349 + C22245 * C2355) +
                      C22248 * C47951) *
                         C21589 +
                     (C22575 * C2356 - (C22248 * C2349 + C22247 * C2355) +
                      C22576 * C47951) *
                         C21590) *
                        C48110 * C2459 +
                    (((C21591 * C417 + C47839 * C427) * C2355 +
                      (C21591 * C430 + C47839 * C447) * C2349 - C22249 * C2356 -
                      C22250 * C47951) *
                         C21588 +
                     (C22249 * C2355 + C22250 * C2349 - C22251 * C2356 -
                      C22252 * C47951) *
                         C21589 +
                     (C22251 * C2355 + C22252 * C2349 - C22837 * C2356 -
                      C22838 * C47951) *
                         C21590) *
                        C48110 * C47870) *
                       C48236 +
                   ((((C21591 * C422 + C47839 * C437) * C2355 +
                      (C21591 * C440 + C47839 * C452) * C2349 - C22577 * C2356 -
                      C22578 * C47951) *
                         C21588 +
                     (C22577 * C2355 + C22578 * C2349 - C22579 * C2356 -
                      C22580 * C47951) *
                         C21589 +
                     (C22579 * C2355 + C22580 * C2349 - C22581 * C2356 -
                      C22582 * C47951) *
                         C21590) *
                        C48110 * C2459 +
                    ((C23387 * C2356 -
                      ((C21591 * C441 + C47839 * C453) * C2349 +
                       (C21591 * C423 + C47839 * C438) * C2355) +
                      C23388 * C47951) *
                         C21588 +
                     (C23389 * C2356 - (C23388 * C2349 + C23387 * C2355) +
                      C23390 * C47951) *
                         C21589 +
                     ((C21591 * C5880 + C47839 * C5882) * C2356 -
                      (C23390 * C2349 + C23389 * C2355) +
                      (C21591 * C5884 + C47839 * C5886) * C47951) *
                         C21590) *
                        C48110 * C47870) *
                       C48210)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C21588 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C21589 +
                     (C21741 * C2355 + C21742 * C2349 - C21743 * C2356 -
                      C21744 * C47951) *
                         C21590) *
                        C48110 * C47865 +
                    ((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C21588 +
                     (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                      C21748 * C47951) *
                         C21589 +
                     (C21749 * C2356 - (C21748 * C2349 + C21747 * C2355) +
                      C21750 * C47951) *
                         C21590) *
                        C48110 * C47873 +
                    (((C21591 * C119 + C47839 * C126) * C2355 +
                      (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                      C21752 * C47951) *
                         C21588 +
                     (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                      C21754 * C47951) *
                         C21589 +
                     (C21753 * C2355 + C21754 * C2349 - C21755 * C2356 -
                      C21756 * C47951) *
                         C21590) *
                        C48110 * C2726) *
                       C48176 +
                   (((C22245 * C2356 -
                      ((C21591 * C433 + C47839 * C450) * C2349 +
                       (C21591 * C420 + C47839 * C434) * C2355) +
                      C22246 * C47951) *
                         C21588 +
                     (C22247 * C2356 - (C22246 * C2349 + C22245 * C2355) +
                      C22248 * C47951) *
                         C21589 +
                     (C22575 * C2356 - (C22248 * C2349 + C22247 * C2355) +
                      C22576 * C47951) *
                         C21590) *
                        C48110 * C47865 +
                    (((C21591 * C417 + C47839 * C427) * C2355 +
                      (C21591 * C430 + C47839 * C447) * C2349 - C22249 * C2356 -
                      C22250 * C47951) *
                         C21588 +
                     (C22249 * C2355 + C22250 * C2349 - C22251 * C2356 -
                      C22252 * C47951) *
                         C21589 +
                     (C22251 * C2355 + C22252 * C2349 - C22837 * C2356 -
                      C22838 * C47951) *
                         C21590) *
                        C48110 * C47873 +
                    ((C22253 * C2356 -
                      ((C21591 * C431 + C47839 * C448) * C2349 +
                       (C21591 * C418 + C47839 * C428) * C2355) +
                      C22254 * C47951) *
                         C21588 +
                     (C22255 * C2356 - (C22254 * C2349 + C22253 * C2355) +
                      C22256 * C47951) *
                         C21589 +
                     ((C21591 * C1561 + C47839 * C1564) * C2356 -
                      (C22256 * C2349 + C22255 * C2355) +
                      (C21591 * C1567 + C47839 * C1570) * C47951) *
                         C21590) *
                        C48110 * C2726) *
                       C47993)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2355 +
                     (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                     C21740 * C47951) *
                        C21588 +
                    (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                     C21742 * C47951) *
                        C21589 +
                    (C21741 * C2355 + C21742 * C2349 - C21743 * C2356 -
                     C21744 * C47951) *
                        C21590) *
                       C48110 * C48252 +
                   ((C21745 * C2356 -
                     ((C21591 * C128 + C47839 * C139) * C2349 +
                      (C21591 * C118 + C47839 * C125) * C2355) +
                     C21746 * C47951) *
                        C21588 +
                    (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                     C21748 * C47951) *
                        C21589 +
                    (C21749 * C2356 - (C21748 * C2349 + C21747 * C2355) +
                     C21750 * C47951) *
                        C21590) *
                       C48110 * C48245 +
                   (((C21591 * C119 + C47839 * C126) * C2355 +
                     (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                     C21752 * C47951) *
                        C21588 +
                    (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                     C21754 * C47951) *
                        C21589 +
                    (C21753 * C2355 + C21754 * C2349 - C21755 * C2356 -
                     C21756 * C47951) *
                        C21590) *
                       C48110 * C48232 +
                   ((C21973 * C2356 -
                     ((C21591 * C130 + C47839 * C141) * C2349 +
                      (C21591 * C120 + C47839 * C131) * C2355) +
                     C21974 * C47951) *
                        C21588 +
                    (C21975 * C2356 - (C21974 * C2349 + C21973 * C2355) +
                     C21976 * C47951) *
                        C21589 +
                    ((C21591 * C1307 + C47839 * C1308) * C2356 -
                     (C21976 * C2349 + C21975 * C2355) +
                     (C21591 * C1309 + C47839 * C1310) * C47951) *
                        C21590) *
                       C48110 * C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2461 +
                     (C21591 * C127 + C47839 * C138) * C48253 - C21739 * C2462 -
                     C21740 * C48249 + C21741 * C2463 + C21742 * C48239 -
                     C21743 * C2464 - C21744 * C48217) *
                        C21588 +
                    (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                     C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                     C22441 * C2464 - C22442 * C48217) *
                        C21589 +
                    (C21741 * C2461 + C21742 * C48253 - C21743 * C2462 -
                     C21744 * C48249 + C22441 * C2463 + C22442 * C48239 -
                     C22443 * C2464 - C22444 * C48217) *
                        C21590) *
                       C48110 * C2459 +
                   ((C21745 * C2462 -
                     ((C21591 * C128 + C47839 * C139) * C48253 +
                      (C21591 * C118 + C47839 * C125) * C2461) +
                     C21746 * C48249 - C21747 * C2463 - C21748 * C48239 +
                     C21749 * C2464 + C21750 * C48217) *
                        C21588 +
                    (C21747 * C2462 - (C21746 * C48253 + C21745 * C2461) +
                     C21748 * C48249 - C21749 * C2463 - C21750 * C48239 +
                     C22685 * C2464 + C22686 * C48217) *
                        C21589 +
                    (C21749 * C2462 - (C21748 * C48253 + C21747 * C2461) +
                     C21750 * C48249 - C22685 * C2463 - C22686 * C48239 +
                     (C21591 * C5702 + C47839 * C5704) * C2464 +
                     (C21591 * C5706 + C47839 * C5708) * C48217) *
                        C21590) *
                       C48110 * C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C47047 +
             (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
             C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                C21588 +
            (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
             C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
                C21589 +
            (C21741 * C47047 + C21742 * C47947 - C21743 * C47039 -
             C21744 * C47954 + C22441 * C47053 + C22442 * C2723) *
                C21590) *
               C48110 * C48161 +
           ((C21745 * C47039 -
             ((C21591 * C128 + C47839 * C139) * C47947 +
              (C21591 * C118 + C47839 * C125) * C47047) +
             C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
                C21588 +
            (C21747 * C47039 - (C21746 * C47947 + C21745 * C47047) +
             C21748 * C47954 - C21749 * C47053 - C21750 * C2723) *
                C21589 +
            (C21749 * C47039 - (C21748 * C47947 + C21747 * C47047) +
             C21750 * C47954 - C22685 * C47053 - C22686 * C2723) *
                C21590) *
               C48110 * C47870) *
              C3120 +
          (((C22245 * C47039 -
             ((C21591 * C433 + C47839 * C450) * C47947 +
              (C21591 * C420 + C47839 * C434) * C47047) +
             C22246 * C47954 - C22247 * C47053 - C22248 * C2723) *
                C21588 +
            (C22247 * C47039 - (C22246 * C47947 + C22245 * C47047) +
             C22248 * C47954 - C22575 * C47053 - C22576 * C2723) *
                C21589 +
            (C22575 * C47039 - (C22248 * C47947 + C22247 * C47047) +
             C22576 * C47954 - C22945 * C47053 - C22946 * C2723) *
                C21590) *
               C48110 * C48161 +
           (((C21591 * C417 + C47839 * C427) * C47047 +
             (C21591 * C430 + C47839 * C447) * C47947 - C22249 * C47039 -
             C22250 * C47954 + C22251 * C47053 + C22252 * C2723) *
                C21588 +
            (C22249 * C47047 + C22250 * C47947 - C22251 * C47039 -
             C22252 * C47954 + C22837 * C47053 + C22838 * C2723) *
                C21589 +
            (C22251 * C47047 + C22252 * C47947 - C22837 * C47039 -
             C22838 * C47954 + (C21591 * C6402 + C47839 * C6404) * C47053 +
             (C21591 * C6406 + C47839 * C6408) * C2723) *
                C21590) *
               C48110 * C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C47047 +
            (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
            C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
               C21588 +
           (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
            C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
               C21589 +
           (C21741 * C47047 + C21742 * C47947 - C21743 * C47039 -
            C21744 * C47954 + C22441 * C47053 + C22442 * C2723) *
               C21590) *
              C48110 * C47860 * C47989 +
          ((C22245 * C47039 -
            ((C21591 * C433 + C47839 * C450) * C47947 +
             (C21591 * C420 + C47839 * C434) * C47047) +
            C22246 * C47954 - C22247 * C47053 - C22248 * C2723) *
               C21588 +
           (C22247 * C47039 - (C22246 * C47947 + C22245 * C47047) +
            C22248 * C47954 - C22575 * C47053 - C22576 * C2723) *
               C21589 +
           (C22575 * C47039 - (C22248 * C47947 + C22247 * C47047) +
            C22576 * C47954 - C22945 * C47053 - C22946 * C2723) *
               C21590) *
              C48110 * C47860 * C47996 +
          (((C21591 * C422 + C47839 * C437) * C47047 +
            (C21591 * C440 + C47839 * C452) * C47947 - C22577 * C47039 -
            C22578 * C47954 + C22579 * C47053 + C22580 * C2723) *
               C21588 +
           (C22577 * C47047 + C22578 * C47947 - C22579 * C47039 -
            C22580 * C47954 + C22581 * C47053 + C22582 * C2723) *
               C21589 +
           (C22579 * C47047 + C22580 * C47947 - C22581 * C47039 -
            C22582 * C47954 + (C21591 * C22554 + C47839 * C22555) * C47053 +
            (C21591 * C22556 + C47839 * C22557) * C2723) *
               C21590) *
              C48110 * C47860 * C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2461 +
                     (C21591 * C127 + C47839 * C138) * C48253 - C21739 * C2462 -
                     C21740 * C48249 + C21741 * C2463 + C21742 * C48239 -
                     C21743 * C2464 - C21744 * C48217) *
                        C21588 +
                    (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                     C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                     C22441 * C2464 - C22442 * C48217) *
                        C21589 +
                    (C21741 * C2461 + C21742 * C48253 - C21743 * C2462 -
                     C21744 * C48249 + C22441 * C2463 + C22442 * C48239 -
                     C22443 * C2464 - C22444 * C48217) *
                        C21590) *
                       C48110 * C47860 * C3120 +
                   ((C22245 * C2462 -
                     ((C21591 * C433 + C47839 * C450) * C48253 +
                      (C21591 * C420 + C47839 * C434) * C2461) +
                     C22246 * C48249 - C22247 * C2463 - C22248 * C48239 +
                     C22575 * C2464 + C22576 * C48217) *
                        C21588 +
                    (C22247 * C2462 - (C22246 * C48253 + C22245 * C2461) +
                     C22248 * C48249 - C22575 * C2463 - C22576 * C48239 +
                     C22945 * C2464 + C22946 * C48217) *
                        C21589 +
                    (C22575 * C2462 - (C22248 * C48253 + C22247 * C2461) +
                     C22576 * C48249 - C22945 * C2463 - C22946 * C48239 +
                     (C21591 * C22936 + C47839 * C22937) * C2464 +
                     (C21591 * C22938 + C47839 * C22939) * C48217) *
                        C21590) *
                       C48110 * C47860 * C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C21588 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C21589 +
                     (C21741 * C2355 + C21742 * C2349 - C21743 * C2356 -
                      C21744 * C47951) *
                         C21590) *
                        C48110 * C48243 +
                    ((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C21588 +
                     (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                      C21748 * C47951) *
                         C21589 +
                     (C21749 * C2356 - (C21748 * C2349 + C21747 * C2355) +
                      C21750 * C47951) *
                         C21590) *
                        C48110 * C48230 +
                    (((C21591 * C119 + C47839 * C126) * C2355 +
                      (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                      C21752 * C47951) *
                         C21588 +
                     (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                      C21754 * C47951) *
                         C21589 +
                     (C21753 * C2355 + C21754 * C2349 - C21755 * C2356 -
                      C21756 * C47951) *
                         C21590) *
                        C48110 * C48201) *
                       C3120 +
                   (((C22245 * C2356 -
                      ((C21591 * C433 + C47839 * C450) * C2349 +
                       (C21591 * C420 + C47839 * C434) * C2355) +
                      C22246 * C47951) *
                         C21588 +
                     (C22247 * C2356 - (C22246 * C2349 + C22245 * C2355) +
                      C22248 * C47951) *
                         C21589 +
                     (C22575 * C2356 - (C22248 * C2349 + C22247 * C2355) +
                      C22576 * C47951) *
                         C21590) *
                        C48110 * C48243 +
                    (((C21591 * C417 + C47839 * C427) * C2355 +
                      (C21591 * C430 + C47839 * C447) * C2349 - C22249 * C2356 -
                      C22250 * C47951) *
                         C21588 +
                     (C22249 * C2355 + C22250 * C2349 - C22251 * C2356 -
                      C22252 * C47951) *
                         C21589 +
                     (C22251 * C2355 + C22252 * C2349 - C22837 * C2356 -
                      C22838 * C47951) *
                         C21590) *
                        C48110 * C48230 +
                    ((C22253 * C2356 -
                      ((C21591 * C431 + C47839 * C448) * C2349 +
                       (C21591 * C418 + C47839 * C428) * C2355) +
                      C22254 * C47951) *
                         C21588 +
                     (C22255 * C2356 - (C22254 * C2349 + C22253 * C2355) +
                      C22256 * C47951) *
                         C21589 +
                     ((C21591 * C1561 + C47839 * C1564) * C2356 -
                      (C22256 * C2349 + C22255 * C2355) +
                      (C21591 * C1567 + C47839 * C1570) * C47951) *
                         C21590) *
                        C48110 * C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2355 +
                     (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                     C21740 * C47951) *
                        C21588 +
                    (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                     C21742 * C47951) *
                        C21589 +
                    (C21741 * C2355 + C21742 * C2349 - C21743 * C2356 -
                     C21744 * C47951) *
                        C21590) *
                       C48110 * C47860 * C48254 +
                   ((C22245 * C2356 -
                     ((C21591 * C433 + C47839 * C450) * C2349 +
                      (C21591 * C420 + C47839 * C434) * C2355) +
                     C22246 * C47951) *
                        C21588 +
                    (C22247 * C2356 - (C22246 * C2349 + C22245 * C2355) +
                     C22248 * C47951) *
                        C21589 +
                    (C22575 * C2356 - (C22248 * C2349 + C22247 * C2355) +
                     C22576 * C47951) *
                        C21590) *
                       C48110 * C47860 * C48251 +
                   (((C21591 * C422 + C47839 * C437) * C2355 +
                     (C21591 * C440 + C47839 * C452) * C2349 - C22577 * C2356 -
                     C22578 * C47951) *
                        C21588 +
                    (C22577 * C2355 + C22578 * C2349 - C22579 * C2356 -
                     C22580 * C47951) *
                        C21589 +
                    (C22579 * C2355 + C22580 * C2349 - C22581 * C2356 -
                     C22582 * C47951) *
                        C21590) *
                       C48110 * C47860 * C48242 +
                   ((C23599 * C2356 -
                     ((C21591 * C1869 + C47839 * C1881) * C2349 +
                      (C21591 * C1863 + C47839 * C1872) * C2355) +
                     C23600 * C47951) *
                        C21588 +
                    (C23601 * C2356 - (C23600 * C2349 + C23599 * C2355) +
                     C23602 * C47951) *
                        C21589 +
                    ((C21591 * C23586 + C47839 * C23587) * C2356 -
                     (C23602 * C2349 + C23601 * C2355) +
                     (C21591 * C23588 + C47839 * C23589) * C47951) *
                        C21590) *
                       C48110 * C47860 * C48223)) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C21588 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C21589 +
                     (C21741 * C2355 + C21742 * C2349 - C21743 * C2356 -
                      C21744 * C47951) *
                         C21590) *
                        C48110 * C48161 +
                    ((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C21588 +
                     (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                      C21748 * C47951) *
                         C21589 +
                     (C21749 * C2356 - (C21748 * C2349 + C21747 * C2355) +
                      C21750 * C47951) *
                         C21590) *
                        C48110 * C47870) *
                       C47989 +
                   (((C22245 * C2356 -
                      ((C21591 * C433 + C47839 * C450) * C2349 +
                       (C21591 * C420 + C47839 * C434) * C2355) +
                      C22246 * C47951) *
                         C21588 +
                     (C22247 * C2356 - (C22246 * C2349 + C22245 * C2355) +
                      C22248 * C47951) *
                         C21589 +
                     (C22575 * C2356 - (C22248 * C2349 + C22247 * C2355) +
                      C22576 * C47951) *
                         C21590) *
                        C48110 * C48161 +
                    (((C21591 * C417 + C47839 * C427) * C2355 +
                      (C21591 * C430 + C47839 * C447) * C2349 - C22249 * C2356 -
                      C22250 * C47951) *
                         C21588 +
                     (C22249 * C2355 + C22250 * C2349 - C22251 * C2356 -
                      C22252 * C47951) *
                         C21589 +
                     (C22251 * C2355 + C22252 * C2349 - C22837 * C2356 -
                      C22838 * C47951) *
                         C21590) *
                        C48110 * C47870) *
                       C47996 +
                   ((((C21591 * C422 + C47839 * C437) * C2355 +
                      (C21591 * C440 + C47839 * C452) * C2349 - C22577 * C2356 -
                      C22578 * C47951) *
                         C21588 +
                     (C22577 * C2355 + C22578 * C2349 - C22579 * C2356 -
                      C22580 * C47951) *
                         C21589 +
                     (C22579 * C2355 + C22580 * C2349 - C22581 * C2356 -
                      C22582 * C47951) *
                         C21590) *
                        C48110 * C48161 +
                    ((C23387 * C2356 -
                      ((C21591 * C441 + C47839 * C453) * C2349 +
                       (C21591 * C423 + C47839 * C438) * C2355) +
                      C23388 * C47951) *
                         C21588 +
                     (C23389 * C2356 - (C23388 * C2349 + C23387 * C2355) +
                      C23390 * C47951) *
                         C21589 +
                     ((C21591 * C5880 + C47839 * C5882) * C2356 -
                      (C23390 * C2349 + C23389 * C2355) +
                      (C21591 * C5884 + C47839 * C5886) * C47951) *
                         C21590) *
                        C48110 * C47870) *
                       C3628)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C21588 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C21589 +
                     (C21741 * C2355 + C21742 * C2349 - C21743 * C2356 -
                      C21744 * C47951) *
                         C21590) *
                        C48110 * C48243 +
                    ((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C21588 +
                     (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                      C21748 * C47951) *
                         C21589 +
                     (C21749 * C2356 - (C21748 * C2349 + C21747 * C2355) +
                      C21750 * C47951) *
                         C21590) *
                        C48110 * C48230 +
                    (((C21591 * C119 + C47839 * C126) * C2355 +
                      (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                      C21752 * C47951) *
                         C21588 +
                     (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                      C21754 * C47951) *
                         C21589 +
                     (C21753 * C2355 + C21754 * C2349 - C21755 * C2356 -
                      C21756 * C47951) *
                         C21590) *
                        C48110 * C48201) *
                       C3120 +
                   (((C22245 * C2356 -
                      ((C21591 * C433 + C47839 * C450) * C2349 +
                       (C21591 * C420 + C47839 * C434) * C2355) +
                      C22246 * C47951) *
                         C21588 +
                     (C22247 * C2356 - (C22246 * C2349 + C22245 * C2355) +
                      C22248 * C47951) *
                         C21589 +
                     (C22575 * C2356 - (C22248 * C2349 + C22247 * C2355) +
                      C22576 * C47951) *
                         C21590) *
                        C48110 * C48243 +
                    (((C21591 * C417 + C47839 * C427) * C2355 +
                      (C21591 * C430 + C47839 * C447) * C2349 - C22249 * C2356 -
                      C22250 * C47951) *
                         C21588 +
                     (C22249 * C2355 + C22250 * C2349 - C22251 * C2356 -
                      C22252 * C47951) *
                         C21589 +
                     (C22251 * C2355 + C22252 * C2349 - C22837 * C2356 -
                      C22838 * C47951) *
                         C21590) *
                        C48110 * C48230 +
                    ((C22253 * C2356 -
                      ((C21591 * C431 + C47839 * C448) * C2349 +
                       (C21591 * C418 + C47839 * C428) * C2355) +
                      C22254 * C47951) *
                         C21588 +
                     (C22255 * C2356 - (C22254 * C2349 + C22253 * C2355) +
                      C22256 * C47951) *
                         C21589 +
                     ((C21591 * C1561 + C47839 * C1564) * C2356 -
                      (C22256 * C2349 + C22255 * C2355) +
                      (C21591 * C1567 + C47839 * C1570) * C47951) *
                         C21590) *
                        C48110 * C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2461 +
                     (C21591 * C127 + C47839 * C138) * C48253 - C21739 * C2462 -
                     C21740 * C48249 + C21741 * C2463 + C21742 * C48239 -
                     C21743 * C2464 - C21744 * C48217) *
                        C21588 +
                    (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                     C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                     C22441 * C2464 - C22442 * C48217) *
                        C21589 +
                    (C21741 * C2461 + C21742 * C48253 - C21743 * C2462 -
                     C21744 * C48249 + C22441 * C2463 + C22442 * C48239 -
                     C22443 * C2464 - C22444 * C48217) *
                        C21590) *
                       C48110 * C47860 * C3120 +
                   ((C22245 * C2462 -
                     ((C21591 * C433 + C47839 * C450) * C48253 +
                      (C21591 * C420 + C47839 * C434) * C2461) +
                     C22246 * C48249 - C22247 * C2463 - C22248 * C48239 +
                     C22575 * C2464 + C22576 * C48217) *
                        C21588 +
                    (C22247 * C2462 - (C22246 * C48253 + C22245 * C2461) +
                     C22248 * C48249 - C22575 * C2463 - C22576 * C48239 +
                     C22945 * C2464 + C22946 * C48217) *
                        C21589 +
                    (C22575 * C2462 - (C22248 * C48253 + C22247 * C2461) +
                     C22576 * C48249 - C22945 * C2463 - C22946 * C48239 +
                     (C21591 * C22936 + C47839 * C22937) * C2464 +
                     (C21591 * C22938 + C47839 * C22939) * C48217) *
                        C21590) *
                       C48110 * C47860 * C47993)) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1303 +
            (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
            C21740 * C1298 + C21741 * C1305 + C21742 * C1299 - C21743 * C1306 -
            C21744 * C48217) *
               C21588 +
           (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 - C21742 * C1298 +
            C21743 * C1305 + C21744 * C1299 - C22441 * C1306 -
            C22442 * C48217) *
               C21589 +
           (C21741 * C1303 + C21742 * C1297 - C21743 * C1304 - C21744 * C1298 +
            C22441 * C1305 + C22442 * C1299 - C22443 * C1306 -
            C22444 * C48217) *
               C21590) *
              C48110 * C48161 +
          ((C21745 * C1304 -
            ((C21591 * C128 + C47839 * C139) * C1297 +
             (C21591 * C118 + C47839 * C125) * C1303) +
            C21746 * C1298 - C21747 * C1305 - C21748 * C1299 + C21749 * C1306 +
            C21750 * C48217) *
               C21588 +
           (C21747 * C1304 - (C21746 * C1297 + C21745 * C1303) +
            C21748 * C1298 - C21749 * C1305 - C21750 * C1299 + C22685 * C1306 +
            C22686 * C48217) *
               C21589 +
           (C21749 * C1304 - (C21748 * C1297 + C21747 * C1303) +
            C21750 * C1298 - C22685 * C1305 - C22686 * C1299 +
            (C21591 * C5702 + C47839 * C5704) * C1306 +
            (C21591 * C5706 + C47839 * C5708) * C48217) *
               C21590) *
              C48110 * C47870) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C561 +
            (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
            C21740 * C47951) *
               C21588 +
           (C21739 * C561 + C21740 * C48175 - C21741 * C562 - C21742 * C47951) *
               C21589 +
           (C21741 * C561 + C21742 * C48175 - C21743 * C562 - C21744 * C47951) *
               C21590) *
              C48110 * C557 +
          ((C21745 * C562 -
            ((C21591 * C128 + C47839 * C139) * C48175 +
             (C21591 * C118 + C47839 * C125) * C561) +
            C21746 * C47951) *
               C21588 +
           (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
            C21748 * C47951) *
               C21589 +
           (C21749 * C562 - (C21748 * C48175 + C21747 * C561) +
            C21750 * C47951) *
               C21590) *
              C48110 * C558 +
          (((C21591 * C119 + C47839 * C126) * C561 +
            (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
            C21752 * C47951) *
               C21588 +
           (C21751 * C561 + C21752 * C48175 - C21753 * C562 - C21754 * C47951) *
               C21589 +
           (C21753 * C561 + C21754 * C48175 - C21755 * C562 - C21756 * C47951) *
               C21590) *
              C48110 * C559 +
          ((C21973 * C562 -
            ((C21591 * C130 + C47839 * C141) * C48175 +
             (C21591 * C120 + C47839 * C131) * C561) +
            C21974 * C47951) *
               C21588 +
           (C21975 * C562 - (C21974 * C48175 + C21973 * C561) +
            C21976 * C47951) *
               C21589 +
           ((C21591 * C1307 + C47839 * C1308) * C562 -
            (C21976 * C48175 + C21975 * C561) +
            (C21591 * C1309 + C47839 * C1310) * C47951) *
               C21590) *
              C48110 * C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C561 +
             (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
             C21740 * C47951) *
                C21588 +
            (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
             C21742 * C47951) *
                C21589 +
            (C21741 * C561 + C21742 * C48175 - C21743 * C562 -
             C21744 * C47951) *
                C21590) *
               C48110 * C48161 +
           ((C21745 * C562 -
             ((C21591 * C128 + C47839 * C139) * C48175 +
              (C21591 * C118 + C47839 * C125) * C561) +
             C21746 * C47951) *
                C21588 +
            (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
             C21748 * C47951) *
                C21589 +
            (C21749 * C562 - (C21748 * C48175 + C21747 * C561) +
             C21750 * C47951) *
                C21590) *
               C48110 * C47870) *
              C1681 +
          (((C22245 * C562 -
             ((C21591 * C433 + C47839 * C450) * C48175 +
              (C21591 * C420 + C47839 * C434) * C561) +
             C22246 * C47951) *
                C21588 +
            (C22247 * C562 - (C22246 * C48175 + C22245 * C561) +
             C22248 * C47951) *
                C21589 +
            (C22575 * C562 - (C22248 * C48175 + C22247 * C561) +
             C22576 * C47951) *
                C21590) *
               C48110 * C48161 +
           (((C21591 * C417 + C47839 * C427) * C561 +
             (C21591 * C430 + C47839 * C447) * C48175 - C22249 * C562 -
             C22250 * C47951) *
                C21588 +
            (C22249 * C561 + C22250 * C48175 - C22251 * C562 -
             C22252 * C47951) *
                C21589 +
            (C22251 * C561 + C22252 * C48175 - C22837 * C562 -
             C22838 * C47951) *
                C21590) *
               C48110 * C47870) *
              C1682 +
          ((((C21591 * C422 + C47839 * C437) * C561 +
             (C21591 * C440 + C47839 * C452) * C48175 - C22577 * C562 -
             C22578 * C47951) *
                C21588 +
            (C22577 * C561 + C22578 * C48175 - C22579 * C562 -
             C22580 * C47951) *
                C21589 +
            (C22579 * C561 + C22580 * C48175 - C22581 * C562 -
             C22582 * C47951) *
                C21590) *
               C48110 * C48161 +
           ((C23387 * C562 -
             ((C21591 * C441 + C47839 * C453) * C48175 +
              (C21591 * C423 + C47839 * C438) * C561) +
             C23388 * C47951) *
                C21588 +
            (C23389 * C562 - (C23388 * C48175 + C23387 * C561) +
             C23390 * C47951) *
                C21589 +
            ((C21591 * C5880 + C47839 * C5882) * C562 -
             (C23390 * C48175 + C23389 * C561) +
             (C21591 * C5884 + C47839 * C5886) * C47951) *
                C21590) *
               C48110 * C47870) *
              C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1303 +
            (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
            C21740 * C1298 + C21741 * C1305 + C21742 * C1299 - C21743 * C1306 -
            C21744 * C48217) *
               C21588 +
           (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 - C21742 * C1298 +
            C21743 * C1305 + C21744 * C1299 - C22441 * C1306 -
            C22442 * C48217) *
               C21589 +
           (C21741 * C1303 + C21742 * C1297 - C21743 * C1304 - C21744 * C1298 +
            C22441 * C1305 + C22442 * C1299 - C22443 * C1306 -
            C22444 * C48217) *
               C21590) *
              C48110 * C47860 * C48176 +
          ((C22245 * C1304 -
            ((C21591 * C433 + C47839 * C450) * C1297 +
             (C21591 * C420 + C47839 * C434) * C1303) +
            C22246 * C1298 - C22247 * C1305 - C22248 * C1299 + C22575 * C1306 +
            C22576 * C48217) *
               C21588 +
           (C22247 * C1304 - (C22246 * C1297 + C22245 * C1303) +
            C22248 * C1298 - C22575 * C1305 - C22576 * C1299 + C22945 * C1306 +
            C22946 * C48217) *
               C21589 +
           (C22575 * C1304 - (C22248 * C1297 + C22247 * C1303) +
            C22576 * C1298 - C22945 * C1305 - C22946 * C1299 +
            (C21591 * C22936 + C47839 * C22937) * C1306 +
            (C21591 * C22938 + C47839 * C22939) * C48217) *
               C21590) *
              C48110 * C47860 * C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C561 +
             (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
             C21740 * C47951) *
                C21588 +
            (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
             C21742 * C47951) *
                C21589 +
            (C21741 * C561 + C21742 * C48175 - C21743 * C562 -
             C21744 * C47951) *
                C21590) *
               C48110 * C258 +
           ((C21745 * C562 -
             ((C21591 * C128 + C47839 * C139) * C48175 +
              (C21591 * C118 + C47839 * C125) * C561) +
             C21746 * C47951) *
                C21588 +
            (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
             C21748 * C47951) *
                C21589 +
            (C21749 * C562 - (C21748 * C48175 + C21747 * C561) +
             C21750 * C47951) *
                C21590) *
               C48110 * C259 +
           (((C21591 * C119 + C47839 * C126) * C561 +
             (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
             C21752 * C47951) *
                C21588 +
            (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
             C21754 * C47951) *
                C21589 +
            (C21753 * C561 + C21754 * C48175 - C21755 * C562 -
             C21756 * C47951) *
                C21590) *
               C48110 * C48201) *
              C48176 +
          (((C22245 * C562 -
             ((C21591 * C433 + C47839 * C450) * C48175 +
              (C21591 * C420 + C47839 * C434) * C561) +
             C22246 * C47951) *
                C21588 +
            (C22247 * C562 - (C22246 * C48175 + C22245 * C561) +
             C22248 * C47951) *
                C21589 +
            ((C21591 * C1559 + C47839 * C1562) * C562 -
             (C22248 * C48175 + C22247 * C561) +
             (C21591 * C1565 + C47839 * C1568) * C47951) *
                C21590) *
               C48110 * C258 +
           (((C21591 * C417 + C47839 * C427) * C561 +
             (C21591 * C430 + C47839 * C447) * C48175 - C22249 * C562 -
             C22250 * C47951) *
                C21588 +
            (C22249 * C561 + C22250 * C48175 - C22251 * C562 -
             C22252 * C47951) *
                C21589 +
            (C22251 * C561 + C22252 * C48175 -
             (C21591 * C1560 + C47839 * C1563) * C562 -
             (C21591 * C1566 + C47839 * C1569) * C47951) *
                C21590) *
               C48110 * C259 +
           ((C22253 * C562 -
             ((C21591 * C431 + C47839 * C448) * C48175 +
              (C21591 * C418 + C47839 * C428) * C561) +
             C22254 * C47951) *
                C21588 +
            (C22255 * C562 - (C22254 * C48175 + C22253 * C561) +
             C22256 * C47951) *
                C21589 +
            ((C21591 * C1561 + C47839 * C1564) * C562 -
             (C22256 * C48175 + C22255 * C561) +
             (C21591 * C1567 + C47839 * C1570) * C47951) *
                C21590) *
               C48110 * C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C561 +
            (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
            C21740 * C47951) *
               C21588 +
           (C21739 * C561 + C21740 * C48175 - C21741 * C562 - C21742 * C47951) *
               C21589 +
           (C21741 * C561 + C21742 * C48175 - C21743 * C562 - C21744 * C47951) *
               C21590) *
              C48110 * C47860 * C2133 +
          ((C22245 * C562 -
            ((C21591 * C433 + C47839 * C450) * C48175 +
             (C21591 * C420 + C47839 * C434) * C561) +
            C22246 * C47951) *
               C21588 +
           (C22247 * C562 - (C22246 * C48175 + C22245 * C561) +
            C22248 * C47951) *
               C21589 +
           (C22575 * C562 - (C22248 * C48175 + C22247 * C561) +
            C22576 * C47951) *
               C21590) *
              C48110 * C47860 * C2134 +
          (((C21591 * C422 + C47839 * C437) * C561 +
            (C21591 * C440 + C47839 * C452) * C48175 - C22577 * C562 -
            C22578 * C47951) *
               C21588 +
           (C22577 * C561 + C22578 * C48175 - C22579 * C562 - C22580 * C47951) *
               C21589 +
           (C22579 * C561 + C22580 * C48175 - C22581 * C562 - C22582 * C47951) *
               C21590) *
              C48110 * C47860 * C2135 +
          ((C23599 * C562 -
            ((C21591 * C1869 + C47839 * C1881) * C48175 +
             (C21591 * C1863 + C47839 * C1872) * C561) +
            C23600 * C47951) *
               C21588 +
           (C23601 * C562 - (C23600 * C48175 + C23599 * C561) +
            C23602 * C47951) *
               C21589 +
           ((C21591 * C23586 + C47839 * C23587) * C562 -
            (C23602 * C48175 + C23601 * C561) +
            (C21591 * C23588 + C47839 * C23589) * C47951) *
               C21590) *
              C48110 * C47860 * C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21591 * C117 + C47839 * C124) * C116 +
                (C21591 * C127 + C47839 * C138) * C47888) *
                   C21588 +
               ((C21591 * C266 + C47839 * C276) * C116 +
                (C21591 * C279 + C47839 * C296) * C47888) *
                   C21589 +
               ((C21591 * C267 + C47839 * C280) * C116 +
                (C21591 * C283 + C47839 * C297) * C47888) *
                   C21590) *
                  C48110 * C107 -
              (((C21591 * C284 + C47839 * C298) * C47888 +
                (C21591 * C268 + C47839 * C281) * C116) *
                   C21590 +
               ((C21591 * C278 + C47839 * C295) * C47888 +
                (C21591 * C265 + C47839 * C275) * C116) *
                   C21589 +
               ((C21591 * C128 + C47839 * C139) * C47888 +
                (C21591 * C118 + C47839 * C125) * C116) *
                   C21588) *
                  C48110 * C108 +
              (((C21591 * C119 + C47839 * C126) * C116 +
                (C21591 * C129 + C47839 * C140) * C47888) *
                   C21588 +
               ((C21591 * C264 + C47839 * C274) * C116 +
                (C21591 * C277 + C47839 * C294) * C47888) *
                   C21589 +
               ((C21591 * C269 + C47839 * C282) * C116 +
                (C21591 * C285 + C47839 * C299) * C47888) *
                   C21590) *
                  C48110 * C109 -
              (((C21591 * C289 + C47839 * C301) * C47888 +
                (C21591 * C271 + C47839 * C288) * C116) *
                   C21590 +
               ((C21591 * C287 + C47839 * C300) * C47888 +
                (C21591 * C270 + C47839 * C286) * C116) *
                   C21589 +
               ((C21591 * C130 + C47839 * C141) * C47888 +
                (C21591 * C120 + C47839 * C131) * C116) *
                   C21588) *
                  C48110 * C110 +
              (((C21591 * C121 + C47839 * C132) * C116 +
                (C21591 * C133 + C47839 * C142) * C47888) *
                   C21588 +
               ((C21591 * C272 + C47839 * C290) * C116 +
                (C21591 * C291 + C47839 * C302) * C47888) *
                   C21589 +
               ((C21591 * C273 + C47839 * C292) * C116 +
                (C21591 * C293 + C47839 * C303) * C47888) *
                   C21590) *
                  C48110 * C111) *
             C47906 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C21591 * C117 + C47839 * C124) * C261 +
                (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
                C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                   C21588 +
               (C21739 * C261 + C21740 * C48246 - C21741 * C262 -
                C21742 * C48234 + C21743 * C263 + C21744 * C48207) *
                   C21589 +
               (C21741 * C261 + C21742 * C48246 - C21743 * C262 -
                C21744 * C48234 + (C21591 * C1032 + C47839 * C1041) * C263 +
                (C21591 * C1044 + C47839 * C1050) * C48207) *
                   C21590) *
                  C48110 * C258 +
              ((C21745 * C262 -
                ((C21591 * C128 + C47839 * C139) * C48246 +
                 (C21591 * C118 + C47839 * C125) * C261) +
                C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                   C21588 +
               (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
                C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                   C21589 +
               (C21749 * C262 - (C21748 * C48246 + C21747 * C261) +
                C21750 * C48234 - (C21591 * C1033 + C47839 * C1042) * C263 -
                (C21591 * C1045 + C47839 * C1051) * C48207) *
                   C21590) *
                  C48110 * C259 +
              (((C21591 * C119 + C47839 * C126) * C261 +
                (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
                C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
                   C21588 +
               (C21751 * C261 + C21752 * C48246 - C21753 * C262 -
                C21754 * C48234 + C21755 * C263 + C21756 * C48207) *
                   C21589 +
               (C21753 * C261 + C21754 * C48246 - C21755 * C262 -
                C21756 * C48234 + (C21591 * C1034 + C47839 * C1043) * C263 +
                (C21591 * C1046 + C47839 * C1052) * C48207) *
                   C21590) *
                  C48110 * C48201) *
             C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21591 * C117 + C47839 * C124) * C116 +
                                 (C21591 * C127 + C47839 * C138) * C47888) *
                                    C21588 +
                                (C21739 * C116 + C21740 * C47888) * C21589 +
                                (C21741 * C116 + C21742 * C47888) * C21590) *
                                   C48110 * C258 -
                               ((C21748 * C47888 + C21747 * C116) * C21590 +
                                (C21746 * C47888 + C21745 * C116) * C21589 +
                                ((C21591 * C128 + C47839 * C139) * C47888 +
                                 (C21591 * C118 + C47839 * C125) * C116) *
                                    C21588) *
                                   C48110 * C259 +
                               (((C21591 * C119 + C47839 * C126) * C116 +
                                 (C21591 * C129 + C47839 * C140) * C47888) *
                                    C21588 +
                                (C21751 * C116 + C21752 * C47888) * C21589 +
                                (C21753 * C116 + C21754 * C47888) * C21590) *
                                   C48110 * C48201) *
                                  C48247 +
                              ((((C21591 * C417 + C47839 * C427) * C116 +
                                 (C21591 * C430 + C47839 * C447) * C47888) *
                                    C21588 +
                                ((C21591 * C818 + C47839 * C823) * C116 +
                                 (C21591 * C826 + C47839 * C833) * C47888) *
                                    C21589 +
                                ((C21591 * C1164 + C47839 * C1173) * C116 +
                                 (C21591 * C1176 + C47839 * C1191) * C47888) *
                                    C21590) *
                                   C48110 * C259 -
                               (((C21591 * C1177 + C47839 * C1192) * C47888 +
                                 (C21591 * C1165 + C47839 * C1174) * C116) *
                                    C21590 +
                                ((C21591 * C825 + C47839 * C832) * C47888 +
                                 (C21591 * C817 + C47839 * C822) * C116) *
                                    C21589 +
                                ((C21591 * C433 + C47839 * C450) * C47888 +
                                 (C21591 * C420 + C47839 * C434) * C116) *
                                    C21588) *
                                   C48110 * C258 -
                               (((C21591 * C1175 + C47839 * C1190) * C47888 +
                                 (C21591 * C1163 + C47839 * C1172) * C116) *
                                    C21590 +
                                ((C21591 * C827 + C47839 * C834) * C47888 +
                                 (C21591 * C819 + C47839 * C824) * C116) *
                                    C21589 +
                                ((C21591 * C431 + C47839 * C448) * C47888 +
                                 (C21591 * C418 + C47839 * C428) * C116) *
                                    C21588) *
                                   C48110 * C48201) *
                                  C48236 +
                              ((((C21591 * C422 + C47839 * C437) * C116 +
                                 (C21591 * C440 + C47839 * C452) * C47888) *
                                    C21588 +
                                ((C21591 * C1168 + C47839 * C1180) * C116 +
                                 (C21591 * C1183 + C47839 * C1195) * C47888) *
                                    C21589 +
                                ((C21591 * C1169 + C47839 * C1184) * C116 +
                                 (C21591 * C1187 + C47839 * C1196) * C47888) *
                                    C21590) *
                                   C48110 * C258 -
                               (((C21591 * C1188 + C47839 * C1197) * C47888 +
                                 (C21591 * C1170 + C47839 * C1185) * C116) *
                                    C21590 +
                                ((C21591 * C1182 + C47839 * C1194) * C47888 +
                                 (C21591 * C1167 + C47839 * C1179) * C116) *
                                    C21589 +
                                ((C21591 * C441 + C47839 * C453) * C47888 +
                                 (C21591 * C423 + C47839 * C438) * C116) *
                                    C21588) *
                                   C48110 * C259 +
                               (((C21591 * C424 + C47839 * C439) * C116 +
                                 (C21591 * C442 + C47839 * C454) * C47888) *
                                    C21588 +
                                ((C21591 * C1166 + C47839 * C1178) * C116 +
                                 (C21591 * C1181 + C47839 * C1193) * C47888) *
                                    C21589 +
                                ((C21591 * C1171 + C47839 * C1186) * C116 +
                                 (C21591 * C1189 + C47839 * C1198) * C47888) *
                                    C21590) *
                                   C48110 * C48201) *
                                  C48210)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C21588 +
           (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
            C21743 * C955 + C21744 * C48207) *
               C21589 +
           (C21741 * C953 + C21742 * C947 - C21743 * C954 - C21744 * C948 +
            (C21591 * C1032 + C47839 * C1041) * C955 +
            (C21591 * C1044 + C47839 * C1050) * C48207) *
               C21590) *
              C48110 * C48243 +
          ((C21745 * C954 -
            ((C21591 * C128 + C47839 * C139) * C947 +
             (C21591 * C118 + C47839 * C125) * C953) +
            C21746 * C948 - C21747 * C955 - C21748 * C48207) *
               C21588 +
           (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
            C21749 * C955 - C21750 * C48207) *
               C21589 +
           (C21749 * C954 - (C21748 * C947 + C21747 * C953) + C21750 * C948 -
            (C21591 * C1033 + C47839 * C1042) * C955 -
            (C21591 * C1045 + C47839 * C1051) * C48207) *
               C21590) *
              C48110 * C48230 +
          (((C21591 * C119 + C47839 * C126) * C953 +
            (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
            C21752 * C948 + C21753 * C955 + C21754 * C48207) *
               C21588 +
           (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
            C21755 * C955 + C21756 * C48207) *
               C21589 +
           (C21753 * C953 + C21754 * C947 - C21755 * C954 - C21756 * C948 +
            (C21591 * C1034 + C47839 * C1043) * C955 +
            (C21591 * C1046 + C47839 * C1052) * C48207) *
               C21590) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C21591 * C117 + C47839 * C124) * C1024 +
           (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
           C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
           C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
              C21588 +
          (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
           C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
           C22443 * C1028 + C22444 * C1022) *
              C21589 +
          (C21741 * C1024 + C21742 * C1018 - C21743 * C1025 - C21744 * C1019 +
           C22441 * C1026 + C22442 * C1020 - C22443 * C1027 - C22444 * C1021 +
           (C21591 * C22428 + C47839 * C22429) * C1028 +
           (C21591 * C22430 + C47839 * C22431) * C1022) *
              C21590) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C21588 +
           (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
            C21743 * C955 + C21744 * C48207) *
               C21589 +
           (C21741 * C953 + C21742 * C947 - C21743 * C954 - C21744 * C948 +
            C22441 * C955 + C22442 * C48207) *
               C21590) *
              C48110 * C47860 * C48247 +
          ((C22245 * C954 -
            ((C21591 * C433 + C47839 * C450) * C947 +
             (C21591 * C420 + C47839 * C434) * C953) +
            C22246 * C948 - C22247 * C955 - C22248 * C48207) *
               C21588 +
           (C22247 * C954 - (C22246 * C947 + C22245 * C953) + C22248 * C948 -
            C22575 * C955 - C22576 * C48207) *
               C21589 +
           (C22575 * C954 - (C22248 * C947 + C22247 * C953) + C22576 * C948 -
            (C21591 * C6401 + C47839 * C6403) * C955 -
            (C21591 * C6405 + C47839 * C6407) * C48207) *
               C21590) *
              C48110 * C47860 * C48236 +
          (((C21591 * C422 + C47839 * C437) * C953 +
            (C21591 * C440 + C47839 * C452) * C947 - C22577 * C954 -
            C22578 * C948 + C22579 * C955 + C22580 * C48207) *
               C21588 +
           (C22577 * C953 + C22578 * C947 - C22579 * C954 - C22580 * C948 +
            C22581 * C955 + C22582 * C48207) *
               C21589 +
           (C22579 * C953 + C22580 * C947 - C22581 * C954 - C22582 * C948 +
            (C21591 * C22554 + C47839 * C22555) * C955 +
            (C21591 * C22556 + C47839 * C22557) * C48207) *
               C21590) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C21591 * C117 + C47839 * C124) * C116 +
                                 (C21591 * C127 + C47839 * C138) * C47888) *
                                    C21588 +
                                (C21739 * C116 + C21740 * C47888) * C21589 +
                                (C21741 * C116 + C21742 * C47888) * C21590) *
                                   C48110 * C48243 -
                               ((C21748 * C47888 + C21747 * C116) * C21590 +
                                (C21746 * C47888 + C21745 * C116) * C21589 +
                                ((C21591 * C128 + C47839 * C139) * C47888 +
                                 (C21591 * C118 + C47839 * C125) * C116) *
                                    C21588) *
                                   C48110 * C48230 +
                               (((C21591 * C119 + C47839 * C126) * C116 +
                                 (C21591 * C129 + C47839 * C140) * C47888) *
                                    C21588 +
                                (C21751 * C116 + C21752 * C47888) * C21589 +
                                (C21753 * C116 + C21754 * C47888) * C21590) *
                                   C48110 * C48201) *
                                  C1681 +
                              ((((C21591 * C417 + C47839 * C427) * C116 +
                                 (C21591 * C430 + C47839 * C447) * C47888) *
                                    C21588 +
                                (C22249 * C116 + C22250 * C47888) * C21589 +
                                (C22251 * C116 + C22252 * C47888) * C21590) *
                                   C48110 * C48230 -
                               ((C22248 * C47888 + C22247 * C116) * C21590 +
                                (C22246 * C47888 + C22245 * C116) * C21589 +
                                ((C21591 * C433 + C47839 * C450) * C47888 +
                                 (C21591 * C420 + C47839 * C434) * C116) *
                                    C21588) *
                                   C48110 * C48243 -
                               ((C22256 * C47888 + C22255 * C116) * C21590 +
                                (C22254 * C47888 + C22253 * C116) * C21589 +
                                ((C21591 * C431 + C47839 * C448) * C47888 +
                                 (C21591 * C418 + C47839 * C428) * C116) *
                                    C21588) *
                                   C48110 * C48201) *
                                  C1682 +
                              ((((C21591 * C422 + C47839 * C437) * C116 +
                                 (C21591 * C440 + C47839 * C452) * C47888) *
                                    C21588 +
                                (C22577 * C116 + C22578 * C47888) * C21589 +
                                (C22579 * C116 + C22580 * C47888) * C21590) *
                                   C48110 * C48243 -
                               (((C21591 * C1188 + C47839 * C1197) * C47888 +
                                 (C21591 * C1170 + C47839 * C1185) * C116) *
                                    C21590 +
                                ((C21591 * C1182 + C47839 * C1194) * C47888 +
                                 (C21591 * C1167 + C47839 * C1179) * C116) *
                                    C21589 +
                                ((C21591 * C441 + C47839 * C453) * C47888 +
                                 (C21591 * C423 + C47839 * C438) * C116) *
                                    C21588) *
                                   C48110 * C48230 +
                               (((C21591 * C424 + C47839 * C439) * C116 +
                                 (C21591 * C442 + C47839 * C454) * C47888) *
                                    C21588 +
                                ((C21591 * C1166 + C47839 * C1178) * C116 +
                                 (C21591 * C1181 + C47839 * C1193) * C47888) *
                                    C21589 +
                                ((C21591 * C1171 + C47839 * C1186) * C116 +
                                 (C21591 * C1189 + C47839 * C1198) * C47888) *
                                    C21590) *
                                   C48110 * C48201) *
                                  C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C261 +
            (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
            C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
               C21588 +
           (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
            C21743 * C263 + C21744 * C48207) *
               C21589 +
           (C21741 * C261 + C21742 * C48246 - C21743 * C262 - C21744 * C48234 +
            C22441 * C263 + C22442 * C48207) *
               C21590) *
              C48110 * C47860 * C1681 +
          ((C22245 * C262 -
            ((C21591 * C433 + C47839 * C450) * C48246 +
             (C21591 * C420 + C47839 * C434) * C261) +
            C22246 * C48234 - C22247 * C263 - C22248 * C48207) *
               C21588 +
           (C22247 * C262 - (C22246 * C48246 + C22245 * C261) +
            C22248 * C48234 - C22575 * C263 - C22576 * C48207) *
               C21589 +
           (C22575 * C262 - (C22248 * C48246 + C22247 * C261) +
            C22576 * C48234 - C22945 * C263 - C22946 * C48207) *
               C21590) *
              C48110 * C47860 * C1682 +
          (((C21591 * C422 + C47839 * C437) * C261 +
            (C21591 * C440 + C47839 * C452) * C48246 - C22577 * C262 -
            C22578 * C48234 + C22579 * C263 + C22580 * C48207) *
               C21588 +
           (C22577 * C261 + C22578 * C48246 - C22579 * C262 - C22580 * C48234 +
            C22581 * C263 + C22582 * C48207) *
               C21589 +
           (C22579 * C261 + C22580 * C48246 - C22581 * C262 - C22582 * C48234 +
            (C21591 * C22554 + C47839 * C22555) * C263 +
            (C21591 * C22556 + C47839 * C22557) * C48207) *
               C21590) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C116 +
            (C21591 * C127 + C47839 * C138) * C47888) *
               C21588 +
           (C21739 * C116 + C21740 * C47888) * C21589 +
           (C21741 * C116 + C21742 * C47888) * C21590) *
              C48110 * C47860 * C1856 -
          ((C22248 * C47888 + C22247 * C116) * C21590 +
           (C22246 * C47888 + C22245 * C116) * C21589 +
           ((C21591 * C433 + C47839 * C450) * C47888 +
            (C21591 * C420 + C47839 * C434) * C116) *
               C21588) *
              C48110 * C47860 * C1857 +
          (((C21591 * C422 + C47839 * C437) * C116 +
            (C21591 * C440 + C47839 * C452) * C47888) *
               C21588 +
           (C22577 * C116 + C22578 * C47888) * C21589 +
           (C22579 * C116 + C22580 * C47888) * C21590) *
              C48110 * C47860 * C1858 -
          (((C21591 * C7273 + C47839 * C7275) * C47888 +
            (C21591 * C7269 + C47839 * C7271) * C116) *
               C21590 +
           ((C21591 * C2245 + C47839 * C2248) * C47888 +
            (C21591 * C2239 + C47839 * C2242) * C116) *
               C21589 +
           ((C21591 * C1869 + C47839 * C1881) * C47888 +
            (C21591 * C1863 + C47839 * C1872) * C116) *
               C21588) *
              C48110 * C47860 * C1859 +
          (((C21591 * C1864 + C47839 * C1873) * C116 +
            (C21591 * C1876 + C47839 * C1882) * C47888) *
               C21588 +
           ((C21591 * C6795 + C47839 * C6797) * C116 +
            (C21591 * C6799 + C47839 * C6801) * C47888) *
               C21589 +
           ((C21591 * C23228 + C47839 * C23229) * C116 +
            (C21591 * C23230 + C47839 * C23231) * C47888) *
               C21590) *
              C48110 * C47860 * C1860)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C953 +
                      (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
                      C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                         C21588 +
                     (C21739 * C953 + C21740 * C947 - C21741 * C954 -
                      C21742 * C948 + C21743 * C955 + C21744 * C48207) *
                         C21589 +
                     (C21741 * C953 + C21742 * C947 - C21743 * C954 -
                      C21744 * C948 + C22441 * C955 + C22442 * C48207) *
                         C21590) *
                        C48110 * C48161 +
                    ((C21745 * C954 -
                      ((C21591 * C128 + C47839 * C139) * C947 +
                       (C21591 * C118 + C47839 * C125) * C953) +
                      C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                         C21588 +
                     (C21747 * C954 - (C21746 * C947 + C21745 * C953) +
                      C21748 * C948 - C21749 * C955 - C21750 * C48207) *
                         C21589 +
                     (C21749 * C954 - (C21748 * C947 + C21747 * C953) +
                      C21750 * C948 - C22685 * C955 - C22686 * C48207) *
                         C21590) *
                        C48110 * C47870) *
                       C48176 +
                   (((C22245 * C954 -
                      ((C21591 * C433 + C47839 * C450) * C947 +
                       (C21591 * C420 + C47839 * C434) * C953) +
                      C22246 * C948 - C22247 * C955 - C22248 * C48207) *
                         C21588 +
                     (C22247 * C954 - (C22246 * C947 + C22245 * C953) +
                      C22248 * C948 - C22575 * C955 - C22576 * C48207) *
                         C21589 +
                     (C22575 * C954 - (C22248 * C947 + C22247 * C953) +
                      C22576 * C948 - (C21591 * C6401 + C47839 * C6403) * C955 -
                      (C21591 * C6405 + C47839 * C6407) * C48207) *
                         C21590) *
                        C48110 * C48161 +
                    (((C21591 * C417 + C47839 * C427) * C953 +
                      (C21591 * C430 + C47839 * C447) * C947 - C22249 * C954 -
                      C22250 * C948 + C22251 * C955 + C22252 * C48207) *
                         C21588 +
                     (C22249 * C953 + C22250 * C947 - C22251 * C954 -
                      C22252 * C948 + C22837 * C955 + C22838 * C48207) *
                         C21589 +
                     (C22251 * C953 + C22252 * C947 - C22837 * C954 -
                      C22838 * C948 + (C21591 * C6402 + C47839 * C6404) * C955 +
                      (C21591 * C6406 + C47839 * C6408) * C48207) *
                         C21590) *
                        C48110 * C47870) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C116 +
                      (C21591 * C127 + C47839 * C138) * C47888) *
                         C21588 +
                     (C21739 * C116 + C21740 * C47888) * C21589 +
                     (C21741 * C116 + C21742 * C47888) * C21590) *
                        C48110 * C557 -
                    ((C21748 * C47888 + C21747 * C116) * C21590 +
                     (C21746 * C47888 + C21745 * C116) * C21589 +
                     ((C21591 * C128 + C47839 * C139) * C47888 +
                      (C21591 * C118 + C47839 * C125) * C116) *
                         C21588) *
                        C48110 * C558 +
                    (((C21591 * C119 + C47839 * C126) * C116 +
                      (C21591 * C129 + C47839 * C140) * C47888) *
                         C21588 +
                     (C21751 * C116 + C21752 * C47888) * C21589 +
                     (C21753 * C116 + C21754 * C47888) * C21590) *
                        C48110 * C559 -
                    ((C21976 * C47888 + C21975 * C116) * C21590 +
                     (C21974 * C47888 + C21973 * C116) * C21589 +
                     ((C21591 * C130 + C47839 * C141) * C47888 +
                      (C21591 * C120 + C47839 * C131) * C116) *
                         C21588) *
                        C48110 * C48211) *
                       C48176 +
                   ((((C21591 * C417 + C47839 * C427) * C116 +
                      (C21591 * C430 + C47839 * C447) * C47888) *
                         C21588 +
                     ((C21591 * C818 + C47839 * C823) * C116 +
                      (C21591 * C826 + C47839 * C833) * C47888) *
                         C21589 +
                     ((C21591 * C1164 + C47839 * C1173) * C116 +
                      (C21591 * C1176 + C47839 * C1191) * C47888) *
                         C21590) *
                        C48110 * C558 -
                    (((C21591 * C1177 + C47839 * C1192) * C47888 +
                      (C21591 * C1165 + C47839 * C1174) * C116) *
                         C21590 +
                     ((C21591 * C825 + C47839 * C832) * C47888 +
                      (C21591 * C817 + C47839 * C822) * C116) *
                         C21589 +
                     ((C21591 * C433 + C47839 * C450) * C47888 +
                      (C21591 * C420 + C47839 * C434) * C116) *
                         C21588) *
                        C48110 * C557 -
                    (((C21591 * C1175 + C47839 * C1190) * C47888 +
                      (C21591 * C1163 + C47839 * C1172) * C116) *
                         C21590 +
                     ((C21591 * C827 + C47839 * C834) * C47888 +
                      (C21591 * C819 + C47839 * C824) * C116) *
                         C21589 +
                     ((C21591 * C431 + C47839 * C448) * C47888 +
                      (C21591 * C418 + C47839 * C428) * C116) *
                         C21588) *
                        C48110 * C559 +
                    (((C21591 * C419 + C47839 * C429) * C116 +
                      (C21591 * C432 + C47839 * C449) * C47888) *
                         C21588 +
                     ((C21591 * C820 + C47839 * C828) * C116 +
                      (C21591 * C829 + C47839 * C835) * C47888) *
                         C21589 +
                     ((C21591 * C1457 + C47839 * C1458) * C116 +
                      (C21591 * C1459 + C47839 * C1460) * C47888) *
                         C21590) *
                        C48110 * C48211) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C116 +
                      (C21591 * C127 + C47839 * C138) * C47888) *
                         C21588 +
                     (C21739 * C116 + C21740 * C47888) * C21589 +
                     (C21741 * C116 + C21742 * C47888) * C21590) *
                        C48110 * C48161 -
                    ((C21748 * C47888 + C21747 * C116) * C21590 +
                     (C21746 * C47888 + C21745 * C116) * C21589 +
                     ((C21591 * C128 + C47839 * C139) * C47888 +
                      (C21591 * C118 + C47839 * C125) * C116) *
                         C21588) *
                        C48110 * C47870) *
                       C2133 +
                   ((((C21591 * C417 + C47839 * C427) * C116 +
                      (C21591 * C430 + C47839 * C447) * C47888) *
                         C21588 +
                     (C22249 * C116 + C22250 * C47888) * C21589 +
                     (C22251 * C116 + C22252 * C47888) * C21590) *
                        C48110 * C47870 -
                    ((C22248 * C47888 + C22247 * C116) * C21590 +
                     (C22246 * C47888 + C22245 * C116) * C21589 +
                     ((C21591 * C433 + C47839 * C450) * C47888 +
                      (C21591 * C420 + C47839 * C434) * C116) *
                         C21588) *
                        C48110 * C48161) *
                       C2134 +
                   ((((C21591 * C422 + C47839 * C437) * C116 +
                      (C21591 * C440 + C47839 * C452) * C47888) *
                         C21588 +
                     (C22577 * C116 + C22578 * C47888) * C21589 +
                     (C22579 * C116 + C22580 * C47888) * C21590) *
                        C48110 * C48161 -
                    ((C23390 * C47888 + C23389 * C116) * C21590 +
                     (C23388 * C47888 + C23387 * C116) * C21589 +
                     ((C21591 * C441 + C47839 * C453) * C47888 +
                      (C21591 * C423 + C47839 * C438) * C116) *
                         C21588) *
                        C48110 * C47870) *
                       C2135 +
                   ((((C21591 * C1862 + C47839 * C1871) * C116 +
                      (C21591 * C1868 + C47839 * C1880) * C47888) *
                         C21588 +
                     ((C21591 * C2240 + C47839 * C2243) * C116 +
                      (C21591 * C2246 + C47839 * C2249) * C47888) *
                         C21589 +
                     ((C21591 * C7270 + C47839 * C7272) * C116 +
                      (C21591 * C7274 + C47839 * C7276) * C47888) *
                         C21590) *
                        C48110 * C47870 -
                    (((C21591 * C7273 + C47839 * C7275) * C47888 +
                      (C21591 * C7269 + C47839 * C7271) * C116) *
                         C21590 +
                     ((C21591 * C2245 + C47839 * C2248) * C47888 +
                      (C21591 * C2239 + C47839 * C2242) * C116) *
                         C21589 +
                     ((C21591 * C1869 + C47839 * C1881) * C47888 +
                      (C21591 * C1863 + C47839 * C1872) * C116) *
                         C21588) *
                        C48110 * C48161) *
                       C48223)) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C261 +
            (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
            C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
               C21588 +
           (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
            C21743 * C263 + C21744 * C48207) *
               C21589 +
           (C21741 * C261 + C21742 * C48246 - C21743 * C262 - C21744 * C48234 +
            (C21591 * C1032 + C47839 * C1041) * C263 +
            (C21591 * C1044 + C47839 * C1050) * C48207) *
               C21590) *
              C48110 * C258 +
          ((C21745 * C262 -
            ((C21591 * C128 + C47839 * C139) * C48246 +
             (C21591 * C118 + C47839 * C125) * C261) +
            C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
               C21588 +
           (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
            C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
               C21589 +
           (C21749 * C262 - (C21748 * C48246 + C21747 * C261) +
            C21750 * C48234 - (C21591 * C1033 + C47839 * C1042) * C263 -
            (C21591 * C1045 + C47839 * C1051) * C48207) *
               C21590) *
              C48110 * C259 +
          (((C21591 * C119 + C47839 * C126) * C261 +
            (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
            C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
               C21588 +
           (C21751 * C261 + C21752 * C48246 - C21753 * C262 - C21754 * C48234 +
            C21755 * C263 + C21756 * C48207) *
               C21589 +
           (C21753 * C261 + C21754 * C48246 - C21755 * C262 - C21756 * C48234 +
            (C21591 * C1034 + C47839 * C1043) * C263 +
            (C21591 * C1046 + C47839 * C1052) * C48207) *
               C21590) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C116 +
            (C21591 * C127 + C47839 * C138) * C47888) *
               C21588 +
           ((C21591 * C266 + C47839 * C276) * C116 +
            (C21591 * C279 + C47839 * C296) * C47888) *
               C21589 +
           ((C21591 * C267 + C47839 * C280) * C116 +
            (C21591 * C283 + C47839 * C297) * C47888) *
               C21590) *
              C48110 * C107 -
          (((C21591 * C284 + C47839 * C298) * C47888 +
            (C21591 * C268 + C47839 * C281) * C116) *
               C21590 +
           ((C21591 * C278 + C47839 * C295) * C47888 +
            (C21591 * C265 + C47839 * C275) * C116) *
               C21589 +
           ((C21591 * C128 + C47839 * C139) * C47888 +
            (C21591 * C118 + C47839 * C125) * C116) *
               C21588) *
              C48110 * C108 +
          (((C21591 * C119 + C47839 * C126) * C116 +
            (C21591 * C129 + C47839 * C140) * C47888) *
               C21588 +
           ((C21591 * C264 + C47839 * C274) * C116 +
            (C21591 * C277 + C47839 * C294) * C47888) *
               C21589 +
           ((C21591 * C269 + C47839 * C282) * C116 +
            (C21591 * C285 + C47839 * C299) * C47888) *
               C21590) *
              C48110 * C109 -
          (((C21591 * C289 + C47839 * C301) * C47888 +
            (C21591 * C271 + C47839 * C288) * C116) *
               C21590 +
           ((C21591 * C287 + C47839 * C300) * C47888 +
            (C21591 * C270 + C47839 * C286) * C116) *
               C21589 +
           ((C21591 * C130 + C47839 * C141) * C47888 +
            (C21591 * C120 + C47839 * C131) * C116) *
               C21588) *
              C48110 * C110 +
          (((C21591 * C121 + C47839 * C132) * C116 +
            (C21591 * C133 + C47839 * C142) * C47888) *
               C21588 +
           ((C21591 * C272 + C47839 * C290) * C116 +
            (C21591 * C291 + C47839 * C302) * C47888) *
               C21589 +
           ((C21591 * C273 + C47839 * C292) * C116 +
            (C21591 * C293 + C47839 * C303) * C47888) *
               C21590) *
              C48110 * C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C21588 +
           (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
            C21743 * C955 + C21744 * C48207) *
               C21589 +
           (C21741 * C953 + C21742 * C947 - C21743 * C954 - C21744 * C948 +
            (C21591 * C1032 + C47839 * C1041) * C955 +
            (C21591 * C1044 + C47839 * C1050) * C48207) *
               C21590) *
              C48110 * C48243 +
          ((C21745 * C954 -
            ((C21591 * C128 + C47839 * C139) * C947 +
             (C21591 * C118 + C47839 * C125) * C953) +
            C21746 * C948 - C21747 * C955 - C21748 * C48207) *
               C21588 +
           (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
            C21749 * C955 - C21750 * C48207) *
               C21589 +
           (C21749 * C954 - (C21748 * C947 + C21747 * C953) + C21750 * C948 -
            (C21591 * C1033 + C47839 * C1042) * C955 -
            (C21591 * C1045 + C47839 * C1051) * C48207) *
               C21590) *
              C48110 * C48230 +
          (((C21591 * C119 + C47839 * C126) * C953 +
            (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
            C21752 * C948 + C21753 * C955 + C21754 * C48207) *
               C21588 +
           (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
            C21755 * C955 + C21756 * C48207) *
               C21589 +
           (C21753 * C953 + C21754 * C947 - C21755 * C954 - C21756 * C948 +
            (C21591 * C1034 + C47839 * C1043) * C955 +
            (C21591 * C1046 + C47839 * C1052) * C48207) *
               C21590) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C117 + C47839 * C124) * C1024 +
           (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
           C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
           C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
              C21588 +
          (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
           C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
           C22443 * C1028 + C22444 * C1022) *
              C21589 +
          (C21741 * C1024 + C21742 * C1018 - C21743 * C1025 - C21744 * C1019 +
           C22441 * C1026 + C22442 * C1020 - C22443 * C1027 - C22444 * C1021 +
           (C21591 * C22428 + C47839 * C22429) * C1028 +
           (C21591 * C22430 + C47839 * C22431) * C1022) *
              C21590) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C21588 +
            (C21739 * C116 + C21740 * C47888) * C21589 +
            (C21741 * C116 + C21742 * C47888) * C21590) *
               C48110 * C48243 -
           ((C21748 * C47888 + C21747 * C116) * C21590 +
            (C21746 * C47888 + C21745 * C116) * C21589 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C21588) *
               C48110 * C48230 +
           (((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C21588 +
            (C21751 * C116 + C21752 * C47888) * C21589 +
            (C21753 * C116 + C21754 * C47888) * C21590) *
               C48110 * C48201) *
              C1681 +
          ((((C21591 * C417 + C47839 * C427) * C116 +
             (C21591 * C430 + C47839 * C447) * C47888) *
                C21588 +
            (C22249 * C116 + C22250 * C47888) * C21589 +
            (C22251 * C116 + C22252 * C47888) * C21590) *
               C48110 * C48230 -
           ((C22248 * C47888 + C22247 * C116) * C21590 +
            (C22246 * C47888 + C22245 * C116) * C21589 +
            ((C21591 * C433 + C47839 * C450) * C47888 +
             (C21591 * C420 + C47839 * C434) * C116) *
                C21588) *
               C48110 * C48243 -
           ((C22256 * C47888 + C22255 * C116) * C21590 +
            (C22254 * C47888 + C22253 * C116) * C21589 +
            ((C21591 * C431 + C47839 * C448) * C47888 +
             (C21591 * C418 + C47839 * C428) * C116) *
                C21588) *
               C48110 * C48201) *
              C1682 +
          ((((C21591 * C422 + C47839 * C437) * C116 +
             (C21591 * C440 + C47839 * C452) * C47888) *
                C21588 +
            (C22577 * C116 + C22578 * C47888) * C21589 +
            (C22579 * C116 + C22580 * C47888) * C21590) *
               C48110 * C48243 -
           (((C21591 * C1188 + C47839 * C1197) * C47888 +
             (C21591 * C1170 + C47839 * C1185) * C116) *
                C21590 +
            ((C21591 * C1182 + C47839 * C1194) * C47888 +
             (C21591 * C1167 + C47839 * C1179) * C116) *
                C21589 +
            ((C21591 * C441 + C47839 * C453) * C47888 +
             (C21591 * C423 + C47839 * C438) * C116) *
                C21588) *
               C48110 * C48230 +
           (((C21591 * C424 + C47839 * C439) * C116 +
             (C21591 * C442 + C47839 * C454) * C47888) *
                C21588 +
            ((C21591 * C1166 + C47839 * C1178) * C116 +
             (C21591 * C1181 + C47839 * C1193) * C47888) *
                C21589 +
            ((C21591 * C1171 + C47839 * C1186) * C116 +
             (C21591 * C1189 + C47839 * C1198) * C47888) *
                C21590) *
               C48110 * C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C261 +
            (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
            C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
               C21588 +
           (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
            C21743 * C263 + C21744 * C48207) *
               C21589 +
           (C21741 * C261 + C21742 * C48246 - C21743 * C262 - C21744 * C48234 +
            C22441 * C263 + C22442 * C48207) *
               C21590) *
              C48110 * C47860 * C1681 +
          ((C22245 * C262 -
            ((C21591 * C433 + C47839 * C450) * C48246 +
             (C21591 * C420 + C47839 * C434) * C261) +
            C22246 * C48234 - C22247 * C263 - C22248 * C48207) *
               C21588 +
           (C22247 * C262 - (C22246 * C48246 + C22245 * C261) +
            C22248 * C48234 - C22575 * C263 - C22576 * C48207) *
               C21589 +
           (C22575 * C262 - (C22248 * C48246 + C22247 * C261) +
            C22576 * C48234 - C22945 * C263 - C22946 * C48207) *
               C21590) *
              C48110 * C47860 * C1682 +
          (((C21591 * C422 + C47839 * C437) * C261 +
            (C21591 * C440 + C47839 * C452) * C48246 - C22577 * C262 -
            C22578 * C48234 + C22579 * C263 + C22580 * C48207) *
               C21588 +
           (C22577 * C261 + C22578 * C48246 - C22579 * C262 - C22580 * C48234 +
            C22581 * C263 + C22582 * C48207) *
               C21589 +
           (C22579 * C261 + C22580 * C48246 - C22581 * C262 - C22582 * C48234 +
            (C21591 * C22554 + C47839 * C22555) * C263 +
            (C21591 * C22556 + C47839 * C22557) * C48207) *
               C21590) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C21588 +
                     (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                      C21742 * C47951) *
                         C21589 +
                     (C21741 * C561 + C21742 * C48175 - C21743 * C562 -
                      C21744 * C47951) *
                         C21590) *
                        C48110 * C47865 +
                    ((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C21588 +
                     (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                      C21748 * C47951) *
                         C21589 +
                     (C21749 * C562 - (C21748 * C48175 + C21747 * C561) +
                      C21750 * C47951) *
                         C21590) *
                        C48110 * C47873 +
                    (((C21591 * C119 + C47839 * C126) * C561 +
                      (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
                      C21752 * C47951) *
                         C21588 +
                     (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                      C21754 * C47951) *
                         C21589 +
                     (C21753 * C561 + C21754 * C48175 - C21755 * C562 -
                      C21756 * C47951) *
                         C21590) *
                        C48110 * C2726) *
                       C3120 +
                   (((C22245 * C562 -
                      ((C21591 * C433 + C47839 * C450) * C48175 +
                       (C21591 * C420 + C47839 * C434) * C561) +
                      C22246 * C47951) *
                         C21588 +
                     (C22247 * C562 - (C22246 * C48175 + C22245 * C561) +
                      C22248 * C47951) *
                         C21589 +
                     (C22575 * C562 - (C22248 * C48175 + C22247 * C561) +
                      C22576 * C47951) *
                         C21590) *
                        C48110 * C47865 +
                    (((C21591 * C417 + C47839 * C427) * C561 +
                      (C21591 * C430 + C47839 * C447) * C48175 - C22249 * C562 -
                      C22250 * C47951) *
                         C21588 +
                     (C22249 * C561 + C22250 * C48175 - C22251 * C562 -
                      C22252 * C47951) *
                         C21589 +
                     (C22251 * C561 + C22252 * C48175 - C22837 * C562 -
                      C22838 * C47951) *
                         C21590) *
                        C48110 * C47873 +
                    ((C22253 * C562 -
                      ((C21591 * C431 + C47839 * C448) * C48175 +
                       (C21591 * C418 + C47839 * C428) * C561) +
                      C22254 * C47951) *
                         C21588 +
                     (C22255 * C562 - (C22254 * C48175 + C22253 * C561) +
                      C22256 * C47951) *
                         C21589 +
                     ((C21591 * C1561 + C47839 * C1564) * C562 -
                      (C22256 * C48175 + C22255 * C561) +
                      (C21591 * C1567 + C47839 * C1570) * C47951) *
                         C21590) *
                        C48110 * C2726) *
                       C47993)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C21588 +
                     (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                      C21742 * C47951) *
                         C21589 +
                     (C21741 * C561 + C21742 * C48175 - C21743 * C562 -
                      C21744 * C47951) *
                         C21590) *
                        C48110 * C2459 +
                    ((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C21588 +
                     (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                      C21748 * C47951) *
                         C21589 +
                     (C21749 * C562 - (C21748 * C48175 + C21747 * C561) +
                      C21750 * C47951) *
                         C21590) *
                        C48110 * C47870) *
                       C47989 +
                   (((C22245 * C562 -
                      ((C21591 * C433 + C47839 * C450) * C48175 +
                       (C21591 * C420 + C47839 * C434) * C561) +
                      C22246 * C47951) *
                         C21588 +
                     (C22247 * C562 - (C22246 * C48175 + C22245 * C561) +
                      C22248 * C47951) *
                         C21589 +
                     (C22575 * C562 - (C22248 * C48175 + C22247 * C561) +
                      C22576 * C47951) *
                         C21590) *
                        C48110 * C2459 +
                    (((C21591 * C417 + C47839 * C427) * C561 +
                      (C21591 * C430 + C47839 * C447) * C48175 - C22249 * C562 -
                      C22250 * C47951) *
                         C21588 +
                     (C22249 * C561 + C22250 * C48175 - C22251 * C562 -
                      C22252 * C47951) *
                         C21589 +
                     (C22251 * C561 + C22252 * C48175 - C22837 * C562 -
                      C22838 * C47951) *
                         C21590) *
                        C48110 * C47870) *
                       C47996 +
                   ((((C21591 * C422 + C47839 * C437) * C561 +
                      (C21591 * C440 + C47839 * C452) * C48175 - C22577 * C562 -
                      C22578 * C47951) *
                         C21588 +
                     (C22577 * C561 + C22578 * C48175 - C22579 * C562 -
                      C22580 * C47951) *
                         C21589 +
                     (C22579 * C561 + C22580 * C48175 - C22581 * C562 -
                      C22582 * C47951) *
                         C21590) *
                        C48110 * C2459 +
                    ((C23387 * C562 -
                      ((C21591 * C441 + C47839 * C453) * C48175 +
                       (C21591 * C423 + C47839 * C438) * C561) +
                      C23388 * C47951) *
                         C21588 +
                     (C23389 * C562 - (C23388 * C48175 + C23387 * C561) +
                      C23390 * C47951) *
                         C21589 +
                     ((C21591 * C5880 + C47839 * C5882) * C562 -
                      (C23390 * C48175 + C23389 * C561) +
                      (C21591 * C5884 + C47839 * C5886) * C47951) *
                         C21590) *
                        C48110 * C47870) *
                       C3628)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C21588 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C21589 +
            (C21741 * C261 + C21742 * C48246 - C21743 * C262 - C21744 * C48234 +
             C22441 * C263 + C22442 * C48207) *
                C21590) *
               C48110 * C2459 +
           ((C21745 * C262 -
             ((C21591 * C128 + C47839 * C139) * C48246 +
              (C21591 * C118 + C47839 * C125) * C261) +
             C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                C21588 +
            (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
             C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                C21589 +
            (C21749 * C262 - (C21748 * C48246 + C21747 * C261) +
             C21750 * C48234 - C22685 * C263 - C22686 * C48207) *
                C21590) *
               C48110 * C47870) *
              C3120 +
          (((C22245 * C262 -
             ((C21591 * C433 + C47839 * C450) * C48246 +
              (C21591 * C420 + C47839 * C434) * C261) +
             C22246 * C48234 - C22247 * C263 - C22248 * C48207) *
                C21588 +
            (C22247 * C262 - (C22246 * C48246 + C22245 * C261) +
             C22248 * C48234 - C22575 * C263 - C22576 * C48207) *
                C21589 +
            (C22575 * C262 - (C22248 * C48246 + C22247 * C261) +
             C22576 * C48234 - C22945 * C263 - C22946 * C48207) *
                C21590) *
               C48110 * C2459 +
           (((C21591 * C417 + C47839 * C427) * C261 +
             (C21591 * C430 + C47839 * C447) * C48246 - C22249 * C262 -
             C22250 * C48234 + C22251 * C263 + C22252 * C48207) *
                C21588 +
            (C22249 * C261 + C22250 * C48246 - C22251 * C262 - C22252 * C48234 +
             C22837 * C263 + C22838 * C48207) *
                C21589 +
            (C22251 * C261 + C22252 * C48246 - C22837 * C262 - C22838 * C48234 +
             (C21591 * C6402 + C47839 * C6404) * C263 +
             (C21591 * C6406 + C47839 * C6408) * C48207) *
                C21590) *
               C48110 * C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C21588 +
            (C21739 * C116 + C21740 * C47888) * C21589 +
            (C21741 * C116 + C21742 * C47888) * C21590) *
               C48110 * C48252 -
           ((C21748 * C47888 + C21747 * C116) * C21590 +
            (C21746 * C47888 + C21745 * C116) * C21589 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C21588) *
               C48110 * C48245 +
           (((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C21588 +
            (C21751 * C116 + C21752 * C47888) * C21589 +
            (C21753 * C116 + C21754 * C47888) * C21590) *
               C48110 * C48232 -
           ((C21976 * C47888 + C21975 * C116) * C21590 +
            (C21974 * C47888 + C21973 * C116) * C21589 +
            ((C21591 * C130 + C47839 * C141) * C47888 +
             (C21591 * C120 + C47839 * C131) * C116) *
                C21588) *
               C48110 * C48211) *
              C3120 +
          ((((C21591 * C417 + C47839 * C427) * C116 +
             (C21591 * C430 + C47839 * C447) * C47888) *
                C21588 +
            (C22249 * C116 + C22250 * C47888) * C21589 +
            (C22251 * C116 + C22252 * C47888) * C21590) *
               C48110 * C48245 -
           ((C22248 * C47888 + C22247 * C116) * C21590 +
            (C22246 * C47888 + C22245 * C116) * C21589 +
            ((C21591 * C433 + C47839 * C450) * C47888 +
             (C21591 * C420 + C47839 * C434) * C116) *
                C21588) *
               C48110 * C48252 -
           ((C22256 * C47888 + C22255 * C116) * C21590 +
            (C22254 * C47888 + C22253 * C116) * C21589 +
            ((C21591 * C431 + C47839 * C448) * C47888 +
             (C21591 * C418 + C47839 * C428) * C116) *
                C21588) *
               C48110 * C48232 +
           (((C21591 * C419 + C47839 * C429) * C116 +
             (C21591 * C432 + C47839 * C449) * C47888) *
                C21588 +
            ((C21591 * C820 + C47839 * C828) * C116 +
             (C21591 * C829 + C47839 * C835) * C47888) *
                C21589 +
            ((C21591 * C1457 + C47839 * C1458) * C116 +
             (C21591 * C1459 + C47839 * C1460) * C47888) *
                C21590) *
               C48110 * C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C21588 +
            (C21739 * C116 + C21740 * C47888) * C21589 +
            (C21741 * C116 + C21742 * C47888) * C21590) *
               C48110 * C2459 -
           ((C21748 * C47888 + C21747 * C116) * C21590 +
            (C21746 * C47888 + C21745 * C116) * C21589 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C21588) *
               C48110 * C47870) *
              C48254 +
          ((((C21591 * C417 + C47839 * C427) * C116 +
             (C21591 * C430 + C47839 * C447) * C47888) *
                C21588 +
            (C22249 * C116 + C22250 * C47888) * C21589 +
            (C22251 * C116 + C22252 * C47888) * C21590) *
               C48110 * C47870 -
           ((C22248 * C47888 + C22247 * C116) * C21590 +
            (C22246 * C47888 + C22245 * C116) * C21589 +
            ((C21591 * C433 + C47839 * C450) * C47888 +
             (C21591 * C420 + C47839 * C434) * C116) *
                C21588) *
               C48110 * C2459) *
              C48251 +
          ((((C21591 * C422 + C47839 * C437) * C116 +
             (C21591 * C440 + C47839 * C452) * C47888) *
                C21588 +
            (C22577 * C116 + C22578 * C47888) * C21589 +
            (C22579 * C116 + C22580 * C47888) * C21590) *
               C48110 * C2459 -
           ((C23390 * C47888 + C23389 * C116) * C21590 +
            (C23388 * C47888 + C23387 * C116) * C21589 +
            ((C21591 * C441 + C47839 * C453) * C47888 +
             (C21591 * C423 + C47839 * C438) * C116) *
                C21588) *
               C48110 * C47870) *
              C48242 +
          ((((C21591 * C1862 + C47839 * C1871) * C116 +
             (C21591 * C1868 + C47839 * C1880) * C47888) *
                C21588 +
            ((C21591 * C2240 + C47839 * C2243) * C116 +
             (C21591 * C2246 + C47839 * C2249) * C47888) *
                C21589 +
            ((C21591 * C7270 + C47839 * C7272) * C116 +
             (C21591 * C7274 + C47839 * C7276) * C47888) *
                C21590) *
               C48110 * C47870 -
           ((C23602 * C47888 + C23601 * C116) * C21590 +
            (C23600 * C47888 + C23599 * C116) * C21589 +
            ((C21591 * C1869 + C47839 * C1881) * C47888 +
             (C21591 * C1863 + C47839 * C1872) * C116) *
                C21588) *
               C48110 * C2459) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C116 +
                      (C21591 * C127 + C47839 * C138) * C47888) *
                         C21588 +
                     (C21739 * C116 + C21740 * C47888) * C21589 +
                     (C21741 * C116 + C21742 * C47888) * C21590) *
                        C48110 * C47865 -
                    ((C21748 * C47888 + C21747 * C116) * C21590 +
                     (C21746 * C47888 + C21745 * C116) * C21589 +
                     ((C21591 * C128 + C47839 * C139) * C47888 +
                      (C21591 * C118 + C47839 * C125) * C116) *
                         C21588) *
                        C48110 * C47873 +
                    (((C21591 * C119 + C47839 * C126) * C116 +
                      (C21591 * C129 + C47839 * C140) * C47888) *
                         C21588 +
                     (C21751 * C116 + C21752 * C47888) * C21589 +
                     (C21753 * C116 + C21754 * C47888) * C21590) *
                        C48110 * C2726) *
                       C47989 +
                   ((((C21591 * C417 + C47839 * C427) * C116 +
                      (C21591 * C430 + C47839 * C447) * C47888) *
                         C21588 +
                     (C22249 * C116 + C22250 * C47888) * C21589 +
                     (C22251 * C116 + C22252 * C47888) * C21590) *
                        C48110 * C47873 -
                    ((C22248 * C47888 + C22247 * C116) * C21590 +
                     (C22246 * C47888 + C22245 * C116) * C21589 +
                     ((C21591 * C433 + C47839 * C450) * C47888 +
                      (C21591 * C420 + C47839 * C434) * C116) *
                         C21588) *
                        C48110 * C47865 -
                    ((C22256 * C47888 + C22255 * C116) * C21590 +
                     (C22254 * C47888 + C22253 * C116) * C21589 +
                     ((C21591 * C431 + C47839 * C448) * C47888 +
                      (C21591 * C418 + C47839 * C428) * C116) *
                         C21588) *
                        C48110 * C2726) *
                       C47996 +
                   ((((C21591 * C422 + C47839 * C437) * C116 +
                      (C21591 * C440 + C47839 * C452) * C47888) *
                         C21588 +
                     (C22577 * C116 + C22578 * C47888) * C21589 +
                     (C22579 * C116 + C22580 * C47888) * C21590) *
                        C48110 * C47865 -
                    ((C23390 * C47888 + C23389 * C116) * C21590 +
                     (C23388 * C47888 + C23387 * C116) * C21589 +
                     ((C21591 * C441 + C47839 * C453) * C47888 +
                      (C21591 * C423 + C47839 * C438) * C116) *
                         C21588) *
                        C48110 * C47873 +
                    (((C21591 * C424 + C47839 * C439) * C116 +
                      (C21591 * C442 + C47839 * C454) * C47888) *
                         C21588 +
                     ((C21591 * C1166 + C47839 * C1178) * C116 +
                      (C21591 * C1181 + C47839 * C1193) * C47888) *
                         C21589 +
                     ((C21591 * C1171 + C47839 * C1186) * C116 +
                      (C21591 * C1189 + C47839 * C1198) * C47888) *
                         C21590) *
                        C48110 * C2726) *
                       C3628)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C21588 +
            (C21739 * C116 + C21740 * C47888) * C21589 +
            (C21741 * C116 + C21742 * C47888) * C21590) *
               C48110 * C48252 -
           ((C21748 * C47888 + C21747 * C116) * C21590 +
            (C21746 * C47888 + C21745 * C116) * C21589 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C21588) *
               C48110 * C48245 +
           (((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C21588 +
            (C21751 * C116 + C21752 * C47888) * C21589 +
            (C21753 * C116 + C21754 * C47888) * C21590) *
               C48110 * C48232 -
           ((C21976 * C47888 + C21975 * C116) * C21590 +
            (C21974 * C47888 + C21973 * C116) * C21589 +
            ((C21591 * C130 + C47839 * C141) * C47888 +
             (C21591 * C120 + C47839 * C131) * C116) *
                C21588) *
               C48110 * C48211) *
              C3120 +
          ((((C21591 * C417 + C47839 * C427) * C116 +
             (C21591 * C430 + C47839 * C447) * C47888) *
                C21588 +
            (C22249 * C116 + C22250 * C47888) * C21589 +
            (C22251 * C116 + C22252 * C47888) * C21590) *
               C48110 * C48245 -
           ((C22248 * C47888 + C22247 * C116) * C21590 +
            (C22246 * C47888 + C22245 * C116) * C21589 +
            ((C21591 * C433 + C47839 * C450) * C47888 +
             (C21591 * C420 + C47839 * C434) * C116) *
                C21588) *
               C48110 * C48252 -
           ((C22256 * C47888 + C22255 * C116) * C21590 +
            (C22254 * C47888 + C22253 * C116) * C21589 +
            ((C21591 * C431 + C47839 * C448) * C47888 +
             (C21591 * C418 + C47839 * C428) * C116) *
                C21588) *
               C48110 * C48232 +
           (((C21591 * C419 + C47839 * C429) * C116 +
             (C21591 * C432 + C47839 * C449) * C47888) *
                C21588 +
            ((C21591 * C820 + C47839 * C828) * C116 +
             (C21591 * C829 + C47839 * C835) * C47888) *
                C21589 +
            ((C21591 * C1457 + C47839 * C1458) * C116 +
             (C21591 * C1459 + C47839 * C1460) * C47888) *
                C21590) *
               C48110 * C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C21588 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C21589 +
            (C21741 * C261 + C21742 * C48246 - C21743 * C262 - C21744 * C48234 +
             C22441 * C263 + C22442 * C48207) *
                C21590) *
               C48110 * C2459 +
           ((C21745 * C262 -
             ((C21591 * C128 + C47839 * C139) * C48246 +
              (C21591 * C118 + C47839 * C125) * C261) +
             C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                C21588 +
            (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
             C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                C21589 +
            (C21749 * C262 - (C21748 * C48246 + C21747 * C261) +
             C21750 * C48234 - C22685 * C263 - C22686 * C48207) *
                C21590) *
               C48110 * C47870) *
              C3120 +
          (((C22245 * C262 -
             ((C21591 * C433 + C47839 * C450) * C48246 +
              (C21591 * C420 + C47839 * C434) * C261) +
             C22246 * C48234 - C22247 * C263 - C22248 * C48207) *
                C21588 +
            (C22247 * C262 - (C22246 * C48246 + C22245 * C261) +
             C22248 * C48234 - C22575 * C263 - C22576 * C48207) *
                C21589 +
            (C22575 * C262 - (C22248 * C48246 + C22247 * C261) +
             C22576 * C48234 - C22945 * C263 - C22946 * C48207) *
                C21590) *
               C48110 * C2459 +
           (((C21591 * C417 + C47839 * C427) * C261 +
             (C21591 * C430 + C47839 * C447) * C48246 - C22249 * C262 -
             C22250 * C48234 + C22251 * C263 + C22252 * C48207) *
                C21588 +
            (C22249 * C261 + C22250 * C48246 - C22251 * C262 - C22252 * C48234 +
             C22837 * C263 + C22838 * C48207) *
                C21589 +
            (C22251 * C261 + C22252 * C48246 - C22837 * C262 - C22838 * C48234 +
             (C21591 * C6402 + C47839 * C6404) * C263 +
             (C21591 * C6406 + C47839 * C6408) * C48207) *
                C21590) *
               C48110 * C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C561 +
            (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
            C21740 * C47951) *
               C21588 +
           (C21739 * C561 + C21740 * C48175 - C21741 * C562 - C21742 * C47951) *
               C21589 +
           (C21741 * C561 + C21742 * C48175 - C21743 * C562 - C21744 * C47951) *
               C21590) *
              C48110 * C557 +
          ((C21745 * C562 -
            ((C21591 * C128 + C47839 * C139) * C48175 +
             (C21591 * C118 + C47839 * C125) * C561) +
            C21746 * C47951) *
               C21588 +
           (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
            C21748 * C47951) *
               C21589 +
           (C21749 * C562 - (C21748 * C48175 + C21747 * C561) +
            C21750 * C47951) *
               C21590) *
              C48110 * C558 +
          (((C21591 * C119 + C47839 * C126) * C561 +
            (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
            C21752 * C47951) *
               C21588 +
           (C21751 * C561 + C21752 * C48175 - C21753 * C562 - C21754 * C47951) *
               C21589 +
           (C21753 * C561 + C21754 * C48175 - C21755 * C562 - C21756 * C47951) *
               C21590) *
              C48110 * C559 +
          ((C21973 * C562 -
            ((C21591 * C130 + C47839 * C141) * C48175 +
             (C21591 * C120 + C47839 * C131) * C561) +
            C21974 * C47951) *
               C21588 +
           (C21975 * C562 - (C21974 * C48175 + C21973 * C561) +
            C21976 * C47951) *
               C21589 +
           ((C21591 * C1307 + C47839 * C1308) * C562 -
            (C21976 * C48175 + C21975 * C561) +
            (C21591 * C1309 + C47839 * C1310) * C47951) *
               C21590) *
              C48110 * C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1303 +
            (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
            C21740 * C1298 + C21741 * C1305 + C21742 * C1299 - C21743 * C1306 -
            C21744 * C48217) *
               C21588 +
           (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 - C21742 * C1298 +
            C21743 * C1305 + C21744 * C1299 - C22441 * C1306 -
            C22442 * C48217) *
               C21589 +
           (C21741 * C1303 + C21742 * C1297 - C21743 * C1304 - C21744 * C1298 +
            C22441 * C1305 + C22442 * C1299 - C22443 * C1306 -
            C22444 * C48217) *
               C21590) *
              C48110 * C48161 +
          ((C21745 * C1304 -
            ((C21591 * C128 + C47839 * C139) * C1297 +
             (C21591 * C118 + C47839 * C125) * C1303) +
            C21746 * C1298 - C21747 * C1305 - C21748 * C1299 + C21749 * C1306 +
            C21750 * C48217) *
               C21588 +
           (C21747 * C1304 - (C21746 * C1297 + C21745 * C1303) +
            C21748 * C1298 - C21749 * C1305 - C21750 * C1299 + C22685 * C1306 +
            C22686 * C48217) *
               C21589 +
           (C21749 * C1304 - (C21748 * C1297 + C21747 * C1303) +
            C21750 * C1298 - C22685 * C1305 - C22686 * C1299 +
            (C21591 * C5702 + C47839 * C5704) * C1306 +
            (C21591 * C5706 + C47839 * C5708) * C48217) *
               C21590) *
              C48110 * C47870) *
         C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C21588 +
                     (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                      C21742 * C47951) *
                         C21589 +
                     (C21741 * C561 + C21742 * C48175 - C21743 * C562 -
                      C21744 * C47951) *
                         C21590) *
                        C48110 * C258 +
                    ((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C21588 +
                     (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                      C21748 * C47951) *
                         C21589 +
                     (C21749 * C562 - (C21748 * C48175 + C21747 * C561) +
                      C21750 * C47951) *
                         C21590) *
                        C48110 * C259 +
                    (((C21591 * C119 + C47839 * C126) * C561 +
                      (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
                      C21752 * C47951) *
                         C21588 +
                     (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                      C21754 * C47951) *
                         C21589 +
                     (C21753 * C561 + C21754 * C48175 - C21755 * C562 -
                      C21756 * C47951) *
                         C21590) *
                        C48110 * C48201) *
                       C48176 +
                   (((C22245 * C562 -
                      ((C21591 * C433 + C47839 * C450) * C48175 +
                       (C21591 * C420 + C47839 * C434) * C561) +
                      C22246 * C47951) *
                         C21588 +
                     (C22247 * C562 - (C22246 * C48175 + C22245 * C561) +
                      C22248 * C47951) *
                         C21589 +
                     ((C21591 * C1559 + C47839 * C1562) * C562 -
                      (C22248 * C48175 + C22247 * C561) +
                      (C21591 * C1565 + C47839 * C1568) * C47951) *
                         C21590) *
                        C48110 * C258 +
                    (((C21591 * C417 + C47839 * C427) * C561 +
                      (C21591 * C430 + C47839 * C447) * C48175 - C22249 * C562 -
                      C22250 * C47951) *
                         C21588 +
                     (C22249 * C561 + C22250 * C48175 - C22251 * C562 -
                      C22252 * C47951) *
                         C21589 +
                     (C22251 * C561 + C22252 * C48175 -
                      (C21591 * C1560 + C47839 * C1563) * C562 -
                      (C21591 * C1566 + C47839 * C1569) * C47951) *
                         C21590) *
                        C48110 * C259 +
                    ((C22253 * C562 -
                      ((C21591 * C431 + C47839 * C448) * C48175 +
                       (C21591 * C418 + C47839 * C428) * C561) +
                      C22254 * C47951) *
                         C21588 +
                     (C22255 * C562 - (C22254 * C48175 + C22253 * C561) +
                      C22256 * C47951) *
                         C21589 +
                     ((C21591 * C1561 + C47839 * C1564) * C562 -
                      (C22256 * C48175 + C22255 * C561) +
                      (C21591 * C1567 + C47839 * C1570) * C47951) *
                         C21590) *
                        C48110 * C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C1303 +
                     (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                     C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                     C21743 * C1306 - C21744 * C48217) *
                        C21588 +
                    (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 -
                     C21742 * C1298 + C21743 * C1305 + C21744 * C1299 -
                     C22441 * C1306 - C22442 * C48217) *
                        C21589 +
                    (C21741 * C1303 + C21742 * C1297 - C21743 * C1304 -
                     C21744 * C1298 + C22441 * C1305 + C22442 * C1299 -
                     C22443 * C1306 - C22444 * C48217) *
                        C21590) *
                       C48110 * C47860 * C48176 +
                   ((C22245 * C1304 -
                     ((C21591 * C433 + C47839 * C450) * C1297 +
                      (C21591 * C420 + C47839 * C434) * C1303) +
                     C22246 * C1298 - C22247 * C1305 - C22248 * C1299 +
                     C22575 * C1306 + C22576 * C48217) *
                        C21588 +
                    (C22247 * C1304 - (C22246 * C1297 + C22245 * C1303) +
                     C22248 * C1298 - C22575 * C1305 - C22576 * C1299 +
                     C22945 * C1306 + C22946 * C48217) *
                        C21589 +
                    (C22575 * C1304 - (C22248 * C1297 + C22247 * C1303) +
                     C22576 * C1298 - C22945 * C1305 - C22946 * C1299 +
                     (C21591 * C22936 + C47839 * C22937) * C1306 +
                     (C21591 * C22938 + C47839 * C22939) * C48217) *
                        C21590) *
                       C48110 * C47860 * C47993)) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C261 +
            (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
            C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
               C21588 +
           (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
            C21743 * C263 + C21744 * C48207) *
               C21589 +
           (C21741 * C261 + C21742 * C48246 - C21743 * C262 - C21744 * C48234 +
            (C21591 * C1032 + C47839 * C1041) * C263 +
            (C21591 * C1044 + C47839 * C1050) * C48207) *
               C21590) *
              C48110 * C258 +
          ((C21745 * C262 -
            ((C21591 * C128 + C47839 * C139) * C48246 +
             (C21591 * C118 + C47839 * C125) * C261) +
            C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
               C21588 +
           (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
            C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
               C21589 +
           (C21749 * C262 - (C21748 * C48246 + C21747 * C261) +
            C21750 * C48234 - (C21591 * C1033 + C47839 * C1042) * C263 -
            (C21591 * C1045 + C47839 * C1051) * C48207) *
               C21590) *
              C48110 * C259 +
          (((C21591 * C119 + C47839 * C126) * C261 +
            (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
            C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
               C21588 +
           (C21751 * C261 + C21752 * C48246 - C21753 * C262 - C21754 * C48234 +
            C21755 * C263 + C21756 * C48207) *
               C21589 +
           (C21753 * C261 + C21754 * C48246 - C21755 * C262 - C21756 * C48234 +
            (C21591 * C1034 + C47839 * C1043) * C263 +
            (C21591 * C1046 + C47839 * C1052) * C48207) *
               C21590) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C116 +
            (C21591 * C127 + C47839 * C138) * C47888) *
               C21588 +
           ((C21591 * C266 + C47839 * C276) * C116 +
            (C21591 * C279 + C47839 * C296) * C47888) *
               C21589 +
           ((C21591 * C267 + C47839 * C280) * C116 +
            (C21591 * C283 + C47839 * C297) * C47888) *
               C21590) *
              C48110 * C107 -
          (((C21591 * C284 + C47839 * C298) * C47888 +
            (C21591 * C268 + C47839 * C281) * C116) *
               C21590 +
           ((C21591 * C278 + C47839 * C295) * C47888 +
            (C21591 * C265 + C47839 * C275) * C116) *
               C21589 +
           ((C21591 * C128 + C47839 * C139) * C47888 +
            (C21591 * C118 + C47839 * C125) * C116) *
               C21588) *
              C48110 * C108 +
          (((C21591 * C119 + C47839 * C126) * C116 +
            (C21591 * C129 + C47839 * C140) * C47888) *
               C21588 +
           ((C21591 * C264 + C47839 * C274) * C116 +
            (C21591 * C277 + C47839 * C294) * C47888) *
               C21589 +
           ((C21591 * C269 + C47839 * C282) * C116 +
            (C21591 * C285 + C47839 * C299) * C47888) *
               C21590) *
              C48110 * C109 -
          (((C21591 * C289 + C47839 * C301) * C47888 +
            (C21591 * C271 + C47839 * C288) * C116) *
               C21590 +
           ((C21591 * C287 + C47839 * C300) * C47888 +
            (C21591 * C270 + C47839 * C286) * C116) *
               C21589 +
           ((C21591 * C130 + C47839 * C141) * C47888 +
            (C21591 * C120 + C47839 * C131) * C116) *
               C21588) *
              C48110 * C110 +
          (((C21591 * C121 + C47839 * C132) * C116 +
            (C21591 * C133 + C47839 * C142) * C47888) *
               C21588 +
           ((C21591 * C272 + C47839 * C290) * C116 +
            (C21591 * C291 + C47839 * C302) * C47888) *
               C21589 +
           ((C21591 * C273 + C47839 * C292) * C116 +
            (C21591 * C293 + C47839 * C303) * C47888) *
               C21590) *
              C48110 * C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C21588 +
            (C21739 * C116 + C21740 * C47888) * C21589 +
            (C21741 * C116 + C21742 * C47888) * C21590) *
               C48110 * C258 -
           ((C21748 * C47888 + C21747 * C116) * C21590 +
            (C21746 * C47888 + C21745 * C116) * C21589 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C21588) *
               C48110 * C259 +
           (((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C21588 +
            (C21751 * C116 + C21752 * C47888) * C21589 +
            (C21753 * C116 + C21754 * C47888) * C21590) *
               C48110 * C48201) *
              C48247 +
          ((((C21591 * C417 + C47839 * C427) * C116 +
             (C21591 * C430 + C47839 * C447) * C47888) *
                C21588 +
            ((C21591 * C818 + C47839 * C823) * C116 +
             (C21591 * C826 + C47839 * C833) * C47888) *
                C21589 +
            ((C21591 * C1164 + C47839 * C1173) * C116 +
             (C21591 * C1176 + C47839 * C1191) * C47888) *
                C21590) *
               C48110 * C259 -
           (((C21591 * C1177 + C47839 * C1192) * C47888 +
             (C21591 * C1165 + C47839 * C1174) * C116) *
                C21590 +
            ((C21591 * C825 + C47839 * C832) * C47888 +
             (C21591 * C817 + C47839 * C822) * C116) *
                C21589 +
            ((C21591 * C433 + C47839 * C450) * C47888 +
             (C21591 * C420 + C47839 * C434) * C116) *
                C21588) *
               C48110 * C258 -
           (((C21591 * C1175 + C47839 * C1190) * C47888 +
             (C21591 * C1163 + C47839 * C1172) * C116) *
                C21590 +
            ((C21591 * C827 + C47839 * C834) * C47888 +
             (C21591 * C819 + C47839 * C824) * C116) *
                C21589 +
            ((C21591 * C431 + C47839 * C448) * C47888 +
             (C21591 * C418 + C47839 * C428) * C116) *
                C21588) *
               C48110 * C48201) *
              C48236 +
          ((((C21591 * C422 + C47839 * C437) * C116 +
             (C21591 * C440 + C47839 * C452) * C47888) *
                C21588 +
            ((C21591 * C1168 + C47839 * C1180) * C116 +
             (C21591 * C1183 + C47839 * C1195) * C47888) *
                C21589 +
            ((C21591 * C1169 + C47839 * C1184) * C116 +
             (C21591 * C1187 + C47839 * C1196) * C47888) *
                C21590) *
               C48110 * C258 -
           (((C21591 * C1188 + C47839 * C1197) * C47888 +
             (C21591 * C1170 + C47839 * C1185) * C116) *
                C21590 +
            ((C21591 * C1182 + C47839 * C1194) * C47888 +
             (C21591 * C1167 + C47839 * C1179) * C116) *
                C21589 +
            ((C21591 * C441 + C47839 * C453) * C47888 +
             (C21591 * C423 + C47839 * C438) * C116) *
                C21588) *
               C48110 * C259 +
           (((C21591 * C424 + C47839 * C439) * C116 +
             (C21591 * C442 + C47839 * C454) * C47888) *
                C21588 +
            ((C21591 * C1166 + C47839 * C1178) * C116 +
             (C21591 * C1181 + C47839 * C1193) * C47888) *
                C21589 +
            ((C21591 * C1171 + C47839 * C1186) * C116 +
             (C21591 * C1189 + C47839 * C1198) * C47888) *
                C21590) *
               C48110 * C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C21588 +
           (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
            C21743 * C955 + C21744 * C48207) *
               C21589 +
           (C21741 * C953 + C21742 * C947 - C21743 * C954 - C21744 * C948 +
            (C21591 * C1032 + C47839 * C1041) * C955 +
            (C21591 * C1044 + C47839 * C1050) * C48207) *
               C21590) *
              C48110 * C48243 +
          ((C21745 * C954 -
            ((C21591 * C128 + C47839 * C139) * C947 +
             (C21591 * C118 + C47839 * C125) * C953) +
            C21746 * C948 - C21747 * C955 - C21748 * C48207) *
               C21588 +
           (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
            C21749 * C955 - C21750 * C48207) *
               C21589 +
           (C21749 * C954 - (C21748 * C947 + C21747 * C953) + C21750 * C948 -
            (C21591 * C1033 + C47839 * C1042) * C955 -
            (C21591 * C1045 + C47839 * C1051) * C48207) *
               C21590) *
              C48110 * C48230 +
          (((C21591 * C119 + C47839 * C126) * C953 +
            (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
            C21752 * C948 + C21753 * C955 + C21754 * C48207) *
               C21588 +
           (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
            C21755 * C955 + C21756 * C48207) *
               C21589 +
           (C21753 * C953 + C21754 * C947 - C21755 * C954 - C21756 * C948 +
            (C21591 * C1034 + C47839 * C1043) * C955 +
            (C21591 * C1046 + C47839 * C1052) * C48207) *
               C21590) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C117 + C47839 * C124) * C1024 +
           (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
           C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
           C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
              C21588 +
          (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
           C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
           C22443 * C1028 + C22444 * C1022) *
              C21589 +
          (C21741 * C1024 + C21742 * C1018 - C21743 * C1025 - C21744 * C1019 +
           C22441 * C1026 + C22442 * C1020 - C22443 * C1027 - C22444 * C1021 +
           (C21591 * C22428 + C47839 * C22429) * C1028 +
           (C21591 * C22430 + C47839 * C22431) * C1022) *
              C21590) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C21588 +
           (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
            C21743 * C955 + C21744 * C48207) *
               C21589 +
           (C21741 * C953 + C21742 * C947 - C21743 * C954 - C21744 * C948 +
            C22441 * C955 + C22442 * C48207) *
               C21590) *
              C48110 * C47860 * C48247 +
          ((C22245 * C954 -
            ((C21591 * C433 + C47839 * C450) * C947 +
             (C21591 * C420 + C47839 * C434) * C953) +
            C22246 * C948 - C22247 * C955 - C22248 * C48207) *
               C21588 +
           (C22247 * C954 - (C22246 * C947 + C22245 * C953) + C22248 * C948 -
            C22575 * C955 - C22576 * C48207) *
               C21589 +
           (C22575 * C954 - (C22248 * C947 + C22247 * C953) + C22576 * C948 -
            (C21591 * C6401 + C47839 * C6403) * C955 -
            (C21591 * C6405 + C47839 * C6407) * C48207) *
               C21590) *
              C48110 * C47860 * C48236 +
          (((C21591 * C422 + C47839 * C437) * C953 +
            (C21591 * C440 + C47839 * C452) * C947 - C22577 * C954 -
            C22578 * C948 + C22579 * C955 + C22580 * C48207) *
               C21588 +
           (C22577 * C953 + C22578 * C947 - C22579 * C954 - C22580 * C948 +
            C22581 * C955 + C22582 * C48207) *
               C21589 +
           (C22579 * C953 + C22580 * C947 - C22581 * C954 - C22582 * C948 +
            (C21591 * C22554 + C47839 * C22555) * C955 +
            (C21591 * C22556 + C47839 * C22557) * C48207) *
               C21590) *
              C48110 * C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C116 +
                      (C21591 * C127 + C47839 * C138) * C47888) *
                         C21588 +
                     (C21739 * C116 + C21740 * C47888) * C21589 +
                     (C21741 * C116 + C21742 * C47888) * C21590) *
                        C48110 * C557 -
                    ((C21748 * C47888 + C21747 * C116) * C21590 +
                     (C21746 * C47888 + C21745 * C116) * C21589 +
                     ((C21591 * C128 + C47839 * C139) * C47888 +
                      (C21591 * C118 + C47839 * C125) * C116) *
                         C21588) *
                        C48110 * C558 +
                    (((C21591 * C119 + C47839 * C126) * C116 +
                      (C21591 * C129 + C47839 * C140) * C47888) *
                         C21588 +
                     (C21751 * C116 + C21752 * C47888) * C21589 +
                     (C21753 * C116 + C21754 * C47888) * C21590) *
                        C48110 * C559 -
                    ((C21976 * C47888 + C21975 * C116) * C21590 +
                     (C21974 * C47888 + C21973 * C116) * C21589 +
                     ((C21591 * C130 + C47839 * C141) * C47888 +
                      (C21591 * C120 + C47839 * C131) * C116) *
                         C21588) *
                        C48110 * C48211) *
                       C48176 +
                   ((((C21591 * C417 + C47839 * C427) * C116 +
                      (C21591 * C430 + C47839 * C447) * C47888) *
                         C21588 +
                     ((C21591 * C818 + C47839 * C823) * C116 +
                      (C21591 * C826 + C47839 * C833) * C47888) *
                         C21589 +
                     ((C21591 * C1164 + C47839 * C1173) * C116 +
                      (C21591 * C1176 + C47839 * C1191) * C47888) *
                         C21590) *
                        C48110 * C558 -
                    (((C21591 * C1177 + C47839 * C1192) * C47888 +
                      (C21591 * C1165 + C47839 * C1174) * C116) *
                         C21590 +
                     ((C21591 * C825 + C47839 * C832) * C47888 +
                      (C21591 * C817 + C47839 * C822) * C116) *
                         C21589 +
                     ((C21591 * C433 + C47839 * C450) * C47888 +
                      (C21591 * C420 + C47839 * C434) * C116) *
                         C21588) *
                        C48110 * C557 -
                    (((C21591 * C1175 + C47839 * C1190) * C47888 +
                      (C21591 * C1163 + C47839 * C1172) * C116) *
                         C21590 +
                     ((C21591 * C827 + C47839 * C834) * C47888 +
                      (C21591 * C819 + C47839 * C824) * C116) *
                         C21589 +
                     ((C21591 * C431 + C47839 * C448) * C47888 +
                      (C21591 * C418 + C47839 * C428) * C116) *
                         C21588) *
                        C48110 * C559 +
                    (((C21591 * C419 + C47839 * C429) * C116 +
                      (C21591 * C432 + C47839 * C449) * C47888) *
                         C21588 +
                     ((C21591 * C820 + C47839 * C828) * C116 +
                      (C21591 * C829 + C47839 * C835) * C47888) *
                         C21589 +
                     ((C21591 * C1457 + C47839 * C1458) * C116 +
                      (C21591 * C1459 + C47839 * C1460) * C47888) *
                         C21590) *
                        C48110 * C48211) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C953 +
                      (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
                      C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                         C21588 +
                     (C21739 * C953 + C21740 * C947 - C21741 * C954 -
                      C21742 * C948 + C21743 * C955 + C21744 * C48207) *
                         C21589 +
                     (C21741 * C953 + C21742 * C947 - C21743 * C954 -
                      C21744 * C948 + C22441 * C955 + C22442 * C48207) *
                         C21590) *
                        C48110 * C48161 +
                    ((C21745 * C954 -
                      ((C21591 * C128 + C47839 * C139) * C947 +
                       (C21591 * C118 + C47839 * C125) * C953) +
                      C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                         C21588 +
                     (C21747 * C954 - (C21746 * C947 + C21745 * C953) +
                      C21748 * C948 - C21749 * C955 - C21750 * C48207) *
                         C21589 +
                     (C21749 * C954 - (C21748 * C947 + C21747 * C953) +
                      C21750 * C948 - C22685 * C955 - C22686 * C48207) *
                         C21590) *
                        C48110 * C47870) *
                       C48176 +
                   (((C22245 * C954 -
                      ((C21591 * C433 + C47839 * C450) * C947 +
                       (C21591 * C420 + C47839 * C434) * C953) +
                      C22246 * C948 - C22247 * C955 - C22248 * C48207) *
                         C21588 +
                     (C22247 * C954 - (C22246 * C947 + C22245 * C953) +
                      C22248 * C948 - C22575 * C955 - C22576 * C48207) *
                         C21589 +
                     (C22575 * C954 - (C22248 * C947 + C22247 * C953) +
                      C22576 * C948 - (C21591 * C6401 + C47839 * C6403) * C955 -
                      (C21591 * C6405 + C47839 * C6407) * C48207) *
                         C21590) *
                        C48110 * C48161 +
                    (((C21591 * C417 + C47839 * C427) * C953 +
                      (C21591 * C430 + C47839 * C447) * C947 - C22249 * C954 -
                      C22250 * C948 + C22251 * C955 + C22252 * C48207) *
                         C21588 +
                     (C22249 * C953 + C22250 * C947 - C22251 * C954 -
                      C22252 * C948 + C22837 * C955 + C22838 * C48207) *
                         C21589 +
                     (C22251 * C953 + C22252 * C947 - C22837 * C954 -
                      C22838 * C948 + (C21591 * C6402 + C47839 * C6404) * C955 +
                      (C21591 * C6406 + C47839 * C6408) * C48207) *
                         C21590) *
                        C48110 * C47870) *
                       C47993)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C116 +
            (C21591 * C127 + C47839 * C138) * C47888) *
               C21588 +
           ((C21591 * C266 + C47839 * C276) * C116 +
            (C21591 * C279 + C47839 * C296) * C47888) *
               C21589 +
           ((C21591 * C267 + C47839 * C280) * C116 +
            (C21591 * C283 + C47839 * C297) * C47888) *
               C21590) *
              C48110 * C107 -
          (((C21591 * C284 + C47839 * C298) * C47888 +
            (C21591 * C268 + C47839 * C281) * C116) *
               C21590 +
           ((C21591 * C278 + C47839 * C295) * C47888 +
            (C21591 * C265 + C47839 * C275) * C116) *
               C21589 +
           ((C21591 * C128 + C47839 * C139) * C47888 +
            (C21591 * C118 + C47839 * C125) * C116) *
               C21588) *
              C48110 * C108 +
          (((C21591 * C119 + C47839 * C126) * C116 +
            (C21591 * C129 + C47839 * C140) * C47888) *
               C21588 +
           ((C21591 * C264 + C47839 * C274) * C116 +
            (C21591 * C277 + C47839 * C294) * C47888) *
               C21589 +
           ((C21591 * C269 + C47839 * C282) * C116 +
            (C21591 * C285 + C47839 * C299) * C47888) *
               C21590) *
              C48110 * C109 -
          (((C21591 * C289 + C47839 * C301) * C47888 +
            (C21591 * C271 + C47839 * C288) * C116) *
               C21590 +
           ((C21591 * C287 + C47839 * C300) * C47888 +
            (C21591 * C270 + C47839 * C286) * C116) *
               C21589 +
           ((C21591 * C130 + C47839 * C141) * C47888 +
            (C21591 * C120 + C47839 * C131) * C116) *
               C21588) *
              C48110 * C110 +
          (((C21591 * C121 + C47839 * C132) * C116 +
            (C21591 * C133 + C47839 * C142) * C47888) *
               C21588 +
           ((C21591 * C272 + C47839 * C290) * C116 +
            (C21591 * C291 + C47839 * C302) * C47888) *
               C21589 +
           ((C21591 * C273 + C47839 * C292) * C116 +
            (C21591 * C293 + C47839 * C303) * C47888) *
               C21590) *
              C48110 * C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C261 +
            (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
            C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
               C21588 +
           (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
            C21743 * C263 + C21744 * C48207) *
               C21589 +
           (C21741 * C261 + C21742 * C48246 - C21743 * C262 - C21744 * C48234 +
            (C21591 * C1032 + C47839 * C1041) * C263 +
            (C21591 * C1044 + C47839 * C1050) * C48207) *
               C21590) *
              C48110 * C258 +
          ((C21745 * C262 -
            ((C21591 * C128 + C47839 * C139) * C48246 +
             (C21591 * C118 + C47839 * C125) * C261) +
            C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
               C21588 +
           (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
            C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
               C21589 +
           (C21749 * C262 - (C21748 * C48246 + C21747 * C261) +
            C21750 * C48234 - (C21591 * C1033 + C47839 * C1042) * C263 -
            (C21591 * C1045 + C47839 * C1051) * C48207) *
               C21590) *
              C48110 * C259 +
          (((C21591 * C119 + C47839 * C126) * C261 +
            (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
            C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
               C21588 +
           (C21751 * C261 + C21752 * C48246 - C21753 * C262 - C21754 * C48234 +
            C21755 * C263 + C21756 * C48207) *
               C21589 +
           (C21753 * C261 + C21754 * C48246 - C21755 * C262 - C21756 * C48234 +
            (C21591 * C1034 + C47839 * C1043) * C263 +
            (C21591 * C1046 + C47839 * C1052) * C48207) *
               C21590) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C21588 +
           (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
            C21743 * C955 + C21744 * C48207) *
               C21589 +
           (C21741 * C953 + C21742 * C947 - C21743 * C954 - C21744 * C948 +
            (C21591 * C1032 + C47839 * C1041) * C955 +
            (C21591 * C1044 + C47839 * C1050) * C48207) *
               C21590) *
              C48110 * C48243 +
          ((C21745 * C954 -
            ((C21591 * C128 + C47839 * C139) * C947 +
             (C21591 * C118 + C47839 * C125) * C953) +
            C21746 * C948 - C21747 * C955 - C21748 * C48207) *
               C21588 +
           (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
            C21749 * C955 - C21750 * C48207) *
               C21589 +
           (C21749 * C954 - (C21748 * C947 + C21747 * C953) + C21750 * C948 -
            (C21591 * C1033 + C47839 * C1042) * C955 -
            (C21591 * C1045 + C47839 * C1051) * C48207) *
               C21590) *
              C48110 * C48230 +
          (((C21591 * C119 + C47839 * C126) * C953 +
            (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
            C21752 * C948 + C21753 * C955 + C21754 * C48207) *
               C21588 +
           (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
            C21755 * C955 + C21756 * C48207) *
               C21589 +
           (C21753 * C953 + C21754 * C947 - C21755 * C954 - C21756 * C948 +
            (C21591 * C1034 + C47839 * C1043) * C955 +
            (C21591 * C1046 + C47839 * C1052) * C48207) *
               C21590) *
              C48110 * C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C117 + C47839 * C124) * C1024 +
           (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
           C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
           C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
              C21588 +
          (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
           C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
           C22443 * C1028 + C22444 * C1022) *
              C21589 +
          (C21741 * C1024 + C21742 * C1018 - C21743 * C1025 - C21744 * C1019 +
           C22441 * C1026 + C22442 * C1020 - C22443 * C1027 - C22444 * C1021 +
           (C21591 * C22428 + C47839 * C22429) * C1028 +
           (C21591 * C22430 + C47839 * C22431) * C1022) *
              C21590) *
         C48110 * C47860 * C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C47047 +
             (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
             C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                C15915 +
            (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
             C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
                C48225) *
               C10335 +
           ((C26247 * C47047 + C26248 * C47947 - C22245 * C47039 -
             C22246 * C47954 + C22247 * C47053 + C22248 * C2723) *
                C15915 +
            (C22245 * C47047 + C22246 * C47947 - C22247 * C47039 -
             C22248 * C47954 + C22575 * C47053 + C22576 * C2723) *
                C48225) *
               C48227) *
              C47865 +
          (((C21745 * C47039 -
             ((C21591 * C128 + C47839 * C139) * C47947 +
              (C21591 * C118 + C47839 * C125) * C47047) +
             C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
                C15915 +
            (C21747 * C47039 - (C21746 * C47947 + C21745 * C47047) +
             C21748 * C47954 - C21749 * C47053 - C21750 * C2723) *
                C48225) *
               C10335 +
           ((C22249 * C47039 - (C26249 * C47947 + C26250 * C47047) +
             C22250 * C47954 - C22251 * C47053 - C22252 * C2723) *
                C15915 +
            (C22251 * C47039 - (C22250 * C47947 + C22249 * C47047) +
             C22252 * C47954 - C22837 * C47053 - C22838 * C2723) *
                C48225) *
               C48227) *
              C47873 +
          ((((C21591 * C119 + C47839 * C126) * C47047 +
             (C21591 * C129 + C47839 * C140) * C47947 - C21751 * C47039 -
             C21752 * C47954 + C21753 * C47053 + C21754 * C2723) *
                C15915 +
            (C21751 * C47047 + C21752 * C47947 - C21753 * C47039 -
             C21754 * C47954 + C21755 * C47053 + C21756 * C2723) *
                C48225) *
               C10335 +
           ((C26251 * C47047 + C26252 * C47947 - C22253 * C47039 -
             C22254 * C47954 + C22255 * C47053 + C22256 * C2723) *
                C15915 +
            (C22253 * C47047 + C22254 * C47947 - C22255 * C47039 -
             C22256 * C47954 + (C21591 * C1561 + C47839 * C1564) * C47053 +
             (C21591 * C1567 + C47839 * C1570) * C2723) *
                C48225) *
               C48227) *
              C2726) *
         C47906) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C47047 +
              (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
              C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                 C15915 +
             (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
              C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
                 C48225) *
                C10335 +
            ((C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C15915 +
             (C29605 + C29606 - C29607 - C29608 + C29609 + C29610) * C48225) *
                C48227) *
               C2459 +
           (((C21745 * C47039 -
              ((C21591 * C128 + C47839 * C139) * C47947 +
               (C21591 * C118 + C47839 * C125) * C47047) +
              C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
                 C15915 +
             (C21747 * C47039 - (C21746 * C47947 + C21745 * C47047) +
              C21748 * C47954 - C21749 * C47053 - C21750 * C2723) *
                 C48225) *
                C10335 +
            ((C29611 - (C29612 + C29613) + C29614 - C29615 - C29616) * C15915 +
             (C29617 - (C29618 + C29619) + C29620 - C29621 - C29622) * C48225) *
                C48227) *
               C47870) *
              C48176 +
          ((((C29601 - (C29600 + C29599) + C29602 - C29603 - C29604) * C15915 +
             (C29607 - (C29606 + C29605) + C29608 - C29609 - C29610) * C48225) *
                C10335 +
            ((C22577 * C47039 - (C26255 * C47947 + C26256 * C47047) +
              C22578 * C47954 - C22579 * C47053 - C22580 * C2723) *
                 C15915 +
             (C22579 * C47039 - (C22578 * C47947 + C22577 * C47047) +
              C22580 * C47954 - C22581 * C47053 - C22582 * C2723) *
                 C48225) *
                C48227) *
               C2459 +
           (((C29613 + C29612 - C29611 - C29614 + C29615 + C29616) * C15915 +
             (C29619 + C29618 - C29617 - C29620 + C29621 + C29622) * C48225) *
                C10335 +
            ((C26253 * C47047 + C26254 * C47947 - C23387 * C47039 -
              C23388 * C47954 + C23389 * C47053 + C23390 * C2723) *
                 C15915 +
             (C23387 * C47047 + C23388 * C47947 - C23389 * C47039 -
              C23390 * C47954 + (C21591 * C5880 + C47839 * C5882) * C47053 +
              (C21591 * C5884 + C47839 * C5886) * C2723) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2461 +
                      (C21591 * C127 + C47839 * C138) * C48253 -
                      C21739 * C2462 - C21740 * C48249 + C21741 * C2463 +
                      C21742 * C48239 - C21743 * C2464 - C21744 * C48217) *
                         C15915 +
                     (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                      C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                      C22441 * C2464 - C22442 * C48217) *
                         C48225) *
                        C10335 +
                    ((C26247 * C2461 + C26248 * C48253 - C22245 * C2462 -
                      C22246 * C48249 + C22247 * C2463 + C22248 * C48239 -
                      C22575 * C2464 - C22576 * C48217) *
                         C15915 +
                     (C22245 * C2461 + C22246 * C48253 - C22247 * C2462 -
                      C22248 * C48249 + C22575 * C2463 + C22576 * C48239 -
                      C22945 * C2464 - C22946 * C48217) *
                         C48225) *
                        C48227) *
                       C2459 +
                   (((C21745 * C2462 -
                      ((C21591 * C128 + C47839 * C139) * C48253 +
                       (C21591 * C118 + C47839 * C125) * C2461) +
                      C21746 * C48249 - C21747 * C2463 - C21748 * C48239 +
                      C21749 * C2464 + C21750 * C48217) *
                         C15915 +
                     (C21747 * C2462 - (C21746 * C48253 + C21745 * C2461) +
                      C21748 * C48249 - C21749 * C2463 - C21750 * C48239 +
                      C22685 * C2464 + C22686 * C48217) *
                         C48225) *
                        C10335 +
                    ((C22249 * C2462 - (C26249 * C48253 + C26250 * C2461) +
                      C22250 * C48249 - C22251 * C2463 - C22252 * C48239 +
                      C22837 * C2464 + C22838 * C48217) *
                         C15915 +
                     (C22251 * C2462 - (C22250 * C48253 + C22249 * C2461) +
                      C22252 * C48249 - C22837 * C2463 - C22838 * C48239 +
                      (C21591 * C6402 + C47839 * C6404) * C2464 +
                      (C21591 * C6406 + C47839 * C6408) * C48217) *
                         C48225) *
                        C48227) *
                       C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C15915 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26247 * C2355 + C26248 * C2349 - C22245 * C2356 -
                      C22246 * C47951) *
                         C15915 +
                     (C22245 * C2355 + C22246 * C2349 - C22247 * C2356 -
                      C22248 * C47951) *
                         C48225) *
                        C48227) *
                       C48252 +
                   (((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C15915 +
                     (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                      C21748 * C47951) *
                         C48225) *
                        C10335 +
                    ((C22249 * C2356 - (C26249 * C2349 + C26250 * C2355) +
                      C22250 * C47951) *
                         C15915 +
                     (C22251 * C2356 - (C22250 * C2349 + C22249 * C2355) +
                      C22252 * C47951) *
                         C48225) *
                        C48227) *
                       C48245 +
                   ((((C21591 * C119 + C47839 * C126) * C2355 +
                      (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                      C21752 * C47951) *
                         C15915 +
                     (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                      C21754 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26251 * C2355 + C26252 * C2349 - C22253 * C2356 -
                      C22254 * C47951) *
                         C15915 +
                     (C22253 * C2355 + C22254 * C2349 - C22255 * C2356 -
                      C22256 * C47951) *
                         C48225) *
                        C48227) *
                       C48232 +
                   (((C21973 * C2356 -
                      ((C21591 * C130 + C47839 * C141) * C2349 +
                       (C21591 * C120 + C47839 * C131) * C2355) +
                      C21974 * C47951) *
                         C15915 +
                     (C21975 * C2356 - (C21974 * C2349 + C21973 * C2355) +
                      C21976 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26409 * C2356 - (C26547 * C2349 + C26548 * C2355) +
                      C26410 * C47951) *
                         C15915 +
                     ((C21591 * C1457 + C47839 * C1458) * C2356 -
                      (C26410 * C2349 + C26409 * C2355) +
                      (C21591 * C1459 + C47839 * C1460) * C47951) *
                         C48225) *
                        C48227) *
                       C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C2355 +
                       (C21591 * C127 + C47839 * C138) * C2349 -
                       C21739 * C2356 - C21740 * C47951) *
                          C15915 +
                      (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                       C21742 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29025 + C29026 - C29027 - C29028) * C15915 +
                      (C29029 + C29030 - C29031 - C29032) * C48225) *
                         C48227) *
                        C2459 +
                    (((C21745 * C2356 -
                       ((C21591 * C128 + C47839 * C139) * C2349 +
                        (C21591 * C118 + C47839 * C125) * C2355) +
                       C21746 * C47951) *
                          C15915 +
                      (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                       C21748 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29033 - (C29034 + C29035) + C29036) * C15915 +
                      (C29037 - (C29038 + C29039) + C29040) * C48225) *
                         C48227) *
                        C47870) *
                       C48247 +
                   ((((C29027 - (C29026 + C29025) + C29028) * C15915 +
                      (C29031 - (C29030 + C29029) + C29032) * C48225) *
                         C10335 +
                     ((C29041 - (C29042 + C29043) + C29044) * C15915 +
                      (C29045 - (C29046 + C29047) + C29048) * C48225) *
                         C48227) *
                        C2459 +
                    (((C29035 + C29034 - C29033 - C29036) * C15915 +
                      (C29039 + C29038 - C29037 - C29040) * C48225) *
                         C10335 +
                     ((C29049 + C29050 - C29051 - C29052) * C15915 +
                      (C29053 + C29054 - C29055 - C29056) * C48225) *
                         C48227) *
                        C47870) *
                       C48236 +
                   ((((C29043 + C29042 - C29041 - C29044) * C15915 +
                      (C29047 + C29046 - C29045 - C29048) * C48225) *
                         C10335 +
                     ((C28065 * C2355 + C28066 * C2349 - C23599 * C2356 -
                       C23600 * C47951) *
                          C15915 +
                      (C23599 * C2355 + C23600 * C2349 - C23601 * C2356 -
                       C23602 * C47951) *
                          C48225) *
                         C48227) *
                        C2459 +
                    (((C29051 - (C29050 + C29049) + C29052) * C15915 +
                      (C29055 - (C29054 + C29053) + C29056) * C48225) *
                         C10335 +
                     ((C28291 * C2356 - (C28429 * C2349 + C28430 * C2355) +
                       C28292 * C47951) *
                          C15915 +
                      ((C21591 * C7270 + C47839 * C7272) * C2356 -
                       (C28292 * C2349 + C28291 * C2355) +
                       (C21591 * C7274 + C47839 * C7276) * C47951) *
                          C48225) *
                         C48227) *
                        C47870) *
                       C48210)) /
                     (p * q * std::sqrt(p + q));
    d2ee[128] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C2355 +
                       (C21591 * C127 + C47839 * C138) * C2349 -
                       C21739 * C2356 - C21740 * C47951) *
                          C15915 +
                      (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                       C21742 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29025 + C29026 - C29027 - C29028) * C15915 +
                      (C29029 + C29030 - C29031 - C29032) * C48225) *
                         C48227) *
                        C47865 +
                    (((C21745 * C2356 -
                       ((C21591 * C128 + C47839 * C139) * C2349 +
                        (C21591 * C118 + C47839 * C125) * C2355) +
                       C21746 * C47951) *
                          C15915 +
                      (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                       C21748 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29033 - (C29034 + C29035) + C29036) * C15915 +
                      (C29037 - (C29038 + C29039) + C29040) * C48225) *
                         C48227) *
                        C47873 +
                    ((((C21591 * C119 + C47839 * C126) * C2355 +
                       (C21591 * C129 + C47839 * C140) * C2349 -
                       C21751 * C2356 - C21752 * C47951) *
                          C15915 +
                      (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                       C21754 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29397 + C29398 - C29399 - C29400) * C15915 +
                      (C29401 + C29402 - C29403 - C29404) * C48225) *
                         C48227) *
                        C2726) *
                       C48176 +
                   ((((C29027 - (C29026 + C29025) + C29028) * C15915 +
                      (C29031 - (C29030 + C29029) + C29032) * C48225) *
                         C10335 +
                     ((C29041 - (C29042 + C29043) + C29044) * C15915 +
                      (C29045 - (C29046 + C29047) + C29048) * C48225) *
                         C48227) *
                        C47865 +
                    (((C29035 + C29034 - C29033 - C29036) * C15915 +
                      (C29039 + C29038 - C29037 - C29040) * C48225) *
                         C10335 +
                     ((C29049 + C29050 - C29051 - C29052) * C15915 +
                      (C29053 + C29054 - C29055 - C29056) * C48225) *
                         C48227) *
                        C47873 +
                    (((C29399 - (C29398 + C29397) + C29400) * C15915 +
                      (C29403 - (C29402 + C29401) + C29404) * C48225) *
                         C10335 +
                     ((C26258 * C2356 - (C26259 * C2349 + C26260 * C2355) +
                       C26257 * C47951) *
                          C15915 +
                      ((C21591 * C1171 + C47839 * C1186) * C2356 -
                       (C26257 * C2349 + C26258 * C2355) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C2726) *
                       C47993)) /
                 (p * q * std::sqrt(p + q));
    d2ee[129] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C15915 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26247 * C2355 + C26248 * C2349 - C22245 * C2356 -
                      C22246 * C47951) *
                         C15915 +
                     (C22245 * C2355 + C22246 * C2349 - C22247 * C2356 -
                      C22248 * C47951) *
                         C48225) *
                        C48227) *
                       C48252 +
                   (((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C15915 +
                     (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                      C21748 * C47951) *
                         C48225) *
                        C10335 +
                    ((C22249 * C2356 - (C26249 * C2349 + C26250 * C2355) +
                      C22250 * C47951) *
                         C15915 +
                     (C22251 * C2356 - (C22250 * C2349 + C22249 * C2355) +
                      C22252 * C47951) *
                         C48225) *
                        C48227) *
                       C48245 +
                   ((((C21591 * C119 + C47839 * C126) * C2355 +
                      (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                      C21752 * C47951) *
                         C15915 +
                     (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                      C21754 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26251 * C2355 + C26252 * C2349 - C22253 * C2356 -
                      C22254 * C47951) *
                         C15915 +
                     (C22253 * C2355 + C22254 * C2349 - C22255 * C2356 -
                      C22256 * C47951) *
                         C48225) *
                        C48227) *
                       C48232 +
                   (((C21973 * C2356 -
                      ((C21591 * C130 + C47839 * C141) * C2349 +
                       (C21591 * C120 + C47839 * C131) * C2355) +
                      C21974 * C47951) *
                         C15915 +
                     (C21975 * C2356 - (C21974 * C2349 + C21973 * C2355) +
                      C21976 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26409 * C2356 - (C26547 * C2349 + C26548 * C2355) +
                      C26410 * C47951) *
                         C15915 +
                     ((C21591 * C1457 + C47839 * C1458) * C2356 -
                      (C26410 * C2349 + C26409 * C2355) +
                      (C21591 * C1459 + C47839 * C1460) * C47951) *
                         C48225) *
                        C48227) *
                       C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2461 +
                      (C21591 * C127 + C47839 * C138) * C48253 -
                      C21739 * C2462 - C21740 * C48249 + C21741 * C2463 +
                      C21742 * C48239 - C21743 * C2464 - C21744 * C48217) *
                         C15915 +
                     (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                      C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                      C22441 * C2464 - C22442 * C48217) *
                         C48225) *
                        C10335 +
                    ((C26247 * C2461 + C26248 * C48253 - C22245 * C2462 -
                      C22246 * C48249 + C22247 * C2463 + C22248 * C48239 -
                      C22575 * C2464 - C22576 * C48217) *
                         C15915 +
                     (C22245 * C2461 + C22246 * C48253 - C22247 * C2462 -
                      C22248 * C48249 + C22575 * C2463 + C22576 * C48239 -
                      C22945 * C2464 - C22946 * C48217) *
                         C48225) *
                        C48227) *
                       C2459 +
                   (((C21745 * C2462 -
                      ((C21591 * C128 + C47839 * C139) * C48253 +
                       (C21591 * C118 + C47839 * C125) * C2461) +
                      C21746 * C48249 - C21747 * C2463 - C21748 * C48239 +
                      C21749 * C2464 + C21750 * C48217) *
                         C15915 +
                     (C21747 * C2462 - (C21746 * C48253 + C21745 * C2461) +
                      C21748 * C48249 - C21749 * C2463 - C21750 * C48239 +
                      C22685 * C2464 + C22686 * C48217) *
                         C48225) *
                        C10335 +
                    ((C22249 * C2462 - (C26249 * C48253 + C26250 * C2461) +
                      C22250 * C48249 - C22251 * C2463 - C22252 * C48239 +
                      C22837 * C2464 + C22838 * C48217) *
                         C15915 +
                     (C22251 * C2462 - (C22250 * C48253 + C22249 * C2461) +
                      C22252 * C48249 - C22837 * C2463 - C22838 * C48239 +
                      (C21591 * C6402 + C47839 * C6404) * C2464 +
                      (C21591 * C6406 + C47839 * C6408) * C48217) *
                         C48225) *
                        C48227) *
                       C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C47047 +
              (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
              C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                 C15915 +
             (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
              C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
                 C48225) *
                C10335 +
            ((C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C15915 +
             (C29605 + C29606 - C29607 - C29608 + C29609 + C29610) * C48225) *
                C48227) *
               C48161 +
           (((C21745 * C47039 -
              ((C21591 * C128 + C47839 * C139) * C47947 +
               (C21591 * C118 + C47839 * C125) * C47047) +
              C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
                 C15915 +
             (C21747 * C47039 - (C21746 * C47947 + C21745 * C47047) +
              C21748 * C47954 - C21749 * C47053 - C21750 * C2723) *
                 C48225) *
                C10335 +
            ((C29611 - (C29612 + C29613) + C29614 - C29615 - C29616) * C15915 +
             (C29617 - (C29618 + C29619) + C29620 - C29621 - C29622) * C48225) *
                C48227) *
               C47870) *
              C3120 +
          ((((C29601 - (C29600 + C29599) + C29602 - C29603 - C29604) * C15915 +
             (C29607 - (C29606 + C29605) + C29608 - C29609 - C29610) * C48225) *
                C10335 +
            ((C22577 * C47039 - (C26255 * C47947 + C26256 * C47047) +
              C22578 * C47954 - C22579 * C47053 - C22580 * C2723) *
                 C15915 +
             (C22579 * C47039 - (C22578 * C47947 + C22577 * C47047) +
              C22580 * C47954 - C22581 * C47053 - C22582 * C2723) *
                 C48225) *
                C48227) *
               C48161 +
           (((C29613 + C29612 - C29611 - C29614 + C29615 + C29616) * C15915 +
             (C29619 + C29618 - C29617 - C29620 + C29621 + C29622) * C48225) *
                C10335 +
            ((C26253 * C47047 + C26254 * C47947 - C23387 * C47039 -
              C23388 * C47954 + C23389 * C47053 + C23390 * C2723) *
                 C15915 +
             (C23387 * C47047 + C23388 * C47947 - C23389 * C47039 -
              C23390 * C47954 + (C21591 * C5880 + C47839 * C5882) * C47053 +
              (C21591 * C5884 + C47839 * C5886) * C2723) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C47047 +
             (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
             C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                C15915 +
            (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
             C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
                C48225) *
               C10335 +
           ((C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C15915 +
            (C29605 + C29606 - C29607 - C29608 + C29609 + C29610) * C48225) *
               C48227) *
              C47860 * C47989 +
          (((C29601 - (C29600 + C29599) + C29602 - C29603 - C29604) * C15915 +
            (C29607 - (C29606 + C29605) + C29608 - C29609 - C29610) * C48225) *
               C10335 +
           ((C31635 - (C31636 + C31637) + C31638 - C31639 - C31640) * C15915 +
            (C31641 - (C31642 + C31643) + C31644 - C31645 - C31646) * C48225) *
               C48227) *
              C47860 * C47996 +
          (((C31637 + C31636 - C31635 - C31638 + C31639 + C31640) * C15915 +
            (C31643 + C31642 - C31641 - C31644 + C31645 + C31646) * C48225) *
               C10335 +
           ((C28065 * C47047 + C28066 * C47947 - C23599 * C47039 -
             C23600 * C47954 + C23601 * C47053 + C23602 * C2723) *
                C15915 +
            (C23599 * C47047 + C23600 * C47947 - C23601 * C47039 -
             C23602 * C47954 + (C21591 * C23586 + C47839 * C23587) * C47053 +
             (C21591 * C23588 + C47839 * C23589) * C2723) *
                C48225) *
               C48227) *
              C47860 * C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2461 +
                      (C21591 * C127 + C47839 * C138) * C48253 -
                      C21739 * C2462 - C21740 * C48249 + C21741 * C2463 +
                      C21742 * C48239 - C21743 * C2464 - C21744 * C48217) *
                         C15915 +
                     (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                      C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                      C22441 * C2464 - C22442 * C48217) *
                         C48225) *
                        C10335 +
                    ((C30947 + C30948 - C30949 - C30950 + C30951 + C30952 -
                      C30953 - C30954) *
                         C15915 +
                     (C30955 + C30956 - C30957 - C30958 + C30959 + C30960 -
                      C30961 - C30962) *
                         C48225) *
                        C48227) *
                       C47860 * C3120 +
                   (((C30949 - (C30948 + C30947) + C30950 - C30951 - C30952 +
                      C30953 + C30954) *
                         C15915 +
                     (C30957 - (C30956 + C30955) + C30958 - C30959 - C30960 +
                      C30961 + C30962) *
                         C48225) *
                        C10335 +
                    ((C22577 * C2462 - (C26255 * C48253 + C26256 * C2461) +
                      C22578 * C48249 - C22579 * C2463 - C22580 * C48239 +
                      C22581 * C2464 + C22582 * C48217) *
                         C15915 +
                     (C22579 * C2462 - (C22578 * C48253 + C22577 * C2461) +
                      C22580 * C48249 - C22581 * C2463 - C22582 * C48239 +
                      (C21591 * C22554 + C47839 * C22555) * C2464 +
                      (C21591 * C22556 + C47839 * C22557) * C48217) *
                         C48225) *
                        C48227) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C2355 +
                       (C21591 * C127 + C47839 * C138) * C2349 -
                       C21739 * C2356 - C21740 * C47951) *
                          C15915 +
                      (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                       C21742 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29025 + C29026 - C29027 - C29028) * C15915 +
                      (C29029 + C29030 - C29031 - C29032) * C48225) *
                         C48227) *
                        C48243 +
                    (((C21745 * C2356 -
                       ((C21591 * C128 + C47839 * C139) * C2349 +
                        (C21591 * C118 + C47839 * C125) * C2355) +
                       C21746 * C47951) *
                          C15915 +
                      (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                       C21748 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29033 - (C29034 + C29035) + C29036) * C15915 +
                      (C29037 - (C29038 + C29039) + C29040) * C48225) *
                         C48227) *
                        C48230 +
                    ((((C21591 * C119 + C47839 * C126) * C2355 +
                       (C21591 * C129 + C47839 * C140) * C2349 -
                       C21751 * C2356 - C21752 * C47951) *
                          C15915 +
                      (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                       C21754 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29397 + C29398 - C29399 - C29400) * C15915 +
                      (C29401 + C29402 - C29403 - C29404) * C48225) *
                         C48227) *
                        C48201) *
                       C3120 +
                   ((((C29027 - (C29026 + C29025) + C29028) * C15915 +
                      (C29031 - (C29030 + C29029) + C29032) * C48225) *
                         C10335 +
                     ((C29041 - (C29042 + C29043) + C29044) * C15915 +
                      (C29045 - (C29046 + C29047) + C29048) * C48225) *
                         C48227) *
                        C48243 +
                    (((C29035 + C29034 - C29033 - C29036) * C15915 +
                      (C29039 + C29038 - C29037 - C29040) * C48225) *
                         C10335 +
                     ((C29049 + C29050 - C29051 - C29052) * C15915 +
                      (C29053 + C29054 - C29055 - C29056) * C48225) *
                         C48227) *
                        C48230 +
                    (((C29399 - (C29398 + C29397) + C29400) * C15915 +
                      (C29403 - (C29402 + C29401) + C29404) * C48225) *
                         C10335 +
                     ((C26258 * C2356 - (C26259 * C2349 + C26260 * C2355) +
                       C26257 * C47951) *
                          C15915 +
                      ((C21591 * C1171 + C47839 * C1186) * C2356 -
                       (C26257 * C2349 + C26258 * C2355) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C15915 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C48225) *
                        C10335 +
                    ((C29025 + C29026 - C29027 - C29028) * C15915 +
                     (C29029 + C29030 - C29031 - C29032) * C48225) *
                        C48227) *
                       C47860 * C48254 +
                   (((C29027 - (C29026 + C29025) + C29028) * C15915 +
                     (C29031 - (C29030 + C29029) + C29032) * C48225) *
                        C10335 +
                    ((C29041 - (C29042 + C29043) + C29044) * C15915 +
                     (C29045 - (C29046 + C29047) + C29048) * C48225) *
                        C48227) *
                       C47860 * C48251 +
                   (((C29043 + C29042 - C29041 - C29044) * C15915 +
                     (C29047 + C29046 - C29045 - C29048) * C48225) *
                        C10335 +
                    ((C31093 + C31094 - C31095 - C31096) * C15915 +
                     (C31097 + C31098 - C31099 - C31100) * C48225) *
                        C48227) *
                       C47860 * C48242 +
                   (((C31095 - (C31094 + C31093) + C31096) * C15915 +
                     (C31099 - (C31098 + C31097) + C31100) * C48225) *
                        C10335 +
                    ((C28068 * C2356 - (C28069 * C2349 + C28070 * C2355) +
                      C28067 * C47951) *
                         C15915 +
                     ((C21591 * C23228 + C47839 * C23229) * C2356 -
                      (C28067 * C2349 + C28068 * C2355) +
                      (C21591 * C23230 + C47839 * C23231) * C47951) *
                         C48225) *
                        C48227) *
                       C47860 * C48223)) /
                     (p * q * std::sqrt(p + q));
    d2ee[133] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C2355 +
                       (C21591 * C127 + C47839 * C138) * C2349 -
                       C21739 * C2356 - C21740 * C47951) *
                          C15915 +
                      (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                       C21742 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29025 + C29026 - C29027 - C29028) * C15915 +
                      (C29029 + C29030 - C29031 - C29032) * C48225) *
                         C48227) *
                        C48161 +
                    (((C21745 * C2356 -
                       ((C21591 * C128 + C47839 * C139) * C2349 +
                        (C21591 * C118 + C47839 * C125) * C2355) +
                       C21746 * C47951) *
                          C15915 +
                      (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                       C21748 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29033 - (C29034 + C29035) + C29036) * C15915 +
                      (C29037 - (C29038 + C29039) + C29040) * C48225) *
                         C48227) *
                        C47870) *
                       C47989 +
                   ((((C29027 - (C29026 + C29025) + C29028) * C15915 +
                      (C29031 - (C29030 + C29029) + C29032) * C48225) *
                         C10335 +
                     ((C29041 - (C29042 + C29043) + C29044) * C15915 +
                      (C29045 - (C29046 + C29047) + C29048) * C48225) *
                         C48227) *
                        C48161 +
                    (((C29035 + C29034 - C29033 - C29036) * C15915 +
                      (C29039 + C29038 - C29037 - C29040) * C48225) *
                         C10335 +
                     ((C29049 + C29050 - C29051 - C29052) * C15915 +
                      (C29053 + C29054 - C29055 - C29056) * C48225) *
                         C48227) *
                        C47870) *
                       C47996 +
                   ((((C29043 + C29042 - C29041 - C29044) * C15915 +
                      (C29047 + C29046 - C29045 - C29048) * C48225) *
                         C10335 +
                     ((C31093 + C31094 - C31095 - C31096) * C15915 +
                      (C31097 + C31098 - C31099 - C31100) * C48225) *
                         C48227) *
                        C48161 +
                    (((C29051 - (C29050 + C29049) + C29052) * C15915 +
                      (C29055 - (C29054 + C29053) + C29056) * C48225) *
                         C10335 +
                     ((C28291 * C2356 - (C28429 * C2349 + C28430 * C2355) +
                       C28292 * C47951) *
                          C15915 +
                      ((C21591 * C7270 + C47839 * C7272) * C2356 -
                       (C28292 * C2349 + C28291 * C2355) +
                       (C21591 * C7274 + C47839 * C7276) * C47951) *
                          C48225) *
                         C48227) *
                        C47870) *
                       C3628)) /
                 (p * q * std::sqrt(p + q));
    d2ee[134] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C2355 +
                       (C21591 * C127 + C47839 * C138) * C2349 -
                       C21739 * C2356 - C21740 * C47951) *
                          C15915 +
                      (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                       C21742 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29025 + C29026 - C29027 - C29028) * C15915 +
                      (C29029 + C29030 - C29031 - C29032) * C48225) *
                         C48227) *
                        C48243 +
                    (((C21745 * C2356 -
                       ((C21591 * C128 + C47839 * C139) * C2349 +
                        (C21591 * C118 + C47839 * C125) * C2355) +
                       C21746 * C47951) *
                          C15915 +
                      (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                       C21748 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29033 - (C29034 + C29035) + C29036) * C15915 +
                      (C29037 - (C29038 + C29039) + C29040) * C48225) *
                         C48227) *
                        C48230 +
                    ((((C21591 * C119 + C47839 * C126) * C2355 +
                       (C21591 * C129 + C47839 * C140) * C2349 -
                       C21751 * C2356 - C21752 * C47951) *
                          C15915 +
                      (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                       C21754 * C47951) *
                          C48225) *
                         C10335 +
                     ((C29397 + C29398 - C29399 - C29400) * C15915 +
                      (C29401 + C29402 - C29403 - C29404) * C48225) *
                         C48227) *
                        C48201) *
                       C3120 +
                   ((((C29027 - (C29026 + C29025) + C29028) * C15915 +
                      (C29031 - (C29030 + C29029) + C29032) * C48225) *
                         C10335 +
                     ((C29041 - (C29042 + C29043) + C29044) * C15915 +
                      (C29045 - (C29046 + C29047) + C29048) * C48225) *
                         C48227) *
                        C48243 +
                    (((C29035 + C29034 - C29033 - C29036) * C15915 +
                      (C29039 + C29038 - C29037 - C29040) * C48225) *
                         C10335 +
                     ((C29049 + C29050 - C29051 - C29052) * C15915 +
                      (C29053 + C29054 - C29055 - C29056) * C48225) *
                         C48227) *
                        C48230 +
                    (((C29399 - (C29398 + C29397) + C29400) * C15915 +
                      (C29403 - (C29402 + C29401) + C29404) * C48225) *
                         C10335 +
                     ((C26258 * C2356 - (C26259 * C2349 + C26260 * C2355) +
                       C26257 * C47951) *
                          C15915 +
                      ((C21591 * C1171 + C47839 * C1186) * C2356 -
                       (C26257 * C2349 + C26258 * C2355) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2461 +
                      (C21591 * C127 + C47839 * C138) * C48253 -
                      C21739 * C2462 - C21740 * C48249 + C21741 * C2463 +
                      C21742 * C48239 - C21743 * C2464 - C21744 * C48217) *
                         C15915 +
                     (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                      C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                      C22441 * C2464 - C22442 * C48217) *
                         C48225) *
                        C10335 +
                    ((C30947 + C30948 - C30949 - C30950 + C30951 + C30952 -
                      C30953 - C30954) *
                         C15915 +
                     (C30955 + C30956 - C30957 - C30958 + C30959 + C30960 -
                      C30961 - C30962) *
                         C48225) *
                        C48227) *
                       C47860 * C3120 +
                   (((C30949 - (C30948 + C30947) + C30950 - C30951 - C30952 +
                      C30953 + C30954) *
                         C15915 +
                     (C30957 - (C30956 + C30955) + C30958 - C30959 - C30960 +
                      C30961 + C30962) *
                         C48225) *
                        C10335 +
                    ((C22577 * C2462 - (C26255 * C48253 + C26256 * C2461) +
                      C22578 * C48249 - C22579 * C2463 - C22580 * C48239 +
                      C22581 * C2464 + C22582 * C48217) *
                         C15915 +
                     (C22579 * C2462 - (C22578 * C48253 + C22577 * C2461) +
                      C22580 * C48249 - C22581 * C2463 - C22582 * C48239 +
                      (C21591 * C22554 + C47839 * C22555) * C2464 +
                      (C21591 * C22556 + C47839 * C22557) * C48217) *
                         C48225) *
                        C48227) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q));
    d2ee[135] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C1303 +
                      (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                      C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                      C21743 * C1306 - C21744 * C48217) *
                         C15915 +
                     (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 -
                      C21742 * C1298 + C21743 * C1305 + C21744 * C1299 -
                      C22441 * C1306 - C22442 * C48217) *
                         C48225) *
                        C10335 +
                    ((C26247 * C1303 + C26248 * C1297 - C22245 * C1304 -
                      C22246 * C1298 + C22247 * C1305 + C22248 * C1299 -
                      C22575 * C1306 - C22576 * C48217) *
                         C15915 +
                     (C22245 * C1303 + C22246 * C1297 - C22247 * C1304 -
                      C22248 * C1298 + C22575 * C1305 + C22576 * C1299 -
                      C22945 * C1306 - C22946 * C48217) *
                         C48225) *
                        C48227) *
                       C48161 +
                   (((C21745 * C1304 -
                      ((C21591 * C128 + C47839 * C139) * C1297 +
                       (C21591 * C118 + C47839 * C125) * C1303) +
                      C21746 * C1298 - C21747 * C1305 - C21748 * C1299 +
                      C21749 * C1306 + C21750 * C48217) *
                         C15915 +
                     (C21747 * C1304 - (C21746 * C1297 + C21745 * C1303) +
                      C21748 * C1298 - C21749 * C1305 - C21750 * C1299 +
                      C22685 * C1306 + C22686 * C48217) *
                         C48225) *
                        C10335 +
                    ((C22249 * C1304 - (C26249 * C1297 + C26250 * C1303) +
                      C22250 * C1298 - C22251 * C1305 - C22252 * C1299 +
                      C22837 * C1306 + C22838 * C48217) *
                         C15915 +
                     (C22251 * C1304 - (C22250 * C1297 + C22249 * C1303) +
                      C22252 * C1298 - C22837 * C1305 - C22838 * C1299 +
                      (C21591 * C6402 + C47839 * C6404) * C1306 +
                      (C21591 * C6406 + C47839 * C6408) * C48217) *
                         C48225) *
                        C48227) *
                       C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C15915 +
                     (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                      C21742 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26247 * C561 + C26248 * C48175 - C22245 * C562 -
                      C22246 * C47951) *
                         C15915 +
                     (C22245 * C561 + C22246 * C48175 - C22247 * C562 -
                      C22248 * C47951) *
                         C48225) *
                        C48227) *
                       C557 +
                   (((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C15915 +
                     (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                      C21748 * C47951) *
                         C48225) *
                        C10335 +
                    ((C22249 * C562 - (C26249 * C48175 + C26250 * C561) +
                      C22250 * C47951) *
                         C15915 +
                     (C22251 * C562 - (C22250 * C48175 + C22249 * C561) +
                      C22252 * C47951) *
                         C48225) *
                        C48227) *
                       C558 +
                   ((((C21591 * C119 + C47839 * C126) * C561 +
                      (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
                      C21752 * C47951) *
                         C15915 +
                     (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                      C21754 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26251 * C561 + C26252 * C48175 - C22253 * C562 -
                      C22254 * C47951) *
                         C15915 +
                     (C22253 * C561 + C22254 * C48175 - C22255 * C562 -
                      C22256 * C47951) *
                         C48225) *
                        C48227) *
                       C559 +
                   (((C21973 * C562 -
                      ((C21591 * C130 + C47839 * C141) * C48175 +
                       (C21591 * C120 + C47839 * C131) * C561) +
                      C21974 * C47951) *
                         C15915 +
                     (C21975 * C562 - (C21974 * C48175 + C21973 * C561) +
                      C21976 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26409 * C562 -
                      ((C21591 * C432 + C47839 * C449) * C48175 +
                       (C21591 * C419 + C47839 * C429) * C561) +
                      C26410 * C47951) *
                         C15915 +
                     ((C21591 * C1457 + C47839 * C1458) * C562 -
                      (C26410 * C48175 + C26409 * C561) +
                      (C21591 * C1459 + C47839 * C1460) * C47951) *
                         C48225) *
                        C48227) *
                       C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C561 +
                       (C21591 * C127 + C47839 * C138) * C48175 -
                       C21739 * C562 - C21740 * C47951) *
                          C15915 +
                      (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                       C21742 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26745 + C26746 - C26747 - C26748) * C15915 +
                      (C26749 + C26750 - C26751 - C26752) * C48225) *
                         C48227) *
                        C48161 +
                    (((C21745 * C562 -
                       ((C21591 * C128 + C47839 * C139) * C48175 +
                        (C21591 * C118 + C47839 * C125) * C561) +
                       C21746 * C47951) *
                          C15915 +
                      (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                       C21748 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26753 - (C26754 + C26755) + C26756) * C15915 +
                      (C26757 - (C26758 + C26759) + C26760) * C48225) *
                         C48227) *
                        C47870) *
                       C1681 +
                   ((((C26747 - (C26746 + C26745) + C26748) * C15915 +
                      (C26751 - (C26750 + C26749) + C26752) * C48225) *
                         C10335 +
                     ((C28271 - (C28272 + C28273) + C28274) * C15915 +
                      (C28275 - (C28276 + C28277) + C28278) * C48225) *
                         C48227) *
                        C48161 +
                    (((C26755 + C26754 - C26753 - C26756) * C15915 +
                      (C26759 + C26758 - C26757 - C26760) * C48225) *
                         C10335 +
                     ((C28279 + C28280 - C28281 - C28282) * C15915 +
                      (C28283 + C28284 - C28285 - C28286) * C48225) *
                         C48227) *
                        C47870) *
                       C1682 +
                   ((((C28273 + C28272 - C28271 - C28274) * C15915 +
                      (C28277 + C28276 - C28275 - C28278) * C48225) *
                         C10335 +
                     ((C28065 * C561 + C28066 * C48175 - C23599 * C562 -
                       C23600 * C47951) *
                          C15915 +
                      (C23599 * C561 + C23600 * C48175 - C23601 * C562 -
                       C23602 * C47951) *
                          C48225) *
                         C48227) *
                        C48161 +
                    (((C28281 - (C28280 + C28279) + C28282) * C15915 +
                      (C28285 - (C28284 + C28283) + C28286) * C48225) *
                         C10335 +
                     ((C28291 * C562 -
                       ((C21591 * C1868 + C47839 * C1880) * C48175 +
                        (C21591 * C1862 + C47839 * C1871) * C561) +
                       C28292 * C47951) *
                          C15915 +
                      ((C21591 * C7270 + C47839 * C7272) * C562 -
                       (C28292 * C48175 + C28291 * C561) +
                       (C21591 * C7274 + C47839 * C7276) * C47951) *
                          C48225) *
                         C48227) *
                        C47870) *
                       C48210)) /
                     (p * q * std::sqrt(p + q));
    d2ee[136] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C1303 +
                      (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                      C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                      C21743 * C1306 - C21744 * C48217) *
                         C15915 +
                     (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 -
                      C21742 * C1298 + C21743 * C1305 + C21744 * C1299 -
                      C22441 * C1306 - C22442 * C48217) *
                         C48225) *
                        C10335 +
                    ((C27633 + C27634 - C27635 - C27636 + C27637 + C27638 -
                      C27639 - C27640) *
                         C15915 +
                     (C27641 + C27642 - C27643 - C27644 + C27645 + C27646 -
                      C27647 - C27648) *
                         C48225) *
                        C48227) *
                       C47860 * C48176 +
                   (((C27635 - (C27634 + C27633) + C27636 - C27637 - C27638 +
                      C27639 + C27640) *
                         C15915 +
                     (C27643 - (C27642 + C27641) + C27644 - C27645 - C27646 +
                      C27647 + C27648) *
                         C48225) *
                        C10335 +
                    ((C22577 * C1304 - (C26255 * C1297 + C26256 * C1303) +
                      C22578 * C1298 - C22579 * C1305 - C22580 * C1299 +
                      C22581 * C1306 + C22582 * C48217) *
                         C15915 +
                     (C22579 * C1304 - (C22578 * C1297 + C22577 * C1303) +
                      C22580 * C1298 - C22581 * C1305 - C22582 * C1299 +
                      (C21591 * C22554 + C47839 * C22555) * C1306 +
                      (C21591 * C22556 + C47839 * C22557) * C48217) *
                         C48225) *
                        C48227) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C561 +
                       (C21591 * C127 + C47839 * C138) * C48175 -
                       C21739 * C562 - C21740 * C47951) *
                          C15915 +
                      (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                       C21742 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26745 + C26746 - C26747 - C26748) * C15915 +
                      (C26749 + C26750 - C26751 - C26752) * C48225) *
                         C48227) *
                        C258 +
                    (((C21745 * C562 -
                       ((C21591 * C128 + C47839 * C139) * C48175 +
                        (C21591 * C118 + C47839 * C125) * C561) +
                       C21746 * C47951) *
                          C15915 +
                      (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                       C21748 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26753 - (C26754 + C26755) + C26756) * C15915 +
                      (C26757 - (C26758 + C26759) + C26760) * C48225) *
                         C48227) *
                        C259 +
                    ((((C21591 * C119 + C47839 * C126) * C561 +
                       (C21591 * C129 + C47839 * C140) * C48175 -
                       C21751 * C562 - C21752 * C47951) *
                          C15915 +
                      (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                       C21754 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26761 + C26762 - C26763 - C26764) * C15915 +
                      (C26765 + C26766 - C26767 - C26768) * C48225) *
                         C48227) *
                        C48201) *
                       C48176 +
                   ((((C26747 - (C26746 + C26745) + C26748) * C15915 +
                      (C26751 - (C26750 + C26749) + C26752) * C48225) *
                         C10335 +
                     ((C22577 * C562 - (C26255 * C48175 + C26256 * C561) +
                       C22578 * C47951) *
                          C15915 +
                      (C22579 * C562 - (C22578 * C48175 + C22577 * C561) +
                       C22580 * C47951) *
                          C48225) *
                         C48227) *
                        C258 +
                    (((C26755 + C26754 - C26753 - C26756) * C15915 +
                      (C26759 + C26758 - C26757 - C26760) * C48225) *
                         C10335 +
                     ((C26253 * C561 + C26254 * C48175 - C23387 * C562 -
                       C23388 * C47951) *
                          C15915 +
                      (C23387 * C561 + C23388 * C48175 - C23389 * C562 -
                       C23390 * C47951) *
                          C48225) *
                         C48227) *
                        C259 +
                    (((C26763 - (C26762 + C26761) + C26764) * C15915 +
                      (C26767 - (C26766 + C26765) + C26768) * C48225) *
                         C10335 +
                     ((C26258 * C562 - (C26259 * C48175 + C26260 * C561) +
                       C26257 * C47951) *
                          C15915 +
                      ((C21591 * C1171 + C47839 * C1186) * C562 -
                       (C26257 * C48175 + C26258 * C561) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C15915 +
                     (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                      C21742 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26745 + C26746 - C26747 - C26748) * C15915 +
                     (C26749 + C26750 - C26751 - C26752) * C48225) *
                        C48227) *
                       C47860 * C2133 +
                   (((C26747 - (C26746 + C26745) + C26748) * C15915 +
                     (C26751 - (C26750 + C26749) + C26752) * C48225) *
                        C10335 +
                    ((C28271 - (C28272 + C28273) + C28274) * C15915 +
                     (C28275 - (C28276 + C28277) + C28278) * C48225) *
                        C48227) *
                       C47860 * C2134 +
                   (((C28273 + C28272 - C28271 - C28274) * C15915 +
                     (C28277 + C28276 - C28275 - C28278) * C48225) *
                        C10335 +
                    ((C28563 + C28564 - C28565 - C28566) * C15915 +
                     (C28567 + C28568 - C28569 - C28570) * C48225) *
                        C48227) *
                       C47860 * C2135 +
                   (((C28565 - (C28564 + C28563) + C28566) * C15915 +
                     (C28569 - (C28568 + C28567) + C28570) * C48225) *
                        C10335 +
                    ((C28068 * C562 - (C28069 * C48175 + C28070 * C561) +
                      C28067 * C47951) *
                         C15915 +
                     ((C21591 * C23228 + C47839 * C23229) * C562 -
                      (C28067 * C48175 + C28068 * C561) +
                      (C21591 * C23230 + C47839 * C23231) * C47951) *
                         C48225) *
                        C48227) *
                       C47860 * C48223)) /
                     (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C21591 * C117 + C47839 * C124) * C116 +
                 (C21591 * C127 + C47839 * C138) * C47888) *
                    C15915 +
                (C21739 * C116 + C21740 * C47888) * C48225) *
                   C10335 +
               (((C21591 * C420 + C47839 * C434) * C116 +
                 (C21591 * C433 + C47839 * C450) * C47888) *
                    C15915 +
                (C22245 * C116 + C22246 * C47888) * C48225) *
                   C48227) *
                  C107 -
              (((C22250 * C47888 + C22249 * C116) * C48225 +
                ((C21591 * C430 + C47839 * C447) * C47888 +
                 (C21591 * C417 + C47839 * C427) * C116) *
                    C15915) *
                   C48227 +
               ((C21746 * C47888 + C21745 * C116) * C48225 +
                ((C21591 * C128 + C47839 * C139) * C47888 +
                 (C21591 * C118 + C47839 * C125) * C116) *
                    C15915) *
                   C10335) *
                  C108 +
              ((((C21591 * C119 + C47839 * C126) * C116 +
                 (C21591 * C129 + C47839 * C140) * C47888) *
                    C15915 +
                (C21751 * C116 + C21752 * C47888) * C48225) *
                   C10335 +
               (((C21591 * C418 + C47839 * C428) * C116 +
                 (C21591 * C431 + C47839 * C448) * C47888) *
                    C15915 +
                (C22253 * C116 + C22254 * C47888) * C48225) *
                   C48227) *
                  C109 -
              ((((C21591 * C829 + C47839 * C835) * C47888 +
                 (C21591 * C820 + C47839 * C828) * C116) *
                    C48225 +
                ((C21591 * C432 + C47839 * C449) * C47888 +
                 (C21591 * C419 + C47839 * C429) * C116) *
                    C15915) *
                   C48227 +
               ((C21974 * C47888 + C21973 * C116) * C48225 +
                ((C21591 * C130 + C47839 * C141) * C47888 +
                 (C21591 * C120 + C47839 * C131) * C116) *
                    C15915) *
                   C10335) *
                  C110 +
              ((((C21591 * C121 + C47839 * C132) * C116 +
                 (C21591 * C133 + C47839 * C142) * C47888) *
                    C15915 +
                ((C21591 * C272 + C47839 * C290) * C116 +
                 (C21591 * C291 + C47839 * C302) * C47888) *
                    C48225) *
                   C10335 +
               (((C21591 * C421 + C47839 * C436) * C116 +
                 (C21591 * C435 + C47839 * C451) * C47888) *
                    C15915 +
                ((C21591 * C821 + C47839 * C830) * C116 +
                 (C21591 * C831 + C47839 * C836) * C47888) *
                    C48225) *
                   C48227) *
                  C111) *
             C47906 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21591 * C117 + C47839 * C124) * C261 +
                 (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
                 C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                    C15915 +
                (C21739 * C261 + C21740 * C48246 - C21741 * C262 -
                 C21742 * C48234 + C21743 * C263 + C21744 * C48207) *
                    C48225) *
                   C10335 +
               (((C21591 * C420 + C47839 * C434) * C261 +
                 (C21591 * C433 + C47839 * C450) * C48246 - C22245 * C262 -
                 C22246 * C48234 + C22247 * C263 + C22248 * C48207) *
                    C15915 +
                (C22245 * C261 + C22246 * C48246 - C22247 * C262 -
                 C22248 * C48234 + C22575 * C263 + C22576 * C48207) *
                    C48225) *
                   C48227) *
                  C258 +
              (((C21745 * C262 -
                 ((C21591 * C128 + C47839 * C139) * C48246 +
                  (C21591 * C118 + C47839 * C125) * C261) +
                 C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                    C15915 +
                (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
                 C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                    C48225) *
                   C10335 +
               ((C22249 * C262 -
                 ((C21591 * C430 + C47839 * C447) * C48246 +
                  (C21591 * C417 + C47839 * C427) * C261) +
                 C22250 * C48234 - C22251 * C263 - C22252 * C48207) *
                    C15915 +
                (C22251 * C262 - (C22250 * C48246 + C22249 * C261) +
                 C22252 * C48234 - C22837 * C263 - C22838 * C48207) *
                    C48225) *
                   C48227) *
                  C259 +
              ((((C21591 * C119 + C47839 * C126) * C261 +
                 (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
                 C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
                    C15915 +
                (C21751 * C261 + C21752 * C48246 - C21753 * C262 -
                 C21754 * C48234 + C21755 * C263 + C21756 * C48207) *
                    C48225) *
                   C10335 +
               (((C21591 * C418 + C47839 * C428) * C261 +
                 (C21591 * C431 + C47839 * C448) * C48246 - C22253 * C262 -
                 C22254 * C48234 + C22255 * C263 + C22256 * C48207) *
                    C15915 +
                (C22253 * C261 + C22254 * C48246 - C22255 * C262 -
                 C22256 * C48234 + (C21591 * C1561 + C47839 * C1564) * C263 +
                 (C21591 * C1567 + C47839 * C1570) * C48207) *
                    C48225) *
                   C48227) *
                  C48201) *
             C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C258 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C259 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C15915 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C10335 +
            ((C26265 + C26266) * C15915 + (C26225 + C26226) * C48225) *
                C48227) *
               C48201) *
              C48247 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C259 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C258 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C15915) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C15915) *
                C10335) *
               C48201) *
              C48236 +
          ((((C26270 + C26269) * C15915 + (C26234 + C26233) * C48225) * C10335 +
            (((C21591 * C1863 + C47839 * C1872) * C116 +
              (C21591 * C1869 + C47839 * C1881) * C47888) *
                 C15915 +
             (C23599 * C116 + C23600 * C47888) * C48225) *
                C48227) *
               C258 -
           ((((C21591 * C2246 + C47839 * C2249) * C47888 +
              (C21591 * C2240 + C47839 * C2243) * C116) *
                 C48225 +
             ((C21591 * C1868 + C47839 * C1880) * C47888 +
              (C21591 * C1862 + C47839 * C1871) * C116) *
                 C15915) *
                C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C15915) *
                C10335) *
               C259 +
           (((C26274 + C26273) * C15915 + (C26272 + C26271) * C48225) * C10335 +
            (((C21591 * C1861 + C47839 * C1870) * C116 +
              (C21591 * C1867 + C47839 * C1879) * C47888) *
                 C15915 +
             ((C21591 * C2241 + C47839 * C2244) * C116 +
              (C21591 * C2247 + C47839 * C2250) * C47888) *
                 C48225) *
                C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C15915 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C10335 +
           ((C26247 * C953 + C26248 * C947 - C22245 * C954 - C22246 * C948 +
             C22247 * C955 + C22248 * C48207) *
                C15915 +
            (C22245 * C953 + C22246 * C947 - C22247 * C954 - C22248 * C948 +
             C22575 * C955 + C22576 * C48207) *
                C48225) *
               C48227) *
              C48243 +
          (((C21745 * C954 -
             ((C21591 * C128 + C47839 * C139) * C947 +
              (C21591 * C118 + C47839 * C125) * C953) +
             C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                C15915 +
            (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
             C21749 * C955 - C21750 * C48207) *
                C48225) *
               C10335 +
           ((C22249 * C954 - (C26249 * C947 + C26250 * C953) + C22250 * C948 -
             C22251 * C955 - C22252 * C48207) *
                C15915 +
            (C22251 * C954 - (C22250 * C947 + C22249 * C953) + C22252 * C948 -
             C22837 * C955 - C22838 * C48207) *
                C48225) *
               C48227) *
              C48230 +
          ((((C21591 * C119 + C47839 * C126) * C953 +
             (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
             C21752 * C948 + C21753 * C955 + C21754 * C48207) *
                C15915 +
            (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
             C21755 * C955 + C21756 * C48207) *
                C48225) *
               C10335 +
           ((C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
             C22255 * C955 + C22256 * C48207) *
                C15915 +
            (C22253 * C953 + C22254 * C947 - C22255 * C954 - C22256 * C948 +
             (C21591 * C1561 + C47839 * C1564) * C955 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1024 +
            (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
            C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
            C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
               C15915 +
           (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
            C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
            C22443 * C1028 + C22444 * C1022) *
               C48225) *
              C10335 +
          ((C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
            C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
            C22945 * C1028 + C22946 * C1022) *
               C15915 +
           (C22245 * C1024 + C22246 * C1018 - C22247 * C1025 - C22248 * C1019 +
            C22575 * C1026 + C22576 * C1020 - C22945 * C1027 - C22946 * C1021 +
            (C21591 * C22936 + C47839 * C22937) * C1028 +
            (C21591 * C22938 + C47839 * C22939) * C1022) *
               C48225) *
              C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C15915 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C10335 +
           ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C15915 +
            (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
               C48227) *
              C47860 * C48247 +
          (((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) * C15915 +
            (C27151 - (C27150 + C27149) + C27152 - C27153 - C27154) * C48225) *
               C10335 +
           ((C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) * C15915 +
            (C27161 - (C27162 + C27163) + C27164 - C27165 - C27166) * C48225) *
               C48227) *
              C47860 * C48236 +
          (((C27157 + C27156 - C27155 - C27158 + C27159 + C27160) * C15915 +
            (C27163 + C27162 - C27161 - C27164 + C27165 + C27166) * C48225) *
               C10335 +
           (((C21591 * C1863 + C47839 * C1872) * C953 +
             (C21591 * C1869 + C47839 * C1881) * C947 - C23599 * C954 -
             C23600 * C948 + C23601 * C955 + C23602 * C48207) *
                C15915 +
            (C23599 * C953 + C23600 * C947 - C23601 * C954 - C23602 * C948 +
             (C21591 * C23586 + C47839 * C23587) * C955 +
             (C21591 * C23588 + C47839 * C23589) * C48207) *
                C48225) *
               C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C48243 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C48230 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C15915 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C10335 +
            ((C26265 + C26266) * C15915 + (C26225 + C26226) * C48225) *
                C48227) *
               C48201) *
              C1681 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C48230 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C48243 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C15915) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C15915) *
                C10335) *
               C48201) *
              C1682 +
          ((((C26270 + C26269) * C15915 + (C26234 + C26233) * C48225) * C10335 +
            (((C21591 * C1863 + C47839 * C1872) * C116 +
              (C21591 * C1869 + C47839 * C1881) * C47888) *
                 C15915 +
             (C23599 * C116 + C23600 * C47888) * C48225) *
                C48227) *
               C48243 -
           ((((C21591 * C2246 + C47839 * C2249) * C47888 +
              (C21591 * C2240 + C47839 * C2243) * C116) *
                 C48225 +
             ((C21591 * C1868 + C47839 * C1880) * C47888 +
              (C21591 * C1862 + C47839 * C1871) * C116) *
                 C15915) *
                C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C15915) *
                C10335) *
               C48230 +
           (((C26274 + C26273) * C15915 + (C26272 + C26271) * C48225) * C10335 +
            (((C21591 * C1861 + C47839 * C1870) * C116 +
              (C21591 * C1867 + C47839 * C1879) * C47888) *
                 C15915 +
             ((C21591 * C2241 + C47839 * C2244) * C116 +
              (C21591 * C2247 + C47839 * C2250) * C47888) *
                 C48225) *
                C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C15915 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C48225) *
               C10335 +
           ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C15915 +
            (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
               C48227) *
              C47860 * C1681 +
          (((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C15915 +
            (C27949 - (C27948 + C27947) + C27950 - C27951 - C27952) * C48225) *
               C10335 +
           ((C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C15915 +
            (C27959 - (C27960 + C27961) + C27962 - C27963 - C27964) * C48225) *
               C48227) *
              C47860 * C1682 +
          (((C27955 + C27954 - C27953 - C27956 + C27957 + C27958) * C15915 +
            (C27961 + C27960 - C27959 - C27962 + C27963 + C27964) * C48225) *
               C10335 +
           (((C21591 * C1863 + C47839 * C1872) * C261 +
             (C21591 * C1869 + C47839 * C1881) * C48246 - C23599 * C262 -
             C23600 * C48234 + C23601 * C263 + C23602 * C48207) *
                C15915 +
            (C23599 * C261 + C23600 * C48246 - C23601 * C262 - C23602 * C48234 +
             (C21591 * C23586 + C47839 * C23587) * C263 +
             (C21591 * C23588 + C47839 * C23589) * C48207) *
                C48225) *
               C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C15915 +
            (C21739 * C116 + C21740 * C47888) * C48225) *
               C10335 +
           ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) * C48227) *
              C47860 * C1856 -
          (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
           ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) * C10335) *
              C47860 * C1857 +
          (((C26270 + C26269) * C15915 + (C26234 + C26233) * C48225) * C10335 +
           ((C28071 + C28072) * C15915 + (C28055 + C28056) * C48225) * C48227) *
              C47860 * C1858 -
          (((C28073 + C28074) * C48225 + (C28075 + C28076) * C15915) * C48227 +
           ((C28056 + C28055) * C48225 + (C28072 + C28071) * C15915) * C10335) *
              C47860 * C1859 +
          (((C28076 + C28075) * C15915 + (C28074 + C28073) * C48225) * C10335 +
           (((C21591 * C12369 + C47839 * C12371) * C116 +
             (C21591 * C12373 + C47839 * C12375) * C47888) *
                C15915 +
            ((C21591 * C28046 + C47839 * C28047) * C116 +
             (C21591 * C28048 + C47839 * C28049) * C47888) *
                C48225) *
               C48227) *
              C47860 * C1860)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C953 +
              (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
              C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                 C15915 +
             (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
              C21743 * C955 + C21744 * C48207) *
                 C48225) *
                C10335 +
            ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C15915 +
             (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
                C48227) *
               C48161 +
           (((C21745 * C954 -
              ((C21591 * C128 + C47839 * C139) * C947 +
               (C21591 * C118 + C47839 * C125) * C953) +
              C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                 C15915 +
             (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
              C21749 * C955 - C21750 * C48207) *
                 C48225) *
                C10335 +
            ((C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C15915 +
             (C27497 - (C27498 + C27499) + C27500 - C27501 - C27502) * C48225) *
                C48227) *
               C47870) *
              C48176 +
          ((((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) * C15915 +
             (C27151 - (C27150 + C27149) + C27152 - C27153 - C27154) * C48225) *
                C10335 +
            ((C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) * C15915 +
             (C27161 - (C27162 + C27163) + C27164 - C27165 - C27166) * C48225) *
                C48227) *
               C48161 +
           (((C27493 + C27492 - C27491 - C27494 + C27495 + C27496) * C15915 +
             (C27499 + C27498 - C27497 - C27500 + C27501 + C27502) * C48225) *
                C10335 +
            ((C26253 * C953 + C26254 * C947 - C23387 * C954 - C23388 * C948 +
              C23389 * C955 + C23390 * C48207) *
                 C15915 +
             (C23387 * C953 + C23388 * C947 - C23389 * C954 - C23390 * C948 +
              (C21591 * C5880 + C47839 * C5882) * C955 +
              (C21591 * C5884 + C47839 * C5886) * C48207) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C557 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C558 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C15915 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C10335 +
            ((C26265 + C26266) * C15915 + (C26225 + C26226) * C48225) *
                C48227) *
               C559 -
           (((C26541 + C26542) * C48225 + (C26549 + C26550) * C15915) * C48227 +
            ((C21974 * C47888 + C21973 * C116) * C48225 +
             ((C21591 * C130 + C47839 * C141) * C47888 +
              (C21591 * C120 + C47839 * C131) * C116) *
                 C15915) *
                C10335) *
               C48211) *
              C48176 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C558 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C557 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C15915) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C15915) *
                C10335) *
               C559 +
           (((C26550 + C26549) * C15915 + (C26542 + C26541) * C48225) * C10335 +
            (((C21591 * C425 + C47839 * C444) * C116 +
              (C21591 * C443 + C47839 * C455) * C47888) *
                 C15915 +
             ((C21591 * C2031 + C47839 * C2032) * C116 +
              (C21591 * C2033 + C47839 * C2034) * C47888) *
                 C48225) *
                C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C48161 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C47870) *
              C2133 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C47870 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C48161) *
              C2134 +
          ((((C26270 + C26269) * C15915 + (C26234 + C26233) * C48225) * C10335 +
            ((C28071 + C28072) * C15915 + (C28055 + C28056) * C48225) *
                C48227) *
               C48161 -
           (((C28423 + C28424) * C48225 + (C28431 + C28432) * C15915) * C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C15915) *
                C10335) *
               C47870) *
              C2135 +
          ((((C28432 + C28431) * C15915 + (C28424 + C28423) * C48225) * C10335 +
            (((C21591 * C1865 + C47839 * C1874) * C116 +
              (C21591 * C1877 + C47839 * C1883) * C47888) *
                 C15915 +
             ((C21591 * C6796 + C47839 * C6798) * C116 +
              (C21591 * C6800 + C47839 * C6802) * C47888) *
                 C48225) *
                C48227) *
               C47870 -
           (((C28073 + C28074) * C48225 + (C28075 + C28076) * C15915) * C48227 +
            ((C28056 + C28055) * C48225 + (C28072 + C28071) * C15915) *
                C10335) *
               C48161) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C15915 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C48225) *
               C10335 +
           (((C21591 * C420 + C47839 * C434) * C261 +
             (C21591 * C433 + C47839 * C450) * C48246 - C22245 * C262 -
             C22246 * C48234 + C22247 * C263 + C22248 * C48207) *
                C15915 +
            (C22245 * C261 + C22246 * C48246 - C22247 * C262 - C22248 * C48234 +
             C22575 * C263 + C22576 * C48207) *
                C48225) *
               C48227) *
              C258 +
          (((C21745 * C262 -
             ((C21591 * C128 + C47839 * C139) * C48246 +
              (C21591 * C118 + C47839 * C125) * C261) +
             C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                C15915 +
            (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
             C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                C48225) *
               C10335 +
           ((C22249 * C262 -
             ((C21591 * C430 + C47839 * C447) * C48246 +
              (C21591 * C417 + C47839 * C427) * C261) +
             C22250 * C48234 - C22251 * C263 - C22252 * C48207) *
                C15915 +
            (C22251 * C262 - (C22250 * C48246 + C22249 * C261) +
             C22252 * C48234 - C22837 * C263 - C22838 * C48207) *
                C48225) *
               C48227) *
              C259 +
          ((((C21591 * C119 + C47839 * C126) * C261 +
             (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
             C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
                C15915 +
            (C21751 * C261 + C21752 * C48246 - C21753 * C262 - C21754 * C48234 +
             C21755 * C263 + C21756 * C48207) *
                C48225) *
               C10335 +
           (((C21591 * C418 + C47839 * C428) * C261 +
             (C21591 * C431 + C47839 * C448) * C48246 - C22253 * C262 -
             C22254 * C48234 + C22255 * C263 + C22256 * C48207) *
                C15915 +
            (C22253 * C261 + C22254 * C48246 - C22255 * C262 - C22256 * C48234 +
             (C21591 * C1561 + C47839 * C1564) * C263 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C15915 +
            (C21739 * C116 + C21740 * C47888) * C48225) *
               C10335 +
           (((C21591 * C420 + C47839 * C434) * C116 +
             (C21591 * C433 + C47839 * C450) * C47888) *
                C15915 +
            (C22245 * C116 + C22246 * C47888) * C48225) *
               C48227) *
              C107 -
          (((C22250 * C47888 + C22249 * C116) * C48225 +
            ((C21591 * C430 + C47839 * C447) * C47888 +
             (C21591 * C417 + C47839 * C427) * C116) *
                C15915) *
               C48227 +
           ((C21746 * C47888 + C21745 * C116) * C48225 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C15915) *
               C10335) *
              C108 +
          ((((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C15915 +
            (C21751 * C116 + C21752 * C47888) * C48225) *
               C10335 +
           (((C21591 * C418 + C47839 * C428) * C116 +
             (C21591 * C431 + C47839 * C448) * C47888) *
                C15915 +
            (C22253 * C116 + C22254 * C47888) * C48225) *
               C48227) *
              C109 -
          ((((C21591 * C829 + C47839 * C835) * C47888 +
             (C21591 * C820 + C47839 * C828) * C116) *
                C48225 +
            ((C21591 * C432 + C47839 * C449) * C47888 +
             (C21591 * C419 + C47839 * C429) * C116) *
                C15915) *
               C48227 +
           ((C21974 * C47888 + C21973 * C116) * C48225 +
            ((C21591 * C130 + C47839 * C141) * C47888 +
             (C21591 * C120 + C47839 * C131) * C116) *
                C15915) *
               C10335) *
              C110 +
          ((((C21591 * C121 + C47839 * C132) * C116 +
             (C21591 * C133 + C47839 * C142) * C47888) *
                C15915 +
            ((C21591 * C272 + C47839 * C290) * C116 +
             (C21591 * C291 + C47839 * C302) * C47888) *
                C48225) *
               C10335 +
           (((C21591 * C421 + C47839 * C436) * C116 +
             (C21591 * C435 + C47839 * C451) * C47888) *
                C15915 +
            ((C21591 * C821 + C47839 * C830) * C116 +
             (C21591 * C831 + C47839 * C836) * C47888) *
                C48225) *
               C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C15915 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C10335 +
           ((C26247 * C953 + C26248 * C947 - C22245 * C954 - C22246 * C948 +
             C22247 * C955 + C22248 * C48207) *
                C15915 +
            (C22245 * C953 + C22246 * C947 - C22247 * C954 - C22248 * C948 +
             C22575 * C955 + C22576 * C48207) *
                C48225) *
               C48227) *
              C48243 +
          (((C21745 * C954 -
             ((C21591 * C128 + C47839 * C139) * C947 +
              (C21591 * C118 + C47839 * C125) * C953) +
             C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                C15915 +
            (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
             C21749 * C955 - C21750 * C48207) *
                C48225) *
               C10335 +
           ((C22249 * C954 - (C26249 * C947 + C26250 * C953) + C22250 * C948 -
             C22251 * C955 - C22252 * C48207) *
                C15915 +
            (C22251 * C954 - (C22250 * C947 + C22249 * C953) + C22252 * C948 -
             C22837 * C955 - C22838 * C48207) *
                C48225) *
               C48227) *
              C48230 +
          ((((C21591 * C119 + C47839 * C126) * C953 +
             (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
             C21752 * C948 + C21753 * C955 + C21754 * C48207) *
                C15915 +
            (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
             C21755 * C955 + C21756 * C48207) *
                C48225) *
               C10335 +
           ((C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
             C22255 * C955 + C22256 * C48207) *
                C15915 +
            (C22253 * C953 + C22254 * C947 - C22255 * C954 - C22256 * C948 +
             (C21591 * C1561 + C47839 * C1564) * C955 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1024 +
            (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
            C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
            C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
               C15915 +
           (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
            C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
            C22443 * C1028 + C22444 * C1022) *
               C48225) *
              C10335 +
          ((C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
            C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
            C22945 * C1028 + C22946 * C1022) *
               C15915 +
           (C22245 * C1024 + C22246 * C1018 - C22247 * C1025 - C22248 * C1019 +
            C22575 * C1026 + C22576 * C1020 - C22945 * C1027 - C22946 * C1021 +
            (C21591 * C22936 + C47839 * C22937) * C1028 +
            (C21591 * C22938 + C47839 * C22939) * C1022) *
               C48225) *
              C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C48243 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C48230 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C15915 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C10335 +
            ((C26265 + C26266) * C15915 + (C26225 + C26226) * C48225) *
                C48227) *
               C48201) *
              C1681 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C48230 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C48243 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C15915) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C15915) *
                C10335) *
               C48201) *
              C1682 +
          ((((C26270 + C26269) * C15915 + (C26234 + C26233) * C48225) * C10335 +
            (((C21591 * C1863 + C47839 * C1872) * C116 +
              (C21591 * C1869 + C47839 * C1881) * C47888) *
                 C15915 +
             (C23599 * C116 + C23600 * C47888) * C48225) *
                C48227) *
               C48243 -
           ((((C21591 * C2246 + C47839 * C2249) * C47888 +
              (C21591 * C2240 + C47839 * C2243) * C116) *
                 C48225 +
             ((C21591 * C1868 + C47839 * C1880) * C47888 +
              (C21591 * C1862 + C47839 * C1871) * C116) *
                 C15915) *
                C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C15915) *
                C10335) *
               C48230 +
           (((C26274 + C26273) * C15915 + (C26272 + C26271) * C48225) * C10335 +
            (((C21591 * C1861 + C47839 * C1870) * C116 +
              (C21591 * C1867 + C47839 * C1879) * C47888) *
                 C15915 +
             ((C21591 * C2241 + C47839 * C2244) * C116 +
              (C21591 * C2247 + C47839 * C2250) * C47888) *
                 C48225) *
                C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C15915 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C48225) *
               C10335 +
           ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C15915 +
            (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
               C48227) *
              C47860 * C1681 +
          (((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C15915 +
            (C27949 - (C27948 + C27947) + C27950 - C27951 - C27952) * C48225) *
               C10335 +
           ((C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C15915 +
            (C27959 - (C27960 + C27961) + C27962 - C27963 - C27964) * C48225) *
               C48227) *
              C47860 * C1682 +
          (((C27955 + C27954 - C27953 - C27956 + C27957 + C27958) * C15915 +
            (C27961 + C27960 - C27959 - C27962 + C27963 + C27964) * C48225) *
               C10335 +
           (((C21591 * C1863 + C47839 * C1872) * C261 +
             (C21591 * C1869 + C47839 * C1881) * C48246 - C23599 * C262 -
             C23600 * C48234 + C23601 * C263 + C23602 * C48207) *
                C15915 +
            (C23599 * C261 + C23600 * C48246 - C23601 * C262 - C23602 * C48234 +
             (C21591 * C23586 + C47839 * C23587) * C263 +
             (C21591 * C23588 + C47839 * C23589) * C48207) *
                C48225) *
               C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C561 +
                       (C21591 * C127 + C47839 * C138) * C48175 -
                       C21739 * C562 - C21740 * C47951) *
                          C15915 +
                      (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                       C21742 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26745 + C26746 - C26747 - C26748) * C15915 +
                      (C26749 + C26750 - C26751 - C26752) * C48225) *
                         C48227) *
                        C47865 +
                    (((C21745 * C562 -
                       ((C21591 * C128 + C47839 * C139) * C48175 +
                        (C21591 * C118 + C47839 * C125) * C561) +
                       C21746 * C47951) *
                          C15915 +
                      (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                       C21748 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26753 - (C26754 + C26755) + C26756) * C15915 +
                      (C26757 - (C26758 + C26759) + C26760) * C48225) *
                         C48227) *
                        C47873 +
                    ((((C21591 * C119 + C47839 * C126) * C561 +
                       (C21591 * C129 + C47839 * C140) * C48175 -
                       C21751 * C562 - C21752 * C47951) *
                          C15915 +
                      (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                       C21754 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26761 + C26762 - C26763 - C26764) * C15915 +
                      (C26765 + C26766 - C26767 - C26768) * C48225) *
                         C48227) *
                        C2726) *
                       C3120 +
                   ((((C26747 - (C26746 + C26745) + C26748) * C15915 +
                      (C26751 - (C26750 + C26749) + C26752) * C48225) *
                         C10335 +
                     ((C28271 - (C28272 + C28273) + C28274) * C15915 +
                      (C28275 - (C28276 + C28277) + C28278) * C48225) *
                         C48227) *
                        C47865 +
                    (((C26755 + C26754 - C26753 - C26756) * C15915 +
                      (C26759 + C26758 - C26757 - C26760) * C48225) *
                         C10335 +
                     ((C28279 + C28280 - C28281 - C28282) * C15915 +
                      (C28283 + C28284 - C28285 - C28286) * C48225) *
                         C48227) *
                        C47873 +
                    (((C26763 - (C26762 + C26761) + C26764) * C15915 +
                      (C26767 - (C26766 + C26765) + C26768) * C48225) *
                         C10335 +
                     ((C26258 * C562 - (C26259 * C48175 + C26260 * C561) +
                       C26257 * C47951) *
                          C15915 +
                      ((C21591 * C1171 + C47839 * C1186) * C562 -
                       (C26257 * C48175 + C26258 * C561) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C2726) *
                       C47993)) /
                 (p * q * std::sqrt(p + q));
    d2ee[141] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C561 +
                       (C21591 * C127 + C47839 * C138) * C48175 -
                       C21739 * C562 - C21740 * C47951) *
                          C15915 +
                      (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                       C21742 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26745 + C26746 - C26747 - C26748) * C15915 +
                      (C26749 + C26750 - C26751 - C26752) * C48225) *
                         C48227) *
                        C2459 +
                    (((C21745 * C562 -
                       ((C21591 * C128 + C47839 * C139) * C48175 +
                        (C21591 * C118 + C47839 * C125) * C561) +
                       C21746 * C47951) *
                          C15915 +
                      (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                       C21748 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26753 - (C26754 + C26755) + C26756) * C15915 +
                      (C26757 - (C26758 + C26759) + C26760) * C48225) *
                         C48227) *
                        C47870) *
                       C47989 +
                   ((((C26747 - (C26746 + C26745) + C26748) * C15915 +
                      (C26751 - (C26750 + C26749) + C26752) * C48225) *
                         C10335 +
                     ((C28271 - (C28272 + C28273) + C28274) * C15915 +
                      (C28275 - (C28276 + C28277) + C28278) * C48225) *
                         C48227) *
                        C2459 +
                    (((C26755 + C26754 - C26753 - C26756) * C15915 +
                      (C26759 + C26758 - C26757 - C26760) * C48225) *
                         C10335 +
                     ((C28279 + C28280 - C28281 - C28282) * C15915 +
                      (C28283 + C28284 - C28285 - C28286) * C48225) *
                         C48227) *
                        C47870) *
                       C47996 +
                   ((((C28273 + C28272 - C28271 - C28274) * C15915 +
                      (C28277 + C28276 - C28275 - C28278) * C48225) *
                         C10335 +
                     ((C28563 + C28564 - C28565 - C28566) * C15915 +
                      (C28567 + C28568 - C28569 - C28570) * C48225) *
                         C48227) *
                        C2459 +
                    (((C28281 - (C28280 + C28279) + C28282) * C15915 +
                      (C28285 - (C28284 + C28283) + C28286) * C48225) *
                         C10335 +
                     ((C28291 * C562 - (C28429 * C48175 + C28430 * C561) +
                       C28292 * C47951) *
                          C15915 +
                      ((C21591 * C7270 + C47839 * C7272) * C562 -
                       (C28292 * C48175 + C28291 * C561) +
                       (C21591 * C7274 + C47839 * C7276) * C47951) *
                          C48225) *
                         C48227) *
                        C47870) *
                       C3628)) /
                 (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C261 +
              (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
              C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                 C15915 +
             (C21739 * C261 + C21740 * C48246 - C21741 * C262 -
              C21742 * C48234 + C21743 * C263 + C21744 * C48207) *
                 C48225) *
                C10335 +
            ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C15915 +
             (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
                C48227) *
               C2459 +
           (((C21745 * C262 -
              ((C21591 * C128 + C47839 * C139) * C48246 +
               (C21591 * C118 + C47839 * C125) * C261) +
              C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                 C15915 +
             (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
              C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                 C48225) *
                C10335 +
            ((C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C15915 +
             (C29953 - (C29954 + C29955) + C29956 - C29957 - C29958) * C48225) *
                C48227) *
               C47870) *
              C3120 +
          ((((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C15915 +
             (C27949 - (C27948 + C27947) + C27950 - C27951 - C27952) * C48225) *
                C10335 +
            ((C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C15915 +
             (C27959 - (C27960 + C27961) + C27962 - C27963 - C27964) * C48225) *
                C48227) *
               C2459 +
           (((C29949 + C29948 - C29947 - C29950 + C29951 + C29952) * C15915 +
             (C29955 + C29954 - C29953 - C29956 + C29957 + C29958) * C48225) *
                C10335 +
            ((C26253 * C261 + C26254 * C48246 - C23387 * C262 -
              C23388 * C48234 + C23389 * C263 + C23390 * C48207) *
                 C15915 +
             (C23387 * C261 + C23388 * C48246 - C23389 * C262 -
              C23390 * C48234 + (C21591 * C5880 + C47839 * C5882) * C263 +
              (C21591 * C5884 + C47839 * C5886) * C48207) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C48252 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C48245 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C15915 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C10335 +
            ((C26265 + C26266) * C15915 + (C26225 + C26226) * C48225) *
                C48227) *
               C48232 -
           (((C26541 + C26542) * C48225 + (C26549 + C26550) * C15915) * C48227 +
            ((C21974 * C47888 + C21973 * C116) * C48225 +
             ((C21591 * C130 + C47839 * C141) * C47888 +
              (C21591 * C120 + C47839 * C131) * C116) *
                 C15915) *
                C10335) *
               C48211) *
              C3120 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C48245 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C48252 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C15915) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C15915) *
                C10335) *
               C48232 +
           (((C26550 + C26549) * C15915 + (C26542 + C26541) * C48225) * C10335 +
            (((C21591 * C425 + C47839 * C444) * C116 +
              (C21591 * C443 + C47839 * C455) * C47888) *
                 C15915 +
             ((C21591 * C2031 + C47839 * C2032) * C116 +
              (C21591 * C2033 + C47839 * C2034) * C47888) *
                 C48225) *
                C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C2459 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C47870) *
              C48254 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C47870 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C2459) *
              C48251 +
          ((((C26270 + C26269) * C15915 + (C26234 + C26233) * C48225) * C10335 +
            ((C28071 + C28072) * C15915 + (C28055 + C28056) * C48225) *
                C48227) *
               C2459 -
           (((C28423 + C28424) * C48225 + (C28431 + C28432) * C15915) * C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C15915) *
                C10335) *
               C47870) *
              C48242 +
          ((((C28432 + C28431) * C15915 + (C28424 + C28423) * C48225) * C10335 +
            (((C21591 * C1865 + C47839 * C1874) * C116 +
              (C21591 * C1877 + C47839 * C1883) * C47888) *
                 C15915 +
             ((C21591 * C6796 + C47839 * C6798) * C116 +
              (C21591 * C6800 + C47839 * C6802) * C47888) *
                 C48225) *
                C48227) *
               C47870 -
           (((C28073 + C28074) * C48225 + (C28075 + C28076) * C15915) * C48227 +
            ((C28056 + C28055) * C48225 + (C28072 + C28071) * C15915) *
                C10335) *
               C2459) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C47865 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C47873 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C15915 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C10335 +
            ((C26265 + C26266) * C15915 + (C26225 + C26226) * C48225) *
                C48227) *
               C2726) *
              C47989 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C47873 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C47865 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C15915) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C15915) *
                C10335) *
               C2726) *
              C47996 +
          ((((C26270 + C26269) * C15915 + (C26234 + C26233) * C48225) * C10335 +
            ((C28071 + C28072) * C15915 + (C28055 + C28056) * C48225) *
                C48227) *
               C47865 -
           (((C28423 + C28424) * C48225 + (C28431 + C28432) * C15915) * C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C15915) *
                C10335) *
               C47873 +
           (((C26274 + C26273) * C15915 + (C26272 + C26271) * C48225) * C10335 +
            (((C21591 * C1861 + C47839 * C1870) * C116 +
              (C21591 * C1867 + C47839 * C1879) * C47888) *
                 C15915 +
             ((C21591 * C2241 + C47839 * C2244) * C116 +
              (C21591 * C2247 + C47839 * C2250) * C47888) *
                 C48225) *
                C48227) *
               C2726) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C48252 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C48245 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C15915 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C10335 +
            ((C26265 + C26266) * C15915 + (C26225 + C26226) * C48225) *
                C48227) *
               C48232 -
           (((C26541 + C26542) * C48225 + (C26549 + C26550) * C15915) * C48227 +
            ((C21974 * C47888 + C21973 * C116) * C48225 +
             ((C21591 * C130 + C47839 * C141) * C47888 +
              (C21591 * C120 + C47839 * C131) * C116) *
                 C15915) *
                C10335) *
               C48211) *
              C3120 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C48245 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C48252 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C15915) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C15915) *
                C10335) *
               C48232 +
           (((C26550 + C26549) * C15915 + (C26542 + C26541) * C48225) * C10335 +
            (((C21591 * C425 + C47839 * C444) * C116 +
              (C21591 * C443 + C47839 * C455) * C47888) *
                 C15915 +
             ((C21591 * C2031 + C47839 * C2032) * C116 +
              (C21591 * C2033 + C47839 * C2034) * C47888) *
                 C48225) *
                C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C261 +
              (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
              C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                 C15915 +
             (C21739 * C261 + C21740 * C48246 - C21741 * C262 -
              C21742 * C48234 + C21743 * C263 + C21744 * C48207) *
                 C48225) *
                C10335 +
            ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C15915 +
             (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
                C48227) *
               C2459 +
           (((C21745 * C262 -
              ((C21591 * C128 + C47839 * C139) * C48246 +
               (C21591 * C118 + C47839 * C125) * C261) +
              C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                 C15915 +
             (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
              C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                 C48225) *
                C10335 +
            ((C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C15915 +
             (C29953 - (C29954 + C29955) + C29956 - C29957 - C29958) * C48225) *
                C48227) *
               C47870) *
              C3120 +
          ((((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C15915 +
             (C27949 - (C27948 + C27947) + C27950 - C27951 - C27952) * C48225) *
                C10335 +
            ((C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C15915 +
             (C27959 - (C27960 + C27961) + C27962 - C27963 - C27964) * C48225) *
                C48227) *
               C2459 +
           (((C29949 + C29948 - C29947 - C29950 + C29951 + C29952) * C15915 +
             (C29955 + C29954 - C29953 - C29956 + C29957 + C29958) * C48225) *
                C10335 +
            ((C26253 * C261 + C26254 * C48246 - C23387 * C262 -
              C23388 * C48234 + C23389 * C263 + C23390 * C48207) *
                 C15915 +
             (C23387 * C261 + C23388 * C48246 - C23389 * C262 -
              C23390 * C48234 + (C21591 * C5880 + C47839 * C5882) * C263 +
              (C21591 * C5884 + C47839 * C5886) * C48207) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C15915 +
                     (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                      C21742 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26247 * C561 + C26248 * C48175 - C22245 * C562 -
                      C22246 * C47951) *
                         C15915 +
                     (C22245 * C561 + C22246 * C48175 - C22247 * C562 -
                      C22248 * C47951) *
                         C48225) *
                        C48227) *
                       C557 +
                   (((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C15915 +
                     (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                      C21748 * C47951) *
                         C48225) *
                        C10335 +
                    ((C22249 * C562 - (C26249 * C48175 + C26250 * C561) +
                      C22250 * C47951) *
                         C15915 +
                     (C22251 * C562 - (C22250 * C48175 + C22249 * C561) +
                      C22252 * C47951) *
                         C48225) *
                        C48227) *
                       C558 +
                   ((((C21591 * C119 + C47839 * C126) * C561 +
                      (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
                      C21752 * C47951) *
                         C15915 +
                     (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                      C21754 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26251 * C561 + C26252 * C48175 - C22253 * C562 -
                      C22254 * C47951) *
                         C15915 +
                     (C22253 * C561 + C22254 * C48175 - C22255 * C562 -
                      C22256 * C47951) *
                         C48225) *
                        C48227) *
                       C559 +
                   (((C21973 * C562 -
                      ((C21591 * C130 + C47839 * C141) * C48175 +
                       (C21591 * C120 + C47839 * C131) * C561) +
                      C21974 * C47951) *
                         C15915 +
                     (C21975 * C562 - (C21974 * C48175 + C21973 * C561) +
                      C21976 * C47951) *
                         C48225) *
                        C10335 +
                    ((C26409 * C562 -
                      ((C21591 * C432 + C47839 * C449) * C48175 +
                       (C21591 * C419 + C47839 * C429) * C561) +
                      C26410 * C47951) *
                         C15915 +
                     ((C21591 * C1457 + C47839 * C1458) * C562 -
                      (C26410 * C48175 + C26409 * C561) +
                      (C21591 * C1459 + C47839 * C1460) * C47951) *
                         C48225) *
                        C48227) *
                       C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C1303 +
                      (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                      C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                      C21743 * C1306 - C21744 * C48217) *
                         C15915 +
                     (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 -
                      C21742 * C1298 + C21743 * C1305 + C21744 * C1299 -
                      C22441 * C1306 - C22442 * C48217) *
                         C48225) *
                        C10335 +
                    ((C26247 * C1303 + C26248 * C1297 - C22245 * C1304 -
                      C22246 * C1298 + C22247 * C1305 + C22248 * C1299 -
                      C22575 * C1306 - C22576 * C48217) *
                         C15915 +
                     (C22245 * C1303 + C22246 * C1297 - C22247 * C1304 -
                      C22248 * C1298 + C22575 * C1305 + C22576 * C1299 -
                      C22945 * C1306 - C22946 * C48217) *
                         C48225) *
                        C48227) *
                       C48161 +
                   (((C21745 * C1304 -
                      ((C21591 * C128 + C47839 * C139) * C1297 +
                       (C21591 * C118 + C47839 * C125) * C1303) +
                      C21746 * C1298 - C21747 * C1305 - C21748 * C1299 +
                      C21749 * C1306 + C21750 * C48217) *
                         C15915 +
                     (C21747 * C1304 - (C21746 * C1297 + C21745 * C1303) +
                      C21748 * C1298 - C21749 * C1305 - C21750 * C1299 +
                      C22685 * C1306 + C22686 * C48217) *
                         C48225) *
                        C10335 +
                    ((C22249 * C1304 - (C26249 * C1297 + C26250 * C1303) +
                      C22250 * C1298 - C22251 * C1305 - C22252 * C1299 +
                      C22837 * C1306 + C22838 * C48217) *
                         C15915 +
                     (C22251 * C1304 - (C22250 * C1297 + C22249 * C1303) +
                      C22252 * C1298 - C22837 * C1305 - C22838 * C1299 +
                      (C21591 * C6402 + C47839 * C6404) * C1306 +
                      (C21591 * C6406 + C47839 * C6408) * C48217) *
                         C48225) *
                        C48227) *
                       C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q));
    d2ee[146] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C561 +
                       (C21591 * C127 + C47839 * C138) * C48175 -
                       C21739 * C562 - C21740 * C47951) *
                          C15915 +
                      (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                       C21742 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26745 + C26746 - C26747 - C26748) * C15915 +
                      (C26749 + C26750 - C26751 - C26752) * C48225) *
                         C48227) *
                        C258 +
                    (((C21745 * C562 -
                       ((C21591 * C128 + C47839 * C139) * C48175 +
                        (C21591 * C118 + C47839 * C125) * C561) +
                       C21746 * C47951) *
                          C15915 +
                      (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                       C21748 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26753 - (C26754 + C26755) + C26756) * C15915 +
                      (C26757 - (C26758 + C26759) + C26760) * C48225) *
                         C48227) *
                        C259 +
                    ((((C21591 * C119 + C47839 * C126) * C561 +
                       (C21591 * C129 + C47839 * C140) * C48175 -
                       C21751 * C562 - C21752 * C47951) *
                          C15915 +
                      (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                       C21754 * C47951) *
                          C48225) *
                         C10335 +
                     ((C26761 + C26762 - C26763 - C26764) * C15915 +
                      (C26765 + C26766 - C26767 - C26768) * C48225) *
                         C48227) *
                        C48201) *
                       C48176 +
                   ((((C26747 - (C26746 + C26745) + C26748) * C15915 +
                      (C26751 - (C26750 + C26749) + C26752) * C48225) *
                         C10335 +
                     ((C22577 * C562 - (C26255 * C48175 + C26256 * C561) +
                       C22578 * C47951) *
                          C15915 +
                      (C22579 * C562 - (C22578 * C48175 + C22577 * C561) +
                       C22580 * C47951) *
                          C48225) *
                         C48227) *
                        C258 +
                    (((C26755 + C26754 - C26753 - C26756) * C15915 +
                      (C26759 + C26758 - C26757 - C26760) * C48225) *
                         C10335 +
                     ((C26253 * C561 + C26254 * C48175 - C23387 * C562 -
                       C23388 * C47951) *
                          C15915 +
                      (C23387 * C561 + C23388 * C48175 - C23389 * C562 -
                       C23390 * C47951) *
                          C48225) *
                         C48227) *
                        C259 +
                    (((C26763 - (C26762 + C26761) + C26764) * C15915 +
                      (C26767 - (C26766 + C26765) + C26768) * C48225) *
                         C10335 +
                     ((C26258 * C562 - (C26259 * C48175 + C26260 * C561) +
                       C26257 * C47951) *
                          C15915 +
                      ((C21591 * C1171 + C47839 * C1186) * C562 -
                       (C26257 * C48175 + C26258 * C561) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C1303 +
                      (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                      C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                      C21743 * C1306 - C21744 * C48217) *
                         C15915 +
                     (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 -
                      C21742 * C1298 + C21743 * C1305 + C21744 * C1299 -
                      C22441 * C1306 - C22442 * C48217) *
                         C48225) *
                        C10335 +
                    ((C27633 + C27634 - C27635 - C27636 + C27637 + C27638 -
                      C27639 - C27640) *
                         C15915 +
                     (C27641 + C27642 - C27643 - C27644 + C27645 + C27646 -
                      C27647 - C27648) *
                         C48225) *
                        C48227) *
                       C47860 * C48176 +
                   (((C27635 - (C27634 + C27633) + C27636 - C27637 - C27638 +
                      C27639 + C27640) *
                         C15915 +
                     (C27643 - (C27642 + C27641) + C27644 - C27645 - C27646 +
                      C27647 + C27648) *
                         C48225) *
                        C10335 +
                    ((C22577 * C1304 - (C26255 * C1297 + C26256 * C1303) +
                      C22578 * C1298 - C22579 * C1305 - C22580 * C1299 +
                      C22581 * C1306 + C22582 * C48217) *
                         C15915 +
                     (C22579 * C1304 - (C22578 * C1297 + C22577 * C1303) +
                      C22580 * C1298 - C22581 * C1305 - C22582 * C1299 +
                      (C21591 * C22554 + C47839 * C22555) * C1306 +
                      (C21591 * C22556 + C47839 * C22557) * C48217) *
                         C48225) *
                        C48227) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C15915 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C48225) *
               C10335 +
           (((C21591 * C420 + C47839 * C434) * C261 +
             (C21591 * C433 + C47839 * C450) * C48246 - C22245 * C262 -
             C22246 * C48234 + C22247 * C263 + C22248 * C48207) *
                C15915 +
            (C22245 * C261 + C22246 * C48246 - C22247 * C262 - C22248 * C48234 +
             C22575 * C263 + C22576 * C48207) *
                C48225) *
               C48227) *
              C258 +
          (((C21745 * C262 -
             ((C21591 * C128 + C47839 * C139) * C48246 +
              (C21591 * C118 + C47839 * C125) * C261) +
             C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                C15915 +
            (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
             C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                C48225) *
               C10335 +
           ((C22249 * C262 -
             ((C21591 * C430 + C47839 * C447) * C48246 +
              (C21591 * C417 + C47839 * C427) * C261) +
             C22250 * C48234 - C22251 * C263 - C22252 * C48207) *
                C15915 +
            (C22251 * C262 - (C22250 * C48246 + C22249 * C261) +
             C22252 * C48234 - C22837 * C263 - C22838 * C48207) *
                C48225) *
               C48227) *
              C259 +
          ((((C21591 * C119 + C47839 * C126) * C261 +
             (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
             C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
                C15915 +
            (C21751 * C261 + C21752 * C48246 - C21753 * C262 - C21754 * C48234 +
             C21755 * C263 + C21756 * C48207) *
                C48225) *
               C10335 +
           (((C21591 * C418 + C47839 * C428) * C261 +
             (C21591 * C431 + C47839 * C448) * C48246 - C22253 * C262 -
             C22254 * C48234 + C22255 * C263 + C22256 * C48207) *
                C15915 +
            (C22253 * C261 + C22254 * C48246 - C22255 * C262 - C22256 * C48234 +
             (C21591 * C1561 + C47839 * C1564) * C263 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C15915 +
            (C21739 * C116 + C21740 * C47888) * C48225) *
               C10335 +
           (((C21591 * C420 + C47839 * C434) * C116 +
             (C21591 * C433 + C47839 * C450) * C47888) *
                C15915 +
            (C22245 * C116 + C22246 * C47888) * C48225) *
               C48227) *
              C107 -
          (((C22250 * C47888 + C22249 * C116) * C48225 +
            ((C21591 * C430 + C47839 * C447) * C47888 +
             (C21591 * C417 + C47839 * C427) * C116) *
                C15915) *
               C48227 +
           ((C21746 * C47888 + C21745 * C116) * C48225 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C15915) *
               C10335) *
              C108 +
          ((((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C15915 +
            (C21751 * C116 + C21752 * C47888) * C48225) *
               C10335 +
           (((C21591 * C418 + C47839 * C428) * C116 +
             (C21591 * C431 + C47839 * C448) * C47888) *
                C15915 +
            (C22253 * C116 + C22254 * C47888) * C48225) *
               C48227) *
              C109 -
          ((((C21591 * C829 + C47839 * C835) * C47888 +
             (C21591 * C820 + C47839 * C828) * C116) *
                C48225 +
            ((C21591 * C432 + C47839 * C449) * C47888 +
             (C21591 * C419 + C47839 * C429) * C116) *
                C15915) *
               C48227 +
           ((C21974 * C47888 + C21973 * C116) * C48225 +
            ((C21591 * C130 + C47839 * C141) * C47888 +
             (C21591 * C120 + C47839 * C131) * C116) *
                C15915) *
               C10335) *
              C110 +
          ((((C21591 * C121 + C47839 * C132) * C116 +
             (C21591 * C133 + C47839 * C142) * C47888) *
                C15915 +
            ((C21591 * C272 + C47839 * C290) * C116 +
             (C21591 * C291 + C47839 * C302) * C47888) *
                C48225) *
               C10335 +
           (((C21591 * C421 + C47839 * C436) * C116 +
             (C21591 * C435 + C47839 * C451) * C47888) *
                C15915 +
            ((C21591 * C821 + C47839 * C830) * C116 +
             (C21591 * C831 + C47839 * C836) * C47888) *
                C48225) *
               C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C258 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C259 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C15915 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C10335 +
            ((C26265 + C26266) * C15915 + (C26225 + C26226) * C48225) *
                C48227) *
               C48201) *
              C48247 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C259 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C258 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C15915) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C15915) *
                C10335) *
               C48201) *
              C48236 +
          ((((C26270 + C26269) * C15915 + (C26234 + C26233) * C48225) * C10335 +
            (((C21591 * C1863 + C47839 * C1872) * C116 +
              (C21591 * C1869 + C47839 * C1881) * C47888) *
                 C15915 +
             (C23599 * C116 + C23600 * C47888) * C48225) *
                C48227) *
               C258 -
           ((((C21591 * C2246 + C47839 * C2249) * C47888 +
              (C21591 * C2240 + C47839 * C2243) * C116) *
                 C48225 +
             ((C21591 * C1868 + C47839 * C1880) * C47888 +
              (C21591 * C1862 + C47839 * C1871) * C116) *
                 C15915) *
                C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C15915) *
                C10335) *
               C259 +
           (((C26274 + C26273) * C15915 + (C26272 + C26271) * C48225) * C10335 +
            (((C21591 * C1861 + C47839 * C1870) * C116 +
              (C21591 * C1867 + C47839 * C1879) * C47888) *
                 C15915 +
             ((C21591 * C2241 + C47839 * C2244) * C116 +
              (C21591 * C2247 + C47839 * C2250) * C47888) *
                 C48225) *
                C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C15915 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C10335 +
           ((C26247 * C953 + C26248 * C947 - C22245 * C954 - C22246 * C948 +
             C22247 * C955 + C22248 * C48207) *
                C15915 +
            (C22245 * C953 + C22246 * C947 - C22247 * C954 - C22248 * C948 +
             C22575 * C955 + C22576 * C48207) *
                C48225) *
               C48227) *
              C48243 +
          (((C21745 * C954 -
             ((C21591 * C128 + C47839 * C139) * C947 +
              (C21591 * C118 + C47839 * C125) * C953) +
             C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                C15915 +
            (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
             C21749 * C955 - C21750 * C48207) *
                C48225) *
               C10335 +
           ((C22249 * C954 - (C26249 * C947 + C26250 * C953) + C22250 * C948 -
             C22251 * C955 - C22252 * C48207) *
                C15915 +
            (C22251 * C954 - (C22250 * C947 + C22249 * C953) + C22252 * C948 -
             C22837 * C955 - C22838 * C48207) *
                C48225) *
               C48227) *
              C48230 +
          ((((C21591 * C119 + C47839 * C126) * C953 +
             (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
             C21752 * C948 + C21753 * C955 + C21754 * C48207) *
                C15915 +
            (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
             C21755 * C955 + C21756 * C48207) *
                C48225) *
               C10335 +
           ((C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
             C22255 * C955 + C22256 * C48207) *
                C15915 +
            (C22253 * C953 + C22254 * C947 - C22255 * C954 - C22256 * C948 +
             (C21591 * C1561 + C47839 * C1564) * C955 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1024 +
            (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
            C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
            C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
               C15915 +
           (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
            C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
            C22443 * C1028 + C22444 * C1022) *
               C48225) *
              C10335 +
          ((C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
            C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
            C22945 * C1028 + C22946 * C1022) *
               C15915 +
           (C22245 * C1024 + C22246 * C1018 - C22247 * C1025 - C22248 * C1019 +
            C22575 * C1026 + C22576 * C1020 - C22945 * C1027 - C22946 * C1021 +
            (C21591 * C22936 + C47839 * C22937) * C1028 +
            (C21591 * C22938 + C47839 * C22939) * C1022) *
               C48225) *
              C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C15915 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C10335 +
           ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C15915 +
            (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
               C48227) *
              C47860 * C48247 +
          (((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) * C15915 +
            (C27151 - (C27150 + C27149) + C27152 - C27153 - C27154) * C48225) *
               C10335 +
           ((C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) * C15915 +
            (C27161 - (C27162 + C27163) + C27164 - C27165 - C27166) * C48225) *
               C48227) *
              C47860 * C48236 +
          (((C27157 + C27156 - C27155 - C27158 + C27159 + C27160) * C15915 +
            (C27163 + C27162 - C27161 - C27164 + C27165 + C27166) * C48225) *
               C10335 +
           (((C21591 * C1863 + C47839 * C1872) * C953 +
             (C21591 * C1869 + C47839 * C1881) * C947 - C23599 * C954 -
             C23600 * C948 + C23601 * C955 + C23602 * C48207) *
                C15915 +
            (C23599 * C953 + C23600 * C947 - C23601 * C954 - C23602 * C948 +
             (C21591 * C23586 + C47839 * C23587) * C955 +
             (C21591 * C23588 + C47839 * C23589) * C48207) *
                C48225) *
               C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C15915 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C10335 +
            ((C26261 + C26262) * C15915 + (C26213 + C26214) * C48225) *
                C48227) *
               C557 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C15915) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C15915) *
                C10335) *
               C558 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C15915 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C10335 +
            ((C26265 + C26266) * C15915 + (C26225 + C26226) * C48225) *
                C48227) *
               C559 -
           (((C26541 + C26542) * C48225 + (C26549 + C26550) * C15915) * C48227 +
            ((C21974 * C47888 + C21973 * C116) * C48225 +
             ((C21591 * C130 + C47839 * C141) * C47888 +
              (C21591 * C120 + C47839 * C131) * C116) *
                 C15915) *
                C10335) *
               C48211) *
              C48176 +
          ((((C26264 + C26263) * C15915 + (C26216 + C26215) * C48225) * C10335 +
            ((C26267 + C26268) * C15915 + (C26231 + C26232) * C48225) *
                C48227) *
               C558 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C15915) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C15915) *
                C10335) *
               C557 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C15915) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C15915) *
                C10335) *
               C559 +
           (((C26550 + C26549) * C15915 + (C26542 + C26541) * C48225) * C10335 +
            (((C21591 * C425 + C47839 * C444) * C116 +
              (C21591 * C443 + C47839 * C455) * C47888) *
                 C15915 +
             ((C21591 * C2031 + C47839 * C2032) * C116 +
              (C21591 * C2033 + C47839 * C2034) * C47888) *
                 C48225) *
                C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C953 +
              (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
              C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                 C15915 +
             (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
              C21743 * C955 + C21744 * C48207) *
                 C48225) *
                C10335 +
            ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C15915 +
             (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
                C48227) *
               C48161 +
           (((C21745 * C954 -
              ((C21591 * C128 + C47839 * C139) * C947 +
               (C21591 * C118 + C47839 * C125) * C953) +
              C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                 C15915 +
             (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
              C21749 * C955 - C21750 * C48207) *
                 C48225) *
                C10335 +
            ((C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C15915 +
             (C27497 - (C27498 + C27499) + C27500 - C27501 - C27502) * C48225) *
                C48227) *
               C47870) *
              C48176 +
          ((((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) * C15915 +
             (C27151 - (C27150 + C27149) + C27152 - C27153 - C27154) * C48225) *
                C10335 +
            ((C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) * C15915 +
             (C27161 - (C27162 + C27163) + C27164 - C27165 - C27166) * C48225) *
                C48227) *
               C48161 +
           (((C27493 + C27492 - C27491 - C27494 + C27495 + C27496) * C15915 +
             (C27499 + C27498 - C27497 - C27500 + C27501 + C27502) * C48225) *
                C10335 +
            ((C26253 * C953 + C26254 * C947 - C23387 * C954 - C23388 * C948 +
              C23389 * C955 + C23390 * C48207) *
                 C15915 +
             (C23387 * C953 + C23388 * C947 - C23389 * C954 - C23390 * C948 +
              (C21591 * C5880 + C47839 * C5882) * C955 +
              (C21591 * C5884 + C47839 * C5886) * C48207) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C15915 +
            (C21739 * C116 + C21740 * C47888) * C48225) *
               C10335 +
           (((C21591 * C420 + C47839 * C434) * C116 +
             (C21591 * C433 + C47839 * C450) * C47888) *
                C15915 +
            (C22245 * C116 + C22246 * C47888) * C48225) *
               C48227) *
              C107 -
          (((C22250 * C47888 + C22249 * C116) * C48225 +
            ((C21591 * C430 + C47839 * C447) * C47888 +
             (C21591 * C417 + C47839 * C427) * C116) *
                C15915) *
               C48227 +
           ((C21746 * C47888 + C21745 * C116) * C48225 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C15915) *
               C10335) *
              C108 +
          ((((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C15915 +
            (C21751 * C116 + C21752 * C47888) * C48225) *
               C10335 +
           (((C21591 * C418 + C47839 * C428) * C116 +
             (C21591 * C431 + C47839 * C448) * C47888) *
                C15915 +
            (C22253 * C116 + C22254 * C47888) * C48225) *
               C48227) *
              C109 -
          ((((C21591 * C829 + C47839 * C835) * C47888 +
             (C21591 * C820 + C47839 * C828) * C116) *
                C48225 +
            ((C21591 * C432 + C47839 * C449) * C47888 +
             (C21591 * C419 + C47839 * C429) * C116) *
                C15915) *
               C48227 +
           ((C21974 * C47888 + C21973 * C116) * C48225 +
            ((C21591 * C130 + C47839 * C141) * C47888 +
             (C21591 * C120 + C47839 * C131) * C116) *
                C15915) *
               C10335) *
              C110 +
          ((((C21591 * C121 + C47839 * C132) * C116 +
             (C21591 * C133 + C47839 * C142) * C47888) *
                C15915 +
            ((C21591 * C272 + C47839 * C290) * C116 +
             (C21591 * C291 + C47839 * C302) * C47888) *
                C48225) *
               C10335 +
           (((C21591 * C421 + C47839 * C436) * C116 +
             (C21591 * C435 + C47839 * C451) * C47888) *
                C15915 +
            ((C21591 * C821 + C47839 * C830) * C116 +
             (C21591 * C831 + C47839 * C836) * C47888) *
                C48225) *
               C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C15915 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C48225) *
               C10335 +
           (((C21591 * C420 + C47839 * C434) * C261 +
             (C21591 * C433 + C47839 * C450) * C48246 - C22245 * C262 -
             C22246 * C48234 + C22247 * C263 + C22248 * C48207) *
                C15915 +
            (C22245 * C261 + C22246 * C48246 - C22247 * C262 - C22248 * C48234 +
             C22575 * C263 + C22576 * C48207) *
                C48225) *
               C48227) *
              C258 +
          (((C21745 * C262 -
             ((C21591 * C128 + C47839 * C139) * C48246 +
              (C21591 * C118 + C47839 * C125) * C261) +
             C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                C15915 +
            (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
             C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                C48225) *
               C10335 +
           ((C22249 * C262 -
             ((C21591 * C430 + C47839 * C447) * C48246 +
              (C21591 * C417 + C47839 * C427) * C261) +
             C22250 * C48234 - C22251 * C263 - C22252 * C48207) *
                C15915 +
            (C22251 * C262 - (C22250 * C48246 + C22249 * C261) +
             C22252 * C48234 - C22837 * C263 - C22838 * C48207) *
                C48225) *
               C48227) *
              C259 +
          ((((C21591 * C119 + C47839 * C126) * C261 +
             (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
             C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
                C15915 +
            (C21751 * C261 + C21752 * C48246 - C21753 * C262 - C21754 * C48234 +
             C21755 * C263 + C21756 * C48207) *
                C48225) *
               C10335 +
           (((C21591 * C418 + C47839 * C428) * C261 +
             (C21591 * C431 + C47839 * C448) * C48246 - C22253 * C262 -
             C22254 * C48234 + C22255 * C263 + C22256 * C48207) *
                C15915 +
            (C22253 * C261 + C22254 * C48246 - C22255 * C262 - C22256 * C48234 +
             (C21591 * C1561 + C47839 * C1564) * C263 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C15915 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C10335 +
           ((C26247 * C953 + C26248 * C947 - C22245 * C954 - C22246 * C948 +
             C22247 * C955 + C22248 * C48207) *
                C15915 +
            (C22245 * C953 + C22246 * C947 - C22247 * C954 - C22248 * C948 +
             C22575 * C955 + C22576 * C48207) *
                C48225) *
               C48227) *
              C48243 +
          (((C21745 * C954 -
             ((C21591 * C128 + C47839 * C139) * C947 +
              (C21591 * C118 + C47839 * C125) * C953) +
             C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                C15915 +
            (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
             C21749 * C955 - C21750 * C48207) *
                C48225) *
               C10335 +
           ((C22249 * C954 - (C26249 * C947 + C26250 * C953) + C22250 * C948 -
             C22251 * C955 - C22252 * C48207) *
                C15915 +
            (C22251 * C954 - (C22250 * C947 + C22249 * C953) + C22252 * C948 -
             C22837 * C955 - C22838 * C48207) *
                C48225) *
               C48227) *
              C48230 +
          ((((C21591 * C119 + C47839 * C126) * C953 +
             (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
             C21752 * C948 + C21753 * C955 + C21754 * C48207) *
                C15915 +
            (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
             C21755 * C955 + C21756 * C48207) *
                C48225) *
               C10335 +
           ((C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
             C22255 * C955 + C22256 * C48207) *
                C15915 +
            (C22253 * C953 + C22254 * C947 - C22255 * C954 - C22256 * C948 +
             (C21591 * C1561 + C47839 * C1564) * C955 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1024 +
            (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
            C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
            C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
               C15915 +
           (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
            C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
            C22443 * C1028 + C22444 * C1022) *
               C48225) *
              C10335 +
          ((C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
            C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
            C22945 * C1028 + C22946 * C1022) *
               C15915 +
           (C22245 * C1024 + C22246 * C1018 - C22247 * C1025 - C22248 * C1019 +
            C22575 * C1026 + C22576 * C1020 - C22945 * C1027 - C22946 * C1021 +
            (C21591 * C22936 + C47839 * C22937) * C1028 +
            (C21591 * C22938 + C47839 * C22939) * C1022) *
               C48225) *
              C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C47047 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47947 -
            (C16114 + C16115) * C47039 - (C16116 + C16117) * C47954 +
            (C16118 + C16119) * C47053 + (C16120 + C16121) * C2723) *
               C48095 * C31728 +
           ((C32071 + C32072) * C47047 + (C32073 + C32074) * C47947 -
            (C16775 + C16774) * C47039 - (C16777 + C16776) * C47954 +
            (C17209 + C17208) * C47053 + (C17211 + C17210) * C2723) *
               C48095 * C48227) *
              C47865 +
          (((C16122 + C16123) * C47039 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47947 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C47047) +
            (C16124 + C16125) * C47954 - (C16126 + C16127) * C47053 -
            (C16128 + C16129) * C2723) *
               C48095 * C31728 +
           ((C16779 + C16778) * C47039 -
            ((C32075 + C32076) * C47947 + (C32077 + C32078) * C47047) +
            (C16781 + C16780) * C47954 - (C17565 + C17564) * C47053 -
            (C17567 + C17566) * C2723) *
               C48095 * C48227) *
              C47873 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C47047 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C47947 -
            (C16130 + C16131) * C47039 - (C16132 + C16133) * C47954 +
            (C16134 + C16135) * C47053 + (C16136 + C16137) * C2723) *
               C48095 * C31728 +
           ((C32079 + C32080) * C47047 + (C32081 + C32082) * C47947 -
            (C16783 + C16782) * C47039 - (C16785 + C16784) * C47954 +
            (C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
             C48194 * C1458) *
                C47053 +
            (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
             C48194 * C1460) *
                C2723) *
               C48095 * C48227) *
              C2726) *
         C47906) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C47047 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47947 -
             (C16114 + C16115) * C47039 - (C16116 + C16117) * C47954 +
             (C16118 + C16119) * C47053 + (C16120 + C16121) * C2723) *
                C48095 * C31728 +
            ((C32071 + C32072) * C47047 + (C32073 + C32074) * C47947 -
             (C16775 + C16774) * C47039 - (C16777 + C16776) * C47954 +
             (C17209 + C17208) * C47053 + (C17211 + C17210) * C2723) *
                C48095 * C48227) *
               C2459 +
           (((C16122 + C16123) * C47039 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C47947 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C47047) +
             (C16124 + C16125) * C47954 - (C16126 + C16127) * C47053 -
             (C16128 + C16129) * C2723) *
                C48095 * C31728 +
            ((C16779 + C16778) * C47039 -
             ((C32075 + C32076) * C47947 + (C32077 + C32078) * C47047) +
             (C16781 + C16780) * C47954 - (C17565 + C17564) * C47053 -
             (C17567 + C17566) * C2723) *
                C48095 * C48227) *
               C47870) *
              C48176 +
          ((((C16774 + C16775) * C47039 -
             ((C32074 + C32073) * C47947 + (C32072 + C32071) * C47047) +
             (C16776 + C16777) * C47954 - (C17208 + C17209) * C47053 -
             (C17210 + C17211) * C2723) *
                C48095 * C31728 +
            ((C17213 + C17212) * C47039 -
             ((C32087 + C32088) * C47947 + (C32089 + C32090) * C47047) +
             (C17215 + C17214) * C47954 - (C17217 + C17216) * C47053 -
             (C17219 + C17218) * C2723) *
                C48095 * C48227) *
               C2459 +
           (((C32078 + C32077) * C47047 + (C32076 + C32075) * C47947 -
             (C16778 + C16779) * C47039 - (C16780 + C16781) * C47954 +
             (C17564 + C17565) * C47053 + (C17566 + C17567) * C2723) *
                C48095 * C31728 +
            ((C32083 + C32084) * C47047 + (C32085 + C32086) * C47947 -
             (C18287 + C18286) * C47039 - (C18289 + C18288) * C47954 +
             (C15917 * C1170 + C15913 * C1185 + C15918 * C1171 +
              C48194 * C1186) *
                 C47053 +
             (C15917 * C1188 + C15913 * C1197 + C15918 * C1189 +
              C48194 * C1198) *
                 C2723) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2461 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48253 -
            (C16114 + C16115) * C2462 - (C16116 + C16117) * C48249 +
            (C16118 + C16119) * C2463 + (C16120 + C16121) * C48239 -
            (C17030 + C17031) * C2464 - (C17032 + C17033) * C48217) *
               C48095 * C31728 +
           ((C32071 + C32072) * C2461 + (C32073 + C32074) * C48253 -
            (C16775 + C16774) * C2462 - (C16777 + C16776) * C48249 +
            (C17209 + C17208) * C2463 + (C17211 + C17210) * C48239 -
            (C17707 + C17706) * C2464 - (C17709 + C17708) * C48217) *
               C48095 * C48227) *
              C2459 +
          (((C16122 + C16123) * C2462 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48253 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C2461) +
            (C16124 + C16125) * C48249 - (C16126 + C16127) * C2463 -
            (C16128 + C16129) * C48239 + (C17358 + C17359) * C2464 +
            (C17360 + C17361) * C48217) *
               C48095 * C31728 +
           ((C16779 + C16778) * C2462 -
            ((C32075 + C32076) * C48253 + (C32077 + C32078) * C2461) +
            (C16781 + C16780) * C48249 - (C17565 + C17564) * C2463 -
            (C17567 + C17566) * C48239 +
            (C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
             C48194 * C1564) *
                C2464 +
            (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
             C48194 * C1570) *
                C48217) *
               C48095 * C48227) *
              C47870) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2355 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C2349 -
            (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
               C48095 * C31728 +
           ((C32071 + C32072) * C2355 + (C32073 + C32074) * C2349 -
            (C16775 + C16774) * C2356 - (C16777 + C16776) * C47951) *
               C48095 * C48227) *
              C48252 +
          (((C16122 + C16123) * C2356 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C2349 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C2355) +
            (C16124 + C16125) * C47951) *
               C48095 * C31728 +
           ((C16779 + C16778) * C2356 -
            ((C32075 + C32076) * C2349 + (C32077 + C32078) * C2355) +
            (C16781 + C16780) * C47951) *
               C48095 * C48227) *
              C48245 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C2355 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C2349 -
            (C16130 + C16131) * C2356 - (C16132 + C16133) * C47951) *
               C48095 * C31728 +
           ((C32079 + C32080) * C2355 + (C32081 + C32082) * C2349 -
            (C16783 + C16782) * C2356 - (C16785 + C16784) * C47951) *
               C48095 * C48227) *
              C48232 +
          (((C16422 + C16423) * C2356 -
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C2349 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C2355) +
            (C16424 + C16425) * C47951) *
               C48095 * C31728 +
           ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48194 * C830) *
                C2356 -
            ((C32363 + C32364) * C2349 + (C32365 + C32366) * C2355) +
            (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48194 * C836) *
                C47951) *
               C48095 * C48227) *
              C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C2355 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C2349 -
             (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
                C48095 * C31728 +
            ((C32071 + C32072) * C2355 + (C32073 + C32074) * C2349 -
             (C16775 + C16774) * C2356 - (C16777 + C16776) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C16122 + C16123) * C2356 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C2349 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C2355) +
             (C16124 + C16125) * C47951) *
                C48095 * C31728 +
            ((C16779 + C16778) * C2356 -
             ((C32075 + C32076) * C2349 + (C32077 + C32078) * C2355) +
             (C16781 + C16780) * C47951) *
                C48095 * C48227) *
               C47870) *
              C48247 +
          ((((C16774 + C16775) * C2356 -
             ((C32074 + C32073) * C2349 + (C32072 + C32071) * C2355) +
             (C16776 + C16777) * C47951) *
                C48095 * C31728 +
            ((C17213 + C17212) * C2356 -
             ((C32087 + C32088) * C2349 + (C32089 + C32090) * C2355) +
             (C17215 + C17214) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C32078 + C32077) * C2355 + (C32076 + C32075) * C2349 -
             (C16778 + C16779) * C2356 - (C16780 + C16781) * C47951) *
                C48095 * C31728 +
            ((C32083 + C32084) * C2355 + (C32085 + C32086) * C2349 -
             (C18287 + C18286) * C2356 - (C18289 + C18288) * C47951) *
                C48095 * C48227) *
               C47870) *
              C48236 +
          ((((C32090 + C32089) * C2355 + (C32088 + C32087) * C2349 -
             (C17212 + C17213) * C2356 - (C17214 + C17215) * C47951) *
                C48095 * C31728 +
            ((C33779 + C33780) * C2355 + (C33781 + C33782) * C2349 -
             (C18559 + C18558) * C2356 - (C18561 + C18560) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C18286 + C18287) * C2356 -
             ((C32086 + C32085) * C2349 + (C32084 + C32083) * C2355) +
             (C18288 + C18289) * C47951) *
                C48095 * C31728 +
            ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48194 * C2244) *
                 C2356 -
             ((C34119 + C34120) * C2349 + (C34121 + C34122) * C2355) +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48194 * C2250) *
                 C47951) *
                C48095 * C48227) *
               C47870) *
              C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C2355 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C2349 -
             (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
                C48095 * C31728 +
            ((C32071 + C32072) * C2355 + (C32073 + C32074) * C2349 -
             (C16775 + C16774) * C2356 - (C16777 + C16776) * C47951) *
                C48095 * C48227) *
               C47865 +
           (((C16122 + C16123) * C2356 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C2349 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C2355) +
             (C16124 + C16125) * C47951) *
                C48095 * C31728 +
            ((C16779 + C16778) * C2356 -
             ((C32075 + C32076) * C2349 + (C32077 + C32078) * C2355) +
             (C16781 + C16780) * C47951) *
                C48095 * C48227) *
               C47873 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C2355 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C2349 -
             (C16130 + C16131) * C2356 - (C16132 + C16133) * C47951) *
                C48095 * C31728 +
            ((C32079 + C32080) * C2355 + (C32081 + C32082) * C2349 -
             (C16783 + C16782) * C2356 - (C16785 + C16784) * C47951) *
                C48095 * C48227) *
               C2726) *
              C48176 +
          ((((C16774 + C16775) * C2356 -
             ((C32074 + C32073) * C2349 + (C32072 + C32071) * C2355) +
             (C16776 + C16777) * C47951) *
                C48095 * C31728 +
            ((C17213 + C17212) * C2356 -
             ((C32087 + C32088) * C2349 + (C32089 + C32090) * C2355) +
             (C17215 + C17214) * C47951) *
                C48095 * C48227) *
               C47865 +
           (((C32078 + C32077) * C2355 + (C32076 + C32075) * C2349 -
             (C16778 + C16779) * C2356 - (C16780 + C16781) * C47951) *
                C48095 * C31728 +
            ((C32083 + C32084) * C2355 + (C32085 + C32086) * C2349 -
             (C18287 + C18286) * C2356 - (C18289 + C18288) * C47951) *
                C48095 * C48227) *
               C47873 +
           (((C16782 + C16783) * C2356 -
             ((C32082 + C32081) * C2349 + (C32080 + C32079) * C2355) +
             (C16784 + C16785) * C47951) *
                C48095 * C31728 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C2356 -
             ((C32091 + C32092) * C2349 + (C32093 + C32094) * C2355) +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C2726) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2355 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C2349 -
            (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
               C48095 * C31728 +
           ((C32071 + C32072) * C2355 + (C32073 + C32074) * C2349 -
            (C16775 + C16774) * C2356 - (C16777 + C16776) * C47951) *
               C48095 * C48227) *
              C48252 +
          (((C16122 + C16123) * C2356 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C2349 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C2355) +
            (C16124 + C16125) * C47951) *
               C48095 * C31728 +
           ((C16779 + C16778) * C2356 -
            ((C32075 + C32076) * C2349 + (C32077 + C32078) * C2355) +
            (C16781 + C16780) * C47951) *
               C48095 * C48227) *
              C48245 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C2355 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C2349 -
            (C16130 + C16131) * C2356 - (C16132 + C16133) * C47951) *
               C48095 * C31728 +
           ((C32079 + C32080) * C2355 + (C32081 + C32082) * C2349 -
            (C16783 + C16782) * C2356 - (C16785 + C16784) * C47951) *
               C48095 * C48227) *
              C48232 +
          (((C16422 + C16423) * C2356 -
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C2349 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C2355) +
            (C16424 + C16425) * C47951) *
               C48095 * C31728 +
           ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48194 * C830) *
                C2356 -
            ((C32363 + C32364) * C2349 + (C32365 + C32366) * C2355) +
            (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48194 * C836) *
                C47951) *
               C48095 * C48227) *
              C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2461 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48253 -
            (C16114 + C16115) * C2462 - (C16116 + C16117) * C48249 +
            (C16118 + C16119) * C2463 + (C16120 + C16121) * C48239 -
            (C17030 + C17031) * C2464 - (C17032 + C17033) * C48217) *
               C48095 * C31728 +
           ((C32071 + C32072) * C2461 + (C32073 + C32074) * C48253 -
            (C16775 + C16774) * C2462 - (C16777 + C16776) * C48249 +
            (C17209 + C17208) * C2463 + (C17211 + C17210) * C48239 -
            (C17707 + C17706) * C2464 - (C17709 + C17708) * C48217) *
               C48095 * C48227) *
              C2459 +
          (((C16122 + C16123) * C2462 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48253 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C2461) +
            (C16124 + C16125) * C48249 - (C16126 + C16127) * C2463 -
            (C16128 + C16129) * C48239 + (C17358 + C17359) * C2464 +
            (C17360 + C17361) * C48217) *
               C48095 * C31728 +
           ((C16779 + C16778) * C2462 -
            ((C32075 + C32076) * C48253 + (C32077 + C32078) * C2461) +
            (C16781 + C16780) * C48249 - (C17565 + C17564) * C2463 -
            (C17567 + C17566) * C48239 +
            (C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
             C48194 * C1564) *
                C2464 +
            (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
             C48194 * C1570) *
                C48217) *
               C48095 * C48227) *
              C47870) *
         C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C47047 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47947 -
             (C16114 + C16115) * C47039 - (C16116 + C16117) * C47954 +
             (C16118 + C16119) * C47053 + (C16120 + C16121) * C2723) *
                C48095 * C31728 +
            ((C32071 + C32072) * C47047 + (C32073 + C32074) * C47947 -
             (C16775 + C16774) * C47039 - (C16777 + C16776) * C47954 +
             (C17209 + C17208) * C47053 + (C17211 + C17210) * C2723) *
                C48095 * C48227) *
               C48161 +
           (((C16122 + C16123) * C47039 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C47947 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C47047) +
             (C16124 + C16125) * C47954 - (C16126 + C16127) * C47053 -
             (C16128 + C16129) * C2723) *
                C48095 * C31728 +
            ((C16779 + C16778) * C47039 -
             ((C32075 + C32076) * C47947 + (C32077 + C32078) * C47047) +
             (C16781 + C16780) * C47954 - (C17565 + C17564) * C47053 -
             (C17567 + C17566) * C2723) *
                C48095 * C48227) *
               C47870) *
              C3120 +
          ((((C16774 + C16775) * C47039 -
             ((C32074 + C32073) * C47947 + (C32072 + C32071) * C47047) +
             (C16776 + C16777) * C47954 - (C17208 + C17209) * C47053 -
             (C17210 + C17211) * C2723) *
                C48095 * C31728 +
            ((C17213 + C17212) * C47039 -
             ((C32087 + C32088) * C47947 + (C32089 + C32090) * C47047) +
             (C17215 + C17214) * C47954 - (C17217 + C17216) * C47053 -
             (C17219 + C17218) * C2723) *
                C48095 * C48227) *
               C48161 +
           (((C32078 + C32077) * C47047 + (C32076 + C32075) * C47947 -
             (C16778 + C16779) * C47039 - (C16780 + C16781) * C47954 +
             (C17564 + C17565) * C47053 + (C17566 + C17567) * C2723) *
                C48095 * C31728 +
            ((C32083 + C32084) * C47047 + (C32085 + C32086) * C47947 -
             (C18287 + C18286) * C47039 - (C18289 + C18288) * C47954 +
             (C15917 * C1170 + C15913 * C1185 + C15918 * C1171 +
              C48194 * C1186) *
                 C47053 +
             (C15917 * C1188 + C15913 * C1197 + C15918 * C1189 +
              C48194 * C1198) *
                 C2723) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C47047 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47947 -
            (C16114 + C16115) * C47039 - (C16116 + C16117) * C47954 +
            (C16118 + C16119) * C47053 + (C16120 + C16121) * C2723) *
               C48095 * C31728 +
           ((C32071 + C32072) * C47047 + (C32073 + C32074) * C47947 -
            (C16775 + C16774) * C47039 - (C16777 + C16776) * C47954 +
            (C17209 + C17208) * C47053 + (C17211 + C17210) * C2723) *
               C48095 * C48227) *
              C47860 * C47989 +
          (((C16774 + C16775) * C47039 -
            ((C32074 + C32073) * C47947 + (C32072 + C32071) * C47047) +
            (C16776 + C16777) * C47954 - (C17208 + C17209) * C47053 -
            (C17210 + C17211) * C2723) *
               C48095 * C31728 +
           ((C17213 + C17212) * C47039 -
            ((C32087 + C32088) * C47947 + (C32089 + C32090) * C47047) +
            (C17215 + C17214) * C47954 - (C17217 + C17216) * C47053 -
            (C17219 + C17218) * C2723) *
               C48095 * C48227) *
              C47860 * C47996 +
          (((C32090 + C32089) * C47047 + (C32088 + C32087) * C47947 -
            (C17212 + C17213) * C47039 - (C17214 + C17215) * C47954 +
            (C17216 + C17217) * C47053 + (C17218 + C17219) * C2723) *
               C48095 * C31728 +
           ((C33779 + C33780) * C47047 + (C33781 + C33782) * C47947 -
            (C18559 + C18558) * C47039 - (C18561 + C18560) * C47954 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48194 * C7272) *
                C47053 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48194 * C7276) *
                C2723) *
               C48095 * C48227) *
              C47860 * C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2461 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48253 -
            (C16114 + C16115) * C2462 - (C16116 + C16117) * C48249 +
            (C16118 + C16119) * C2463 + (C16120 + C16121) * C48239 -
            (C17030 + C17031) * C2464 - (C17032 + C17033) * C48217) *
               C48095 * C31728 +
           ((C32071 + C32072) * C2461 + (C32073 + C32074) * C48253 -
            (C16775 + C16774) * C2462 - (C16777 + C16776) * C48249 +
            (C17209 + C17208) * C2463 + (C17211 + C17210) * C48239 -
            (C17707 + C17706) * C2464 - (C17709 + C17708) * C48217) *
               C48095 * C48227) *
              C47860 * C3120 +
          (((C16774 + C16775) * C2462 -
            ((C32074 + C32073) * C48253 + (C32072 + C32071) * C2461) +
            (C16776 + C16777) * C48249 - (C17208 + C17209) * C2463 -
            (C17210 + C17211) * C48239 + (C17706 + C17707) * C2464 +
            (C17708 + C17709) * C48217) *
               C48095 * C31728 +
           ((C17213 + C17212) * C2462 -
            ((C32087 + C32088) * C48253 + (C32089 + C32090) * C2461) +
            (C17215 + C17214) * C48249 - (C17217 + C17216) * C2463 -
            (C17219 + C17218) * C48239 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48194 * C5882) *
                C2464 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48194 * C5886) *
                C48217) *
               C48095 * C48227) *
              C47860 * C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C2355 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C2349 -
             (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
                C48095 * C31728 +
            ((C32071 + C32072) * C2355 + (C32073 + C32074) * C2349 -
             (C16775 + C16774) * C2356 - (C16777 + C16776) * C47951) *
                C48095 * C48227) *
               C48243 +
           (((C16122 + C16123) * C2356 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C2349 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C2355) +
             (C16124 + C16125) * C47951) *
                C48095 * C31728 +
            ((C16779 + C16778) * C2356 -
             ((C32075 + C32076) * C2349 + (C32077 + C32078) * C2355) +
             (C16781 + C16780) * C47951) *
                C48095 * C48227) *
               C48230 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C2355 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C2349 -
             (C16130 + C16131) * C2356 - (C16132 + C16133) * C47951) *
                C48095 * C31728 +
            ((C32079 + C32080) * C2355 + (C32081 + C32082) * C2349 -
             (C16783 + C16782) * C2356 - (C16785 + C16784) * C47951) *
                C48095 * C48227) *
               C48201) *
              C3120 +
          ((((C16774 + C16775) * C2356 -
             ((C32074 + C32073) * C2349 + (C32072 + C32071) * C2355) +
             (C16776 + C16777) * C47951) *
                C48095 * C31728 +
            ((C17213 + C17212) * C2356 -
             ((C32087 + C32088) * C2349 + (C32089 + C32090) * C2355) +
             (C17215 + C17214) * C47951) *
                C48095 * C48227) *
               C48243 +
           (((C32078 + C32077) * C2355 + (C32076 + C32075) * C2349 -
             (C16778 + C16779) * C2356 - (C16780 + C16781) * C47951) *
                C48095 * C31728 +
            ((C32083 + C32084) * C2355 + (C32085 + C32086) * C2349 -
             (C18287 + C18286) * C2356 - (C18289 + C18288) * C47951) *
                C48095 * C48227) *
               C48230 +
           (((C16782 + C16783) * C2356 -
             ((C32082 + C32081) * C2349 + (C32080 + C32079) * C2355) +
             (C16784 + C16785) * C47951) *
                C48095 * C31728 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C2356 -
             ((C32091 + C32092) * C2349 + (C32093 + C32094) * C2355) +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2355 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C2349 -
            (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
               C48095 * C31728 +
           ((C32071 + C32072) * C2355 + (C32073 + C32074) * C2349 -
            (C16775 + C16774) * C2356 - (C16777 + C16776) * C47951) *
               C48095 * C48227) *
              C47860 * C48254 +
          (((C16774 + C16775) * C2356 -
            ((C32074 + C32073) * C2349 + (C32072 + C32071) * C2355) +
            (C16776 + C16777) * C47951) *
               C48095 * C31728 +
           ((C17213 + C17212) * C2356 -
            ((C32087 + C32088) * C2349 + (C32089 + C32090) * C2355) +
            (C17215 + C17214) * C47951) *
               C48095 * C48227) *
              C47860 * C48251 +
          (((C32090 + C32089) * C2355 + (C32088 + C32087) * C2349 -
            (C17212 + C17213) * C2356 - (C17214 + C17215) * C47951) *
               C48095 * C31728 +
           ((C33779 + C33780) * C2355 + (C33781 + C33782) * C2349 -
            (C18559 + C18558) * C2356 - (C18561 + C18560) * C47951) *
               C48095 * C48227) *
              C47860 * C48242 +
          (((C18558 + C18559) * C2356 -
            ((C33782 + C33781) * C2349 + (C33780 + C33779) * C2355) +
            (C18560 + C18561) * C47951) *
               C48095 * C31728 +
           ((C15917 * C6795 + C15913 * C6797 + C15918 * C6796 +
             C48194 * C6798) *
                C2356 -
            ((C33783 + C33784) * C2349 + (C33785 + C33786) * C2355) +
            (C15917 * C6799 + C15913 * C6801 + C15918 * C6800 +
             C48194 * C6802) *
                C47951) *
               C48095 * C48227) *
              C47860 * C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C2355 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C2349 -
             (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
                C48095 * C31728 +
            ((C32071 + C32072) * C2355 + (C32073 + C32074) * C2349 -
             (C16775 + C16774) * C2356 - (C16777 + C16776) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C16122 + C16123) * C2356 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C2349 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C2355) +
             (C16124 + C16125) * C47951) *
                C48095 * C31728 +
            ((C16779 + C16778) * C2356 -
             ((C32075 + C32076) * C2349 + (C32077 + C32078) * C2355) +
             (C16781 + C16780) * C47951) *
                C48095 * C48227) *
               C47870) *
              C47989 +
          ((((C16774 + C16775) * C2356 -
             ((C32074 + C32073) * C2349 + (C32072 + C32071) * C2355) +
             (C16776 + C16777) * C47951) *
                C48095 * C31728 +
            ((C17213 + C17212) * C2356 -
             ((C32087 + C32088) * C2349 + (C32089 + C32090) * C2355) +
             (C17215 + C17214) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C32078 + C32077) * C2355 + (C32076 + C32075) * C2349 -
             (C16778 + C16779) * C2356 - (C16780 + C16781) * C47951) *
                C48095 * C31728 +
            ((C32083 + C32084) * C2355 + (C32085 + C32086) * C2349 -
             (C18287 + C18286) * C2356 - (C18289 + C18288) * C47951) *
                C48095 * C48227) *
               C47870) *
              C47996 +
          ((((C32090 + C32089) * C2355 + (C32088 + C32087) * C2349 -
             (C17212 + C17213) * C2356 - (C17214 + C17215) * C47951) *
                C48095 * C31728 +
            ((C33779 + C33780) * C2355 + (C33781 + C33782) * C2349 -
             (C18559 + C18558) * C2356 - (C18561 + C18560) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C18286 + C18287) * C2356 -
             ((C32086 + C32085) * C2349 + (C32084 + C32083) * C2355) +
             (C18288 + C18289) * C47951) *
                C48095 * C31728 +
            ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48194 * C2244) *
                 C2356 -
             ((C34119 + C34120) * C2349 + (C34121 + C34122) * C2355) +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48194 * C2250) *
                 C47951) *
                C48095 * C48227) *
               C47870) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C2355 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C2349 -
             (C16114 + C16115) * C2356 - (C16116 + C16117) * C47951) *
                C48095 * C31728 +
            ((C32071 + C32072) * C2355 + (C32073 + C32074) * C2349 -
             (C16775 + C16774) * C2356 - (C16777 + C16776) * C47951) *
                C48095 * C48227) *
               C48243 +
           (((C16122 + C16123) * C2356 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C2349 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C2355) +
             (C16124 + C16125) * C47951) *
                C48095 * C31728 +
            ((C16779 + C16778) * C2356 -
             ((C32075 + C32076) * C2349 + (C32077 + C32078) * C2355) +
             (C16781 + C16780) * C47951) *
                C48095 * C48227) *
               C48230 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C2355 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C2349 -
             (C16130 + C16131) * C2356 - (C16132 + C16133) * C47951) *
                C48095 * C31728 +
            ((C32079 + C32080) * C2355 + (C32081 + C32082) * C2349 -
             (C16783 + C16782) * C2356 - (C16785 + C16784) * C47951) *
                C48095 * C48227) *
               C48201) *
              C3120 +
          ((((C16774 + C16775) * C2356 -
             ((C32074 + C32073) * C2349 + (C32072 + C32071) * C2355) +
             (C16776 + C16777) * C47951) *
                C48095 * C31728 +
            ((C17213 + C17212) * C2356 -
             ((C32087 + C32088) * C2349 + (C32089 + C32090) * C2355) +
             (C17215 + C17214) * C47951) *
                C48095 * C48227) *
               C48243 +
           (((C32078 + C32077) * C2355 + (C32076 + C32075) * C2349 -
             (C16778 + C16779) * C2356 - (C16780 + C16781) * C47951) *
                C48095 * C31728 +
            ((C32083 + C32084) * C2355 + (C32085 + C32086) * C2349 -
             (C18287 + C18286) * C2356 - (C18289 + C18288) * C47951) *
                C48095 * C48227) *
               C48230 +
           (((C16782 + C16783) * C2356 -
             ((C32082 + C32081) * C2349 + (C32080 + C32079) * C2355) +
             (C16784 + C16785) * C47951) *
                C48095 * C31728 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C2356 -
             ((C32091 + C32092) * C2349 + (C32093 + C32094) * C2355) +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C2461 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48253 -
            (C16114 + C16115) * C2462 - (C16116 + C16117) * C48249 +
            (C16118 + C16119) * C2463 + (C16120 + C16121) * C48239 -
            (C17030 + C17031) * C2464 - (C17032 + C17033) * C48217) *
               C48095 * C31728 +
           ((C32071 + C32072) * C2461 + (C32073 + C32074) * C48253 -
            (C16775 + C16774) * C2462 - (C16777 + C16776) * C48249 +
            (C17209 + C17208) * C2463 + (C17211 + C17210) * C48239 -
            (C17707 + C17706) * C2464 - (C17709 + C17708) * C48217) *
               C48095 * C48227) *
              C47860 * C3120 +
          (((C16774 + C16775) * C2462 -
            ((C32074 + C32073) * C48253 + (C32072 + C32071) * C2461) +
            (C16776 + C16777) * C48249 - (C17208 + C17209) * C2463 -
            (C17210 + C17211) * C48239 + (C17706 + C17707) * C2464 +
            (C17708 + C17709) * C48217) *
               C48095 * C31728 +
           ((C17213 + C17212) * C2462 -
            ((C32087 + C32088) * C48253 + (C32089 + C32090) * C2461) +
            (C17215 + C17214) * C48249 - (C17217 + C17216) * C2463 -
            (C17219 + C17218) * C48239 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48194 * C5882) *
                C2464 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48194 * C5886) *
                C48217) *
               C48095 * C48227) *
              C47860 * C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C1303 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C1297 -
            (C16114 + C16115) * C1304 - (C16116 + C16117) * C1298 +
            (C16118 + C16119) * C1305 + (C16120 + C16121) * C1299 -
            (C17030 + C17031) * C1306 - (C17032 + C17033) * C48217) *
               C48095 * C31728 +
           ((C32071 + C32072) * C1303 + (C32073 + C32074) * C1297 -
            (C16775 + C16774) * C1304 - (C16777 + C16776) * C1298 +
            (C17209 + C17208) * C1305 + (C17211 + C17210) * C1299 -
            (C17707 + C17706) * C1306 - (C17709 + C17708) * C48217) *
               C48095 * C48227) *
              C48161 +
          (((C16122 + C16123) * C1304 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C1297 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C1303) +
            (C16124 + C16125) * C1298 - (C16126 + C16127) * C1305 -
            (C16128 + C16129) * C1299 + (C17358 + C17359) * C1306 +
            (C17360 + C17361) * C48217) *
               C48095 * C31728 +
           ((C16779 + C16778) * C1304 -
            ((C32075 + C32076) * C1297 + (C32077 + C32078) * C1303) +
            (C16781 + C16780) * C1298 - (C17565 + C17564) * C1305 -
            (C17567 + C17566) * C1299 +
            (C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
             C48194 * C1564) *
                C1306 +
            (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
             C48194 * C1570) *
                C48217) *
               C48095 * C48227) *
              C47870) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C561 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48175 -
            (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
               C48095 * C31728 +
           ((C32071 + C32072) * C561 + (C32073 + C32074) * C48175 -
            (C16775 + C16774) * C562 - (C16777 + C16776) * C47951) *
               C48095 * C48227) *
              C557 +
          (((C16122 + C16123) * C562 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48175 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C561) +
            (C16124 + C16125) * C47951) *
               C48095 * C31728 +
           ((C16779 + C16778) * C562 -
            ((C32075 + C32076) * C48175 + (C32077 + C32078) * C561) +
            (C16781 + C16780) * C47951) *
               C48095 * C48227) *
              C558 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C561 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C48175 -
            (C16130 + C16131) * C562 - (C16132 + C16133) * C47951) *
               C48095 * C31728 +
           ((C32079 + C32080) * C561 + (C32081 + C32082) * C48175 -
            (C16783 + C16782) * C562 - (C16785 + C16784) * C47951) *
               C48095 * C48227) *
              C559 +
          (((C16422 + C16423) * C562 -
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C48175 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C561) +
            (C16424 + C16425) * C47951) *
               C48095 * C31728 +
           ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48194 * C830) *
                C562 -
            ((C15918 * C435 + C48194 * C451 + C15917 * C432 + C15913 * C449) *
                 C48175 +
             (C15918 * C421 + C48194 * C436 + C15917 * C419 + C15913 * C429) *
                 C561) +
            (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48194 * C836) *
                C47951) *
               C48095 * C48227) *
              C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C561 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48175 -
             (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
                C48095 * C31728 +
            ((C32071 + C32072) * C561 + (C32073 + C32074) * C48175 -
             (C16775 + C16774) * C562 - (C16777 + C16776) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C16122 + C16123) * C562 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48175 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C561) +
             (C16124 + C16125) * C47951) *
                C48095 * C31728 +
            ((C16779 + C16778) * C562 -
             ((C32075 + C32076) * C48175 + (C32077 + C32078) * C561) +
             (C16781 + C16780) * C47951) *
                C48095 * C48227) *
               C47870) *
              C1681 +
          ((((C16774 + C16775) * C562 -
             ((C32074 + C32073) * C48175 + (C32072 + C32071) * C561) +
             (C16776 + C16777) * C47951) *
                C48095 * C31728 +
            ((C17213 + C17212) * C562 -
             ((C32087 + C32088) * C48175 + (C32089 + C32090) * C561) +
             (C17215 + C17214) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C32078 + C32077) * C561 + (C32076 + C32075) * C48175 -
             (C16778 + C16779) * C562 - (C16780 + C16781) * C47951) *
                C48095 * C31728 +
            ((C32083 + C32084) * C561 + (C32085 + C32086) * C48175 -
             (C18287 + C18286) * C562 - (C18289 + C18288) * C47951) *
                C48095 * C48227) *
               C47870) *
              C1682 +
          ((((C32090 + C32089) * C561 + (C32088 + C32087) * C48175 -
             (C17212 + C17213) * C562 - (C17214 + C17215) * C47951) *
                C48095 * C31728 +
            ((C33779 + C33780) * C561 + (C33781 + C33782) * C48175 -
             (C18559 + C18558) * C562 - (C18561 + C18560) * C47951) *
                C48095 * C48227) *
               C48161 +
           (((C18286 + C18287) * C562 -
             ((C32086 + C32085) * C48175 + (C32084 + C32083) * C561) +
             (C18288 + C18289) * C47951) *
                C48095 * C31728 +
            ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48194 * C2244) *
                 C562 -
             ((C15918 * C1867 + C48194 * C1879 + C15917 * C1868 +
               C15913 * C1880) *
                  C48175 +
              (C15918 * C1861 + C48194 * C1870 + C15917 * C1862 +
               C15913 * C1871) *
                  C561) +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48194 * C2250) *
                 C47951) *
                C48095 * C48227) *
               C47870) *
              C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C1303 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C1297 -
            (C16114 + C16115) * C1304 - (C16116 + C16117) * C1298 +
            (C16118 + C16119) * C1305 + (C16120 + C16121) * C1299 -
            (C17030 + C17031) * C1306 - (C17032 + C17033) * C48217) *
               C48095 * C31728 +
           ((C32071 + C32072) * C1303 + (C32073 + C32074) * C1297 -
            (C16775 + C16774) * C1304 - (C16777 + C16776) * C1298 +
            (C17209 + C17208) * C1305 + (C17211 + C17210) * C1299 -
            (C17707 + C17706) * C1306 - (C17709 + C17708) * C48217) *
               C48095 * C48227) *
              C47860 * C48176 +
          (((C16774 + C16775) * C1304 -
            ((C32074 + C32073) * C1297 + (C32072 + C32071) * C1303) +
            (C16776 + C16777) * C1298 - (C17208 + C17209) * C1305 -
            (C17210 + C17211) * C1299 + (C17706 + C17707) * C1306 +
            (C17708 + C17709) * C48217) *
               C48095 * C31728 +
           ((C17213 + C17212) * C1304 -
            ((C32087 + C32088) * C1297 + (C32089 + C32090) * C1303) +
            (C17215 + C17214) * C1298 - (C17217 + C17216) * C1305 -
            (C17219 + C17218) * C1299 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48194 * C5882) *
                C1306 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48194 * C5886) *
                C48217) *
               C48095 * C48227) *
              C47860 * C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C561 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48175 -
             (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
                C48095 * C31728 +
            ((C32071 + C32072) * C561 + (C32073 + C32074) * C48175 -
             (C16775 + C16774) * C562 - (C16777 + C16776) * C47951) *
                C48095 * C48227) *
               C258 +
           (((C16122 + C16123) * C562 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48175 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C561) +
             (C16124 + C16125) * C47951) *
                C48095 * C31728 +
            ((C16779 + C16778) * C562 -
             ((C32075 + C32076) * C48175 + (C32077 + C32078) * C561) +
             (C16781 + C16780) * C47951) *
                C48095 * C48227) *
               C259 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C561 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C48175 -
             (C16130 + C16131) * C562 - (C16132 + C16133) * C47951) *
                C48095 * C31728 +
            ((C32079 + C32080) * C561 + (C32081 + C32082) * C48175 -
             (C16783 + C16782) * C562 - (C16785 + C16784) * C47951) *
                C48095 * C48227) *
               C48201) *
              C48176 +
          ((((C16774 + C16775) * C562 -
             ((C32074 + C32073) * C48175 + (C32072 + C32071) * C561) +
             (C16776 + C16777) * C47951) *
                C48095 * C31728 +
            ((C17213 + C17212) * C562 -
             ((C32087 + C32088) * C48175 + (C32089 + C32090) * C561) +
             (C17215 + C17214) * C47951) *
                C48095 * C48227) *
               C258 +
           (((C32078 + C32077) * C561 + (C32076 + C32075) * C48175 -
             (C16778 + C16779) * C562 - (C16780 + C16781) * C47951) *
                C48095 * C31728 +
            ((C32083 + C32084) * C561 + (C32085 + C32086) * C48175 -
             (C18287 + C18286) * C562 - (C18289 + C18288) * C47951) *
                C48095 * C48227) *
               C259 +
           (((C16782 + C16783) * C562 -
             ((C32082 + C32081) * C48175 + (C32080 + C32079) * C561) +
             (C16784 + C16785) * C47951) *
                C48095 * C31728 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C562 -
             ((C32091 + C32092) * C48175 + (C32093 + C32094) * C561) +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C561 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48175 -
            (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
               C48095 * C31728 +
           ((C32071 + C32072) * C561 + (C32073 + C32074) * C48175 -
            (C16775 + C16774) * C562 - (C16777 + C16776) * C47951) *
               C48095 * C48227) *
              C47860 * C2133 +
          (((C16774 + C16775) * C562 -
            ((C32074 + C32073) * C48175 + (C32072 + C32071) * C561) +
            (C16776 + C16777) * C47951) *
               C48095 * C31728 +
           ((C17213 + C17212) * C562 -
            ((C32087 + C32088) * C48175 + (C32089 + C32090) * C561) +
            (C17215 + C17214) * C47951) *
               C48095 * C48227) *
              C47860 * C2134 +
          (((C32090 + C32089) * C561 + (C32088 + C32087) * C48175 -
            (C17212 + C17213) * C562 - (C17214 + C17215) * C47951) *
               C48095 * C31728 +
           ((C33779 + C33780) * C561 + (C33781 + C33782) * C48175 -
            (C18559 + C18558) * C562 - (C18561 + C18560) * C47951) *
               C48095 * C48227) *
              C47860 * C2135 +
          (((C18558 + C18559) * C562 -
            ((C33782 + C33781) * C48175 + (C33780 + C33779) * C561) +
            (C18560 + C18561) * C47951) *
               C48095 * C31728 +
           ((C15917 * C6795 + C15913 * C6797 + C15918 * C6796 +
             C48194 * C6798) *
                C562 -
            ((C33783 + C33784) * C48175 + (C33785 + C33786) * C561) +
            (C15917 * C6799 + C15913 * C6801 + C15918 * C6800 +
             C48194 * C6802) *
                C47951) *
               C48095 * C48227) *
              C47860 * C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C15917 * C117 + C15913 * C124 + C15918 * C118 +
                 C48194 * C125) *
                    C116 +
                (C15917 * C127 + C15913 * C138 + C15918 * C128 +
                 C48194 * C139) *
                    C47888) *
                   C48095 * C31728 +
               ((C15917 * C420 + C15913 * C434 + C15918 * C417 +
                 C48194 * C427) *
                    C116 +
                (C15917 * C433 + C15913 * C450 + C15918 * C430 +
                 C48194 * C447) *
                    C47888) *
                   C48095 * C48227) *
                  C107 -
              (((C15918 * C431 + C48194 * C448 + C15917 * C430 +
                 C15913 * C447) *
                    C47888 +
                (C15918 * C418 + C48194 * C428 + C15917 * C417 +
                 C15913 * C427) *
                    C116) *
                   C48095 * C48227 +
               ((C15918 * C129 + C48194 * C140 + C15917 * C128 +
                 C15913 * C139) *
                    C47888 +
                (C15918 * C119 + C48194 * C126 + C15917 * C118 +
                 C15913 * C125) *
                    C116) *
                   C48095 * C31728) *
                  C108 +
              (((C15917 * C119 + C15913 * C126 + C15918 * C120 +
                 C48194 * C131) *
                    C116 +
                (C15917 * C129 + C15913 * C140 + C15918 * C130 +
                 C48194 * C141) *
                    C47888) *
                   C48095 * C31728 +
               ((C15917 * C418 + C15913 * C428 + C15918 * C419 +
                 C48194 * C429) *
                    C116 +
                (C15917 * C431 + C15913 * C448 + C15918 * C432 +
                 C48194 * C449) *
                    C47888) *
                   C48095 * C48227) *
                  C109 -
              (((C15918 * C435 + C48194 * C451 + C15917 * C432 +
                 C15913 * C449) *
                    C47888 +
                (C15918 * C421 + C48194 * C436 + C15917 * C419 +
                 C15913 * C429) *
                    C116) *
                   C48095 * C48227 +
               ((C15918 * C133 + C48194 * C142 + C15917 * C130 +
                 C15913 * C141) *
                    C47888 +
                (C15918 * C121 + C48194 * C132 + C15917 * C120 +
                 C15913 * C131) *
                    C116) *
                   C48095 * C31728) *
                  C110 +
              (((C15917 * C121 + C15913 * C132 + C15918 * C122 +
                 C48194 * C135) *
                    C116 +
                (C15917 * C133 + C15913 * C142 + C15918 * C134 +
                 C48194 * C143) *
                    C47888) *
                   C48095 * C31728 +
               ((C15917 * C421 + C15913 * C436 + C15918 * C667 +
                 C48194 * C668) *
                    C116 +
                (C15917 * C435 + C15913 * C451 + C15918 * C669 +
                 C48194 * C670) *
                    C47888) *
                   C48095 * C48227) *
                  C111) *
             C47906 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C15917 * C117 + C15913 * C124 + C15918 * C118 +
                 C48194 * C125) *
                    C261 +
                (C15917 * C127 + C15913 * C138 + C15918 * C128 +
                 C48194 * C139) *
                    C48246 -
                (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
                (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
                   C48095 * C31728 +
               ((C15917 * C420 + C15913 * C434 + C15918 * C417 +
                 C48194 * C427) *
                    C261 +
                (C15917 * C433 + C15913 * C450 + C15918 * C430 +
                 C48194 * C447) *
                    C48246 -
                (C16775 + C16774) * C262 - (C16777 + C16776) * C48234 +
                (C17209 + C17208) * C263 + (C17211 + C17210) * C48207) *
                   C48095 * C48227) *
                  C258 +
              (((C16122 + C16123) * C262 -
                ((C15918 * C129 + C48194 * C140 + C15917 * C128 +
                  C15913 * C139) *
                     C48246 +
                 (C15918 * C119 + C48194 * C126 + C15917 * C118 +
                  C15913 * C125) *
                     C261) +
                (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
                (C16128 + C16129) * C48207) *
                   C48095 * C31728 +
               ((C16779 + C16778) * C262 -
                ((C15918 * C431 + C48194 * C448 + C15917 * C430 +
                  C15913 * C447) *
                     C48246 +
                 (C15918 * C418 + C48194 * C428 + C15917 * C417 +
                  C15913 * C427) *
                     C261) +
                (C16781 + C16780) * C48234 - (C17565 + C17564) * C263 -
                (C17567 + C17566) * C48207) *
                   C48095 * C48227) *
                  C259 +
              (((C15917 * C119 + C15913 * C126 + C15918 * C120 +
                 C48194 * C131) *
                    C261 +
                (C15917 * C129 + C15913 * C140 + C15918 * C130 +
                 C48194 * C141) *
                    C48246 -
                (C16130 + C16131) * C262 - (C16132 + C16133) * C48234 +
                (C16134 + C16135) * C263 + (C16136 + C16137) * C48207) *
                   C48095 * C31728 +
               ((C15917 * C418 + C15913 * C428 + C15918 * C419 +
                 C48194 * C429) *
                    C261 +
                (C15917 * C431 + C15913 * C448 + C15918 * C432 +
                 C48194 * C449) *
                    C48246 -
                (C16783 + C16782) * C262 - (C16785 + C16784) * C48234 +
                (C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
                 C48194 * C1458) *
                    C263 +
                (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
                 C48194 * C1460) *
                    C48207) *
                   C48095 * C48227) *
                  C48201) *
             C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C258 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C259 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C31728 +
            ((C32079 + C32080) * C116 + (C32081 + C32082) * C47888) * C48095 *
                C48227) *
               C48201) *
              C48247 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C259 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C258 -
           (((C32091 + C32092) * C47888 + (C32093 + C32094) * C116) * C48095 *
                C48227 +
            ((C32082 + C32081) * C47888 + (C32080 + C32079) * C116) * C48095 *
                C31728) *
               C48201) *
              C48236 +
          ((((C32090 + C32089) * C116 + (C32088 + C32087) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
              C48194 * C1871) *
                 C116 +
             (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
              C48194 * C1880) *
                 C47888) *
                C48095 * C48227) *
               C258 -
           (((C15918 * C1867 + C48194 * C1879 + C15917 * C1868 +
              C15913 * C1880) *
                 C47888 +
             (C15918 * C1861 + C48194 * C1870 + C15917 * C1862 +
              C15913 * C1871) *
                 C116) *
                C48095 * C48227 +
            ((C32086 + C32085) * C47888 + (C32084 + C32083) * C116) * C48095 *
                C31728) *
               C259 +
           (((C32094 + C32093) * C116 + (C32092 + C32091) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1861 + C15913 * C1870 + C15918 * C2137 +
              C48194 * C2138) *
                 C116 +
             (C15917 * C1867 + C15913 * C1879 + C15918 * C2139 +
              C48194 * C2140) *
                 C47888) *
                C48095 * C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C32071 + C32072) * C953 + (C32073 + C32074) * C947 -
            (C16775 + C16774) * C954 - (C16777 + C16776) * C948 +
            (C17209 + C17208) * C955 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C48243 +
          (((C16122 + C16123) * C954 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C947 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C953) +
            (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
            (C16128 + C16129) * C48207) *
               C48095 * C31728 +
           ((C16779 + C16778) * C954 -
            ((C32075 + C32076) * C947 + (C32077 + C32078) * C953) +
            (C16781 + C16780) * C948 - (C17565 + C17564) * C955 -
            (C17567 + C17566) * C48207) *
               C48095 * C48227) *
              C48230 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C953 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C947 -
            (C16130 + C16131) * C954 - (C16132 + C16133) * C948 +
            (C16134 + C16135) * C955 + (C16136 + C16137) * C48207) *
               C48095 * C31728 +
           ((C32079 + C32080) * C953 + (C32081 + C32082) * C947 -
            (C16783 + C16782) * C954 - (C16785 + C16784) * C948 +
            (C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
             C48194 * C1458) *
                C955 +
            (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
             C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
               C1024 +
           (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
               C1018 -
           (C16114 + C16115) * C1025 - (C16116 + C16117) * C1019 +
           (C16118 + C16119) * C1026 + (C16120 + C16121) * C1020 -
           (C17030 + C17031) * C1027 - (C17032 + C17033) * C1021 +
           (C17034 + C17035) * C1028 + (C17036 + C17037) * C1022) *
              C48095 * C31728 +
          ((C32071 + C32072) * C1024 + (C32073 + C32074) * C1018 -
           (C16775 + C16774) * C1025 - (C16777 + C16776) * C1019 +
           (C17209 + C17208) * C1026 + (C17211 + C17210) * C1020 -
           (C17707 + C17706) * C1027 - (C17709 + C17708) * C1021 +
           (C15917 * C6401 + C15913 * C6403 + C15918 * C6402 + C48194 * C6404) *
               C1028 +
           (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 + C48194 * C6408) *
               C1022) *
              C48095 * C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C32071 + C32072) * C953 + (C32073 + C32074) * C947 -
            (C16775 + C16774) * C954 - (C16777 + C16776) * C948 +
            (C17209 + C17208) * C955 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C47860 * C48247 +
          (((C16774 + C16775) * C954 -
            ((C32074 + C32073) * C947 + (C32072 + C32071) * C953) +
            (C16776 + C16777) * C948 - (C17208 + C17209) * C955 -
            (C17210 + C17211) * C48207) *
               C48095 * C31728 +
           ((C17213 + C17212) * C954 -
            ((C32087 + C32088) * C947 + (C32089 + C32090) * C953) +
            (C17215 + C17214) * C948 - (C17217 + C17216) * C955 -
            (C17219 + C17218) * C48207) *
               C48095 * C48227) *
              C47860 * C48236 +
          (((C32090 + C32089) * C953 + (C32088 + C32087) * C947 -
            (C17212 + C17213) * C954 - (C17214 + C17215) * C948 +
            (C17216 + C17217) * C955 + (C17218 + C17219) * C48207) *
               C48095 * C31728 +
           ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
             C48194 * C1871) *
                C953 +
            (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
             C48194 * C1880) *
                C947 -
            (C18559 + C18558) * C954 - (C18561 + C18560) * C948 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48194 * C7272) *
                C955 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48194 * C7276) *
                C48207) *
               C48095 * C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C48243 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C48230 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C31728 +
            ((C32079 + C32080) * C116 + (C32081 + C32082) * C47888) * C48095 *
                C48227) *
               C48201) *
              C1681 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C48230 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C48243 -
           (((C32091 + C32092) * C47888 + (C32093 + C32094) * C116) * C48095 *
                C48227 +
            ((C32082 + C32081) * C47888 + (C32080 + C32079) * C116) * C48095 *
                C31728) *
               C48201) *
              C1682 +
          ((((C32090 + C32089) * C116 + (C32088 + C32087) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
              C48194 * C1871) *
                 C116 +
             (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
              C48194 * C1880) *
                 C47888) *
                C48095 * C48227) *
               C48243 -
           (((C15918 * C1867 + C48194 * C1879 + C15917 * C1868 +
              C15913 * C1880) *
                 C47888 +
             (C15918 * C1861 + C48194 * C1870 + C15917 * C1862 +
              C15913 * C1871) *
                 C116) *
                C48095 * C48227 +
            ((C32086 + C32085) * C47888 + (C32084 + C32083) * C116) * C48095 *
                C31728) *
               C48230 +
           (((C32094 + C32093) * C116 + (C32092 + C32091) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1861 + C15913 * C1870 + C15918 * C2137 +
              C48194 * C2138) *
                 C116 +
             (C15917 * C1867 + C15913 * C1879 + C15918 * C2139 +
              C48194 * C2140) *
                 C47888) *
                C48095 * C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C261 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48246 -
            (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
            (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C32071 + C32072) * C261 + (C32073 + C32074) * C48246 -
            (C16775 + C16774) * C262 - (C16777 + C16776) * C48234 +
            (C17209 + C17208) * C263 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C47860 * C1681 +
          (((C16774 + C16775) * C262 -
            ((C32074 + C32073) * C48246 + (C32072 + C32071) * C261) +
            (C16776 + C16777) * C48234 - (C17208 + C17209) * C263 -
            (C17210 + C17211) * C48207) *
               C48095 * C31728 +
           ((C17213 + C17212) * C262 -
            ((C32087 + C32088) * C48246 + (C32089 + C32090) * C261) +
            (C17215 + C17214) * C48234 - (C17217 + C17216) * C263 -
            (C17219 + C17218) * C48207) *
               C48095 * C48227) *
              C47860 * C1682 +
          (((C32090 + C32089) * C261 + (C32088 + C32087) * C48246 -
            (C17212 + C17213) * C262 - (C17214 + C17215) * C48234 +
            (C17216 + C17217) * C263 + (C17218 + C17219) * C48207) *
               C48095 * C31728 +
           ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
             C48194 * C1871) *
                C261 +
            (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
             C48194 * C1880) *
                C48246 -
            (C18559 + C18558) * C262 - (C18561 + C18560) * C48234 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48194 * C7272) *
                C263 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48194 * C7276) *
                C48207) *
               C48095 * C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47888) *
               C48095 * C31728 +
           ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
               C48227) *
              C47860 * C1856 -
          (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
               C48227 +
           ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
               C31728) *
              C47860 * C1857 +
          (((C32090 + C32089) * C116 + (C32088 + C32087) * C47888) * C48095 *
               C31728 +
           ((C33779 + C33780) * C116 + (C33781 + C33782) * C47888) * C48095 *
               C48227) *
              C47860 * C1858 -
          (((C33783 + C33784) * C47888 + (C33785 + C33786) * C116) * C48095 *
               C48227 +
           ((C33782 + C33781) * C47888 + (C33780 + C33779) * C116) * C48095 *
               C31728) *
              C47860 * C1859 +
          (((C33786 + C33785) * C116 + (C33784 + C33783) * C47888) * C48095 *
               C31728 +
           ((C15917 * C12369 + C15913 * C12371 + C15918 * C12370 +
             C48194 * C12372) *
                C116 +
            (C15917 * C12373 + C15913 * C12375 + C15918 * C12374 +
             C48194 * C12376) *
                C47888) *
               C48095 * C48227) *
              C47860 * C1860)) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C953 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C947 -
             (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
             (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
                C48095 * C31728 +
            ((C32071 + C32072) * C953 + (C32073 + C32074) * C947 -
             (C16775 + C16774) * C954 - (C16777 + C16776) * C948 +
             (C17209 + C17208) * C955 + (C17211 + C17210) * C48207) *
                C48095 * C48227) *
               C48161 +
           (((C16122 + C16123) * C954 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C947 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C953) +
             (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
             (C16128 + C16129) * C48207) *
                C48095 * C31728 +
            ((C16779 + C16778) * C954 -
             ((C32075 + C32076) * C947 + (C32077 + C32078) * C953) +
             (C16781 + C16780) * C948 - (C17565 + C17564) * C955 -
             (C17567 + C17566) * C48207) *
                C48095 * C48227) *
               C47870) *
              C48176 +
          ((((C16774 + C16775) * C954 -
             ((C32074 + C32073) * C947 + (C32072 + C32071) * C953) +
             (C16776 + C16777) * C948 - (C17208 + C17209) * C955 -
             (C17210 + C17211) * C48207) *
                C48095 * C31728 +
            ((C17213 + C17212) * C954 -
             ((C32087 + C32088) * C947 + (C32089 + C32090) * C953) +
             (C17215 + C17214) * C948 - (C17217 + C17216) * C955 -
             (C17219 + C17218) * C48207) *
                C48095 * C48227) *
               C48161 +
           (((C32078 + C32077) * C953 + (C32076 + C32075) * C947 -
             (C16778 + C16779) * C954 - (C16780 + C16781) * C948 +
             (C17564 + C17565) * C955 + (C17566 + C17567) * C48207) *
                C48095 * C31728 +
            ((C32083 + C32084) * C953 + (C32085 + C32086) * C947 -
             (C18287 + C18286) * C954 - (C18289 + C18288) * C948 +
             (C15917 * C1170 + C15913 * C1185 + C15918 * C1171 +
              C48194 * C1186) *
                 C955 +
             (C15917 * C1188 + C15913 * C1197 + C15918 * C1189 +
              C48194 * C1198) *
                 C48207) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C557 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C558 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C31728 +
            ((C32079 + C32080) * C116 + (C32081 + C32082) * C47888) * C48095 *
                C48227) *
               C559 -
           (((C32363 + C32364) * C47888 + (C32365 + C32366) * C116) * C48095 *
                C48227 +
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C47888 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C48095 * C31728) *
               C48211) *
              C48176 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C558 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C557 -
           (((C32091 + C32092) * C47888 + (C32093 + C32094) * C116) * C48095 *
                C48227 +
            ((C32082 + C32081) * C47888 + (C32080 + C32079) * C116) * C48095 *
                C31728) *
               C559 +
           (((C32366 + C32365) * C116 + (C32364 + C32363) * C47888) * C48095 *
                C31728 +
            ((C15917 * C425 + C15913 * C444 + C15918 * C426 + C48194 * C445) *
                 C116 +
             (C15917 * C443 + C15913 * C455 + C15918 * C446 + C48194 * C456) *
                 C47888) *
                C48095 * C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C48161 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C47870) *
              C2133 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C47870 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C48161) *
              C2134 +
          ((((C32090 + C32089) * C116 + (C32088 + C32087) * C47888) * C48095 *
                C31728 +
            ((C33779 + C33780) * C116 + (C33781 + C33782) * C47888) * C48095 *
                C48227) *
               C48161 -
           (((C34119 + C34120) * C47888 + (C34121 + C34122) * C116) * C48095 *
                C48227 +
            ((C32086 + C32085) * C47888 + (C32084 + C32083) * C116) * C48095 *
                C31728) *
               C47870) *
              C2135 +
          ((((C34122 + C34121) * C116 + (C34120 + C34119) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1865 + C15913 * C1874 + C15918 * C1866 +
              C48194 * C1875) *
                 C116 +
             (C15917 * C1877 + C15913 * C1883 + C15918 * C1878 +
              C48194 * C1884) *
                 C47888) *
                C48095 * C48227) *
               C47870 -
           (((C33783 + C33784) * C47888 + (C33785 + C33786) * C116) * C48095 *
                C48227 +
            ((C33782 + C33781) * C47888 + (C33780 + C33779) * C116) * C48095 *
                C31728) *
               C48161) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C261 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48246 -
            (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
            (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C15917 * C420 + C15913 * C434 + C15918 * C417 + C48194 * C427) *
                C261 +
            (C15917 * C433 + C15913 * C450 + C15918 * C430 + C48194 * C447) *
                C48246 -
            (C16775 + C16774) * C262 - (C16777 + C16776) * C48234 +
            (C17209 + C17208) * C263 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C258 +
          (((C16122 + C16123) * C262 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48246 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C261) +
            (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
            (C16128 + C16129) * C48207) *
               C48095 * C31728 +
           ((C16779 + C16778) * C262 -
            ((C15918 * C431 + C48194 * C448 + C15917 * C430 + C15913 * C447) *
                 C48246 +
             (C15918 * C418 + C48194 * C428 + C15917 * C417 + C15913 * C427) *
                 C261) +
            (C16781 + C16780) * C48234 - (C17565 + C17564) * C263 -
            (C17567 + C17566) * C48207) *
               C48095 * C48227) *
              C259 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C261 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C48246 -
            (C16130 + C16131) * C262 - (C16132 + C16133) * C48234 +
            (C16134 + C16135) * C263 + (C16136 + C16137) * C48207) *
               C48095 * C31728 +
           ((C15917 * C418 + C15913 * C428 + C15918 * C419 + C48194 * C429) *
                C261 +
            (C15917 * C431 + C15913 * C448 + C15918 * C432 + C48194 * C449) *
                C48246 -
            (C16783 + C16782) * C262 - (C16785 + C16784) * C48234 +
            (C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
             C48194 * C1458) *
                C263 +
            (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
             C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47888) *
               C48095 * C31728 +
           ((C15917 * C420 + C15913 * C434 + C15918 * C417 + C48194 * C427) *
                C116 +
            (C15917 * C433 + C15913 * C450 + C15918 * C430 + C48194 * C447) *
                C47888) *
               C48095 * C48227) *
              C107 -
          (((C15918 * C431 + C48194 * C448 + C15917 * C430 + C15913 * C447) *
                C47888 +
            (C15918 * C418 + C48194 * C428 + C15917 * C417 + C15913 * C427) *
                C116) *
               C48095 * C48227 +
           ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                C47888 +
            (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C48095 * C31728) *
              C108 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C47888) *
               C48095 * C31728 +
           ((C15917 * C418 + C15913 * C428 + C15918 * C419 + C48194 * C429) *
                C116 +
            (C15917 * C431 + C15913 * C448 + C15918 * C432 + C48194 * C449) *
                C47888) *
               C48095 * C48227) *
              C109 -
          (((C15918 * C435 + C48194 * C451 + C15917 * C432 + C15913 * C449) *
                C47888 +
            (C15918 * C421 + C48194 * C436 + C15917 * C419 + C15913 * C429) *
                C116) *
               C48095 * C48227 +
           ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                C47888 +
            (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C48095 * C31728) *
              C110 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48194 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48194 * C143) *
                C47888) *
               C48095 * C31728 +
           ((C15917 * C421 + C15913 * C436 + C15918 * C667 + C48194 * C668) *
                C116 +
            (C15917 * C435 + C15913 * C451 + C15918 * C669 + C48194 * C670) *
                C47888) *
               C48095 * C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C32071 + C32072) * C953 + (C32073 + C32074) * C947 -
            (C16775 + C16774) * C954 - (C16777 + C16776) * C948 +
            (C17209 + C17208) * C955 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C48243 +
          (((C16122 + C16123) * C954 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C947 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C953) +
            (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
            (C16128 + C16129) * C48207) *
               C48095 * C31728 +
           ((C16779 + C16778) * C954 -
            ((C32075 + C32076) * C947 + (C32077 + C32078) * C953) +
            (C16781 + C16780) * C948 - (C17565 + C17564) * C955 -
            (C17567 + C17566) * C48207) *
               C48095 * C48227) *
              C48230 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C953 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C947 -
            (C16130 + C16131) * C954 - (C16132 + C16133) * C948 +
            (C16134 + C16135) * C955 + (C16136 + C16137) * C48207) *
               C48095 * C31728 +
           ((C32079 + C32080) * C953 + (C32081 + C32082) * C947 -
            (C16783 + C16782) * C954 - (C16785 + C16784) * C948 +
            (C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
             C48194 * C1458) *
                C955 +
            (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
             C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
               C1024 +
           (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
               C1018 -
           (C16114 + C16115) * C1025 - (C16116 + C16117) * C1019 +
           (C16118 + C16119) * C1026 + (C16120 + C16121) * C1020 -
           (C17030 + C17031) * C1027 - (C17032 + C17033) * C1021 +
           (C17034 + C17035) * C1028 + (C17036 + C17037) * C1022) *
              C48095 * C31728 +
          ((C32071 + C32072) * C1024 + (C32073 + C32074) * C1018 -
           (C16775 + C16774) * C1025 - (C16777 + C16776) * C1019 +
           (C17209 + C17208) * C1026 + (C17211 + C17210) * C1020 -
           (C17707 + C17706) * C1027 - (C17709 + C17708) * C1021 +
           (C15917 * C6401 + C15913 * C6403 + C15918 * C6402 + C48194 * C6404) *
               C1028 +
           (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 + C48194 * C6408) *
               C1022) *
              C48095 * C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C48243 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C48230 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C31728 +
            ((C32079 + C32080) * C116 + (C32081 + C32082) * C47888) * C48095 *
                C48227) *
               C48201) *
              C1681 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C48230 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C48243 -
           (((C32091 + C32092) * C47888 + (C32093 + C32094) * C116) * C48095 *
                C48227 +
            ((C32082 + C32081) * C47888 + (C32080 + C32079) * C116) * C48095 *
                C31728) *
               C48201) *
              C1682 +
          ((((C32090 + C32089) * C116 + (C32088 + C32087) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
              C48194 * C1871) *
                 C116 +
             (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
              C48194 * C1880) *
                 C47888) *
                C48095 * C48227) *
               C48243 -
           (((C15918 * C1867 + C48194 * C1879 + C15917 * C1868 +
              C15913 * C1880) *
                 C47888 +
             (C15918 * C1861 + C48194 * C1870 + C15917 * C1862 +
              C15913 * C1871) *
                 C116) *
                C48095 * C48227 +
            ((C32086 + C32085) * C47888 + (C32084 + C32083) * C116) * C48095 *
                C31728) *
               C48230 +
           (((C32094 + C32093) * C116 + (C32092 + C32091) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1861 + C15913 * C1870 + C15918 * C2137 +
              C48194 * C2138) *
                 C116 +
             (C15917 * C1867 + C15913 * C1879 + C15918 * C2139 +
              C48194 * C2140) *
                 C47888) *
                C48095 * C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C261 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48246 -
            (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
            (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C32071 + C32072) * C261 + (C32073 + C32074) * C48246 -
            (C16775 + C16774) * C262 - (C16777 + C16776) * C48234 +
            (C17209 + C17208) * C263 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C47860 * C1681 +
          (((C16774 + C16775) * C262 -
            ((C32074 + C32073) * C48246 + (C32072 + C32071) * C261) +
            (C16776 + C16777) * C48234 - (C17208 + C17209) * C263 -
            (C17210 + C17211) * C48207) *
               C48095 * C31728 +
           ((C17213 + C17212) * C262 -
            ((C32087 + C32088) * C48246 + (C32089 + C32090) * C261) +
            (C17215 + C17214) * C48234 - (C17217 + C17216) * C263 -
            (C17219 + C17218) * C48207) *
               C48095 * C48227) *
              C47860 * C1682 +
          (((C32090 + C32089) * C261 + (C32088 + C32087) * C48246 -
            (C17212 + C17213) * C262 - (C17214 + C17215) * C48234 +
            (C17216 + C17217) * C263 + (C17218 + C17219) * C48207) *
               C48095 * C31728 +
           ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
             C48194 * C1871) *
                C261 +
            (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
             C48194 * C1880) *
                C48246 -
            (C18559 + C18558) * C262 - (C18561 + C18560) * C48234 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48194 * C7272) *
                C263 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48194 * C7276) *
                C48207) *
               C48095 * C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C561 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48175 -
             (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
                C48095 * C31728 +
            ((C32071 + C32072) * C561 + (C32073 + C32074) * C48175 -
             (C16775 + C16774) * C562 - (C16777 + C16776) * C47951) *
                C48095 * C48227) *
               C47865 +
           (((C16122 + C16123) * C562 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48175 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C561) +
             (C16124 + C16125) * C47951) *
                C48095 * C31728 +
            ((C16779 + C16778) * C562 -
             ((C32075 + C32076) * C48175 + (C32077 + C32078) * C561) +
             (C16781 + C16780) * C47951) *
                C48095 * C48227) *
               C47873 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C561 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C48175 -
             (C16130 + C16131) * C562 - (C16132 + C16133) * C47951) *
                C48095 * C31728 +
            ((C32079 + C32080) * C561 + (C32081 + C32082) * C48175 -
             (C16783 + C16782) * C562 - (C16785 + C16784) * C47951) *
                C48095 * C48227) *
               C2726) *
              C3120 +
          ((((C16774 + C16775) * C562 -
             ((C32074 + C32073) * C48175 + (C32072 + C32071) * C561) +
             (C16776 + C16777) * C47951) *
                C48095 * C31728 +
            ((C17213 + C17212) * C562 -
             ((C32087 + C32088) * C48175 + (C32089 + C32090) * C561) +
             (C17215 + C17214) * C47951) *
                C48095 * C48227) *
               C47865 +
           (((C32078 + C32077) * C561 + (C32076 + C32075) * C48175 -
             (C16778 + C16779) * C562 - (C16780 + C16781) * C47951) *
                C48095 * C31728 +
            ((C32083 + C32084) * C561 + (C32085 + C32086) * C48175 -
             (C18287 + C18286) * C562 - (C18289 + C18288) * C47951) *
                C48095 * C48227) *
               C47873 +
           (((C16782 + C16783) * C562 -
             ((C32082 + C32081) * C48175 + (C32080 + C32079) * C561) +
             (C16784 + C16785) * C47951) *
                C48095 * C31728 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C562 -
             ((C32091 + C32092) * C48175 + (C32093 + C32094) * C561) +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C2726) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C561 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48175 -
             (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
                C48095 * C31728 +
            ((C32071 + C32072) * C561 + (C32073 + C32074) * C48175 -
             (C16775 + C16774) * C562 - (C16777 + C16776) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C16122 + C16123) * C562 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48175 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C561) +
             (C16124 + C16125) * C47951) *
                C48095 * C31728 +
            ((C16779 + C16778) * C562 -
             ((C32075 + C32076) * C48175 + (C32077 + C32078) * C561) +
             (C16781 + C16780) * C47951) *
                C48095 * C48227) *
               C47870) *
              C47989 +
          ((((C16774 + C16775) * C562 -
             ((C32074 + C32073) * C48175 + (C32072 + C32071) * C561) +
             (C16776 + C16777) * C47951) *
                C48095 * C31728 +
            ((C17213 + C17212) * C562 -
             ((C32087 + C32088) * C48175 + (C32089 + C32090) * C561) +
             (C17215 + C17214) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C32078 + C32077) * C561 + (C32076 + C32075) * C48175 -
             (C16778 + C16779) * C562 - (C16780 + C16781) * C47951) *
                C48095 * C31728 +
            ((C32083 + C32084) * C561 + (C32085 + C32086) * C48175 -
             (C18287 + C18286) * C562 - (C18289 + C18288) * C47951) *
                C48095 * C48227) *
               C47870) *
              C47996 +
          ((((C32090 + C32089) * C561 + (C32088 + C32087) * C48175 -
             (C17212 + C17213) * C562 - (C17214 + C17215) * C47951) *
                C48095 * C31728 +
            ((C33779 + C33780) * C561 + (C33781 + C33782) * C48175 -
             (C18559 + C18558) * C562 - (C18561 + C18560) * C47951) *
                C48095 * C48227) *
               C2459 +
           (((C18286 + C18287) * C562 -
             ((C32086 + C32085) * C48175 + (C32084 + C32083) * C561) +
             (C18288 + C18289) * C47951) *
                C48095 * C31728 +
            ((C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48194 * C2244) *
                 C562 -
             ((C34119 + C34120) * C48175 + (C34121 + C34122) * C561) +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48194 * C2250) *
                 C47951) *
                C48095 * C48227) *
               C47870) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C261 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48246 -
             (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
             (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
                C48095 * C31728 +
            ((C32071 + C32072) * C261 + (C32073 + C32074) * C48246 -
             (C16775 + C16774) * C262 - (C16777 + C16776) * C48234 +
             (C17209 + C17208) * C263 + (C17211 + C17210) * C48207) *
                C48095 * C48227) *
               C2459 +
           (((C16122 + C16123) * C262 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48246 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C261) +
             (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
             (C16128 + C16129) * C48207) *
                C48095 * C31728 +
            ((C16779 + C16778) * C262 -
             ((C32075 + C32076) * C48246 + (C32077 + C32078) * C261) +
             (C16781 + C16780) * C48234 - (C17565 + C17564) * C263 -
             (C17567 + C17566) * C48207) *
                C48095 * C48227) *
               C47870) *
              C3120 +
          ((((C16774 + C16775) * C262 -
             ((C32074 + C32073) * C48246 + (C32072 + C32071) * C261) +
             (C16776 + C16777) * C48234 - (C17208 + C17209) * C263 -
             (C17210 + C17211) * C48207) *
                C48095 * C31728 +
            ((C17213 + C17212) * C262 -
             ((C32087 + C32088) * C48246 + (C32089 + C32090) * C261) +
             (C17215 + C17214) * C48234 - (C17217 + C17216) * C263 -
             (C17219 + C17218) * C48207) *
                C48095 * C48227) *
               C2459 +
           (((C32078 + C32077) * C261 + (C32076 + C32075) * C48246 -
             (C16778 + C16779) * C262 - (C16780 + C16781) * C48234 +
             (C17564 + C17565) * C263 + (C17566 + C17567) * C48207) *
                C48095 * C31728 +
            ((C32083 + C32084) * C261 + (C32085 + C32086) * C48246 -
             (C18287 + C18286) * C262 - (C18289 + C18288) * C48234 +
             (C15917 * C1170 + C15913 * C1185 + C15918 * C1171 +
              C48194 * C1186) *
                 C263 +
             (C15917 * C1188 + C15913 * C1197 + C15918 * C1189 +
              C48194 * C1198) *
                 C48207) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C48252 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C48245 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C31728 +
            ((C32079 + C32080) * C116 + (C32081 + C32082) * C47888) * C48095 *
                C48227) *
               C48232 -
           (((C32363 + C32364) * C47888 + (C32365 + C32366) * C116) * C48095 *
                C48227 +
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C47888 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C48095 * C31728) *
               C48211) *
              C3120 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C48245 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C48252 -
           (((C32091 + C32092) * C47888 + (C32093 + C32094) * C116) * C48095 *
                C48227 +
            ((C32082 + C32081) * C47888 + (C32080 + C32079) * C116) * C48095 *
                C31728) *
               C48232 +
           (((C32366 + C32365) * C116 + (C32364 + C32363) * C47888) * C48095 *
                C31728 +
            ((C15917 * C425 + C15913 * C444 + C15918 * C426 + C48194 * C445) *
                 C116 +
             (C15917 * C443 + C15913 * C455 + C15918 * C446 + C48194 * C456) *
                 C47888) *
                C48095 * C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C2459 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C47870) *
              C48254 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C47870 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C2459) *
              C48251 +
          ((((C32090 + C32089) * C116 + (C32088 + C32087) * C47888) * C48095 *
                C31728 +
            ((C33779 + C33780) * C116 + (C33781 + C33782) * C47888) * C48095 *
                C48227) *
               C2459 -
           (((C34119 + C34120) * C47888 + (C34121 + C34122) * C116) * C48095 *
                C48227 +
            ((C32086 + C32085) * C47888 + (C32084 + C32083) * C116) * C48095 *
                C31728) *
               C47870) *
              C48242 +
          ((((C34122 + C34121) * C116 + (C34120 + C34119) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1865 + C15913 * C1874 + C15918 * C1866 +
              C48194 * C1875) *
                 C116 +
             (C15917 * C1877 + C15913 * C1883 + C15918 * C1878 +
              C48194 * C1884) *
                 C47888) *
                C48095 * C48227) *
               C47870 -
           (((C33783 + C33784) * C47888 + (C33785 + C33786) * C116) * C48095 *
                C48227 +
            ((C33782 + C33781) * C47888 + (C33780 + C33779) * C116) * C48095 *
                C31728) *
               C2459) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C47865 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C47873 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C31728 +
            ((C32079 + C32080) * C116 + (C32081 + C32082) * C47888) * C48095 *
                C48227) *
               C2726) *
              C47989 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C47873 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C47865 -
           (((C32091 + C32092) * C47888 + (C32093 + C32094) * C116) * C48095 *
                C48227 +
            ((C32082 + C32081) * C47888 + (C32080 + C32079) * C116) * C48095 *
                C31728) *
               C2726) *
              C47996 +
          ((((C32090 + C32089) * C116 + (C32088 + C32087) * C47888) * C48095 *
                C31728 +
            ((C33779 + C33780) * C116 + (C33781 + C33782) * C47888) * C48095 *
                C48227) *
               C47865 -
           (((C34119 + C34120) * C47888 + (C34121 + C34122) * C116) * C48095 *
                C48227 +
            ((C32086 + C32085) * C47888 + (C32084 + C32083) * C116) * C48095 *
                C31728) *
               C47873 +
           (((C32094 + C32093) * C116 + (C32092 + C32091) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1861 + C15913 * C1870 + C15918 * C2137 +
              C48194 * C2138) *
                 C116 +
             (C15917 * C1867 + C15913 * C1879 + C15918 * C2139 +
              C48194 * C2140) *
                 C47888) *
                C48095 * C48227) *
               C2726) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C48252 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C48245 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C31728 +
            ((C32079 + C32080) * C116 + (C32081 + C32082) * C47888) * C48095 *
                C48227) *
               C48232 -
           (((C32363 + C32364) * C47888 + (C32365 + C32366) * C116) * C48095 *
                C48227 +
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C47888 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C48095 * C31728) *
               C48211) *
              C3120 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C48245 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C48252 -
           (((C32091 + C32092) * C47888 + (C32093 + C32094) * C116) * C48095 *
                C48227 +
            ((C32082 + C32081) * C47888 + (C32080 + C32079) * C116) * C48095 *
                C31728) *
               C48232 +
           (((C32366 + C32365) * C116 + (C32364 + C32363) * C47888) * C48095 *
                C31728 +
            ((C15917 * C425 + C15913 * C444 + C15918 * C426 + C48194 * C445) *
                 C116 +
             (C15917 * C443 + C15913 * C455 + C15918 * C446 + C48194 * C456) *
                 C47888) *
                C48095 * C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C261 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48246 -
             (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
             (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
                C48095 * C31728 +
            ((C32071 + C32072) * C261 + (C32073 + C32074) * C48246 -
             (C16775 + C16774) * C262 - (C16777 + C16776) * C48234 +
             (C17209 + C17208) * C263 + (C17211 + C17210) * C48207) *
                C48095 * C48227) *
               C2459 +
           (((C16122 + C16123) * C262 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48246 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C261) +
             (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
             (C16128 + C16129) * C48207) *
                C48095 * C31728 +
            ((C16779 + C16778) * C262 -
             ((C32075 + C32076) * C48246 + (C32077 + C32078) * C261) +
             (C16781 + C16780) * C48234 - (C17565 + C17564) * C263 -
             (C17567 + C17566) * C48207) *
                C48095 * C48227) *
               C47870) *
              C3120 +
          ((((C16774 + C16775) * C262 -
             ((C32074 + C32073) * C48246 + (C32072 + C32071) * C261) +
             (C16776 + C16777) * C48234 - (C17208 + C17209) * C263 -
             (C17210 + C17211) * C48207) *
                C48095 * C31728 +
            ((C17213 + C17212) * C262 -
             ((C32087 + C32088) * C48246 + (C32089 + C32090) * C261) +
             (C17215 + C17214) * C48234 - (C17217 + C17216) * C263 -
             (C17219 + C17218) * C48207) *
                C48095 * C48227) *
               C2459 +
           (((C32078 + C32077) * C261 + (C32076 + C32075) * C48246 -
             (C16778 + C16779) * C262 - (C16780 + C16781) * C48234 +
             (C17564 + C17565) * C263 + (C17566 + C17567) * C48207) *
                C48095 * C31728 +
            ((C32083 + C32084) * C261 + (C32085 + C32086) * C48246 -
             (C18287 + C18286) * C262 - (C18289 + C18288) * C48234 +
             (C15917 * C1170 + C15913 * C1185 + C15918 * C1171 +
              C48194 * C1186) *
                 C263 +
             (C15917 * C1188 + C15913 * C1197 + C15918 * C1189 +
              C48194 * C1198) *
                 C48207) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C561 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48175 -
            (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
               C48095 * C31728 +
           ((C32071 + C32072) * C561 + (C32073 + C32074) * C48175 -
            (C16775 + C16774) * C562 - (C16777 + C16776) * C47951) *
               C48095 * C48227) *
              C557 +
          (((C16122 + C16123) * C562 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48175 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C561) +
            (C16124 + C16125) * C47951) *
               C48095 * C31728 +
           ((C16779 + C16778) * C562 -
            ((C32075 + C32076) * C48175 + (C32077 + C32078) * C561) +
            (C16781 + C16780) * C47951) *
               C48095 * C48227) *
              C558 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C561 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C48175 -
            (C16130 + C16131) * C562 - (C16132 + C16133) * C47951) *
               C48095 * C31728 +
           ((C32079 + C32080) * C561 + (C32081 + C32082) * C48175 -
            (C16783 + C16782) * C562 - (C16785 + C16784) * C47951) *
               C48095 * C48227) *
              C559 +
          (((C16422 + C16423) * C562 -
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C48175 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C561) +
            (C16424 + C16425) * C47951) *
               C48095 * C31728 +
           ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48194 * C830) *
                C562 -
            ((C15918 * C435 + C48194 * C451 + C15917 * C432 + C15913 * C449) *
                 C48175 +
             (C15918 * C421 + C48194 * C436 + C15917 * C419 + C15913 * C429) *
                 C561) +
            (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48194 * C836) *
                C47951) *
               C48095 * C48227) *
              C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C1303 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C1297 -
            (C16114 + C16115) * C1304 - (C16116 + C16117) * C1298 +
            (C16118 + C16119) * C1305 + (C16120 + C16121) * C1299 -
            (C17030 + C17031) * C1306 - (C17032 + C17033) * C48217) *
               C48095 * C31728 +
           ((C32071 + C32072) * C1303 + (C32073 + C32074) * C1297 -
            (C16775 + C16774) * C1304 - (C16777 + C16776) * C1298 +
            (C17209 + C17208) * C1305 + (C17211 + C17210) * C1299 -
            (C17707 + C17706) * C1306 - (C17709 + C17708) * C48217) *
               C48095 * C48227) *
              C48161 +
          (((C16122 + C16123) * C1304 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C1297 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C1303) +
            (C16124 + C16125) * C1298 - (C16126 + C16127) * C1305 -
            (C16128 + C16129) * C1299 + (C17358 + C17359) * C1306 +
            (C17360 + C17361) * C48217) *
               C48095 * C31728 +
           ((C16779 + C16778) * C1304 -
            ((C32075 + C32076) * C1297 + (C32077 + C32078) * C1303) +
            (C16781 + C16780) * C1298 - (C17565 + C17564) * C1305 -
            (C17567 + C17566) * C1299 +
            (C15917 * C1560 + C15913 * C1563 + C15918 * C1561 +
             C48194 * C1564) *
                C1306 +
            (C15917 * C1566 + C15913 * C1569 + C15918 * C1567 +
             C48194 * C1570) *
                C48217) *
               C48095 * C48227) *
              C47870) *
         C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C561 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C48175 -
             (C16114 + C16115) * C562 - (C16116 + C16117) * C47951) *
                C48095 * C31728 +
            ((C32071 + C32072) * C561 + (C32073 + C32074) * C48175 -
             (C16775 + C16774) * C562 - (C16777 + C16776) * C47951) *
                C48095 * C48227) *
               C258 +
           (((C16122 + C16123) * C562 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C48175 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C561) +
             (C16124 + C16125) * C47951) *
                C48095 * C31728 +
            ((C16779 + C16778) * C562 -
             ((C32075 + C32076) * C48175 + (C32077 + C32078) * C561) +
             (C16781 + C16780) * C47951) *
                C48095 * C48227) *
               C259 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C561 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C48175 -
             (C16130 + C16131) * C562 - (C16132 + C16133) * C47951) *
                C48095 * C31728 +
            ((C32079 + C32080) * C561 + (C32081 + C32082) * C48175 -
             (C16783 + C16782) * C562 - (C16785 + C16784) * C47951) *
                C48095 * C48227) *
               C48201) *
              C48176 +
          ((((C16774 + C16775) * C562 -
             ((C32074 + C32073) * C48175 + (C32072 + C32071) * C561) +
             (C16776 + C16777) * C47951) *
                C48095 * C31728 +
            ((C17213 + C17212) * C562 -
             ((C32087 + C32088) * C48175 + (C32089 + C32090) * C561) +
             (C17215 + C17214) * C47951) *
                C48095 * C48227) *
               C258 +
           (((C32078 + C32077) * C561 + (C32076 + C32075) * C48175 -
             (C16778 + C16779) * C562 - (C16780 + C16781) * C47951) *
                C48095 * C31728 +
            ((C32083 + C32084) * C561 + (C32085 + C32086) * C48175 -
             (C18287 + C18286) * C562 - (C18289 + C18288) * C47951) *
                C48095 * C48227) *
               C259 +
           (((C16782 + C16783) * C562 -
             ((C32082 + C32081) * C48175 + (C32080 + C32079) * C561) +
             (C16784 + C16785) * C47951) *
                C48095 * C31728 +
            ((C15917 * C1166 + C15913 * C1178 + C15918 * C2031 +
              C48194 * C2032) *
                 C562 -
             ((C32091 + C32092) * C48175 + (C32093 + C32094) * C561) +
             (C15917 * C1181 + C15913 * C1193 + C15918 * C2033 +
              C48194 * C2034) *
                 C47951) *
                C48095 * C48227) *
               C48201) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C1303 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C1297 -
            (C16114 + C16115) * C1304 - (C16116 + C16117) * C1298 +
            (C16118 + C16119) * C1305 + (C16120 + C16121) * C1299 -
            (C17030 + C17031) * C1306 - (C17032 + C17033) * C48217) *
               C48095 * C31728 +
           ((C32071 + C32072) * C1303 + (C32073 + C32074) * C1297 -
            (C16775 + C16774) * C1304 - (C16777 + C16776) * C1298 +
            (C17209 + C17208) * C1305 + (C17211 + C17210) * C1299 -
            (C17707 + C17706) * C1306 - (C17709 + C17708) * C48217) *
               C48095 * C48227) *
              C47860 * C48176 +
          (((C16774 + C16775) * C1304 -
            ((C32074 + C32073) * C1297 + (C32072 + C32071) * C1303) +
            (C16776 + C16777) * C1298 - (C17208 + C17209) * C1305 -
            (C17210 + C17211) * C1299 + (C17706 + C17707) * C1306 +
            (C17708 + C17709) * C48217) *
               C48095 * C31728 +
           ((C17213 + C17212) * C1304 -
            ((C32087 + C32088) * C1297 + (C32089 + C32090) * C1303) +
            (C17215 + C17214) * C1298 - (C17217 + C17216) * C1305 -
            (C17219 + C17218) * C1299 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48194 * C5882) *
                C1306 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48194 * C5886) *
                C48217) *
               C48095 * C48227) *
              C47860 * C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C261 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48246 -
            (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
            (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C15917 * C420 + C15913 * C434 + C15918 * C417 + C48194 * C427) *
                C261 +
            (C15917 * C433 + C15913 * C450 + C15918 * C430 + C48194 * C447) *
                C48246 -
            (C16775 + C16774) * C262 - (C16777 + C16776) * C48234 +
            (C17209 + C17208) * C263 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C258 +
          (((C16122 + C16123) * C262 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48246 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C261) +
            (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
            (C16128 + C16129) * C48207) *
               C48095 * C31728 +
           ((C16779 + C16778) * C262 -
            ((C15918 * C431 + C48194 * C448 + C15917 * C430 + C15913 * C447) *
                 C48246 +
             (C15918 * C418 + C48194 * C428 + C15917 * C417 + C15913 * C427) *
                 C261) +
            (C16781 + C16780) * C48234 - (C17565 + C17564) * C263 -
            (C17567 + C17566) * C48207) *
               C48095 * C48227) *
              C259 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C261 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C48246 -
            (C16130 + C16131) * C262 - (C16132 + C16133) * C48234 +
            (C16134 + C16135) * C263 + (C16136 + C16137) * C48207) *
               C48095 * C31728 +
           ((C15917 * C418 + C15913 * C428 + C15918 * C419 + C48194 * C429) *
                C261 +
            (C15917 * C431 + C15913 * C448 + C15918 * C432 + C48194 * C449) *
                C48246 -
            (C16783 + C16782) * C262 - (C16785 + C16784) * C48234 +
            (C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
             C48194 * C1458) *
                C263 +
            (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
             C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47888) *
               C48095 * C31728 +
           ((C15917 * C420 + C15913 * C434 + C15918 * C417 + C48194 * C427) *
                C116 +
            (C15917 * C433 + C15913 * C450 + C15918 * C430 + C48194 * C447) *
                C47888) *
               C48095 * C48227) *
              C107 -
          (((C15918 * C431 + C48194 * C448 + C15917 * C430 + C15913 * C447) *
                C47888 +
            (C15918 * C418 + C48194 * C428 + C15917 * C417 + C15913 * C427) *
                C116) *
               C48095 * C48227 +
           ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                C47888 +
            (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C48095 * C31728) *
              C108 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C47888) *
               C48095 * C31728 +
           ((C15917 * C418 + C15913 * C428 + C15918 * C419 + C48194 * C429) *
                C116 +
            (C15917 * C431 + C15913 * C448 + C15918 * C432 + C48194 * C449) *
                C47888) *
               C48095 * C48227) *
              C109 -
          (((C15918 * C435 + C48194 * C451 + C15917 * C432 + C15913 * C449) *
                C47888 +
            (C15918 * C421 + C48194 * C436 + C15917 * C419 + C15913 * C429) *
                C116) *
               C48095 * C48227 +
           ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                C47888 +
            (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C48095 * C31728) *
              C110 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48194 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48194 * C143) *
                C47888) *
               C48095 * C31728 +
           ((C15917 * C421 + C15913 * C436 + C15918 * C667 + C48194 * C668) *
                C116 +
            (C15917 * C435 + C15913 * C451 + C15918 * C669 + C48194 * C670) *
                C47888) *
               C48095 * C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C258 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C259 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C31728 +
            ((C32079 + C32080) * C116 + (C32081 + C32082) * C47888) * C48095 *
                C48227) *
               C48201) *
              C48247 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C259 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C258 -
           (((C32091 + C32092) * C47888 + (C32093 + C32094) * C116) * C48095 *
                C48227 +
            ((C32082 + C32081) * C47888 + (C32080 + C32079) * C116) * C48095 *
                C31728) *
               C48201) *
              C48236 +
          ((((C32090 + C32089) * C116 + (C32088 + C32087) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
              C48194 * C1871) *
                 C116 +
             (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
              C48194 * C1880) *
                 C47888) *
                C48095 * C48227) *
               C258 -
           (((C15918 * C1867 + C48194 * C1879 + C15917 * C1868 +
              C15913 * C1880) *
                 C47888 +
             (C15918 * C1861 + C48194 * C1870 + C15917 * C1862 +
              C15913 * C1871) *
                 C116) *
                C48095 * C48227 +
            ((C32086 + C32085) * C47888 + (C32084 + C32083) * C116) * C48095 *
                C31728) *
               C259 +
           (((C32094 + C32093) * C116 + (C32092 + C32091) * C47888) * C48095 *
                C31728 +
            ((C15917 * C1861 + C15913 * C1870 + C15918 * C2137 +
              C48194 * C2138) *
                 C116 +
             (C15917 * C1867 + C15913 * C1879 + C15918 * C2139 +
              C48194 * C2140) *
                 C47888) *
                C48095 * C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C32071 + C32072) * C953 + (C32073 + C32074) * C947 -
            (C16775 + C16774) * C954 - (C16777 + C16776) * C948 +
            (C17209 + C17208) * C955 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C48243 +
          (((C16122 + C16123) * C954 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C947 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C953) +
            (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
            (C16128 + C16129) * C48207) *
               C48095 * C31728 +
           ((C16779 + C16778) * C954 -
            ((C32075 + C32076) * C947 + (C32077 + C32078) * C953) +
            (C16781 + C16780) * C948 - (C17565 + C17564) * C955 -
            (C17567 + C17566) * C48207) *
               C48095 * C48227) *
              C48230 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C953 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C947 -
            (C16130 + C16131) * C954 - (C16132 + C16133) * C948 +
            (C16134 + C16135) * C955 + (C16136 + C16137) * C48207) *
               C48095 * C31728 +
           ((C32079 + C32080) * C953 + (C32081 + C32082) * C947 -
            (C16783 + C16782) * C954 - (C16785 + C16784) * C948 +
            (C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
             C48194 * C1458) *
                C955 +
            (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
             C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
               C1024 +
           (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
               C1018 -
           (C16114 + C16115) * C1025 - (C16116 + C16117) * C1019 +
           (C16118 + C16119) * C1026 + (C16120 + C16121) * C1020 -
           (C17030 + C17031) * C1027 - (C17032 + C17033) * C1021 +
           (C17034 + C17035) * C1028 + (C17036 + C17037) * C1022) *
              C48095 * C31728 +
          ((C32071 + C32072) * C1024 + (C32073 + C32074) * C1018 -
           (C16775 + C16774) * C1025 - (C16777 + C16776) * C1019 +
           (C17209 + C17208) * C1026 + (C17211 + C17210) * C1020 -
           (C17707 + C17706) * C1027 - (C17709 + C17708) * C1021 +
           (C15917 * C6401 + C15913 * C6403 + C15918 * C6402 + C48194 * C6404) *
               C1028 +
           (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 + C48194 * C6408) *
               C1022) *
              C48095 * C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C32071 + C32072) * C953 + (C32073 + C32074) * C947 -
            (C16775 + C16774) * C954 - (C16777 + C16776) * C948 +
            (C17209 + C17208) * C955 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C47860 * C48247 +
          (((C16774 + C16775) * C954 -
            ((C32074 + C32073) * C947 + (C32072 + C32071) * C953) +
            (C16776 + C16777) * C948 - (C17208 + C17209) * C955 -
            (C17210 + C17211) * C48207) *
               C48095 * C31728 +
           ((C17213 + C17212) * C954 -
            ((C32087 + C32088) * C947 + (C32089 + C32090) * C953) +
            (C17215 + C17214) * C948 - (C17217 + C17216) * C955 -
            (C17219 + C17218) * C48207) *
               C48095 * C48227) *
              C47860 * C48236 +
          (((C32090 + C32089) * C953 + (C32088 + C32087) * C947 -
            (C17212 + C17213) * C954 - (C17214 + C17215) * C948 +
            (C17216 + C17217) * C955 + (C17218 + C17219) * C48207) *
               C48095 * C31728 +
           ((C15917 * C1863 + C15913 * C1872 + C15918 * C1862 +
             C48194 * C1871) *
                C953 +
            (C15917 * C1869 + C15913 * C1881 + C15918 * C1868 +
             C48194 * C1880) *
                C947 -
            (C18559 + C18558) * C954 - (C18561 + C18560) * C948 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48194 * C7272) *
                C955 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48194 * C7276) *
                C48207) *
               C48095 * C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C47888) *
                C48095 * C31728 +
            ((C32071 + C32072) * C116 + (C32073 + C32074) * C47888) * C48095 *
                C48227) *
               C557 -
           (((C32075 + C32076) * C47888 + (C32077 + C32078) * C116) * C48095 *
                C48227 +
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C47888 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48095 * C31728) *
               C558 +
           (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                 C47888) *
                C48095 * C31728 +
            ((C32079 + C32080) * C116 + (C32081 + C32082) * C47888) * C48095 *
                C48227) *
               C559 -
           (((C32363 + C32364) * C47888 + (C32365 + C32366) * C116) * C48095 *
                C48227 +
            ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                 C47888 +
             (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C48095 * C31728) *
               C48211) *
              C48176 +
          ((((C32078 + C32077) * C116 + (C32076 + C32075) * C47888) * C48095 *
                C31728 +
            ((C32083 + C32084) * C116 + (C32085 + C32086) * C47888) * C48095 *
                C48227) *
               C558 -
           (((C32087 + C32088) * C47888 + (C32089 + C32090) * C116) * C48095 *
                C48227 +
            ((C32074 + C32073) * C47888 + (C32072 + C32071) * C116) * C48095 *
                C31728) *
               C557 -
           (((C32091 + C32092) * C47888 + (C32093 + C32094) * C116) * C48095 *
                C48227 +
            ((C32082 + C32081) * C47888 + (C32080 + C32079) * C116) * C48095 *
                C31728) *
               C559 +
           (((C32366 + C32365) * C116 + (C32364 + C32363) * C47888) * C48095 *
                C31728 +
            ((C15917 * C425 + C15913 * C444 + C15918 * C426 + C48194 * C445) *
                 C116 +
             (C15917 * C443 + C15913 * C455 + C15918 * C446 + C48194 * C456) *
                 C47888) *
                C48095 * C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                 C953 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                 C947 -
             (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
             (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
                C48095 * C31728 +
            ((C32071 + C32072) * C953 + (C32073 + C32074) * C947 -
             (C16775 + C16774) * C954 - (C16777 + C16776) * C948 +
             (C17209 + C17208) * C955 + (C17211 + C17210) * C48207) *
                C48095 * C48227) *
               C48161 +
           (((C16122 + C16123) * C954 -
             ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                  C947 +
              (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                  C953) +
             (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
             (C16128 + C16129) * C48207) *
                C48095 * C31728 +
            ((C16779 + C16778) * C954 -
             ((C32075 + C32076) * C947 + (C32077 + C32078) * C953) +
             (C16781 + C16780) * C948 - (C17565 + C17564) * C955 -
             (C17567 + C17566) * C48207) *
                C48095 * C48227) *
               C47870) *
              C48176 +
          ((((C16774 + C16775) * C954 -
             ((C32074 + C32073) * C947 + (C32072 + C32071) * C953) +
             (C16776 + C16777) * C948 - (C17208 + C17209) * C955 -
             (C17210 + C17211) * C48207) *
                C48095 * C31728 +
            ((C17213 + C17212) * C954 -
             ((C32087 + C32088) * C947 + (C32089 + C32090) * C953) +
             (C17215 + C17214) * C948 - (C17217 + C17216) * C955 -
             (C17219 + C17218) * C48207) *
                C48095 * C48227) *
               C48161 +
           (((C32078 + C32077) * C953 + (C32076 + C32075) * C947 -
             (C16778 + C16779) * C954 - (C16780 + C16781) * C948 +
             (C17564 + C17565) * C955 + (C17566 + C17567) * C48207) *
                C48095 * C31728 +
            ((C32083 + C32084) * C953 + (C32085 + C32086) * C947 -
             (C18287 + C18286) * C954 - (C18289 + C18288) * C948 +
             (C15917 * C1170 + C15913 * C1185 + C15918 * C1171 +
              C48194 * C1186) *
                 C955 +
             (C15917 * C1188 + C15913 * C1197 + C15918 * C1189 +
              C48194 * C1198) *
                 C48207) *
                C48095 * C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C47888) *
               C48095 * C31728 +
           ((C15917 * C420 + C15913 * C434 + C15918 * C417 + C48194 * C427) *
                C116 +
            (C15917 * C433 + C15913 * C450 + C15918 * C430 + C48194 * C447) *
                C47888) *
               C48095 * C48227) *
              C107 -
          (((C15918 * C431 + C48194 * C448 + C15917 * C430 + C15913 * C447) *
                C47888 +
            (C15918 * C418 + C48194 * C428 + C15917 * C417 + C15913 * C427) *
                C116) *
               C48095 * C48227 +
           ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                C47888 +
            (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C48095 * C31728) *
              C108 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C47888) *
               C48095 * C31728 +
           ((C15917 * C418 + C15913 * C428 + C15918 * C419 + C48194 * C429) *
                C116 +
            (C15917 * C431 + C15913 * C448 + C15918 * C432 + C48194 * C449) *
                C47888) *
               C48095 * C48227) *
              C109 -
          (((C15918 * C435 + C48194 * C451 + C15917 * C432 + C15913 * C449) *
                C47888 +
            (C15918 * C421 + C48194 * C436 + C15917 * C419 + C15913 * C429) *
                C116) *
               C48095 * C48227 +
           ((C15918 * C133 + C48194 * C142 + C15917 * C130 + C15913 * C141) *
                C47888 +
            (C15918 * C121 + C48194 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C48095 * C31728) *
              C110 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48194 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48194 * C143) *
                C47888) *
               C48095 * C31728 +
           ((C15917 * C421 + C15913 * C436 + C15918 * C667 + C48194 * C668) *
                C116 +
            (C15917 * C435 + C15913 * C451 + C15918 * C669 + C48194 * C670) *
                C47888) *
               C48095 * C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C261 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C48246 -
            (C16114 + C16115) * C262 - (C16116 + C16117) * C48234 +
            (C16118 + C16119) * C263 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C15917 * C420 + C15913 * C434 + C15918 * C417 + C48194 * C427) *
                C261 +
            (C15917 * C433 + C15913 * C450 + C15918 * C430 + C48194 * C447) *
                C48246 -
            (C16775 + C16774) * C262 - (C16777 + C16776) * C48234 +
            (C17209 + C17208) * C263 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C258 +
          (((C16122 + C16123) * C262 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C48246 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C261) +
            (C16124 + C16125) * C48234 - (C16126 + C16127) * C263 -
            (C16128 + C16129) * C48207) *
               C48095 * C31728 +
           ((C16779 + C16778) * C262 -
            ((C15918 * C431 + C48194 * C448 + C15917 * C430 + C15913 * C447) *
                 C48246 +
             (C15918 * C418 + C48194 * C428 + C15917 * C417 + C15913 * C427) *
                 C261) +
            (C16781 + C16780) * C48234 - (C17565 + C17564) * C263 -
            (C17567 + C17566) * C48207) *
               C48095 * C48227) *
              C259 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C261 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C48246 -
            (C16130 + C16131) * C262 - (C16132 + C16133) * C48234 +
            (C16134 + C16135) * C263 + (C16136 + C16137) * C48207) *
               C48095 * C31728 +
           ((C15917 * C418 + C15913 * C428 + C15918 * C419 + C48194 * C429) *
                C261 +
            (C15917 * C431 + C15913 * C448 + C15918 * C432 + C48194 * C449) *
                C48246 -
            (C16783 + C16782) * C262 - (C16785 + C16784) * C48234 +
            (C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
             C48194 * C1458) *
                C263 +
            (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
             C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
                C953 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
                C947 -
            (C16114 + C16115) * C954 - (C16116 + C16117) * C948 +
            (C16118 + C16119) * C955 + (C16120 + C16121) * C48207) *
               C48095 * C31728 +
           ((C32071 + C32072) * C953 + (C32073 + C32074) * C947 -
            (C16775 + C16774) * C954 - (C16777 + C16776) * C948 +
            (C17209 + C17208) * C955 + (C17211 + C17210) * C48207) *
               C48095 * C48227) *
              C48243 +
          (((C16122 + C16123) * C954 -
            ((C15918 * C129 + C48194 * C140 + C15917 * C128 + C15913 * C139) *
                 C947 +
             (C15918 * C119 + C48194 * C126 + C15917 * C118 + C15913 * C125) *
                 C953) +
            (C16124 + C16125) * C948 - (C16126 + C16127) * C955 -
            (C16128 + C16129) * C48207) *
               C48095 * C31728 +
           ((C16779 + C16778) * C954 -
            ((C32075 + C32076) * C947 + (C32077 + C32078) * C953) +
            (C16781 + C16780) * C948 - (C17565 + C17564) * C955 -
            (C17567 + C17566) * C48207) *
               C48095 * C48227) *
              C48230 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48194 * C131) *
                C953 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48194 * C141) *
                C947 -
            (C16130 + C16131) * C954 - (C16132 + C16133) * C948 +
            (C16134 + C16135) * C955 + (C16136 + C16137) * C48207) *
               C48095 * C31728 +
           ((C32079 + C32080) * C953 + (C32081 + C32082) * C947 -
            (C16783 + C16782) * C954 - (C16785 + C16784) * C948 +
            (C15917 * C1163 + C15913 * C1172 + C15918 * C1457 +
             C48194 * C1458) *
                C955 +
            (C15917 * C1175 + C15913 * C1190 + C15918 * C1459 +
             C48194 * C1460) *
                C48207) *
               C48095 * C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48194 * C125) *
               C1024 +
           (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48194 * C139) *
               C1018 -
           (C16114 + C16115) * C1025 - (C16116 + C16117) * C1019 +
           (C16118 + C16119) * C1026 + (C16120 + C16121) * C1020 -
           (C17030 + C17031) * C1027 - (C17032 + C17033) * C1021 +
           (C17034 + C17035) * C1028 + (C17036 + C17037) * C1022) *
              C48095 * C31728 +
          ((C32071 + C32072) * C1024 + (C32073 + C32074) * C1018 -
           (C16775 + C16774) * C1025 - (C16777 + C16776) * C1019 +
           (C17209 + C17208) * C1026 + (C17211 + C17210) * C1020 -
           (C17707 + C17706) * C1027 - (C17709 + C17708) * C1021 +
           (C15917 * C6401 + C15913 * C6403 + C15918 * C6402 + C48194 * C6404) *
               C1028 +
           (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 + C48194 * C6408) *
               C1022) *
              C48095 * C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C47047 +
             (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
             C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                C4603 +
            (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
             C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
                C48225) *
               C31728 +
           ((C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C4603 +
            (C29605 + C29606 - C29607 - C29608 + C29609 + C29610) * C48225) *
               C48227) *
              C47865 +
          (((C21745 * C47039 -
             ((C21591 * C128 + C47839 * C139) * C47947 +
              (C21591 * C118 + C47839 * C125) * C47047) +
             C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
                C4603 +
            (C21747 * C47039 - (C21746 * C47947 + C21745 * C47047) +
             C21748 * C47954 - C21749 * C47053 - C21750 * C2723) *
                C48225) *
               C31728 +
           ((C29611 - (C29612 + C29613) + C29614 - C29615 - C29616) * C4603 +
            (C29617 - (C29618 + C29619) + C29620 - C29621 - C29622) * C48225) *
               C48227) *
              C47873 +
          ((((C21591 * C119 + C47839 * C126) * C47047 +
             (C21591 * C129 + C47839 * C140) * C47947 - C21751 * C47039 -
             C21752 * C47954 + C21753 * C47053 + C21754 * C2723) *
                C4603 +
            (C21751 * C47047 + C21752 * C47947 - C21753 * C47039 -
             C21754 * C47954 + C21755 * C47053 + C21756 * C2723) *
                C48225) *
               C31728 +
           ((C26251 * C47047 + C26252 * C47947 - C22253 * C47039 -
             C22254 * C47954 + C22255 * C47053 + C22256 * C2723) *
                C4603 +
            (C22253 * C47047 + C22254 * C47947 - C22255 * C47039 -
             C22256 * C47954 + (C21591 * C1561 + C47839 * C1564) * C47053 +
             (C21591 * C1567 + C47839 * C1570) * C2723) *
                C48225) *
               C48227) *
              C2726) *
         C47906) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C47047 +
              (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
              C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                 C4603 +
             (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
              C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
                 C48225) *
                C31728 +
            ((C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C4603 +
             (C29605 + C29606 - C29607 - C29608 + C29609 + C29610) * C48225) *
                C48227) *
               C2459 +
           (((C21745 * C47039 -
              ((C21591 * C128 + C47839 * C139) * C47947 +
               (C21591 * C118 + C47839 * C125) * C47047) +
              C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
                 C4603 +
             (C21747 * C47039 - (C21746 * C47947 + C21745 * C47047) +
              C21748 * C47954 - C21749 * C47053 - C21750 * C2723) *
                 C48225) *
                C31728 +
            ((C29611 - (C29612 + C29613) + C29614 - C29615 - C29616) * C4603 +
             (C29617 - (C29618 + C29619) + C29620 - C29621 - C29622) * C48225) *
                C48227) *
               C47870) *
              C48176 +
          ((((C29601 - (C29600 + C29599) + C29602 - C29603 - C29604) * C4603 +
             (C29607 - (C29606 + C29605) + C29608 - C29609 - C29610) * C48225) *
                C31728 +
            ((C31635 - (C31636 + C31637) + C31638 - C31639 - C31640) * C4603 +
             (C31641 - (C31642 + C31643) + C31644 - C31645 - C31646) * C48225) *
                C48227) *
               C2459 +
           (((C29613 + C29612 - C29611 - C29614 + C29615 + C29616) * C4603 +
             (C29619 + C29618 - C29617 - C29620 + C29621 + C29622) * C48225) *
                C31728 +
            ((C26253 * C47047 + C26254 * C47947 - C23387 * C47039 -
              C23388 * C47954 + C23389 * C47053 + C23390 * C2723) *
                 C4603 +
             (C23387 * C47047 + C23388 * C47947 - C23389 * C47039 -
              C23390 * C47954 + (C21591 * C5880 + C47839 * C5882) * C47053 +
              (C21591 * C5884 + C47839 * C5886) * C2723) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2461 +
                      (C21591 * C127 + C47839 * C138) * C48253 -
                      C21739 * C2462 - C21740 * C48249 + C21741 * C2463 +
                      C21742 * C48239 - C21743 * C2464 - C21744 * C48217) *
                         C4603 +
                     (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                      C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                      C22441 * C2464 - C22442 * C48217) *
                         C48225) *
                        C31728 +
                    ((C30947 + C30948 - C30949 - C30950 + C30951 + C30952 -
                      C30953 - C30954) *
                         C4603 +
                     (C30955 + C30956 - C30957 - C30958 + C30959 + C30960 -
                      C30961 - C30962) *
                         C48225) *
                        C48227) *
                       C2459 +
                   (((C21745 * C2462 -
                      ((C21591 * C128 + C47839 * C139) * C48253 +
                       (C21591 * C118 + C47839 * C125) * C2461) +
                      C21746 * C48249 - C21747 * C2463 - C21748 * C48239 +
                      C21749 * C2464 + C21750 * C48217) *
                         C4603 +
                     (C21747 * C2462 - (C21746 * C48253 + C21745 * C2461) +
                      C21748 * C48249 - C21749 * C2463 - C21750 * C48239 +
                      C22685 * C2464 + C22686 * C48217) *
                         C48225) *
                        C31728 +
                    ((C22249 * C2462 - (C26249 * C48253 + C26250 * C2461) +
                      C22250 * C48249 - C22251 * C2463 - C22252 * C48239 +
                      C22837 * C2464 + C22838 * C48217) *
                         C4603 +
                     (C22251 * C2462 - (C22250 * C48253 + C22249 * C2461) +
                      C22252 * C48249 - C22837 * C2463 - C22838 * C48239 +
                      (C21591 * C6402 + C47839 * C6404) * C2464 +
                      (C21591 * C6406 + C47839 * C6408) * C48217) *
                         C48225) *
                        C48227) *
                       C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C4603 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C48225) *
                        C31728 +
                    ((C29025 + C29026 - C29027 - C29028) * C4603 +
                     (C29029 + C29030 - C29031 - C29032) * C48225) *
                        C48227) *
                       C48252 +
                   (((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C4603 +
                     (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                      C21748 * C47951) *
                         C48225) *
                        C31728 +
                    ((C29033 - (C29034 + C29035) + C29036) * C4603 +
                     (C29037 - (C29038 + C29039) + C29040) * C48225) *
                        C48227) *
                       C48245 +
                   ((((C21591 * C119 + C47839 * C126) * C2355 +
                      (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                      C21752 * C47951) *
                         C4603 +
                     (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                      C21754 * C47951) *
                         C48225) *
                        C31728 +
                    ((C29397 + C29398 - C29399 - C29400) * C4603 +
                     (C29401 + C29402 - C29403 - C29404) * C48225) *
                        C48227) *
                       C48232 +
                   (((C21973 * C2356 -
                      ((C21591 * C130 + C47839 * C141) * C2349 +
                       (C21591 * C120 + C47839 * C131) * C2355) +
                      C21974 * C47951) *
                         C4603 +
                     (C21975 * C2356 - (C21974 * C2349 + C21973 * C2355) +
                      C21976 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26409 * C2356 - (C26547 * C2349 + C26548 * C2355) +
                      C26410 * C47951) *
                         C4603 +
                     ((C21591 * C1457 + C47839 * C1458) * C2356 -
                      (C26410 * C2349 + C26409 * C2355) +
                      (C21591 * C1459 + C47839 * C1460) * C47951) *
                         C48225) *
                        C48227) *
                       C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C2355 +
                       (C21591 * C127 + C47839 * C138) * C2349 -
                       C21739 * C2356 - C21740 * C47951) *
                          C4603 +
                      (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                       C21742 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29025 + C29026 - C29027 - C29028) * C4603 +
                      (C29029 + C29030 - C29031 - C29032) * C48225) *
                         C48227) *
                        C2459 +
                    (((C21745 * C2356 -
                       ((C21591 * C128 + C47839 * C139) * C2349 +
                        (C21591 * C118 + C47839 * C125) * C2355) +
                       C21746 * C47951) *
                          C4603 +
                      (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                       C21748 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29033 - (C29034 + C29035) + C29036) * C4603 +
                      (C29037 - (C29038 + C29039) + C29040) * C48225) *
                         C48227) *
                        C47870) *
                       C48247 +
                   ((((C29027 - (C29026 + C29025) + C29028) * C4603 +
                      (C29031 - (C29030 + C29029) + C29032) * C48225) *
                         C31728 +
                     ((C29041 - (C29042 + C29043) + C29044) * C4603 +
                      (C29045 - (C29046 + C29047) + C29048) * C48225) *
                         C48227) *
                        C2459 +
                    (((C29035 + C29034 - C29033 - C29036) * C4603 +
                      (C29039 + C29038 - C29037 - C29040) * C48225) *
                         C31728 +
                     ((C29049 + C29050 - C29051 - C29052) * C4603 +
                      (C29053 + C29054 - C29055 - C29056) * C48225) *
                         C48227) *
                        C47870) *
                       C48236 +
                   ((((C29043 + C29042 - C29041 - C29044) * C4603 +
                      (C29047 + C29046 - C29045 - C29048) * C48225) *
                         C31728 +
                     ((C31093 + C31094 - C31095 - C31096) * C4603 +
                      (C31097 + C31098 - C31099 - C31100) * C48225) *
                         C48227) *
                        C2459 +
                    (((C29051 - (C29050 + C29049) + C29052) * C4603 +
                      (C29055 - (C29054 + C29053) + C29056) * C48225) *
                         C31728 +
                     ((C28291 * C2356 - (C28429 * C2349 + C28430 * C2355) +
                       C28292 * C47951) *
                          C4603 +
                      ((C21591 * C7270 + C47839 * C7272) * C2356 -
                       (C28292 * C2349 + C28291 * C2355) +
                       (C21591 * C7274 + C47839 * C7276) * C47951) *
                          C48225) *
                         C48227) *
                        C47870) *
                       C48210)) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C2355 +
                       (C21591 * C127 + C47839 * C138) * C2349 -
                       C21739 * C2356 - C21740 * C47951) *
                          C4603 +
                      (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                       C21742 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29025 + C29026 - C29027 - C29028) * C4603 +
                      (C29029 + C29030 - C29031 - C29032) * C48225) *
                         C48227) *
                        C47865 +
                    (((C21745 * C2356 -
                       ((C21591 * C128 + C47839 * C139) * C2349 +
                        (C21591 * C118 + C47839 * C125) * C2355) +
                       C21746 * C47951) *
                          C4603 +
                      (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                       C21748 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29033 - (C29034 + C29035) + C29036) * C4603 +
                      (C29037 - (C29038 + C29039) + C29040) * C48225) *
                         C48227) *
                        C47873 +
                    ((((C21591 * C119 + C47839 * C126) * C2355 +
                       (C21591 * C129 + C47839 * C140) * C2349 -
                       C21751 * C2356 - C21752 * C47951) *
                          C4603 +
                      (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                       C21754 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29397 + C29398 - C29399 - C29400) * C4603 +
                      (C29401 + C29402 - C29403 - C29404) * C48225) *
                         C48227) *
                        C2726) *
                       C48176 +
                   ((((C29027 - (C29026 + C29025) + C29028) * C4603 +
                      (C29031 - (C29030 + C29029) + C29032) * C48225) *
                         C31728 +
                     ((C29041 - (C29042 + C29043) + C29044) * C4603 +
                      (C29045 - (C29046 + C29047) + C29048) * C48225) *
                         C48227) *
                        C47865 +
                    (((C29035 + C29034 - C29033 - C29036) * C4603 +
                      (C29039 + C29038 - C29037 - C29040) * C48225) *
                         C31728 +
                     ((C29049 + C29050 - C29051 - C29052) * C4603 +
                      (C29053 + C29054 - C29055 - C29056) * C48225) *
                         C48227) *
                        C47873 +
                    (((C29399 - (C29398 + C29397) + C29400) * C4603 +
                      (C29403 - (C29402 + C29401) + C29404) * C48225) *
                         C31728 +
                     ((C26258 * C2356 - (C26259 * C2349 + C26260 * C2355) +
                       C26257 * C47951) *
                          C4603 +
                      ((C21591 * C1171 + C47839 * C1186) * C2356 -
                       (C26257 * C2349 + C26258 * C2355) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C2726) *
                       C47993)) /
                 (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C4603 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C48225) *
                        C31728 +
                    ((C29025 + C29026 - C29027 - C29028) * C4603 +
                     (C29029 + C29030 - C29031 - C29032) * C48225) *
                        C48227) *
                       C48252 +
                   (((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C4603 +
                     (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                      C21748 * C47951) *
                         C48225) *
                        C31728 +
                    ((C29033 - (C29034 + C29035) + C29036) * C4603 +
                     (C29037 - (C29038 + C29039) + C29040) * C48225) *
                        C48227) *
                       C48245 +
                   ((((C21591 * C119 + C47839 * C126) * C2355 +
                      (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                      C21752 * C47951) *
                         C4603 +
                     (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                      C21754 * C47951) *
                         C48225) *
                        C31728 +
                    ((C29397 + C29398 - C29399 - C29400) * C4603 +
                     (C29401 + C29402 - C29403 - C29404) * C48225) *
                        C48227) *
                       C48232 +
                   (((C21973 * C2356 -
                      ((C21591 * C130 + C47839 * C141) * C2349 +
                       (C21591 * C120 + C47839 * C131) * C2355) +
                      C21974 * C47951) *
                         C4603 +
                     (C21975 * C2356 - (C21974 * C2349 + C21973 * C2355) +
                      C21976 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26409 * C2356 - (C26547 * C2349 + C26548 * C2355) +
                      C26410 * C47951) *
                         C4603 +
                     ((C21591 * C1457 + C47839 * C1458) * C2356 -
                      (C26410 * C2349 + C26409 * C2355) +
                      (C21591 * C1459 + C47839 * C1460) * C47951) *
                         C48225) *
                        C48227) *
                       C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2461 +
                      (C21591 * C127 + C47839 * C138) * C48253 -
                      C21739 * C2462 - C21740 * C48249 + C21741 * C2463 +
                      C21742 * C48239 - C21743 * C2464 - C21744 * C48217) *
                         C4603 +
                     (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                      C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                      C22441 * C2464 - C22442 * C48217) *
                         C48225) *
                        C31728 +
                    ((C30947 + C30948 - C30949 - C30950 + C30951 + C30952 -
                      C30953 - C30954) *
                         C4603 +
                     (C30955 + C30956 - C30957 - C30958 + C30959 + C30960 -
                      C30961 - C30962) *
                         C48225) *
                        C48227) *
                       C2459 +
                   (((C21745 * C2462 -
                      ((C21591 * C128 + C47839 * C139) * C48253 +
                       (C21591 * C118 + C47839 * C125) * C2461) +
                      C21746 * C48249 - C21747 * C2463 - C21748 * C48239 +
                      C21749 * C2464 + C21750 * C48217) *
                         C4603 +
                     (C21747 * C2462 - (C21746 * C48253 + C21745 * C2461) +
                      C21748 * C48249 - C21749 * C2463 - C21750 * C48239 +
                      C22685 * C2464 + C22686 * C48217) *
                         C48225) *
                        C31728 +
                    ((C22249 * C2462 - (C26249 * C48253 + C26250 * C2461) +
                      C22250 * C48249 - C22251 * C2463 - C22252 * C48239 +
                      C22837 * C2464 + C22838 * C48217) *
                         C4603 +
                     (C22251 * C2462 - (C22250 * C48253 + C22249 * C2461) +
                      C22252 * C48249 - C22837 * C2463 - C22838 * C48239 +
                      (C21591 * C6402 + C47839 * C6404) * C2464 +
                      (C21591 * C6406 + C47839 * C6408) * C48217) *
                         C48225) *
                        C48227) *
                       C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C47047 +
              (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
              C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                 C4603 +
             (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
              C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
                 C48225) *
                C31728 +
            ((C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C4603 +
             (C29605 + C29606 - C29607 - C29608 + C29609 + C29610) * C48225) *
                C48227) *
               C48161 +
           (((C21745 * C47039 -
              ((C21591 * C128 + C47839 * C139) * C47947 +
               (C21591 * C118 + C47839 * C125) * C47047) +
              C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
                 C4603 +
             (C21747 * C47039 - (C21746 * C47947 + C21745 * C47047) +
              C21748 * C47954 - C21749 * C47053 - C21750 * C2723) *
                 C48225) *
                C31728 +
            ((C29611 - (C29612 + C29613) + C29614 - C29615 - C29616) * C4603 +
             (C29617 - (C29618 + C29619) + C29620 - C29621 - C29622) * C48225) *
                C48227) *
               C47870) *
              C3120 +
          ((((C29601 - (C29600 + C29599) + C29602 - C29603 - C29604) * C4603 +
             (C29607 - (C29606 + C29605) + C29608 - C29609 - C29610) * C48225) *
                C31728 +
            ((C31635 - (C31636 + C31637) + C31638 - C31639 - C31640) * C4603 +
             (C31641 - (C31642 + C31643) + C31644 - C31645 - C31646) * C48225) *
                C48227) *
               C48161 +
           (((C29613 + C29612 - C29611 - C29614 + C29615 + C29616) * C4603 +
             (C29619 + C29618 - C29617 - C29620 + C29621 + C29622) * C48225) *
                C31728 +
            ((C26253 * C47047 + C26254 * C47947 - C23387 * C47039 -
              C23388 * C47954 + C23389 * C47053 + C23390 * C2723) *
                 C4603 +
             (C23387 * C47047 + C23388 * C47947 - C23389 * C47039 -
              C23390 * C47954 + (C21591 * C5880 + C47839 * C5882) * C47053 +
              (C21591 * C5884 + C47839 * C5886) * C2723) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C47047 +
             (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
             C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                C4603 +
            (C21739 * C47047 + C21740 * C47947 - C21741 * C47039 -
             C21742 * C47954 + C21743 * C47053 + C21744 * C2723) *
                C48225) *
               C31728 +
           ((C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C4603 +
            (C29605 + C29606 - C29607 - C29608 + C29609 + C29610) * C48225) *
               C48227) *
              C47860 * C47989 +
          (((C29601 - (C29600 + C29599) + C29602 - C29603 - C29604) * C4603 +
            (C29607 - (C29606 + C29605) + C29608 - C29609 - C29610) * C48225) *
               C31728 +
           ((C31635 - (C31636 + C31637) + C31638 - C31639 - C31640) * C4603 +
            (C31641 - (C31642 + C31643) + C31644 - C31645 - C31646) * C48225) *
               C48227) *
              C47860 * C47996 +
          (((C31637 + C31636 - C31635 - C31638 + C31639 + C31640) * C4603 +
            (C31643 + C31642 - C31641 - C31644 + C31645 + C31646) * C48225) *
               C31728 +
           ((C28065 * C47047 + C28066 * C47947 - C23599 * C47039 -
             C23600 * C47954 + C23601 * C47053 + C23602 * C2723) *
                C4603 +
            (C23599 * C47047 + C23600 * C47947 - C23601 * C47039 -
             C23602 * C47954 + (C21591 * C23586 + C47839 * C23587) * C47053 +
             (C21591 * C23588 + C47839 * C23589) * C2723) *
                C48225) *
               C48227) *
              C47860 * C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[182] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2461 +
                      (C21591 * C127 + C47839 * C138) * C48253 -
                      C21739 * C2462 - C21740 * C48249 + C21741 * C2463 +
                      C21742 * C48239 - C21743 * C2464 - C21744 * C48217) *
                         C4603 +
                     (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                      C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                      C22441 * C2464 - C22442 * C48217) *
                         C48225) *
                        C31728 +
                    ((C30947 + C30948 - C30949 - C30950 + C30951 + C30952 -
                      C30953 - C30954) *
                         C4603 +
                     (C30955 + C30956 - C30957 - C30958 + C30959 + C30960 -
                      C30961 - C30962) *
                         C48225) *
                        C48227) *
                       C47860 * C3120 +
                   (((C30949 - (C30948 + C30947) + C30950 - C30951 - C30952 +
                      C30953 + C30954) *
                         C4603 +
                     (C30957 - (C30956 + C30955) + C30958 - C30959 - C30960 +
                      C30961 + C30962) *
                         C48225) *
                        C31728 +
                    ((C22577 * C2462 - (C26255 * C48253 + C26256 * C2461) +
                      C22578 * C48249 - C22579 * C2463 - C22580 * C48239 +
                      C22581 * C2464 + C22582 * C48217) *
                         C4603 +
                     (C22579 * C2462 - (C22578 * C48253 + C22577 * C2461) +
                      C22580 * C48249 - C22581 * C2463 - C22582 * C48239 +
                      (C21591 * C22554 + C47839 * C22555) * C2464 +
                      (C21591 * C22556 + C47839 * C22557) * C48217) *
                         C48225) *
                        C48227) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C2355 +
                       (C21591 * C127 + C47839 * C138) * C2349 -
                       C21739 * C2356 - C21740 * C47951) *
                          C4603 +
                      (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                       C21742 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29025 + C29026 - C29027 - C29028) * C4603 +
                      (C29029 + C29030 - C29031 - C29032) * C48225) *
                         C48227) *
                        C48243 +
                    (((C21745 * C2356 -
                       ((C21591 * C128 + C47839 * C139) * C2349 +
                        (C21591 * C118 + C47839 * C125) * C2355) +
                       C21746 * C47951) *
                          C4603 +
                      (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                       C21748 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29033 - (C29034 + C29035) + C29036) * C4603 +
                      (C29037 - (C29038 + C29039) + C29040) * C48225) *
                         C48227) *
                        C48230 +
                    ((((C21591 * C119 + C47839 * C126) * C2355 +
                       (C21591 * C129 + C47839 * C140) * C2349 -
                       C21751 * C2356 - C21752 * C47951) *
                          C4603 +
                      (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                       C21754 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29397 + C29398 - C29399 - C29400) * C4603 +
                      (C29401 + C29402 - C29403 - C29404) * C48225) *
                         C48227) *
                        C48201) *
                       C3120 +
                   ((((C29027 - (C29026 + C29025) + C29028) * C4603 +
                      (C29031 - (C29030 + C29029) + C29032) * C48225) *
                         C31728 +
                     ((C29041 - (C29042 + C29043) + C29044) * C4603 +
                      (C29045 - (C29046 + C29047) + C29048) * C48225) *
                         C48227) *
                        C48243 +
                    (((C29035 + C29034 - C29033 - C29036) * C4603 +
                      (C29039 + C29038 - C29037 - C29040) * C48225) *
                         C31728 +
                     ((C29049 + C29050 - C29051 - C29052) * C4603 +
                      (C29053 + C29054 - C29055 - C29056) * C48225) *
                         C48227) *
                        C48230 +
                    (((C29399 - (C29398 + C29397) + C29400) * C4603 +
                      (C29403 - (C29402 + C29401) + C29404) * C48225) *
                         C31728 +
                     ((C26258 * C2356 - (C26259 * C2349 + C26260 * C2355) +
                       C26257 * C47951) *
                          C4603 +
                      ((C21591 * C1171 + C47839 * C1186) * C2356 -
                       (C26257 * C2349 + C26258 * C2355) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C4603 +
                     (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                      C21742 * C47951) *
                         C48225) *
                        C31728 +
                    ((C29025 + C29026 - C29027 - C29028) * C4603 +
                     (C29029 + C29030 - C29031 - C29032) * C48225) *
                        C48227) *
                       C47860 * C48254 +
                   (((C29027 - (C29026 + C29025) + C29028) * C4603 +
                     (C29031 - (C29030 + C29029) + C29032) * C48225) *
                        C31728 +
                    ((C29041 - (C29042 + C29043) + C29044) * C4603 +
                     (C29045 - (C29046 + C29047) + C29048) * C48225) *
                        C48227) *
                       C47860 * C48251 +
                   (((C29043 + C29042 - C29041 - C29044) * C4603 +
                     (C29047 + C29046 - C29045 - C29048) * C48225) *
                        C31728 +
                    ((C31093 + C31094 - C31095 - C31096) * C4603 +
                     (C31097 + C31098 - C31099 - C31100) * C48225) *
                        C48227) *
                       C47860 * C48242 +
                   (((C31095 - (C31094 + C31093) + C31096) * C4603 +
                     (C31099 - (C31098 + C31097) + C31100) * C48225) *
                        C31728 +
                    ((C28068 * C2356 - (C28069 * C2349 + C28070 * C2355) +
                      C28067 * C47951) *
                         C4603 +
                     ((C21591 * C23228 + C47839 * C23229) * C2356 -
                      (C28067 * C2349 + C28068 * C2355) +
                      (C21591 * C23230 + C47839 * C23231) * C47951) *
                         C48225) *
                        C48227) *
                       C47860 * C48223)) /
                     (p * q * std::sqrt(p + q));
    d2ee[183] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C2355 +
                       (C21591 * C127 + C47839 * C138) * C2349 -
                       C21739 * C2356 - C21740 * C47951) *
                          C4603 +
                      (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                       C21742 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29025 + C29026 - C29027 - C29028) * C4603 +
                      (C29029 + C29030 - C29031 - C29032) * C48225) *
                         C48227) *
                        C48161 +
                    (((C21745 * C2356 -
                       ((C21591 * C128 + C47839 * C139) * C2349 +
                        (C21591 * C118 + C47839 * C125) * C2355) +
                       C21746 * C47951) *
                          C4603 +
                      (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                       C21748 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29033 - (C29034 + C29035) + C29036) * C4603 +
                      (C29037 - (C29038 + C29039) + C29040) * C48225) *
                         C48227) *
                        C47870) *
                       C47989 +
                   ((((C29027 - (C29026 + C29025) + C29028) * C4603 +
                      (C29031 - (C29030 + C29029) + C29032) * C48225) *
                         C31728 +
                     ((C29041 - (C29042 + C29043) + C29044) * C4603 +
                      (C29045 - (C29046 + C29047) + C29048) * C48225) *
                         C48227) *
                        C48161 +
                    (((C29035 + C29034 - C29033 - C29036) * C4603 +
                      (C29039 + C29038 - C29037 - C29040) * C48225) *
                         C31728 +
                     ((C29049 + C29050 - C29051 - C29052) * C4603 +
                      (C29053 + C29054 - C29055 - C29056) * C48225) *
                         C48227) *
                        C47870) *
                       C47996 +
                   ((((C29043 + C29042 - C29041 - C29044) * C4603 +
                      (C29047 + C29046 - C29045 - C29048) * C48225) *
                         C31728 +
                     ((C31093 + C31094 - C31095 - C31096) * C4603 +
                      (C31097 + C31098 - C31099 - C31100) * C48225) *
                         C48227) *
                        C48161 +
                    (((C29051 - (C29050 + C29049) + C29052) * C4603 +
                      (C29055 - (C29054 + C29053) + C29056) * C48225) *
                         C31728 +
                     ((C28291 * C2356 - (C28429 * C2349 + C28430 * C2355) +
                       C28292 * C47951) *
                          C4603 +
                      ((C21591 * C7270 + C47839 * C7272) * C2356 -
                       (C28292 * C2349 + C28291 * C2355) +
                       (C21591 * C7274 + C47839 * C7276) * C47951) *
                          C48225) *
                         C48227) *
                        C47870) *
                       C3628)) /
                 (p * q * std::sqrt(p + q));
    d2ee[184] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C2355 +
                       (C21591 * C127 + C47839 * C138) * C2349 -
                       C21739 * C2356 - C21740 * C47951) *
                          C4603 +
                      (C21739 * C2355 + C21740 * C2349 - C21741 * C2356 -
                       C21742 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29025 + C29026 - C29027 - C29028) * C4603 +
                      (C29029 + C29030 - C29031 - C29032) * C48225) *
                         C48227) *
                        C48243 +
                    (((C21745 * C2356 -
                       ((C21591 * C128 + C47839 * C139) * C2349 +
                        (C21591 * C118 + C47839 * C125) * C2355) +
                       C21746 * C47951) *
                          C4603 +
                      (C21747 * C2356 - (C21746 * C2349 + C21745 * C2355) +
                       C21748 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29033 - (C29034 + C29035) + C29036) * C4603 +
                      (C29037 - (C29038 + C29039) + C29040) * C48225) *
                         C48227) *
                        C48230 +
                    ((((C21591 * C119 + C47839 * C126) * C2355 +
                       (C21591 * C129 + C47839 * C140) * C2349 -
                       C21751 * C2356 - C21752 * C47951) *
                          C4603 +
                      (C21751 * C2355 + C21752 * C2349 - C21753 * C2356 -
                       C21754 * C47951) *
                          C48225) *
                         C31728 +
                     ((C29397 + C29398 - C29399 - C29400) * C4603 +
                      (C29401 + C29402 - C29403 - C29404) * C48225) *
                         C48227) *
                        C48201) *
                       C3120 +
                   ((((C29027 - (C29026 + C29025) + C29028) * C4603 +
                      (C29031 - (C29030 + C29029) + C29032) * C48225) *
                         C31728 +
                     ((C29041 - (C29042 + C29043) + C29044) * C4603 +
                      (C29045 - (C29046 + C29047) + C29048) * C48225) *
                         C48227) *
                        C48243 +
                    (((C29035 + C29034 - C29033 - C29036) * C4603 +
                      (C29039 + C29038 - C29037 - C29040) * C48225) *
                         C31728 +
                     ((C29049 + C29050 - C29051 - C29052) * C4603 +
                      (C29053 + C29054 - C29055 - C29056) * C48225) *
                         C48227) *
                        C48230 +
                    (((C29399 - (C29398 + C29397) + C29400) * C4603 +
                      (C29403 - (C29402 + C29401) + C29404) * C48225) *
                         C31728 +
                     ((C26258 * C2356 - (C26259 * C2349 + C26260 * C2355) +
                       C26257 * C47951) *
                          C4603 +
                      ((C21591 * C1171 + C47839 * C1186) * C2356 -
                       (C26257 * C2349 + C26258 * C2355) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2461 +
                      (C21591 * C127 + C47839 * C138) * C48253 -
                      C21739 * C2462 - C21740 * C48249 + C21741 * C2463 +
                      C21742 * C48239 - C21743 * C2464 - C21744 * C48217) *
                         C4603 +
                     (C21739 * C2461 + C21740 * C48253 - C21741 * C2462 -
                      C21742 * C48249 + C21743 * C2463 + C21744 * C48239 -
                      C22441 * C2464 - C22442 * C48217) *
                         C48225) *
                        C31728 +
                    ((C30947 + C30948 - C30949 - C30950 + C30951 + C30952 -
                      C30953 - C30954) *
                         C4603 +
                     (C30955 + C30956 - C30957 - C30958 + C30959 + C30960 -
                      C30961 - C30962) *
                         C48225) *
                        C48227) *
                       C47860 * C3120 +
                   (((C30949 - (C30948 + C30947) + C30950 - C30951 - C30952 +
                      C30953 + C30954) *
                         C4603 +
                     (C30957 - (C30956 + C30955) + C30958 - C30959 - C30960 +
                      C30961 + C30962) *
                         C48225) *
                        C31728 +
                    ((C22577 * C2462 - (C26255 * C48253 + C26256 * C2461) +
                      C22578 * C48249 - C22579 * C2463 - C22580 * C48239 +
                      C22581 * C2464 + C22582 * C48217) *
                         C4603 +
                     (C22579 * C2462 - (C22578 * C48253 + C22577 * C2461) +
                      C22580 * C48249 - C22581 * C2463 - C22582 * C48239 +
                      (C21591 * C22554 + C47839 * C22555) * C2464 +
                      (C21591 * C22556 + C47839 * C22557) * C48217) *
                         C48225) *
                        C48227) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q));
    d2ee[185] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C1303 +
                      (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                      C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                      C21743 * C1306 - C21744 * C48217) *
                         C4603 +
                     (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 -
                      C21742 * C1298 + C21743 * C1305 + C21744 * C1299 -
                      C22441 * C1306 - C22442 * C48217) *
                         C48225) *
                        C31728 +
                    ((C27633 + C27634 - C27635 - C27636 + C27637 + C27638 -
                      C27639 - C27640) *
                         C4603 +
                     (C27641 + C27642 - C27643 - C27644 + C27645 + C27646 -
                      C27647 - C27648) *
                         C48225) *
                        C48227) *
                       C48161 +
                   (((C21745 * C1304 -
                      ((C21591 * C128 + C47839 * C139) * C1297 +
                       (C21591 * C118 + C47839 * C125) * C1303) +
                      C21746 * C1298 - C21747 * C1305 - C21748 * C1299 +
                      C21749 * C1306 + C21750 * C48217) *
                         C4603 +
                     (C21747 * C1304 - (C21746 * C1297 + C21745 * C1303) +
                      C21748 * C1298 - C21749 * C1305 - C21750 * C1299 +
                      C22685 * C1306 + C22686 * C48217) *
                         C48225) *
                        C31728 +
                    ((C22249 * C1304 - (C26249 * C1297 + C26250 * C1303) +
                      C22250 * C1298 - C22251 * C1305 - C22252 * C1299 +
                      C22837 * C1306 + C22838 * C48217) *
                         C4603 +
                     (C22251 * C1304 - (C22250 * C1297 + C22249 * C1303) +
                      C22252 * C1298 - C22837 * C1305 - C22838 * C1299 +
                      (C21591 * C6402 + C47839 * C6404) * C1306 +
                      (C21591 * C6406 + C47839 * C6408) * C48217) *
                         C48225) *
                        C48227) *
                       C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C4603 +
                     (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                      C21742 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26745 + C26746 - C26747 - C26748) * C4603 +
                     (C26749 + C26750 - C26751 - C26752) * C48225) *
                        C48227) *
                       C557 +
                   (((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C4603 +
                     (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                      C21748 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26753 - (C26754 + C26755) + C26756) * C4603 +
                     (C26757 - (C26758 + C26759) + C26760) * C48225) *
                        C48227) *
                       C558 +
                   ((((C21591 * C119 + C47839 * C126) * C561 +
                      (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
                      C21752 * C47951) *
                         C4603 +
                     (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                      C21754 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26761 + C26762 - C26763 - C26764) * C4603 +
                     (C26765 + C26766 - C26767 - C26768) * C48225) *
                        C48227) *
                       C559 +
                   (((C21973 * C562 -
                      ((C21591 * C130 + C47839 * C141) * C48175 +
                       (C21591 * C120 + C47839 * C131) * C561) +
                      C21974 * C47951) *
                         C4603 +
                     (C21975 * C562 - (C21974 * C48175 + C21973 * C561) +
                      C21976 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26409 * C562 - (C26547 * C48175 + C26548 * C561) +
                      C26410 * C47951) *
                         C4603 +
                     ((C21591 * C1457 + C47839 * C1458) * C562 -
                      (C26410 * C48175 + C26409 * C561) +
                      (C21591 * C1459 + C47839 * C1460) * C47951) *
                         C48225) *
                        C48227) *
                       C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C561 +
                       (C21591 * C127 + C47839 * C138) * C48175 -
                       C21739 * C562 - C21740 * C47951) *
                          C4603 +
                      (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                       C21742 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26745 + C26746 - C26747 - C26748) * C4603 +
                      (C26749 + C26750 - C26751 - C26752) * C48225) *
                         C48227) *
                        C48161 +
                    (((C21745 * C562 -
                       ((C21591 * C128 + C47839 * C139) * C48175 +
                        (C21591 * C118 + C47839 * C125) * C561) +
                       C21746 * C47951) *
                          C4603 +
                      (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                       C21748 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26753 - (C26754 + C26755) + C26756) * C4603 +
                      (C26757 - (C26758 + C26759) + C26760) * C48225) *
                         C48227) *
                        C47870) *
                       C1681 +
                   ((((C26747 - (C26746 + C26745) + C26748) * C4603 +
                      (C26751 - (C26750 + C26749) + C26752) * C48225) *
                         C31728 +
                     ((C28271 - (C28272 + C28273) + C28274) * C4603 +
                      (C28275 - (C28276 + C28277) + C28278) * C48225) *
                         C48227) *
                        C48161 +
                    (((C26755 + C26754 - C26753 - C26756) * C4603 +
                      (C26759 + C26758 - C26757 - C26760) * C48225) *
                         C31728 +
                     ((C28279 + C28280 - C28281 - C28282) * C4603 +
                      (C28283 + C28284 - C28285 - C28286) * C48225) *
                         C48227) *
                        C47870) *
                       C1682 +
                   ((((C28273 + C28272 - C28271 - C28274) * C4603 +
                      (C28277 + C28276 - C28275 - C28278) * C48225) *
                         C31728 +
                     ((C28563 + C28564 - C28565 - C28566) * C4603 +
                      (C28567 + C28568 - C28569 - C28570) * C48225) *
                         C48227) *
                        C48161 +
                    (((C28281 - (C28280 + C28279) + C28282) * C4603 +
                      (C28285 - (C28284 + C28283) + C28286) * C48225) *
                         C31728 +
                     ((C28291 * C562 - (C28429 * C48175 + C28430 * C561) +
                       C28292 * C47951) *
                          C4603 +
                      ((C21591 * C7270 + C47839 * C7272) * C562 -
                       (C28292 * C48175 + C28291 * C561) +
                       (C21591 * C7274 + C47839 * C7276) * C47951) *
                          C48225) *
                         C48227) *
                        C47870) *
                       C48210)) /
                     (p * q * std::sqrt(p + q));
    d2ee[186] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C1303 +
                      (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                      C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                      C21743 * C1306 - C21744 * C48217) *
                         C4603 +
                     (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 -
                      C21742 * C1298 + C21743 * C1305 + C21744 * C1299 -
                      C22441 * C1306 - C22442 * C48217) *
                         C48225) *
                        C31728 +
                    ((C27633 + C27634 - C27635 - C27636 + C27637 + C27638 -
                      C27639 - C27640) *
                         C4603 +
                     (C27641 + C27642 - C27643 - C27644 + C27645 + C27646 -
                      C27647 - C27648) *
                         C48225) *
                        C48227) *
                       C47860 * C48176 +
                   (((C27635 - (C27634 + C27633) + C27636 - C27637 - C27638 +
                      C27639 + C27640) *
                         C4603 +
                     (C27643 - (C27642 + C27641) + C27644 - C27645 - C27646 +
                      C27647 + C27648) *
                         C48225) *
                        C31728 +
                    ((C22577 * C1304 - (C26255 * C1297 + C26256 * C1303) +
                      C22578 * C1298 - C22579 * C1305 - C22580 * C1299 +
                      C22581 * C1306 + C22582 * C48217) *
                         C4603 +
                     (C22579 * C1304 - (C22578 * C1297 + C22577 * C1303) +
                      C22580 * C1298 - C22581 * C1305 - C22582 * C1299 +
                      (C21591 * C22554 + C47839 * C22555) * C1306 +
                      (C21591 * C22556 + C47839 * C22557) * C48217) *
                         C48225) *
                        C48227) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C561 +
                       (C21591 * C127 + C47839 * C138) * C48175 -
                       C21739 * C562 - C21740 * C47951) *
                          C4603 +
                      (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                       C21742 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26745 + C26746 - C26747 - C26748) * C4603 +
                      (C26749 + C26750 - C26751 - C26752) * C48225) *
                         C48227) *
                        C258 +
                    (((C21745 * C562 -
                       ((C21591 * C128 + C47839 * C139) * C48175 +
                        (C21591 * C118 + C47839 * C125) * C561) +
                       C21746 * C47951) *
                          C4603 +
                      (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                       C21748 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26753 - (C26754 + C26755) + C26756) * C4603 +
                      (C26757 - (C26758 + C26759) + C26760) * C48225) *
                         C48227) *
                        C259 +
                    ((((C21591 * C119 + C47839 * C126) * C561 +
                       (C21591 * C129 + C47839 * C140) * C48175 -
                       C21751 * C562 - C21752 * C47951) *
                          C4603 +
                      (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                       C21754 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26761 + C26762 - C26763 - C26764) * C4603 +
                      (C26765 + C26766 - C26767 - C26768) * C48225) *
                         C48227) *
                        C48201) *
                       C48176 +
                   ((((C26747 - (C26746 + C26745) + C26748) * C4603 +
                      (C26751 - (C26750 + C26749) + C26752) * C48225) *
                         C31728 +
                     ((C28271 - (C28272 + C28273) + C28274) * C4603 +
                      (C28275 - (C28276 + C28277) + C28278) * C48225) *
                         C48227) *
                        C258 +
                    (((C26755 + C26754 - C26753 - C26756) * C4603 +
                      (C26759 + C26758 - C26757 - C26760) * C48225) *
                         C31728 +
                     ((C28279 + C28280 - C28281 - C28282) * C4603 +
                      (C28283 + C28284 - C28285 - C28286) * C48225) *
                         C48227) *
                        C259 +
                    (((C26763 - (C26762 + C26761) + C26764) * C4603 +
                      (C26767 - (C26766 + C26765) + C26768) * C48225) *
                         C31728 +
                     ((C26258 * C562 - (C26259 * C48175 + C26260 * C561) +
                       C26257 * C47951) *
                          C4603 +
                      ((C21591 * C1171 + C47839 * C1186) * C562 -
                       (C26257 * C48175 + C26258 * C561) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C4603 +
                     (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                      C21742 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26745 + C26746 - C26747 - C26748) * C4603 +
                     (C26749 + C26750 - C26751 - C26752) * C48225) *
                        C48227) *
                       C47860 * C2133 +
                   (((C26747 - (C26746 + C26745) + C26748) * C4603 +
                     (C26751 - (C26750 + C26749) + C26752) * C48225) *
                        C31728 +
                    ((C28271 - (C28272 + C28273) + C28274) * C4603 +
                     (C28275 - (C28276 + C28277) + C28278) * C48225) *
                        C48227) *
                       C47860 * C2134 +
                   (((C28273 + C28272 - C28271 - C28274) * C4603 +
                     (C28277 + C28276 - C28275 - C28278) * C48225) *
                        C31728 +
                    ((C28563 + C28564 - C28565 - C28566) * C4603 +
                     (C28567 + C28568 - C28569 - C28570) * C48225) *
                        C48227) *
                       C47860 * C2135 +
                   (((C28565 - (C28564 + C28563) + C28566) * C4603 +
                     (C28569 - (C28568 + C28567) + C28570) * C48225) *
                        C31728 +
                    ((C28068 * C562 - (C28069 * C48175 + C28070 * C561) +
                      C28067 * C47951) *
                         C4603 +
                     ((C21591 * C23228 + C47839 * C23229) * C562 -
                      (C28067 * C48175 + C28068 * C561) +
                      (C21591 * C23230 + C47839 * C23231) * C47951) *
                         C48225) *
                        C48227) *
                       C47860 * C48223)) /
                     (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C21591 * C117 + C47839 * C124) * C116 +
                 (C21591 * C127 + C47839 * C138) * C47888) *
                    C4603 +
                (C21739 * C116 + C21740 * C47888) * C48225) *
                   C31728 +
               ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) *
                   C48227) *
                  C107 -
              (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) *
                   C48227 +
               ((C21746 * C47888 + C21745 * C116) * C48225 +
                ((C21591 * C128 + C47839 * C139) * C47888 +
                 (C21591 * C118 + C47839 * C125) * C116) *
                    C4603) *
                   C31728) *
                  C108 +
              ((((C21591 * C119 + C47839 * C126) * C116 +
                 (C21591 * C129 + C47839 * C140) * C47888) *
                    C4603 +
                (C21751 * C116 + C21752 * C47888) * C48225) *
                   C31728 +
               ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) *
                   C48227) *
                  C109 -
              (((C26541 + C26542) * C48225 + (C26549 + C26550) * C4603) *
                   C48227 +
               ((C21974 * C47888 + C21973 * C116) * C48225 +
                ((C21591 * C130 + C47839 * C141) * C47888 +
                 (C21591 * C120 + C47839 * C131) * C116) *
                    C4603) *
                   C31728) *
                  C110 +
              ((((C21591 * C121 + C47839 * C132) * C116 +
                 (C21591 * C133 + C47839 * C142) * C47888) *
                    C4603 +
                ((C21591 * C272 + C47839 * C290) * C116 +
                 (C21591 * C291 + C47839 * C302) * C47888) *
                    C48225) *
                   C31728 +
               (((C21591 * C421 + C47839 * C436) * C116 +
                 (C21591 * C435 + C47839 * C451) * C47888) *
                    C4603 +
                ((C21591 * C821 + C47839 * C830) * C116 +
                 (C21591 * C831 + C47839 * C836) * C47888) *
                    C48225) *
                   C48227) *
                  C111) *
             C47906 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21591 * C117 + C47839 * C124) * C261 +
                 (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
                 C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                    C4603 +
                (C21739 * C261 + C21740 * C48246 - C21741 * C262 -
                 C21742 * C48234 + C21743 * C263 + C21744 * C48207) *
                    C48225) *
                   C31728 +
               ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C4603 +
                (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) *
                    C48225) *
                   C48227) *
                  C258 +
              (((C21745 * C262 -
                 ((C21591 * C128 + C47839 * C139) * C48246 +
                  (C21591 * C118 + C47839 * C125) * C261) +
                 C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                    C4603 +
                (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
                 C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                    C48225) *
                   C31728 +
               ((C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) *
                    C4603 +
                (C29953 - (C29954 + C29955) + C29956 - C29957 - C29958) *
                    C48225) *
                   C48227) *
                  C259 +
              ((((C21591 * C119 + C47839 * C126) * C261 +
                 (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
                 C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
                    C4603 +
                (C21751 * C261 + C21752 * C48246 - C21753 * C262 -
                 C21754 * C48234 + C21755 * C263 + C21756 * C48207) *
                    C48225) *
                   C31728 +
               ((C26251 * C261 + C26252 * C48246 - C22253 * C262 -
                 C22254 * C48234 + C22255 * C263 + C22256 * C48207) *
                    C4603 +
                (C22253 * C261 + C22254 * C48246 - C22255 * C262 -
                 C22256 * C48234 + (C21591 * C1561 + C47839 * C1564) * C263 +
                 (C21591 * C1567 + C47839 * C1570) * C48207) *
                    C48225) *
                   C48227) *
                  C48201) *
             C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C258 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C259 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C4603 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C31728 +
            ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
               C48201) *
              C48247 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C259 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C258 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C4603) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C4603) * C31728) *
               C48201) *
              C48236 +
          ((((C26270 + C26269) * C4603 + (C26234 + C26233) * C48225) * C31728 +
            ((C28071 + C28072) * C4603 + (C28055 + C28056) * C48225) * C48227) *
               C258 -
           (((C28423 + C28424) * C48225 + (C28431 + C28432) * C4603) * C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C4603) * C31728) *
               C259 +
           (((C26274 + C26273) * C4603 + (C26272 + C26271) * C48225) * C31728 +
            (((C21591 * C1861 + C47839 * C1870) * C116 +
              (C21591 * C1867 + C47839 * C1879) * C47888) *
                 C4603 +
             ((C21591 * C2241 + C47839 * C2244) * C116 +
              (C21591 * C2247 + C47839 * C2250) * C47888) *
                 C48225) *
                C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C4603 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C4603 +
            (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
               C48227) *
              C48243 +
          (((C21745 * C954 -
             ((C21591 * C128 + C47839 * C139) * C947 +
              (C21591 * C118 + C47839 * C125) * C953) +
             C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                C4603 +
            (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
             C21749 * C955 - C21750 * C48207) *
                C48225) *
               C31728 +
           ((C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C4603 +
            (C27497 - (C27498 + C27499) + C27500 - C27501 - C27502) * C48225) *
               C48227) *
              C48230 +
          ((((C21591 * C119 + C47839 * C126) * C953 +
             (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
             C21752 * C948 + C21753 * C955 + C21754 * C48207) *
                C4603 +
            (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
             C21755 * C955 + C21756 * C48207) *
                C48225) *
               C31728 +
           ((C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
             C22255 * C955 + C22256 * C48207) *
                C4603 +
            (C22253 * C953 + C22254 * C947 - C22255 * C954 - C22256 * C948 +
             (C21591 * C1561 + C47839 * C1564) * C955 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1024 +
            (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
            C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
            C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
               C4603 +
           (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
            C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
            C22443 * C1028 + C22444 * C1022) *
               C48225) *
              C31728 +
          ((C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
            C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
            C22945 * C1028 + C22946 * C1022) *
               C4603 +
           (C22245 * C1024 + C22246 * C1018 - C22247 * C1025 - C22248 * C1019 +
            C22575 * C1026 + C22576 * C1020 - C22945 * C1027 - C22946 * C1021 +
            (C21591 * C22936 + C47839 * C22937) * C1028 +
            (C21591 * C22938 + C47839 * C22939) * C1022) *
               C48225) *
              C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C4603 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C4603 +
            (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
               C48227) *
              C47860 * C48247 +
          (((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) * C4603 +
            (C27151 - (C27150 + C27149) + C27152 - C27153 - C27154) * C48225) *
               C31728 +
           ((C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) * C4603 +
            (C27161 - (C27162 + C27163) + C27164 - C27165 - C27166) * C48225) *
               C48227) *
              C47860 * C48236 +
          (((C27157 + C27156 - C27155 - C27158 + C27159 + C27160) * C4603 +
            (C27163 + C27162 - C27161 - C27164 + C27165 + C27166) * C48225) *
               C31728 +
           ((C28065 * C953 + C28066 * C947 - C23599 * C954 - C23600 * C948 +
             C23601 * C955 + C23602 * C48207) *
                C4603 +
            (C23599 * C953 + C23600 * C947 - C23601 * C954 - C23602 * C948 +
             (C21591 * C23586 + C47839 * C23587) * C955 +
             (C21591 * C23588 + C47839 * C23589) * C48207) *
                C48225) *
               C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C48243 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C48230 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C4603 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C31728 +
            ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
               C48201) *
              C1681 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C48230 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C48243 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C4603) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C4603) * C31728) *
               C48201) *
              C1682 +
          ((((C26270 + C26269) * C4603 + (C26234 + C26233) * C48225) * C31728 +
            ((C28071 + C28072) * C4603 + (C28055 + C28056) * C48225) * C48227) *
               C48243 -
           (((C28423 + C28424) * C48225 + (C28431 + C28432) * C4603) * C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C4603) * C31728) *
               C48230 +
           (((C26274 + C26273) * C4603 + (C26272 + C26271) * C48225) * C31728 +
            (((C21591 * C1861 + C47839 * C1870) * C116 +
              (C21591 * C1867 + C47839 * C1879) * C47888) *
                 C4603 +
             ((C21591 * C2241 + C47839 * C2244) * C116 +
              (C21591 * C2247 + C47839 * C2250) * C47888) *
                 C48225) *
                C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C4603 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C4603 +
            (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
               C48227) *
              C47860 * C1681 +
          (((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C4603 +
            (C27949 - (C27948 + C27947) + C27950 - C27951 - C27952) * C48225) *
               C31728 +
           ((C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C4603 +
            (C27959 - (C27960 + C27961) + C27962 - C27963 - C27964) * C48225) *
               C48227) *
              C47860 * C1682 +
          (((C27955 + C27954 - C27953 - C27956 + C27957 + C27958) * C4603 +
            (C27961 + C27960 - C27959 - C27962 + C27963 + C27964) * C48225) *
               C31728 +
           ((C28065 * C261 + C28066 * C48246 - C23599 * C262 - C23600 * C48234 +
             C23601 * C263 + C23602 * C48207) *
                C4603 +
            (C23599 * C261 + C23600 * C48246 - C23601 * C262 - C23602 * C48234 +
             (C21591 * C23586 + C47839 * C23587) * C263 +
             (C21591 * C23588 + C47839 * C23589) * C48207) *
                C48225) *
               C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C4603 +
            (C21739 * C116 + C21740 * C47888) * C48225) *
               C31728 +
           ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
              C47860 * C1856 -
          (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
           ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
              C47860 * C1857 +
          (((C26270 + C26269) * C4603 + (C26234 + C26233) * C48225) * C31728 +
           ((C28071 + C28072) * C4603 + (C28055 + C28056) * C48225) * C48227) *
              C47860 * C1858 -
          (((C28073 + C28074) * C48225 + (C28075 + C28076) * C4603) * C48227 +
           ((C28056 + C28055) * C48225 + (C28072 + C28071) * C4603) * C31728) *
              C47860 * C1859 +
          (((C28076 + C28075) * C4603 + (C28074 + C28073) * C48225) * C31728 +
           (((C21591 * C12369 + C47839 * C12371) * C116 +
             (C21591 * C12373 + C47839 * C12375) * C47888) *
                C4603 +
            ((C21591 * C28046 + C47839 * C28047) * C116 +
             (C21591 * C28048 + C47839 * C28049) * C47888) *
                C48225) *
               C48227) *
              C47860 * C1860)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C953 +
              (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
              C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                 C4603 +
             (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
              C21743 * C955 + C21744 * C48207) *
                 C48225) *
                C31728 +
            ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C4603 +
             (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
                C48227) *
               C48161 +
           (((C21745 * C954 -
              ((C21591 * C128 + C47839 * C139) * C947 +
               (C21591 * C118 + C47839 * C125) * C953) +
              C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                 C4603 +
             (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
              C21749 * C955 - C21750 * C48207) *
                 C48225) *
                C31728 +
            ((C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C4603 +
             (C27497 - (C27498 + C27499) + C27500 - C27501 - C27502) * C48225) *
                C48227) *
               C47870) *
              C48176 +
          ((((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) * C4603 +
             (C27151 - (C27150 + C27149) + C27152 - C27153 - C27154) * C48225) *
                C31728 +
            ((C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) * C4603 +
             (C27161 - (C27162 + C27163) + C27164 - C27165 - C27166) * C48225) *
                C48227) *
               C48161 +
           (((C27493 + C27492 - C27491 - C27494 + C27495 + C27496) * C4603 +
             (C27499 + C27498 - C27497 - C27500 + C27501 + C27502) * C48225) *
                C31728 +
            ((C26253 * C953 + C26254 * C947 - C23387 * C954 - C23388 * C948 +
              C23389 * C955 + C23390 * C48207) *
                 C4603 +
             (C23387 * C953 + C23388 * C947 - C23389 * C954 - C23390 * C948 +
              (C21591 * C5880 + C47839 * C5882) * C955 +
              (C21591 * C5884 + C47839 * C5886) * C48207) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C557 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C558 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C4603 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C31728 +
            ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
               C559 -
           (((C26541 + C26542) * C48225 + (C26549 + C26550) * C4603) * C48227 +
            ((C21974 * C47888 + C21973 * C116) * C48225 +
             ((C21591 * C130 + C47839 * C141) * C47888 +
              (C21591 * C120 + C47839 * C131) * C116) *
                 C4603) *
                C31728) *
               C48211) *
              C48176 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C558 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C557 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C4603) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C4603) * C31728) *
               C559 +
           (((C26550 + C26549) * C4603 + (C26542 + C26541) * C48225) * C31728 +
            (((C21591 * C425 + C47839 * C444) * C116 +
              (C21591 * C443 + C47839 * C455) * C47888) *
                 C4603 +
             ((C21591 * C2031 + C47839 * C2032) * C116 +
              (C21591 * C2033 + C47839 * C2034) * C47888) *
                 C48225) *
                C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C48161 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C47870) *
              C2133 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C47870 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C48161) *
              C2134 +
          ((((C26270 + C26269) * C4603 + (C26234 + C26233) * C48225) * C31728 +
            ((C28071 + C28072) * C4603 + (C28055 + C28056) * C48225) * C48227) *
               C48161 -
           (((C28423 + C28424) * C48225 + (C28431 + C28432) * C4603) * C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C4603) * C31728) *
               C47870) *
              C2135 +
          ((((C28432 + C28431) * C4603 + (C28424 + C28423) * C48225) * C31728 +
            (((C21591 * C1865 + C47839 * C1874) * C116 +
              (C21591 * C1877 + C47839 * C1883) * C47888) *
                 C4603 +
             ((C21591 * C6796 + C47839 * C6798) * C116 +
              (C21591 * C6800 + C47839 * C6802) * C47888) *
                 C48225) *
                C48227) *
               C47870 -
           (((C28073 + C28074) * C48225 + (C28075 + C28076) * C4603) * C48227 +
            ((C28056 + C28055) * C48225 + (C28072 + C28071) * C4603) * C31728) *
               C48161) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C4603 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C4603 +
            (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
               C48227) *
              C258 +
          (((C21745 * C262 -
             ((C21591 * C128 + C47839 * C139) * C48246 +
              (C21591 * C118 + C47839 * C125) * C261) +
             C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                C4603 +
            (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
             C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                C48225) *
               C31728 +
           ((C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C4603 +
            (C29953 - (C29954 + C29955) + C29956 - C29957 - C29958) * C48225) *
               C48227) *
              C259 +
          ((((C21591 * C119 + C47839 * C126) * C261 +
             (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
             C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
                C4603 +
            (C21751 * C261 + C21752 * C48246 - C21753 * C262 - C21754 * C48234 +
             C21755 * C263 + C21756 * C48207) *
                C48225) *
               C31728 +
           ((C26251 * C261 + C26252 * C48246 - C22253 * C262 - C22254 * C48234 +
             C22255 * C263 + C22256 * C48207) *
                C4603 +
            (C22253 * C261 + C22254 * C48246 - C22255 * C262 - C22256 * C48234 +
             (C21591 * C1561 + C47839 * C1564) * C263 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C4603 +
            (C21739 * C116 + C21740 * C47888) * C48225) *
               C31728 +
           ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
              C107 -
          (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
           ((C21746 * C47888 + C21745 * C116) * C48225 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C4603) *
               C31728) *
              C108 +
          ((((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C4603 +
            (C21751 * C116 + C21752 * C47888) * C48225) *
               C31728 +
           ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
              C109 -
          (((C26541 + C26542) * C48225 + (C26549 + C26550) * C4603) * C48227 +
           ((C21974 * C47888 + C21973 * C116) * C48225 +
            ((C21591 * C130 + C47839 * C141) * C47888 +
             (C21591 * C120 + C47839 * C131) * C116) *
                C4603) *
               C31728) *
              C110 +
          ((((C21591 * C121 + C47839 * C132) * C116 +
             (C21591 * C133 + C47839 * C142) * C47888) *
                C4603 +
            ((C21591 * C272 + C47839 * C290) * C116 +
             (C21591 * C291 + C47839 * C302) * C47888) *
                C48225) *
               C31728 +
           (((C21591 * C421 + C47839 * C436) * C116 +
             (C21591 * C435 + C47839 * C451) * C47888) *
                C4603 +
            ((C21591 * C821 + C47839 * C830) * C116 +
             (C21591 * C831 + C47839 * C836) * C47888) *
                C48225) *
               C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C4603 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C4603 +
            (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
               C48227) *
              C48243 +
          (((C21745 * C954 -
             ((C21591 * C128 + C47839 * C139) * C947 +
              (C21591 * C118 + C47839 * C125) * C953) +
             C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                C4603 +
            (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
             C21749 * C955 - C21750 * C48207) *
                C48225) *
               C31728 +
           ((C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C4603 +
            (C27497 - (C27498 + C27499) + C27500 - C27501 - C27502) * C48225) *
               C48227) *
              C48230 +
          ((((C21591 * C119 + C47839 * C126) * C953 +
             (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
             C21752 * C948 + C21753 * C955 + C21754 * C48207) *
                C4603 +
            (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
             C21755 * C955 + C21756 * C48207) *
                C48225) *
               C31728 +
           ((C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
             C22255 * C955 + C22256 * C48207) *
                C4603 +
            (C22253 * C953 + C22254 * C947 - C22255 * C954 - C22256 * C948 +
             (C21591 * C1561 + C47839 * C1564) * C955 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1024 +
            (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
            C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
            C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
               C4603 +
           (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
            C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
            C22443 * C1028 + C22444 * C1022) *
               C48225) *
              C31728 +
          ((C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
            C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
            C22945 * C1028 + C22946 * C1022) *
               C4603 +
           (C22245 * C1024 + C22246 * C1018 - C22247 * C1025 - C22248 * C1019 +
            C22575 * C1026 + C22576 * C1020 - C22945 * C1027 - C22946 * C1021 +
            (C21591 * C22936 + C47839 * C22937) * C1028 +
            (C21591 * C22938 + C47839 * C22939) * C1022) *
               C48225) *
              C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C48243 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C48230 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C4603 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C31728 +
            ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
               C48201) *
              C1681 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C48230 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C48243 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C4603) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C4603) * C31728) *
               C48201) *
              C1682 +
          ((((C26270 + C26269) * C4603 + (C26234 + C26233) * C48225) * C31728 +
            ((C28071 + C28072) * C4603 + (C28055 + C28056) * C48225) * C48227) *
               C48243 -
           (((C28423 + C28424) * C48225 + (C28431 + C28432) * C4603) * C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C4603) * C31728) *
               C48230 +
           (((C26274 + C26273) * C4603 + (C26272 + C26271) * C48225) * C31728 +
            (((C21591 * C1861 + C47839 * C1870) * C116 +
              (C21591 * C1867 + C47839 * C1879) * C47888) *
                 C4603 +
             ((C21591 * C2241 + C47839 * C2244) * C116 +
              (C21591 * C2247 + C47839 * C2250) * C47888) *
                 C48225) *
                C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C4603 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C4603 +
            (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
               C48227) *
              C47860 * C1681 +
          (((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C4603 +
            (C27949 - (C27948 + C27947) + C27950 - C27951 - C27952) * C48225) *
               C31728 +
           ((C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C4603 +
            (C27959 - (C27960 + C27961) + C27962 - C27963 - C27964) * C48225) *
               C48227) *
              C47860 * C1682 +
          (((C27955 + C27954 - C27953 - C27956 + C27957 + C27958) * C4603 +
            (C27961 + C27960 - C27959 - C27962 + C27963 + C27964) * C48225) *
               C31728 +
           ((C28065 * C261 + C28066 * C48246 - C23599 * C262 - C23600 * C48234 +
             C23601 * C263 + C23602 * C48207) *
                C4603 +
            (C23599 * C261 + C23600 * C48246 - C23601 * C262 - C23602 * C48234 +
             (C21591 * C23586 + C47839 * C23587) * C263 +
             (C21591 * C23588 + C47839 * C23589) * C48207) *
                C48225) *
               C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C561 +
                       (C21591 * C127 + C47839 * C138) * C48175 -
                       C21739 * C562 - C21740 * C47951) *
                          C4603 +
                      (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                       C21742 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26745 + C26746 - C26747 - C26748) * C4603 +
                      (C26749 + C26750 - C26751 - C26752) * C48225) *
                         C48227) *
                        C47865 +
                    (((C21745 * C562 -
                       ((C21591 * C128 + C47839 * C139) * C48175 +
                        (C21591 * C118 + C47839 * C125) * C561) +
                       C21746 * C47951) *
                          C4603 +
                      (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                       C21748 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26753 - (C26754 + C26755) + C26756) * C4603 +
                      (C26757 - (C26758 + C26759) + C26760) * C48225) *
                         C48227) *
                        C47873 +
                    ((((C21591 * C119 + C47839 * C126) * C561 +
                       (C21591 * C129 + C47839 * C140) * C48175 -
                       C21751 * C562 - C21752 * C47951) *
                          C4603 +
                      (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                       C21754 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26761 + C26762 - C26763 - C26764) * C4603 +
                      (C26765 + C26766 - C26767 - C26768) * C48225) *
                         C48227) *
                        C2726) *
                       C3120 +
                   ((((C26747 - (C26746 + C26745) + C26748) * C4603 +
                      (C26751 - (C26750 + C26749) + C26752) * C48225) *
                         C31728 +
                     ((C28271 - (C28272 + C28273) + C28274) * C4603 +
                      (C28275 - (C28276 + C28277) + C28278) * C48225) *
                         C48227) *
                        C47865 +
                    (((C26755 + C26754 - C26753 - C26756) * C4603 +
                      (C26759 + C26758 - C26757 - C26760) * C48225) *
                         C31728 +
                     ((C28279 + C28280 - C28281 - C28282) * C4603 +
                      (C28283 + C28284 - C28285 - C28286) * C48225) *
                         C48227) *
                        C47873 +
                    (((C26763 - (C26762 + C26761) + C26764) * C4603 +
                      (C26767 - (C26766 + C26765) + C26768) * C48225) *
                         C31728 +
                     ((C26258 * C562 - (C26259 * C48175 + C26260 * C561) +
                       C26257 * C47951) *
                          C4603 +
                      ((C21591 * C1171 + C47839 * C1186) * C562 -
                       (C26257 * C48175 + C26258 * C561) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C2726) *
                       C47993)) /
                 (p * q * std::sqrt(p + q));
    d2ee[191] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C561 +
                       (C21591 * C127 + C47839 * C138) * C48175 -
                       C21739 * C562 - C21740 * C47951) *
                          C4603 +
                      (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                       C21742 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26745 + C26746 - C26747 - C26748) * C4603 +
                      (C26749 + C26750 - C26751 - C26752) * C48225) *
                         C48227) *
                        C2459 +
                    (((C21745 * C562 -
                       ((C21591 * C128 + C47839 * C139) * C48175 +
                        (C21591 * C118 + C47839 * C125) * C561) +
                       C21746 * C47951) *
                          C4603 +
                      (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                       C21748 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26753 - (C26754 + C26755) + C26756) * C4603 +
                      (C26757 - (C26758 + C26759) + C26760) * C48225) *
                         C48227) *
                        C47870) *
                       C47989 +
                   ((((C26747 - (C26746 + C26745) + C26748) * C4603 +
                      (C26751 - (C26750 + C26749) + C26752) * C48225) *
                         C31728 +
                     ((C28271 - (C28272 + C28273) + C28274) * C4603 +
                      (C28275 - (C28276 + C28277) + C28278) * C48225) *
                         C48227) *
                        C2459 +
                    (((C26755 + C26754 - C26753 - C26756) * C4603 +
                      (C26759 + C26758 - C26757 - C26760) * C48225) *
                         C31728 +
                     ((C28279 + C28280 - C28281 - C28282) * C4603 +
                      (C28283 + C28284 - C28285 - C28286) * C48225) *
                         C48227) *
                        C47870) *
                       C47996 +
                   ((((C28273 + C28272 - C28271 - C28274) * C4603 +
                      (C28277 + C28276 - C28275 - C28278) * C48225) *
                         C31728 +
                     ((C28563 + C28564 - C28565 - C28566) * C4603 +
                      (C28567 + C28568 - C28569 - C28570) * C48225) *
                         C48227) *
                        C2459 +
                    (((C28281 - (C28280 + C28279) + C28282) * C4603 +
                      (C28285 - (C28284 + C28283) + C28286) * C48225) *
                         C31728 +
                     ((C28291 * C562 - (C28429 * C48175 + C28430 * C561) +
                       C28292 * C47951) *
                          C4603 +
                      ((C21591 * C7270 + C47839 * C7272) * C562 -
                       (C28292 * C48175 + C28291 * C561) +
                       (C21591 * C7274 + C47839 * C7276) * C47951) *
                          C48225) *
                         C48227) *
                        C47870) *
                       C3628)) /
                 (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C261 +
              (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
              C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                 C4603 +
             (C21739 * C261 + C21740 * C48246 - C21741 * C262 -
              C21742 * C48234 + C21743 * C263 + C21744 * C48207) *
                 C48225) *
                C31728 +
            ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C4603 +
             (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
                C48227) *
               C2459 +
           (((C21745 * C262 -
              ((C21591 * C128 + C47839 * C139) * C48246 +
               (C21591 * C118 + C47839 * C125) * C261) +
              C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                 C4603 +
             (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
              C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                 C48225) *
                C31728 +
            ((C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C4603 +
             (C29953 - (C29954 + C29955) + C29956 - C29957 - C29958) * C48225) *
                C48227) *
               C47870) *
              C3120 +
          ((((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C4603 +
             (C27949 - (C27948 + C27947) + C27950 - C27951 - C27952) * C48225) *
                C31728 +
            ((C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C4603 +
             (C27959 - (C27960 + C27961) + C27962 - C27963 - C27964) * C48225) *
                C48227) *
               C2459 +
           (((C29949 + C29948 - C29947 - C29950 + C29951 + C29952) * C4603 +
             (C29955 + C29954 - C29953 - C29956 + C29957 + C29958) * C48225) *
                C31728 +
            ((C26253 * C261 + C26254 * C48246 - C23387 * C262 -
              C23388 * C48234 + C23389 * C263 + C23390 * C48207) *
                 C4603 +
             (C23387 * C261 + C23388 * C48246 - C23389 * C262 -
              C23390 * C48234 + (C21591 * C5880 + C47839 * C5882) * C263 +
              (C21591 * C5884 + C47839 * C5886) * C48207) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C48252 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C48245 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C4603 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C31728 +
            ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
               C48232 -
           (((C26541 + C26542) * C48225 + (C26549 + C26550) * C4603) * C48227 +
            ((C21974 * C47888 + C21973 * C116) * C48225 +
             ((C21591 * C130 + C47839 * C141) * C47888 +
              (C21591 * C120 + C47839 * C131) * C116) *
                 C4603) *
                C31728) *
               C48211) *
              C3120 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C48245 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C48252 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C4603) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C4603) * C31728) *
               C48232 +
           (((C26550 + C26549) * C4603 + (C26542 + C26541) * C48225) * C31728 +
            (((C21591 * C425 + C47839 * C444) * C116 +
              (C21591 * C443 + C47839 * C455) * C47888) *
                 C4603 +
             ((C21591 * C2031 + C47839 * C2032) * C116 +
              (C21591 * C2033 + C47839 * C2034) * C47888) *
                 C48225) *
                C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C2459 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C47870) *
              C48254 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C47870 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C2459) *
              C48251 +
          ((((C26270 + C26269) * C4603 + (C26234 + C26233) * C48225) * C31728 +
            ((C28071 + C28072) * C4603 + (C28055 + C28056) * C48225) * C48227) *
               C2459 -
           (((C28423 + C28424) * C48225 + (C28431 + C28432) * C4603) * C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C4603) * C31728) *
               C47870) *
              C48242 +
          ((((C28432 + C28431) * C4603 + (C28424 + C28423) * C48225) * C31728 +
            (((C21591 * C1865 + C47839 * C1874) * C116 +
              (C21591 * C1877 + C47839 * C1883) * C47888) *
                 C4603 +
             ((C21591 * C6796 + C47839 * C6798) * C116 +
              (C21591 * C6800 + C47839 * C6802) * C47888) *
                 C48225) *
                C48227) *
               C47870 -
           (((C28073 + C28074) * C48225 + (C28075 + C28076) * C4603) * C48227 +
            ((C28056 + C28055) * C48225 + (C28072 + C28071) * C4603) * C31728) *
               C2459) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C47865 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C47873 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C4603 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C31728 +
            ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
               C2726) *
              C47989 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C47873 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C47865 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C4603) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C4603) * C31728) *
               C2726) *
              C47996 +
          ((((C26270 + C26269) * C4603 + (C26234 + C26233) * C48225) * C31728 +
            ((C28071 + C28072) * C4603 + (C28055 + C28056) * C48225) * C48227) *
               C47865 -
           (((C28423 + C28424) * C48225 + (C28431 + C28432) * C4603) * C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C4603) * C31728) *
               C47873 +
           (((C26274 + C26273) * C4603 + (C26272 + C26271) * C48225) * C31728 +
            (((C21591 * C1861 + C47839 * C1870) * C116 +
              (C21591 * C1867 + C47839 * C1879) * C47888) *
                 C4603 +
             ((C21591 * C2241 + C47839 * C2244) * C116 +
              (C21591 * C2247 + C47839 * C2250) * C47888) *
                 C48225) *
                C48227) *
               C2726) *
              C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C48252 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C48245 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C4603 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C31728 +
            ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
               C48232 -
           (((C26541 + C26542) * C48225 + (C26549 + C26550) * C4603) * C48227 +
            ((C21974 * C47888 + C21973 * C116) * C48225 +
             ((C21591 * C130 + C47839 * C141) * C47888 +
              (C21591 * C120 + C47839 * C131) * C116) *
                 C4603) *
                C31728) *
               C48211) *
              C3120 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C48245 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C48252 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C4603) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C4603) * C31728) *
               C48232 +
           (((C26550 + C26549) * C4603 + (C26542 + C26541) * C48225) * C31728 +
            (((C21591 * C425 + C47839 * C444) * C116 +
              (C21591 * C443 + C47839 * C455) * C47888) *
                 C4603 +
             ((C21591 * C2031 + C47839 * C2032) * C116 +
              (C21591 * C2033 + C47839 * C2034) * C47888) *
                 C48225) *
                C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C261 +
              (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
              C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                 C4603 +
             (C21739 * C261 + C21740 * C48246 - C21741 * C262 -
              C21742 * C48234 + C21743 * C263 + C21744 * C48207) *
                 C48225) *
                C31728 +
            ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C4603 +
             (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
                C48227) *
               C2459 +
           (((C21745 * C262 -
              ((C21591 * C128 + C47839 * C139) * C48246 +
               (C21591 * C118 + C47839 * C125) * C261) +
              C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                 C4603 +
             (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
              C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                 C48225) *
                C31728 +
            ((C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C4603 +
             (C29953 - (C29954 + C29955) + C29956 - C29957 - C29958) * C48225) *
                C48227) *
               C47870) *
              C3120 +
          ((((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C4603 +
             (C27949 - (C27948 + C27947) + C27950 - C27951 - C27952) * C48225) *
                C31728 +
            ((C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C4603 +
             (C27959 - (C27960 + C27961) + C27962 - C27963 - C27964) * C48225) *
                C48227) *
               C2459 +
           (((C29949 + C29948 - C29947 - C29950 + C29951 + C29952) * C4603 +
             (C29955 + C29954 - C29953 - C29956 + C29957 + C29958) * C48225) *
                C31728 +
            ((C26253 * C261 + C26254 * C48246 - C23387 * C262 -
              C23388 * C48234 + C23389 * C263 + C23390 * C48207) *
                 C4603 +
             (C23387 * C261 + C23388 * C48246 - C23389 * C262 -
              C23390 * C48234 + (C21591 * C5880 + C47839 * C5882) * C263 +
              (C21591 * C5884 + C47839 * C5886) * C48207) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C4603 +
                     (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                      C21742 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26745 + C26746 - C26747 - C26748) * C4603 +
                     (C26749 + C26750 - C26751 - C26752) * C48225) *
                        C48227) *
                       C557 +
                   (((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C4603 +
                     (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                      C21748 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26753 - (C26754 + C26755) + C26756) * C4603 +
                     (C26757 - (C26758 + C26759) + C26760) * C48225) *
                        C48227) *
                       C558 +
                   ((((C21591 * C119 + C47839 * C126) * C561 +
                      (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
                      C21752 * C47951) *
                         C4603 +
                     (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                      C21754 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26761 + C26762 - C26763 - C26764) * C4603 +
                     (C26765 + C26766 - C26767 - C26768) * C48225) *
                        C48227) *
                       C559 +
                   (((C21973 * C562 -
                      ((C21591 * C130 + C47839 * C141) * C48175 +
                       (C21591 * C120 + C47839 * C131) * C561) +
                      C21974 * C47951) *
                         C4603 +
                     (C21975 * C562 - (C21974 * C48175 + C21973 * C561) +
                      C21976 * C47951) *
                         C48225) *
                        C31728 +
                    ((C26409 * C562 - (C26547 * C48175 + C26548 * C561) +
                      C26410 * C47951) *
                         C4603 +
                     ((C21591 * C1457 + C47839 * C1458) * C562 -
                      (C26410 * C48175 + C26409 * C561) +
                      (C21591 * C1459 + C47839 * C1460) * C47951) *
                         C48225) *
                        C48227) *
                       C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C1303 +
                      (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                      C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                      C21743 * C1306 - C21744 * C48217) *
                         C4603 +
                     (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 -
                      C21742 * C1298 + C21743 * C1305 + C21744 * C1299 -
                      C22441 * C1306 - C22442 * C48217) *
                         C48225) *
                        C31728 +
                    ((C27633 + C27634 - C27635 - C27636 + C27637 + C27638 -
                      C27639 - C27640) *
                         C4603 +
                     (C27641 + C27642 - C27643 - C27644 + C27645 + C27646 -
                      C27647 - C27648) *
                         C48225) *
                        C48227) *
                       C48161 +
                   (((C21745 * C1304 -
                      ((C21591 * C128 + C47839 * C139) * C1297 +
                       (C21591 * C118 + C47839 * C125) * C1303) +
                      C21746 * C1298 - C21747 * C1305 - C21748 * C1299 +
                      C21749 * C1306 + C21750 * C48217) *
                         C4603 +
                     (C21747 * C1304 - (C21746 * C1297 + C21745 * C1303) +
                      C21748 * C1298 - C21749 * C1305 - C21750 * C1299 +
                      C22685 * C1306 + C22686 * C48217) *
                         C48225) *
                        C31728 +
                    ((C22249 * C1304 - (C26249 * C1297 + C26250 * C1303) +
                      C22250 * C1298 - C22251 * C1305 - C22252 * C1299 +
                      C22837 * C1306 + C22838 * C48217) *
                         C4603 +
                     (C22251 * C1304 - (C22250 * C1297 + C22249 * C1303) +
                      C22252 * C1298 - C22837 * C1305 - C22838 * C1299 +
                      (C21591 * C6402 + C47839 * C6404) * C1306 +
                      (C21591 * C6406 + C47839 * C6408) * C48217) *
                         C48225) *
                        C48227) *
                       C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q));
    d2ee[196] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47839 * C124) * C561 +
                       (C21591 * C127 + C47839 * C138) * C48175 -
                       C21739 * C562 - C21740 * C47951) *
                          C4603 +
                      (C21739 * C561 + C21740 * C48175 - C21741 * C562 -
                       C21742 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26745 + C26746 - C26747 - C26748) * C4603 +
                      (C26749 + C26750 - C26751 - C26752) * C48225) *
                         C48227) *
                        C258 +
                    (((C21745 * C562 -
                       ((C21591 * C128 + C47839 * C139) * C48175 +
                        (C21591 * C118 + C47839 * C125) * C561) +
                       C21746 * C47951) *
                          C4603 +
                      (C21747 * C562 - (C21746 * C48175 + C21745 * C561) +
                       C21748 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26753 - (C26754 + C26755) + C26756) * C4603 +
                      (C26757 - (C26758 + C26759) + C26760) * C48225) *
                         C48227) *
                        C259 +
                    ((((C21591 * C119 + C47839 * C126) * C561 +
                       (C21591 * C129 + C47839 * C140) * C48175 -
                       C21751 * C562 - C21752 * C47951) *
                          C4603 +
                      (C21751 * C561 + C21752 * C48175 - C21753 * C562 -
                       C21754 * C47951) *
                          C48225) *
                         C31728 +
                     ((C26761 + C26762 - C26763 - C26764) * C4603 +
                      (C26765 + C26766 - C26767 - C26768) * C48225) *
                         C48227) *
                        C48201) *
                       C48176 +
                   ((((C26747 - (C26746 + C26745) + C26748) * C4603 +
                      (C26751 - (C26750 + C26749) + C26752) * C48225) *
                         C31728 +
                     ((C28271 - (C28272 + C28273) + C28274) * C4603 +
                      (C28275 - (C28276 + C28277) + C28278) * C48225) *
                         C48227) *
                        C258 +
                    (((C26755 + C26754 - C26753 - C26756) * C4603 +
                      (C26759 + C26758 - C26757 - C26760) * C48225) *
                         C31728 +
                     ((C28279 + C28280 - C28281 - C28282) * C4603 +
                      (C28283 + C28284 - C28285 - C28286) * C48225) *
                         C48227) *
                        C259 +
                    (((C26763 - (C26762 + C26761) + C26764) * C4603 +
                      (C26767 - (C26766 + C26765) + C26768) * C48225) *
                         C31728 +
                     ((C26258 * C562 - (C26259 * C48175 + C26260 * C561) +
                       C26257 * C47951) *
                          C4603 +
                      ((C21591 * C1171 + C47839 * C1186) * C562 -
                       (C26257 * C48175 + C26258 * C561) +
                       (C21591 * C1189 + C47839 * C1198) * C47951) *
                          C48225) *
                         C48227) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C1303 +
                      (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                      C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                      C21743 * C1306 - C21744 * C48217) *
                         C4603 +
                     (C21739 * C1303 + C21740 * C1297 - C21741 * C1304 -
                      C21742 * C1298 + C21743 * C1305 + C21744 * C1299 -
                      C22441 * C1306 - C22442 * C48217) *
                         C48225) *
                        C31728 +
                    ((C27633 + C27634 - C27635 - C27636 + C27637 + C27638 -
                      C27639 - C27640) *
                         C4603 +
                     (C27641 + C27642 - C27643 - C27644 + C27645 + C27646 -
                      C27647 - C27648) *
                         C48225) *
                        C48227) *
                       C47860 * C48176 +
                   (((C27635 - (C27634 + C27633) + C27636 - C27637 - C27638 +
                      C27639 + C27640) *
                         C4603 +
                     (C27643 - (C27642 + C27641) + C27644 - C27645 - C27646 +
                      C27647 + C27648) *
                         C48225) *
                        C31728 +
                    ((C22577 * C1304 - (C26255 * C1297 + C26256 * C1303) +
                      C22578 * C1298 - C22579 * C1305 - C22580 * C1299 +
                      C22581 * C1306 + C22582 * C48217) *
                         C4603 +
                     (C22579 * C1304 - (C22578 * C1297 + C22577 * C1303) +
                      C22580 * C1298 - C22581 * C1305 - C22582 * C1299 +
                      (C21591 * C22554 + C47839 * C22555) * C1306 +
                      (C21591 * C22556 + C47839 * C22557) * C48217) *
                         C48225) *
                        C48227) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C4603 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C4603 +
            (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
               C48227) *
              C258 +
          (((C21745 * C262 -
             ((C21591 * C128 + C47839 * C139) * C48246 +
              (C21591 * C118 + C47839 * C125) * C261) +
             C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                C4603 +
            (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
             C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                C48225) *
               C31728 +
           ((C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C4603 +
            (C29953 - (C29954 + C29955) + C29956 - C29957 - C29958) * C48225) *
               C48227) *
              C259 +
          ((((C21591 * C119 + C47839 * C126) * C261 +
             (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
             C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
                C4603 +
            (C21751 * C261 + C21752 * C48246 - C21753 * C262 - C21754 * C48234 +
             C21755 * C263 + C21756 * C48207) *
                C48225) *
               C31728 +
           ((C26251 * C261 + C26252 * C48246 - C22253 * C262 - C22254 * C48234 +
             C22255 * C263 + C22256 * C48207) *
                C4603 +
            (C22253 * C261 + C22254 * C48246 - C22255 * C262 - C22256 * C48234 +
             (C21591 * C1561 + C47839 * C1564) * C263 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C4603 +
            (C21739 * C116 + C21740 * C47888) * C48225) *
               C31728 +
           ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
              C107 -
          (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
           ((C21746 * C47888 + C21745 * C116) * C48225 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C4603) *
               C31728) *
              C108 +
          ((((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C4603 +
            (C21751 * C116 + C21752 * C47888) * C48225) *
               C31728 +
           ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
              C109 -
          (((C26541 + C26542) * C48225 + (C26549 + C26550) * C4603) * C48227 +
           ((C21974 * C47888 + C21973 * C116) * C48225 +
            ((C21591 * C130 + C47839 * C141) * C47888 +
             (C21591 * C120 + C47839 * C131) * C116) *
                C4603) *
               C31728) *
              C110 +
          ((((C21591 * C121 + C47839 * C132) * C116 +
             (C21591 * C133 + C47839 * C142) * C47888) *
                C4603 +
            ((C21591 * C272 + C47839 * C290) * C116 +
             (C21591 * C291 + C47839 * C302) * C47888) *
                C48225) *
               C31728 +
           (((C21591 * C421 + C47839 * C436) * C116 +
             (C21591 * C435 + C47839 * C451) * C47888) *
                C4603 +
            ((C21591 * C821 + C47839 * C830) * C116 +
             (C21591 * C831 + C47839 * C836) * C47888) *
                C48225) *
               C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C258 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C259 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C4603 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C31728 +
            ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
               C48201) *
              C48247 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C259 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C258 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C4603) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C4603) * C31728) *
               C48201) *
              C48236 +
          ((((C26270 + C26269) * C4603 + (C26234 + C26233) * C48225) * C31728 +
            ((C28071 + C28072) * C4603 + (C28055 + C28056) * C48225) * C48227) *
               C258 -
           (((C28423 + C28424) * C48225 + (C28431 + C28432) * C4603) * C48227 +
            ((C26232 + C26231) * C48225 + (C26268 + C26267) * C4603) * C31728) *
               C259 +
           (((C26274 + C26273) * C4603 + (C26272 + C26271) * C48225) * C31728 +
            (((C21591 * C1861 + C47839 * C1870) * C116 +
              (C21591 * C1867 + C47839 * C1879) * C47888) *
                 C4603 +
             ((C21591 * C2241 + C47839 * C2244) * C116 +
              (C21591 * C2247 + C47839 * C2250) * C47888) *
                 C48225) *
                C48227) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C4603 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C4603 +
            (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
               C48227) *
              C48243 +
          (((C21745 * C954 -
             ((C21591 * C128 + C47839 * C139) * C947 +
              (C21591 * C118 + C47839 * C125) * C953) +
             C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                C4603 +
            (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
             C21749 * C955 - C21750 * C48207) *
                C48225) *
               C31728 +
           ((C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C4603 +
            (C27497 - (C27498 + C27499) + C27500 - C27501 - C27502) * C48225) *
               C48227) *
              C48230 +
          ((((C21591 * C119 + C47839 * C126) * C953 +
             (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
             C21752 * C948 + C21753 * C955 + C21754 * C48207) *
                C4603 +
            (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
             C21755 * C955 + C21756 * C48207) *
                C48225) *
               C31728 +
           ((C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
             C22255 * C955 + C22256 * C48207) *
                C4603 +
            (C22253 * C953 + C22254 * C947 - C22255 * C954 - C22256 * C948 +
             (C21591 * C1561 + C47839 * C1564) * C955 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1024 +
            (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
            C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
            C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
               C4603 +
           (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
            C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
            C22443 * C1028 + C22444 * C1022) *
               C48225) *
              C31728 +
          ((C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
            C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
            C22945 * C1028 + C22946 * C1022) *
               C4603 +
           (C22245 * C1024 + C22246 * C1018 - C22247 * C1025 - C22248 * C1019 +
            C22575 * C1026 + C22576 * C1020 - C22945 * C1027 - C22946 * C1021 +
            (C21591 * C22936 + C47839 * C22937) * C1028 +
            (C21591 * C22938 + C47839 * C22939) * C1022) *
               C48225) *
              C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C4603 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C4603 +
            (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
               C48227) *
              C47860 * C48247 +
          (((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) * C4603 +
            (C27151 - (C27150 + C27149) + C27152 - C27153 - C27154) * C48225) *
               C31728 +
           ((C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) * C4603 +
            (C27161 - (C27162 + C27163) + C27164 - C27165 - C27166) * C48225) *
               C48227) *
              C47860 * C48236 +
          (((C27157 + C27156 - C27155 - C27158 + C27159 + C27160) * C4603 +
            (C27163 + C27162 - C27161 - C27164 + C27165 + C27166) * C48225) *
               C31728 +
           ((C28065 * C953 + C28066 * C947 - C23599 * C954 - C23600 * C948 +
             C23601 * C955 + C23602 * C48207) *
                C4603 +
            (C23599 * C953 + C23600 * C947 - C23601 * C954 - C23602 * C948 +
             (C21591 * C23586 + C47839 * C23587) * C955 +
             (C21591 * C23588 + C47839 * C23589) * C48207) *
                C48225) *
               C48227) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C116 +
              (C21591 * C127 + C47839 * C138) * C47888) *
                 C4603 +
             (C21739 * C116 + C21740 * C47888) * C48225) *
                C31728 +
            ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
               C557 -
           (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
            ((C21746 * C47888 + C21745 * C116) * C48225 +
             ((C21591 * C128 + C47839 * C139) * C47888 +
              (C21591 * C118 + C47839 * C125) * C116) *
                 C4603) *
                C31728) *
               C558 +
           ((((C21591 * C119 + C47839 * C126) * C116 +
              (C21591 * C129 + C47839 * C140) * C47888) *
                 C4603 +
             (C21751 * C116 + C21752 * C47888) * C48225) *
                C31728 +
            ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
               C559 -
           (((C26541 + C26542) * C48225 + (C26549 + C26550) * C4603) * C48227 +
            ((C21974 * C47888 + C21973 * C116) * C48225 +
             ((C21591 * C130 + C47839 * C141) * C47888 +
              (C21591 * C120 + C47839 * C131) * C116) *
                 C4603) *
                C31728) *
               C48211) *
              C48176 +
          ((((C26264 + C26263) * C4603 + (C26216 + C26215) * C48225) * C31728 +
            ((C26267 + C26268) * C4603 + (C26231 + C26232) * C48225) * C48227) *
               C558 -
           (((C26233 + C26234) * C48225 + (C26269 + C26270) * C4603) * C48227 +
            ((C26214 + C26213) * C48225 + (C26262 + C26261) * C4603) * C31728) *
               C557 -
           (((C26271 + C26272) * C48225 + (C26273 + C26274) * C4603) * C48227 +
            ((C26226 + C26225) * C48225 + (C26266 + C26265) * C4603) * C31728) *
               C559 +
           (((C26550 + C26549) * C4603 + (C26542 + C26541) * C48225) * C31728 +
            (((C21591 * C425 + C47839 * C444) * C116 +
              (C21591 * C443 + C47839 * C455) * C47888) *
                 C4603 +
             ((C21591 * C2031 + C47839 * C2032) * C116 +
              (C21591 * C2033 + C47839 * C2034) * C47888) *
                 C48225) *
                C48227) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47839 * C124) * C953 +
              (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
              C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                 C4603 +
             (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
              C21743 * C955 + C21744 * C48207) *
                 C48225) *
                C31728 +
            ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C4603 +
             (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
                C48227) *
               C48161 +
           (((C21745 * C954 -
              ((C21591 * C128 + C47839 * C139) * C947 +
               (C21591 * C118 + C47839 * C125) * C953) +
              C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                 C4603 +
             (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
              C21749 * C955 - C21750 * C48207) *
                 C48225) *
                C31728 +
            ((C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C4603 +
             (C27497 - (C27498 + C27499) + C27500 - C27501 - C27502) * C48225) *
                C48227) *
               C47870) *
              C48176 +
          ((((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) * C4603 +
             (C27151 - (C27150 + C27149) + C27152 - C27153 - C27154) * C48225) *
                C31728 +
            ((C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) * C4603 +
             (C27161 - (C27162 + C27163) + C27164 - C27165 - C27166) * C48225) *
                C48227) *
               C48161 +
           (((C27493 + C27492 - C27491 - C27494 + C27495 + C27496) * C4603 +
             (C27499 + C27498 - C27497 - C27500 + C27501 + C27502) * C48225) *
                C31728 +
            ((C26253 * C953 + C26254 * C947 - C23387 * C954 - C23388 * C948 +
              C23389 * C955 + C23390 * C48207) *
                 C4603 +
             (C23387 * C953 + C23388 * C947 - C23389 * C954 - C23390 * C948 +
              (C21591 * C5880 + C47839 * C5882) * C955 +
              (C21591 * C5884 + C47839 * C5886) * C48207) *
                 C48225) *
                C48227) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C4603 +
            (C21739 * C116 + C21740 * C47888) * C48225) *
               C31728 +
           ((C26261 + C26262) * C4603 + (C26213 + C26214) * C48225) * C48227) *
              C107 -
          (((C26215 + C26216) * C48225 + (C26263 + C26264) * C4603) * C48227 +
           ((C21746 * C47888 + C21745 * C116) * C48225 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C4603) *
               C31728) *
              C108 +
          ((((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C4603 +
            (C21751 * C116 + C21752 * C47888) * C48225) *
               C31728 +
           ((C26265 + C26266) * C4603 + (C26225 + C26226) * C48225) * C48227) *
              C109 -
          (((C26541 + C26542) * C48225 + (C26549 + C26550) * C4603) * C48227 +
           ((C21974 * C47888 + C21973 * C116) * C48225 +
            ((C21591 * C130 + C47839 * C141) * C47888 +
             (C21591 * C120 + C47839 * C131) * C116) *
                C4603) *
               C31728) *
              C110 +
          ((((C21591 * C121 + C47839 * C132) * C116 +
             (C21591 * C133 + C47839 * C142) * C47888) *
                C4603 +
            ((C21591 * C272 + C47839 * C290) * C116 +
             (C21591 * C291 + C47839 * C302) * C47888) *
                C48225) *
               C31728 +
           (((C21591 * C421 + C47839 * C436) * C116 +
             (C21591 * C435 + C47839 * C451) * C47888) *
                C4603 +
            ((C21591 * C821 + C47839 * C830) * C116 +
             (C21591 * C831 + C47839 * C836) * C47888) *
                C48225) *
               C48227) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C4603 +
            (C21739 * C261 + C21740 * C48246 - C21741 * C262 - C21742 * C48234 +
             C21743 * C263 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C4603 +
            (C27947 + C27948 - C27949 - C27950 + C27951 + C27952) * C48225) *
               C48227) *
              C258 +
          (((C21745 * C262 -
             ((C21591 * C128 + C47839 * C139) * C48246 +
              (C21591 * C118 + C47839 * C125) * C261) +
             C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                C4603 +
            (C21747 * C262 - (C21746 * C48246 + C21745 * C261) +
             C21748 * C48234 - C21749 * C263 - C21750 * C48207) *
                C48225) *
               C31728 +
           ((C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C4603 +
            (C29953 - (C29954 + C29955) + C29956 - C29957 - C29958) * C48225) *
               C48227) *
              C259 +
          ((((C21591 * C119 + C47839 * C126) * C261 +
             (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
             C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
                C4603 +
            (C21751 * C261 + C21752 * C48246 - C21753 * C262 - C21754 * C48234 +
             C21755 * C263 + C21756 * C48207) *
                C48225) *
               C31728 +
           ((C26251 * C261 + C26252 * C48246 - C22253 * C262 - C22254 * C48234 +
             C22255 * C263 + C22256 * C48207) *
                C4603 +
            (C22253 * C261 + C22254 * C48246 - C22255 * C262 - C22256 * C48234 +
             (C21591 * C1561 + C47839 * C1564) * C263 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C953 +
             (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
             C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                C4603 +
            (C21739 * C953 + C21740 * C947 - C21741 * C954 - C21742 * C948 +
             C21743 * C955 + C21744 * C48207) *
                C48225) *
               C31728 +
           ((C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C4603 +
            (C27149 + C27150 - C27151 - C27152 + C27153 + C27154) * C48225) *
               C48227) *
              C48243 +
          (((C21745 * C954 -
             ((C21591 * C128 + C47839 * C139) * C947 +
              (C21591 * C118 + C47839 * C125) * C953) +
             C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                C4603 +
            (C21747 * C954 - (C21746 * C947 + C21745 * C953) + C21748 * C948 -
             C21749 * C955 - C21750 * C48207) *
                C48225) *
               C31728 +
           ((C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C4603 +
            (C27497 - (C27498 + C27499) + C27500 - C27501 - C27502) * C48225) *
               C48227) *
              C48230 +
          ((((C21591 * C119 + C47839 * C126) * C953 +
             (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
             C21752 * C948 + C21753 * C955 + C21754 * C48207) *
                C4603 +
            (C21751 * C953 + C21752 * C947 - C21753 * C954 - C21754 * C948 +
             C21755 * C955 + C21756 * C48207) *
                C48225) *
               C31728 +
           ((C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
             C22255 * C955 + C22256 * C48207) *
                C4603 +
            (C22253 * C953 + C22254 * C947 - C22255 * C954 - C22256 * C948 +
             (C21591 * C1561 + C47839 * C1564) * C955 +
             (C21591 * C1567 + C47839 * C1570) * C48207) *
                C48225) *
               C48227) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1024 +
            (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
            C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
            C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
               C4603 +
           (C21739 * C1024 + C21740 * C1018 - C21741 * C1025 - C21742 * C1019 +
            C21743 * C1026 + C21744 * C1020 - C22441 * C1027 - C22442 * C1021 +
            C22443 * C1028 + C22444 * C1022) *
               C48225) *
              C31728 +
          ((C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
            C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
            C22945 * C1028 + C22946 * C1022) *
               C4603 +
           (C22245 * C1024 + C22246 * C1018 - C22247 * C1025 - C22248 * C1019 +
            C22575 * C1026 + C22576 * C1020 - C22945 * C1027 - C22946 * C1021 +
            (C21591 * C22936 + C47839 * C22937) * C1028 +
            (C21591 * C22938 + C47839 * C22939) * C1022) *
               C48225) *
              C48227) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C47047 +
            (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
            C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
               C48095 * C42726 +
           (C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C48095 *
               C42727 +
           (C31637 + C31636 - C31635 - C31638 + C31639 + C31640) * C48095 *
               C42728) *
              C47865 +
          ((C21745 * C47039 -
            ((C21591 * C128 + C47839 * C139) * C47947 +
             (C21591 * C118 + C47839 * C125) * C47047) +
            C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
               C48095 * C42726 +
           (C29611 - (C29612 + C29613) + C29614 - C29615 - C29616) * C48095 *
               C42727 +
           (C23387 * C47039 - (C26254 * C47947 + C26253 * C47047) +
            C23388 * C47954 - C23389 * C47053 - C23390 * C2723) *
               C48095 * C42728) *
              C47873 +
          (((C21591 * C119 + C47839 * C126) * C47047 +
            (C21591 * C129 + C47839 * C140) * C47947 - C21751 * C47039 -
            C21752 * C47954 + C21753 * C47053 + C21754 * C2723) *
               C48095 * C42726 +
           (C26251 * C47047 + C26252 * C47947 - C22253 * C47039 -
            C22254 * C47954 + C22255 * C47053 + C22256 * C2723) *
               C48095 * C42727 +
           (C26260 * C47047 + C26259 * C47947 - C26258 * C47039 -
            C26257 * C47954 + (C21591 * C1171 + C47839 * C1186) * C47053 +
            (C21591 * C1189 + C47839 * C1198) * C2723) *
               C48095 * C42728) *
              C2726) *
         C47906) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C47047 +
             (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
             C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                C48095 * C42726 +
            (C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C48095 *
                C42727 +
            (C31637 + C31636 - C31635 - C31638 + C31639 + C31640) * C48095 *
                C42728) *
               C2459 +
           ((C21745 * C47039 -
             ((C21591 * C128 + C47839 * C139) * C47947 +
              (C21591 * C118 + C47839 * C125) * C47047) +
             C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
                C48095 * C42726 +
            (C29611 - (C29612 + C29613) + C29614 - C29615 - C29616) * C48095 *
                C42727 +
            (C45410 - (C45411 + C45412) + C45413 - C45414 - C45415) * C48095 *
                C42728) *
               C47870) *
              C48176 +
          (((C29601 - (C29600 + C29599) + C29602 - C29603 - C29604) * C48095 *
                C42726 +
            (C31635 - (C31636 + C31637) + C31638 - C31639 - C31640) * C48095 *
                C42727 +
            (C23599 * C47039 - (C28066 * C47947 + C28065 * C47047) +
             C23600 * C47954 - C23601 * C47053 - C23602 * C2723) *
                C48095 * C42728) *
               C2459 +
           ((C29613 + C29612 - C29611 - C29614 + C29615 + C29616) * C48095 *
                C42726 +
            (C45412 + C45411 - C45410 - C45413 + C45414 + C45415) * C48095 *
                C42727 +
            (C28430 * C47047 + C28429 * C47947 - C28291 * C47039 -
             C28292 * C47954 + (C21591 * C7270 + C47839 * C7272) * C47053 +
             (C21591 * C7274 + C47839 * C7276) * C2723) *
                C48095 * C42728) *
               C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2461 +
                     (C21591 * C127 + C47839 * C138) * C48253 - C21739 * C2462 -
                     C21740 * C48249 + C21741 * C2463 + C21742 * C48239 -
                     C21743 * C2464 - C21744 * C48217) *
                        C48095 * C42726 +
                    (C30947 + C30948 - C30949 - C30950 + C30951 + C30952 -
                     C30953 - C30954) *
                        C48095 * C42727 +
                    (C26256 * C2461 + C26255 * C48253 - C22577 * C2462 -
                     C22578 * C48249 + C22579 * C2463 + C22580 * C48239 -
                     C22581 * C2464 - C22582 * C48217) *
                        C48095 * C42728) *
                       C2459 +
                   ((C21745 * C2462 -
                     ((C21591 * C128 + C47839 * C139) * C48253 +
                      (C21591 * C118 + C47839 * C125) * C2461) +
                     C21746 * C48249 - C21747 * C2463 - C21748 * C48239 +
                     C21749 * C2464 + C21750 * C48217) *
                        C48095 * C42726 +
                    (C22249 * C2462 - (C26249 * C48253 + C26250 * C2461) +
                     C22250 * C48249 - C22251 * C2463 - C22252 * C48239 +
                     C22837 * C2464 + C22838 * C48217) *
                        C48095 * C42727 +
                    (C23387 * C2462 - (C26254 * C48253 + C26253 * C2461) +
                     C23388 * C48249 - C23389 * C2463 - C23390 * C48239 +
                     (C21591 * C5880 + C47839 * C5882) * C2464 +
                     (C21591 * C5884 + C47839 * C5886) * C48217) *
                        C48095 * C42728) *
                       C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2355 +
                     (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                     C21740 * C47951) *
                        C48095 * C42726 +
                    (C29025 + C29026 - C29027 - C29028) * C48095 * C42727 +
                    (C29043 + C29042 - C29041 - C29044) * C48095 * C42728) *
                       C48252 +
                   ((C21745 * C2356 -
                     ((C21591 * C128 + C47839 * C139) * C2349 +
                      (C21591 * C118 + C47839 * C125) * C2355) +
                     C21746 * C47951) *
                        C48095 * C42726 +
                    (C29033 - (C29034 + C29035) + C29036) * C48095 * C42727 +
                    (C29051 - (C29050 + C29049) + C29052) * C48095 * C42728) *
                       C48245 +
                   (((C21591 * C119 + C47839 * C126) * C2355 +
                     (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                     C21752 * C47951) *
                        C48095 * C42726 +
                    (C29397 + C29398 - C29399 - C29400) * C48095 * C42727 +
                    (C26260 * C2355 + C26259 * C2349 - C26258 * C2356 -
                     C26257 * C47951) *
                        C48095 * C42728) *
                       C48232 +
                   ((C21973 * C2356 -
                     ((C21591 * C130 + C47839 * C141) * C2349 +
                      (C21591 * C120 + C47839 * C131) * C2355) +
                     C21974 * C47951) *
                        C48095 * C42726 +
                    (C26409 * C2356 - (C26547 * C2349 + C26548 * C2355) +
                     C26410 * C47951) *
                        C48095 * C42727 +
                    ((C21591 * C2031 + C47839 * C2032) * C2356 -
                     (C43164 * C2349 + C43165 * C2355) +
                     (C21591 * C2033 + C47839 * C2034) * C47951) *
                        C48095 * C42728) *
                       C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C48095 * C42726 +
                     (C29025 + C29026 - C29027 - C29028) * C48095 * C42727 +
                     C45002 * C42728) *
                        C2459 +
                    ((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C48095 * C42726 +
                     (C29033 - (C29034 + C29035) + C29036) * C48095 * C42727 +
                     C45003 * C42728) *
                        C47870) *
                       C48247 +
                   (((C29027 - (C29026 + C29025) + C29028) * C48095 * C42726 +
                     (C29041 - (C29042 + C29043) + C29044) * C48095 * C42727 +
                     (C31095 - (C31094 + C31093) + C31096) * C48095 * C42728) *
                        C2459 +
                    ((C29035 + C29034 - C29033 - C29036) * C48095 * C42726 +
                     (C29049 + C29050 - C29051 - C29052) * C48095 * C42727 +
                     (C44994 + C44995 - C44996 - C44997) * C48095 * C42728) *
                        C47870) *
                       C48236 +
                   ((C45002 * C42726 +
                     (C31093 + C31094 - C31095 - C31096) * C48095 * C42727 +
                     (C28070 * C2355 + C28069 * C2349 - C28068 * C2356 -
                      C28067 * C47951) *
                         C48095 * C42728) *
                        C2459 +
                    (C45003 * C42726 +
                     (C44996 - (C44995 + C44994) + C44997) * C48095 * C42727 +
                     ((C21591 * C6796 + C47839 * C6798) * C2356 -
                      (C44540 * C2349 + C44541 * C2355) +
                      (C21591 * C6800 + C47839 * C6802) * C47951) *
                         C48095 * C42728) *
                        C47870) *
                       C48210)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C48095 * C42726 +
                     (C29025 + C29026 - C29027 - C29028) * C48095 * C42727 +
                     C45002 * C42728) *
                        C47865 +
                    ((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C48095 * C42726 +
                     (C29033 - (C29034 + C29035) + C29036) * C48095 * C42727 +
                     C45003 * C42728) *
                        C47873 +
                    (((C21591 * C119 + C47839 * C126) * C2355 +
                      (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                      C21752 * C47951) *
                         C48095 * C42726 +
                     (C29397 + C29398 - C29399 - C29400) * C48095 * C42727 +
                     (C45260 + C45261 - C45262 - C45263) * C48095 * C42728) *
                        C2726) *
                       C48176 +
                   (((C29027 - (C29026 + C29025) + C29028) * C48095 * C42726 +
                     (C29041 - (C29042 + C29043) + C29044) * C48095 * C42727 +
                     (C31095 - (C31094 + C31093) + C31096) * C48095 * C42728) *
                        C47865 +
                    ((C29035 + C29034 - C29033 - C29036) * C48095 * C42726 +
                     (C29049 + C29050 - C29051 - C29052) * C48095 * C42727 +
                     (C44994 + C44995 - C44996 - C44997) * C48095 * C42728) *
                        C47873 +
                    ((C29399 - (C29398 + C29397) + C29400) * C48095 * C42726 +
                     (C45262 - (C45261 + C45260) + C45263) * C48095 * C42727 +
                     ((C21591 * C2241 + C47839 * C2244) * C2356 -
                      (C42960 * C2349 + C42961 * C2355) +
                      (C21591 * C2247 + C47839 * C2250) * C47951) *
                         C48095 * C42728) *
                        C2726) *
                       C47993)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2355 +
                     (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                     C21740 * C47951) *
                        C48095 * C42726 +
                    (C29025 + C29026 - C29027 - C29028) * C48095 * C42727 +
                    (C29043 + C29042 - C29041 - C29044) * C48095 * C42728) *
                       C48252 +
                   ((C21745 * C2356 -
                     ((C21591 * C128 + C47839 * C139) * C2349 +
                      (C21591 * C118 + C47839 * C125) * C2355) +
                     C21746 * C47951) *
                        C48095 * C42726 +
                    (C29033 - (C29034 + C29035) + C29036) * C48095 * C42727 +
                    (C29051 - (C29050 + C29049) + C29052) * C48095 * C42728) *
                       C48245 +
                   (((C21591 * C119 + C47839 * C126) * C2355 +
                     (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                     C21752 * C47951) *
                        C48095 * C42726 +
                    (C29397 + C29398 - C29399 - C29400) * C48095 * C42727 +
                    (C26260 * C2355 + C26259 * C2349 - C26258 * C2356 -
                     C26257 * C47951) *
                        C48095 * C42728) *
                       C48232 +
                   ((C21973 * C2356 -
                     ((C21591 * C130 + C47839 * C141) * C2349 +
                      (C21591 * C120 + C47839 * C131) * C2355) +
                     C21974 * C47951) *
                        C48095 * C42726 +
                    (C26409 * C2356 - (C26547 * C2349 + C26548 * C2355) +
                     C26410 * C47951) *
                        C48095 * C42727 +
                    ((C21591 * C2031 + C47839 * C2032) * C2356 -
                     (C43164 * C2349 + C43165 * C2355) +
                     (C21591 * C2033 + C47839 * C2034) * C47951) *
                        C48095 * C42728) *
                       C48211) *
                  C47906) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2461 +
                     (C21591 * C127 + C47839 * C138) * C48253 - C21739 * C2462 -
                     C21740 * C48249 + C21741 * C2463 + C21742 * C48239 -
                     C21743 * C2464 - C21744 * C48217) *
                        C48095 * C42726 +
                    (C30947 + C30948 - C30949 - C30950 + C30951 + C30952 -
                     C30953 - C30954) *
                        C48095 * C42727 +
                    (C26256 * C2461 + C26255 * C48253 - C22577 * C2462 -
                     C22578 * C48249 + C22579 * C2463 + C22580 * C48239 -
                     C22581 * C2464 - C22582 * C48217) *
                        C48095 * C42728) *
                       C2459 +
                   ((C21745 * C2462 -
                     ((C21591 * C128 + C47839 * C139) * C48253 +
                      (C21591 * C118 + C47839 * C125) * C2461) +
                     C21746 * C48249 - C21747 * C2463 - C21748 * C48239 +
                     C21749 * C2464 + C21750 * C48217) *
                        C48095 * C42726 +
                    (C22249 * C2462 - (C26249 * C48253 + C26250 * C2461) +
                     C22250 * C48249 - C22251 * C2463 - C22252 * C48239 +
                     C22837 * C2464 + C22838 * C48217) *
                        C48095 * C42727 +
                    (C23387 * C2462 - (C26254 * C48253 + C26253 * C2461) +
                     C23388 * C48249 - C23389 * C2463 - C23390 * C48239 +
                     (C21591 * C5880 + C47839 * C5882) * C2464 +
                     (C21591 * C5884 + C47839 * C5886) * C48217) *
                        C48095 * C42728) *
                       C47870) *
                  C47906) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C47047 +
             (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
             C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
                C48095 * C42726 +
            (C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C48095 *
                C42727 +
            (C31637 + C31636 - C31635 - C31638 + C31639 + C31640) * C48095 *
                C42728) *
               C48161 +
           ((C21745 * C47039 -
             ((C21591 * C128 + C47839 * C139) * C47947 +
              (C21591 * C118 + C47839 * C125) * C47047) +
             C21746 * C47954 - C21747 * C47053 - C21748 * C2723) *
                C48095 * C42726 +
            (C29611 - (C29612 + C29613) + C29614 - C29615 - C29616) * C48095 *
                C42727 +
            (C45410 - (C45411 + C45412) + C45413 - C45414 - C45415) * C48095 *
                C42728) *
               C47870) *
              C3120 +
          (((C29601 - (C29600 + C29599) + C29602 - C29603 - C29604) * C48095 *
                C42726 +
            (C31635 - (C31636 + C31637) + C31638 - C31639 - C31640) * C48095 *
                C42727 +
            (C23599 * C47039 - (C28066 * C47947 + C28065 * C47047) +
             C23600 * C47954 - C23601 * C47053 - C23602 * C2723) *
                C48095 * C42728) *
               C48161 +
           ((C29613 + C29612 - C29611 - C29614 + C29615 + C29616) * C48095 *
                C42726 +
            (C45412 + C45411 - C45410 - C45413 + C45414 + C45415) * C48095 *
                C42727 +
            (C28430 * C47047 + C28429 * C47947 - C28291 * C47039 -
             C28292 * C47954 + (C21591 * C7270 + C47839 * C7272) * C47053 +
             (C21591 * C7274 + C47839 * C7276) * C2723) *
                C48095 * C42728) *
               C47870) *
              C47993)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C47047 +
            (C21591 * C127 + C47839 * C138) * C47947 - C21739 * C47039 -
            C21740 * C47954 + C21741 * C47053 + C21742 * C2723) *
               C48095 * C42726 +
           (C29599 + C29600 - C29601 - C29602 + C29603 + C29604) * C48095 *
               C42727 +
           C46937 * C42728) *
              C47860 * C47989 +
          ((C29601 - (C29600 + C29599) + C29602 - C29603 - C29604) * C48095 *
               C42726 +
           (C31635 - (C31636 + C31637) + C31638 - C31639 - C31640) * C48095 *
               C42727 +
           (C46927 - (C46928 + C46929) + C46930 - C46931 - C46932) * C48095 *
               C42728) *
              C47860 * C47996 +
          (C46937 * C42726 +
           (C46929 + C46928 - C46927 - C46930 + C46931 + C46932) * C48095 *
               C42727 +
           (C28070 * C47047 + C28069 * C47947 - C28068 * C47039 -
            C28067 * C47954 + (C21591 * C23228 + C47839 * C23229) * C47053 +
            (C21591 * C23230 + C47839 * C23231) * C2723) *
               C48095 * C42728) *
              C47860 * C3628)) /
        (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2461 +
                     (C21591 * C127 + C47839 * C138) * C48253 - C21739 * C2462 -
                     C21740 * C48249 + C21741 * C2463 + C21742 * C48239 -
                     C21743 * C2464 - C21744 * C48217) *
                        C48095 * C42726 +
                    (C30947 + C30948 - C30949 - C30950 + C30951 + C30952 -
                     C30953 - C30954) *
                        C48095 * C42727 +
                    (C46410 + C46411 - C46412 - C46413 + C46414 + C46415 -
                     C46416 - C46417) *
                        C48095 * C42728) *
                       C47860 * C3120 +
                   ((C30949 - (C30948 + C30947) + C30950 - C30951 - C30952 +
                     C30953 + C30954) *
                        C48095 * C42726 +
                    (C46412 - (C46411 + C46410) + C46413 - C46414 - C46415 +
                     C46416 + C46417) *
                        C48095 * C42727 +
                    (C23599 * C2462 - (C28066 * C48253 + C28065 * C2461) +
                     C23600 * C48249 - C23601 * C2463 - C23602 * C48239 +
                     (C21591 * C23586 + C47839 * C23587) * C2464 +
                     (C21591 * C23588 + C47839 * C23589) * C48217) *
                        C48095 * C42728) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C48095 * C42726 +
                     (C29025 + C29026 - C29027 - C29028) * C48095 * C42727 +
                     C45002 * C42728) *
                        C48243 +
                    ((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C48095 * C42726 +
                     (C29033 - (C29034 + C29035) + C29036) * C48095 * C42727 +
                     C45003 * C42728) *
                        C48230 +
                    (((C21591 * C119 + C47839 * C126) * C2355 +
                      (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                      C21752 * C47951) *
                         C48095 * C42726 +
                     (C29397 + C29398 - C29399 - C29400) * C48095 * C42727 +
                     (C45260 + C45261 - C45262 - C45263) * C48095 * C42728) *
                        C48201) *
                       C3120 +
                   (((C29027 - (C29026 + C29025) + C29028) * C48095 * C42726 +
                     (C29041 - (C29042 + C29043) + C29044) * C48095 * C42727 +
                     (C31095 - (C31094 + C31093) + C31096) * C48095 * C42728) *
                        C48243 +
                    ((C29035 + C29034 - C29033 - C29036) * C48095 * C42726 +
                     (C29049 + C29050 - C29051 - C29052) * C48095 * C42727 +
                     (C44994 + C44995 - C44996 - C44997) * C48095 * C42728) *
                        C48230 +
                    ((C29399 - (C29398 + C29397) + C29400) * C48095 * C42726 +
                     (C45262 - (C45261 + C45260) + C45263) * C48095 * C42727 +
                     ((C21591 * C2241 + C47839 * C2244) * C2356 -
                      (C42960 * C2349 + C42961 * C2355) +
                      (C21591 * C2247 + C47839 * C2250) * C47951) *
                         C48095 * C42728) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2355 +
                     (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                     C21740 * C47951) *
                        C48095 * C42726 +
                    (C29025 + C29026 - C29027 - C29028) * C48095 * C42727 +
                    C45002 * C42728) *
                       C47860 * C48254 +
                   ((C29027 - (C29026 + C29025) + C29028) * C48095 * C42726 +
                    (C29041 - (C29042 + C29043) + C29044) * C48095 * C42727 +
                    C46523 * C42728) *
                       C47860 * C48251 +
                   (C45002 * C42726 +
                    (C31093 + C31094 - C31095 - C31096) * C48095 * C42727 +
                    (C46517 + C46518 - C46519 - C46520) * C48095 * C42728) *
                       C47860 * C48242 +
                   (C46523 * C42726 +
                    (C46519 - (C46518 + C46517) + C46520) * C48095 * C42727 +
                    ((C21591 * C28046 + C47839 * C28047) * C2356 -
                     (C44274 * C2349 + C44275 * C2355) +
                     (C21591 * C28048 + C47839 * C28049) * C47951) *
                        C48095 * C42728) *
                       C47860 * C48223)) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C48095 * C42726 +
                     (C29025 + C29026 - C29027 - C29028) * C48095 * C42727 +
                     C45002 * C42728) *
                        C48161 +
                    ((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C48095 * C42726 +
                     (C29033 - (C29034 + C29035) + C29036) * C48095 * C42727 +
                     C45003 * C42728) *
                        C47870) *
                       C47989 +
                   (((C29027 - (C29026 + C29025) + C29028) * C48095 * C42726 +
                     (C29041 - (C29042 + C29043) + C29044) * C48095 * C42727 +
                     C46523 * C42728) *
                        C48161 +
                    ((C29035 + C29034 - C29033 - C29036) * C48095 * C42726 +
                     (C29049 + C29050 - C29051 - C29052) * C48095 * C42727 +
                     (C44994 + C44995 - C44996 - C44997) * C48095 * C42728) *
                        C47870) *
                       C47996 +
                   ((C45002 * C42726 +
                     (C31093 + C31094 - C31095 - C31096) * C48095 * C42727 +
                     (C46517 + C46518 - C46519 - C46520) * C48095 * C42728) *
                        C48161 +
                    (C45003 * C42726 +
                     (C44996 - (C44995 + C44994) + C44997) * C48095 * C42727 +
                     ((C21591 * C6796 + C47839 * C6798) * C2356 -
                      (C44540 * C2349 + C44541 * C2355) +
                      (C21591 * C6800 + C47839 * C6802) * C47951) *
                         C48095 * C42728) *
                        C47870) *
                       C3628)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C2355 +
                      (C21591 * C127 + C47839 * C138) * C2349 - C21739 * C2356 -
                      C21740 * C47951) *
                         C48095 * C42726 +
                     (C29025 + C29026 - C29027 - C29028) * C48095 * C42727 +
                     C45002 * C42728) *
                        C48243 +
                    ((C21745 * C2356 -
                      ((C21591 * C128 + C47839 * C139) * C2349 +
                       (C21591 * C118 + C47839 * C125) * C2355) +
                      C21746 * C47951) *
                         C48095 * C42726 +
                     (C29033 - (C29034 + C29035) + C29036) * C48095 * C42727 +
                     C45003 * C42728) *
                        C48230 +
                    (((C21591 * C119 + C47839 * C126) * C2355 +
                      (C21591 * C129 + C47839 * C140) * C2349 - C21751 * C2356 -
                      C21752 * C47951) *
                         C48095 * C42726 +
                     (C29397 + C29398 - C29399 - C29400) * C48095 * C42727 +
                     (C45260 + C45261 - C45262 - C45263) * C48095 * C42728) *
                        C48201) *
                       C3120 +
                   (((C29027 - (C29026 + C29025) + C29028) * C48095 * C42726 +
                     (C29041 - (C29042 + C29043) + C29044) * C48095 * C42727 +
                     (C31095 - (C31094 + C31093) + C31096) * C48095 * C42728) *
                        C48243 +
                    ((C29035 + C29034 - C29033 - C29036) * C48095 * C42726 +
                     (C29049 + C29050 - C29051 - C29052) * C48095 * C42727 +
                     (C44994 + C44995 - C44996 - C44997) * C48095 * C42728) *
                        C48230 +
                    ((C29399 - (C29398 + C29397) + C29400) * C48095 * C42726 +
                     (C45262 - (C45261 + C45260) + C45263) * C48095 * C42727 +
                     ((C21591 * C2241 + C47839 * C2244) * C2356 -
                      (C42960 * C2349 + C42961 * C2355) +
                      (C21591 * C2247 + C47839 * C2250) * C47951) *
                         C48095 * C42728) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C2461 +
                     (C21591 * C127 + C47839 * C138) * C48253 - C21739 * C2462 -
                     C21740 * C48249 + C21741 * C2463 + C21742 * C48239 -
                     C21743 * C2464 - C21744 * C48217) *
                        C48095 * C42726 +
                    (C30947 + C30948 - C30949 - C30950 + C30951 + C30952 -
                     C30953 - C30954) *
                        C48095 * C42727 +
                    (C46410 + C46411 - C46412 - C46413 + C46414 + C46415 -
                     C46416 - C46417) *
                        C48095 * C42728) *
                       C47860 * C3120 +
                   ((C30949 - (C30948 + C30947) + C30950 - C30951 - C30952 +
                     C30953 + C30954) *
                        C48095 * C42726 +
                    (C46412 - (C46411 + C46410) + C46413 - C46414 - C46415 +
                     C46416 + C46417) *
                        C48095 * C42727 +
                    (C23599 * C2462 - (C28066 * C48253 + C28065 * C2461) +
                     C23600 * C48249 - C23601 * C2463 - C23602 * C48239 +
                     (C21591 * C23586 + C47839 * C23587) * C2464 +
                     (C21591 * C23588 + C47839 * C23589) * C48217) *
                        C48095 * C42728) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1303 +
            (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
            C21740 * C1298 + C21741 * C1305 + C21742 * C1299 - C21743 * C1306 -
            C21744 * C48217) *
               C48095 * C42726 +
           (C27633 + C27634 - C27635 - C27636 + C27637 + C27638 - C27639 -
            C27640) *
               C48095 * C42727 +
           (C26256 * C1303 + C26255 * C1297 - C22577 * C1304 - C22578 * C1298 +
            C22579 * C1305 + C22580 * C1299 - C22581 * C1306 -
            C22582 * C48217) *
               C48095 * C42728) *
              C48161 +
          ((C21745 * C1304 -
            ((C21591 * C128 + C47839 * C139) * C1297 +
             (C21591 * C118 + C47839 * C125) * C1303) +
            C21746 * C1298 - C21747 * C1305 - C21748 * C1299 + C21749 * C1306 +
            C21750 * C48217) *
               C48095 * C42726 +
           (C22249 * C1304 - (C26249 * C1297 + C26250 * C1303) +
            C22250 * C1298 - C22251 * C1305 - C22252 * C1299 + C22837 * C1306 +
            C22838 * C48217) *
               C48095 * C42727 +
           (C23387 * C1304 - (C26254 * C1297 + C26253 * C1303) +
            C23388 * C1298 - C23389 * C1305 - C23390 * C1299 +
            (C21591 * C5880 + C47839 * C5882) * C1306 +
            (C21591 * C5884 + C47839 * C5886) * C48217) *
               C48095 * C42728) *
              C47870) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C561 +
            (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
            C21740 * C47951) *
               C48095 * C42726 +
           (C26745 + C26746 - C26747 - C26748) * C48095 * C42727 +
           (C28273 + C28272 - C28271 - C28274) * C48095 * C42728) *
              C557 +
          ((C21745 * C562 -
            ((C21591 * C128 + C47839 * C139) * C48175 +
             (C21591 * C118 + C47839 * C125) * C561) +
            C21746 * C47951) *
               C48095 * C42726 +
           (C26753 - (C26754 + C26755) + C26756) * C48095 * C42727 +
           (C28281 - (C28280 + C28279) + C28282) * C48095 * C42728) *
              C558 +
          (((C21591 * C119 + C47839 * C126) * C561 +
            (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
            C21752 * C47951) *
               C48095 * C42726 +
           (C26761 + C26762 - C26763 - C26764) * C48095 * C42727 +
           (C26260 * C561 + C26259 * C48175 - C26258 * C562 - C26257 * C47951) *
               C48095 * C42728) *
              C559 +
          ((C21973 * C562 -
            ((C21591 * C130 + C47839 * C141) * C48175 +
             (C21591 * C120 + C47839 * C131) * C561) +
            C21974 * C47951) *
               C48095 * C42726 +
           (C26409 * C562 - (C26547 * C48175 + C26548 * C561) +
            C26410 * C47951) *
               C48095 * C42727 +
           ((C21591 * C2031 + C47839 * C2032) * C562 -
            ((C21591 * C443 + C47839 * C455) * C48175 +
             (C21591 * C425 + C47839 * C444) * C561) +
            (C21591 * C2033 + C47839 * C2034) * C47951) *
               C48095 * C42728) *
              C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C561 +
             (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
             C21740 * C47951) *
                C48095 * C42726 +
            (C26745 + C26746 - C26747 - C26748) * C48095 * C42727 +
            C44434 * C42728) *
               C48161 +
           ((C21745 * C562 -
             ((C21591 * C128 + C47839 * C139) * C48175 +
              (C21591 * C118 + C47839 * C125) * C561) +
             C21746 * C47951) *
                C48095 * C42726 +
            (C26753 - (C26754 + C26755) + C26756) * C48095 * C42727 +
            C44435 * C42728) *
               C47870) *
              C1681 +
          (((C26747 - (C26746 + C26745) + C26748) * C48095 * C42726 +
            (C28271 - (C28272 + C28273) + C28274) * C48095 * C42727 +
            (C28565 - (C28564 + C28563) + C28566) * C48095 * C42728) *
               C48161 +
           ((C26755 + C26754 - C26753 - C26756) * C48095 * C42726 +
            (C28279 + C28280 - C28281 - C28282) * C48095 * C42727 +
            (C44426 + C44427 - C44428 - C44429) * C48095 * C42728) *
               C47870) *
              C1682 +
          ((C44434 * C42726 +
            (C28563 + C28564 - C28565 - C28566) * C48095 * C42727 +
            (C28070 * C561 + C28069 * C48175 - C28068 * C562 -
             C28067 * C47951) *
                C48095 * C42728) *
               C48161 +
           (C44435 * C42726 +
            (C44428 - (C44427 + C44426) + C44429) * C48095 * C42727 +
            ((C21591 * C6796 + C47839 * C6798) * C562 -
             ((C21591 * C1877 + C47839 * C1883) * C48175 +
              (C21591 * C1865 + C47839 * C1874) * C561) +
             (C21591 * C6800 + C47839 * C6802) * C47951) *
                C48095 * C42728) *
               C47870) *
              C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C1303 +
                     (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                     C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                     C21743 * C1306 - C21744 * C48217) *
                        C48095 * C42726 +
                    (C27633 + C27634 - C27635 - C27636 + C27637 + C27638 -
                     C27639 - C27640) *
                        C48095 * C42727 +
                    (C43960 + C43961 - C43962 - C43963 + C43964 + C43965 -
                     C43966 - C43967) *
                        C48095 * C42728) *
                       C47860 * C48176 +
                   ((C27635 - (C27634 + C27633) + C27636 - C27637 - C27638 +
                     C27639 + C27640) *
                        C48095 * C42726 +
                    (C43962 - (C43961 + C43960) + C43963 - C43964 - C43965 +
                     C43966 + C43967) *
                        C48095 * C42727 +
                    (C23599 * C1304 - (C28066 * C1297 + C28065 * C1303) +
                     C23600 * C1298 - C23601 * C1305 - C23602 * C1299 +
                     (C21591 * C23586 + C47839 * C23587) * C1306 +
                     (C21591 * C23588 + C47839 * C23589) * C48217) *
                        C48095 * C42728) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C48095 * C42726 +
                     (C26745 + C26746 - C26747 - C26748) * C48095 * C42727 +
                     (C28273 + C28272 - C28271 - C28274) * C48095 * C42728) *
                        C258 +
                    ((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C48095 * C42726 +
                     (C26753 - (C26754 + C26755) + C26756) * C48095 * C42727 +
                     (C28281 - (C28280 + C28279) + C28282) * C48095 * C42728) *
                        C259 +
                    (((C21591 * C119 + C47839 * C126) * C561 +
                      (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
                      C21752 * C47951) *
                         C48095 * C42726 +
                     (C26761 + C26762 - C26763 - C26764) * C48095 * C42727 +
                     (C43314 + C43315 - C43316 - C43317) * C48095 * C42728) *
                        C48201) *
                       C48176 +
                   (((C26747 - (C26746 + C26745) + C26748) * C48095 * C42726 +
                     (C28271 - (C28272 + C28273) + C28274) * C48095 * C42727 +
                     (C28565 - (C28564 + C28563) + C28566) * C48095 * C42728) *
                        C258 +
                    ((C26755 + C26754 - C26753 - C26756) * C48095 * C42726 +
                     (C28279 + C28280 - C28281 - C28282) * C48095 * C42727 +
                     (C28430 * C561 + C28429 * C48175 - C28291 * C562 -
                      C28292 * C47951) *
                         C48095 * C42728) *
                        C259 +
                    ((C26763 - (C26762 + C26761) + C26764) * C48095 * C42726 +
                     (C43316 - (C43315 + C43314) + C43317) * C48095 * C42727 +
                     ((C21591 * C2241 + C47839 * C2244) * C562 -
                      (C42960 * C48175 + C42961 * C561) +
                      (C21591 * C2247 + C47839 * C2250) * C47951) *
                         C48095 * C42728) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C561 +
                     (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                     C21740 * C47951) *
                        C48095 * C42726 +
                    (C26745 + C26746 - C26747 - C26748) * C48095 * C42727 +
                    C44434 * C42728) *
                       C47860 * C2133 +
                   ((C26747 - (C26746 + C26745) + C26748) * C48095 * C42726 +
                    (C28271 - (C28272 + C28273) + C28274) * C48095 * C42727 +
                    C44649 * C42728) *
                       C47860 * C2134 +
                   (C44434 * C42726 +
                    (C28563 + C28564 - C28565 - C28566) * C48095 * C42727 +
                    (C44643 + C44644 - C44645 - C44646) * C48095 * C42728) *
                       C47860 * C2135 +
                   (C44649 * C42726 +
                    (C44645 - (C44644 + C44643) + C44646) * C48095 * C42727 +
                    ((C21591 * C28046 + C47839 * C28047) * C562 -
                     (C44274 * C48175 + C44275 * C561) +
                     (C21591 * C28048 + C47839 * C28049) * C47951) *
                        C48095 * C42728) *
                       C47860 * C48223)) /
                     (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21591 * C117 + C47839 * C124) * C116 +
                (C21591 * C127 + C47839 * C138) * C47888) *
                   C48095 * C42726 +
               (C26261 + C26262) * C48095 * C42727 +
               (C26270 + C26269) * C48095 * C42728) *
                  C107 -
              ((C26268 + C26267) * C48095 * C42728 +
               (C26263 + C26264) * C48095 * C42727 +
               ((C21591 * C128 + C47839 * C139) * C47888 +
                (C21591 * C118 + C47839 * C125) * C116) *
                   C48095 * C42726) *
                  C108 +
              (((C21591 * C119 + C47839 * C126) * C116 +
                (C21591 * C129 + C47839 * C140) * C47888) *
                   C48095 * C42726 +
               (C26265 + C26266) * C48095 * C42727 +
               (C26274 + C26273) * C48095 * C42728) *
                  C109 -
              (((C21591 * C443 + C47839 * C455) * C47888 +
                (C21591 * C425 + C47839 * C444) * C116) *
                   C48095 * C42728 +
               (C26549 + C26550) * C48095 * C42727 +
               ((C21591 * C130 + C47839 * C141) * C47888 +
                (C21591 * C120 + C47839 * C131) * C116) *
                   C48095 * C42726) *
                  C110 +
              (((C21591 * C121 + C47839 * C132) * C116 +
                (C21591 * C133 + C47839 * C142) * C47888) *
                   C48095 * C42726 +
               ((C21591 * C421 + C47839 * C436) * C116 +
                (C21591 * C435 + C47839 * C451) * C47888) *
                   C48095 * C42727 +
               ((C21591 * C426 + C47839 * C445) * C116 +
                (C21591 * C446 + C47839 * C456) * C47888) *
                   C48095 * C42728) *
                  C111) *
             C47906 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C21591 * C117 + C47839 * C124) * C261 +
                (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
                C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                   C48095 * C42726 +
               (C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C48095 *
                   C42727 +
               (C27955 + C27954 - C27953 - C27956 + C27957 + C27958) * C48095 *
                   C42728) *
                  C258 +
              ((C21745 * C262 -
                ((C21591 * C128 + C47839 * C139) * C48246 +
                 (C21591 * C118 + C47839 * C125) * C261) +
                C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                   C48095 * C42726 +
               (C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) *
                   C48095 * C42727 +
               (C23387 * C262 - (C26254 * C48246 + C26253 * C261) +
                C23388 * C48234 - C23389 * C263 - C23390 * C48207) *
                   C48095 * C42728) *
                  C259 +
              (((C21591 * C119 + C47839 * C126) * C261 +
                (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
                C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
                   C48095 * C42726 +
               (C26251 * C261 + C26252 * C48246 - C22253 * C262 -
                C22254 * C48234 + C22255 * C263 + C22256 * C48207) *
                   C48095 * C42727 +
               (C26260 * C261 + C26259 * C48246 - C26258 * C262 -
                C26257 * C48234 + (C21591 * C1171 + C47839 * C1186) * C263 +
                (C21591 * C1189 + C47839 * C1198) * C48207) *
                   C48095 * C42728) *
                  C48201) *
             C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C48095 * C42726 +
            (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
               C258 -
           (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C48095 * C42726) *
               C259 +
           (((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C48095 * C42726 +
            (C26265 + C26266) * C48095 * C42727 + C42959 * C42728) *
               C48201) *
              C48247 +
          (((C26264 + C26263) * C48095 * C42726 +
            (C26267 + C26268) * C48095 * C42727 +
            (C28432 + C28431) * C48095 * C42728) *
               C259 -
           ((C28072 + C28071) * C48095 * C42728 +
            (C26269 + C26270) * C48095 * C42727 +
            (C26262 + C26261) * C48095 * C42726) *
               C258 -
           ((C42962 + C42963) * C48095 * C42728 +
            (C26273 + C26274) * C48095 * C42727 +
            (C26266 + C26265) * C48095 * C42726) *
               C48201) *
              C48236 +
          ((C42957 * C42726 + (C28071 + C28072) * C48095 * C42727 +
            (C28076 + C28075) * C48095 * C42728) *
               C258 -
           (((C21591 * C1877 + C47839 * C1883) * C47888 +
             (C21591 * C1865 + C47839 * C1874) * C116) *
                C48095 * C42728 +
            (C28431 + C28432) * C48095 * C42727 + C42958 * C42726) *
               C259 +
           (C42959 * C42726 + (C42963 + C42962) * C48095 * C42727 +
            ((C21591 * C1866 + C47839 * C1875) * C116 +
             (C21591 * C1878 + C47839 * C1884) * C47888) *
                C48095 * C42728) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C48095 * C42726 +
           (C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C48095 *
               C42727 +
           (C27157 + C27156 - C27155 - C27158 + C27159 + C27160) * C48095 *
               C42728) *
              C48243 +
          ((C21745 * C954 -
            ((C21591 * C128 + C47839 * C139) * C947 +
             (C21591 * C118 + C47839 * C125) * C953) +
            C21746 * C948 - C21747 * C955 - C21748 * C48207) *
               C48095 * C42726 +
           (C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C48095 *
               C42727 +
           (C23387 * C954 - (C26254 * C947 + C26253 * C953) + C23388 * C948 -
            C23389 * C955 - C23390 * C48207) *
               C48095 * C42728) *
              C48230 +
          (((C21591 * C119 + C47839 * C126) * C953 +
            (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
            C21752 * C948 + C21753 * C955 + C21754 * C48207) *
               C48095 * C42726 +
           (C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
            C22255 * C955 + C22256 * C48207) *
               C48095 * C42727 +
           (C26260 * C953 + C26259 * C947 - C26258 * C954 - C26257 * C948 +
            (C21591 * C1171 + C47839 * C1186) * C955 +
            (C21591 * C1189 + C47839 * C1198) * C48207) *
               C48095 * C42728) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C21591 * C117 + C47839 * C124) * C1024 +
           (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
           C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
           C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
              C48095 * C42726 +
          (C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
           C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
           C22945 * C1028 + C22946 * C1022) *
              C48095 * C42727 +
          (C26256 * C1024 + C26255 * C1018 - C22577 * C1025 - C22578 * C1019 +
           C22579 * C1026 + C22580 * C1020 - C22581 * C1027 - C22582 * C1021 +
           (C21591 * C22554 + C47839 * C22555) * C1028 +
           (C21591 * C22556 + C47839 * C22557) * C1022) *
              C48095 * C42728) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C48095 * C42726 +
           (C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C48095 *
               C42727 +
           C43611 * C42728) *
              C47860 * C48247 +
          ((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) * C48095 *
               C42726 +
           (C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) * C48095 *
               C42727 +
           (C43601 - (C43602 + C43603) + C43604 - C43605 - C43606) * C48095 *
               C42728) *
              C47860 * C48236 +
          (C43611 * C42726 +
           (C43603 + C43602 - C43601 - C43604 + C43605 + C43606) * C48095 *
               C42727 +
           (C28070 * C953 + C28069 * C947 - C28068 * C954 - C28067 * C948 +
            (C21591 * C23228 + C47839 * C23229) * C955 +
            (C21591 * C23230 + C47839 * C23231) * C48207) *
               C48095 * C42728) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C48095 * C42726 +
            (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
               C48243 -
           (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C48095 * C42726) *
               C48230 +
           (((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C48095 * C42726 +
            (C26265 + C26266) * C48095 * C42727 + C42959 * C42728) *
               C48201) *
              C1681 +
          (((C26264 + C26263) * C48095 * C42726 +
            (C26267 + C26268) * C48095 * C42727 +
            (C28432 + C28431) * C48095 * C42728) *
               C48230 -
           ((C28072 + C28071) * C48095 * C42728 +
            (C26269 + C26270) * C48095 * C42727 +
            (C26262 + C26261) * C48095 * C42726) *
               C48243 -
           ((C42962 + C42963) * C48095 * C42728 +
            (C26273 + C26274) * C48095 * C42727 +
            (C26266 + C26265) * C48095 * C42726) *
               C48201) *
              C1682 +
          ((C42957 * C42726 + (C28071 + C28072) * C48095 * C42727 +
            (C28076 + C28075) * C48095 * C42728) *
               C48243 -
           (((C21591 * C1877 + C47839 * C1883) * C47888 +
             (C21591 * C1865 + C47839 * C1874) * C116) *
                C48095 * C42728 +
            (C28431 + C28432) * C48095 * C42727 + C42958 * C42726) *
               C48230 +
           (C42959 * C42726 + (C42963 + C42962) * C48095 * C42727 +
            ((C21591 * C1866 + C47839 * C1875) * C116 +
             (C21591 * C1878 + C47839 * C1884) * C47888) *
                C48095 * C42728) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C261 +
            (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
            C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
               C48095 * C42726 +
           (C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C48095 *
               C42727 +
           C44199 * C42728) *
              C47860 * C1681 +
          ((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C48095 *
               C42726 +
           (C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C48095 *
               C42727 +
           (C44189 - (C44190 + C44191) + C44192 - C44193 - C44194) * C48095 *
               C42728) *
              C47860 * C1682 +
          (C44199 * C42726 +
           (C44191 + C44190 - C44189 - C44192 + C44193 + C44194) * C48095 *
               C42727 +
           (C28070 * C261 + C28069 * C48246 - C28068 * C262 - C28067 * C48234 +
            (C21591 * C23228 + C47839 * C23229) * C263 +
            (C21591 * C23230 + C47839 * C23231) * C48207) *
               C48095 * C42728) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C116 +
            (C21591 * C127 + C47839 * C138) * C47888) *
               C48095 * C42726 +
           (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
              C47860 * C1856 -
          (C44272 * C42728 + (C26269 + C26270) * C48095 * C42727 +
           (C26262 + C26261) * C48095 * C42726) *
              C47860 * C1857 +
          (C42957 * C42726 + (C28071 + C28072) * C48095 * C42727 +
           C44273 * C42728) *
              C47860 * C1858 -
          ((C44276 + C44277) * C48095 * C42728 +
           (C28075 + C28076) * C48095 * C42727 + C44272 * C42726) *
              C47860 * C1859 +
          (C44273 * C42726 + (C44277 + C44276) * C48095 * C42727 +
           ((C21591 * C44261 + C47839 * C44262) * C116 +
            (C21591 * C44263 + C47839 * C44264) * C47888) *
               C48095 * C42728) *
              C47860 * C1860)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C953 +
                      (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
                      C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                         C48095 * C42726 +
                     (C27143 + C27144 - C27145 - C27146 + C27147 + C27148) *
                         C48095 * C42727 +
                     C43611 * C42728) *
                        C48161 +
                    ((C21745 * C954 -
                      ((C21591 * C128 + C47839 * C139) * C947 +
                       (C21591 * C118 + C47839 * C125) * C953) +
                      C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                         C48095 * C42726 +
                     (C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) *
                         C48095 * C42727 +
                     (C43856 - (C43857 + C43858) + C43859 - C43860 - C43861) *
                         C48095 * C42728) *
                        C47870) *
                       C48176 +
                   (((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) *
                         C48095 * C42726 +
                     (C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) *
                         C48095 * C42727 +
                     (C43601 - (C43602 + C43603) + C43604 - C43605 - C43606) *
                         C48095 * C42728) *
                        C48161 +
                    ((C27493 + C27492 - C27491 - C27494 + C27495 + C27496) *
                         C48095 * C42726 +
                     (C43858 + C43857 - C43856 - C43859 + C43860 + C43861) *
                         C48095 * C42727 +
                     (C28430 * C953 + C28429 * C947 - C28291 * C954 -
                      C28292 * C948 + (C21591 * C7270 + C47839 * C7272) * C955 +
                      (C21591 * C7274 + C47839 * C7276) * C48207) *
                         C48095 * C42728) *
                        C47870) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C116 +
                      (C21591 * C127 + C47839 * C138) * C47888) *
                         C48095 * C42726 +
                     (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
                        C557 -
                    (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
                     ((C21591 * C128 + C47839 * C139) * C47888 +
                      (C21591 * C118 + C47839 * C125) * C116) *
                         C48095 * C42726) *
                        C558 +
                    (((C21591 * C119 + C47839 * C126) * C116 +
                      (C21591 * C129 + C47839 * C140) * C47888) *
                         C48095 * C42726 +
                     (C26265 + C26266) * C48095 * C42727 + C42959 * C42728) *
                        C559 -
                    ((C43166 + C43167) * C48095 * C42728 +
                     (C26549 + C26550) * C48095 * C42727 +
                     ((C21591 * C130 + C47839 * C141) * C47888 +
                      (C21591 * C120 + C47839 * C131) * C116) *
                         C48095 * C42726) *
                        C48211) *
                       C48176 +
                   (((C26264 + C26263) * C48095 * C42726 +
                     (C26267 + C26268) * C48095 * C42727 +
                     (C28432 + C28431) * C48095 * C42728) *
                        C558 -
                    ((C28072 + C28071) * C48095 * C42728 +
                     (C26269 + C26270) * C48095 * C42727 +
                     (C26262 + C26261) * C48095 * C42726) *
                        C557 -
                    ((C42962 + C42963) * C48095 * C42728 +
                     (C26273 + C26274) * C48095 * C42727 +
                     (C26266 + C26265) * C48095 * C42726) *
                        C559 +
                    ((C26550 + C26549) * C48095 * C42726 +
                     (C43167 + C43166) * C48095 * C42727 +
                     ((C21591 * C2137 + C47839 * C2138) * C116 +
                      (C21591 * C2139 + C47839 * C2140) * C47888) *
                         C48095 * C42728) *
                        C48211) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C116 +
                      (C21591 * C127 + C47839 * C138) * C47888) *
                         C48095 * C42726 +
                     (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
                        C48161 -
                    (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
                     ((C21591 * C128 + C47839 * C139) * C47888 +
                      (C21591 * C118 + C47839 * C125) * C116) *
                         C48095 * C42726) *
                        C47870) *
                       C2133 +
                   (((C26264 + C26263) * C48095 * C42726 +
                     (C26267 + C26268) * C48095 * C42727 + C44539 * C42728) *
                        C47870 -
                    (C44272 * C42728 + (C26269 + C26270) * C48095 * C42727 +
                     (C26262 + C26261) * C48095 * C42726) *
                        C48161) *
                       C2134 +
                   ((C42957 * C42726 + (C28071 + C28072) * C48095 * C42727 +
                     C44273 * C42728) *
                        C48161 -
                    ((C44542 + C44543) * C48095 * C42728 +
                     (C28431 + C28432) * C48095 * C42727 + C42958 * C42726) *
                        C47870) *
                       C2135 +
                   ((C44539 * C42726 + (C44543 + C44542) * C48095 * C42727 +
                     ((C21591 * C12370 + C47839 * C12372) * C116 +
                      (C21591 * C12374 + C47839 * C12376) * C47888) *
                         C48095 * C42728) *
                        C47870 -
                    ((C44276 + C44277) * C48095 * C42728 +
                     (C28075 + C28076) * C48095 * C42727 + C44272 * C42726) *
                        C48161) *
                       C48223)) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C261 +
            (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
            C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
               C48095 * C42726 +
           (C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C48095 *
               C42727 +
           (C27955 + C27954 - C27953 - C27956 + C27957 + C27958) * C48095 *
               C42728) *
              C258 +
          ((C21745 * C262 -
            ((C21591 * C128 + C47839 * C139) * C48246 +
             (C21591 * C118 + C47839 * C125) * C261) +
            C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
               C48095 * C42726 +
           (C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C48095 *
               C42727 +
           (C23387 * C262 - (C26254 * C48246 + C26253 * C261) +
            C23388 * C48234 - C23389 * C263 - C23390 * C48207) *
               C48095 * C42728) *
              C259 +
          (((C21591 * C119 + C47839 * C126) * C261 +
            (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
            C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
               C48095 * C42726 +
           (C26251 * C261 + C26252 * C48246 - C22253 * C262 - C22254 * C48234 +
            C22255 * C263 + C22256 * C48207) *
               C48095 * C42727 +
           (C26260 * C261 + C26259 * C48246 - C26258 * C262 - C26257 * C48234 +
            (C21591 * C1171 + C47839 * C1186) * C263 +
            (C21591 * C1189 + C47839 * C1198) * C48207) *
               C48095 * C42728) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C116 +
            (C21591 * C127 + C47839 * C138) * C47888) *
               C48095 * C42726 +
           (C26261 + C26262) * C48095 * C42727 +
           (C26270 + C26269) * C48095 * C42728) *
              C107 -
          ((C26268 + C26267) * C48095 * C42728 +
           (C26263 + C26264) * C48095 * C42727 +
           ((C21591 * C128 + C47839 * C139) * C47888 +
            (C21591 * C118 + C47839 * C125) * C116) *
               C48095 * C42726) *
              C108 +
          (((C21591 * C119 + C47839 * C126) * C116 +
            (C21591 * C129 + C47839 * C140) * C47888) *
               C48095 * C42726 +
           (C26265 + C26266) * C48095 * C42727 +
           (C26274 + C26273) * C48095 * C42728) *
              C109 -
          (((C21591 * C443 + C47839 * C455) * C47888 +
            (C21591 * C425 + C47839 * C444) * C116) *
               C48095 * C42728 +
           (C26549 + C26550) * C48095 * C42727 +
           ((C21591 * C130 + C47839 * C141) * C47888 +
            (C21591 * C120 + C47839 * C131) * C116) *
               C48095 * C42726) *
              C110 +
          (((C21591 * C121 + C47839 * C132) * C116 +
            (C21591 * C133 + C47839 * C142) * C47888) *
               C48095 * C42726 +
           ((C21591 * C421 + C47839 * C436) * C116 +
            (C21591 * C435 + C47839 * C451) * C47888) *
               C48095 * C42727 +
           ((C21591 * C426 + C47839 * C445) * C116 +
            (C21591 * C446 + C47839 * C456) * C47888) *
               C48095 * C42728) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C48095 * C42726 +
           (C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C48095 *
               C42727 +
           (C27157 + C27156 - C27155 - C27158 + C27159 + C27160) * C48095 *
               C42728) *
              C48243 +
          ((C21745 * C954 -
            ((C21591 * C128 + C47839 * C139) * C947 +
             (C21591 * C118 + C47839 * C125) * C953) +
            C21746 * C948 - C21747 * C955 - C21748 * C48207) *
               C48095 * C42726 +
           (C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C48095 *
               C42727 +
           (C23387 * C954 - (C26254 * C947 + C26253 * C953) + C23388 * C948 -
            C23389 * C955 - C23390 * C48207) *
               C48095 * C42728) *
              C48230 +
          (((C21591 * C119 + C47839 * C126) * C953 +
            (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
            C21752 * C948 + C21753 * C955 + C21754 * C48207) *
               C48095 * C42726 +
           (C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
            C22255 * C955 + C22256 * C48207) *
               C48095 * C42727 +
           (C26260 * C953 + C26259 * C947 - C26258 * C954 - C26257 * C948 +
            (C21591 * C1171 + C47839 * C1186) * C955 +
            (C21591 * C1189 + C47839 * C1198) * C48207) *
               C48095 * C42728) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C117 + C47839 * C124) * C1024 +
           (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
           C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
           C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
              C48095 * C42726 +
          (C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
           C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
           C22945 * C1028 + C22946 * C1022) *
              C48095 * C42727 +
          (C26256 * C1024 + C26255 * C1018 - C22577 * C1025 - C22578 * C1019 +
           C22579 * C1026 + C22580 * C1020 - C22581 * C1027 - C22582 * C1021 +
           (C21591 * C22554 + C47839 * C22555) * C1028 +
           (C21591 * C22556 + C47839 * C22557) * C1022) *
              C48095 * C42728) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C48095 * C42726 +
            (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
               C48243 -
           (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C48095 * C42726) *
               C48230 +
           (((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C48095 * C42726 +
            (C26265 + C26266) * C48095 * C42727 + C42959 * C42728) *
               C48201) *
              C1681 +
          (((C26264 + C26263) * C48095 * C42726 +
            (C26267 + C26268) * C48095 * C42727 +
            (C28432 + C28431) * C48095 * C42728) *
               C48230 -
           ((C28072 + C28071) * C48095 * C42728 +
            (C26269 + C26270) * C48095 * C42727 +
            (C26262 + C26261) * C48095 * C42726) *
               C48243 -
           ((C42962 + C42963) * C48095 * C42728 +
            (C26273 + C26274) * C48095 * C42727 +
            (C26266 + C26265) * C48095 * C42726) *
               C48201) *
              C1682 +
          ((C42957 * C42726 + (C28071 + C28072) * C48095 * C42727 +
            (C28076 + C28075) * C48095 * C42728) *
               C48243 -
           (((C21591 * C1877 + C47839 * C1883) * C47888 +
             (C21591 * C1865 + C47839 * C1874) * C116) *
                C48095 * C42728 +
            (C28431 + C28432) * C48095 * C42727 + C42958 * C42726) *
               C48230 +
           (C42959 * C42726 + (C42963 + C42962) * C48095 * C42727 +
            ((C21591 * C1866 + C47839 * C1875) * C116 +
             (C21591 * C1878 + C47839 * C1884) * C47888) *
                C48095 * C42728) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C261 +
            (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
            C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
               C48095 * C42726 +
           (C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C48095 *
               C42727 +
           C44199 * C42728) *
              C47860 * C1681 +
          ((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C48095 *
               C42726 +
           (C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C48095 *
               C42727 +
           (C44189 - (C44190 + C44191) + C44192 - C44193 - C44194) * C48095 *
               C42728) *
              C47860 * C1682 +
          (C44199 * C42726 +
           (C44191 + C44190 - C44189 - C44192 + C44193 + C44194) * C48095 *
               C42727 +
           (C28070 * C261 + C28069 * C48246 - C28068 * C262 - C28067 * C48234 +
            (C21591 * C23228 + C47839 * C23229) * C263 +
            (C21591 * C23230 + C47839 * C23231) * C48207) *
               C48095 * C42728) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C48095 * C42726 +
                     (C26745 + C26746 - C26747 - C26748) * C48095 * C42727 +
                     C44434 * C42728) *
                        C47865 +
                    ((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C48095 * C42726 +
                     (C26753 - (C26754 + C26755) + C26756) * C48095 * C42727 +
                     C44435 * C42728) *
                        C47873 +
                    (((C21591 * C119 + C47839 * C126) * C561 +
                      (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
                      C21752 * C47951) *
                         C48095 * C42726 +
                     (C26761 + C26762 - C26763 - C26764) * C48095 * C42727 +
                     (C43314 + C43315 - C43316 - C43317) * C48095 * C42728) *
                        C2726) *
                       C3120 +
                   (((C26747 - (C26746 + C26745) + C26748) * C48095 * C42726 +
                     (C28271 - (C28272 + C28273) + C28274) * C48095 * C42727 +
                     C44649 * C42728) *
                        C47865 +
                    ((C26755 + C26754 - C26753 - C26756) * C48095 * C42726 +
                     (C28279 + C28280 - C28281 - C28282) * C48095 * C42727 +
                     (C44426 + C44427 - C44428 - C44429) * C48095 * C42728) *
                        C47873 +
                    ((C26763 - (C26762 + C26761) + C26764) * C48095 * C42726 +
                     (C43316 - (C43315 + C43314) + C43317) * C48095 * C42727 +
                     ((C21591 * C2241 + C47839 * C2244) * C562 -
                      (C42960 * C48175 + C42961 * C561) +
                      (C21591 * C2247 + C47839 * C2250) * C47951) *
                         C48095 * C42728) *
                        C2726) *
                       C47993)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C48095 * C42726 +
                     (C26745 + C26746 - C26747 - C26748) * C48095 * C42727 +
                     C44434 * C42728) *
                        C2459 +
                    ((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C48095 * C42726 +
                     (C26753 - (C26754 + C26755) + C26756) * C48095 * C42727 +
                     C44435 * C42728) *
                        C47870) *
                       C47989 +
                   (((C26747 - (C26746 + C26745) + C26748) * C48095 * C42726 +
                     (C28271 - (C28272 + C28273) + C28274) * C48095 * C42727 +
                     C44649 * C42728) *
                        C2459 +
                    ((C26755 + C26754 - C26753 - C26756) * C48095 * C42726 +
                     (C28279 + C28280 - C28281 - C28282) * C48095 * C42727 +
                     (C44426 + C44427 - C44428 - C44429) * C48095 * C42728) *
                        C47870) *
                       C47996 +
                   ((C44434 * C42726 +
                     (C28563 + C28564 - C28565 - C28566) * C48095 * C42727 +
                     (C44643 + C44644 - C44645 - C44646) * C48095 * C42728) *
                        C2459 +
                    (C44435 * C42726 +
                     (C44428 - (C44427 + C44426) + C44429) * C48095 * C42727 +
                     ((C21591 * C6796 + C47839 * C6798) * C562 -
                      (C44540 * C48175 + C44541 * C561) +
                      (C21591 * C6800 + C47839 * C6802) * C47951) *
                         C48095 * C42728) *
                        C47870) *
                       C3628)) /
                 (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C48095 * C42726 +
            (C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C48095 *
                C42727 +
            C44199 * C42728) *
               C2459 +
           ((C21745 * C262 -
             ((C21591 * C128 + C47839 * C139) * C48246 +
              (C21591 * C118 + C47839 * C125) * C261) +
             C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                C48095 * C42726 +
            (C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C48095 *
                C42727 +
            (C45660 - (C45661 + C45662) + C45663 - C45664 - C45665) * C48095 *
                C42728) *
               C47870) *
              C3120 +
          (((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C48095 *
                C42726 +
            (C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C48095 *
                C42727 +
            (C44189 - (C44190 + C44191) + C44192 - C44193 - C44194) * C48095 *
                C42728) *
               C2459 +
           ((C29949 + C29948 - C29947 - C29950 + C29951 + C29952) * C48095 *
                C42726 +
            (C45662 + C45661 - C45660 - C45663 + C45664 + C45665) * C48095 *
                C42727 +
            (C28430 * C261 + C28429 * C48246 - C28291 * C262 - C28292 * C48234 +
             (C21591 * C7270 + C47839 * C7272) * C263 +
             (C21591 * C7274 + C47839 * C7276) * C48207) *
                C48095 * C42728) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C48095 * C42726 +
            (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
               C48252 -
           (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C48095 * C42726) *
               C48245 +
           (((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C48095 * C42726 +
            (C26265 + C26266) * C48095 * C42727 + C42959 * C42728) *
               C48232 -
           ((C43166 + C43167) * C48095 * C42728 +
            (C26549 + C26550) * C48095 * C42727 +
            ((C21591 * C130 + C47839 * C141) * C47888 +
             (C21591 * C120 + C47839 * C131) * C116) *
                C48095 * C42726) *
               C48211) *
              C3120 +
          (((C26264 + C26263) * C48095 * C42726 +
            (C26267 + C26268) * C48095 * C42727 + C44539 * C42728) *
               C48245 -
           (C44272 * C42728 + (C26269 + C26270) * C48095 * C42727 +
            (C26262 + C26261) * C48095 * C42726) *
               C48252 -
           ((C42962 + C42963) * C48095 * C42728 +
            (C26273 + C26274) * C48095 * C42727 +
            (C26266 + C26265) * C48095 * C42726) *
               C48232 +
           ((C26550 + C26549) * C48095 * C42726 +
            (C43167 + C43166) * C48095 * C42727 +
            ((C21591 * C2137 + C47839 * C2138) * C116 +
             (C21591 * C2139 + C47839 * C2140) * C47888) *
                C48095 * C42728) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C48095 * C42726 +
            (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
               C2459 -
           (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C48095 * C42726) *
               C47870) *
              C48254 +
          (((C26264 + C26263) * C48095 * C42726 +
            (C26267 + C26268) * C48095 * C42727 + C44539 * C42728) *
               C47870 -
           (C44272 * C42728 + (C26269 + C26270) * C48095 * C42727 +
            (C26262 + C26261) * C48095 * C42726) *
               C2459) *
              C48251 +
          ((C42957 * C42726 + (C28071 + C28072) * C48095 * C42727 +
            C44273 * C42728) *
               C2459 -
           ((C44542 + C44543) * C48095 * C42728 +
            (C28431 + C28432) * C48095 * C42727 + C42958 * C42726) *
               C47870) *
              C48242 +
          ((C44539 * C42726 + (C44543 + C44542) * C48095 * C42727 +
            ((C21591 * C12370 + C47839 * C12372) * C116 +
             (C21591 * C12374 + C47839 * C12376) * C47888) *
                C48095 * C42728) *
               C47870 -
           ((C44276 + C44277) * C48095 * C42728 +
            (C28075 + C28076) * C48095 * C42727 + C44272 * C42726) *
               C2459) *
              C48223)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C116 +
                      (C21591 * C127 + C47839 * C138) * C47888) *
                         C48095 * C42726 +
                     (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
                        C47865 -
                    (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
                     ((C21591 * C128 + C47839 * C139) * C47888 +
                      (C21591 * C118 + C47839 * C125) * C116) *
                         C48095 * C42726) *
                        C47873 +
                    (((C21591 * C119 + C47839 * C126) * C116 +
                      (C21591 * C129 + C47839 * C140) * C47888) *
                         C48095 * C42726 +
                     (C26265 + C26266) * C48095 * C42727 + C42959 * C42728) *
                        C2726) *
                       C47989 +
                   (((C26264 + C26263) * C48095 * C42726 +
                     (C26267 + C26268) * C48095 * C42727 + C44539 * C42728) *
                        C47873 -
                    (C44272 * C42728 + (C26269 + C26270) * C48095 * C42727 +
                     (C26262 + C26261) * C48095 * C42726) *
                        C47865 -
                    ((C42962 + C42963) * C48095 * C42728 +
                     (C26273 + C26274) * C48095 * C42727 +
                     (C26266 + C26265) * C48095 * C42726) *
                        C2726) *
                       C47996 +
                   ((C42957 * C42726 + (C28071 + C28072) * C48095 * C42727 +
                     C44273 * C42728) *
                        C47865 -
                    ((C44542 + C44543) * C48095 * C42728 +
                     (C28431 + C28432) * C48095 * C42727 + C42958 * C42726) *
                        C47873 +
                    (C42959 * C42726 + (C42963 + C42962) * C48095 * C42727 +
                     ((C21591 * C1866 + C47839 * C1875) * C116 +
                      (C21591 * C1878 + C47839 * C1884) * C47888) *
                         C48095 * C42728) *
                        C2726) *
                       C3628)) /
                 (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C48095 * C42726 +
            (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
               C48252 -
           (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C48095 * C42726) *
               C48245 +
           (((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C48095 * C42726 +
            (C26265 + C26266) * C48095 * C42727 + C42959 * C42728) *
               C48232 -
           ((C43166 + C43167) * C48095 * C42728 +
            (C26549 + C26550) * C48095 * C42727 +
            ((C21591 * C130 + C47839 * C141) * C47888 +
             (C21591 * C120 + C47839 * C131) * C116) *
                C48095 * C42726) *
               C48211) *
              C3120 +
          (((C26264 + C26263) * C48095 * C42726 +
            (C26267 + C26268) * C48095 * C42727 + C44539 * C42728) *
               C48245 -
           (C44272 * C42728 + (C26269 + C26270) * C48095 * C42727 +
            (C26262 + C26261) * C48095 * C42726) *
               C48252 -
           ((C42962 + C42963) * C48095 * C42728 +
            (C26273 + C26274) * C48095 * C42727 +
            (C26266 + C26265) * C48095 * C42726) *
               C48232 +
           ((C26550 + C26549) * C48095 * C42726 +
            (C43167 + C43166) * C48095 * C42727 +
            ((C21591 * C2137 + C47839 * C2138) * C116 +
             (C21591 * C2139 + C47839 * C2140) * C47888) *
                C48095 * C42728) *
               C48211) *
              C47993)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C261 +
             (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
             C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
                C48095 * C42726 +
            (C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C48095 *
                C42727 +
            C44199 * C42728) *
               C2459 +
           ((C21745 * C262 -
             ((C21591 * C128 + C47839 * C139) * C48246 +
              (C21591 * C118 + C47839 * C125) * C261) +
             C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
                C48095 * C42726 +
            (C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C48095 *
                C42727 +
            (C45660 - (C45661 + C45662) + C45663 - C45664 - C45665) * C48095 *
                C42728) *
               C47870) *
              C3120 +
          (((C27943 - (C27942 + C27941) + C27944 - C27945 - C27946) * C48095 *
                C42726 +
            (C27953 - (C27954 + C27955) + C27956 - C27957 - C27958) * C48095 *
                C42727 +
            (C44189 - (C44190 + C44191) + C44192 - C44193 - C44194) * C48095 *
                C42728) *
               C2459 +
           ((C29949 + C29948 - C29947 - C29950 + C29951 + C29952) * C48095 *
                C42726 +
            (C45662 + C45661 - C45660 - C45663 + C45664 + C45665) * C48095 *
                C42727 +
            (C28430 * C261 + C28429 * C48246 - C28291 * C262 - C28292 * C48234 +
             (C21591 * C7270 + C47839 * C7272) * C263 +
             (C21591 * C7274 + C47839 * C7276) * C48207) *
                C48095 * C42728) *
               C47870) *
              C47993)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C561 +
            (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
            C21740 * C47951) *
               C48095 * C42726 +
           (C26745 + C26746 - C26747 - C26748) * C48095 * C42727 +
           (C28273 + C28272 - C28271 - C28274) * C48095 * C42728) *
              C557 +
          ((C21745 * C562 -
            ((C21591 * C128 + C47839 * C139) * C48175 +
             (C21591 * C118 + C47839 * C125) * C561) +
            C21746 * C47951) *
               C48095 * C42726 +
           (C26753 - (C26754 + C26755) + C26756) * C48095 * C42727 +
           (C28281 - (C28280 + C28279) + C28282) * C48095 * C42728) *
              C558 +
          (((C21591 * C119 + C47839 * C126) * C561 +
            (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
            C21752 * C47951) *
               C48095 * C42726 +
           (C26761 + C26762 - C26763 - C26764) * C48095 * C42727 +
           (C26260 * C561 + C26259 * C48175 - C26258 * C562 - C26257 * C47951) *
               C48095 * C42728) *
              C559 +
          ((C21973 * C562 -
            ((C21591 * C130 + C47839 * C141) * C48175 +
             (C21591 * C120 + C47839 * C131) * C561) +
            C21974 * C47951) *
               C48095 * C42726 +
           (C26409 * C562 - (C26547 * C48175 + C26548 * C561) +
            C26410 * C47951) *
               C48095 * C42727 +
           ((C21591 * C2031 + C47839 * C2032) * C562 -
            ((C21591 * C443 + C47839 * C455) * C48175 +
             (C21591 * C425 + C47839 * C444) * C561) +
            (C21591 * C2033 + C47839 * C2034) * C47951) *
               C48095 * C42728) *
              C48211) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C1303 +
            (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
            C21740 * C1298 + C21741 * C1305 + C21742 * C1299 - C21743 * C1306 -
            C21744 * C48217) *
               C48095 * C42726 +
           (C27633 + C27634 - C27635 - C27636 + C27637 + C27638 - C27639 -
            C27640) *
               C48095 * C42727 +
           (C26256 * C1303 + C26255 * C1297 - C22577 * C1304 - C22578 * C1298 +
            C22579 * C1305 + C22580 * C1299 - C22581 * C1306 -
            C22582 * C48217) *
               C48095 * C42728) *
              C48161 +
          ((C21745 * C1304 -
            ((C21591 * C128 + C47839 * C139) * C1297 +
             (C21591 * C118 + C47839 * C125) * C1303) +
            C21746 * C1298 - C21747 * C1305 - C21748 * C1299 + C21749 * C1306 +
            C21750 * C48217) *
               C48095 * C42726 +
           (C22249 * C1304 - (C26249 * C1297 + C26250 * C1303) +
            C22250 * C1298 - C22251 * C1305 - C22252 * C1299 + C22837 * C1306 +
            C22838 * C48217) *
               C48095 * C42727 +
           (C23387 * C1304 - (C26254 * C1297 + C26253 * C1303) +
            C23388 * C1298 - C23389 * C1305 - C23390 * C1299 +
            (C21591 * C5880 + C47839 * C5882) * C1306 +
            (C21591 * C5884 + C47839 * C5886) * C48217) *
               C48095 * C42728) *
              C47870) *
         C47906) /
            (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C561 +
                      (C21591 * C127 + C47839 * C138) * C48175 - C21739 * C562 -
                      C21740 * C47951) *
                         C48095 * C42726 +
                     (C26745 + C26746 - C26747 - C26748) * C48095 * C42727 +
                     (C28273 + C28272 - C28271 - C28274) * C48095 * C42728) *
                        C258 +
                    ((C21745 * C562 -
                      ((C21591 * C128 + C47839 * C139) * C48175 +
                       (C21591 * C118 + C47839 * C125) * C561) +
                      C21746 * C47951) *
                         C48095 * C42726 +
                     (C26753 - (C26754 + C26755) + C26756) * C48095 * C42727 +
                     (C28281 - (C28280 + C28279) + C28282) * C48095 * C42728) *
                        C259 +
                    (((C21591 * C119 + C47839 * C126) * C561 +
                      (C21591 * C129 + C47839 * C140) * C48175 - C21751 * C562 -
                      C21752 * C47951) *
                         C48095 * C42726 +
                     (C26761 + C26762 - C26763 - C26764) * C48095 * C42727 +
                     (C43314 + C43315 - C43316 - C43317) * C48095 * C42728) *
                        C48201) *
                       C48176 +
                   (((C26747 - (C26746 + C26745) + C26748) * C48095 * C42726 +
                     (C28271 - (C28272 + C28273) + C28274) * C48095 * C42727 +
                     (C28565 - (C28564 + C28563) + C28566) * C48095 * C42728) *
                        C258 +
                    ((C26755 + C26754 - C26753 - C26756) * C48095 * C42726 +
                     (C28279 + C28280 - C28281 - C28282) * C48095 * C42727 +
                     (C28430 * C561 + C28429 * C48175 - C28291 * C562 -
                      C28292 * C47951) *
                         C48095 * C42728) *
                        C259 +
                    ((C26763 - (C26762 + C26761) + C26764) * C48095 * C42726 +
                     (C43316 - (C43315 + C43314) + C43317) * C48095 * C42727 +
                     ((C21591 * C2241 + C47839 * C2244) * C562 -
                      (C42960 * C48175 + C42961 * C561) +
                      (C21591 * C2247 + C47839 * C2250) * C47951) *
                         C48095 * C42728) *
                        C48201) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47839 * C124) * C1303 +
                     (C21591 * C127 + C47839 * C138) * C1297 - C21739 * C1304 -
                     C21740 * C1298 + C21741 * C1305 + C21742 * C1299 -
                     C21743 * C1306 - C21744 * C48217) *
                        C48095 * C42726 +
                    (C27633 + C27634 - C27635 - C27636 + C27637 + C27638 -
                     C27639 - C27640) *
                        C48095 * C42727 +
                    (C43960 + C43961 - C43962 - C43963 + C43964 + C43965 -
                     C43966 - C43967) *
                        C48095 * C42728) *
                       C47860 * C48176 +
                   ((C27635 - (C27634 + C27633) + C27636 - C27637 - C27638 +
                     C27639 + C27640) *
                        C48095 * C42726 +
                    (C43962 - (C43961 + C43960) + C43963 - C43964 - C43965 +
                     C43966 + C43967) *
                        C48095 * C42727 +
                    (C23599 * C1304 - (C28066 * C1297 + C28065 * C1303) +
                     C23600 * C1298 - C23601 * C1305 - C23602 * C1299 +
                     (C21591 * C23586 + C47839 * C23587) * C1306 +
                     (C21591 * C23588 + C47839 * C23589) * C48217) *
                        C48095 * C42728) *
                       C47860 * C47993)) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C261 +
            (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
            C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
               C48095 * C42726 +
           (C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C48095 *
               C42727 +
           (C27955 + C27954 - C27953 - C27956 + C27957 + C27958) * C48095 *
               C42728) *
              C258 +
          ((C21745 * C262 -
            ((C21591 * C128 + C47839 * C139) * C48246 +
             (C21591 * C118 + C47839 * C125) * C261) +
            C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
               C48095 * C42726 +
           (C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C48095 *
               C42727 +
           (C23387 * C262 - (C26254 * C48246 + C26253 * C261) +
            C23388 * C48234 - C23389 * C263 - C23390 * C48207) *
               C48095 * C42728) *
              C259 +
          (((C21591 * C119 + C47839 * C126) * C261 +
            (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
            C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
               C48095 * C42726 +
           (C26251 * C261 + C26252 * C48246 - C22253 * C262 - C22254 * C48234 +
            C22255 * C263 + C22256 * C48207) *
               C48095 * C42727 +
           (C26260 * C261 + C26259 * C48246 - C26258 * C262 - C26257 * C48234 +
            (C21591 * C1171 + C47839 * C1186) * C263 +
            (C21591 * C1189 + C47839 * C1198) * C48207) *
               C48095 * C42728) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C116 +
            (C21591 * C127 + C47839 * C138) * C47888) *
               C48095 * C42726 +
           (C26261 + C26262) * C48095 * C42727 +
           (C26270 + C26269) * C48095 * C42728) *
              C107 -
          ((C26268 + C26267) * C48095 * C42728 +
           (C26263 + C26264) * C48095 * C42727 +
           ((C21591 * C128 + C47839 * C139) * C47888 +
            (C21591 * C118 + C47839 * C125) * C116) *
               C48095 * C42726) *
              C108 +
          (((C21591 * C119 + C47839 * C126) * C116 +
            (C21591 * C129 + C47839 * C140) * C47888) *
               C48095 * C42726 +
           (C26265 + C26266) * C48095 * C42727 +
           (C26274 + C26273) * C48095 * C42728) *
              C109 -
          (((C21591 * C443 + C47839 * C455) * C47888 +
            (C21591 * C425 + C47839 * C444) * C116) *
               C48095 * C42728 +
           (C26549 + C26550) * C48095 * C42727 +
           ((C21591 * C130 + C47839 * C141) * C47888 +
            (C21591 * C120 + C47839 * C131) * C116) *
               C48095 * C42726) *
              C110 +
          (((C21591 * C121 + C47839 * C132) * C116 +
            (C21591 * C133 + C47839 * C142) * C47888) *
               C48095 * C42726 +
           ((C21591 * C421 + C47839 * C436) * C116 +
            (C21591 * C435 + C47839 * C451) * C47888) *
               C48095 * C42727 +
           ((C21591 * C426 + C47839 * C445) * C116 +
            (C21591 * C446 + C47839 * C456) * C47888) *
               C48095 * C42728) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47839 * C124) * C116 +
             (C21591 * C127 + C47839 * C138) * C47888) *
                C48095 * C42726 +
            (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
               C258 -
           (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
            ((C21591 * C128 + C47839 * C139) * C47888 +
             (C21591 * C118 + C47839 * C125) * C116) *
                C48095 * C42726) *
               C259 +
           (((C21591 * C119 + C47839 * C126) * C116 +
             (C21591 * C129 + C47839 * C140) * C47888) *
                C48095 * C42726 +
            (C26265 + C26266) * C48095 * C42727 + C42959 * C42728) *
               C48201) *
              C48247 +
          (((C26264 + C26263) * C48095 * C42726 +
            (C26267 + C26268) * C48095 * C42727 +
            (C28432 + C28431) * C48095 * C42728) *
               C259 -
           ((C28072 + C28071) * C48095 * C42728 +
            (C26269 + C26270) * C48095 * C42727 +
            (C26262 + C26261) * C48095 * C42726) *
               C258 -
           ((C42962 + C42963) * C48095 * C42728 +
            (C26273 + C26274) * C48095 * C42727 +
            (C26266 + C26265) * C48095 * C42726) *
               C48201) *
              C48236 +
          ((C42957 * C42726 + (C28071 + C28072) * C48095 * C42727 +
            (C28076 + C28075) * C48095 * C42728) *
               C258 -
           (((C21591 * C1877 + C47839 * C1883) * C47888 +
             (C21591 * C1865 + C47839 * C1874) * C116) *
                C48095 * C42728 +
            (C28431 + C28432) * C48095 * C42727 + C42958 * C42726) *
               C259 +
           (C42959 * C42726 + (C42963 + C42962) * C48095 * C42727 +
            ((C21591 * C1866 + C47839 * C1875) * C116 +
             (C21591 * C1878 + C47839 * C1884) * C47888) *
                C48095 * C42728) *
               C48201) *
              C48210)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C48095 * C42726 +
           (C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C48095 *
               C42727 +
           (C27157 + C27156 - C27155 - C27158 + C27159 + C27160) * C48095 *
               C42728) *
              C48243 +
          ((C21745 * C954 -
            ((C21591 * C128 + C47839 * C139) * C947 +
             (C21591 * C118 + C47839 * C125) * C953) +
            C21746 * C948 - C21747 * C955 - C21748 * C48207) *
               C48095 * C42726 +
           (C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C48095 *
               C42727 +
           (C23387 * C954 - (C26254 * C947 + C26253 * C953) + C23388 * C948 -
            C23389 * C955 - C23390 * C48207) *
               C48095 * C42728) *
              C48230 +
          (((C21591 * C119 + C47839 * C126) * C953 +
            (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
            C21752 * C948 + C21753 * C955 + C21754 * C48207) *
               C48095 * C42726 +
           (C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
            C22255 * C955 + C22256 * C48207) *
               C48095 * C42727 +
           (C26260 * C953 + C26259 * C947 - C26258 * C954 - C26257 * C948 +
            (C21591 * C1171 + C47839 * C1186) * C955 +
            (C21591 * C1189 + C47839 * C1198) * C48207) *
               C48095 * C42728) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C117 + C47839 * C124) * C1024 +
           (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
           C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
           C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
              C48095 * C42726 +
          (C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
           C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
           C22945 * C1028 + C22946 * C1022) *
              C48095 * C42727 +
          (C26256 * C1024 + C26255 * C1018 - C22577 * C1025 - C22578 * C1019 +
           C22579 * C1026 + C22580 * C1020 - C22581 * C1027 - C22582 * C1021 +
           (C21591 * C22554 + C47839 * C22555) * C1028 +
           (C21591 * C22556 + C47839 * C22557) * C1022) *
              C48095 * C42728) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C48095 * C42726 +
           (C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C48095 *
               C42727 +
           C43611 * C42728) *
              C47860 * C48247 +
          ((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) * C48095 *
               C42726 +
           (C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) * C48095 *
               C42727 +
           (C43601 - (C43602 + C43603) + C43604 - C43605 - C43606) * C48095 *
               C42728) *
              C47860 * C48236 +
          (C43611 * C42726 +
           (C43603 + C43602 - C43601 - C43604 + C43605 + C43606) * C48095 *
               C42727 +
           (C28070 * C953 + C28069 * C947 - C28068 * C954 - C28067 * C948 +
            (C21591 * C23228 + C47839 * C23229) * C955 +
            (C21591 * C23230 + C47839 * C23231) * C48207) *
               C48095 * C42728) *
              C47860 * C48210)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C116 +
                      (C21591 * C127 + C47839 * C138) * C47888) *
                         C48095 * C42726 +
                     (C26261 + C26262) * C48095 * C42727 + C42957 * C42728) *
                        C557 -
                    (C42958 * C42728 + (C26263 + C26264) * C48095 * C42727 +
                     ((C21591 * C128 + C47839 * C139) * C47888 +
                      (C21591 * C118 + C47839 * C125) * C116) *
                         C48095 * C42726) *
                        C558 +
                    (((C21591 * C119 + C47839 * C126) * C116 +
                      (C21591 * C129 + C47839 * C140) * C47888) *
                         C48095 * C42726 +
                     (C26265 + C26266) * C48095 * C42727 + C42959 * C42728) *
                        C559 -
                    ((C43166 + C43167) * C48095 * C42728 +
                     (C26549 + C26550) * C48095 * C42727 +
                     ((C21591 * C130 + C47839 * C141) * C47888 +
                      (C21591 * C120 + C47839 * C131) * C116) *
                         C48095 * C42726) *
                        C48211) *
                       C48176 +
                   (((C26264 + C26263) * C48095 * C42726 +
                     (C26267 + C26268) * C48095 * C42727 +
                     (C28432 + C28431) * C48095 * C42728) *
                        C558 -
                    ((C28072 + C28071) * C48095 * C42728 +
                     (C26269 + C26270) * C48095 * C42727 +
                     (C26262 + C26261) * C48095 * C42726) *
                        C557 -
                    ((C42962 + C42963) * C48095 * C42728 +
                     (C26273 + C26274) * C48095 * C42727 +
                     (C26266 + C26265) * C48095 * C42726) *
                        C559 +
                    ((C26550 + C26549) * C48095 * C42726 +
                     (C43167 + C43166) * C48095 * C42727 +
                     ((C21591 * C2137 + C47839 * C2138) * C116 +
                      (C21591 * C2139 + C47839 * C2140) * C47888) *
                         C48095 * C42728) *
                        C48211) *
                       C47993)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47839 * C124) * C953 +
                      (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
                      C21740 * C948 + C21741 * C955 + C21742 * C48207) *
                         C48095 * C42726 +
                     (C27143 + C27144 - C27145 - C27146 + C27147 + C27148) *
                         C48095 * C42727 +
                     C43611 * C42728) *
                        C48161 +
                    ((C21745 * C954 -
                      ((C21591 * C128 + C47839 * C139) * C947 +
                       (C21591 * C118 + C47839 * C125) * C953) +
                      C21746 * C948 - C21747 * C955 - C21748 * C48207) *
                         C48095 * C42726 +
                     (C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) *
                         C48095 * C42727 +
                     (C43856 - (C43857 + C43858) + C43859 - C43860 - C43861) *
                         C48095 * C42728) *
                        C47870) *
                       C48176 +
                   (((C27145 - (C27144 + C27143) + C27146 - C27147 - C27148) *
                         C48095 * C42726 +
                     (C27155 - (C27156 + C27157) + C27158 - C27159 - C27160) *
                         C48095 * C42727 +
                     (C43601 - (C43602 + C43603) + C43604 - C43605 - C43606) *
                         C48095 * C42728) *
                        C48161 +
                    ((C27493 + C27492 - C27491 - C27494 + C27495 + C27496) *
                         C48095 * C42726 +
                     (C43858 + C43857 - C43856 - C43859 + C43860 + C43861) *
                         C48095 * C42727 +
                     (C28430 * C953 + C28429 * C947 - C28291 * C954 -
                      C28292 * C948 + (C21591 * C7270 + C47839 * C7272) * C955 +
                      (C21591 * C7274 + C47839 * C7276) * C48207) *
                         C48095 * C42728) *
                        C47870) *
                       C47993)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C116 +
            (C21591 * C127 + C47839 * C138) * C47888) *
               C48095 * C42726 +
           (C26261 + C26262) * C48095 * C42727 +
           (C26270 + C26269) * C48095 * C42728) *
              C107 -
          ((C26268 + C26267) * C48095 * C42728 +
           (C26263 + C26264) * C48095 * C42727 +
           ((C21591 * C128 + C47839 * C139) * C47888 +
            (C21591 * C118 + C47839 * C125) * C116) *
               C48095 * C42726) *
              C108 +
          (((C21591 * C119 + C47839 * C126) * C116 +
            (C21591 * C129 + C47839 * C140) * C47888) *
               C48095 * C42726 +
           (C26265 + C26266) * C48095 * C42727 +
           (C26274 + C26273) * C48095 * C42728) *
              C109 -
          (((C21591 * C443 + C47839 * C455) * C47888 +
            (C21591 * C425 + C47839 * C444) * C116) *
               C48095 * C42728 +
           (C26549 + C26550) * C48095 * C42727 +
           ((C21591 * C130 + C47839 * C141) * C47888 +
            (C21591 * C120 + C47839 * C131) * C116) *
               C48095 * C42726) *
              C110 +
          (((C21591 * C121 + C47839 * C132) * C116 +
            (C21591 * C133 + C47839 * C142) * C47888) *
               C48095 * C42726 +
           ((C21591 * C421 + C47839 * C436) * C116 +
            (C21591 * C435 + C47839 * C451) * C47888) *
               C48095 * C42727 +
           ((C21591 * C426 + C47839 * C445) * C116 +
            (C21591 * C446 + C47839 * C456) * C47888) *
               C48095 * C42728) *
              C111) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C261 +
            (C21591 * C127 + C47839 * C138) * C48246 - C21739 * C262 -
            C21740 * C48234 + C21741 * C263 + C21742 * C48207) *
               C48095 * C42726 +
           (C27941 + C27942 - C27943 - C27944 + C27945 + C27946) * C48095 *
               C42727 +
           (C27955 + C27954 - C27953 - C27956 + C27957 + C27958) * C48095 *
               C42728) *
              C258 +
          ((C21745 * C262 -
            ((C21591 * C128 + C47839 * C139) * C48246 +
             (C21591 * C118 + C47839 * C125) * C261) +
            C21746 * C48234 - C21747 * C263 - C21748 * C48207) *
               C48095 * C42726 +
           (C29947 - (C29948 + C29949) + C29950 - C29951 - C29952) * C48095 *
               C42727 +
           (C23387 * C262 - (C26254 * C48246 + C26253 * C261) +
            C23388 * C48234 - C23389 * C263 - C23390 * C48207) *
               C48095 * C42728) *
              C259 +
          (((C21591 * C119 + C47839 * C126) * C261 +
            (C21591 * C129 + C47839 * C140) * C48246 - C21751 * C262 -
            C21752 * C48234 + C21753 * C263 + C21754 * C48207) *
               C48095 * C42726 +
           (C26251 * C261 + C26252 * C48246 - C22253 * C262 - C22254 * C48234 +
            C22255 * C263 + C22256 * C48207) *
               C48095 * C42727 +
           (C26260 * C261 + C26259 * C48246 - C26258 * C262 - C26257 * C48234 +
            (C21591 * C1171 + C47839 * C1186) * C263 +
            (C21591 * C1189 + C47839 * C1198) * C48207) *
               C48095 * C42728) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47839 * C124) * C953 +
            (C21591 * C127 + C47839 * C138) * C947 - C21739 * C954 -
            C21740 * C948 + C21741 * C955 + C21742 * C48207) *
               C48095 * C42726 +
           (C27143 + C27144 - C27145 - C27146 + C27147 + C27148) * C48095 *
               C42727 +
           (C27157 + C27156 - C27155 - C27158 + C27159 + C27160) * C48095 *
               C42728) *
              C48243 +
          ((C21745 * C954 -
            ((C21591 * C128 + C47839 * C139) * C947 +
             (C21591 * C118 + C47839 * C125) * C953) +
            C21746 * C948 - C21747 * C955 - C21748 * C48207) *
               C48095 * C42726 +
           (C27491 - (C27492 + C27493) + C27494 - C27495 - C27496) * C48095 *
               C42727 +
           (C23387 * C954 - (C26254 * C947 + C26253 * C953) + C23388 * C948 -
            C23389 * C955 - C23390 * C48207) *
               C48095 * C42728) *
              C48230 +
          (((C21591 * C119 + C47839 * C126) * C953 +
            (C21591 * C129 + C47839 * C140) * C947 - C21751 * C954 -
            C21752 * C948 + C21753 * C955 + C21754 * C48207) *
               C48095 * C42726 +
           (C26251 * C953 + C26252 * C947 - C22253 * C954 - C22254 * C948 +
            C22255 * C955 + C22256 * C48207) *
               C48095 * C42727 +
           (C26260 * C953 + C26259 * C947 - C26258 * C954 - C26257 * C948 +
            (C21591 * C1171 + C47839 * C1186) * C955 +
            (C21591 * C1189 + C47839 * C1198) * C48207) *
               C48095 * C42728) *
              C48201) *
         C47906) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C21591 * C117 + C47839 * C124) * C1024 +
           (C21591 * C127 + C47839 * C138) * C1018 - C21739 * C1025 -
           C21740 * C1019 + C21741 * C1026 + C21742 * C1020 - C21743 * C1027 -
           C21744 * C1021 + C22441 * C1028 + C22442 * C1022) *
              C48095 * C42726 +
          (C26247 * C1024 + C26248 * C1018 - C22245 * C1025 - C22246 * C1019 +
           C22247 * C1026 + C22248 * C1020 - C22575 * C1027 - C22576 * C1021 +
           C22945 * C1028 + C22946 * C1022) *
              C48095 * C42727 +
          (C26256 * C1024 + C26255 * C1018 - C22577 * C1025 - C22578 * C1019 +
           C22579 * C1026 + C22580 * C1020 - C22581 * C1027 - C22582 * C1021 +
           (C21591 * C22554 + C47839 * C22555) * C1028 +
           (C21591 * C22556 + C47839 * C22557) * C1022) *
              C48095 * C42728) *
         C47860 * C47906) /
            (p * q * std::sqrt(p + q));
}
