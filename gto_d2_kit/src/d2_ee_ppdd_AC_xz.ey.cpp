/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AC_xz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_13_13(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46932 = ae * be;
    const double C46931 = ae + be;
    const double C46930 = 0 * be;
    const double C46929 = xA - xB;
    const double C46953 = ce * de;
    const double C46952 = ce + de;
    const double C46951 = 0 * de;
    const double C46950 = zC - zD;
    const double C46991 = 0 * ce;
    const double C46986 = 0 * de;
    const double C46985 = 0 * de;
    const double C47036 = 0 * de;
    const double C47088 = zP - zQ;
    const double C47087 = p + q;
    const double C47086 = p * q;
    const double C47085 = xP - xQ;
    const double C47093 = bs[3];
    const double C47104 = bs[4];
    const double C47112 = bs[5];
    const double C47131 = bs[6];
    const double C47163 = bs[7];
    const double C47284 = yP - yQ;
    const double C47534 = bs[2];
    const double C117 = bs[0];
    const double C47966 = xC - xD;
    const double C47995 = yC - yD;
    const double C48182 = yA - yB;
    const double C48187 = zA - zB;
    const double C46933 = std::pow(C46931, 2);
    const double C47955 = 2 * C46931;
    const double C46934 = C46932 * C46929;
    const double C47946 = std::pow(C46929, 2);
    const double C48268 = C46929 * be;
    const double C48267 = C46929 * ae;
    const double C46954 = std::pow(C46952, 2);
    const double C46969 = 2 * C46952;
    const double C47096 = C46952 * C46931;
    const double C138 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (xP - xQ) * (zP - zQ) * ae * ce) /
                         C46952) /
                        C46931;
    const double C46987 = C46951 / C46952;
    const double C46955 = C46953 * C46950;
    const double C46988 = C46950 * C46951;
    const double C48013 = std::pow(C46950, 2);
    const double C48096 = C46950 * de;
    const double C48094 = C46950 * ce;
    const double C46998 = C46991 / C46952;
    const double C46993 = C46950 * C46986;
    const double C47037 = C47036 / C46952;
    const double C47094 = C47088 * ce;
    const double C47326 = std::pow(C47088, 2);
    const double C47089 = 2 * C47086;
    const double C47095 = C47085 * C47088;
    const double C47114 = std::pow(C47085, 2);
    const double C47208 = C47085 * ae;
    const double C47293 = std::pow(C47284, 2);
    const double C47969 = C47966 * de;
    const double C47968 = C47966 * ce;
    const double C47967 = std::pow(C47966, 2);
    const double C47996 = std::pow(C47995, 2);
    const double C48054 = C47995 * de;
    const double C48052 = C47995 * ce;
    const double C48202 = std::pow(C48182, 2);
    const double C48302 = C48182 * be;
    const double C48300 = C48182 * ae;
    const double C48217 = std::pow(C48187, 2);
    const double C48303 = C48187 * be;
    const double C48301 = C48187 * ae;
    const double C46935 = 2 * C46933;
    const double C48269 = std::pow(C47955, -1);
    const double C47947 = C47946 * C46932;
    const double C46956 = 2 * C46954;
    const double C48280 = 4 * C46954;
    const double C47981 = std::pow(C46969, -1);
    const double C48281 = C46954 * C46969;
    const double C48277 = std::pow(C46969, -2);
    const double C46996 = C46988 / C46952;
    const double C48014 = C48013 * C46953;
    const double C48284 = std::pow(C48094, 2);
    const double C46999 = C46993 / C46952;
    const double C47098 = C47093 * C47094;
    const double C47106 = C47104 * C47094;
    const double C47117 = C47112 * C47094;
    const double C47137 = C47131 * C47094;
    const double C47172 = C47163 * C47094;
    const double C47090 = C47089 / C47087;
    const double C127 = (bs[1] * C47094 * C47089) / (C47087 * C46952);
    const double C118 = -(C47085 * bs[1] * C47089) / C47087;
    const double C263 = -(C47284 * bs[1] * C47089) / C47087;
    const double C419 = -(C47088 * bs[1] * C47089) / C47087;
    const double C47099 = C47095 * ae;
    const double C47213 = C47093 * C47208;
    const double C47216 = C47104 * C47208;
    const double C47222 = C47112 * C47208;
    const double C47236 = C47131 * C47208;
    const double C47257 = C47163 * C47208;
    const double C124 = (-(bs[1] * C47208 * C47089) / C47087) / C46931;
    const double C48270 = std::pow(C47968, 2);
    const double C47970 = C47967 * C46953;
    const double C47997 = C47996 * C46953;
    const double C48282 = std::pow(C48052, 2);
    const double C48203 = C48202 * C46932;
    const double C48218 = C48217 * C46932;
    const double C47948 = C47947 / C46931;
    const double C46990 = C46951 / C46956;
    const double C46995 = C46986 / C46956;
    const double C46994 = C46985 / C46956;
    const double C48314 = C46952 * C48280;
    const double C48315 = 4 * C48281;
    const double C47000 = 0 - C46996;
    const double C48015 = C48014 / C46952;
    const double C47003 = 0 - C46999;
    const double C47092 = -C47090;
    const double C47103 = std::pow(C47090, 4);
    const double C47130 = std::pow(C47090, 6);
    const double C139 =
        (-(C47085 * std::pow(-C47090, 3) * bs[3] * C47085 * C47088 * ae * ce) /
         C46952) /
            C46931 -
        (ae * std::pow(C47090, 2) * bs[2] * C47088 * ce) / (C46952 * C46931);
    const double C47533 = std::pow(C47090, 2);
    const double C125 =
        (C47085 * std::pow(C47090, 2) * bs[2] * C47208) / C46931 -
        (ae * bs[1] * C47089) / (C47087 * C46931);
    const double C47101 = C47099 * ce;
    const double C47971 = C47970 / C46952;
    const double C47998 = C47997 / C46952;
    const double C48204 = C48203 / C46931;
    const double C48219 = C48218 / C46931;
    const double C47949 = -C47948;
    const double C47004 = C47000 * ce;
    const double C48016 = -C48015;
    const double C47007 = C47003 * ce;
    const double C47097 = std::pow(C47092, 3);
    const double C47111 = std::pow(C47092, 5);
    const double C47162 = std::pow(C47092, 7);
    const double C47108 = C47103 * C47106;
    const double C47218 = C47103 * C47216;
    const double C47223 = C47104 * C47103;
    const double C47141 = C47130 * C47137;
    const double C47238 = C47130 * C47236;
    const double C47258 = C47131 * C47130;
    const double C47535 = C47534 * C47533;
    const double C128 = -(C47085 * C47533 * C47534 * C47094) / C46952;
    const double C273 = -(C47284 * C47533 * C47534 * C47094) / C46952;
    const double C276 = (C47284 * C47533 * C47534 * C47208) / C46931;
    const double C429 = (C47088 * C47533 * C47534 * C47208) / C46931;
    const double C432 = (ce * bs[1] * C47089) / (C47087 * C46952) -
                        (C47088 * C47533 * C47534 * C47094) / C46952;
    const double C47105 = C47104 * C47101;
    const double C47115 = C47112 * C47101;
    const double C47134 = C47131 * C47101;
    const double C47168 = C47163 * C47101;
    const double C47972 = -C47971;
    const double C47999 = -C47998;
    const double C48205 = -C48204;
    const double C48220 = -C48219;
    const double C47950 = std::exp(C47949);
    const double C47008 = C47004 / C46952;
    const double C48017 = std::exp(C48016);
    const double C47011 = C47007 / C46952;
    const double C47100 = C47097 * C47098;
    const double C47209 = C47093 * C47097;
    const double C47214 = C47097 * C47213;
    const double C293 =
        (-((yP - yQ) * C47097 * C47093 * C47101) / C46952) / C46931;
    const double C449 =
        (-(C47088 * C47097 * C47093 * C47101) / C46952) / C46931 -
        (std::pow(C47090, 2) * bs[2] * C47208 * ce) / C47096;
    const double C47119 = C47111 * C47117;
    const double C47224 = C47111 * C47222;
    const double C47237 = C47112 * C47111;
    const double C47177 = C47162 * C47172;
    const double C47260 = C47162 * C47257;
    const double C47113 = ae * C47108;
    const double C47110 = C47085 * C47108;
    const double C47669 = C47088 * C47108;
    const double C47698 = C47284 * C47108;
    const double C47219 = C47085 * C47218;
    const double C47301 = C47284 * C47218;
    const double C47325 = C47218 * ce;
    const double C47323 = C47088 * C47218;
    const double C47226 = C47085 * C47223;
    const double C47225 = C47223 * ae;
    const double C47543 = C47223 * C47114;
    const double C47641 = C47223 * C47293;
    const double C47672 = C47223 * C47326;
    const double C47699 = C47284 * C47223;
    const double C47761 = C47088 * C47223;
    const double C47760 = C47223 * ce;
    const double C47144 = C47141 * C47114;
    const double C47164 = ae * C47141;
    const double C47160 = C47085 * C47141;
    const double C47789 = C47141 * C47293;
    const double C47819 = C47284 * C47141;
    const double C47837 = C47088 * C47141;
    const double C47242 = C47085 * C47238;
    const double C47373 = C47238 * C47293;
    const double C47389 = C47284 * C47238;
    const double C47414 = C47238 * C47326;
    const double C47505 = C47238 * ce;
    const double C47503 = C47088 * C47238;
    const double C47263 = C47258 * C47114;
    const double C47262 = C47085 * C47258;
    const double C47261 = C47258 * ae;
    const double C47799 = C47258 * C47293;
    const double C47822 = C47284 * C47258;
    const double C47841 = C47258 * C47326;
    const double C119 = C47535 * C47114 - (bs[1] * C47089) / C47087;
    const double C262 = C47284 * C47085 * C47535;
    const double C264 = C47535 * C47293 - (bs[1] * C47089) / C47087;
    const double C418 = C47088 * C47085 * C47535;
    const double C420 = C47535 * C47326 - (bs[1] * C47089) / C47087;
    const double C817 = C47088 * C47284 * C47535;
    const double C47107 = C47103 * C47105;
    const double C47118 = C47111 * C47115;
    const double C47139 = C47130 * C47134;
    const double C47175 = C47162 * C47168;
    const double C47973 = std::exp(C47972);
    const double C48000 = std::exp(C47999);
    const double C48206 = std::exp(C48205);
    const double C48221 = std::exp(C48220);
    const double C21704 = C47950 * C276;
    const double C26483 = C47950 * C429;
    const double C46936 = C46934 * C47950;
    const double C48305 = C48269 * C47950;
    const double C48304 = C47950 * C48267;
    const double C4601 = -(C47950 * C48268) / C46931;
    const double C47012 = C47008 - C46995;
    const double C46957 = C46955 * C48017;
    const double C116 = -(2 * ce * de * (zC - zD) * C48017) / (ce + de);
    const double C48095 = C48017 / C46969;
    const double C48097 = C48017 * C48094;
    const double C48104 = C47981 * C48017;
    const double C48294 = C48017 * C48096;
    const double C48321 = C48277 * C48017;
    const double C48319 = C48017 * C48284;
    const double C47015 = C47011 - C46994;
    const double C140 =
        (-(ae * C47085 * C47100) / C46952) / C46931 -
        (C47097 * C47093 * C47101) / C47096 +
        C47085 * ((-(C47085 * std::pow(C47090, 4) * bs[4] * C47101) / C46952) /
                      C46931 -
                  (ae * C47100) / C47096);
    const double C129 = -(C47100 * C47114 + C47533 * C47534 * C47094) / C46952;
    const double C130 = (-2 * C47085 * C47100) / C46952 -
                        (C47085 * (C47108 * C47114 + C47100)) / C46952;
    const double C271 = -(C47284 * (C47108 * C47114 + C47100)) / C46952;
    const double C272 = -(C47284 * C47085 * C47100) / C46952;
    const double C280 = -(C47100 * C47293 + C47533 * C47534 * C47094) / C46952;
    const double C431 =
        -(C47088 * C47085 * C47100 + C47085 * C47535 * ce) / C46952;
    const double C436 = -(C47088 * (C47088 * C47100 + C47535 * ce) +
                          C47533 * C47534 * C47094 + C47088 * C47535 * ce) /
                        C46952;
    const double C825 =
        -(C47088 * C47284 * C47100 + C47284 * C47535 * ce) / C46952;
    const double C1029 = (-2 * C47284 * C47100) / C46952 -
                         (C47284 * (C47108 * C47293 + C47100)) / C46952;
    const double C47217 = C47209 * ae;
    const double C47542 = C47085 * C47209;
    const double C47630 = C47284 * C47209;
    const double C47671 = C47088 * C47209;
    const double C47670 = C47209 * ce;
    const double C430 = -(C47088 * (C47108 * C47114 + C47100) +
                          (C47535 + C47209 * C47114) * ce) /
                        C46952;
    const double C1175 = -(C47088 * (C47108 * C47293 + C47100) +
                           (C47535 + C47209 * C47293) * ce) /
                         C46952;
    const double C1868 = (-2 * (C47088 * C47100 + C47535 * ce)) / C46952 -
                         (C47088 * (C47088 * (C47088 * C47108 + C47209 * ce) +
                                    C47100 + C47088 * C47209 * ce)) /
                             C46952 -
                         ((C47535 + C47209 * C47326) * ce) / C46952;
    const double C120 =
        2 * C47085 * C47535 + C47085 * (C47535 + C47209 * C47114);
    const double C261 = C47284 * (C47535 + C47209 * C47114);
    const double C417 = C47088 * (C47535 + C47209 * C47114);
    const double C1023 =
        2 * C47284 * C47535 + C47284 * (C47535 + C47209 * C47293);
    const double C1160 = C47088 * (C47535 + C47209 * C47293);
    const double C1859 =
        2 * C47088 * C47535 + C47088 * (C47535 + C47209 * C47326);
    const double C126 =
        (C47533 * C47534 * C47208 + C47085 * (C47085 * C47214 + C47535 * ae) +
         C47085 * C47535 * ae) /
        C46931;
    const double C275 = (C47284 * (C47085 * C47214 + C47535 * ae)) / C46931;
    const double C277 = (C47533 * C47534 * C47208 + C47214 * C47293) / C46931;
    const double C428 = (C47088 * (C47085 * C47214 + C47535 * ae)) / C46931;
    const double C433 = (C47533 * C47534 * C47208 + C47214 * C47326) / C46931;
    const double C822 = (C47088 * C47284 * C47214) / C46931;
    const double C1032 =
        (2 * C47284 * C47214 + C47284 * (C47214 + C47218 * C47293)) / C46931;
    const double C1172 = (C47088 * (C47214 + C47218 * C47293)) / C46931;
    const double C1865 =
        (2 * C47088 * C47214 + C47088 * (C47214 + C47218 * C47326)) / C46931;
    const double C21706 = C47950 * C293;
    const double C26485 = C47950 * C449;
    const double C47121 = C47119 * C47114;
    const double C47132 = ae * C47119;
    const double C47128 = C47085 * C47119;
    const double C47709 = C47119 * C47293;
    const double C47735 = C47284 * C47119;
    const double C47759 = C47088 * C47119;
    const double C1036 =
        (-3 * (C47108 * C47293 + C47100)) / C46952 +
        C47284 * ((-2 * C47284 * C47108) / C46952 -
                  (C47284 * (C47119 * C47293 + C47108)) / C46952);
    const double C47227 = C47085 * C47224;
    const double C47306 = C47224 * C47293;
    const double C47329 = C47224 * C47326;
    const double C47355 = C47284 * C47224;
    const double C47413 = C47224 * ce;
    const double C47411 = C47088 * C47224;
    const double C47241 = C47237 * C47114;
    const double C47240 = C47085 * C47237;
    const double C47239 = C47237 * ae;
    const double C47718 = C47237 * C47293;
    const double C47738 = C47284 * C47237;
    const double C47762 = C47237 * C47326;
    const double C47839 = C47088 * C47237;
    const double C47838 = C47237 * ce;
    const double C47180 = C47177 * C47114;
    const double C47264 = C47085 * C47260;
    const double C47460 = C47260 * C47293;
    const double C47481 = C47284 * C47260;
    const double C47507 = C47260 * C47326;
    const double C47116 = C47113 / C47096;
    const double C281 = -(C47110 * C47293 + C47085 * C47100) / C46952;
    const double C1166 = (C47284 * C47214 + C47301 * C47326) / C46931;
    const double C47328 = C47325 / C47096;
    const double C47228 = C47226 * ae;
    const double C47548 = 2 * C47226;
    const double C47628 = C47284 * C47226;
    const double C47678 = C47088 * C47226;
    const double C47677 = C47226 * ce;
    const double C47544 = C47209 + C47543;
    const double C47642 = C47209 + C47641;
    const double C47674 = C47209 + C47672;
    const double C47717 = 2 * C47699;
    const double C47737 = C47088 * C47699;
    const double C47736 = C47699 * ce;
    const double C47766 = 2 * C47761;
    const double C47764 = C47761 * ce;
    const double C47147 = C47144 + C47119;
    const double C47169 = C47164 / C47096;
    const double C47171 = -2 * C47160;
    const double C47167 = ae * C47160;
    const double C47712 = C47160 * C47293;
    const double C47744 = C47284 * C47160;
    const double C47773 = C47088 * C47160;
    const double C47791 = C47789 + C47119;
    const double C47823 = C47088 * C47819;
    const double C47374 = C47224 + C47373;
    const double C47392 = C47389 * C47326;
    const double C47459 = 2 * C47389;
    const double C47480 = C47389 * ce;
    const double C47477 = C47088 * C47389;
    const double C47419 = C47224 + C47414;
    const double C47511 = C47505 / C47096;
    const double C47512 = 2 * C47503;
    const double C47509 = C47503 * ce;
    const double C47266 = C47237 + C47263;
    const double C47265 = C47262 * ae;
    const double C47724 = C47262 * C47293;
    const double C47747 = C47284 * C47262;
    const double C47776 = C47262 * C47326;
    const double C47800 = C47237 + C47799;
    const double C47825 = C47822 * C47326;
    const double C47847 = C47237 + C47841;
    const double C141 =
        2 * ((-(C47085 * C47107) / C46952) / C46931 - (ae * C47100) / C47096) -
        (ae * (C47108 * std::pow(C47085, 2) + C47100)) / C47096 +
        C47085 *
            ((-(ae * C47085 * C47108) / C46952) / C46931 - C47107 / C47096 +
             C47085 *
                 ((-(C47085 * std::pow(C47092, 5) * bs[5] * C47101) / C46952) /
                      C46931 -
                  (ae * C47108) / C47096));
    const double C292 = (yP - yQ) * ((-(C47085 * C47107) / C46952) / C46931 -
                                     (ae * C47100) / C47096);
    const double C294 = (-(C47107 * std::pow(yP - yQ, 2)) / C46952) / C46931 -
                        (C47097 * C47093 * C47101) / C47096;
    const double C448 = C47088 * ((-(C47085 * C47107) / C46952) / C46931 -
                                  (ae * C47100) / C47096) -
                        ((C47085 * C47097 * C47093 * C47208 +
                          bs[2] * std::pow(C47090, 2) * ae) *
                         ce) /
                            C47096;
    const double C450 = (-(C47088 * C47214 * ce) / C46952) / C46931 -
                        (C47097 * C47093 * C47101) / C47096 +
                        C47088 * ((-(C47088 * C47107) / C46952) / C46931 -
                                  (C47214 * ce) / C47096);
    const double C832 = (-(C47088 * C47284 * C47107) / C46952) / C46931 -
                        (C47284 * C47214 * ce) / C47096;
    const double C47120 = C47085 * C47118;
    const double C47129 = C47118 / C47096;
    const double C47324 = C47088 * C47118;
    const double C47354 = C47284 * C47118;
    const double C1041 =
        (-2 * C47284 * C47107) / C47096 +
        C47284 * ((-(C47118 * std::pow(C47284, 2)) / C46952) / C46931 -
                  C47107 / C47096);
    const double C1184 =
        (-(C47088 * C47301 * ce) / C46952) / C46931 -
        (C47284 * C47107) / C47096 +
        C47088 * ((-(C47088 * C47284 * C47118) / C46952) / C46931 -
                  (C47301 * ce) / C47096);
    const double C1187 =
        C47088 * ((-(C47118 * C47293) / C46952) / C46931 - C47107 / C47096) -
        ((C47214 + C47218 * C47293) * ce) / C47096;
    const double C1877 =
        2 * ((-(C47088 * C47107) / C46952) / C46931 - (C47214 * ce) / C47096) -
        ((C47214 + C47218 * std::pow(C47088, 2)) * ce) / C47096 +
        C47088 *
            ((-(C47088 * C47218 * ce) / C46952) / C46931 - C47107 / C47096 +
             C47088 * ((-(C47088 * C47118) / C46952) / C46931 -
                       (C47218 * ce) / C47096));
    const double C47143 = C47085 * C47139;
    const double C47161 = C47139 / C47096;
    const double C47363 = C47139 * C47293;
    const double C47387 = C47284 * C47139;
    const double C47412 = C47088 * C47139;
    const double C47179 = C47085 * C47175;
    const double C47449 = C47175 * C47293;
    const double C47479 = C47284 * C47175;
    const double C47504 = C47088 * C47175;
    const double C47975 = C47973 * C47968;
    const double C47974 = C47973 / C46969;
    const double C47983 = C47981 * C47973;
    const double C48273 = C47973 * C47969;
    const double C48312 = C48277 * C47973;
    const double C48306 = C47973 * C48270;
    const double C48053 = C48000 / C46969;
    const double C48055 = C48000 * C48052;
    const double C48062 = C47981 * C48000;
    const double C48288 = C48000 * C48054;
    const double C48318 = C48277 * C48000;
    const double C48316 = C48000 * C48282;
    const double C48336 = C48269 * C48206;
    const double C48335 = C48206 * C48300;
    const double C15915 = -(C48206 * C48302) / C46931;
    const double C48338 = C48269 * C48221;
    const double C48337 = C48221 * C48301;
    const double C31851 = -(C48221 * C48303) / C46931;
    const double C115 = ((0 * ae) / C46931 - C46936 / C46933) / (2 * C46931) -
                        (0 * be) / C46931;
    const double C4605 =
        (-C46930 / C46931) / (2 * C46931) -
        ((C47950 - (C46929 * 2 * C46936) / C46931) * be) / C46931;
    const double C4606 =
        (-(2 * C46936) / C46931) / (2 * C46931) - (0 * be) / C46931;
    const double C15917 =
        ((C47950 - (C46929 * 2 * C46936) / C46931) * ae) / C46931 -
        C46930 / C46935;
    const double C15918 = (0 * ae) / C46931 - C46936 / C46933;
    const double C21591 = -(2 * C46936) / C46931;
    const double C114 =
        (((C47950 - (C46929 * 2 * C46936) / C46931) * ae) / C46931 -
         C46930 / C46935) /
            (2 * C46931) -
        ((C46929 * ((0 * ae) / C46931 - C46936 / C46933) + C48305) * be) /
            C46931;
    const double C103 = C48305 / C47955;
    const double C101 = C47950 / C47955 - (C48304 * C48268) / C46933;
    const double C102 = C48304 / C46935 - (C48305 * C48268) / C46931;
    const double C15913 = C48304 / C46931;
    const double C4759 = C4601 * C293;
    const double C4755 = C4601 * C276;
    const double C10637 = C4601 * C449;
    const double C10633 = C4601 * C429;
    const double C47017 = C47012 / C46969;
    const double C47016 = C46950 * C47012;
    const double C46970 = 2 * C46957;
    const double C46992 = C46957 / C46954;
    const double C416 = ((0 * ce) / C46952 - C46957 / C46954) / (2 * C46952) +
                        (0 * ce) / C46952;
    const double C665 =
        ((C48017 - (C46950 * 2 * C46957) / C46952) * ce) / C46952 -
        C46951 / C46956;
    const double C666 = (0 * ce) / C46952 - C46957 / C46954;
    const double C1669 = (C48017 * std::pow(C48096, 2)) / C46954 + C48095;
    const double C48098 = C48097 * C48096;
    const double C48103 = C48097 / C46956;
    const double C48287 = C48097 / C46952;
    const double C48285 = C47981 * C48097;
    const double C415 =
        (((C48017 - (C46950 * 2 * C46957) / C46952) * ce) / C46952 -
         C46951 / C46956) /
            (2 * C46952) +
        ((C46950 * ((0 * ce) / C46952 - C46957 / C46954) + C48104) * ce) /
            C46952;
    const double C48105 = C48104 * C48096;
    const double C48298 = C48094 * C48104;
    const double C48297 = 2 * C48104;
    const double C48334 = C48104 / C48280;
    const double C1851 = C48104 / C48315;
    const double C3625 = C48104 / C46969;
    const double C48330 = C48294 / C46952;
    const double C1670 = (-2 * C47981 * C48294) / C46952;
    const double C48346 = C48319 / C46954;
    const double C47021 = C47015 + C46987;
    const double C47220 = C47219 + C47217;
    const double C437 = -(C47088 * (C47088 * C47110 + C47542 * ce) +
                          C47085 * C47100 + C47088 * C47542 * ce) /
                        C46952;
    const double C826 =
        -(C47088 * C47284 * C47110 + C47284 * C47542 * ce) / C46952;
    const double C265 = C47085 * C47535 + C47542 * C47293;
    const double C421 = C47085 * C47535 + C47542 * C47326;
    const double C818 = C47088 * C47284 * C47542;
    const double C1022 =
        2 * C47284 * C47542 + C47284 * (C47542 + C47226 * C47293);
    const double C1159 = C47088 * (C47542 + C47226 * C47293);
    const double C1858 =
        2 * C47088 * C47542 + C47088 * (C47542 + C47226 * C47326);
    const double C1169 = -(C47088 * (C47088 * C47284 * C47108 + C47630 * ce) +
                           C47284 * C47100 + C47088 * C47630 * ce) /
                         C46952;
    const double C2245 =
        (-2 * (C47088 * C47698 + C47630 * ce)) / C46952 -
        (C47088 * (C47088 * (C47088 * C47284 * C47119 + C47699 * ce) + C47698 +
                   C47088 * C47699 * ce)) /
            C46952 -
        ((C47630 + C47699 * C47326) * ce) / C46952;
    const double C1157 = C47284 * C47535 + C47630 * C47326;
    const double C2239 =
        2 * C47088 * C47630 + C47088 * (C47630 + C47699 * C47326);
    const double C47673 = C47669 + C47670;
    const double C4771 = C4601 * C275;
    const double C4757 = C48305 * C275;
    const double C16069 = C48305 * C275;
    const double C21716 = C47950 * C275;
    const double C4769 = C4601 * C277;
    const double C21708 = C47950 * C277;
    const double C10647 = C4601 * C428;
    const double C10631 = C48305 * C428;
    const double C26491 = C47950 * C428;
    const double C32147 = C48305 * C428;
    const double C10639 = C4601 * C433;
    const double C26487 = C47950 * C433;
    const double C5441 = C4601 * C822;
    const double C22249 = C47950 * C822;
    const double C5711 = C4601 * C1032;
    const double C21714 = C47950 * C1032;
    const double C5897 = C4601 * C1172;
    const double C22255 = C47950 * C1172;
    const double C12381 = C4601 * C1865;
    const double C28253 = C47950 * C1865;
    const double C47123 = C47121 + C47108;
    const double C47135 = C47132 / C47096;
    const double C47136 = -2 * C47128;
    const double C47133 = ae * C47128;
    const double C47676 = C47088 * C47128;
    const double C47701 = C47284 * C47128;
    const double C1028 = (-2 * C47284 * C47110) / C46952 -
                         (C47284 * (C47128 * C47293 + C47110)) / C46952;
    const double C1037 =
        (-3 * (C47128 * C47293 + C47110)) / C46952 +
        C47284 * ((-2 * C47284 * C47128) / C46952 -
                  (C47284 * (C47160 * C47293 + C47128)) / C46952);
    const double C1174 = -(C47088 * (C47128 * C47293 + C47110) +
                           (C47542 + C47226 * C47293) * ce) /
                         C46952;
    const double C1867 = (-2 * (C47088 * C47110 + C47542 * ce)) / C46952 -
                         (C47088 * (C47088 * (C47088 * C47128 + C47226 * ce) +
                                    C47110 + C47088 * C47226 * ce)) /
                             C46952 -
                         ((C47542 + C47226 * C47326) * ce) / C46952;
    const double C47710 = C47709 + C47108;
    const double C47739 = C47088 * C47735;
    const double C47788 = -2 * C47735;
    const double C47763 = C47759 + C47760;
    const double C47229 = C47227 + C47225;
    const double C47307 = C47218 + C47306;
    const double C47331 = C47218 + C47329;
    const double C47372 = 2 * C47355;
    const double C47388 = C47355 * ce;
    const double C47386 = C47088 * C47355;
    const double C2242 =
        (2 * C47088 * C47301 + C47088 * (C47301 + C47355 * C47326)) / C46931;
    const double C47417 = C47413 / C47096;
    const double C47418 = 2 * C47411;
    const double C47415 = C47411 * ce;
    const double C47244 = C47223 + C47241;
    const double C47243 = C47240 * ae;
    const double C47259 = 2 * C47240;
    const double C47644 = C47240 * C47293;
    const double C47679 = C47240 * C47326;
    const double C47702 = C47284 * C47240;
    const double C47775 = C47088 * C47240;
    const double C47774 = C47240 * ce;
    const double C47245 = C47242 + C47239;
    const double C47719 = C47223 + C47718;
    const double C47740 = C47738 * C47326;
    const double C47798 = 2 * C47738;
    const double C47821 = C47088 * C47738;
    const double C47820 = C47738 * ce;
    const double C47765 = C47223 + C47762;
    const double C47848 = 2 * C47839;
    const double C47845 = C47839 * ce;
    const double C47844 = C47837 + C47838;
    const double C47183 = C47180 + C47141;
    const double C47267 = C47264 + C47261;
    const double C47461 = C47238 + C47460;
    const double C47486 = C47481 * C47326;
    const double C47513 = C47238 + C47507;
    const double C5889 = C4601 * C1166;
    const double C22619 = C47950 * C1166;
    const double C1168 = -(C47088 * (C47088 * C47284 * C47128 + C47628 * ce) +
                           C47284 * C47110 + C47088 * C47628 * ce) /
                         C46952;
    const double C1156 = C47284 * C47542 + C47628 * C47326;
    const double C121 = 3 * (C47535 + C47209 * C47114) +
                        C47085 * (2 * C47542 + C47085 * C47544);
    const double C266 = C47535 + C47209 * C47114 + C47544 * C47293;
    const double C267 = C47284 * (2 * C47542 + C47085 * C47544);
    const double C422 = C47535 + C47209 * C47114 + C47544 * C47326;
    const double C423 = C47088 * (2 * C47542 + C47085 * C47544);
    const double C819 = C47088 * C47284 * C47544;
    const double C1179 =
        -(C47088 * (C47088 * (C47119 * C47293 + C47108) + C47642 * ce) +
          C47108 * C47293 + C47100 + C47088 * C47642 * ce) /
        C46952;
    const double C1553 =
        C47088 * ((-2 * C47284 * C47108) / C46952 -
                  (C47284 * (C47119 * C47293 + C47108)) / C46952) -
        ((2 * C47630 + C47284 * C47642) * ce) / C46952;
    const double C1024 = 3 * (C47535 + C47209 * C47293) +
                         C47284 * (2 * C47630 + C47284 * C47642);
    const double C1161 = C47535 + C47209 * C47293 + C47642 * C47326;
    const double C1547 = C47088 * (2 * C47630 + C47284 * C47642);
    const double C1860 = 3 * (C47535 + C47209 * C47326) +
                         C47088 * (2 * C47671 + C47088 * C47674);
    const double C47150 = C47085 * C47147;
    const double C47165 = -3 * C47147;
    const double C47159 = ae * C47147;
    const double C47683 = C47088 * C47147;
    const double C47704 = C47284 * C47147;
    const double C47176 = C47171 / C46952;
    const double C47174 = C47167 / C46952;
    const double C47713 = C47712 + C47128;
    const double C47748 = C47088 * C47744;
    const double C47792 = C47284 * C47791;
    const double C47809 = C47088 * C47791;
    const double C47375 = C47284 * C47374;
    const double C47458 = 3 * C47374;
    const double C47470 = C47374 * ce;
    const double C47468 = C47088 * C47374;
    const double C47394 = C47355 + C47392;
    const double C47484 = C47480 / C47096;
    const double C47485 = 2 * C47477;
    const double C47482 = C47477 * ce;
    const double C47422 = C47088 * C47419;
    const double C47506 = 3 * C47419;
    const double C47502 = C47419 * ce;
    const double C47515 = C47509 / C46952;
    const double C47269 = C47085 * C47266;
    const double C47268 = C47266 * ae;
    const double C47647 = C47266 * C47293;
    const double C47686 = C47266 * C47326;
    const double C47705 = C47284 * C47266;
    const double C47725 = C47240 + C47724;
    const double C47749 = C47747 * C47326;
    const double C47779 = C47240 + C47776;
    const double C47801 = C47284 * C47800;
    const double C47812 = C47800 * C47326;
    const double C47828 = C47738 + C47825;
    const double C47850 = C47088 * C47847;
    const double C4775 = C4601 * C292;
    const double C4761 = C48305 * C292;
    const double C16073 = C48305 * C292;
    const double C21718 = C47950 * C292;
    const double C4765 = C4601 * C294;
    const double C21710 = C47950 * C294;
    const double C10651 = C4601 * C448;
    const double C10635 = C48305 * C448;
    const double C26493 = C47950 * C448;
    const double C32151 = C48305 * C448;
    const double C10643 = C4601 * C450;
    const double C26489 = C47950 * C450;
    const double C5445 = C4601 * C832;
    const double C22251 = C47950 * C832;
    const double C47122 = C47120 / C46952;
    const double C1042 =
        3 * ((-(C47118 * C47293) / C46952) / C46931 - C47107 / C47096) +
        C47284 * ((-2 * C47284 * C47118) / C47096 +
                  C47284 * ((-(C47139 * C47293) / C46952) / C46931 - C47129));
    const double C47327 = C47324 / C46952;
    const double C2248 =
        2 * ((-(C47088 * C47354) / C46952) / C46931 - (C47301 * ce) / C47096) -
        ((C47301 + C47355 * C47326) * ce) / C47096 +
        C47088 *
            ((-(C47088 * C47355 * ce) / C46952) / C46931 - C47354 / C47096 +
             C47088 * ((-(C47088 * C47284 * C47139) / C46952) / C46931 -
                       (C47355 * ce) / C47096));
    const double C5715 = C4601 * C1041;
    const double C21712 = C47950 * C1041;
    const double C5893 = C4601 * C1184;
    const double C22621 = C47950 * C1184;
    const double C5901 = C4601 * C1187;
    const double C22257 = C47950 * C1187;
    const double C12385 = C4601 * C1877;
    const double C28255 = C47950 * C1877;
    const double C47146 = C47143 / C46952;
    const double C47364 = C47363 / C46952;
    const double C47390 = C47088 * C47387;
    const double C47448 = -2 * C47387;
    const double C47478 = C47387 / C47096;
    const double C47416 = C47412 / C46952;
    const double C47182 = C47179 / C46952;
    const double C47451 = C47449 / C46952;
    const double C47483 = C47088 * C47479;
    const double C47510 = C47504 / C46952;
    const double C47976 = C47975 * C47969;
    const double C47982 = C47975 / C46956;
    const double C48274 = C47981 * C47975;
    const double C48272 = C47975 / C46952;
    const double C258 = (C47973 * std::pow(C47969, 2)) / C46954 + C47974;
    const double C47984 = C47983 * C47969;
    const double C48278 = C47968 * C47983;
    const double C48276 = 2 * C47983;
    const double C48322 = C47983 / C48280;
    const double C112 = C47983 / C48315;
    const double C2720 = C47983 / C46969;
    const double C48308 = C48273 / C46952;
    const double C259 = (-2 * C47981 * C48273) / C46952;
    const double C48339 = C48306 / C46954;
    const double C947 = (C48000 * std::pow(C48054, 2)) / C46954 + C48053;
    const double C48056 = C48055 * C48054;
    const double C48061 = C48055 / C46956;
    const double C48286 = C48055 / C46952;
    const double C48283 = C47981 * C48055;
    const double C48063 = C48062 * C48054;
    const double C48292 = C48052 * C48062;
    const double C48291 = 2 * C48062;
    const double C48328 = C48062 / C48280;
    const double C1019 = C48062 / C48315;
    const double C2717 = C48062 / C46969;
    const double C48324 = C48288 / C46952;
    const double C948 = (-2 * C47981 * C48288) / C46952;
    const double C48344 = C48316 / C46954;
    const double C21590 = C48336 / C47955;
    const double C4603 = C48335 / C46931;
    const double C21588 = C48206 / C47955 - (C48335 * C48302) / C46933;
    const double C21589 = C48335 / C46935 - (C48336 * C48302) / C46931;
    const double C42851 = C48338 / C47955;
    const double C10335 = C48337 / C46931;
    const double C42849 = C48221 / C47955 - (C48337 * C48303) / C46933;
    const double C42850 = C48337 / C46935 - (C48338 * C48303) / C46931;
    const double C4790 = C4605 * C271;
    const double C4786 = C4605 * C261;
    const double C4782 = C4605 * C281;
    const double C4774 = C4605 * C272;
    const double C4770 = C4605 * C262;
    const double C4768 = C4605 * C264;
    const double C4764 = C4605 * C280;
    const double C4758 = C4605 * C273;
    const double C4754 = C4605 * C263;
    const double C5444 = C4605 * C825;
    const double C5440 = C4605 * C817;
    const double C5720 = C4605 * C1036;
    const double C5714 = C4605 * C1029;
    const double C5710 = C4605 * C1023;
    const double C5900 = C4605 * C1175;
    const double C5896 = C4605 * C1160;
    const double C10668 = C4605 * C430;
    const double C10664 = C4605 * C417;
    const double C10650 = C4605 * C431;
    const double C10646 = C4605 * C418;
    const double C10642 = C4605 * C436;
    const double C10638 = C4605 * C420;
    const double C10636 = C4605 * C432;
    const double C10632 = C4605 * C419;
    const double C12384 = C4605 * C1868;
    const double C12380 = C4605 * C1859;
    const double C4776 = C4606 * C271;
    const double C4772 = C4606 * C261;
    const double C4762 = C4606 * C281;
    const double C4760 = C4606 * C272;
    const double C4756 = C4606 * C262;
    const double C10652 = C4606 * C430;
    const double C10648 = C4606 * C417;
    const double C10634 = C4606 * C431;
    const double C10630 = C4606 * C418;
    const double C16102 = C15917 * C271;
    const double C16098 = C15917 * C261;
    const double C16094 = C15917 * C281;
    const double C16086 = C15917 * C272;
    const double C16082 = C15917 * C262;
    const double C16080 = C15917 * C264;
    const double C16076 = C15917 * C280;
    const double C16070 = C15917 * C273;
    const double C16066 = C15917 * C263;
    const double C16756 = C15917 * C825;
    const double C16752 = C15917 * C817;
    const double C17024 = C15917 * C1036;
    const double C17018 = C15917 * C1029;
    const double C17014 = C15917 * C1023;
    const double C17196 = C15917 * C1175;
    const double C17192 = C15917 * C1160;
    const double C32184 = C15917 * C430;
    const double C32180 = C15917 * C417;
    const double C32166 = C15917 * C431;
    const double C32162 = C15917 * C418;
    const double C32158 = C15917 * C436;
    const double C32154 = C15917 * C420;
    const double C32152 = C15917 * C432;
    const double C32148 = C15917 * C419;
    const double C33892 = C15917 * C1868;
    const double C33888 = C15917 * C1859;
    const double C16088 = C15918 * C271;
    const double C16084 = C15918 * C261;
    const double C16074 = C15918 * C281;
    const double C16072 = C15918 * C272;
    const double C16068 = C15918 * C262;
    const double C32168 = C15918 * C430;
    const double C32164 = C15918 * C417;
    const double C32150 = C15918 * C431;
    const double C32146 = C15918 * C418;
    const double C21729 = C21591 * C271;
    const double C21727 = C21591 * C261;
    const double C21721 = C21591 * C281;
    const double C21717 = C21591 * C272;
    const double C21715 = C21591 * C262;
    const double C21713 = C21591 * C1023;
    const double C21711 = C21591 * C1029;
    const double C21709 = C21591 * C280;
    const double C21707 = C21591 * C264;
    const double C21705 = C21591 * C273;
    const double C21703 = C21591 * C263;
    const double C22256 = C21591 * C1175;
    const double C22254 = C21591 * C1160;
    const double C22250 = C21591 * C825;
    const double C22248 = C21591 * C817;
    const double C22485 = C21591 * C1036;
    const double C26500 = C21591 * C430;
    const double C26498 = C21591 * C417;
    const double C26492 = C21591 * C431;
    const double C26490 = C21591 * C418;
    const double C26488 = C21591 * C436;
    const double C26486 = C21591 * C420;
    const double C26484 = C21591 * C432;
    const double C26482 = C21591 * C419;
    const double C28254 = C21591 * C1868;
    const double C28252 = C21591 * C1859;
    const double C16087 = C15913 * C292;
    const double C16083 = C15913 * C275;
    const double C16081 = C15913 * C277;
    const double C16077 = C15913 * C294;
    const double C16071 = C15913 * C293;
    const double C16067 = C15913 * C276;
    const double C16757 = C15913 * C832;
    const double C16753 = C15913 * C822;
    const double C17019 = C15913 * C1041;
    const double C17015 = C15913 * C1032;
    const double C17197 = C15913 * C1187;
    const double C17193 = C15913 * C1172;
    const double C17189 = C15913 * C1184;
    const double C17185 = C15913 * C1166;
    const double C32167 = C15913 * C448;
    const double C32163 = C15913 * C428;
    const double C32159 = C15913 * C450;
    const double C32155 = C15913 * C433;
    const double C32153 = C15913 * C449;
    const double C32149 = C15913 * C429;
    const double C33893 = C15913 * C1877;
    const double C33889 = C15913 * C1865;
    const double C113 =
        (((0 - (C46929 * C46930) / C46931) * ae) / C46931 - (0 * be) / C46935) /
            (2 * C46931) -
        ((C46929 * (((C47950 - (C46929 * 2 * C46936) / C46931) * ae) / C46931 -
                    C46930 / C46935) +
          C15913) *
         be) /
            C46931 +
        (0 * ae) / C46931 - C46936 / C46933;
    const double C47022 = C47016 + 0;
    const double C46989 = C46950 * C46970;
    const double C1673 =
        ((-C46951 / C46952) / C46969 -
         ((C48017 - (C46950 * C46970) / C46952) * de) / C46952) /
            C46969 -
        ((C46950 * ((-C46970 / C46952) / C46969 - (0 * de) / C46952) + C48104) *
         de) /
            C46952;
    const double C1674 =
        ((-C46970 / C46952) / C46969 - (0 * de) / C46952) / C46969 -
        (0 * de) / C46952;
    const double C3114 = (-C46970 / C46952) / C46969 - (0 * de) / C46952;
    const double C47002 = C46998 - C46992;
    const double C48099 = C48098 / C46954;
    const double C414 =
        (((0 - (C46950 * C46951) / C46952) * ce) / C46952 - (0 * de) / C46956) /
            (2 * C46952) +
        ((C46950 * (((C48017 - (C46950 * 2 * C46957) / C46952) * ce) / C46952 -
                    C46951 / C46956) +
          C48287) *
         ce) /
            C46952 +
        (0 * ce) / C46952 - C46957 / C46954;
    const double C48320 = 2 * C48285;
    const double C48106 = C48105 / C46952;
    const double C48333 = C48298 / C46956;
    const double C48351 = C48287 - C48330;
    const double C3111 = -C48330;
    const double C48358 = C48346 + C48095;
    const double C47025 = C47021 / C46969;
    const double C131 =
        (2 * (C47085 * C47214 + C47535 * ae) +
         C47085 * (C47214 + C47085 * C47220 + C47085 * C47209 * ae) +
         (C47535 + C47209 * C47114) * ae) /
        C46931;
    const double C274 =
        (C47284 * (C47214 + C47085 * C47220 + C47542 * ae)) / C46931;
    const double C278 =
        (C47085 * C47214 + C47535 * ae + C47220 * C47293) / C46931;
    const double C427 =
        (C47088 * (C47214 + C47085 * C47220 + C47542 * ae)) / C46931;
    const double C434 =
        (C47085 * C47214 + C47535 * ae + C47220 * C47326) / C46931;
    const double C823 = (C47088 * C47284 * C47220) / C46931;
    const double C10660 = C4605 * C437;
    const double C10644 = C4606 * C437;
    const double C26496 = C21591 * C437;
    const double C32176 = C15917 * C437;
    const double C32160 = C15918 * C437;
    const double C5450 = C4605 * C826;
    const double C5442 = C4606 * C826;
    const double C16762 = C15917 * C826;
    const double C16754 = C15918 * C826;
    const double C22262 = C21591 * C826;
    const double C4778 = C4605 * C265;
    const double C4766 = C4606 * C265;
    const double C16090 = C15917 * C265;
    const double C16078 = C15918 * C265;
    const double C21719 = C21591 * C265;
    const double C10656 = C4605 * C421;
    const double C10640 = C4606 * C421;
    const double C26494 = C21591 * C421;
    const double C32172 = C15917 * C421;
    const double C32156 = C15918 * C421;
    const double C5446 = C4605 * C818;
    const double C5438 = C4606 * C818;
    const double C16758 = C15917 * C818;
    const double C16750 = C15918 * C818;
    const double C22258 = C21591 * C818;
    const double C5712 = C4606 * C1022;
    const double C6060 = C4605 * C1022;
    const double C17016 = C15918 * C1022;
    const double C17356 = C15917 * C1022;
    const double C21723 = C21591 * C1022;
    const double C5898 = C4606 * C1159;
    const double C6262 = C4605 * C1159;
    const double C17194 = C15918 * C1159;
    const double C17558 = C15917 * C1159;
    const double C22264 = C21591 * C1159;
    const double C12378 = C4606 * C1858;
    const double C12726 = C4605 * C1858;
    const double C28606 = C21591 * C1858;
    const double C33886 = C15918 * C1858;
    const double C34234 = C15917 * C1858;
    const double C5892 = C4605 * C1169;
    const double C17188 = C15917 * C1169;
    const double C22620 = C21591 * C1169;
    const double C7284 = C4605 * C2245;
    const double C18556 = C15917 * C2245;
    const double C23736 = C21591 * C2245;
    const double C5888 = C4605 * C1157;
    const double C17184 = C15917 * C1157;
    const double C22618 = C21591 * C1157;
    const double C7280 = C4605 * C2239;
    const double C18552 = C15917 * C2239;
    const double C23734 = C21591 * C2239;
    const double C1872 =
        (-3 * (C47088 * C47673 + C47100 + C47671 * ce)) / C46952 +
        C47088 * ((-2 * C47673) / C46952 -
                  (C47088 * (C47088 * (C47088 * C47119 + C47223 * ce) + C47108 +
                             C47088 * C47223 * ce)) /
                      C46952 -
                  (C47674 * ce) / C46952) -
        ((2 * C47671 + C47088 * C47674) * ce) / C46952;
    const double C133 =
        (-3 * (C47108 * C47114 + C47100)) / C46952 +
        C47085 * ((-2 * C47110) / C46952 - (C47085 * C47123) / C46952);
    const double C282 = -(C47123 * C47293 + C47108 * C47114 + C47100) / C46952;
    const double C284 =
        C47284 * ((-2 * C47110) / C46952 - (C47085 * C47123) / C46952);
    const double C438 = -(C47088 * (C47088 * C47123 + C47544 * ce) +
                          C47108 * C47114 + C47100 + C47088 * C47544 * ce) /
                        C46952;
    const double C440 =
        C47088 * ((-2 * C47110) / C46952 - (C47085 * C47123) / C46952) -
        ((2 * C47542 + C47085 * C47544) * ce) / C46952;
    const double C827 =
        -(C47088 * C47284 * C47123 + C47284 * C47544 * ce) / C46952;
    const double C1027 = (-2 * C47284 * C47123) / C46952 -
                         (C47284 * (C47147 * C47293 + C47123)) / C46952;
    const double C47140 = C47136 / C46952;
    const double C47138 = C47133 / C46952;
    const double C47680 = C47676 + C47677;
    const double C5716 = C4606 * C1028;
    const double C6056 = C4605 * C1028;
    const double C17020 = C15918 * C1028;
    const double C17352 = C15917 * C1028;
    const double C21725 = C21591 * C1028;
    const double C5718 = C4606 * C1037;
    const double C17022 = C15918 * C1037;
    const double C22760 = C21591 * C1037;
    const double C5902 = C4606 * C1174;
    const double C6266 = C4605 * C1174;
    const double C17198 = C15918 * C1174;
    const double C17562 = C15917 * C1174;
    const double C22268 = C21591 * C1174;
    const double C12382 = C4606 * C1867;
    const double C12730 = C4605 * C1867;
    const double C28608 = C21591 * C1867;
    const double C33890 = C15918 * C1867;
    const double C34238 = C15917 * C1867;
    const double C5705 =
        4 * ((-2 * C47698) / C46952 - (C47284 * C47710) / C46952) +
        C47284 * ((-3 * C47710) / C46952 +
                  C47284 * ((-2 * C47284 * C47119) / C46952 -
                            (C47284 * (C47141 * C47293 + C47119)) / C46952));
    const double C47741 = C47739 + C47736;
    const double C47790 = C47788 / C46952;
    const double C47767 = C47088 * C47763;
    const double C47836 = -2 * C47763;
    const double C47230 = C47085 * C47229;
    const double C47235 = 2 * C47229;
    const double C47299 = C47284 * C47229;
    const double C47337 = C47229 * ce;
    const double C47335 = C47088 * C47229;
    const double C1031 =
        (2 * C47284 * C47220 + C47284 * (C47220 + C47229 * C47293)) / C46931;
    const double C1171 = (C47088 * (C47220 + C47229 * C47293)) / C46931;
    const double C1864 =
        (2 * C47088 * C47220 + C47088 * (C47220 + C47229 * C47326)) / C46931;
    const double C1188 =
        (-(C47118 * C47293) / C46952) / C46931 - C47107 / C47096 -
        (C47088 * C47307 * ce) / C47096 +
        C47088 * (C47088 * ((-(C47139 * C47293) / C46952) / C46931 - C47129) -
                  (C47307 * ce) / C47096);
    const double C1556 =
        C47088 * ((-2 * C47284 * C47118) / C47096 +
                  C47284 * ((-(C47139 * C47293) / C46952) / C46931 - C47129)) -
        ((2 * C47301 + C47284 * C47307) * ce) / C47096;
    const double C1033 = (3 * (C47214 + C47218 * C47293) +
                          C47284 * (2 * C47301 + C47284 * C47307)) /
                         C46931;
    const double C1176 = (C47214 + C47218 * C47293 + C47307 * C47326) / C46931;
    const double C1550 = (C47088 * (2 * C47301 + C47284 * C47307)) / C46931;
    const double C7271 =
        (2 * C47088 * C47307 + C47088 * (C47307 + C47374 * C47326)) / C46931;
    const double C1869 = (3 * (C47214 + C47218 * C47326) +
                          C47088 * (2 * C47323 + C47088 * C47331)) /
                         C46931;
    const double C47391 = C47388 / C47096;
    const double C7281 = C4601 * C2242;
    const double C18553 = C15913 * C2242;
    const double C23735 = C47950 * C2242;
    const double C47420 = C47415 / C46952;
    const double C47246 = C47244 * ae;
    const double C47549 = C47085 * C47244;
    const double C47552 = 3 * C47244;
    const double C47626 = C47284 * C47244;
    const double C47685 = C47088 * C47244;
    const double C47684 = C47244 * ce;
    const double C1173 = -(C47088 * (C47147 * C47293 + C47123) +
                           (C47544 + C47244 * C47293) * ce) /
                         C46952;
    const double C1866 = (-2 * (C47088 * C47123 + C47544 * ce)) / C46952 -
                         (C47088 * (C47088 * (C47088 * C47147 + C47244 * ce) +
                                    C47123 + C47088 * C47244 * ce)) /
                             C46952 -
                         ((C47544 + C47244 * C47326) * ce) / C46952;
    const double C1021 =
        2 * C47284 * C47544 + C47284 * (C47544 + C47244 * C47293);
    const double C1158 = C47088 * (C47544 + C47244 * C47293);
    const double C1857 =
        2 * C47088 * C47544 + C47088 * (C47544 + C47244 * C47326);
    const double C47645 = C47226 + C47644;
    const double C47681 = C47226 + C47679;
    const double C47723 = 2 * C47702;
    const double C47746 = C47088 * C47702;
    const double C47745 = C47702 * ce;
    const double C2246 =
        (-2 * (C47088 * C47701 + C47628 * ce)) / C46952 -
        (C47088 * (C47088 * (C47088 * C47284 * C47160 + C47702 * ce) + C47701 +
                   C47088 * C47702 * ce)) /
            C46952 -
        ((C47628 + C47702 * C47326) * ce) / C46952;
    const double C2240 =
        2 * C47088 * C47628 + C47088 * (C47628 + C47702 * C47326);
    const double C47780 = 2 * C47775;
    const double C47778 = C47775 * ce;
    const double C47777 = C47773 + C47774;
    const double C47247 = C47085 * C47245;
    const double C47256 = 2 * C47245;
    const double C47309 = C47245 * C47293;
    const double C47338 = C47245 * C47326;
    const double C47358 = C47284 * C47245;
    const double C47434 = C47245 * ce;
    const double C47432 = C47088 * C47245;
    const double C47720 = C47284 * C47719;
    const double C47797 = 3 * C47719;
    const double C47811 = C47088 * C47719;
    const double C47810 = C47719 * ce;
    const double C7273 =
        (-2 * (C47088 * C47710 + C47642 * ce)) / C46952 -
        (C47088 *
         (C47088 * (C47088 * (C47141 * C47293 + C47119) + C47719 * ce) +
          C47710 + C47088 * C47719 * ce)) /
            C46952 -
        ((C47642 + C47719 * C47326) * ce) / C46952;
    const double C7269 =
        2 * C47088 * C47642 + C47088 * (C47642 + C47719 * C47326);
    const double C47742 = C47699 + C47740;
    const double C47826 = 2 * C47821;
    const double C47824 = C47821 * ce;
    const double C47827 = C47823 + C47820;
    const double C47768 = C47088 * C47765;
    const double C47842 = 3 * C47765;
    const double C47840 = C47765 * ce;
    const double C47849 = C47088 * C47844;
    const double C47186 = C47085 * C47183;
    const double C1038 =
        (-3 * (C47147 * C47293 + C47123)) / C46952 +
        C47284 * ((-2 * C47284 * C47147) / C46952 -
                  (C47284 * (C47183 * C47293 + C47147)) / C46952);
    const double C47270 = C47085 * C47267;
    const double C47379 = C47267 * C47293;
    const double C47402 = C47284 * C47267;
    const double C47435 = C47267 * C47326;
    const double C47462 = C47284 * C47461;
    const double C47471 = C47461 * C47326;
    const double C47489 = C47389 + C47486;
    const double C47517 = C47088 * C47513;
    const double C5894 = C4606 * C1168;
    const double C7004 = C4605 * C1168;
    const double C17190 = C15918 * C1168;
    const double C18284 = C15917 * C1168;
    const double C23510 = C21591 * C1168;
    const double C5890 = C4606 * C1156;
    const double C7000 = C4605 * C1156;
    const double C17186 = C15918 * C1156;
    const double C18280 = C15917 * C1156;
    const double C23508 = C21591 * C1156;
    const double C4800 = C4605 * C266;
    const double C4780 = C4606 * C266;
    const double C16112 = C15917 * C266;
    const double C16092 = C15918 * C266;
    const double C21731 = C21591 * C266;
    const double C4788 = C4606 * C267;
    const double C5102 = C4605 * C267;
    const double C16100 = C15918 * C267;
    const double C16414 = C15917 * C267;
    const double C21986 = C21591 * C267;
    const double C10670 = C4605 * C422;
    const double C10654 = C4606 * C422;
    const double C26502 = C21591 * C422;
    const double C32186 = C15917 * C422;
    const double C32170 = C15918 * C422;
    const double C10662 = C4606 * C423;
    const double C10962 = C4605 * C423;
    const double C26792 = C21591 * C423;
    const double C32178 = C15918 * C423;
    const double C32478 = C15917 * C423;
    const double C5456 = C4605 * C819;
    const double C5448 = C4606 * C819;
    const double C16768 = C15917 * C819;
    const double C16760 = C15918 * C819;
    const double C22272 = C21591 * C819;
    const double C5910 = C4605 * C1179;
    const double C17206 = C15917 * C1179;
    const double C22628 = C21591 * C1179;
    const double C6416 = C4605 * C1553;
    const double C17704 = C15917 * C1553;
    const double C22634 = C21591 * C1553;
    const double C5724 = C4605 * C1024;
    const double C17028 = C15917 * C1024;
    const double C22483 = C21591 * C1024;
    const double C5906 = C4605 * C1161;
    const double C17202 = C15917 * C1161;
    const double C22626 = C21591 * C1161;
    const double C6412 = C4605 * C1547;
    const double C17700 = C15917 * C1547;
    const double C22630 = C21591 * C1547;
    const double C12386 = C4605 * C1860;
    const double C28256 = C21591 * C1860;
    const double C33894 = C15917 * C1860;
    const double C47152 = C47150 / C46952;
    const double C47170 = C47165 / C46952;
    const double C47166 = C47159 / C47096;
    const double C47178 = -C47174;
    const double C5706 =
        4 * ((-2 * C47701) / C46952 - (C47284 * C47713) / C46952) +
        C47284 * ((-3 * C47713) / C46952 +
                  C47284 * ((-2 * C47284 * C47160) / C46952 -
                            (C47284 * (C47085 * C47177 * C47293 + C47160)) /
                                C46952));
    const double C47793 = C47792 / C46952;
    const double C47376 = C47372 + C47375;
    const double C47472 = C47470 / C47096;
    const double C6797 = (3 * (C47301 + C47355 * C47326) +
                          C47088 * (2 * C47386 + C47088 * C47394)) /
                         C46931;
    const double C47487 = C47482 / C46952;
    const double C47425 = C47418 + C47422;
    const double C47508 = C47502 / C47096;
    const double C47518 = -C47515;
    const double C47271 = C47259 + C47269;
    const double C47648 = C47244 + C47647;
    const double C47688 = C47244 + C47686;
    const double C47726 = C47284 * C47725;
    const double C47751 = C47702 + C47749;
    const double C47782 = C47088 * C47779;
    const double C47802 = C47798 + C47801;
    const double C47814 = C47719 + C47812;
    const double C47830 = C47088 * C47828;
    const double C47852 = C47848 + C47850;
    const double C47124 = -C47122;
    const double C5721 = C4601 * C1042;
    const double C17025 = C15913 * C1042;
    const double C22486 = C47950 * C1042;
    const double C47330 = -C47327;
    const double C7285 = C4601 * C2248;
    const double C18557 = C15913 * C2248;
    const double C23737 = C47950 * C2248;
    const double C47149 = -C47146;
    const double C47365 = -C47364;
    const double C47393 = C47390 / C46952;
    const double C47450 = C47448 / C47096;
    const double C47421 = -C47416;
    const double C47185 = -C47182;
    const double C47452 = -C47451;
    const double C47488 = C47483 / C46952;
    const double C47516 = -C47510;
    const double C47977 = C47976 / C46954;
    const double C48309 = 2 * C48274;
    const double C47985 = C47984 / C46952;
    const double C48313 = C48278 / C46956;
    const double C48340 = C48272 - C48308;
    const double C2457 = -C48308;
    const double C48354 = C48339 + C47974;
    const double C48057 = C48056 / C46954;
    const double C48317 = 2 * C48283;
    const double C48064 = C48063 / C46952;
    const double C48327 = C48292 / C46956;
    const double C48348 = C48286 - C48324;
    const double C2349 = -C48324;
    const double C48357 = C48344 + C48053;
    const double C4812 = C4774 + C4775;
    const double C4810 = C4770 + C4771;
    const double C4809 = C4768 + C4769;
    const double C4807 = C4764 + C4765;
    const double C4804 = C4758 + C4759;
    const double C4802 = C4754 + C4755;
    const double C5465 = C5444 + C5445;
    const double C5463 = C5440 + C5441;
    const double C5728 = C5714 + C5715;
    const double C5726 = C5710 + C5711;
    const double C5918 = C5900 + C5901;
    const double C5916 = C5896 + C5897;
    const double C10688 = C10650 + C10651;
    const double C10686 = C10646 + C10647;
    const double C10684 = C10642 + C10643;
    const double C10682 = C10638 + C10639;
    const double C10681 = C10636 + C10637;
    const double C10679 = C10632 + C10633;
    const double C12397 = C12384 + C12385;
    const double C12395 = C12380 + C12381;
    const double C4805 = C4760 + C4761;
    const double C4803 = C4756 + C4757;
    const double C10680 = C10634 + C10635;
    const double C10678 = C10630 + C10631;
    const double C16117 = C16072 + C16073;
    const double C16115 = C16068 + C16069;
    const double C32196 = C32150 + C32151;
    const double C32194 = C32146 + C32147;
    const double C21746 = C21717 + C21718;
    const double C21745 = C21715 + C21716;
    const double C21744 = C21713 + C21714;
    const double C21743 = C21711 + C21712;
    const double C21742 = C21709 + C21710;
    const double C21741 = C21707 + C21708;
    const double C21740 = C21705 + C21706;
    const double C21739 = C21703 + C21704;
    const double C22285 = C22256 + C22257;
    const double C22284 = C22254 + C22255;
    const double C22283 = C22250 + C22251;
    const double C22282 = C22248 + C22249;
    const double C26515 = C26492 + C26493;
    const double C26514 = C26490 + C26491;
    const double C26513 = C26488 + C26489;
    const double C26512 = C26486 + C26487;
    const double C26511 = C26484 + C26485;
    const double C26510 = C26482 + C26483;
    const double C28265 = C28254 + C28255;
    const double C28264 = C28252 + C28253;
    const double C16124 = C16086 + C16087;
    const double C16122 = C16082 + C16083;
    const double C16121 = C16080 + C16081;
    const double C16119 = C16076 + C16077;
    const double C16116 = C16070 + C16071;
    const double C16114 = C16066 + C16067;
    const double C16777 = C16756 + C16757;
    const double C16775 = C16752 + C16753;
    const double C17032 = C17018 + C17019;
    const double C17030 = C17014 + C17015;
    const double C17214 = C17196 + C17197;
    const double C17212 = C17192 + C17193;
    const double C32204 = C32166 + C32167;
    const double C32202 = C32162 + C32163;
    const double C32200 = C32158 + C32159;
    const double C32198 = C32154 + C32155;
    const double C32197 = C32152 + C32153;
    const double C32195 = C32148 + C32149;
    const double C33905 = C33892 + C33893;
    const double C33903 = C33888 + C33889;
    const double C47026 = C47022 * de;
    const double C46997 = C46989 / C46952;
    const double C47006 = C46950 * C47002;
    const double C47035 = C47002 / C46969;
    const double C48100 = C48095 - C48099;
    const double C48347 = C48320 / C46952;
    const double C48107 = C48103 - C48106;
    const double C48361 = C48351 / C46969;
    const double C1672 =
        ((-(0 * de) / C46952) / C46969 -
         ((0 - (C46950 * C46951) / C46952) * de) / C46952) /
            C46969 -
        ((C46950 * ((-C46951 / C46952) / C46969 -
                    ((C48017 - (C46950 * C46970) / C46952) * de) / C46952) +
          C3111) *
         de) /
            C46952 +
        (-C46970 / C46952) / C46969 - (0 * de) / C46952;
    const double C4787 = C4601 * C274;
    const double C4773 = C48305 * C274;
    const double C16099 = C15913 * C274;
    const double C16085 = C48305 * C274;
    const double C21728 = C47950 * C274;
    const double C4779 = C4601 * C278;
    const double C4767 = C48305 * C278;
    const double C16091 = C15913 * C278;
    const double C16079 = C48305 * C278;
    const double C21720 = C47950 * C278;
    const double C10665 = C4601 * C427;
    const double C10649 = C48305 * C427;
    const double C26499 = C47950 * C427;
    const double C32181 = C15913 * C427;
    const double C32165 = C48305 * C427;
    const double C10657 = C4601 * C434;
    const double C10641 = C48305 * C434;
    const double C26495 = C47950 * C434;
    const double C32173 = C15913 * C434;
    const double C32157 = C48305 * C434;
    const double C5447 = C4601 * C823;
    const double C5439 = C48305 * C823;
    const double C16759 = C15913 * C823;
    const double C16751 = C48305 * C823;
    const double C22259 = C47950 * C823;
    const double C5914 = C5892 + C5893;
    const double C17210 = C17188 + C17189;
    const double C22641 = C22620 + C22621;
    const double C5912 = C5888 + C5889;
    const double C17208 = C17184 + C17185;
    const double C22640 = C22618 + C22619;
    const double C12390 = C4605 * C1872;
    const double C28258 = C21591 * C1872;
    const double C33898 = C15917 * C1872;
    const double C4796 = C4605 * C282;
    const double C4784 = C4606 * C282;
    const double C16108 = C15917 * C282;
    const double C16096 = C15918 * C282;
    const double C21733 = C21591 * C282;
    const double C4792 = C4606 * C284;
    const double C5106 = C4605 * C284;
    const double C16104 = C15918 * C284;
    const double C16418 = C15917 * C284;
    const double C21988 = C21591 * C284;
    const double C10674 = C4605 * C438;
    const double C10658 = C4606 * C438;
    const double C26504 = C21591 * C438;
    const double C32190 = C15917 * C438;
    const double C32174 = C15918 * C438;
    const double C10666 = C4606 * C440;
    const double C10966 = C4605 * C440;
    const double C26794 = C21591 * C440;
    const double C32182 = C15918 * C440;
    const double C32482 = C15917 * C440;
    const double C5460 = C4605 * C827;
    const double C5452 = C4606 * C827;
    const double C16772 = C15917 * C827;
    const double C16764 = C15918 * C827;
    const double C22274 = C21591 * C827;
    const double C6054 = C4606 * C1027;
    const double C17350 = C15918 * C1027;
    const double C21735 = C21591 * C1027;
    const double C47142 = -C47138;
    const double C22487 = C21591 * C5705;
    const double C47769 = C47767 + C47108;
    const double C47843 = C47836 / C46952;
    const double C47231 = C47218 + C47230;
    const double C1165 = (C47284 * C47220 + C47299 * C47326) / C46931;
    const double C47339 = C47337 / C47096;
    const double C5713 = C48305 * C1031;
    const double C6061 = C4601 * C1031;
    const double C17017 = C48305 * C1031;
    const double C17357 = C15913 * C1031;
    const double C21724 = C47950 * C1031;
    const double C5899 = C48305 * C1171;
    const double C6263 = C4601 * C1171;
    const double C17195 = C48305 * C1171;
    const double C17559 = C15913 * C1171;
    const double C22265 = C47950 * C1171;
    const double C12379 = C48305 * C1864;
    const double C12727 = C4601 * C1864;
    const double C28607 = C47950 * C1864;
    const double C33887 = C48305 * C1864;
    const double C34235 = C15913 * C1864;
    const double C5911 = C4601 * C1188;
    const double C17207 = C15913 * C1188;
    const double C22629 = C47950 * C1188;
    const double C6417 = C4601 * C1556;
    const double C17705 = C15913 * C1556;
    const double C22635 = C47950 * C1556;
    const double C5725 = C4601 * C1033;
    const double C17029 = C15913 * C1033;
    const double C22484 = C47950 * C1033;
    const double C5907 = C4601 * C1176;
    const double C17203 = C15913 * C1176;
    const double C22627 = C47950 * C1176;
    const double C6413 = C4601 * C1550;
    const double C17701 = C15913 * C1550;
    const double C22631 = C47950 * C1550;
    const double C23745 = C47950 * C7271;
    const double C12387 = C4601 * C1869;
    const double C28257 = C47950 * C1869;
    const double C33895 = C15913 * C1869;
    const double C7287 = C7280 + C7281;
    const double C18559 = C18552 + C18553;
    const double C23748 = C23734 + C23735;
    const double C47423 = -C47420;
    const double C47550 = C47548 + C47549;
    const double C1167 = -(C47088 * (C47088 * C47284 * C47147 + C47626 * ce) +
                           C47284 * C47123 + C47088 * C47626 * ce) /
                         C46952;
    const double C2247 =
        (-2 * (C47088 * C47704 + C47626 * ce)) / C46952 -
        (C47088 * (C47088 * (C47088 * C47284 * C47183 + C47705 * ce) + C47704 +
                   C47088 * C47705 * ce)) /
            C46952 -
        ((C47626 + C47705 * C47326) * ce) / C46952;
    const double C1155 = C47284 * C47544 + C47626 * C47326;
    const double C2241 =
        2 * C47088 * C47626 + C47088 * (C47626 + C47705 * C47326);
    const double C47687 = C47683 + C47684;
    const double C6264 = C4606 * C1173;
    const double C17560 = C15918 * C1173;
    const double C22280 = C21591 * C1173;
    const double C12732 = C4606 * C1866;
    const double C34240 = C15918 * C1866;
    const double C43075 = C21591 * C1866;
    const double C6058 = C4606 * C1021;
    const double C17354 = C15918 * C1021;
    const double C21737 = C21591 * C1021;
    const double C6260 = C4606 * C1158;
    const double C17556 = C15918 * C1158;
    const double C22278 = C21591 * C1158;
    const double C12728 = C4606 * C1857;
    const double C34236 = C15918 * C1857;
    const double C43073 = C21591 * C1857;
    const double C1180 =
        -(C47088 * (C47088 * (C47160 * C47293 + C47128) + C47645 * ce) +
          C47128 * C47293 + C47110 + C47088 * C47645 * ce) /
        C46952;
    const double C1554 =
        C47088 * ((-2 * C47284 * C47128) / C46952 -
                  (C47284 * (C47160 * C47293 + C47128)) / C46952) -
        ((2 * C47628 + C47284 * C47645) * ce) / C46952;
    const double C7274 =
        (-2 * (C47088 * C47713 + C47645 * ce)) / C46952 -
        (C47088 * (C47088 * (C47088 * (C47085 * C47177 * C47293 + C47160) +
                             C47725 * ce) +
                   C47713 + C47088 * C47725 * ce)) /
            C46952 -
        ((C47645 + C47725 * C47326) * ce) / C46952;
    const double C1025 = 3 * (C47542 + C47226 * C47293) +
                         C47284 * (2 * C47628 + C47284 * C47645);
    const double C1162 = C47542 + C47226 * C47293 + C47645 * C47326;
    const double C1548 = C47088 * (2 * C47628 + C47284 * C47645);
    const double C7270 =
        2 * C47088 * C47645 + C47088 * (C47645 + C47725 * C47326);
    const double C1873 =
        (-3 * (C47088 * C47680 + C47110 + C47678 * ce)) / C46952 +
        C47088 * ((-2 * C47680) / C46952 -
                  (C47088 * (C47088 * (C47088 * C47160 + C47240 * ce) + C47128 +
                             C47088 * C47240 * ce)) /
                      C46952 -
                  (C47681 * ce) / C46952) -
        ((2 * C47678 + C47088 * C47681) * ce) / C46952;
    const double C1861 = 3 * (C47542 + C47226 * C47326) +
                         C47088 * (2 * C47678 + C47088 * C47681);
    const double C47750 = C47748 + C47745;
    const double C7282 = C4606 * C2246;
    const double C18554 = C15918 * C2246;
    const double C28470 = C21591 * C2246;
    const double C7278 = C4606 * C2240;
    const double C18550 = C15918 * C2240;
    const double C28468 = C21591 * C2240;
    const double C47781 = C47088 * C47777;
    const double C47248 = C47224 + C47247;
    const double C47310 = C47229 + C47309;
    const double C47340 = C47229 + C47338;
    const double C47378 = 2 * C47358;
    const double C47401 = C47358 * ce;
    const double C47399 = C47088 * C47358;
    const double C2243 =
        (2 * C47088 * C47299 + C47088 * (C47299 + C47358 * C47326)) / C46931;
    const double C47437 = C47434 / C47096;
    const double C47438 = 2 * C47432;
    const double C47436 = C47432 * ce;
    const double C47721 = C47717 + C47720;
    const double C47813 = C47809 + C47810;
    const double C23746 = C21591 * C7273;
    const double C23744 = C21591 * C7269;
    const double C6799 =
        (-3 * (C47088 * C47741 + C47698 + C47737 * ce)) / C46952 +
        C47088 * ((-2 * C47741) / C46952 -
                  (C47088 * (C47088 * (C47088 * C47284 * C47141 + C47738 * ce) +
                             C47735 + C47088 * C47738 * ce)) /
                      C46952 -
                  (C47742 * ce) / C46952) -
        ((2 * C47737 + C47088 * C47742) * ce) / C46952;
    const double C6795 = 3 * (C47630 + C47699 * C47326) +
                         C47088 * (2 * C47737 + C47088 * C47742);
    const double C47829 = C47088 * C47827;
    const double C47770 = C47766 + C47768;
    const double C47846 = C47840 / C46952;
    const double C47851 = C47849 + C47119;
    const double C47188 = C47186 / C46952;
    const double C47272 = C47238 + C47270;
    const double C47380 = C47245 + C47379;
    const double C47405 = C47402 * C47326;
    const double C47439 = C47245 + C47435;
    const double C47463 = C47459 + C47462;
    const double C47473 = C47374 + C47471;
    const double C47492 = C47088 * C47489;
    const double C47520 = C47512 + C47517;
    const double C47154 = C47140 - C47152;
    const double C47181 = C47178 / C46931;
    const double C47794 = C47790 - C47793;
    const double C5703 = (4 * (2 * C47301 + C47284 * C47307) +
                          C47284 * (3 * C47307 + C47284 * C47376)) /
                         C46931;
    const double C5881 =
        (2 * C47301 + C47284 * C47307 + C47376 * C47326) / C46931;
    const double C6403 = (C47088 * (3 * C47307 + C47284 * C47376)) / C46931;
    const double C28261 = C47950 * C6797;
    const double C47490 = -C47487;
    const double C12371 = (4 * (2 * C47323 + C47088 * C47331) +
                           C47088 * (3 * C47331 + C47088 * C47425)) /
                          C46931;
    const double C47521 = C47518 / C46931;
    const double C47273 = C47271 * ae;
    const double C47553 = C47085 * C47271;
    const double C47691 = C47284 * C47271;
    const double C1181 =
        -(C47088 * (C47088 * (C47183 * C47293 + C47147) + C47648 * ce) +
          C47147 * C47293 + C47123 + C47088 * C47648 * ce) /
        C46952;
    const double C1555 =
        C47088 * ((-2 * C47284 * C47147) / C46952 -
                  (C47284 * (C47183 * C47293 + C47147)) / C46952) -
        ((2 * C47626 + C47284 * C47648) * ce) / C46952;
    const double C1026 = 3 * (C47544 + C47244 * C47293) +
                         C47284 * (2 * C47626 + C47284 * C47648);
    const double C1163 = C47544 + C47244 * C47293 + C47648 * C47326;
    const double C1549 = C47088 * (2 * C47626 + C47284 * C47648);
    const double C1862 = 3 * (C47544 + C47244 * C47326) +
                         C47088 * (2 * C47685 + C47088 * C47688);
    const double C47727 = C47723 + C47726;
    const double C6796 = 3 * (C47628 + C47702 * C47326) +
                         C47088 * (2 * C47746 + C47088 * C47751);
    const double C47784 = C47780 + C47782;
    const double C47803 = C47284 * C47802;
    const double C23353 = 3 * (C47642 + C47719 * C47326) +
                          C47088 * (2 * C47811 + C47088 * C47814);
    const double C47832 = C47826 + C47830;
    const double C47854 = C47088 * C47852;
    const double C47125 = C47124 / C46931;
    const double C5731 = C5720 + C5721;
    const double C17035 = C17024 + C17025;
    const double C22492 = C22485 + C22486;
    const double C47332 = C47330 / C46931;
    const double C7289 = C7284 + C7285;
    const double C18561 = C18556 + C18557;
    const double C23749 = C23736 + C23737;
    const double C47151 = C47149 / C46931;
    const double C47366 = C47365 / C46931;
    const double C47395 = -C47393;
    const double C47424 = C47421 / C46931;
    const double C47187 = C47185 / C46931;
    const double C47453 = C47452 / C46931;
    const double C47491 = -C47488;
    const double C47519 = C47516 / C46931;
    const double C47978 = C47974 - C47977;
    const double C48341 = C48309 / C46952;
    const double C47986 = C47982 - C47985;
    const double C48355 = C48340 / C46969;
    const double C48058 = C48053 - C48057;
    const double C48345 = C48317 / C46952;
    const double C48065 = C48061 - C48064;
    const double C48359 = C48348 / C46969;
    const double C21764 = C21746 * C48017;
    const double C22260 = C21746 * C48287;
    const double C23505 = C21746 * C1669;
    const double C24099 = C21746 * C48358;
    const double C24769 = C21746 * C3111;
    const double C21763 = C21745 * C116;
    const double C22261 = C21745 * C665;
    const double C24100 = C21745 * C414;
    const double C21762 = C21744 * C116;
    const double C22633 = C21744 * C414;
    const double C22917 = C21744 * C665;
    const double C21761 = C21743 * C48017;
    const double C22632 = C21743 * C48358;
    const double C22916 = C21743 * C48287;
    const double C23282 = C21743 * C1669;
    const double C24765 = C21743 * C3111;
    const double C21760 = C21742 * C48017;
    const double C22253 = C21742 * C48287;
    const double C22623 = C21742 * C48358;
    const double C23276 = C21742 * C1669;
    const double C24761 = C21742 * C3111;
    const double C21759 = C21741 * C116;
    const double C22252 = C21741 * C665;
    const double C22622 = C21741 * C414;
    const double C21758 = C21740 * C48017;
    const double C22247 = C21740 * C48287;
    const double C22615 = C21740 * C48358;
    const double C23270 = C21740 * C1669;
    const double C24757 = C21740 * C3111;
    const double C21757 = C21739 * C116;
    const double C22246 = C21739 * C665;
    const double C22614 = C21739 * C414;
    const double C22297 = C22285 * C48104;
    const double C23278 = C22285 * C1670;
    const double C24763 = C22285 * C48104;
    const double C26326 = C22285 * C48017;
    const double C27389 = C22285 * C48358;
    const double C27721 = C22285 * C48287;
    const double C28161 = C22285 * C1669;
    const double C30073 = C22285 * C3111;
    const double C22296 = C22284 * C666;
    const double C22624 = C22284 * C415;
    const double C23277 = C22284 * C1673;
    const double C24762 = C22284 * C3114;
    const double C26327 = C22284 * C116;
    const double C27390 = C22284 * C414;
    const double C27722 = C22284 * C665;
    const double C22295 = C22283 * C48104;
    const double C23272 = C22283 * C1670;
    const double C24759 = C22283 * C48104;
    const double C26325 = C22283 * C48017;
    const double C26993 = C22283 * C48287;
    const double C27383 = C22283 * C48358;
    const double C28155 = C22283 * C1669;
    const double C30069 = C22283 * C3111;
    const double C22294 = C22282 * C666;
    const double C22616 = C22282 * C415;
    const double C23271 = C22282 * C1673;
    const double C24758 = C22282 * C3114;
    const double C26324 = C22282 * C116;
    const double C26992 = C22282 * C665;
    const double C27382 = C22282 * C414;
    const double C47028 = C47026 / C46952;
    const double C47001 = C48017 - C46997;
    const double C47010 = C47006 + C48104;
    const double C47038 = C47035 - C47037;
    const double C25307 = C21746 * C48100;
    const double C25301 = C21742 * C48100;
    const double C25295 = C21740 * C48100;
    const double C26087 = C21743 * C48100;
    const double C30753 = C22283 * C48100;
    const double C31765 = C22285 * C48100;
    const double C48295 = C48100 * C48094;
    const double C48332 = C48297 + C48100;
    const double C22625 = C22285 * C48347;
    const double C22617 = C22283 * C48347;
    const double C25303 = C22285 * C48107;
    const double C25297 = C22283 * C48107;
    const double C48299 = C48107 / C46969;
    const double C48296 = C48107 * C48094;
    const double C2129 = C48361 - (C48100 * C48096) / C46952;
    const double C23283 = C21744 * C1672;
    const double C23275 = C21741 * C1672;
    const double C23269 = C21739 * C1672;
    const double C23506 = C21745 * C1672;
    const double C28162 = C22284 * C1672;
    const double C28154 = C22282 * C1672;
    const double C4818 = C4786 + C4787;
    const double C4811 = C4772 + C4773;
    const double C16130 = C16098 + C16099;
    const double C16123 = C16084 + C16085;
    const double C21751 = C21727 + C21728;
    const double C4814 = C4778 + C4779;
    const double C4808 = C4766 + C4767;
    const double C16126 = C16090 + C16091;
    const double C16120 = C16078 + C16079;
    const double C21747 = C21719 + C21720;
    const double C10695 = C10664 + C10665;
    const double C10687 = C10648 + C10649;
    const double C26518 = C26498 + C26499;
    const double C32211 = C32180 + C32181;
    const double C32203 = C32164 + C32165;
    const double C10691 = C10656 + C10657;
    const double C10683 = C10640 + C10641;
    const double C26516 = C26494 + C26495;
    const double C32207 = C32172 + C32173;
    const double C32199 = C32156 + C32157;
    const double C5466 = C5446 + C5447;
    const double C5462 = C5438 + C5439;
    const double C16778 = C16758 + C16759;
    const double C16774 = C16750 + C16751;
    const double C22286 = C22258 + C22259;
    const double C22650 = C22641 * C48321;
    const double C23274 = C22641 * C48321;
    const double C25299 = C22641 * C3625;
    const double C26995 = C22641 * C48104;
    const double C27385 = C22641 * C48347;
    const double C28157 = C22641 * C1670;
    const double C30071 = C22641 * C48104;
    const double C30755 = C22641 * C48107;
    const double C22649 = C22640 * C416;
    const double C23273 = C22640 * C1674;
    const double C26994 = C22640 * C666;
    const double C27384 = C22640 * C415;
    const double C28156 = C22640 * C1673;
    const double C30070 = C22640 * C3114;
    const double C47145 = C47142 / C46931;
    const double C47771 = C47769 + C47764;
    const double C47232 = C47231 + C47228;
    const double C5891 = C48305 * C1165;
    const double C7001 = C4601 * C1165;
    const double C17187 = C48305 * C1165;
    const double C18281 = C15913 * C1165;
    const double C23509 = C47950 * C1165;
    const double C5727 = C5712 + C5713;
    const double C6065 = C6060 + C6061;
    const double C17031 = C17016 + C17017;
    const double C17361 = C17356 + C17357;
    const double C21749 = C21723 + C21724;
    const double C5917 = C5898 + C5899;
    const double C6269 = C6262 + C6263;
    const double C17213 = C17194 + C17195;
    const double C17565 = C17558 + C17559;
    const double C22288 = C22264 + C22265;
    const double C12394 = C12378 + C12379;
    const double C12734 = C12726 + C12727;
    const double C28610 = C28606 + C28607;
    const double C33902 = C33886 + C33887;
    const double C34242 = C34234 + C34235;
    const double C5923 = C5910 + C5911;
    const double C17219 = C17206 + C17207;
    const double C22644 = C22628 + C22629;
    const double C6421 = C6416 + C6417;
    const double C17709 = C17704 + C17705;
    const double C22646 = C22634 + C22635;
    const double C5733 = C5724 + C5725;
    const double C17037 = C17028 + C17029;
    const double C22491 = C22483 + C22484;
    const double C5921 = C5906 + C5907;
    const double C17217 = C17202 + C17203;
    const double C22643 = C22626 + C22627;
    const double C6419 = C6412 + C6413;
    const double C17707 = C17700 + C17701;
    const double C22645 = C22630 + C22631;
    const double C12398 = C12386 + C12387;
    const double C28266 = C28256 + C28257;
    const double C33906 = C33894 + C33895;
    const double C27386 = C23748 * C416;
    const double C28158 = C23748 * C1674;
    const double C47426 = C47423 / C46931;
    const double C122 = 4 * (2 * C47542 + C47085 * C47544) +
                        C47085 * (3 * C47544 + C47085 * C47550);
    const double C268 = 2 * C47542 + C47085 * C47544 + C47550 * C47293;
    const double C269 = C47284 * (3 * C47544 + C47085 * C47550);
    const double C424 = 2 * C47542 + C47085 * C47544 + C47550 * C47326;
    const double C425 = C47088 * (3 * C47544 + C47085 * C47550);
    const double C820 = C47088 * C47284 * C47550;
    const double C1295 =
        2 * C47284 * C47550 + C47284 * (C47550 + C47271 * C47293);
    const double C1445 = C47088 * (C47550 + C47271 * C47293);
    const double C2137 =
        2 * C47088 * C47550 + C47088 * (C47550 + C47271 * C47326);
    const double C7002 = C4606 * C1167;
    const double C18282 = C15918 * C1167;
    const double C26508 = C21591 * C1167;
    const double C6998 = C4606 * C1155;
    const double C18278 = C15918 * C1155;
    const double C26506 = C21591 * C1155;
    const double C1874 =
        (-3 * (C47088 * C47687 + C47123 + C47685 * ce)) / C46952 +
        C47088 * ((-2 * C47687) / C46952 -
                  (C47088 * (C47088 * (C47088 * C47183 + C47266 * ce) + C47147 +
                             C47088 * C47266 * ce)) /
                      C46952 -
                  (C47688 * ce) / C46952) -
        ((2 * C47685 + C47088 * C47688) * ce) / C46952;
    const double C5908 = C4606 * C1180;
    const double C17204 = C15918 * C1180;
    const double C23518 = C21591 * C1180;
    const double C6414 = C4606 * C1554;
    const double C17702 = C15918 * C1554;
    const double C22924 = C21591 * C1554;
    const double C5722 = C4606 * C1025;
    const double C17026 = C15918 * C1025;
    const double C22762 = C21591 * C1025;
    const double C5904 = C4606 * C1162;
    const double C17200 = C15918 * C1162;
    const double C23516 = C21591 * C1162;
    const double C6410 = C4606 * C1548;
    const double C17698 = C15918 * C1548;
    const double C22922 = C21591 * C1548;
    const double C12392 = C4606 * C1873;
    const double C33900 = C15918 * C1873;
    const double C44589 = C21591 * C1873;
    const double C12388 = C4606 * C1861;
    const double C33896 = C15918 * C1861;
    const double C44587 = C21591 * C1861;
    const double C6800 =
        (-3 * (C47088 * C47750 + C47701 + C47746 * ce)) / C46952 +
        C47088 * ((-2 * C47750) / C46952 -
                  (C47088 *
                   (C47088 * (C47088 * C47284 * C47085 * C47177 + C47747 * ce) +
                    C47744 + C47088 * C47747 * ce)) /
                      C46952 -
                  (C47751 * ce) / C46952) -
        ((2 * C47746 + C47088 * C47751) * ce) / C46952;
    const double C47783 = C47781 + C47128;
    const double C47249 = C47248 + C47243;
    const double C1034 = (3 * (C47220 + C47229 * C47293) +
                          C47284 * (2 * C47299 + C47284 * C47310)) /
                         C46931;
    const double C1177 = (C47220 + C47229 * C47293 + C47310 * C47326) / C46931;
    const double C1551 = (C47088 * (2 * C47299 + C47284 * C47310)) / C46931;
    const double C1870 = (3 * (C47220 + C47229 * C47326) +
                          C47088 * (2 * C47335 + C47088 * C47340)) /
                         C46931;
    const double C47404 = C47401 / C47096;
    const double C7279 = C48305 * C2243;
    const double C18551 = C48305 * C2243;
    const double C28469 = C47950 * C2243;
    const double C47440 = C47436 / C47096;
    const double C5883 =
        (-2 * C47698) / C46952 - (C47284 * C47710) / C46952 +
        C47088 * (C47088 * ((-2 * C47284 * C47119) / C46952 -
                            (C47284 * (C47141 * C47293 + C47119)) / C46952) -
                  (C47721 * ce) / C46952) -
        (C47088 * C47721 * ce) / C46952;
    const double C6405 =
        C47088 * ((-3 * C47710) / C46952 +
                  C47284 * ((-2 * C47284 * C47119) / C46952 -
                            (C47284 * (C47141 * C47293 + C47119)) / C46952)) -
        ((3 * C47642 + C47284 * C47721) * ce) / C46952;
    const double C5701 = 4 * (2 * C47630 + C47284 * C47642) +
                         C47284 * (3 * C47642 + C47284 * C47721);
    const double C5879 = 2 * C47630 + C47284 * C47642 + C47721 * C47326;
    const double C6401 = C47088 * (3 * C47642 + C47284 * C47721);
    const double C23723 =
        2 * C47088 * C47721 + C47088 * (C47721 + C47802 * C47326);
    const double C23355 =
        (-3 * (C47088 * C47813 + C47710 + C47811 * ce)) / C46952 +
        C47088 * ((-2 * C47813) / C46952 -
                  (C47088 * (C47088 * (C47088 * (C47177 * C47293 + C47141) +
                                       C47800 * ce) +
                             C47791 + C47088 * C47800 * ce)) /
                      C46952 -
                  (C47814 * ce) / C46952) -
        ((2 * C47811 + C47088 * C47814) * ce) / C46952;
    const double C23750 = C23744 + C23745;
    const double C28262 = C21591 * C6799;
    const double C28260 = C21591 * C6795;
    const double C47831 = C47829 + C47735;
    const double C12369 = 4 * (2 * C47671 + C47088 * C47674) +
                          C47088 * (3 * C47674 + C47088 * C47770);
    const double C47853 = C47851 + C47845;
    const double C47190 = C47176 - C47188;
    const double C47274 = C47272 + C47265;
    const double C47381 = C47284 * C47380;
    const double C7272 =
        (2 * C47088 * C47310 + C47088 * (C47310 + C47380 * C47326)) / C46931;
    const double C47407 = C47358 + C47405;
    const double C47442 = C47088 * C47439;
    const double C47464 = C47284 * C47463;
    const double C23724 =
        (2 * C47088 * C47376 + C47088 * (C47376 + C47463 * C47326)) / C46931;
    const double C23354 = (3 * (C47307 + C47374 * C47326) +
                           C47088 * (2 * C47468 + C47088 * C47473)) /
                          C46931;
    const double C47495 = C47485 + C47492;
    const double C47523 = C47088 * C47520;
    const double C134 =
        4 * ((-2 * C47110) / C46952 - (C47085 * C47123) / C46952) +
        C47085 * ((-3 * C47123) / C46952 + C47085 * C47154);
    const double C285 =
        (-2 * C47110) / C46952 - (C47085 * C47123) / C46952 + C47154 * C47293;
    const double C287 = C47284 * ((-3 * C47123) / C46952 + C47085 * C47154);
    const double C442 = (-2 * C47110) / C46952 - (C47085 * C47123) / C46952 +
                        C47088 * (C47088 * C47154 - (C47550 * ce) / C46952) -
                        (C47088 * C47550 * ce) / C46952;
    const double C444 = C47088 * ((-3 * C47123) / C46952 + C47085 * C47154) -
                        ((3 * C47544 + C47085 * C47550) * ce) / C46952;
    const double C829 =
        C47088 * C47284 * C47154 - (C47284 * C47550 * ce) / C46952;
    const double C47184 = C47181 - C47161;
    const double C22479 =
        5 * ((-3 * C47710) / C46952 + C47284 * C47794) +
        C47284 * (4 * C47794 +
                  C47284 * ((-3 * C47791) / C46952 +
                            C47284 * ((-2 * C47284 * C47141) / C46952 -
                                      (C47284 * (C47177 * C47293 + C47141)) /
                                          C46952)));
    const double C23725 =
        2 * (C47088 * C47794 - (C47721 * ce) / C46952) +
        C47088 * (C47794 +
                  C47088 * (C47088 * ((-2 * C47284 * C47141) / C46952 -
                                      (C47284 * (C47177 * C47293 + C47141)) /
                                          C46952) -
                            (C47802 * ce) / C46952) -
                  (C47088 * C47802 * ce) / C46952) -
        ((C47721 + C47802 * C47326) * ce) / C46952;
    const double C22490 = C47950 * C5703;
    const double C22637 = C47950 * C5881;
    const double C23040 = C47950 * C6403;
    const double C47493 = C47490 / C46931;
    const double C44338 = C47950 * C12371;
    const double C47524 = C47521 - C47161;
    const double C47554 = C47552 + C47553;
    const double C2027 = C47284 * C47550 + C47691 * C47326;
    const double C5884 =
        (-2 * C47701) / C46952 - (C47284 * C47713) / C46952 +
        C47088 * (C47088 * ((-2 * C47284 * C47160) / C46952 -
                            (C47284 * (C47085 * C47177 * C47293 + C47160)) /
                                C46952) -
                  (C47727 * ce) / C46952) -
        (C47088 * C47727 * ce) / C46952;
    const double C6406 =
        C47088 * ((-3 * C47713) / C46952 +
                  C47284 * ((-2 * C47284 * C47160) / C46952 -
                            (C47284 * (C47085 * C47177 * C47293 + C47160)) /
                                C46952)) -
        ((3 * C47645 + C47284 * C47727) * ce) / C46952;
    const double C5702 = 4 * (2 * C47628 + C47284 * C47645) +
                         C47284 * (3 * C47645 + C47284 * C47727);
    const double C5880 = 2 * C47628 + C47284 * C47645 + C47727 * C47326;
    const double C6402 = C47088 * (3 * C47645 + C47284 * C47727);
    const double C12370 = 4 * (2 * C47678 + C47088 * C47681) +
                          C47088 * (3 * C47681 + C47088 * C47784);
    const double C47804 = C47797 + C47803;
    const double C28247 = 4 * (2 * C47737 + C47088 * C47742) +
                          C47088 * (3 * C47742 + C47088 * C47832);
    const double C47856 = C47842 + C47854;
    const double C47126 = C47125 - C47116;
    const double C22496 = C22492 * C48017;
    const double C23038 = C22492 * C48287;
    const double C25564 = C22492 * C3111;
    const double C47333 = C47332 - C47328;
    const double C23753 = C23749 * C48334;
    const double C25674 = C23749 * C48334;
    const double C27387 = C23749 * C48321;
    const double C28159 = C23749 * C48321;
    const double C30757 = C23749 * C3625;
    const double C47153 = C47151 - C47135;
    const double C47367 = C47366 - C47129;
    const double C47396 = C47395 / C46931;
    const double C47427 = C47424 - C47417;
    const double C47189 = C47187 - C47169;
    const double C47454 = C47453 - C47161;
    const double C47494 = C47491 / C46931;
    const double C47522 = C47519 - C47511;
    const double C48271 = C47978 * C47968;
    const double C48311 = C48276 + C47978;
    const double C48279 = C47986 / C46969;
    const double C48275 = C47986 * C47968;
    const double C557 = C48355 - (C47978 * C47969) / C46952;
    const double C48289 = C48058 * C48052;
    const double C48326 = C48291 + C48058;
    const double C48293 = C48065 / C46969;
    const double C48290 = C48065 * C48052;
    const double C1289 = C48359 - (C48058 * C48054) / C46952;
    const double C22482 = C21761 + C21762;
    const double C23036 = C22916 + C22917;
    const double C21775 = C21759 + C21760;
    const double C22914 = C22252 + C22253;
    const double C22642 = C22622 + C22623;
    const double C47030 = C47025 - C47028;
    const double C47005 = C47001 * ce;
    const double C3113 = (-C46987) / C46969 - (C47001 * de) / C46952;
    const double C47014 = C47010 * de;
    const double C25298 = C22640 * C47038;
    const double C30756 = C23748 * C47038;
    const double C1856 =
        (C47038 / C46969 + (0 * ce) / C46952) / C46969 - (0 * de) / C46952;
    const double C2136 = C47038 / C46969 - (0 * de) / C46952;
    const double C3366 = C47038 / C46969 + (0 * ce) / C46952;
    const double C48329 = C48295 / C46952;
    const double C48352 = C48332 / C46969;
    const double C48353 = C48333 + C48299;
    const double C2131 = C48299 - C48105 / C46956;
    const double C48331 = C48296 / C46952;
    const double C23739 = C21742 * C2129;
    const double C23729 = C21740 * C2129;
    const double C28743 = C22283 * C2129;
    const double C23287 = C23275 + C23276;
    const double C21769 = C21751 * C116;
    const double C22270 = C21751 * C665;
    const double C21765 = C21747 * C116;
    const double C22267 = C21747 * C665;
    const double C23514 = C21747 * C1672;
    const double C24106 = C21747 * C414;
    const double C22298 = C22286 * C666;
    const double C23504 = C22286 * C1673;
    const double C24098 = C22286 * C415;
    const double C24768 = C22286 * C3114;
    const double C26328 = C22286 * C116;
    const double C26998 = C22286 * C665;
    const double C28466 = C22286 * C1672;
    const double C29206 = C22286 * C414;
    const double C47148 = C47145 - C47129;
    const double C12373 =
        4 * ((-2 * C47673) / C46952 - (C47088 * C47771) / C46952 -
             (C47674 * ce) / C46952) +
        C47088 *
            ((-3 * C47771) / C46952 +
             C47088 * ((-2 * C47763) / C46952 -
                       (C47088 * (C47088 * (C47088 * C47141 + C47237 * ce) +
                                  C47119 + C47088 * C47237 * ce)) /
                           C46952 -
                       (C47765 * ce) / C46952) -
             (C47770 * ce) / C46952) -
        ((3 * C47674 + C47088 * C47770) * ce) / C46952;
    const double C132 = (3 * (C47214 + C47085 * C47220 + C47542 * ae) +
                         C47085 * (2 * C47220 + C47085 * C47232 + C47544 * ae) +
                         (2 * C47542 + C47085 * C47544) * ae) /
                        C46931;
    const double C279 =
        (C47214 + C47085 * C47220 + C47542 * ae + C47232 * C47293) / C46931;
    const double C283 =
        (C47284 * (2 * C47220 + C47085 * C47232 + C47544 * ae)) / C46931;
    const double C435 =
        (C47214 + C47085 * C47220 + C47542 * ae + C47232 * C47326) / C46931;
    const double C439 =
        (C47088 * (2 * C47220 + C47085 * C47232 + C47544 * ae)) / C46931;
    const double C824 = (C47088 * C47284 * C47232) / C46931;
    const double C5913 = C5890 + C5891;
    const double C7007 = C7000 + C7001;
    const double C17209 = C17186 + C17187;
    const double C18287 = C18280 + C18281;
    const double C23520 = C23508 + C23509;
    const double C21767 = C21749 * C116;
    const double C22920 = C21749 * C665;
    const double C22300 = C22288 * C666;
    const double C23512 = C22288 * C1673;
    const double C24104 = C22288 * C415;
    const double C24772 = C22288 * C3114;
    const double C26330 = C22288 * C116;
    const double C27724 = C22288 * C665;
    const double C22653 = C22644 * C48321;
    const double C23280 = C22644 * C48321;
    const double C25305 = C22644 * C3625;
    const double C27391 = C22644 * C48347;
    const double C27723 = C22644 * C48104;
    const double C28163 = C22644 * C1670;
    const double C30075 = C22644 * C48104;
    const double C31767 = C22644 * C48107;
    const double C22655 = C22646 * C48347;
    const double C22918 = C22646 * C48104;
    const double C23284 = C22646 * C1670;
    const double C24767 = C22646 * C48104;
    const double C26089 = C22646 * C48107;
    const double C27233 = C22646 * C48017;
    const double C27859 = C22646 * C48287;
    const double C31089 = C22646 * C3111;
    const double C22495 = C22491 * C116;
    const double C23037 = C22491 * C665;
    const double C22652 = C22643 * C416;
    const double C23279 = C22643 * C1674;
    const double C25304 = C22643 * C47038;
    const double C27388 = C22643 * C415;
    const double C27720 = C22643 * C666;
    const double C28160 = C22643 * C1673;
    const double C30072 = C22643 * C3114;
    const double C22654 = C22645 * C415;
    const double C22915 = C22645 * C666;
    const double C23281 = C22645 * C1673;
    const double C24764 = C22645 * C3114;
    const double C27232 = C22645 * C116;
    const double C27858 = C22645 * C665;
    const double C47428 = C47426 - C47129;
    const double C4798 = C4606 * C268;
    const double C16110 = C15918 * C268;
    const double C21990 = C21591 * C268;
    const double C5104 = C4606 * C269;
    const double C16416 = C15918 * C269;
    const double C10672 = C4606 * C424;
    const double C32188 = C15918 * C424;
    const double C43275 = C21591 * C424;
    const double C10964 = C4606 * C425;
    const double C32480 = C15918 * C425;
    const double C5454 = C4606 * C820;
    const double C16766 = C15918 * C820;
    const double C26654 = C21591 * C820;
    const double C47785 = C47783 + C47778;
    const double C47250 = C47085 * C47249;
    const double C47255 = 3 * C47249;
    const double C47297 = C47284 * C47249;
    const double C47345 = C47249 * ce;
    const double C47343 = C47088 * C47249;
    const double C1030 =
        (2 * C47284 * C47232 + C47284 * (C47232 + C47249 * C47293)) / C46931;
    const double C1170 = (C47088 * (C47232 + C47249 * C47293)) / C46931;
    const double C1863 =
        (2 * C47088 * C47232 + C47088 * (C47232 + C47249 * C47326)) / C46931;
    const double C5723 = C48305 * C1034;
    const double C17027 = C48305 * C1034;
    const double C22763 = C47950 * C1034;
    const double C5905 = C48305 * C1177;
    const double C17201 = C48305 * C1177;
    const double C23517 = C47950 * C1177;
    const double C6411 = C48305 * C1551;
    const double C17699 = C48305 * C1551;
    const double C22923 = C47950 * C1551;
    const double C12389 = C48305 * C1870;
    const double C33897 = C48305 * C1870;
    const double C44588 = C47950 * C1870;
    const double C7286 = C7278 + C7279;
    const double C18558 = C18550 + C18551;
    const double C28472 = C28468 + C28469;
    const double C22638 = C21591 * C5883;
    const double C23041 = C21591 * C6405;
    const double C22489 = C21591 * C5701;
    const double C22636 = C21591 * C5879;
    const double C23039 = C21591 * C6401;
    const double C27392 = C23750 * C416;
    const double C28164 = C23750 * C1674;
    const double C31768 = C23750 * C47038;
    const double C28268 = C28260 + C28261;
    const double C47833 = C47831 + C47824;
    const double C44337 = C21591 * C12369;
    const double C47855 = C47088 * C47853;
    const double C47192 = C47085 * C47190;
    const double C1297 =
        2 * C47284 * C47154 + C47284 * (C47154 + C47190 * C47293);
    const double C1447 = C47088 * (C47154 + C47190 * C47293) -
                         ((C47550 + C47271 * C47293) * ce) / C46952;
    const double C2029 =
        C47284 * C47154 +
        C47088 * (C47088 * C47284 * C47190 - (C47691 * ce) / C46952) -
        (C47088 * C47691 * ce) / C46952;
    const double C2139 =
        2 * (C47088 * C47154 - (C47550 * ce) / C46952) +
        C47088 * (C47154 + C47088 * (C47088 * C47190 - (C47271 * ce) / C46952) -
                  (C47088 * C47271 * ce) / C46952) -
        ((C47550 + C47271 * C47326) * ce) / C46952;
    const double C47275 = C47085 * C47274;
    const double C47312 = C47274 * C47293;
    const double C47346 = C47274 * C47326;
    const double C47361 = C47284 * C47274;
    const double C47382 = C47378 + C47381;
    const double C6798 = (3 * (C47299 + C47358 * C47326) +
                          C47088 * (2 * C47399 + C47088 * C47407)) /
                         C46931;
    const double C47445 = C47438 + C47442;
    const double C47465 = C47458 + C47464;
    const double C28248 = (4 * (2 * C47386 + C47088 * C47394) +
                           C47088 * (3 * C47394 + C47088 * C47495)) /
                          C46931;
    const double C47526 = C47506 + C47523;
    const double C4794 = C4606 * C285;
    const double C16106 = C15918 * C285;
    const double C21992 = C21591 * C285;
    const double C5108 = C4606 * C287;
    const double C16420 = C15918 * C287;
    const double C10676 = C4606 * C442;
    const double C32192 = C15918 * C442;
    const double C43277 = C21591 * C442;
    const double C10968 = C4606 * C444;
    const double C32484 = C15918 * C444;
    const double C5458 = C4606 * C829;
    const double C16770 = C15918 * C829;
    const double C26656 = C21591 * C829;
    const double C47496 = C47493 - C47478;
    const double C123 = 5 * (3 * C47544 + C47085 * C47550) +
                        C47085 * (4 * C47550 + C47085 * C47554);
    const double C270 = 3 * C47544 + C47085 * C47550 + C47554 * C47293;
    const double C426 = 3 * C47544 + C47085 * C47550 + C47554 * C47326;
    const double C561 = C47284 * (4 * C47550 + C47085 * C47554);
    const double C667 = C47088 * (4 * C47550 + C47085 * C47554);
    const double C821 = C47088 * C47284 * C47554;
    const double C22611 =
        (-3 * C47710) / C46952 + C47284 * C47794 +
        C47088 * (C47088 * ((-3 * C47791) / C46952 +
                            C47284 * ((-2 * C47284 * C47141) / C46952 -
                                      (C47284 * (C47177 * C47293 + C47141)) /
                                          C46952)) -
                  (C47804 * ce) / C46952) -
        (C47088 * C47804 * ce) / C46952;
    const double C23033 =
        C47088 * (4 * C47794 +
                  C47284 * ((-3 * C47791) / C46952 +
                            C47284 * ((-2 * C47284 * C47141) / C46952 -
                                      (C47284 * (C47177 * C47293 + C47141)) /
                                          C46952))) -
        ((4 * C47721 + C47284 * C47804) * ce) / C46952;
    const double C22477 = 5 * (3 * C47642 + C47284 * C47721) +
                          C47284 * (4 * C47721 + C47284 * C47804);
    const double C22609 = 3 * C47642 + C47284 * C47721 + C47804 * C47326;
    const double C23031 = C47088 * (4 * C47721 + C47284 * C47804);
    const double C44332 = 5 * (3 * C47674 + C47088 * C47770) +
                          C47088 * (4 * C47770 + C47088 * C47856);
    const double C142 =
        3 * ((-(ae * C47110) / C46952) / C46931 - C47107 / C47096 +
             C47085 * C47126) +
        (((-2 * C47110) / C46952 - (C47085 * C47123) / C46952) * ae) / C46931 +
        C47085 *
            (2 * C47126 - (ae * C47123) / C47096 +
             C47085 *
                 ((-(ae * C47085 * C47119) / C46952) / C46931 -
                  C47118 / C47096 +
                  C47085 * ((-(C47085 * std::pow(C47090, 6) * bs[6] * C47101) /
                             C46952) /
                                C46931 -
                            (ae * C47119) / C47096)));
    const double C291 = (yP - yQ) * ((-(ae * C47110) / C46952) / C46931 -
                                     C47107 / C47096 + C47085 * C47126);
    const double C295 = (-(C47085 * C47107) / C46952) / C46931 -
                        (ae * C47100) / C47096 + C47126 * std::pow(yP - yQ, 2);
    const double C447 =
        C47088 * ((-(ae * C47110) / C46952) / C46931 - C47107 / C47096 +
                  C47085 * C47126) -
        ((C47097 * C47093 * C47208 +
          C47085 * (C47085 * C47103 * C47104 * C47208 + C47209 * ae) +
          C47085 * C47209 * ae) *
         ce) /
            C47096;
    const double C451 = (-(C47085 * C47107) / C46952) / C46931 -
                        (ae * C47100) / C47096 -
                        (C47088 * C47220 * ce) / C47096 +
                        C47088 * (C47088 * C47126 - (C47220 * ce) / C47096);
    const double C833 =
        C47088 * C47284 * C47126 - (C47284 * C47220 * ce) / C47096;
    const double C1878 =
        3 * ((-(C47323 * ce) / C46952) / C46931 - C47107 / C47096 +
             C47088 * C47333) -
        ((2 * C47323 + C47088 * C47331) * ce) / C47096 +
        C47088 *
            (2 * C47333 - (C47331 * ce) / C47096 +
             C47088 * ((-(C47088 * C47224 * ce) / C46952) / C46931 - C47129 +
                       C47088 * ((-(C47088 * C47139) / C46952) / C46931 -
                                 (C47224 * ce) / C47096)));
    const double C47155 = C47085 * C47153;
    const double C47158 = 2 * C47153;
    const double C47336 = C47088 * C47153;
    const double C47357 = C47284 * C47153;
    const double C47443 = C47153 - C47440;
    const double C1040 =
        2 * C47284 * C47126 + C47284 * (C47126 + C47153 * std::pow(C47284, 2));
    const double C1183 =
        C47284 * C47126 - (C47088 * C47299 * ce) / C47096 +
        C47088 * (C47088 * C47284 * C47153 - (C47299 * ce) / C47096);
    const double C1186 = C47088 * (C47126 + C47153 * C47293) -
                         ((C47220 + C47229 * C47293) * ce) / C47096;
    const double C1876 =
        2 * (C47088 * C47126 - (C47220 * ce) / C47096) -
        ((C47220 + C47229 * std::pow(C47088, 2)) * ce) / C47096 +
        C47088 * (C47126 - (C47088 * C47229 * ce) / C47096 +
                  C47088 * (C47088 * C47153 - (C47229 * ce) / C47096));
    const double C5707 =
        4 * ((-2 * C47354) / C47096 + C47284 * C47367) +
        C47284 * (3 * C47367 +
                  C47284 * ((-2 * C47284 * C47139) / C47096 +
                            C47284 * ((-(C47175 * C47293) / C46952) / C46931 -
                                      C47161)));
    const double C5885 =
        (-2 * C47354) / C47096 + C47284 * C47367 -
        (C47088 * C47376 * ce) / C47096 +
        C47088 * (C47088 * ((-2 * C47284 * C47139) / C47096 +
                            C47284 * ((-(C47175 * C47293) / C46952) / C46931 -
                                      C47161)) -
                  (C47376 * ce) / C47096);
    const double C6407 =
        C47088 * (3 * C47367 +
                  C47284 * ((-2 * C47284 * C47139) / C47096 +
                            C47284 * ((-(C47175 * C47293) / C46952) / C46931 -
                                      C47161))) -
        ((3 * C47307 + C47284 * C47376) * ce) / C47096;
    const double C7275 =
        2 * (C47088 * C47367 - (C47307 * ce) / C47096) -
        ((C47307 + C47374 * C47326) * ce) / C47096 +
        C47088 * (C47367 - (C47088 * C47374 * ce) / C47096 +
                  C47088 * (C47088 * ((-(C47175 * C47293) / C46952) / C46931 -
                                      C47161) -
                            (C47374 * ce) / C47096));
    const double C47397 = C47396 - C47391;
    const double C47429 = C47088 * C47427;
    const double C47501 = 2 * C47427;
    const double C47191 = C47085 * C47189;
    const double C47369 = C47189 * C47293;
    const double C47400 = C47284 * C47189;
    const double C47433 = C47088 * C47189;
    const double C1043 =
        3 * (C47126 + C47153 * C47293) +
        C47284 * (2 * C47284 * C47153 + C47284 * (C47153 + C47189 * C47293));
    const double C1189 =
        C47126 + C47153 * C47293 - (C47088 * C47310 * ce) / C47096 +
        C47088 * (C47088 * (C47153 + C47189 * C47293) - (C47310 * ce) / C47096);
    const double C1557 =
        C47088 * (2 * C47284 * C47153 + C47284 * (C47153 + C47189 * C47293)) -
        ((2 * C47299 + C47284 * C47310) * ce) / C47096;
    const double C47455 = C47284 * C47454;
    const double C47469 = C47088 * C47454;
    const double C47497 = C47494 - C47484;
    const double C47525 = C47088 * C47522;
    const double C48307 = C48271 / C46952;
    const double C48342 = C48311 / C46969;
    const double C48343 = C48313 + C48279;
    const double C559 = C48279 - C47984 / C46956;
    const double C48310 = C48275 / C46952;
    const double C48323 = C48289 / C46952;
    const double C48349 = C48326 / C46969;
    const double C48350 = C48327 + C48293;
    const double C1291 = C48293 - C48063 / C46956;
    const double C48325 = C48290 / C46952;
    const double C22926 = C22914 - C22296;
    const double C22651 = C22642 - C22624;
    const double C47009 = C47005 / C46952;
    const double C24776 = C21749 * C3113;
    const double C24774 = C21747 * C3113;
    const double C24770 = C21745 * C3113;
    const double C24766 = C21744 * C3113;
    const double C24760 = C21741 * C3113;
    const double C24756 = C21739 * C3113;
    const double C25030 = C21751 * C3113;
    const double C25563 = C22491 * C3113;
    const double C30080 = C22288 * C3113;
    const double C30078 = C22286 * C3113;
    const double C30074 = C22284 * C3113;
    const double C30068 = C22282 * C3113;
    const double C31088 = C22645 * C3113;
    const double C47020 = C47014 / C46952;
    const double C23754 = C23750 * C2136;
    const double C23752 = C23748 * C2136;
    const double C25681 = C23750 * C3366;
    const double C25673 = C23748 * C3366;
    const double C48365 = C48329 + C48361;
    const double C2130 = C48352 - (C48107 * C48096) / C46952;
    const double C25680 = C22644 * C48353;
    const double C25672 = C22641 * C48353;
    const double C31227 = C23749 * C48353;
    const double C1850 = C48353 / C46969 - C48105 / C48314;
    const double C23743 = C22644 * C2131;
    const double C23733 = C22641 * C2131;
    const double C28747 = C23749 * C2131;
    const double C48362 = C48331 + C48352;
    const double C23288 = C23287 - C23277;
    const double C44339 = C21591 * C12373;
    const double C4801 = C4601 * C279;
    const double C4781 = C48305 * C279;
    const double C16113 = C15913 * C279;
    const double C16093 = C48305 * C279;
    const double C21732 = C47950 * C279;
    const double C4789 = C48305 * C283;
    const double C5103 = C4601 * C283;
    const double C16101 = C48305 * C283;
    const double C16415 = C15913 * C283;
    const double C21987 = C47950 * C283;
    const double C10671 = C4601 * C435;
    const double C10655 = C48305 * C435;
    const double C26503 = C47950 * C435;
    const double C32187 = C15913 * C435;
    const double C32171 = C48305 * C435;
    const double C10663 = C48305 * C439;
    const double C10963 = C4601 * C439;
    const double C26793 = C47950 * C439;
    const double C32179 = C48305 * C439;
    const double C32479 = C15913 * C439;
    const double C5457 = C4601 * C824;
    const double C5449 = C48305 * C824;
    const double C16769 = C15913 * C824;
    const double C16761 = C48305 * C824;
    const double C22273 = C47950 * C824;
    const double C23524 = C23520 * C1674;
    const double C24102 = C23520 * C416;
    const double C25310 = C23520 * C47038;
    const double C26996 = C23520 * C666;
    const double C28464 = C23520 * C1673;
    const double C29204 = C23520 * C415;
    const double C30076 = C23520 * C3114;
    const double C22499 = C22495 + C22496;
    const double C23043 = C22915 - C23036;
    const double C12374 =
        4 * ((-2 * C47680) / C46952 - (C47088 * C47785) / C46952 -
             (C47681 * ce) / C46952) +
        C47088 *
            ((-3 * C47785) / C46952 +
             C47088 *
                 ((-2 * C47777) / C46952 -
                  (C47088 * (C47088 * (C47088 * C47085 * C47177 + C47262 * ce) +
                             C47160 + C47088 * C47262 * ce)) /
                      C46952 -
                  (C47779 * ce) / C46952) -
             (C47784 * ce) / C46952) -
        ((3 * C47681 + C47088 * C47784) * ce) / C46952;
    const double C47251 = C47235 + C47250;
    const double C1164 = (C47284 * C47232 + C47297 * C47326) / C46931;
    const double C47347 = C47345 / C47096;
    const double C6059 = C48305 * C1030;
    const double C17355 = C48305 * C1030;
    const double C21738 = C47950 * C1030;
    const double C6261 = C48305 * C1170;
    const double C17557 = C48305 * C1170;
    const double C22279 = C47950 * C1170;
    const double C12729 = C48305 * C1863;
    const double C34237 = C48305 * C1863;
    const double C43074 = C47950 * C1863;
    const double C5732 = C5722 + C5723;
    const double C17036 = C17026 + C17027;
    const double C22765 = C22762 + C22763;
    const double C5920 = C5904 + C5905;
    const double C17216 = C17200 + C17201;
    const double C23522 = C23516 + C23517;
    const double C6418 = C6410 + C6411;
    const double C17706 = C17698 + C17699;
    const double C22928 = C22922 + C22923;
    const double C12399 = C12388 + C12389;
    const double C33907 = C33896 + C33897;
    const double C44591 = C44587 + C44588;
    const double C28474 = C28472 * C1674;
    const double C29208 = C28472 * C416;
    const double C30762 = C28472 * C47038;
    const double C22494 = C22489 + C22490;
    const double C22647 = C22636 + C22637;
    const double C23044 = C23039 + C23040;
    const double C28748 = C28268 * C2136;
    const double C31228 = C28268 * C3366;
    const double C28249 =
        4 * ((-2 * C47741) / C46952 - (C47088 * C47833) / C46952 -
             (C47742 * ce) / C46952) +
        C47088 *
            ((-3 * C47833) / C46952 +
             C47088 *
                 ((-2 * C47827) / C46952 -
                  (C47088 * (C47088 * (C47088 * C47284 * C47177 + C47822 * ce) +
                             C47819 + C47088 * C47822 * ce)) /
                      C46952 -
                  (C47828 * ce) / C46952) -
             (C47832 * ce) / C46952) -
        ((3 * C47742 + C47088 * C47832) * ce) / C46952;
    const double C44341 = C44337 + C44338;
    const double C47857 = C47855 / C46952;
    const double C47194 = C47170 + C47192;
    const double C47276 = C47256 + C47275;
    const double C47313 = C47249 + C47312;
    const double C47348 = C47249 + C47346;
    const double C2244 =
        (2 * C47088 * C47297 + C47088 * (C47297 + C47361 * C47326)) / C46931;
    const double C5704 = (4 * (2 * C47299 + C47284 * C47310) +
                          C47284 * (3 * C47310 + C47284 * C47382)) /
                         C46931;
    const double C5882 =
        (2 * C47299 + C47284 * C47310 + C47382 * C47326) / C46931;
    const double C6404 = (C47088 * (3 * C47310 + C47284 * C47382)) / C46931;
    const double C12372 = (4 * (2 * C47335 + C47088 * C47340) +
                           C47088 * (3 * C47340 + C47088 * C47445)) /
                          C46931;
    const double C22478 = (5 * (3 * C47307 + C47284 * C47376) +
                           C47284 * (4 * C47376 + C47284 * C47465)) /
                          C46931;
    const double C22610 =
        (3 * C47307 + C47284 * C47376 + C47465 * C47326) / C46931;
    const double C23032 = (C47088 * (4 * C47376 + C47284 * C47465)) / C46931;
    const double C44333 = (5 * (3 * C47331 + C47088 * C47425) +
                           C47088 * (4 * C47425 + C47088 * C47526)) /
                          C46931;
    const double C4791 = C4601 * C291;
    const double C4777 = C48305 * C291;
    const double C16103 = C15913 * C291;
    const double C16089 = C48305 * C291;
    const double C21730 = C47950 * C291;
    const double C4783 = C4601 * C295;
    const double C4763 = C48305 * C295;
    const double C16095 = C15913 * C295;
    const double C16075 = C48305 * C295;
    const double C21722 = C47950 * C295;
    const double C10669 = C4601 * C447;
    const double C10653 = C48305 * C447;
    const double C26501 = C47950 * C447;
    const double C32185 = C15913 * C447;
    const double C32169 = C48305 * C447;
    const double C10661 = C4601 * C451;
    const double C10645 = C48305 * C451;
    const double C26497 = C47950 * C451;
    const double C32177 = C15913 * C451;
    const double C32161 = C48305 * C451;
    const double C5451 = C4601 * C833;
    const double C5443 = C48305 * C833;
    const double C16763 = C15913 * C833;
    const double C16755 = C48305 * C833;
    const double C22263 = C47950 * C833;
    const double C12391 = C4601 * C1878;
    const double C28259 = C47950 * C1878;
    const double C33899 = C15913 * C1878;
    const double C47156 = C47148 + C47155;
    const double C47173 = C47158 - C47166;
    const double C47341 = C47336 - C47339;
    const double C2249 =
        2 * (C47088 * C47357 - (C47299 * ce) / C47096) -
        ((C47299 + C47358 * C47326) * ce) / C47096 +
        C47088 * (C47357 - (C47088 * C47358 * ce) / C47096 +
                  C47088 * (C47088 * C47284 * C47189 - (C47358 * ce) / C47096));
    const double C5717 = C48305 * C1040;
    const double C6057 = C4601 * C1040;
    const double C17021 = C48305 * C1040;
    const double C17353 = C15913 * C1040;
    const double C21726 = C47950 * C1040;
    const double C5895 = C48305 * C1183;
    const double C7005 = C4601 * C1183;
    const double C17191 = C48305 * C1183;
    const double C18285 = C15913 * C1183;
    const double C23511 = C47950 * C1183;
    const double C5903 = C48305 * C1186;
    const double C6267 = C4601 * C1186;
    const double C17199 = C48305 * C1186;
    const double C17563 = C15913 * C1186;
    const double C22269 = C47950 * C1186;
    const double C12383 = C48305 * C1876;
    const double C12731 = C4601 * C1876;
    const double C28609 = C47950 * C1876;
    const double C33891 = C48305 * C1876;
    const double C34239 = C15913 * C1876;
    const double C22488 = C47950 * C5707;
    const double C22639 = C47950 * C5885;
    const double C23042 = C47950 * C6407;
    const double C23747 = C47950 * C7275;
    const double C6801 =
        3 * ((-(C47386 * ce) / C46952) / C46931 - C47354 / C47096 +
             C47088 * C47397) -
        ((2 * C47386 + C47088 * C47394) * ce) / C47096 +
        C47088 * (2 * C47397 - (C47394 * ce) / C47096 +
                  C47088 * ((-(C47088 * C47389 * ce) / C46952) / C46931 -
                            C47387 / C47096 +
                            C47088 * ((-(C47088 * C47284 * C47175) / C46952) /
                                          C46931 -
                                      (C47389 * ce) / C47096)));
    const double C47430 = C47428 + C47429;
    const double C47514 = C47501 - C47508;
    const double C47193 = C47184 + C47191;
    const double C47370 = C47153 + C47369;
    const double C47403 = C47088 * C47400;
    const double C47441 = C47433 - C47437;
    const double C5719 = C48305 * C1043;
    const double C17023 = C48305 * C1043;
    const double C22761 = C47950 * C1043;
    const double C5909 = C48305 * C1189;
    const double C17205 = C48305 * C1189;
    const double C23519 = C47950 * C1189;
    const double C6415 = C48305 * C1557;
    const double C17703 = C48305 * C1557;
    const double C22925 = C47950 * C1557;
    const double C47456 = C47450 + C47455;
    const double C47474 = C47469 - C47472;
    const double C47498 = C47088 * C47497;
    const double C47527 = C47524 + C47525;
    const double C48363 = C48307 + C48355;
    const double C558 = C48342 - (C47986 * C47969) / C46952;
    const double C111 = C48343 / C46969 - C47984 / C48314;
    const double C48356 = C48310 + C48342;
    const double C48364 = C48323 + C48359;
    const double C1290 = C48349 - (C48065 * C48054) / C46952;
    const double C1018 = C48350 / C46969 - C48063 / C48314;
    const double C48360 = C48325 + C48349;
    const double C22930 = C22926 - C22297;
    const double C22658 = C22651 - C22625;
    const double C47013 = C47009 - C46990;
    const double C25562 = C24765 + C24766;
    const double C24780 = C24760 + C24761;
    const double C25676 = C21742 * C48365;
    const double C25668 = C21740 * C48365;
    const double C31223 = C22283 * C48365;
    const double C1847 =
        (C48358 + 2 * C48100) / C46969 - (C48365 * C48096) / C46952;
    const double C23741 = C22285 * C2130;
    const double C23731 = C22283 * C2130;
    const double C28745 = C22641 * C2130;
    const double C25678 = C22285 * C48362;
    const double C25670 = C22283 * C48362;
    const double C31225 = C22641 * C48362;
    const double C1848 =
        (C48347 + 2 * C48107 + C48365) / C46969 - (C48362 * C48096) / C46952;
    const double C1849 = (C48321 + C48104 / C46952 + C48362) / C46969 -
                         (C48353 * C48096) / C46952;
    const double C23289 = C23288 - C23278;
    const double C4825 = C4800 + C4801;
    const double C4815 = C4780 + C4781;
    const double C16137 = C16112 + C16113;
    const double C16127 = C16092 + C16093;
    const double C21753 = C21731 + C21732;
    const double C4819 = C4788 + C4789;
    const double C5110 = C5102 + C5103;
    const double C16131 = C16100 + C16101;
    const double C16422 = C16414 + C16415;
    const double C21994 = C21986 + C21987;
    const double C10698 = C10670 + C10671;
    const double C10690 = C10654 + C10655;
    const double C26520 = C26502 + C26503;
    const double C32214 = C32186 + C32187;
    const double C32206 = C32170 + C32171;
    const double C10694 = C10662 + C10663;
    const double C10970 = C10962 + C10963;
    const double C26796 = C26792 + C26793;
    const double C32210 = C32178 + C32179;
    const double C32486 = C32478 + C32479;
    const double C5471 = C5456 + C5457;
    const double C5467 = C5448 + C5449;
    const double C16783 = C16768 + C16769;
    const double C16779 = C16760 + C16761;
    const double C22290 = C22272 + C22273;
    const double C23046 = C23043 + C22918;
    const double C47252 = C47251 + C47246;
    const double C6999 = C48305 * C1164;
    const double C18279 = C48305 * C1164;
    const double C26507 = C47950 * C1164;
    const double C6064 = C6058 + C6059;
    const double C17360 = C17354 + C17355;
    const double C21756 = C21737 + C21738;
    const double C6268 = C6260 + C6261;
    const double C17564 = C17556 + C17557;
    const double C22292 = C22278 + C22279;
    const double C12735 = C12728 + C12729;
    const double C34243 = C34236 + C34237;
    const double C43077 = C43073 + C43074;
    const double C22767 = C22765 * C116;
    const double C23526 = C23522 * C1674;
    const double C24108 = C23522 * C416;
    const double C25316 = C23522 * C47038;
    const double C27726 = C23522 * C666;
    const double C30082 = C23522 * C3114;
    const double C22932 = C22928 * C666;
    const double C24778 = C22928 * C3114;
    const double C27525 = C22928 * C116;
    const double C22498 = C22494 * C116;
    const double C22656 = C22647 * C416;
    const double C23285 = C22647 * C1674;
    const double C26090 = C22647 * C47038;
    const double C27860 = C22647 * C666;
    const double C31090 = C22647 * C3114;
    const double C23047 = C23044 * C666;
    const double C25565 = C23044 * C3114;
    const double C27235 = C23044 * C116;
    const double C47858 = C47843 - C47857;
    const double C137 = 5 * ((-3 * C47123) / C46952 + C47085 * C47154) +
                        C47085 * (4 * C47154 + C47085 * C47194);
    const double C290 =
        (-3 * C47123) / C46952 + C47085 * C47154 + C47194 * C47293;
    const double C446 = (-3 * C47123) / C46952 + C47085 * C47154 +
                        C47088 * (C47088 * C47194 - (C47554 * ce) / C46952) -
                        (C47088 * C47554 * ce) / C46952;
    const double C563 = C47284 * (4 * C47154 + C47085 * C47194);
    const double C669 = C47088 * (4 * C47154 + C47085 * C47194) -
                        ((4 * C47550 + C47085 * C47554) * ce) / C46952;
    const double C831 =
        C47088 * C47284 * C47194 - (C47284 * C47554 * ce) / C46952;
    const double C47277 = C47276 + C47268;
    const double C1035 = (3 * (C47232 + C47249 * C47293) +
                          C47284 * (2 * C47297 + C47284 * C47313)) /
                         C46931;
    const double C1178 = (C47232 + C47249 * C47293 + C47313 * C47326) / C46931;
    const double C1552 = (C47088 * (2 * C47297 + C47284 * C47313)) / C46931;
    const double C1871 = (3 * (C47232 + C47249 * C47326) +
                          C47088 * (2 * C47343 + C47088 * C47348)) /
                         C46931;
    const double C4820 = C4790 + C4791;
    const double C4813 = C4776 + C4777;
    const double C16132 = C16102 + C16103;
    const double C16125 = C16088 + C16089;
    const double C21752 = C21729 + C21730;
    const double C4816 = C4782 + C4783;
    const double C4806 = C4762 + C4763;
    const double C16128 = C16094 + C16095;
    const double C16118 = C16074 + C16075;
    const double C21748 = C21721 + C21722;
    const double C10697 = C10668 + C10669;
    const double C10689 = C10652 + C10653;
    const double C26519 = C26500 + C26501;
    const double C32213 = C32184 + C32185;
    const double C32205 = C32168 + C32169;
    const double C10693 = C10660 + C10661;
    const double C10685 = C10644 + C10645;
    const double C26517 = C26496 + C26497;
    const double C32209 = C32176 + C32177;
    const double C32201 = C32160 + C32161;
    const double C5468 = C5450 + C5451;
    const double C5464 = C5442 + C5443;
    const double C16780 = C16762 + C16763;
    const double C16776 = C16754 + C16755;
    const double C22287 = C22262 + C22263;
    const double C12400 = C12390 + C12391;
    const double C28267 = C28258 + C28259;
    const double C33908 = C33898 + C33899;
    const double C143 =
        4 * (2 * C47126 - (ae * C47123) / C47096 + C47085 * C47156) +
        (((-3 * C47123) / C46952 + C47085 * C47154) * ae) / C46931 +
        C47085 *
            (3 * C47156 + (C47154 * ae) / C46931 +
             C47085 * (2 * C47153 - (ae * C47147) / C47096 +
                       C47085 * ((-(ae * C47085 * C47141) / C46952) / C46931 -
                                 C47139 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47092, 7) *
                                              bs[7] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47141) / C47096))));
    const double C296 = (-(ae * C47110) / C46952) / C46931 - C47107 / C47096 +
                        C47085 * C47126 + C47156 * std::pow(yP - yQ, 2);
    const double C297 =
        (yP - yQ) * (2 * C47126 - (ae * C47123) / C47096 + C47085 * C47156);
    const double C452 = (-(ae * C47110) / C46952) / C46931 - C47107 / C47096 +
                        C47085 * C47126 - (C47088 * C47232 * ce) / C47096 +
                        C47088 * (C47088 * C47156 - (C47232 * ce) / C47096);
    const double C453 =
        C47088 * (2 * C47126 - (ae * C47123) / C47096 + C47085 * C47156) -
        ((2 * C47220 + C47085 * C47232 + (C47209 + C47223 * C47114) * ae) *
         ce) /
            C47096;
    const double C834 =
        C47088 * C47284 * C47156 - (C47284 * C47232 * ce) / C47096;
    const double C1879 =
        3 * (C47126 - (C47335 * ce) / C47096 + C47088 * C47341) -
        ((2 * C47335 + C47088 * C47340) * ce) / C47096 +
        C47088 *
            (2 * C47341 - (C47340 * ce) / C47096 +
             C47088 * (C47153 - (C47088 * C47245 * ce) / C47096 +
                       C47088 * (C47088 * C47189 - (C47245 * ce) / C47096)));
    const double C7283 = C48305 * C2249;
    const double C18555 = C48305 * C2249;
    const double C28471 = C47950 * C2249;
    const double C5729 = C5716 + C5717;
    const double C6063 = C6056 + C6057;
    const double C17033 = C17020 + C17021;
    const double C17359 = C17352 + C17353;
    const double C21750 = C21725 + C21726;
    const double C5915 = C5894 + C5895;
    const double C7009 = C7004 + C7005;
    const double C17211 = C17190 + C17191;
    const double C18289 = C18284 + C18285;
    const double C23521 = C23510 + C23511;
    const double C5919 = C5902 + C5903;
    const double C6271 = C6266 + C6267;
    const double C17215 = C17198 + C17199;
    const double C17567 = C17562 + C17563;
    const double C22289 = C22268 + C22269;
    const double C12396 = C12382 + C12383;
    const double C12736 = C12730 + C12731;
    const double C28611 = C28608 + C28609;
    const double C33904 = C33890 + C33891;
    const double C34244 = C34238 + C34239;
    const double C22493 = C22487 + C22488;
    const double C22648 = C22638 + C22639;
    const double C23045 = C23041 + C23042;
    const double C23751 = C23746 + C23747;
    const double C28263 = C47950 * C6801;
    const double C12375 =
        4 * (2 * C47333 - (C47331 * ce) / C47096 + C47088 * C47430) -
        ((3 * C47331 + C47088 * C47425) * ce) / C47096 +
        C47088 *
            (3 * C47430 - (C47425 * ce) / C47096 +
             C47088 *
                 (2 * C47427 - (C47419 * ce) / C47096 +
                  C47088 *
                      ((-(C47088 * C47238 * ce) / C46952) / C46931 - C47161 +
                       C47088 * ((-(C47088 * C47175) / C46952) / C46931 -
                                 (C47238 * ce) / C47096))));
    const double C47195 = C47085 * C47193;
    const double C47344 = C47088 * C47193;
    const double C47360 = C47284 * C47193;
    const double C1039 =
        2 * C47284 * C47156 + C47284 * (C47156 + C47193 * std::pow(C47284, 2));
    const double C1044 =
        3 * (C47156 + C47193 * C47293) +
        C47284 *
            (2 * C47284 * C47193 +
             C47284 *
                 (C47193 +
                  ((-(ae * C47085 * C47177) / C46952) / C46931 -
                   C47175 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46952) /
                                 C46931 -
                             (ae * C47177) / C47096)) *
                      C47293));
    const double C1182 =
        C47284 * C47156 - (C47088 * C47297 * ce) / C47096 +
        C47088 * (C47088 * C47284 * C47193 - (C47297 * ce) / C47096);
    const double C1185 = C47088 * (C47156 + C47193 * C47293) -
                         ((C47232 + C47249 * C47293) * ce) / C47096;
    const double C1190 =
        C47156 + C47193 * C47293 - (C47088 * C47313 * ce) / C47096 +
        C47088 *
            (C47088 *
                 (C47193 +
                  ((-(ae * C47085 * C47177) / C46952) / C46931 -
                   C47175 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46952) /
                                 C46931 -
                             (ae * C47177) / C47096)) *
                      C47293) -
             (C47313 * ce) / C47096);
    const double C1558 =
        C47088 *
            (2 * C47284 * C47193 +
             C47284 *
                 (C47193 +
                  ((-(ae * C47085 * C47177) / C46952) / C46931 -
                   C47175 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46952) /
                                 C46931 -
                             (ae * C47177) / C47096)) *
                      C47293)) -
        ((2 * C47297 + C47284 * C47313) * ce) / C47096;
    const double C1875 =
        2 * (C47088 * C47156 - (C47232 * ce) / C47096) -
        ((C47232 + C47249 * std::pow(C47088, 2)) * ce) / C47096 +
        C47088 * (C47156 - (C47088 * C47249 * ce) / C47096 +
                  C47088 * (C47088 * C47193 - (C47249 * ce) / C47096));
    const double C5708 =
        4 * (2 * C47357 + C47284 * C47370) +
        C47284 *
            (3 * C47370 +
             C47284 * (2 * C47284 * C47189 +
                       C47284 * (C47189 + ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096) *
                                              C47293)));
    const double C5886 =
        2 * C47357 + C47284 * C47370 - (C47088 * C47382 * ce) / C47096 +
        C47088 *
            (C47088 * (2 * C47284 * C47189 +
                       C47284 * (C47189 + ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096) *
                                              C47293)) -
             (C47382 * ce) / C47096);
    const double C6408 =
        C47088 *
            (3 * C47370 +
             C47284 * (2 * C47284 * C47189 +
                       C47284 * (C47189 + ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096) *
                                              C47293))) -
        ((3 * C47310 + C47284 * C47382) * ce) / C47096;
    const double C7276 =
        2 * (C47088 * C47370 - (C47310 * ce) / C47096) -
        ((C47310 + C47380 * C47326) * ce) / C47096 +
        C47088 *
            (C47370 - (C47088 * C47380 * ce) / C47096 +
             C47088 * (C47088 * (C47189 + ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096) *
                                              C47293) -
                       (C47380 * ce) / C47096));
    const double C47406 = C47403 - C47404;
    const double C47444 = C47088 * C47441;
    const double C5730 = C5718 + C5719;
    const double C17034 = C17022 + C17023;
    const double C22764 = C22760 + C22761;
    const double C5922 = C5908 + C5909;
    const double C17218 = C17204 + C17205;
    const double C23523 = C23518 + C23519;
    const double C6420 = C6414 + C6415;
    const double C17708 = C17702 + C17703;
    const double C22929 = C22924 + C22925;
    const double C22480 =
        5 * (3 * C47367 + C47284 * C47456) +
        C47284 * (4 * C47456 +
                  C47284 * (3 * C47454 +
                            C47284 * ((-2 * C47284 * C47175) / C47096 +
                                      C47284 * ((-(std::pow(C47090, 8) * bs[8] *
                                                   C47101 * C47293) /
                                                 C46952) /
                                                    C46931 -
                                                C47175 / C47096))));
    const double C22612 =
        3 * C47367 + C47284 * C47456 - (C47088 * C47465 * ce) / C47096 +
        C47088 * (C47088 * (3 * C47454 +
                            C47284 * ((-2 * C47284 * C47175) / C47096 +
                                      C47284 * ((-(std::pow(C47090, 8) * bs[8] *
                                                   C47101 * C47293) /
                                                 C46952) /
                                                    C46931 -
                                                C47175 / C47096))) -
                  (C47465 * ce) / C47096);
    const double C23034 =
        C47088 * (4 * C47456 +
                  C47284 * (3 * C47454 +
                            C47284 * ((-2 * C47284 * C47175) / C47096 +
                                      C47284 * ((-(std::pow(C47090, 8) * bs[8] *
                                                   C47101 * C47293) /
                                                 C46952) /
                                                    C46931 -
                                                C47175 / C47096)))) -
        ((4 * C47376 + C47284 * C47465) * ce) / C47096;
    const double C23726 =
        2 * (C47088 * C47456 - (C47376 * ce) / C47096) -
        ((C47376 + C47463 * C47326) * ce) / C47096 +
        C47088 * (C47456 - (C47088 * C47463 * ce) / C47096 +
                  C47088 * (C47088 * ((-2 * C47284 * C47175) / C47096 +
                                      C47284 * ((-(std::pow(C47090, 8) * bs[8] *
                                                   C47101 * C47293) /
                                                 C46952) /
                                                    C46931 -
                                                C47175 / C47096)) -
                            (C47463 * ce) / C47096));
    const double C23356 =
        3 * (C47367 - (C47468 * ce) / C47096 + C47088 * C47474) -
        ((2 * C47468 + C47088 * C47473) * ce) / C47096 +
        C47088 * (2 * C47474 - (C47473 * ce) / C47096 +
                  C47088 * (C47454 - (C47088 * C47461 * ce) / C47096 +
                            C47088 * (C47088 * ((-(std::pow(C47090, 8) * bs[8] *
                                                   C47101 * C47293) /
                                                 C46952) /
                                                    C46931 -
                                                C47175 / C47096) -
                                      (C47461 * ce) / C47096)));
    const double C47499 = C47496 + C47498;
    const double C47528 = C47088 * C47527;
    const double C108 =
        (C48354 + 2 * C47978) / C46969 - (C48363 * C47969) / C46952;
    const double C109 =
        (C48341 + 2 * C47986 + C48363) / C46969 - (C48356 * C47969) / C46952;
    const double C110 = (C48312 + C47983 / C46952 + C48356) / C46969 -
                        (C48343 * C47969) / C46952;
    const double C1015 =
        (C48357 + 2 * C48058) / C46969 - (C48364 * C48054) / C46952;
    const double C1016 =
        (C48345 + 2 * C48065 + C48364) / C46969 - (C48360 * C48054) / C46952;
    const double C1017 = (C48318 + C48062 / C46952 + C48360) / C46969 -
                         (C48350 * C48054) / C46952;
    const double C22659 = C22658 + C22652;
    const double C47019 = C47013 / C46969;
    const double C47018 = C46950 * C47013;
    const double C25567 = C24764 - C25562;
    const double C24782 = C24780 - C24762;
    const double C23290 = C23289 + C23279;
    const double C21771 = C21753 * C116;
    const double C22276 = C21753 * C665;
    const double C25034 = C21753 * C3113;
    const double C21998 = C21994 * C116;
    const double C22302 = C22290 * C666;
    const double C25032 = C22290 * C3114;
    const double C26332 = C22290 * C116;
    const double C27000 = C22290 * C665;
    const double C30408 = C22290 * C3113;
    const double C135 = (4 * (2 * C47220 + C47085 * C47232 + C47544 * ae) +
                         C47085 * (3 * C47232 + C47085 * C47252 + C47550 * ae) +
                         (3 * C47544 + C47085 * C47550) * ae) /
                        C46931;
    const double C286 =
        (2 * C47220 + C47085 * C47232 + C47544 * ae + C47252 * C47293) / C46931;
    const double C288 =
        (C47284 * (3 * C47232 + C47085 * C47252 + C47550 * ae)) / C46931;
    const double C441 =
        (2 * C47220 + C47085 * C47232 + C47544 * ae + C47252 * C47326) / C46931;
    const double C443 =
        (C47088 * (3 * C47232 + C47085 * C47252 + C47550 * ae)) / C46931;
    const double C828 = (C47088 * C47284 * C47252) / C46931;
    const double C7006 = C6998 + C6999;
    const double C18286 = C18278 + C18279;
    const double C26522 = C26506 + C26507;
    const double C21774 = C21756 * C116;
    const double C22304 = C22292 * C666;
    const double C25036 = C22292 * C3114;
    const double C26335 = C22292 * C116;
    const double C47859 = C47858 - C47846;
    const double C47278 = C47085 * C47277;
    const double C47351 = C47284 * C47277;
    const double C1296 =
        (2 * C47284 * C47252 + C47284 * (C47252 + C47277 * C47293)) / C46931;
    const double C1446 = (C47088 * (C47252 + C47277 * C47293)) / C46931;
    const double C2138 =
        (2 * C47088 * C47252 + C47088 * (C47252 + C47277 * C47326)) / C46931;
    const double C21770 = C21752 * C48017;
    const double C22271 = C21752 * C48287;
    const double C25031 = C21752 * C3111;
    const double C21766 = C21748 * C48017;
    const double C22266 = C21748 * C48287;
    const double C23513 = C21748 * C1669;
    const double C24105 = C21748 * C48358;
    const double C24773 = C21748 * C3111;
    const double C25313 = C21748 * C48100;
    const double C22299 = C22287 * C48104;
    const double C23507 = C22287 * C1670;
    const double C24101 = C22287 * C48347;
    const double C24771 = C22287 * C48104;
    const double C25309 = C22287 * C48107;
    const double C26329 = C22287 * C48017;
    const double C26997 = C22287 * C48287;
    const double C28465 = C22287 * C1669;
    const double C29205 = C22287 * C48358;
    const double C30077 = C22287 * C3111;
    const double C30759 = C22287 * C48100;
    const double C4797 = C4601 * C296;
    const double C4785 = C48305 * C296;
    const double C16109 = C15913 * C296;
    const double C16097 = C48305 * C296;
    const double C21734 = C47950 * C296;
    const double C4793 = C48305 * C297;
    const double C5107 = C4601 * C297;
    const double C16105 = C48305 * C297;
    const double C16419 = C15913 * C297;
    const double C21989 = C47950 * C297;
    const double C10675 = C4601 * C452;
    const double C10659 = C48305 * C452;
    const double C26505 = C47950 * C452;
    const double C32191 = C15913 * C452;
    const double C32175 = C48305 * C452;
    const double C10667 = C48305 * C453;
    const double C10967 = C4601 * C453;
    const double C26795 = C47950 * C453;
    const double C32183 = C48305 * C453;
    const double C32483 = C15913 * C453;
    const double C5461 = C4601 * C834;
    const double C5453 = C48305 * C834;
    const double C16773 = C15913 * C834;
    const double C16765 = C48305 * C834;
    const double C22275 = C47950 * C834;
    const double C12393 = C48305 * C1879;
    const double C33901 = C48305 * C1879;
    const double C44590 = C47950 * C1879;
    const double C7288 = C7282 + C7283;
    const double C18560 = C18554 + C18555;
    const double C28473 = C28470 + C28471;
    const double C21768 = C21750 * C48017;
    const double C22921 = C21750 * C48287;
    const double C24777 = C21750 * C3111;
    const double C23525 = C23521 * C48321;
    const double C24103 = C23521 * C48321;
    const double C25311 = C23521 * C3625;
    const double C26999 = C23521 * C48104;
    const double C28467 = C23521 * C1670;
    const double C29207 = C23521 * C48347;
    const double C30079 = C23521 * C48104;
    const double C30761 = C23521 * C48107;
    const double C22301 = C22289 * C48104;
    const double C23515 = C22289 * C1670;
    const double C24107 = C22289 * C48347;
    const double C24775 = C22289 * C48104;
    const double C25315 = C22289 * C48107;
    const double C26331 = C22289 * C48017;
    const double C27725 = C22289 * C48287;
    const double C30081 = C22289 * C3111;
    const double C22497 = C22493 * C48017;
    const double C22657 = C22648 * C48321;
    const double C23286 = C22648 * C48321;
    const double C26091 = C22648 * C3625;
    const double C27861 = C22648 * C48104;
    const double C31091 = C22648 * C48104;
    const double C23048 = C23045 * C48104;
    const double C25566 = C23045 * C48104;
    const double C27234 = C23045 * C48017;
    const double C23755 = C23751 * C48334;
    const double C25682 = C23751 * C48334;
    const double C27393 = C23751 * C48321;
    const double C28165 = C23751 * C48321;
    const double C31769 = C23751 * C3625;
    const double C28269 = C28262 + C28263;
    const double C44340 = C47950 * C12375;
    const double C47196 = C47173 + C47195;
    const double C47349 = C47344 - C47347;
    const double C2250 =
        2 * (C47088 * C47360 - (C47297 * ce) / C47096) -
        ((C47297 + C47361 * C47326) * ce) / C47096 +
        C47088 * (C47360 - (C47088 * C47361 * ce) / C47096 +
                  C47088 * (C47088 * C47284 *
                                ((-(ae * C47085 * C47177) / C46952) / C46931 -
                                 C47175 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096)) -
                            (C47361 * ce) / C47096));
    const double C6055 = C48305 * C1039;
    const double C17351 = C48305 * C1039;
    const double C21736 = C47950 * C1039;
    const double C7003 = C48305 * C1182;
    const double C18283 = C48305 * C1182;
    const double C26509 = C47950 * C1182;
    const double C6265 = C48305 * C1185;
    const double C17561 = C48305 * C1185;
    const double C22281 = C47950 * C1185;
    const double C12733 = C48305 * C1875;
    const double C34241 = C48305 * C1875;
    const double C43076 = C47950 * C1875;
    const double C6802 =
        3 * (C47357 - (C47399 * ce) / C47096 + C47088 * C47406) -
        ((2 * C47399 + C47088 * C47407) * ce) / C47096 +
        C47088 * (2 * C47406 - (C47407 * ce) / C47096 +
                  C47088 * (C47400 - (C47088 * C47402 * ce) / C47096 +
                            C47088 * (C47088 * C47284 *
                                          ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096) -
                                      (C47402 * ce) / C47096)));
    const double C47446 = C47443 + C47444;
    const double C22766 = C22764 * C48017;
    const double C23527 = C23523 * C48321;
    const double C24109 = C23523 * C48321;
    const double C25317 = C23523 * C3625;
    const double C27727 = C23523 * C48104;
    const double C30083 = C23523 * C48104;
    const double C22933 = C22929 * C48104;
    const double C24779 = C22929 * C48104;
    const double C27524 = C22929 * C48017;
    const double C28250 =
        4 * (2 * C47397 - (C47394 * ce) / C47096 + C47088 * C47499) -
        ((3 * C47394 + C47088 * C47495) * ce) / C47096 +
        C47088 *
            (3 * C47499 - (C47495 * ce) / C47096 +
             C47088 *
                 (2 * C47497 - (C47489 * ce) / C47096 +
                  C47088 * ((-(C47088 * C47481 * ce) / C46952) / C46931 -
                            C47479 / C47096 +
                            C47088 * ((-(C47088 * C47284 * std::pow(C47090, 8) *
                                         bs[8] * C47101) /
                                       C46952) /
                                          C46931 -
                                      (C47481 * ce) / C47096))));
    const double C47529 = C47514 + C47528;
    const double C22660 = C22659 + C22653;
    const double C47024 = C47019 - C47020;
    const double C47023 = C47018 + C48287;
    const double C25568 = C25567 + C24767;
    const double C24784 = C24782 - C24763;
    const double C23291 = C23290 + C23280;
    const double C4799 = C48305 * C286;
    const double C16111 = C48305 * C286;
    const double C21991 = C47950 * C286;
    const double C5105 = C48305 * C288;
    const double C16417 = C48305 * C288;
    const double C10673 = C48305 * C441;
    const double C32189 = C48305 * C441;
    const double C43276 = C47950 * C441;
    const double C10965 = C48305 * C443;
    const double C32481 = C48305 * C443;
    const double C5455 = C48305 * C828;
    const double C16767 = C48305 * C828;
    const double C26655 = C47950 * C828;
    const double C27002 = C26522 * C666;
    const double C30410 = C26522 * C3114;
    const double C44334 =
        5 * ((-3 * C47771) / C46952 + C47088 * C47859 -
             (C47770 * ce) / C46952) +
        C47088 *
            (4 * C47859 +
             C47088 * ((-3 * C47853) / C46952 +
                       C47088 * ((-2 * C47844) / C46952 -
                                 (C47088 *
                                  (C47088 * (C47088 * C47177 + C47258 * ce) +
                                   C47141 + C47088 * C47258 * ce)) /
                                     C46952 -
                                 (C47847 * ce) / C46952) -
                       (C47852 * ce) / C46952) -
             (C47856 * ce) / C46952) -
        ((4 * C47770 + C47088 * C47856) * ce) / C46952;
    const double C47279 = C47255 + C47278;
    const double C2028 = (C47284 * C47252 + C47351 * C47326) / C46931;
    const double C21776 = C21766 + C21765;
    const double C22919 = C22266 + C22267;
    const double C24781 = C24773 + C24774;
    const double C4823 = C4796 + C4797;
    const double C4817 = C4784 + C4785;
    const double C16135 = C16108 + C16109;
    const double C16129 = C16096 + C16097;
    const double C21754 = C21733 + C21734;
    const double C4821 = C4792 + C4793;
    const double C5112 = C5106 + C5107;
    const double C16133 = C16104 + C16105;
    const double C16424 = C16418 + C16419;
    const double C21995 = C21988 + C21989;
    const double C10700 = C10674 + C10675;
    const double C10692 = C10658 + C10659;
    const double C26521 = C26504 + C26505;
    const double C32216 = C32190 + C32191;
    const double C32208 = C32174 + C32175;
    const double C10696 = C10666 + C10667;
    const double C10972 = C10966 + C10967;
    const double C26797 = C26794 + C26795;
    const double C32212 = C32182 + C32183;
    const double C32488 = C32482 + C32483;
    const double C5473 = C5460 + C5461;
    const double C5469 = C5452 + C5453;
    const double C16785 = C16772 + C16773;
    const double C16781 = C16764 + C16765;
    const double C22291 = C22274 + C22275;
    const double C12401 = C12392 + C12393;
    const double C33909 = C33900 + C33901;
    const double C44592 = C44589 + C44590;
    const double C28475 = C28473 * C48321;
    const double C29209 = C28473 * C48321;
    const double C30763 = C28473 * C3625;
    const double C22759 = C21767 + C21768;
    const double C28749 = C28269 * C48334;
    const double C31229 = C28269 * C48334;
    const double C44342 = C44339 + C44340;
    const double C144 =
        5 * (3 * C47156 + (C47154 * ae) / C46931 + C47085 * C47196) +
        ((4 * C47154 + C47085 * C47194) * ae) / C46931 +
        C47085 *
            (4 * C47196 + (C47194 * ae) / C46931 +
             C47085 *
                 (3 * C47193 + (C47190 * ae) / C46931 +
                  C47085 *
                      (2 * C47189 - (ae * C47183) / C47096 +
                       C47085 * ((-(ae * C47085 * C47177) / C46952) / C46931 -
                                 C47175 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096)))));
    const double C298 = 2 * C47126 - (ae * C47123) / C47096 + C47085 * C47156 +
                        C47196 * std::pow(yP - yQ, 2);
    const double C299 =
        (yP - yQ) * (3 * C47156 + (C47154 * ae) / C46931 + C47085 * C47196);
    const double C300 =
        3 * C47156 + (C47154 * ae) / C46931 + C47085 * C47196 +
        (3 * C47193 + (C47190 * ae) / C46931 +
         C47085 *
             (2 * C47189 - (ae * C47183) / C47096 +
              C47085 *
                  ((-(ae * C47085 * C47177) / C46952) / C46931 -
                   C47175 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46952) /
                                 C46931 -
                             (ae * C47177) / C47096)))) *
            std::pow(yP - yQ, 2);
    const double C454 = 2 * C47126 - (ae * C47123) / C47096 + C47085 * C47156 -
                        (C47088 * C47252 * ce) / C47096 +
                        C47088 * (C47088 * C47196 - (C47252 * ce) / C47096);
    const double C455 =
        C47088 * (3 * C47156 + (C47154 * ae) / C46931 + C47085 * C47196) -
        ((3 * C47232 + C47085 * C47252 + (2 * C47226 + C47085 * C47244) * ae) *
         ce) /
            C47096;
    const double C564 =
        (yP - yQ) *
        (4 * C47196 + (C47194 * ae) / C46931 +
         C47085 *
             (3 * C47193 + (C47190 * ae) / C46931 +
              C47085 * (2 * C47189 - (ae * C47183) / C47096 +
                        C47085 * ((-(ae * C47085 * C47177) / C46952) / C46931 -
                                  C47175 / C47096 +
                                  C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                               bs[8] * C47101) /
                                             C46952) /
                                                C46931 -
                                            (ae * C47177) / C47096)))));
    const double C835 =
        C47088 * C47284 * C47196 - (C47284 * C47252 * ce) / C47096;
    const double C1298 =
        2 * C47284 * C47196 +
        C47284 *
            (C47196 +
             (2 * C47189 - (ae * C47183) / C47096 +
              C47085 *
                  ((-(ae * C47085 * C47177) / C46952) / C46931 -
                   C47175 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46952) /
                                 C46931 -
                             (ae * C47177) / C47096))) *
                 C47293);
    const double C1448 =
        C47088 *
            (C47196 +
             (2 * C47189 - (ae * C47183) / C47096 +
              C47085 *
                  ((-(ae * C47085 * C47177) / C46952) / C46931 -
                   C47175 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46952) /
                                 C46931 -
                             (ae * C47177) / C47096))) *
                 C47293) -
        ((C47252 + C47277 * C47293) * ce) / C47096;
    const double C2030 =
        C47284 * C47196 - (C47088 * C47351 * ce) / C47096 +
        C47088 * (C47088 * C47284 *
                      (2 * C47189 - (ae * C47183) / C47096 +
                       C47085 * ((-(ae * C47085 * C47177) / C46952) / C46931 -
                                 C47175 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096))) -
                  (C47351 * ce) / C47096);
    const double C2140 =
        2 * (C47088 * C47196 - (C47252 * ce) / C47096) -
        ((C47252 + C47277 * C47326) * ce) / C47096 +
        C47088 *
            (C47196 - (C47088 * C47277 * ce) / C47096 +
             C47088 *
                 (C47088 *
                      (2 * C47189 - (ae * C47183) / C47096 +
                       C47085 * ((-(ae * C47085 * C47177) / C46952) / C46931 -
                                 C47175 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096))) -
                  (C47277 * ce) / C47096));
    const double C1880 =
        3 * (C47156 - (C47343 * ce) / C47096 + C47088 * C47349) -
        ((2 * C47343 + C47088 * C47348) * ce) / C47096 +
        C47088 *
            (2 * C47349 - (C47348 * ce) / C47096 +
             C47088 *
                 (C47193 - (C47088 * C47274 * ce) / C47096 +
                  C47088 *
                      (C47088 * ((-(ae * C47085 * C47177) / C46952) / C46931 -
                                 C47175 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096)) -
                       (C47274 * ce) / C47096)));
    const double C6062 = C6054 + C6055;
    const double C17358 = C17350 + C17351;
    const double C21755 = C21735 + C21736;
    const double C7008 = C7002 + C7003;
    const double C18288 = C18282 + C18283;
    const double C26523 = C26508 + C26509;
    const double C6270 = C6264 + C6265;
    const double C17566 = C17560 + C17561;
    const double C22293 = C22280 + C22281;
    const double C12737 = C12732 + C12733;
    const double C34245 = C34240 + C34241;
    const double C43078 = C43075 + C43076;
    const double C12376 =
        4 * (2 * C47341 - (C47340 * ce) / C47096 + C47088 * C47446) -
        ((3 * C47340 + C47088 * C47445) * ce) / C47096 +
        C47088 *
            (3 * C47446 - (C47445 * ce) / C47096 +
             C47088 *
                 (2 * C47441 - (C47439 * ce) / C47096 +
                  C47088 *
                      (C47189 - (C47088 * C47267 * ce) / C47096 +
                       C47088 * (C47088 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096) -
                                 (C47267 * ce) / C47096))));
    const double C44335 =
        5 * (3 * C47430 - (C47425 * ce) / C47096 + C47088 * C47529) -
        ((4 * C47425 + C47088 * C47526) * ce) / C47096 +
        C47088 *
            (4 * C47529 - (C47526 * ce) / C47096 +
             C47088 *
                 (3 * C47527 - (C47520 * ce) / C47096 +
                  C47088 *
                      (2 * C47522 - (C47513 * ce) / C47096 +
                       C47088 * ((-(C47088 * C47260 * ce) / C46952) / C46931 -
                                 C47175 / C47096 +
                                 C47088 * ((-(C47088 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (C47260 * ce) / C47096)))));
    const double C25312 = C22288 * C47024;
    const double C25306 = C22286 * C47024;
    const double C25302 = C22284 * C47024;
    const double C25296 = C22282 * C47024;
    const double C26086 = C22645 * C47024;
    const double C30758 = C23520 * C47024;
    const double C30754 = C22640 * C47024;
    const double C31764 = C22643 * C47024;
    const double C1855 =
        (C47024 / C46969 + ((C46950 * C47038 + C3625) * ce) / C46952) / C46969 -
        ((C46950 * (C47038 / C46969 + (0 * ce) / C46952) + C48334) * de) /
            C46952;
    const double C2135 =
        C47024 / C46969 - ((C46950 * C47038 + C3625) * de) / C46952;
    const double C3365 =
        C47024 / C46969 + ((C46950 * C47038 + C3625) * ce) / C46952;
    const double C47027 = C47023 * de;
    const double C4824 = C4798 + C4799;
    const double C16136 = C16110 + C16111;
    const double C21996 = C21990 + C21991;
    const double C5111 = C5104 + C5105;
    const double C16423 = C16416 + C16417;
    const double C10699 = C10672 + C10673;
    const double C32215 = C32188 + C32189;
    const double C43279 = C43275 + C43276;
    const double C10971 = C10964 + C10965;
    const double C32487 = C32480 + C32481;
    const double C5470 = C5454 + C5455;
    const double C16782 = C16766 + C16767;
    const double C26658 = C26654 + C26655;
    const double C47280 = C47279 + C47273;
    const double C22927 = C22300 - C22919;
    const double C24783 = C24772 - C24781;
    const double C21772 = C21754 * C48017;
    const double C22277 = C21754 * C48287;
    const double C25035 = C21754 * C3111;
    const double C21999 = C21995 * C48017;
    const double C22303 = C22291 * C48104;
    const double C25033 = C22291 * C48104;
    const double C26333 = C22291 * C48017;
    const double C27001 = C22291 * C48287;
    const double C30409 = C22291 * C3111;
    const double C4795 = C48305 * C298;
    const double C16107 = C48305 * C298;
    const double C21993 = C47950 * C298;
    const double C5109 = C48305 * C299;
    const double C16421 = C48305 * C299;
    const double C10677 = C48305 * C454;
    const double C32193 = C48305 * C454;
    const double C43278 = C47950 * C454;
    const double C10969 = C48305 * C455;
    const double C32485 = C48305 * C455;
    const double C5459 = C48305 * C835;
    const double C16771 = C48305 * C835;
    const double C26657 = C47950 * C835;
    const double C21773 = C21755 * C48017;
    const double C27003 = C26523 * C48104;
    const double C30411 = C26523 * C48104;
    const double C22305 = C22293 * C48104;
    const double C25037 = C22293 * C48104;
    const double C26334 = C22293 * C48017;
    const double C23742 = C22643 * C2135;
    const double C23732 = C22640 * C2135;
    const double C28746 = C23748 * C2135;
    const double C25679 = C22643 * C3365;
    const double C25671 = C22640 * C3365;
    const double C31226 = C23748 * C3365;
    const double C47029 = C47027 / C46952;
    const double C22000 = C21996 * C116;
    const double C26660 = C26658 * C116;
    const double C456 =
        3 * C47156 + (C47154 * ae) / C46931 + C47085 * C47196 -
        (C47088 * C47280 * ce) / C47096 +
        C47088 *
            (C47088 *
                 (3 * C47193 + (C47190 * ae) / C46931 +
                  C47085 *
                      (2 * C47189 - (ae * C47183) / C47096 +
                       C47085 * ((-(ae * C47085 * C47177) / C46952) / C46931 -
                                 C47175 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096)))) -
             (C47280 * ce) / C47096);
    const double C670 =
        C47088 *
            (4 * C47196 + (C47194 * ae) / C46931 +
             C47085 *
                 (3 * C47193 + (C47190 * ae) / C46931 +
                  C47085 *
                      (2 * C47189 - (ae * C47183) / C47096 +
                       C47085 * ((-(ae * C47085 * C47177) / C46952) / C46931 -
                                 C47175 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096))))) -
        ((4 * C47252 + C47085 * C47280 + (3 * C47244 + C47085 * C47271) * ae) *
         ce) /
            C47096;
    const double C836 =
        C47088 * C47284 *
            (3 * C47193 + (C47190 * ae) / C46931 +
             C47085 * (2 * C47189 - (ae * C47183) / C47096 +
                       C47085 * ((-(ae * C47085 * C47177) / C46952) / C46931 -
                                 C47175 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46952) /
                                               C46931 -
                                           (ae * C47177) / C47096)))) -
        (C47284 * C47280 * ce) / C47096;
    const double C136 = (5 * (3 * C47232 + C47085 * C47252 + C47550 * ae) +
                         C47085 * (4 * C47252 + C47085 * C47280 + C47554 * ae) +
                         (4 * C47550 + C47085 * C47554) * ae) /
                        C46931;
    const double C289 =
        (3 * C47232 + C47085 * C47252 + C47550 * ae + C47280 * C47293) / C46931;
    const double C445 =
        (3 * C47232 + C47085 * C47252 + C47550 * ae + C47280 * C47326) / C46931;
    const double C562 =
        (C47284 * (4 * C47252 + C47085 * C47280 + C47554 * ae)) / C46931;
    const double C668 =
        (C47088 * (4 * C47252 + C47085 * C47280 + C47554 * ae)) / C46931;
    const double C830 = (C47088 * C47284 * C47280) / C46931;
    const double C22931 = C22927 + C22301;
    const double C24785 = C24783 + C24775;
    const double C21777 = C21771 + C21772;
    const double C4822 = C4794 + C4795;
    const double C16134 = C16106 + C16107;
    const double C21997 = C21992 + C21993;
    const double C5113 = C5108 + C5109;
    const double C16425 = C16420 + C16421;
    const double C10701 = C10676 + C10677;
    const double C32217 = C32192 + C32193;
    const double C43280 = C43277 + C43278;
    const double C10973 = C10968 + C10969;
    const double C32489 = C32484 + C32485;
    const double C5472 = C5458 + C5459;
    const double C16784 = C16770 + C16771;
    const double C26659 = C26656 + C26657;
    const double C47031 = C47017 - C47029;
    const double C22001 = C21997 * C48017;
    const double C26661 = C26659 * C48017;
    const double C47032 = C47031 + C47002;
    const double C25314 = C21747 * C47032;
    const double C25308 = C21745 * C47032;
    const double C25300 = C21741 * C47032;
    const double C25294 = C21739 * C47032;
    const double C26088 = C21744 * C47032;
    const double C30760 = C22286 * C47032;
    const double C30752 = C22282 * C47032;
    const double C31766 = C22284 * C47032;
    const double C1852 =
        (((((0 - (C46950 * C46985) / C46952) * ce) / C46952 -
           (0 * de) / C46956 + (2 * C46986) / C46952) /
              C46969 -
          ((C46950 * C47021 + 0) * de) / C46952 + C46995 - C47008) /
             C46969 +
         ((C46950 * C47030 + 0) * ce) / C46952) /
            C46969 -
        ((C46950 * (C47030 / C46969 +
                    ((C46950 * C47032 + C48100) * ce) / C46952 + C47024) +
          C48365) *
         de) /
            C46952 +
        C47032 / C46969 + ((C46950 * C47024 + C48107) * ce) / C46952 +
        2 * (C47002 / C46969 - (0 * de) / C46952);
    const double C1853 =
        (C47030 / C46969 + ((C46950 * C47032 + C48100) * ce) / C46952 +
         C47024) /
            C46969 -
        ((C46950 * (C47032 / C46969 +
                    ((C46950 * C47024 + C48107) * ce) / C46952 + 2 * C47038) +
          C48362) *
         de) /
            C46952 +
        2 * (C47024 / C46969 + ((C46950 * C47038 + C3625) * ce) / C46952);
    const double C1854 =
        (C47032 / C46969 + ((C46950 * C47024 + C48107) * ce) / C46952 +
         2 * C47038) /
            C46969 -
        ((C46950 *
              (C47024 / C46969 + ((C46950 * C47038 + C3625) * ce) / C46952) +
          C48353) *
         de) /
            C46952 +
        3 * (C47038 / C46969 + (0 * ce) / C46952);
    const double C2133 =
        C47030 / C46969 - ((C46950 * C47032 + C48100) * de) / C46952 + C47024;
    const double C2134 = C47032 / C46969 -
                         ((C46950 * C47024 + C48107) * de) / C46952 +
                         2 * C47038;
    const double C3363 =
        C47030 / C46969 + ((C46950 * C47032 + C48100) * ce) / C46952 + C47024;
    const double C3364 = C47032 / C46969 +
                         ((C46950 * C47024 + C48107) * ce) / C46952 +
                         2 * C47038;
    const double C26085 = C25300 + C25301;
    const double C23738 = C21741 * C2133;
    const double C23728 = C21739 * C2133;
    const double C28742 = C22282 * C2133;
    const double C23740 = C22284 * C2134;
    const double C23730 = C22282 * C2134;
    const double C28744 = C22640 * C2134;
    const double C25675 = C21741 * C3363;
    const double C25667 = C21739 * C3363;
    const double C31222 = C22282 * C3363;
    const double C25677 = C22284 * C3364;
    const double C25669 = C22282 * C3364;
    const double C31224 = C22640 * C3364;
    const double C26092 = C26085 - C25302;
    const double C26093 = C26092 - C25303;
    const double C26094 = C26093 + C25304;
    const double C26095 = C26094 + C25305;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C48058 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C48017 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C48206 * C48221 * C48065 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C48017) *
                      C48206 * C48221 * C2717) *
                     C47978 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C48017) *
                      C48206 * C48221 * C48065 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C48017 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48206 * C48221 * C48058 -
                  ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                    C113 * C281 + C101 * C295) *
                       C48017 +
                   (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                    C113 * C265 + C101 * C278) *
                       C116) *
                      C48206 * C48221 * C2717) *
                     C47986 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48017) *
                      C48206 * C48221 * C48058 -
                  ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                    C113 * C271 + C101 * C291) *
                       C48017 +
                   (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                    C113 * C261 + C101 * C274) *
                       C116) *
                      C48206 * C48221 * C48065 +
                  ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                    C115 * C270 + C103 * C289) *
                       C116 +
                   (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                    C115 * C290 + C103 * C300) *
                       C48017) *
                      C48206 * C48221 * C2717) *
                     C2720)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C665 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48287 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C666 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C48058 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C666 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48287 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C665) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48104) *
                      C48206 * C48221 * C48065 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C665 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C48287 -
                   (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                    C113 * C1160 + C101 * C1172) *
                       C666 -
                   (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                    C113 * C1175 + C101 * C1187) *
                       C48104) *
                      C48206 * C48221 * C2717) *
                     C2457 +
                 (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C666 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48287 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C665) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48104) *
                      C48206 * C48221 * C48058 +
                  ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C665 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C48287 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C666 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C48104) *
                      C48206 * C48221 * C48065 +
                  ((C113 * C1159 + C101 * C1171 + C114 * C1158 + C102 * C1170 +
                    C115 * C1445 + C103 * C1446) *
                       C666 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C48287 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C665) +
                   (C113 * C1174 + C101 * C1186 + C114 * C1173 + C102 * C1185 +
                    C115 * C1447 + C103 * C1448) *
                       C48104) *
                      C48206 * C48221 * C2717) *
                     C47983)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C48364 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C48017 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C48206 * C48221 * C48360 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C48017) *
                      C48206 * C48221 * C48350 -
                  ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                    C113 * C1029 + C101 * C1041) *
                       C48017 +
                   (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                    C113 * C1023 + C101 * C1032) *
                       C116) *
                      C48206 * C48221 * C48328) *
                     C2457 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C48017) *
                      C48206 * C48221 * C48360 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C48017 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48206 * C48221 * C48364 -
                  ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                    C113 * C281 + C101 * C295) *
                       C48017 +
                   (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                    C113 * C265 + C101 * C278) *
                       C116) *
                      C48206 * C48221 * C48350 +
                  ((C113 * C1022 + C101 * C1031 + C114 * C1021 + C102 * C1030 +
                    C115 * C1295 + C103 * C1296) *
                       C116 +
                   (C113 * C1028 + C101 * C1040 + C114 * C1027 + C102 * C1039 +
                    C115 * C1297 + C103 * C1298) *
                       C48017) *
                      C48206 * C48221 * C48328) *
                     C47983)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C2349 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C48017 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C48206 * C48221 * C48062) *
                     C48363 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C48017) *
                      C48206 * C48221 * C48062 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C48017 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48206 * C48221 * C2349) *
                     C48356 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48017) *
                      C48206 * C48221 * C2349 -
                  ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                    C113 * C271 + C101 * C291) *
                       C48017 +
                   (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                    C113 * C261 + C101 * C274) *
                       C116) *
                      C48206 * C48221 * C48062) *
                     C48343 +
                 (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                    C115 * C561 + C103 * C562) *
                       C116 +
                   (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                    C115 * C563 + C103 * C564) *
                       C48017) *
                      C48206 * C48221 * C48062 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C48017 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C48206 * C48221 * C2349) *
                     C48322)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C414 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48358 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C415 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48347 +
                   (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                    C115 * C422 + C103 * C435) *
                       C416 +
                   (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                    C115 * C438 + C103 * C452) *
                       C48321) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C415 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48358 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C414) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48347 -
                   (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
                    C113 * C1157 + C101 * C1166) *
                       C416 -
                   (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
                    C113 * C1169 + C101 * C1184) *
                       C48321) *
                      C48206 * C48221 * C48062) *
                     C2457 +
                 (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C415 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48358 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C414) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48347 -
                   (C115 * C424 + C103 * C441 + C114 * C422 + C102 * C435 +
                    C113 * C421 + C101 * C434) *
                       C416 -
                   (C115 * C442 + C103 * C454 + C114 * C438 + C102 * C452 +
                    C113 * C437 + C101 * C451) *
                       C48321) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C414 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C48358 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C415 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C48347 +
                   (C113 * C1156 + C101 * C1165 + C114 * C1155 + C102 * C1164 +
                    C115 * C2027 + C103 * C2028) *
                       C416 +
                   (C113 * C1168 + C101 * C1183 + C114 * C1167 + C102 * C1182 +
                    C115 * C2029 + C103 * C2030) *
                       C48321) *
                      C48206 * C48221 * C48062) *
                     C47983)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C665 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48287 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C666 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C666 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48287 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C665) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48104) *
                      C48206 * C48221 * C48062) *
                     C47978 +
                 (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C666 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48287 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C665) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48104) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C665 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C48287 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C666 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C48104) *
                      C48206 * C48221 * C48062) *
                     C47986 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C665 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48287 -
                   (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                    C113 * C417 + C101 * C427) *
                       C666 -
                   (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                    C113 * C430 + C101 * C447) *
                       C48104) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                    C115 * C821 + C103 * C830) *
                       C666 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C48287 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C665) +
                   (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                    C115 * C831 + C103 * C836) *
                       C48104) *
                      C48206 * C48221 * C48062) *
                     C2720)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C2349 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C48017 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C48206 * C48221 * C48062) *
                     C48363 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C48017) *
                      C48206 * C48221 * C48062 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C48017 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48206 * C48221 * C2349) *
                     C48356 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48017) *
                      C48206 * C48221 * C2349 -
                  ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                    C113 * C271 + C101 * C291) *
                       C48017 +
                   (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                    C113 * C261 + C101 * C274) *
                       C116) *
                      C48206 * C48221 * C48062) *
                     C48343 +
                 (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                    C115 * C561 + C103 * C562) *
                       C116 +
                   (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                    C115 * C563 + C103 * C564) *
                       C48017) *
                      C48206 * C48221 * C48062 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C48017 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C48206 * C48221 * C2349) *
                     C48322)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C48364 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C48017 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C48206 * C48221 * C48360 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C48017) *
                      C48206 * C48221 * C48350 -
                  ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                    C113 * C1029 + C101 * C1041) *
                       C48017 +
                   (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                    C113 * C1023 + C101 * C1032) *
                       C116) *
                      C48206 * C48221 * C48328) *
                     C2457 +
                 (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C116 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C48017) *
                      C48206 * C48221 * C48360 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C48017 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48206 * C48221 * C48364 -
                  ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                    C113 * C281 + C101 * C295) *
                       C48017 +
                   (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                    C113 * C265 + C101 * C278) *
                       C116) *
                      C48206 * C48221 * C48350 +
                  ((C113 * C1022 + C101 * C1031 + C114 * C1021 + C102 * C1030 +
                    C115 * C1295 + C103 * C1296) *
                       C116 +
                   (C113 * C1028 + C101 * C1040 + C114 * C1027 + C102 * C1039 +
                    C115 * C1297 + C103 * C1298) *
                       C48017) *
                      C48206 * C48221 * C48328) *
                     C47983)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C3113 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C3111 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C3114 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C48058 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C3114 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C3111 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C3113) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48104) *
                      C48206 * C48221 * C48065 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C3113 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C3111 -
                   (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                    C113 * C1160 + C101 * C1172) *
                       C3114 -
                   (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                    C113 * C1175 + C101 * C1187) *
                       C48104) *
                      C48206 * C48221 * C2717) *
                     C48272 +
                 (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C3114 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C3111 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C3113) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48104) *
                      C48206 * C48221 * C48058 +
                  ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C3113 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C3111 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C3114 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C48104) *
                      C48206 * C48221 * C48065 +
                  ((C113 * C1159 + C101 * C1171 + C114 * C1158 + C102 * C1170 +
                    C115 * C1445 + C103 * C1446) *
                       C3114 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C3111 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C3113) +
                   (C113 * C1174 + C101 * C1186 + C114 * C1173 + C102 * C1185 +
                    C115 * C1447 + C103 * C1448) *
                       C48104) *
                      C48206 * C48221 * C2717) *
                     C47983)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C47032 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C48100 -
                  (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                   C113 * C419 + C101 * C429) *
                      C47024 -
                  (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                   C113 * C432 + C101 * C449) *
                      C48107 +
                  (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                   C115 * C422 + C103 * C435) *
                      C47038 +
                  (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                   C115 * C438 + C103 * C452) *
                      C3625) *
                     C48206 * C48221 * C48058 +
                 ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                   C115 * C819 + C103 * C824) *
                      C47024 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C48100 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C47032) +
                  (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                   C115 * C827 + C103 * C834) *
                      C48107 -
                  (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
                   C113 * C1157 + C101 * C1166) *
                      C47038 -
                  (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
                   C113 * C1169 + C101 * C1184) *
                      C3625) *
                     C48206 * C48221 * C48065 +
                 ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                   C115 * C266 + C103 * C279) *
                      C47032 +
                  (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                   C115 * C282 + C103 * C296) *
                      C48100 -
                  (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                   C113 * C1160 + C101 * C1172) *
                      C47024 -
                  (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                   C113 * C1175 + C101 * C1187) *
                      C48107 +
                  (C113 * C1161 + C101 * C1176 + C114 * C1162 + C102 * C1177 +
                   C115 * C1163 + C103 * C1178) *
                      C47038 +
                  (C113 * C1179 + C101 * C1188 + C114 * C1180 + C102 * C1189 +
                   C115 * C1181 + C103 * C1190) *
                      C3625) *
                     C48206 * C48221 * C2717) *
                C47973) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C3113 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C3111 -
                  (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                   C113 * C419 + C101 * C429) *
                      C3114 -
                  (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                   C113 * C432 + C101 * C449) *
                      C48104) *
                     C48206 * C48221 * C48364 +
                 ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                   C115 * C819 + C103 * C824) *
                      C3114 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C3111 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C3113) +
                  (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                   C115 * C827 + C103 * C834) *
                      C48104) *
                     C48206 * C48221 * C48360 +
                 ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                   C115 * C266 + C103 * C279) *
                      C3113 +
                  (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                   C115 * C282 + C103 * C296) *
                      C3111 -
                  (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                   C113 * C1160 + C101 * C1172) *
                      C3114 -
                  (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                   C113 * C1175 + C101 * C1187) *
                      C48104) *
                     C48206 * C48221 * C48350 +
                 ((C113 * C1547 + C101 * C1550 + C114 * C1548 + C102 * C1551 +
                   C115 * C1549 + C103 * C1552) *
                      C3114 -
                  ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                    C113 * C1029 + C101 * C1041) *
                       C3111 +
                   (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                    C113 * C1023 + C101 * C1032) *
                       C3113) +
                  (C113 * C1553 + C101 * C1556 + C114 * C1554 + C102 * C1557 +
                   C115 * C1555 + C103 * C1558) *
                      C48104) *
                     C48206 * C48221 * C48328) *
                C47973) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C3113 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C3111 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C3114 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C3114 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C3111 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C3113) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48104) *
                      C48206 * C48221 * C48062) *
                     C48354 +
                 (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C3114 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C3111 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C3113) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48104) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C3113 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C3111 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C3114 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C48104) *
                      C48206 * C48221 * C48062) *
                     C48341 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C3113 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C3111 -
                   (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                    C113 * C417 + C101 * C427) *
                       C3114 -
                   (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                    C113 * C430 + C101 * C447) *
                       C48104) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                    C115 * C821 + C103 * C830) *
                       C3114 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C3111 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C3113) +
                   (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                    C115 * C831 + C103 * C836) *
                       C48104) *
                      C48206 * C48221 * C48062) *
                     C48312)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C3363 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C48365 -
                  (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                   C113 * C419 + C101 * C429) *
                      C3364 -
                  (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                   C113 * C432 + C101 * C449) *
                      C48362 +
                  (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                   C115 * C422 + C103 * C435) *
                      C3365 +
                  (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                   C115 * C438 + C103 * C452) *
                      C48353 -
                  (C115 * C1857 + C103 * C1863 + C114 * C1858 + C102 * C1864 +
                   C113 * C1859 + C101 * C1865) *
                      C3366 -
                  (C115 * C1866 + C103 * C1875 + C114 * C1867 + C102 * C1876 +
                   C113 * C1868 + C101 * C1877) *
                      C48334) *
                     C48206 * C48221 * C2349 +
                 ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                   C115 * C819 + C103 * C824) *
                      C3364 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C48365 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C3363) +
                  (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                   C115 * C827 + C103 * C834) *
                      C48362 -
                  (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
                   C113 * C1157 + C101 * C1166) *
                      C3365 -
                  (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
                   C113 * C1169 + C101 * C1184) *
                      C48353 +
                  (C113 * C2239 + C101 * C2242 + C114 * C2240 + C102 * C2243 +
                   C115 * C2241 + C103 * C2244) *
                      C3366 +
                  (C113 * C2245 + C101 * C2248 + C114 * C2246 + C102 * C2249 +
                   C115 * C2247 + C103 * C2250) *
                      C48334) *
                     C48206 * C48221 * C48062) *
                C47973) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C47032 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48100 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C47024 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48107 +
                   (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                    C115 * C422 + C103 * C435) *
                       C47038 +
                   (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                    C115 * C438 + C103 * C452) *
                       C3625) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C47024 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48100 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C47032) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48107 -
                   (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
                    C113 * C1157 + C101 * C1166) *
                       C47038 -
                   (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
                    C113 * C1169 + C101 * C1184) *
                       C3625) *
                      C48206 * C48221 * C48062) *
                     C48272 +
                 (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C47024 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48100 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C47032) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48107 -
                   (C115 * C424 + C103 * C441 + C114 * C422 + C102 * C435 +
                    C113 * C421 + C101 * C434) *
                       C47038 -
                   (C115 * C442 + C103 * C454 + C114 * C438 + C102 * C452 +
                    C113 * C437 + C101 * C451) *
                       C3625) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C47032 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C48100 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C47024 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C48107 +
                   (C113 * C1156 + C101 * C1165 + C114 * C1155 + C102 * C1164 +
                    C115 * C2027 + C103 * C2028) *
                       C47038 +
                   (C113 * C1168 + C101 * C1183 + C114 * C1167 + C102 * C1182 +
                    C115 * C2029 + C103 * C2030) *
                       C3625) *
                      C48206 * C48221 * C48062) *
                     C47983)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C3113 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C3111 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C3114 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C3114 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C3111 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C3113) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48104) *
                      C48206 * C48221 * C48062) *
                     C48354 +
                 (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C3114 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C3111 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C3113) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48104) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                    C115 * C267 + C103 * C283) *
                       C3113 +
                   (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                    C115 * C284 + C103 * C297) *
                       C3111 -
                   (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                    C113 * C818 + C101 * C823) *
                       C3114 -
                   (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                    C113 * C826 + C101 * C833) *
                       C48104) *
                      C48206 * C48221 * C48062) *
                     C48341 +
                 (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C3113 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C3111 -
                   (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                    C113 * C417 + C101 * C427) *
                       C3114 -
                   (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                    C113 * C430 + C101 * C447) *
                       C48104) *
                      C48206 * C48221 * C2349 +
                  ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                    C115 * C821 + C103 * C830) *
                       C3114 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C3111 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C3113) +
                   (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                    C115 * C831 + C103 * C836) *
                       C48104) *
                      C48206 * C48221 * C48062) *
                     C48312)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                   C115 * C119 + C103 * C126) *
                      C3113 +
                  (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                   C115 * C129 + C103 * C140) *
                      C3111 -
                  (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                   C113 * C419 + C101 * C429) *
                      C3114 -
                  (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                   C113 * C432 + C101 * C449) *
                      C48104) *
                     C48206 * C48221 * C48364 +
                 ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                   C115 * C819 + C103 * C824) *
                      C3114 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C3111 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C3113) +
                  (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                   C115 * C827 + C103 * C834) *
                      C48104) *
                     C48206 * C48221 * C48360 +
                 ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                   C115 * C266 + C103 * C279) *
                      C3113 +
                  (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                   C115 * C282 + C103 * C296) *
                      C3111 -
                  (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                   C113 * C1160 + C101 * C1172) *
                      C3114 -
                  (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                   C113 * C1175 + C101 * C1187) *
                      C48104) *
                     C48206 * C48221 * C48350 +
                 ((C113 * C1547 + C101 * C1550 + C114 * C1548 + C102 * C1551 +
                   C115 * C1549 + C103 * C1552) *
                      C3114 -
                  ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                    C113 * C1029 + C101 * C1041) *
                       C3111 +
                   (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                    C113 * C1023 + C101 * C1032) *
                       C3113) +
                  (C113 * C1553 + C101 * C1556 + C114 * C1554 + C102 * C1557 +
                   C115 * C1555 + C103 * C1558) *
                      C48104) *
                     C48206 * C48221 * C48328) *
                C47973) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48017) *
                       C48206 * C48221 * C1289 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48017 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C48206 * C48221 * C1290 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C48017) *
                       C48206 * C48221 * C1291 -
                   ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                     C113 * C1029 + C101 * C1041) *
                        C48017 +
                    (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                     C113 * C1023 + C101 * C1032) *
                        C116) *
                       C48206 * C48221 * C48328) *
                      C48272 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48017) *
                       C48206 * C48221 * C1290 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48017 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48206 * C48221 * C1289 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C48017 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C48206 * C48221 * C1291 +
                   ((C113 * C1022 + C101 * C1031 + C114 * C1021 + C102 * C1030 +
                     C115 * C1295 + C103 * C1296) *
                        C116 +
                    (C113 * C1028 + C101 * C1040 + C114 * C1027 + C102 * C1039 +
                     C115 * C1297 + C103 * C1298) *
                        C48017) *
                       C48206 * C48221 * C48328) *
                      C47983)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48017) *
                       C48206 * C48221 * C48286 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48017 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C48206 * C48221 * C48062) *
                      C557 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48017) *
                       C48206 * C48221 * C48062 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48017 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48206 * C48221 * C48286) *
                      C558 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48017) *
                       C48206 * C48221 * C48286 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C48017 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C48206 * C48221 * C48062) *
                      C559 +
                  (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                     C115 * C561 + C103 * C562) *
                        C116 +
                    (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                     C115 * C563 + C103 * C564) *
                        C48017) *
                       C48206 * C48221 * C48062 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C48017 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C48206 * C48221 * C48286) *
                      C48322)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C1672 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C1669 -
                    (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                     C113 * C419 + C101 * C429) *
                        C1673 -
                    (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                     C113 * C432 + C101 * C449) *
                        C1670 +
                    (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                     C115 * C422 + C103 * C435) *
                        C1674 +
                    (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                     C115 * C438 + C103 * C452) *
                        C48321) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C1673 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C1669 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C1672) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C1670 -
                    (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
                     C113 * C1157 + C101 * C1166) *
                        C1674 -
                    (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
                     C113 * C1169 + C101 * C1184) *
                        C48321) *
                       C48206 * C48221 * C48062) *
                      C48272 +
                  (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                     C115 * C423 + C103 * C439) *
                        C1673 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C1669 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C1672) +
                    (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                     C115 * C440 + C103 * C453) *
                        C1670 -
                    (C115 * C424 + C103 * C441 + C114 * C422 + C102 * C435 +
                     C113 * C421 + C101 * C434) *
                        C1674 -
                    (C115 * C442 + C103 * C454 + C114 * C438 + C102 * C452 +
                     C113 * C437 + C101 * C451) *
                        C48321) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C1672 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C1669 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C1673 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C1670 +
                    (C113 * C1156 + C101 * C1165 + C114 * C1155 + C102 * C1164 +
                     C115 * C2027 + C103 * C2028) *
                        C1674 +
                    (C113 * C1168 + C101 * C1183 + C114 * C1167 + C102 * C1182 +
                     C115 * C2029 + C103 * C2030) *
                        C48321) *
                       C48206 * C48221 * C48062) *
                      C47983)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C665 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48287 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C666 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C1289 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C666 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48287 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C665) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48104) *
                      C48206 * C48221 * C1290 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C665 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C48287 -
                   (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                    C113 * C1160 + C101 * C1172) *
                       C666 -
                   (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                    C113 * C1175 + C101 * C1187) *
                       C48104) *
                      C48206 * C48221 * C1291 +
                  ((C113 * C1547 + C101 * C1550 + C114 * C1548 + C102 * C1551 +
                    C115 * C1549 + C103 * C1552) *
                       C666 -
                   ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                     C113 * C1029 + C101 * C1041) *
                        C48287 +
                    (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                     C113 * C1023 + C101 * C1032) *
                        C665) +
                   (C113 * C1553 + C101 * C1556 + C114 * C1554 + C102 * C1557 +
                    C115 * C1555 + C103 * C1558) *
                       C48104) *
                      C48206 * C48221 * C48328) *
                 C47973) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C665 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48287 -
                    (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                     C113 * C419 + C101 * C429) *
                        C666 -
                    (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                     C113 * C432 + C101 * C449) *
                        C48104) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C666 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C48287 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C665) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C48104) *
                       C48206 * C48221 * C48062) *
                      C258 +
                  (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                     C115 * C423 + C103 * C439) *
                        C666 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48287 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C665) +
                    (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                     C115 * C440 + C103 * C453) *
                        C48104) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C665 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48287 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C666 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C48104) *
                       C48206 * C48221 * C48062) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C665 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48287 -
                    (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                     C113 * C417 + C101 * C427) *
                        C666 -
                    (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                     C113 * C430 + C101 * C447) *
                        C48104) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                     C115 * C821 + C103 * C830) *
                        C666 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C48287 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C665) +
                    (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                     C115 * C831 + C103 * C836) *
                        C48104) *
                       C48206 * C48221 * C48062) *
                      C48312)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C2133 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C2129 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C2134 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C2130 +
                   (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                    C115 * C422 + C103 * C435) *
                       C2135 +
                   (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                    C115 * C438 + C103 * C452) *
                       C2131 -
                   (C115 * C1857 + C103 * C1863 + C114 * C1858 + C102 * C1864 +
                    C113 * C1859 + C101 * C1865) *
                       C2136 -
                   (C115 * C1866 + C103 * C1875 + C114 * C1867 + C102 * C1876 +
                    C113 * C1868 + C101 * C1877) *
                       C48334) *
                      C48206 * C48221 * C48286 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C2134 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C2129 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C2133) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C2130 -
                   (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
                    C113 * C1157 + C101 * C1166) *
                       C2135 -
                   (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
                    C113 * C1169 + C101 * C1184) *
                       C2131 +
                   (C113 * C2239 + C101 * C2242 + C114 * C2240 + C102 * C2243 +
                    C115 * C2241 + C103 * C2244) *
                       C2136 +
                   (C113 * C2245 + C101 * C2248 + C114 * C2246 + C102 * C2249 +
                    C115 * C2247 + C103 * C2250) *
                       C48334) *
                      C48206 * C48221 * C48062) *
                 C47973) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                C115 * C119 + C103 * C126) *
                   C116 +
               (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                C115 * C129 + C103 * C140) *
                   C48017) *
                  C48206 * C48221 * C48000 * C108 -
              ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                C113 * C128 + C101 * C139) *
                   C48017 +
               (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                C113 * C118 + C101 * C125) *
                   C116) *
                  C48206 * C48221 * C48000 * C109 +
              ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                C115 * C121 + C103 * C132) *
                   C116 +
               (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                C115 * C133 + C103 * C142) *
                   C48017) *
                  C48206 * C48221 * C48000 * C110 -
              ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                C113 * C130 + C101 * C141) *
                   C48017 +
               (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                C113 * C120 + C101 * C131) *
                   C116) *
                  C48206 * C48221 * C48000 * C111 +
              ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                C115 * C123 + C103 * C136) *
                   C116 +
               (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                C115 * C137 + C103 * C144) *
                   C48017) *
                  C48206 * C48221 * C48000 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C48017) *
                   C48206 * C48221 * C48357 -
               ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                 C113 * C273 + C101 * C293) *
                    C48017 +
                (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                 C113 * C263 + C101 * C276) *
                    C116) *
                   C48206 * C48221 * C48345 +
               ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                 C115 * C266 + C103 * C279) *
                    C116 +
                (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                 C115 * C282 + C103 * C296) *
                    C48017) *
                   C48206 * C48221 * C48318) *
                  C258 +
              (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                 C115 * C267 + C103 * C283) *
                    C116 +
                (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                 C115 * C284 + C103 * C297) *
                    C48017) *
                   C48206 * C48221 * C48345 -
               ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                 C113 * C128 + C101 * C139) *
                    C48017 +
                (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                 C113 * C118 + C101 * C125) *
                    C116) *
                   C48206 * C48221 * C48357 -
               ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                 C113 * C281 + C101 * C295) *
                    C48017 +
                (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                 C113 * C265 + C101 * C278) *
                    C116) *
                   C48206 * C48221 * C48318) *
                  C259 +
              (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                 C115 * C121 + C103 * C132) *
                    C116 +
                (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                 C115 * C133 + C103 * C142) *
                    C48017) *
                   C48206 * C48221 * C48357 -
               ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                 C113 * C271 + C101 * C291) *
                    C48017 +
                (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                 C113 * C261 + C101 * C274) *
                    C116) *
                   C48206 * C48221 * C48345 +
               ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                 C115 * C270 + C103 * C289) *
                    C116 +
                (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                 C115 * C290 + C103 * C300) *
                    C48017) *
                   C48206 * C48221 * C48318) *
                  C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C113 * C117 + C101 * C124 + C114 * C118 +
                                C102 * C125 + C115 * C119 + C103 * C126) *
                                   C414 +
                               (C113 * C127 + C101 * C138 + C114 * C128 +
                                C102 * C139 + C115 * C129 + C103 * C140) *
                                   C48358 -
                               (C115 * C417 + C103 * C427 + C114 * C418 +
                                C102 * C428 + C113 * C419 + C101 * C429) *
                                   C415 -
                               (C115 * C430 + C103 * C447 + C114 * C431 +
                                C102 * C448 + C113 * C432 + C101 * C449) *
                                   C48347 +
                               (C113 * C420 + C101 * C433 + C114 * C421 +
                                C102 * C434 + C115 * C422 + C103 * C435) *
                                   C416 +
                               (C113 * C436 + C101 * C450 + C114 * C437 +
                                C102 * C451 + C115 * C438 + C103 * C452) *
                                   C48321) *
                                  C48206 * C48221 * C48000 * C258 +
                              ((C113 * C418 + C101 * C428 + C114 * C417 +
                                C102 * C427 + C115 * C423 + C103 * C439) *
                                   C415 -
                               ((C115 * C130 + C103 * C141 + C114 * C129 +
                                 C102 * C140 + C113 * C128 + C101 * C139) *
                                    C48358 +
                                (C115 * C120 + C103 * C131 + C114 * C119 +
                                 C102 * C126 + C113 * C118 + C101 * C125) *
                                    C414) +
                               (C113 * C431 + C101 * C448 + C114 * C430 +
                                C102 * C447 + C115 * C440 + C103 * C453) *
                                   C48347 -
                               (C115 * C424 + C103 * C441 + C114 * C422 +
                                C102 * C435 + C113 * C421 + C101 * C434) *
                                   C416 -
                               (C115 * C442 + C103 * C454 + C114 * C438 +
                                C102 * C452 + C113 * C437 + C101 * C451) *
                                   C48321) *
                                  C48206 * C48221 * C48000 * C259 +
                              ((C113 * C119 + C101 * C126 + C114 * C120 +
                                C102 * C131 + C115 * C121 + C103 * C132) *
                                   C414 +
                               (C113 * C129 + C101 * C140 + C114 * C130 +
                                C102 * C141 + C115 * C133 + C103 * C142) *
                                   C48358 -
                               (C115 * C425 + C103 * C443 + C114 * C423 +
                                C102 * C439 + C113 * C417 + C101 * C427) *
                                   C415 -
                               (C115 * C444 + C103 * C455 + C114 * C440 +
                                C102 * C453 + C113 * C430 + C101 * C447) *
                                   C48347 +
                               (C113 * C422 + C101 * C435 + C114 * C424 +
                                C102 * C441 + C115 * C426 + C103 * C445) *
                                   C416 +
                               (C113 * C438 + C101 * C452 + C114 * C442 +
                                C102 * C454 + C115 * C446 + C103 * C456) *
                                   C48321) *
                                  C48206 * C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C48017) *
               C48206 * C48221 * C947 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C48017 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C116) *
               C48206 * C48221 * C948 +
           ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
             C115 * C266 + C103 * C279) *
                C116 +
            (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
             C115 * C282 + C103 * C296) *
                C48017) *
               C48206 * C48221 * C48318) *
              C48354 +
          (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
             C115 * C267 + C103 * C283) *
                C116 +
            (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
             C115 * C284 + C103 * C297) *
                C48017) *
               C48206 * C48221 * C948 -
           ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
             C113 * C128 + C101 * C139) *
                C48017 +
            (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
             C113 * C118 + C101 * C125) *
                C116) *
               C48206 * C48221 * C947 -
           ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
             C113 * C281 + C101 * C295) *
                C48017 +
            (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
             C113 * C265 + C101 * C278) *
                C116) *
               C48206 * C48221 * C48318) *
              C48341 +
          (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
             C115 * C121 + C103 * C132) *
                C116 +
            (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
             C115 * C133 + C103 * C142) *
                C48017) *
               C48206 * C48221 * C947 -
           ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
             C113 * C271 + C101 * C291) *
                C48017 +
            (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
             C113 * C261 + C101 * C274) *
                C116) *
               C48206 * C48221 * C948 +
           ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
             C115 * C270 + C103 * C289) *
                C116 +
            (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
             C115 * C290 + C103 * C300) *
                C48017) *
               C48206 * C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
            C115 * C119 + C103 * C126) *
               C116 +
           (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
            C115 * C129 + C103 * C140) *
               C48017) *
              C48206 * C48221 * C1015 -
          ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
            C113 * C273 + C101 * C293) *
               C48017 +
           (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
            C113 * C263 + C101 * C276) *
               C116) *
              C48206 * C48221 * C1016 +
          ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
            C115 * C266 + C103 * C279) *
               C116 +
           (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
            C115 * C282 + C103 * C296) *
               C48017) *
              C48206 * C48221 * C1017 -
          ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
            C113 * C1029 + C101 * C1041) *
               C48017 +
           (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
            C113 * C1023 + C101 * C1032) *
               C116) *
              C48206 * C48221 * C1018 +
          ((C113 * C1024 + C101 * C1033 + C114 * C1025 + C102 * C1034 +
            C115 * C1026 + C103 * C1035) *
               C116 +
           (C113 * C1036 + C101 * C1042 + C114 * C1037 + C102 * C1043 +
            C115 * C1038 + C103 * C1044) *
               C48017) *
              C48206 * C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
            C115 * C119 + C103 * C126) *
               C414 +
           (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
            C115 * C129 + C103 * C140) *
               C48358 -
           (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
            C113 * C419 + C101 * C429) *
               C415 -
           (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
            C113 * C432 + C101 * C449) *
               C48347 +
           (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
            C115 * C422 + C103 * C435) *
               C416 +
           (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
            C115 * C438 + C103 * C452) *
               C48321) *
              C48206 * C48221 * C947 +
          ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
            C115 * C819 + C103 * C824) *
               C415 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C48358 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C414) +
           (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
            C115 * C827 + C103 * C834) *
               C48347 -
           (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
            C113 * C1157 + C101 * C1166) *
               C416 -
           (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
            C113 * C1169 + C101 * C1184) *
               C48321) *
              C48206 * C48221 * C948 +
          ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
            C115 * C266 + C103 * C279) *
               C414 +
           (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
            C115 * C282 + C103 * C296) *
               C48358 -
           (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
            C113 * C1160 + C101 * C1172) *
               C415 -
           (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
            C113 * C1175 + C101 * C1187) *
               C48347 +
           (C113 * C1161 + C101 * C1176 + C114 * C1162 + C102 * C1177 +
            C115 * C1163 + C103 * C1178) *
               C416 +
           (C113 * C1179 + C101 * C1188 + C114 * C1180 + C102 * C1189 +
            C115 * C1181 + C103 * C1190) *
               C48321) *
              C48206 * C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C113 * C117 + C101 * C124 + C114 * C118 +
                                C102 * C125 + C115 * C119 + C103 * C126) *
                                   C1672 +
                               (C113 * C127 + C101 * C138 + C114 * C128 +
                                C102 * C139 + C115 * C129 + C103 * C140) *
                                   C1669 -
                               (C115 * C417 + C103 * C427 + C114 * C418 +
                                C102 * C428 + C113 * C419 + C101 * C429) *
                                   C1673 -
                               (C115 * C430 + C103 * C447 + C114 * C431 +
                                C102 * C448 + C113 * C432 + C101 * C449) *
                                   C1670 +
                               (C113 * C420 + C101 * C433 + C114 * C421 +
                                C102 * C434 + C115 * C422 + C103 * C435) *
                                   C1674 +
                               (C113 * C436 + C101 * C450 + C114 * C437 +
                                C102 * C451 + C115 * C438 + C103 * C452) *
                                   C48321) *
                                  C48206 * C48221 * C48000 * C48354 +
                              ((C113 * C418 + C101 * C428 + C114 * C417 +
                                C102 * C427 + C115 * C423 + C103 * C439) *
                                   C1673 -
                               ((C115 * C130 + C103 * C141 + C114 * C129 +
                                 C102 * C140 + C113 * C128 + C101 * C139) *
                                    C1669 +
                                (C115 * C120 + C103 * C131 + C114 * C119 +
                                 C102 * C126 + C113 * C118 + C101 * C125) *
                                    C1672) +
                               (C113 * C431 + C101 * C448 + C114 * C430 +
                                C102 * C447 + C115 * C440 + C103 * C453) *
                                   C1670 -
                               (C115 * C424 + C103 * C441 + C114 * C422 +
                                C102 * C435 + C113 * C421 + C101 * C434) *
                                   C1674 -
                               (C115 * C442 + C103 * C454 + C114 * C438 +
                                C102 * C452 + C113 * C437 + C101 * C451) *
                                   C48321) *
                                  C48206 * C48221 * C48000 * C48341 +
                              ((C113 * C119 + C101 * C126 + C114 * C120 +
                                C102 * C131 + C115 * C121 + C103 * C132) *
                                   C1672 +
                               (C113 * C129 + C101 * C140 + C114 * C130 +
                                C102 * C141 + C115 * C133 + C103 * C142) *
                                   C1669 -
                               (C115 * C425 + C103 * C443 + C114 * C423 +
                                C102 * C439 + C113 * C417 + C101 * C427) *
                                   C1673 -
                               (C115 * C444 + C103 * C455 + C114 * C440 +
                                C102 * C453 + C113 * C430 + C101 * C447) *
                                   C1670 +
                               (C113 * C422 + C101 * C435 + C114 * C424 +
                                C102 * C441 + C115 * C426 + C103 * C445) *
                                   C1674 +
                               (C113 * C438 + C101 * C452 + C114 * C442 +
                                C102 * C454 + C115 * C446 + C103 * C456) *
                                   C48321) *
                                  C48206 * C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
            C115 * C119 + C103 * C126) *
               C1672 +
           (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
            C115 * C129 + C103 * C140) *
               C1669 -
           (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
            C113 * C419 + C101 * C429) *
               C1673 -
           (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
            C113 * C432 + C101 * C449) *
               C1670 +
           (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
            C115 * C422 + C103 * C435) *
               C1674 +
           (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
            C115 * C438 + C103 * C452) *
               C48321) *
              C48206 * C48221 * C48357 +
          ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
            C115 * C819 + C103 * C824) *
               C1673 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C1669 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C1672) +
           (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
            C115 * C827 + C103 * C834) *
               C1670 -
           (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
            C113 * C1157 + C101 * C1166) *
               C1674 -
           (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
            C113 * C1169 + C101 * C1184) *
               C48321) *
              C48206 * C48221 * C48345 +
          ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
            C115 * C266 + C103 * C279) *
               C1672 +
           (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
            C115 * C282 + C103 * C296) *
               C1669 -
           (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
            C113 * C1160 + C101 * C1172) *
               C1673 -
           (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
            C113 * C1175 + C101 * C1187) *
               C1670 +
           (C113 * C1161 + C101 * C1176 + C114 * C1162 + C102 * C1177 +
            C115 * C1163 + C103 * C1178) *
               C1674 +
           (C113 * C1179 + C101 * C1188 + C114 * C1180 + C102 * C1189 +
            C115 * C1181 + C103 * C1190) *
               C48321) *
              C48206 * C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 + C115 * C119 +
           C103 * C126) *
              C1852 +
          (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 + C115 * C129 +
           C103 * C140) *
              C1847 -
          (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 + C113 * C419 +
           C101 * C429) *
              C1853 -
          (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 + C113 * C432 +
           C101 * C449) *
              C1848 +
          (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 + C115 * C422 +
           C103 * C435) *
              C1854 +
          (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 + C115 * C438 +
           C103 * C452) *
              C1849 -
          (C115 * C1857 + C103 * C1863 + C114 * C1858 + C102 * C1864 +
           C113 * C1859 + C101 * C1865) *
              C1855 -
          (C115 * C1866 + C103 * C1875 + C114 * C1867 + C102 * C1876 +
           C113 * C1868 + C101 * C1877) *
              C1850 +
          (C113 * C1860 + C101 * C1869 + C114 * C1861 + C102 * C1870 +
           C115 * C1862 + C103 * C1871) *
              C1856 +
          (C113 * C1872 + C101 * C1878 + C114 * C1873 + C102 * C1879 +
           C115 * C1874 + C103 * C1880) *
              C1851) *
         C48206 * C48221 * C48000 * C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C665 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48287 -
                    (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                     C113 * C419 + C101 * C429) *
                        C666 -
                    (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                     C113 * C432 + C101 * C449) *
                        C48104) *
                       C48206 * C48221 * C947 +
                   ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C666 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C48287 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C665) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C48104) *
                       C48206 * C48221 * C948 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C665 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C48287 -
                    (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                     C113 * C1160 + C101 * C1172) *
                        C666 -
                    (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                     C113 * C1175 + C101 * C1187) *
                        C48104) *
                       C48206 * C48221 * C48318) *
                      C48272 +
                  (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                     C115 * C423 + C103 * C439) *
                        C666 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48287 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C665) +
                    (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                     C115 * C440 + C103 * C453) *
                        C48104) *
                       C48206 * C48221 * C947 +
                   ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C665 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48287 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C666 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C48104) *
                       C48206 * C48221 * C948 +
                   ((C113 * C1159 + C101 * C1171 + C114 * C1158 + C102 * C1170 +
                     C115 * C1445 + C103 * C1446) *
                        C666 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C48287 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C665) +
                    (C113 * C1174 + C101 * C1186 + C114 * C1173 + C102 * C1185 +
                     C115 * C1447 + C103 * C1448) *
                        C48104) *
                       C48206 * C48221 * C48318) *
                      C47983)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C665 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48287 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C666 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C48000 * C557 +
                  ((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C666 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48287 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C665) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48104) *
                      C48206 * C48221 * C48000 * C558 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C665 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48287 -
                   (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                    C113 * C417 + C101 * C427) *
                       C666 -
                   (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                    C113 * C430 + C101 * C447) *
                       C48104) *
                      C48206 * C48221 * C48000 * C559 +
                  ((C113 * C423 + C101 * C439 + C114 * C425 + C102 * C443 +
                    C115 * C667 + C103 * C668) *
                       C666 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C48287 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C665) +
                   (C113 * C440 + C101 * C453 + C114 * C444 + C102 * C455 +
                    C115 * C669 + C103 * C670) *
                       C48104) *
                      C48206 * C48221 * C48000 * C48322)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C2133 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C2129 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C2134 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C2130 +
                   (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                    C115 * C422 + C103 * C435) *
                       C2135 +
                   (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                    C115 * C438 + C103 * C452) *
                       C2131 -
                   (C115 * C1857 + C103 * C1863 + C114 * C1858 + C102 * C1864 +
                    C113 * C1859 + C101 * C1865) *
                       C2136 -
                   (C115 * C1866 + C103 * C1875 + C114 * C1867 + C102 * C1876 +
                    C113 * C1868 + C101 * C1877) *
                       C48334) *
                      C48206 * C48221 * C48000 * C48272 +
                  ((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C2134 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C2129 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C2133) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C2130 -
                   (C115 * C424 + C103 * C441 + C114 * C422 + C102 * C435 +
                    C113 * C421 + C101 * C434) *
                       C2135 -
                   (C115 * C442 + C103 * C454 + C114 * C438 + C102 * C452 +
                    C113 * C437 + C101 * C451) *
                       C2131 +
                   (C113 * C1858 + C101 * C1864 + C114 * C1857 + C102 * C1863 +
                    C115 * C2137 + C103 * C2138) *
                       C2136 +
                   (C113 * C1867 + C101 * C1876 + C114 * C1866 + C102 * C1875 +
                    C115 * C2139 + C103 * C2140) *
                       C48334) *
                      C48206 * C48221 * C48000 * C47983)) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48017) *
                       C48206 * C48221 * C48357 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48017 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C48206 * C48221 * C48345 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48017) *
                       C48206 * C48221 * C48345 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48017 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48206 * C48221 * C48357 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C48017 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C48206 * C48221 * C48318) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48017) *
                       C48206 * C48221 * C48357 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C48017 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C48206 * C48221 * C48345 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C48312)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C48000 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C48017 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48206 * C48221 * C48000 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48017) *
                      C48206 * C48221 * C48000 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C48017 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C48206 * C48221 * C48000 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C48017) *
                      C48206 * C48221 * C48000 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48017) *
                       C48206 * C48221 * C947 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48017 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C48206 * C48221 * C948 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C48354 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48017) *
                       C48206 * C48221 * C948 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48017 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48206 * C48221 * C947 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C48017 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C48206 * C48221 * C48318) *
                      C48341 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48017) *
                       C48206 * C48221 * C947 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C48017 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C48206 * C48221 * C948 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C48312)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C1015 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C48017 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C48206 * C48221 * C1016 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C48017) *
                      C48206 * C48221 * C1017 -
                  ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                    C113 * C1029 + C101 * C1041) *
                       C48017 +
                   (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                    C113 * C1023 + C101 * C1032) *
                       C116) *
                      C48206 * C48221 * C1018 +
                  ((C113 * C1024 + C101 * C1033 + C114 * C1025 + C102 * C1034 +
                    C115 * C1026 + C103 * C1035) *
                       C116 +
                   (C113 * C1036 + C101 * C1042 + C114 * C1037 + C102 * C1043 +
                    C115 * C1038 + C103 * C1044) *
                       C48017) *
                      C48206 * C48221 * C1019) *
                 C47973) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C1672 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C1669 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C1673 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C1670 +
                   (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                    C115 * C422 + C103 * C435) *
                       C1674 +
                   (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                    C115 * C438 + C103 * C452) *
                       C48321) *
                      C48206 * C48221 * C48000 * C48354 +
                  ((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C1673 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C1669 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C1672) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C1670 -
                   (C115 * C424 + C103 * C441 + C114 * C422 + C102 * C435 +
                    C113 * C421 + C101 * C434) *
                       C1674 -
                   (C115 * C442 + C103 * C454 + C114 * C438 + C102 * C452 +
                    C113 * C437 + C101 * C451) *
                       C48321) *
                      C48206 * C48221 * C48000 * C48341 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C1672 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C1669 -
                   (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                    C113 * C417 + C101 * C427) *
                       C1673 -
                   (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                    C113 * C430 + C101 * C447) *
                       C1670 +
                   (C113 * C422 + C101 * C435 + C114 * C424 + C102 * C441 +
                    C115 * C426 + C103 * C445) *
                       C1674 +
                   (C113 * C438 + C101 * C452 + C114 * C442 + C102 * C454 +
                    C115 * C446 + C103 * C456) *
                       C48321) *
                      C48206 * C48221 * C48000 * C48312)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C1672 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C1669 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C1673 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C1670 +
                   (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                    C115 * C422 + C103 * C435) *
                       C1674 +
                   (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                    C115 * C438 + C103 * C452) *
                       C48321) *
                      C48206 * C48221 * C48357 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C1673 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C1669 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C1672) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C1670 -
                   (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
                    C113 * C1157 + C101 * C1166) *
                       C1674 -
                   (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
                    C113 * C1169 + C101 * C1184) *
                       C48321) *
                      C48206 * C48221 * C48345 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C1672 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C1669 -
                   (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                    C113 * C1160 + C101 * C1172) *
                       C1673 -
                   (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                    C113 * C1175 + C101 * C1187) *
                       C1670 +
                   (C113 * C1161 + C101 * C1176 + C114 * C1162 + C102 * C1177 +
                    C115 * C1163 + C103 * C1178) *
                       C1674 +
                   (C113 * C1179 + C101 * C1188 + C114 * C1180 + C102 * C1189 +
                    C115 * C1181 + C103 * C1190) *
                       C48321) *
                      C48206 * C48221 * C48318) *
                 C47973) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C3113 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C3111 -
                    (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                     C113 * C419 + C101 * C429) *
                        C3114 -
                    (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                     C113 * C432 + C101 * C449) *
                        C48104) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C3114 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C3111 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C3113) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C48104) *
                       C48206 * C48221 * C48062) *
                      C47978 +
                  (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                     C115 * C423 + C103 * C439) *
                        C3114 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C3111 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C3113) +
                    (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                     C115 * C440 + C103 * C453) *
                        C48104) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C3113 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C3111 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C3114 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C48104) *
                       C48206 * C48221 * C48062) *
                      C47986 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C3113 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C3111 -
                    (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                     C113 * C417 + C101 * C427) *
                        C3114 -
                    (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                     C113 * C430 + C101 * C447) *
                        C48104) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                     C115 * C821 + C103 * C830) *
                        C3114 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C3111 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C3113) +
                    (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                     C115 * C831 + C103 * C836) *
                        C48104) *
                       C48206 * C48221 * C48062) *
                      C2720)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C47032 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48100 -
                    (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                     C113 * C419 + C101 * C429) *
                        C47024 -
                    (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                     C113 * C432 + C101 * C449) *
                        C48107 +
                    (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                     C115 * C422 + C103 * C435) *
                        C47038 +
                    (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                     C115 * C438 + C103 * C452) *
                        C3625) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C47024 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C48100 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C47032) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C48107 -
                    (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
                     C113 * C1157 + C101 * C1166) *
                        C47038 -
                    (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
                     C113 * C1169 + C101 * C1184) *
                        C3625) *
                       C48206 * C48221 * C48062) *
                      C2457 +
                  (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                     C115 * C423 + C103 * C439) *
                        C47024 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48100 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C47032) +
                    (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                     C115 * C440 + C103 * C453) *
                        C48107 -
                    (C115 * C424 + C103 * C441 + C114 * C422 + C102 * C435 +
                     C113 * C421 + C101 * C434) *
                        C47038 -
                    (C115 * C442 + C103 * C454 + C114 * C438 + C102 * C452 +
                     C113 * C437 + C101 * C451) *
                        C3625) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C47032 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48100 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C47024 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C48107 +
                    (C113 * C1156 + C101 * C1165 + C114 * C1155 + C102 * C1164 +
                     C115 * C2027 + C103 * C2028) *
                        C47038 +
                    (C113 * C1168 + C101 * C1183 + C114 * C1167 + C102 * C1182 +
                     C115 * C2029 + C103 * C2030) *
                        C3625) *
                       C48206 * C48221 * C48062) *
                      C47983)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C3113 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C3111 -
                    (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                     C113 * C419 + C101 * C429) *
                        C3114 -
                    (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                     C113 * C432 + C101 * C449) *
                        C48104) *
                       C48206 * C48221 * C48357 +
                   ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C3114 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C3111 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C3113) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C48104) *
                       C48206 * C48221 * C48345 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C3113 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C3111 -
                    (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                     C113 * C1160 + C101 * C1172) *
                        C3114 -
                    (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                     C113 * C1175 + C101 * C1187) *
                        C48104) *
                       C48206 * C48221 * C48318) *
                      C2457 +
                  (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                     C115 * C423 + C103 * C439) *
                        C3114 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C3111 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C3113) +
                    (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                     C115 * C440 + C103 * C453) *
                        C48104) *
                       C48206 * C48221 * C48357 +
                   ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C3113 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C3111 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C3114 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C48104) *
                       C48206 * C48221 * C48345 +
                   ((C113 * C1159 + C101 * C1171 + C114 * C1158 + C102 * C1170 +
                     C115 * C1445 + C103 * C1446) *
                        C3114 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C3111 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C3113) +
                    (C113 * C1174 + C101 * C1186 + C114 * C1173 + C102 * C1185 +
                     C115 * C1447 + C103 * C1448) *
                        C48104) *
                       C48206 * C48221 * C48318) *
                      C47983)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C3113 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C3111 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C3114 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C48000 * C48363 +
                  ((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C3114 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C3111 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C3113) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48104) *
                      C48206 * C48221 * C48000 * C48356 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C3113 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C3111 -
                   (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                    C113 * C417 + C101 * C427) *
                       C3114 -
                   (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                    C113 * C430 + C101 * C447) *
                       C48104) *
                      C48206 * C48221 * C48000 * C48343 +
                  ((C113 * C423 + C101 * C439 + C114 * C425 + C102 * C443 +
                    C115 * C667 + C103 * C668) *
                       C3114 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C3111 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C3113) +
                   (C113 * C440 + C101 * C453 + C114 * C444 + C102 * C455 +
                    C115 * C669 + C103 * C670) *
                       C48104) *
                      C48206 * C48221 * C48000 * C48322)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C3363 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48365 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C3364 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48362 +
                   (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                    C115 * C422 + C103 * C435) *
                       C3365 +
                   (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                    C115 * C438 + C103 * C452) *
                       C48353 -
                   (C115 * C1857 + C103 * C1863 + C114 * C1858 + C102 * C1864 +
                    C113 * C1859 + C101 * C1865) *
                       C3366 -
                   (C115 * C1866 + C103 * C1875 + C114 * C1867 + C102 * C1876 +
                    C113 * C1868 + C101 * C1877) *
                       C48334) *
                      C48206 * C48221 * C48000 * C2457 +
                  ((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C3364 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48365 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C3363) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48362 -
                   (C115 * C424 + C103 * C441 + C114 * C422 + C102 * C435 +
                    C113 * C421 + C101 * C434) *
                       C3365 -
                   (C115 * C442 + C103 * C454 + C114 * C438 + C102 * C452 +
                    C113 * C437 + C101 * C451) *
                       C48353 +
                   (C113 * C1858 + C101 * C1864 + C114 * C1857 + C102 * C1863 +
                    C115 * C2137 + C103 * C2138) *
                       C3366 +
                   (C113 * C1867 + C101 * C1876 + C114 * C1866 + C102 * C1875 +
                    C115 * C2139 + C103 * C2140) *
                       C48334) *
                      C48206 * C48221 * C48000 * C47983)) /
                    (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C47032 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48100 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C47024 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48107 +
                   (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                    C115 * C422 + C103 * C435) *
                       C47038 +
                   (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                    C115 * C438 + C103 * C452) *
                       C3625) *
                      C48206 * C48221 * C48000 * C47978 +
                  ((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C47024 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48100 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C47032) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48107 -
                   (C115 * C424 + C103 * C441 + C114 * C422 + C102 * C435 +
                    C113 * C421 + C101 * C434) *
                       C47038 -
                   (C115 * C442 + C103 * C454 + C114 * C438 + C102 * C452 +
                    C113 * C437 + C101 * C451) *
                       C3625) *
                      C48206 * C48221 * C48000 * C47986 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C47032 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48100 -
                   (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                    C113 * C417 + C101 * C427) *
                       C47024 -
                   (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                    C113 * C430 + C101 * C447) *
                       C48107 +
                   (C113 * C422 + C101 * C435 + C114 * C424 + C102 * C441 +
                    C115 * C426 + C103 * C445) *
                       C47038 +
                   (C113 * C438 + C101 * C452 + C114 * C442 + C102 * C454 +
                    C115 * C446 + C103 * C456) *
                       C3625) *
                      C48206 * C48221 * C48000 * C2720)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C3113 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C3111 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C3114 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C48000 * C48363 +
                  ((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C3114 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C3111 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C3113) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48104) *
                      C48206 * C48221 * C48000 * C48356 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C3113 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C3111 -
                   (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                    C113 * C417 + C101 * C427) *
                       C3114 -
                   (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                    C113 * C430 + C101 * C447) *
                       C48104) *
                      C48206 * C48221 * C48000 * C48343 +
                  ((C113 * C423 + C101 * C439 + C114 * C425 + C102 * C443 +
                    C115 * C667 + C103 * C668) *
                       C3114 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C3111 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C3113) +
                   (C113 * C440 + C101 * C453 + C114 * C444 + C102 * C455 +
                    C115 * C669 + C103 * C670) *
                       C48104) *
                      C48206 * C48221 * C48000 * C48322)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C3113 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C3111 -
                    (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                     C113 * C419 + C101 * C429) *
                        C3114 -
                    (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                     C113 * C432 + C101 * C449) *
                        C48104) *
                       C48206 * C48221 * C48357 +
                   ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C3114 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C3111 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C3113) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C48104) *
                       C48206 * C48221 * C48345 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C3113 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C3111 -
                    (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                     C113 * C1160 + C101 * C1172) *
                        C3114 -
                    (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                     C113 * C1175 + C101 * C1187) *
                        C48104) *
                       C48206 * C48221 * C48318) *
                      C2457 +
                  (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                     C115 * C423 + C103 * C439) *
                        C3114 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C3111 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C3113) +
                    (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                     C115 * C440 + C103 * C453) *
                        C48104) *
                       C48206 * C48221 * C48357 +
                   ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C3113 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C3111 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C3114 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C48104) *
                       C48206 * C48221 * C48345 +
                   ((C113 * C1159 + C101 * C1171 + C114 * C1158 + C102 * C1170 +
                     C115 * C1445 + C103 * C1446) *
                        C3114 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C3111 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C3113) +
                    (C113 * C1174 + C101 * C1186 + C114 * C1173 + C102 * C1185 +
                     C115 * C1447 + C103 * C1448) *
                        C48104) *
                       C48206 * C48221 * C48318) *
                      C47983)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48017) *
                       C48206 * C48221 * C48286 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48017 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C48206 * C48221 * C48062) *
                      C557 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48017) *
                       C48206 * C48221 * C48062 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48017 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48206 * C48221 * C48286) *
                      C558 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48017) *
                       C48206 * C48221 * C48286 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C48017 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C48206 * C48221 * C48062) *
                      C559 +
                  (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                     C115 * C561 + C103 * C562) *
                        C116 +
                    (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                     C115 * C563 + C103 * C564) *
                        C48017) *
                       C48206 * C48221 * C48062 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C48017 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C48206 * C48221 * C48286) *
                      C48322)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48017) *
                       C48206 * C48221 * C1289 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48017 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C48206 * C48221 * C1290 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C48017) *
                       C48206 * C48221 * C1291 -
                   ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                     C113 * C1029 + C101 * C1041) *
                        C48017 +
                    (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                     C113 * C1023 + C101 * C1032) *
                        C116) *
                       C48206 * C48221 * C48328) *
                      C48272 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48017) *
                       C48206 * C48221 * C1290 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48017 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48206 * C48221 * C1289 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C48017 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C48206 * C48221 * C1291 +
                   ((C113 * C1022 + C101 * C1031 + C114 * C1021 + C102 * C1030 +
                     C115 * C1295 + C103 * C1296) *
                        C116 +
                    (C113 * C1028 + C101 * C1040 + C114 * C1027 + C102 * C1039 +
                     C115 * C1297 + C103 * C1298) *
                        C48017) *
                       C48206 * C48221 * C48328) *
                      C47983)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C665 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48287 -
                    (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                     C113 * C419 + C101 * C429) *
                        C666 -
                    (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                     C113 * C432 + C101 * C449) *
                        C48104) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C666 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C48287 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C665) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C48104) *
                       C48206 * C48221 * C48062) *
                      C258 +
                  (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                     C115 * C423 + C103 * C439) *
                        C666 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48287 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C665) +
                    (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                     C115 * C440 + C103 * C453) *
                        C48104) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C665 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48287 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C666 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C48104) *
                       C48206 * C48221 * C48062) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C665 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48287 -
                    (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                     C113 * C417 + C101 * C427) *
                        C666 -
                    (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                     C113 * C430 + C101 * C447) *
                        C48104) *
                       C48206 * C48221 * C48286 +
                   ((C113 * C819 + C101 * C824 + C114 * C820 + C102 * C828 +
                     C115 * C821 + C103 * C830) *
                        C666 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C48287 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C665) +
                    (C113 * C827 + C101 * C834 + C114 * C829 + C102 * C835 +
                     C115 * C831 + C103 * C836) *
                        C48104) *
                       C48206 * C48221 * C48062) *
                      C48312)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C665 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48287 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C666 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C1289 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C666 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48287 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C665) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48104) *
                      C48206 * C48221 * C1290 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C665 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C48287 -
                   (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                    C113 * C1160 + C101 * C1172) *
                       C666 -
                   (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                    C113 * C1175 + C101 * C1187) *
                       C48104) *
                      C48206 * C48221 * C1291 +
                  ((C113 * C1547 + C101 * C1550 + C114 * C1548 + C102 * C1551 +
                    C115 * C1549 + C103 * C1552) *
                       C666 -
                   ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                     C113 * C1029 + C101 * C1041) *
                        C48287 +
                    (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                     C113 * C1023 + C101 * C1032) *
                        C665) +
                   (C113 * C1553 + C101 * C1556 + C114 * C1554 + C102 * C1557 +
                    C115 * C1555 + C103 * C1558) *
                       C48104) *
                      C48206 * C48221 * C48328) *
                 C47973) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48017) *
                       C48206 * C48221 * C48357 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48017 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C48206 * C48221 * C48345 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48017) *
                       C48206 * C48221 * C48345 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48017 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48206 * C48221 * C48357 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C48017 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C48206 * C48221 * C48318) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48017) *
                       C48206 * C48221 * C48357 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C48017 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C48206 * C48221 * C48345 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C48312)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C48000 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C48017 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48206 * C48221 * C48000 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48017) *
                      C48206 * C48221 * C48000 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C48017 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C48206 * C48221 * C48000 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C48017) *
                      C48206 * C48221 * C48000 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C414 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48358 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C415 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48347 +
                   (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                    C115 * C422 + C103 * C435) *
                       C416 +
                   (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                    C115 * C438 + C103 * C452) *
                       C48321) *
                      C48206 * C48221 * C48000 * C258 +
                  ((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C415 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48358 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C414) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48347 -
                   (C115 * C424 + C103 * C441 + C114 * C422 + C102 * C435 +
                    C113 * C421 + C101 * C434) *
                       C416 -
                   (C115 * C442 + C103 * C454 + C114 * C438 + C102 * C452 +
                    C113 * C437 + C101 * C451) *
                       C48321) *
                      C48206 * C48221 * C48000 * C259 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C414 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48358 -
                   (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                    C113 * C417 + C101 * C427) *
                       C415 -
                   (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                    C113 * C430 + C101 * C447) *
                       C48347 +
                   (C113 * C422 + C101 * C435 + C114 * C424 + C102 * C441 +
                    C115 * C426 + C103 * C445) *
                       C416 +
                   (C113 * C438 + C101 * C452 + C114 * C442 + C102 * C454 +
                    C115 * C446 + C103 * C456) *
                       C48321) *
                      C48206 * C48221 * C48000 * C48312)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48017) *
                       C48206 * C48221 * C947 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48017 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C48206 * C48221 * C948 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C48354 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48017) *
                       C48206 * C48221 * C948 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48017 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48206 * C48221 * C947 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C48017 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C48206 * C48221 * C48318) *
                      C48341 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48017) *
                       C48206 * C48221 * C947 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C48017 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C48206 * C48221 * C948 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C48312)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C1015 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C48017 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C48206 * C48221 * C1016 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C48017) *
                      C48206 * C48221 * C1017 -
                  ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                    C113 * C1029 + C101 * C1041) *
                       C48017 +
                   (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                    C113 * C1023 + C101 * C1032) *
                       C116) *
                      C48206 * C48221 * C1018 +
                  ((C113 * C1024 + C101 * C1033 + C114 * C1025 + C102 * C1034 +
                    C115 * C1026 + C103 * C1035) *
                       C116 +
                   (C113 * C1036 + C101 * C1042 + C114 * C1037 + C102 * C1043 +
                    C115 * C1038 + C103 * C1044) *
                       C48017) *
                      C48206 * C48221 * C1019) *
                 C47973) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C414 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48358 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C415 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48347 +
                   (C113 * C420 + C101 * C433 + C114 * C421 + C102 * C434 +
                    C115 * C422 + C103 * C435) *
                       C416 +
                   (C113 * C436 + C101 * C450 + C114 * C437 + C102 * C451 +
                    C115 * C438 + C103 * C452) *
                       C48321) *
                      C48206 * C48221 * C947 +
                  ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                    C115 * C819 + C103 * C824) *
                       C415 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48358 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C414) +
                   (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                    C115 * C827 + C103 * C834) *
                       C48347 -
                   (C115 * C1155 + C103 * C1164 + C114 * C1156 + C102 * C1165 +
                    C113 * C1157 + C101 * C1166) *
                       C416 -
                   (C115 * C1167 + C103 * C1182 + C114 * C1168 + C102 * C1183 +
                    C113 * C1169 + C101 * C1184) *
                       C48321) *
                      C48206 * C48221 * C948 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C414 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C48358 -
                   (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                    C113 * C1160 + C101 * C1172) *
                       C415 -
                   (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                    C113 * C1175 + C101 * C1187) *
                       C48347 +
                   (C113 * C1161 + C101 * C1176 + C114 * C1162 + C102 * C1177 +
                    C115 * C1163 + C103 * C1178) *
                       C416 +
                   (C113 * C1179 + C101 * C1188 + C114 * C1180 + C102 * C1189 +
                    C115 * C1181 + C103 * C1190) *
                       C48321) *
                      C48206 * C48221 * C48318) *
                 C47973) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C665 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48287 -
                   (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                    C113 * C419 + C101 * C429) *
                       C666 -
                   (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                    C113 * C432 + C101 * C449) *
                       C48104) *
                      C48206 * C48221 * C48000 * C557 +
                  ((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                    C115 * C423 + C103 * C439) *
                       C666 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48287 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C665) +
                   (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                    C115 * C440 + C103 * C453) *
                       C48104) *
                      C48206 * C48221 * C48000 * C558 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C665 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48287 -
                   (C115 * C425 + C103 * C443 + C114 * C423 + C102 * C439 +
                    C113 * C417 + C101 * C427) *
                       C666 -
                   (C115 * C444 + C103 * C455 + C114 * C440 + C102 * C453 +
                    C113 * C430 + C101 * C447) *
                       C48104) *
                      C48206 * C48221 * C48000 * C559 +
                  ((C113 * C423 + C101 * C439 + C114 * C425 + C102 * C443 +
                    C115 * C667 + C103 * C668) *
                       C666 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C48287 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C665) +
                   (C113 * C440 + C101 * C453 + C114 * C444 + C102 * C455 +
                    C115 * C669 + C103 * C670) *
                       C48104) *
                      C48206 * C48221 * C48000 * C48322)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C665 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48287 -
                    (C115 * C417 + C103 * C427 + C114 * C418 + C102 * C428 +
                     C113 * C419 + C101 * C429) *
                        C666 -
                    (C115 * C430 + C103 * C447 + C114 * C431 + C102 * C448 +
                     C113 * C432 + C101 * C449) *
                        C48104) *
                       C48206 * C48221 * C947 +
                   ((C113 * C817 + C101 * C822 + C114 * C818 + C102 * C823 +
                     C115 * C819 + C103 * C824) *
                        C666 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C48287 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C665) +
                    (C113 * C825 + C101 * C832 + C114 * C826 + C102 * C833 +
                     C115 * C827 + C103 * C834) *
                        C48104) *
                       C48206 * C48221 * C948 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C665 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C48287 -
                    (C115 * C1158 + C103 * C1170 + C114 * C1159 + C102 * C1171 +
                     C113 * C1160 + C101 * C1172) *
                        C666 -
                    (C115 * C1173 + C103 * C1185 + C114 * C1174 + C102 * C1186 +
                     C113 * C1175 + C101 * C1187) *
                        C48104) *
                       C48206 * C48221 * C48318) *
                      C48272 +
                  (((C113 * C418 + C101 * C428 + C114 * C417 + C102 * C427 +
                     C115 * C423 + C103 * C439) *
                        C666 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C48287 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C665) +
                    (C113 * C431 + C101 * C448 + C114 * C430 + C102 * C447 +
                     C115 * C440 + C103 * C453) *
                        C48104) *
                       C48206 * C48221 * C947 +
                   ((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C665 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48287 -
                    (C115 * C820 + C103 * C828 + C114 * C819 + C102 * C824 +
                     C113 * C818 + C101 * C823) *
                        C666 -
                    (C115 * C829 + C103 * C835 + C114 * C827 + C102 * C834 +
                     C113 * C826 + C101 * C833) *
                        C48104) *
                       C48206 * C48221 * C948 +
                   ((C113 * C1159 + C101 * C1171 + C114 * C1158 + C102 * C1170 +
                     C115 * C1445 + C103 * C1446) *
                        C666 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C48287 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C665) +
                    (C113 * C1174 + C101 * C1186 + C114 * C1173 + C102 * C1185 +
                     C115 * C1447 + C103 * C1448) *
                        C48104) *
                       C48206 * C48221 * C48318) *
                      C47983)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C48000 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C48017 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C48206 * C48221 * C48000 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C48017) *
                      C48206 * C48221 * C48000 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C48017 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C48206 * C48221 * C48000 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C48017) *
                      C48206 * C48221 * C48000 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48017) *
                       C48206 * C48221 * C48357 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48017 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C48206 * C48221 * C48345 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48017) *
                       C48206 * C48221 * C48345 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48017 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48206 * C48221 * C48357 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C48017 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C48206 * C48221 * C48318) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48017) *
                       C48206 * C48221 * C48357 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C48017 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C48206 * C48221 * C48345 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C48312)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C48017) *
                       C48206 * C48221 * C947 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C48017 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C48206 * C48221 * C948 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C48354 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C48017) *
                       C48206 * C48221 * C948 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C48017 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C48206 * C48221 * C947 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C48017 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C48206 * C48221 * C48318) *
                      C48341 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C48017) *
                       C48206 * C48221 * C947 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C48017 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C48206 * C48221 * C948 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C48017) *
                       C48206 * C48221 * C48318) *
                      C48312)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C48017) *
                      C48206 * C48221 * C1015 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C48017 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C48206 * C48221 * C1016 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C48017) *
                      C48206 * C48221 * C1017 -
                  ((C115 * C1027 + C103 * C1039 + C114 * C1028 + C102 * C1040 +
                    C113 * C1029 + C101 * C1041) *
                       C48017 +
                   (C115 * C1021 + C103 * C1030 + C114 * C1022 + C102 * C1031 +
                    C113 * C1023 + C101 * C1032) *
                       C116) *
                      C48206 * C48221 * C1018 +
                  ((C113 * C1024 + C101 * C1033 + C114 * C1025 + C102 * C1034 +
                    C115 * C1026 + C103 * C1035) *
                       C116 +
                   (C113 * C1036 + C101 * C1042 + C114 * C1037 + C102 * C1043 +
                    C115 * C1038 + C103 * C1044) *
                       C48017) *
                      C48206 * C48221 * C1019) *
                 C47973) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C48058 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C48065 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C5726 + C5727) * C116 + (C5728 + C5729) * C48017) * C48336) *
               C48221 * C2717) *
              C47978 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C48065 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C48058 -
           (((C6062 + C6063) * C48017 + (C6064 + C6065) * C116) * C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C2717) *
              C47986 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C48058 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C48065 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C4603 +
            ((C4605 * C1021 + C4601 * C1030 + C4606 * C1295 + C48305 * C1296) *
                 C116 +
             (C4605 * C1027 + C4601 * C1039 + C4606 * C1297 + C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C2717) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C666 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C665 + (C4804 + C4805) * C48287 -
             (C5462 + C5463) * C666 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C48058 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C5916 + C5917) * C666 -
             ((C4806 + C4807) * C48287 + (C4808 + C4809) * C665) +
             (C5918 + C5919) * C48104) *
                C48336) *
               C48221 * C48065 +
           (((C4809 + C4808) * C665 + (C4807 + C4806) * C48287 -
             (C5917 + C5916) * C666 - (C5919 + C5918) * C48104) *
                C4603 +
            ((C5726 + C5727) * C665 + (C5728 + C5729) * C48287 -
             (C6418 + C6419) * C666 - (C6420 + C6421) * C48104) *
                C48336) *
               C48221 * C2717) *
              C2457 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C666 -
             ((C4813 + C4812) * C48287 + (C4811 + C4810) * C665) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C48058 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C665 + (C4816 + C4817) * C48287 -
             (C6268 + C6269) * C666 - (C6270 + C6271) * C48104) *
                C48336) *
               C48221 * C48065 +
           (((C6269 + C6268) * C666 -
             ((C4817 + C4816) * C48287 + (C4815 + C4814) * C665) +
             (C6271 + C6270) * C48104) *
                C4603 +
            ((C4605 * C1548 + C4601 * C1551 + C4606 * C1549 + C48305 * C1552) *
                 C666 -
             ((C6062 + C6063) * C48287 + (C6064 + C6065) * C665) +
             (C4605 * C1554 + C4601 * C1557 + C4606 * C1555 + C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C48364 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C48360 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C5726 + C5727) * C116 + (C5728 + C5729) * C48017) * C48336) *
               C48221 * C48350 -
           (((C5730 + C5731) * C48017 + (C5732 + C5733) * C116) * C48336 +
            ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C4603) *
               C48221 * C48328) *
              C2457 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C48360 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C48364 -
           (((C6062 + C6063) * C48017 + (C6064 + C6065) * C116) * C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C48350 +
           (((C6065 + C6064) * C116 + (C6063 + C6062) * C48017) * C4603 +
            ((C4605 * C1025 + C4601 * C1034 + C4606 * C1026 + C48305 * C1035) *
                 C116 +
             (C4605 * C1037 + C4601 * C1043 + C4606 * C1038 + C48305 * C1044) *
                 C48017) *
                C48336) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C2349 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C48062) *
              C48363 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C48062 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C2349) *
              C48356 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C2349 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C48062) *
              C48343 +
          ((((C5110 + C5111) * C116 + (C5112 + C5113) * C48017) * C4603 +
            ((C4605 * C268 + C4601 * C286 + C4606 * C270 + C48305 * C289) *
                 C116 +
             (C4605 * C285 + C4601 * C298 + C4606 * C290 + C48305 * C300) *
                 C48017) *
                C48336) *
               C48221 * C48062 -
           (((C5113 + C5112) * C48017 + (C5111 + C5110) * C116) * C48336 +
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48017 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C4603) *
               C48221 * C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C414 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48358 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C415 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48347 +
             (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                 C416 +
             (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                 C48321) *
                C4603 +
            ((C4802 + C4803) * C414 + (C4804 + C4805) * C48358 -
             (C5462 + C5463) * C415 - (C5464 + C5465) * C48347 +
             (C5912 + C5913) * C416 + (C5914 + C5915) * C48321) *
                C48336) *
               C48221 * C2349 +
           (((C5463 + C5462) * C415 -
             ((C4805 + C4804) * C48358 + (C4803 + C4802) * C414) +
             (C5465 + C5464) * C48347 - (C5913 + C5912) * C416 -
             (C5915 + C5914) * C48321) *
                C4603 +
            ((C5916 + C5917) * C415 -
             ((C4806 + C4807) * C48358 + (C4808 + C4809) * C414) +
             (C5918 + C5919) * C48347 - (C5920 + C5921) * C416 -
             (C5922 + C5923) * C48321) *
                C48336) *
               C48221 * C48062) *
              C2457 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C415 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48358 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C414) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48347 -
             (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                 C416 -
             (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                 C48321) *
                C4603 +
            ((C5466 + C5467) * C415 -
             ((C4813 + C4812) * C48358 + (C4811 + C4810) * C414) +
             (C5468 + C5469) * C48347 - (C7006 + C7007) * C416 -
             (C7008 + C7009) * C48321) *
                C48336) *
               C48221 * C2349 +
           (((C4810 + C4811) * C414 + (C4812 + C4813) * C48358 -
             (C5467 + C5466) * C415 - (C5469 + C5468) * C48347 +
             (C7007 + C7006) * C416 + (C7009 + C7008) * C48321) *
                C4603 +
            ((C4814 + C4815) * C414 + (C4816 + C4817) * C48358 -
             (C6268 + C6269) * C415 - (C6270 + C6271) * C48347 +
             (C4605 * C1162 + C4601 * C1177 + C4606 * C1163 + C48305 * C1178) *
                 C416 +
             (C4605 * C1180 + C4601 * C1189 + C4606 * C1181 + C48305 * C1190) *
                 C48321) *
                C48336) *
               C48221 * C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C666 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C665 + (C4804 + C4805) * C48287 -
             (C5462 + C5463) * C666 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C5916 + C5917) * C666 -
             ((C4806 + C4807) * C48287 + (C4808 + C4809) * C665) +
             (C5918 + C5919) * C48104) *
                C48336) *
               C48221 * C48062) *
              C47978 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C666 -
             ((C4813 + C4812) * C48287 + (C4811 + C4810) * C665) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C665 + (C4816 + C4817) * C48287 -
             (C6268 + C6269) * C666 - (C6270 + C6271) * C48104) *
                C48336) *
               C48221 * C48062) *
              C47986 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C665 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48287 -
             (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                 C666 -
             (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                 C48104) *
                C4603 +
            ((C4818 + C4819) * C665 + (C4820 + C4821) * C48287 -
             (C5470 + C5471) * C666 - (C5472 + C5473) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C5471 + C5470) * C666 -
             ((C4821 + C4820) * C48287 + (C4819 + C4818) * C665) +
             (C5473 + C5472) * C48104) *
                C4603 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C666 -
             ((C4822 + C4823) * C48287 + (C4824 + C4825) * C665) +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C2349 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C48062) *
              C48363 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C48062 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C2349) *
              C48356 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C2349 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C48062) *
              C48343 +
          ((((C5110 + C5111) * C116 + (C5112 + C5113) * C48017) * C4603 +
            ((C4605 * C268 + C4601 * C286 + C4606 * C270 + C48305 * C289) *
                 C116 +
             (C4605 * C285 + C4601 * C298 + C4606 * C290 + C48305 * C300) *
                 C48017) *
                C48336) *
               C48221 * C48062 -
           (((C5113 + C5112) * C48017 + (C5111 + C5110) * C116) * C48336 +
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48017 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C4603) *
               C48221 * C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C48364 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C48360 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C5726 + C5727) * C116 + (C5728 + C5729) * C48017) * C48336) *
               C48221 * C48350 -
           (((C5730 + C5731) * C48017 + (C5732 + C5733) * C116) * C48336 +
            ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C4603) *
               C48221 * C48328) *
              C2457 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C48360 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C48364 -
           (((C6062 + C6063) * C48017 + (C6064 + C6065) * C116) * C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C48350 +
           (((C6065 + C6064) * C116 + (C6063 + C6062) * C48017) * C4603 +
            ((C4605 * C1025 + C4601 * C1034 + C4606 * C1026 + C48305 * C1035) *
                 C116 +
             (C4605 * C1037 + C4601 * C1043 + C4606 * C1038 + C48305 * C1044) *
                 C48017) *
                C48336) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C3114 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C3113 + (C4804 + C4805) * C3111 -
             (C5462 + C5463) * C3114 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C48058 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C5916 + C5917) * C3114 -
             ((C4806 + C4807) * C3111 + (C4808 + C4809) * C3113) +
             (C5918 + C5919) * C48104) *
                C48336) *
               C48221 * C48065 +
           (((C4809 + C4808) * C3113 + (C4807 + C4806) * C3111 -
             (C5917 + C5916) * C3114 - (C5919 + C5918) * C48104) *
                C4603 +
            ((C5726 + C5727) * C3113 + (C5728 + C5729) * C3111 -
             (C6418 + C6419) * C3114 - (C6420 + C6421) * C48104) *
                C48336) *
               C48221 * C2717) *
              C48272 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C3114 -
             ((C4813 + C4812) * C3111 + (C4811 + C4810) * C3113) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C48058 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C3113 + (C4816 + C4817) * C3111 -
             (C6268 + C6269) * C3114 - (C6270 + C6271) * C48104) *
                C48336) *
               C48221 * C48065 +
           (((C6269 + C6268) * C3114 -
             ((C4817 + C4816) * C3111 + (C4815 + C4814) * C3113) +
             (C6271 + C6270) * C48104) *
                C4603 +
            ((C4605 * C1548 + C4601 * C1551 + C4606 * C1549 + C48305 * C1552) *
                 C3114 -
             ((C6062 + C6063) * C3111 + (C6064 + C6065) * C3113) +
             (C4605 * C1554 + C4601 * C1557 + C4606 * C1555 + C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C47032 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48100 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C47024 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48107 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C47038 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C3625) *
               C4603 +
           ((C4802 + C4803) * C47032 + (C4804 + C4805) * C48100 -
            (C5462 + C5463) * C47024 - (C5464 + C5465) * C48107 +
            (C5912 + C5913) * C47038 + (C5914 + C5915) * C3625) *
               C48336) *
              C48221 * C48058 +
          (((C5463 + C5462) * C47024 -
            ((C4805 + C4804) * C48100 + (C4803 + C4802) * C47032) +
            (C5465 + C5464) * C48107 - (C5913 + C5912) * C47038 -
            (C5915 + C5914) * C3625) *
               C4603 +
           ((C5916 + C5917) * C47024 -
            ((C4806 + C4807) * C48100 + (C4808 + C4809) * C47032) +
            (C5918 + C5919) * C48107 - (C5920 + C5921) * C47038 -
            (C5922 + C5923) * C3625) *
               C48336) *
              C48221 * C48065 +
          (((C4809 + C4808) * C47032 + (C4807 + C4806) * C48100 -
            (C5917 + C5916) * C47024 - (C5919 + C5918) * C48107 +
            (C5921 + C5920) * C47038 + (C5923 + C5922) * C3625) *
               C4603 +
           ((C5726 + C5727) * C47032 + (C5728 + C5729) * C48100 -
            (C6418 + C6419) * C47024 - (C6420 + C6421) * C48107 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48305 * C5882) *
                C47038 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48305 * C5886) *
                C3625) *
               C48336) *
              C48221 * C2717) *
         C47973) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3113 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C3111 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C3114 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48104) *
               C4603 +
           ((C4802 + C4803) * C3113 + (C4804 + C4805) * C3111 -
            (C5462 + C5463) * C3114 - (C5464 + C5465) * C48104) *
               C48336) *
              C48221 * C48364 +
          (((C5463 + C5462) * C3114 -
            ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
            (C5465 + C5464) * C48104) *
               C4603 +
           ((C5916 + C5917) * C3114 -
            ((C4806 + C4807) * C3111 + (C4808 + C4809) * C3113) +
            (C5918 + C5919) * C48104) *
               C48336) *
              C48221 * C48360 +
          (((C4809 + C4808) * C3113 + (C4807 + C4806) * C3111 -
            (C5917 + C5916) * C3114 - (C5919 + C5918) * C48104) *
               C4603 +
           ((C5726 + C5727) * C3113 + (C5728 + C5729) * C3111 -
            (C6418 + C6419) * C3114 - (C6420 + C6421) * C48104) *
               C48336) *
              C48221 * C48350 +
          (((C6419 + C6418) * C3114 -
            ((C5729 + C5728) * C3111 + (C5727 + C5726) * C3113) +
            (C6421 + C6420) * C48104) *
               C4603 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48305 * C6404) *
                C3114 -
            ((C5730 + C5731) * C3111 + (C5732 + C5733) * C3113) +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48305 * C6408) *
                C48104) *
               C48336) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C3114 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C3113 + (C4804 + C4805) * C3111 -
             (C5462 + C5463) * C3114 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C5916 + C5917) * C3114 -
             ((C4806 + C4807) * C3111 + (C4808 + C4809) * C3113) +
             (C5918 + C5919) * C48104) *
                C48336) *
               C48221 * C48062) *
              C48354 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C3114 -
             ((C4813 + C4812) * C3111 + (C4811 + C4810) * C3113) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C3113 + (C4816 + C4817) * C3111 -
             (C6268 + C6269) * C3114 - (C6270 + C6271) * C48104) *
                C48336) *
               C48221 * C48062) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C3113 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C3111 -
             (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                 C3114 -
             (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                 C48104) *
                C4603 +
            ((C4818 + C4819) * C3113 + (C4820 + C4821) * C3111 -
             (C5470 + C5471) * C3114 - (C5472 + C5473) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C5471 + C5470) * C3114 -
             ((C4821 + C4820) * C3111 + (C4819 + C4818) * C3113) +
             (C5473 + C5472) * C48104) *
                C4603 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C3114 -
             ((C4822 + C4823) * C3111 + (C4824 + C4825) * C3113) +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3363 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48365 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C3364 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48362 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C3365 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C48353 -
            (C4606 * C1858 + C48305 * C1864 + C4605 * C1859 + C4601 * C1865) *
                C3366 -
            (C4606 * C1867 + C48305 * C1876 + C4605 * C1868 + C4601 * C1877) *
                C48334) *
               C4603 +
           ((C4802 + C4803) * C3363 + (C4804 + C4805) * C48365 -
            (C5462 + C5463) * C3364 - (C5464 + C5465) * C48362 +
            (C5912 + C5913) * C3365 + (C5914 + C5915) * C48353 -
            (C7286 + C7287) * C3366 - (C7288 + C7289) * C48334) *
               C48336) *
              C48221 * C2349 +
          (((C5463 + C5462) * C3364 -
            ((C4805 + C4804) * C48365 + (C4803 + C4802) * C3363) +
            (C5465 + C5464) * C48362 - (C5913 + C5912) * C3365 -
            (C5915 + C5914) * C48353 + (C7287 + C7286) * C3366 +
            (C7289 + C7288) * C48334) *
               C4603 +
           ((C5916 + C5917) * C3364 -
            ((C4806 + C4807) * C48365 + (C4808 + C4809) * C3363) +
            (C5918 + C5919) * C48362 - (C5920 + C5921) * C3365 -
            (C5922 + C5923) * C48353 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48305 * C7272) *
                C3366 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48305 * C7276) *
                C48334) *
               C48336) *
              C48221 * C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C47032 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48100 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C47024 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48107 +
             (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                 C47038 +
             (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                 C3625) *
                C4603 +
            ((C4802 + C4803) * C47032 + (C4804 + C4805) * C48100 -
             (C5462 + C5463) * C47024 - (C5464 + C5465) * C48107 +
             (C5912 + C5913) * C47038 + (C5914 + C5915) * C3625) *
                C48336) *
               C48221 * C2349 +
           (((C5463 + C5462) * C47024 -
             ((C4805 + C4804) * C48100 + (C4803 + C4802) * C47032) +
             (C5465 + C5464) * C48107 - (C5913 + C5912) * C47038 -
             (C5915 + C5914) * C3625) *
                C4603 +
            ((C5916 + C5917) * C47024 -
             ((C4806 + C4807) * C48100 + (C4808 + C4809) * C47032) +
             (C5918 + C5919) * C48107 - (C5920 + C5921) * C47038 -
             (C5922 + C5923) * C3625) *
                C48336) *
               C48221 * C48062) *
              C48272 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C47024 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48100 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C47032) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48107 -
             (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                 C47038 -
             (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                 C3625) *
                C4603 +
            ((C5466 + C5467) * C47024 -
             ((C4813 + C4812) * C48100 + (C4811 + C4810) * C47032) +
             (C5468 + C5469) * C48107 - (C7006 + C7007) * C47038 -
             (C7008 + C7009) * C3625) *
                C48336) *
               C48221 * C2349 +
           (((C4810 + C4811) * C47032 + (C4812 + C4813) * C48100 -
             (C5467 + C5466) * C47024 - (C5469 + C5468) * C48107 +
             (C7007 + C7006) * C47038 + (C7009 + C7008) * C3625) *
                C4603 +
            ((C4814 + C4815) * C47032 + (C4816 + C4817) * C48100 -
             (C6268 + C6269) * C47024 - (C6270 + C6271) * C48107 +
             (C4605 * C1162 + C4601 * C1177 + C4606 * C1163 + C48305 * C1178) *
                 C47038 +
             (C4605 * C1180 + C4601 * C1189 + C4606 * C1181 + C48305 * C1190) *
                 C3625) *
                C48336) *
               C48221 * C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C3114 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C3113 + (C4804 + C4805) * C3111 -
             (C5462 + C5463) * C3114 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C5916 + C5917) * C3114 -
             ((C4806 + C4807) * C3111 + (C4808 + C4809) * C3113) +
             (C5918 + C5919) * C48104) *
                C48336) *
               C48221 * C48062) *
              C48354 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C3114 -
             ((C4813 + C4812) * C3111 + (C4811 + C4810) * C3113) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C3113 + (C4816 + C4817) * C3111 -
             (C6268 + C6269) * C3114 - (C6270 + C6271) * C48104) *
                C48336) *
               C48221 * C48062) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C3113 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C3111 -
             (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                 C3114 -
             (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                 C48104) *
                C4603 +
            ((C4818 + C4819) * C3113 + (C4820 + C4821) * C3111 -
             (C5470 + C5471) * C3114 - (C5472 + C5473) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C5471 + C5470) * C3114 -
             ((C4821 + C4820) * C3111 + (C4819 + C4818) * C3113) +
             (C5473 + C5472) * C48104) *
                C4603 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C3114 -
             ((C4822 + C4823) * C3111 + (C4824 + C4825) * C3113) +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3113 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C3111 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C3114 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48104) *
               C4603 +
           ((C4802 + C4803) * C3113 + (C4804 + C4805) * C3111 -
            (C5462 + C5463) * C3114 - (C5464 + C5465) * C48104) *
               C48336) *
              C48221 * C48364 +
          (((C5463 + C5462) * C3114 -
            ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
            (C5465 + C5464) * C48104) *
               C4603 +
           ((C5916 + C5917) * C3114 -
            ((C4806 + C4807) * C3111 + (C4808 + C4809) * C3113) +
            (C5918 + C5919) * C48104) *
               C48336) *
              C48221 * C48360 +
          (((C4809 + C4808) * C3113 + (C4807 + C4806) * C3111 -
            (C5917 + C5916) * C3114 - (C5919 + C5918) * C48104) *
               C4603 +
           ((C5726 + C5727) * C3113 + (C5728 + C5729) * C3111 -
            (C6418 + C6419) * C3114 - (C6420 + C6421) * C48104) *
               C48336) *
              C48221 * C48350 +
          (((C6419 + C6418) * C3114 -
            ((C5729 + C5728) * C3111 + (C5727 + C5726) * C3113) +
            (C6421 + C6420) * C48104) *
               C4603 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48305 * C6404) *
                C3114 -
            ((C5730 + C5731) * C3111 + (C5732 + C5733) * C3113) +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48305 * C6408) *
                C48104) *
               C48336) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C1289 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C1290 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C5726 + C5727) * C116 + (C5728 + C5729) * C48017) * C48336) *
               C48221 * C1291 -
           (((C5730 + C5731) * C48017 + (C5732 + C5733) * C116) * C48336 +
            ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C4603) *
               C48221 * C48328) *
              C48272 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C1290 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C1289 -
           (((C6062 + C6063) * C48017 + (C6064 + C6065) * C116) * C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C1291 +
           (((C6065 + C6064) * C116 + (C6063 + C6062) * C48017) * C4603 +
            ((C4605 * C1025 + C4601 * C1034 + C4606 * C1026 + C48305 * C1035) *
                 C116 +
             (C4605 * C1037 + C4601 * C1043 + C4606 * C1038 + C48305 * C1044) *
                 C48017) *
                C48336) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C48286 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C48062) *
              C557 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C48062 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C48286) *
              C558 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C48286 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C48062) *
              C559 +
          ((((C5110 + C5111) * C116 + (C5112 + C5113) * C48017) * C4603 +
            ((C4605 * C268 + C4601 * C286 + C4606 * C270 + C48305 * C289) *
                 C116 +
             (C4605 * C285 + C4601 * C298 + C4606 * C290 + C48305 * C300) *
                 C48017) *
                C48336) *
               C48221 * C48062 -
           (((C5113 + C5112) * C48017 + (C5111 + C5110) * C116) * C48336 +
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48017 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C4603) *
               C48221 * C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C1672 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C1669 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C1673 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C1670 +
             (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                 C1674 +
             (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                 C48321) *
                C4603 +
            ((C4802 + C4803) * C1672 + (C4804 + C4805) * C1669 -
             (C5462 + C5463) * C1673 - (C5464 + C5465) * C1670 +
             (C5912 + C5913) * C1674 + (C5914 + C5915) * C48321) *
                C48336) *
               C48221 * C48286 +
           (((C5463 + C5462) * C1673 -
             ((C4805 + C4804) * C1669 + (C4803 + C4802) * C1672) +
             (C5465 + C5464) * C1670 - (C5913 + C5912) * C1674 -
             (C5915 + C5914) * C48321) *
                C4603 +
            ((C5916 + C5917) * C1673 -
             ((C4806 + C4807) * C1669 + (C4808 + C4809) * C1672) +
             (C5918 + C5919) * C1670 - (C5920 + C5921) * C1674 -
             (C5922 + C5923) * C48321) *
                C48336) *
               C48221 * C48062) *
              C48272 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C1673 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C1669 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C1672) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C1670 -
             (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                 C1674 -
             (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                 C48321) *
                C4603 +
            ((C5466 + C5467) * C1673 -
             ((C4813 + C4812) * C1669 + (C4811 + C4810) * C1672) +
             (C5468 + C5469) * C1670 - (C7006 + C7007) * C1674 -
             (C7008 + C7009) * C48321) *
                C48336) *
               C48221 * C48286 +
           (((C4810 + C4811) * C1672 + (C4812 + C4813) * C1669 -
             (C5467 + C5466) * C1673 - (C5469 + C5468) * C1670 +
             (C7007 + C7006) * C1674 + (C7009 + C7008) * C48321) *
                C4603 +
            ((C4814 + C4815) * C1672 + (C4816 + C4817) * C1669 -
             (C6268 + C6269) * C1673 - (C6270 + C6271) * C1670 +
             (C4605 * C1162 + C4601 * C1177 + C4606 * C1163 + C48305 * C1178) *
                 C1674 +
             (C4605 * C1180 + C4601 * C1189 + C4606 * C1181 + C48305 * C1190) *
                 C48321) *
                C48336) *
               C48221 * C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C665 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48287 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C666 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48104) *
               C4603 +
           ((C4802 + C4803) * C665 + (C4804 + C4805) * C48287 -
            (C5462 + C5463) * C666 - (C5464 + C5465) * C48104) *
               C48336) *
              C48221 * C1289 +
          (((C5463 + C5462) * C666 -
            ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
            (C5465 + C5464) * C48104) *
               C4603 +
           ((C5916 + C5917) * C666 -
            ((C4806 + C4807) * C48287 + (C4808 + C4809) * C665) +
            (C5918 + C5919) * C48104) *
               C48336) *
              C48221 * C1290 +
          (((C4809 + C4808) * C665 + (C4807 + C4806) * C48287 -
            (C5917 + C5916) * C666 - (C5919 + C5918) * C48104) *
               C4603 +
           ((C5726 + C5727) * C665 + (C5728 + C5729) * C48287 -
            (C6418 + C6419) * C666 - (C6420 + C6421) * C48104) *
               C48336) *
              C48221 * C1291 +
          (((C6419 + C6418) * C666 -
            ((C5729 + C5728) * C48287 + (C5727 + C5726) * C665) +
            (C6421 + C6420) * C48104) *
               C4603 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48305 * C6404) *
                C666 -
            ((C5730 + C5731) * C48287 + (C5732 + C5733) * C665) +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48305 * C6408) *
                C48104) *
               C48336) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C666 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C665 + (C4804 + C4805) * C48287 -
             (C5462 + C5463) * C666 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C4605 * C1160 + C4601 * C1172 + C4606 * C1159 + C48305 * C1171) *
                 C666 -
             ((C4806 + C4807) * C48287 + (C4808 + C4809) * C665) +
             (C4605 * C1175 + C4601 * C1187 + C4606 * C1174 + C48305 * C1186) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C258 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C666 -
             ((C4813 + C4812) * C48287 + (C4811 + C4810) * C665) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C665 + (C4816 + C4817) * C48287 -
             (C4606 * C1158 + C48305 * C1170 + C4605 * C1159 + C4601 * C1171) *
                 C666 -
             (C4606 * C1173 + C48305 * C1185 + C4605 * C1174 + C4601 * C1186) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C259 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C665 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48287 -
             (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                 C666 -
             (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                 C48104) *
                C4603 +
            ((C4818 + C4819) * C665 + (C4820 + C4821) * C48287 -
             (C5470 + C5471) * C666 - (C5472 + C5473) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C5471 + C5470) * C666 -
             ((C4821 + C4820) * C48287 + (C4819 + C4818) * C665) +
             (C5473 + C5472) * C48104) *
                C4603 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C666 -
             ((C4822 + C4823) * C48287 + (C4824 + C4825) * C665) +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C2133 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C2129 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C2134 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C2130 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C2135 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C2131 -
            (C4606 * C1858 + C48305 * C1864 + C4605 * C1859 + C4601 * C1865) *
                C2136 -
            (C4606 * C1867 + C48305 * C1876 + C4605 * C1868 + C4601 * C1877) *
                C48334) *
               C4603 +
           ((C4802 + C4803) * C2133 + (C4804 + C4805) * C2129 -
            (C5462 + C5463) * C2134 - (C5464 + C5465) * C2130 +
            (C5912 + C5913) * C2135 + (C5914 + C5915) * C2131 -
            (C7286 + C7287) * C2136 - (C7288 + C7289) * C48334) *
               C48336) *
              C48221 * C48286 +
          (((C5463 + C5462) * C2134 -
            ((C4805 + C4804) * C2129 + (C4803 + C4802) * C2133) +
            (C5465 + C5464) * C2130 - (C5913 + C5912) * C2135 -
            (C5915 + C5914) * C2131 + (C7287 + C7286) * C2136 +
            (C7289 + C7288) * C48334) *
               C4603 +
           ((C5916 + C5917) * C2134 -
            ((C4806 + C4807) * C2129 + (C4808 + C4809) * C2133) +
            (C5918 + C5919) * C2130 - (C5920 + C5921) * C2135 -
            (C5922 + C5923) * C2131 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48305 * C7272) *
                C2136 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48305 * C7276) *
                C48334) *
               C48336) *
              C48221 * C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                    C116 +
                (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                    C48017) *
                   C4603 +
               ((C4605 * C263 + C4601 * C276 + C4606 * C262 + C48305 * C275) *
                    C116 +
                (C4605 * C273 + C4601 * C293 + C4606 * C272 + C48305 * C292) *
                    C48017) *
                   C48336) *
                  C48221 * C48000 * C108 -
              (((C4606 * C271 + C48305 * C291 + C4605 * C272 + C4601 * C292) *
                    C48017 +
                (C4606 * C261 + C48305 * C274 + C4605 * C262 + C4601 * C275) *
                    C116) *
                   C48336 +
               ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                    C48017 +
                (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                    C116) *
                   C4603) *
                  C48221 * C48000 * C109 +
              (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                    C116 +
                (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                    C48017) *
                   C4603 +
               ((C4605 * C261 + C4601 * C274 + C4606 * C267 + C48305 * C283) *
                    C116 +
                (C4605 * C271 + C4601 * C291 + C4606 * C284 + C48305 * C297) *
                    C48017) *
                   C48336) *
                  C48221 * C48000 * C110 -
              (((C4606 * C287 + C48305 * C299 + C4605 * C284 + C4601 * C297) *
                    C48017 +
                (C4606 * C269 + C48305 * C288 + C4605 * C267 + C4601 * C283) *
                    C116) *
                   C48336 +
               ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                    C48017 +
                (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                    C116) *
                   C4603) *
                  C48221 * C48000 * C111 +
              (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48305 * C135) *
                    C116 +
                (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48305 * C143) *
                    C48017) *
                   C4603 +
               ((C4605 * C269 + C4601 * C288 + C4606 * C561 + C48305 * C562) *
                    C116 +
                (C4605 * C287 + C4601 * C299 + C4606 * C563 + C48305 * C564) *
                    C48017) *
                   C48336) *
                  C48221 * C48000 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                     C116 +
                 (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                     C48017) *
                    C4603 +
                ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
                   C48221 * C48357 -
               (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
                ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
                   C48221 * C48345 +
               (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
                ((C4605 * C1023 + C4601 * C1032 + C4606 * C1022 +
                  C48305 * C1031) *
                     C116 +
                 (C4605 * C1029 + C4601 * C1041 + C4606 * C1028 +
                  C48305 * C1040) *
                     C48017) *
                    C48336) *
                   C48221 * C48318) *
                  C258 +
              ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
                ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
                   C48221 * C48345 -
               (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
                ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                     C48017 +
                 (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                     C116) *
                    C4603) *
                   C48221 * C48357 -
               (((C4606 * C1027 + C48305 * C1039 + C4605 * C1028 +
                  C4601 * C1040) *
                     C48017 +
                 (C4606 * C1021 + C48305 * C1030 + C4605 * C1022 +
                  C4601 * C1031) *
                     C116) *
                    C48336 +
                ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
                   C48221 * C48318) *
                  C259 +
              ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                     C116 +
                 (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                     C48017) *
                    C4603 +
                ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
                   C48221 * C48357 -
               (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
                ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
                   C48221 * C48345 +
               (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C4603 +
                ((C4605 * C1021 + C4601 * C1030 + C4606 * C1295 +
                  C48305 * C1296) *
                     C116 +
                 (C4605 * C1027 + C4601 * C1039 + C4606 * C1297 +
                  C48305 * C1298) *
                     C48017) *
                    C48336) *
                   C48221 * C48318) *
                  C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C414 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48358 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C415 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48347 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C416 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C48321) *
               C4603 +
           ((C4802 + C4803) * C414 + (C4804 + C4805) * C48358 -
            (C4606 * C818 + C48305 * C823 + C4605 * C817 + C4601 * C822) *
                C415 -
            (C4606 * C826 + C48305 * C833 + C4605 * C825 + C4601 * C832) *
                C48347 +
            (C4605 * C1157 + C4601 * C1166 + C4606 * C1156 + C48305 * C1165) *
                C416 +
            (C4605 * C1169 + C4601 * C1184 + C4606 * C1168 + C48305 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C258 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C415 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48358 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C414) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C48347 -
            (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                C416 -
            (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                C48321) *
               C4603 +
           ((C4605 * C818 + C4601 * C823 + C4606 * C819 + C48305 * C824) *
                C415 -
            ((C4813 + C4812) * C48358 + (C4811 + C4810) * C414) +
            (C4605 * C826 + C4601 * C833 + C4606 * C827 + C48305 * C834) *
                C48347 -
            (C4606 * C1155 + C48305 * C1164 + C4605 * C1156 + C4601 * C1165) *
                C416 -
            (C4606 * C1167 + C48305 * C1182 + C4605 * C1168 + C4601 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C259 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C414 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48358 -
            (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                C415 -
            (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                C48347 +
            (C4605 * C422 + C4601 * C435 + C4606 * C424 + C48305 * C441) *
                C416 +
            (C4605 * C438 + C4601 * C452 + C4606 * C442 + C48305 * C454) *
                C48321) *
               C4603 +
           ((C4818 + C4819) * C414 + (C4820 + C4821) * C48358 -
            (C4606 * C820 + C48305 * C828 + C4605 * C819 + C4601 * C824) *
                C415 -
            (C4606 * C829 + C48305 * C835 + C4605 * C827 + C4601 * C834) *
                C48347 +
            (C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                C416 +
            (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C947 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C948 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C4605 * C1023 + C4601 * C1032 + C4606 * C1022 + C48305 * C1031) *
                 C116 +
             (C4605 * C1029 + C4601 * C1041 + C4606 * C1028 + C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48354 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C948 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C947 -
           (((C4606 * C1027 + C48305 * C1039 + C4605 * C1028 + C4601 * C1040) *
                 C48017 +
             (C4606 * C1021 + C48305 * C1030 + C4605 * C1022 + C4601 * C1031) *
                 C116) *
                C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C48318) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C947 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C948 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C4603 +
            ((C4605 * C1021 + C4601 * C1030 + C4606 * C1295 + C48305 * C1296) *
                 C116 +
             (C4605 * C1027 + C4601 * C1039 + C4606 * C1297 + C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C4603 +
           ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
              C48221 * C1015 -
          (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
           ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
              C48221 * C1016 +
          (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
           ((C5726 + C5727) * C116 + (C5728 + C5729) * C48017) * C48336) *
              C48221 * C1017 -
          (((C5730 + C5731) * C48017 + (C5732 + C5733) * C116) * C48336 +
           ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C4603) *
              C48221 * C1018 +
          (((C5733 + C5732) * C116 + (C5731 + C5730) * C48017) * C4603 +
           ((C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48305 * C5704) *
                C116 +
            (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48305 * C5708) *
                C48017) *
               C48336) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C414 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48358 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C415 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48347 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C416 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C48321) *
               C4603 +
           ((C4802 + C4803) * C414 + (C4804 + C4805) * C48358 -
            (C5462 + C5463) * C415 - (C5464 + C5465) * C48347 +
            (C5912 + C5913) * C416 + (C5914 + C5915) * C48321) *
               C48336) *
              C48221 * C947 +
          (((C5463 + C5462) * C415 -
            ((C4805 + C4804) * C48358 + (C4803 + C4802) * C414) +
            (C5465 + C5464) * C48347 - (C5913 + C5912) * C416 -
            (C5915 + C5914) * C48321) *
               C4603 +
           ((C5916 + C5917) * C415 -
            ((C4806 + C4807) * C48358 + (C4808 + C4809) * C414) +
            (C5918 + C5919) * C48347 - (C5920 + C5921) * C416 -
            (C5922 + C5923) * C48321) *
               C48336) *
              C48221 * C948 +
          (((C4809 + C4808) * C414 + (C4807 + C4806) * C48358 -
            (C5917 + C5916) * C415 - (C5919 + C5918) * C48347 +
            (C5921 + C5920) * C416 + (C5923 + C5922) * C48321) *
               C4603 +
           ((C5726 + C5727) * C414 + (C5728 + C5729) * C48358 -
            (C4606 * C1548 + C48305 * C1551 + C4605 * C1547 + C4601 * C1550) *
                C415 -
            (C4606 * C1554 + C48305 * C1557 + C4605 * C1553 + C4601 * C1556) *
                C48347 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48305 * C5882) *
                C416 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48305 * C5886) *
                C48321) *
               C48336) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C1672 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C1669 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C1673 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C1670 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C1674 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C48321) *
               C4603 +
           ((C4802 + C4803) * C1672 + (C4804 + C4805) * C1669 -
            (C5462 + C5463) * C1673 - (C5464 + C5465) * C1670 +
            (C5912 + C5913) * C1674 + (C5914 + C5915) * C48321) *
               C48336) *
              C48221 * C48000 * C48354 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C1673 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C1669 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C1672) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C1670 -
            (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                C1674 -
            (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                C48321) *
               C4603 +
           ((C5466 + C5467) * C1673 -
            ((C4813 + C4812) * C1669 + (C4811 + C4810) * C1672) +
            (C5468 + C5469) * C1670 -
            (C4606 * C1155 + C48305 * C1164 + C4605 * C1156 + C4601 * C1165) *
                C1674 -
            (C4606 * C1167 + C48305 * C1182 + C4605 * C1168 + C4601 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48341 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C1672 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C1669 -
            (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                C1673 -
            (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                C1670 +
            (C4605 * C422 + C4601 * C435 + C4606 * C424 + C48305 * C441) *
                C1674 +
            (C4605 * C438 + C4601 * C452 + C4606 * C442 + C48305 * C454) *
                C48321) *
               C4603 +
           ((C4818 + C4819) * C1672 + (C4820 + C4821) * C1669 -
            (C5470 + C5471) * C1673 - (C5472 + C5473) * C1670 +
            (C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                C1674 +
            (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C1672 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C1669 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C1673 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C1670 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C1674 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C48321) *
               C4603 +
           ((C4802 + C4803) * C1672 + (C4804 + C4805) * C1669 -
            (C5462 + C5463) * C1673 - (C5464 + C5465) * C1670 +
            (C5912 + C5913) * C1674 + (C5914 + C5915) * C48321) *
               C48336) *
              C48221 * C48357 +
          (((C5463 + C5462) * C1673 -
            ((C4805 + C4804) * C1669 + (C4803 + C4802) * C1672) +
            (C5465 + C5464) * C1670 - (C5913 + C5912) * C1674 -
            (C5915 + C5914) * C48321) *
               C4603 +
           ((C5916 + C5917) * C1673 -
            ((C4806 + C4807) * C1669 + (C4808 + C4809) * C1672) +
            (C5918 + C5919) * C1670 - (C5920 + C5921) * C1674 -
            (C5922 + C5923) * C48321) *
               C48336) *
              C48221 * C48345 +
          (((C4809 + C4808) * C1672 + (C4807 + C4806) * C1669 -
            (C5917 + C5916) * C1673 - (C5919 + C5918) * C1670 +
            (C5921 + C5920) * C1674 + (C5923 + C5922) * C48321) *
               C4603 +
           ((C5726 + C5727) * C1672 + (C5728 + C5729) * C1669 -
            (C6418 + C6419) * C1673 - (C6420 + C6421) * C1670 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48305 * C5882) *
                C1674 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48305 * C5886) *
                C48321) *
               C48336) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
               C1852 +
           (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
               C1847 -
           (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
               C1853 -
           (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
               C1848 +
           (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
               C1854 +
           (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
               C1849 -
           (C4606 * C1858 + C48305 * C1864 + C4605 * C1859 + C4601 * C1865) *
               C1855 -
           (C4606 * C1867 + C48305 * C1876 + C4605 * C1868 + C4601 * C1877) *
               C1850 +
           (C4605 * C1860 + C4601 * C1869 + C4606 * C1861 + C48305 * C1870) *
               C1856 +
           (C4605 * C1872 + C4601 * C1878 + C4606 * C1873 + C48305 * C1879) *
               C1851) *
              C4603 +
          ((C4802 + C4803) * C1852 + (C4804 + C4805) * C1847 -
           (C5462 + C5463) * C1853 - (C5464 + C5465) * C1848 +
           (C5912 + C5913) * C1854 + (C5914 + C5915) * C1849 -
           (C4606 * C2240 + C48305 * C2243 + C4605 * C2239 + C4601 * C2242) *
               C1855 -
           (C4606 * C2246 + C48305 * C2249 + C4605 * C2245 + C4601 * C2248) *
               C1850 +
           (C4605 * C6795 + C4601 * C6797 + C4606 * C6796 + C48305 * C6798) *
               C1856 +
           (C4605 * C6799 + C4601 * C6801 + C4606 * C6800 + C48305 * C6802) *
               C1851) *
              C48336) *
         C48221 * C48000 * C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C666 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C665 + (C4804 + C4805) * C48287 -
             (C5462 + C5463) * C666 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C947 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C5916 + C5917) * C666 -
             ((C4806 + C4807) * C48287 + (C4808 + C4809) * C665) +
             (C5918 + C5919) * C48104) *
                C48336) *
               C48221 * C948 +
           (((C4809 + C4808) * C665 + (C4807 + C4806) * C48287 -
             (C5917 + C5916) * C666 - (C5919 + C5918) * C48104) *
                C4603 +
            ((C5726 + C5727) * C665 + (C5728 + C5729) * C48287 -
             (C4606 * C1548 + C48305 * C1551 + C4605 * C1547 + C4601 * C1550) *
                 C666 -
             (C4606 * C1554 + C48305 * C1557 + C4605 * C1553 + C4601 * C1556) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C48272 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C666 -
             ((C4813 + C4812) * C48287 + (C4811 + C4810) * C665) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C947 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C665 + (C4816 + C4817) * C48287 -
             (C6268 + C6269) * C666 - (C6270 + C6271) * C48104) *
                C48336) *
               C48221 * C948 +
           (((C6269 + C6268) * C666 -
             ((C4817 + C4816) * C48287 + (C4815 + C4814) * C665) +
             (C6271 + C6270) * C48104) *
                C4603 +
            ((C4605 * C1548 + C4601 * C1551 + C4606 * C1549 + C48305 * C1552) *
                 C666 -
             ((C6062 + C6063) * C48287 + (C6064 + C6065) * C665) +
             (C4605 * C1554 + C4601 * C1557 + C4606 * C1555 + C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C665 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48287 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C666 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48104) *
               C4603 +
           ((C4802 + C4803) * C665 + (C4804 + C4805) * C48287 -
            (C4606 * C818 + C48305 * C823 + C4605 * C817 + C4601 * C822) *
                C666 -
            (C4606 * C826 + C48305 * C833 + C4605 * C825 + C4601 * C832) *
                C48104) *
               C48336) *
              C48221 * C48000 * C557 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C666 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48287 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C665) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C48104) *
               C4603 +
           ((C4605 * C818 + C4601 * C823 + C4606 * C819 + C48305 * C824) *
                C666 -
            ((C4813 + C4812) * C48287 + (C4811 + C4810) * C665) +
            (C4605 * C826 + C4601 * C833 + C4606 * C827 + C48305 * C834) *
                C48104) *
               C48336) *
              C48221 * C48000 * C558 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C665 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48287 -
            (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                C666 -
            (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                C48104) *
               C4603 +
           ((C4818 + C4819) * C665 + (C4820 + C4821) * C48287 -
            (C4606 * C820 + C48305 * C828 + C4605 * C819 + C4601 * C824) *
                C666 -
            (C4606 * C829 + C48305 * C835 + C4605 * C827 + C4601 * C834) *
                C48104) *
               C48336) *
              C48221 * C48000 * C559 +
          (((C4605 * C423 + C4601 * C439 + C4606 * C425 + C48305 * C443) *
                C666 -
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48287 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C665) +
            (C4605 * C440 + C4601 * C453 + C4606 * C444 + C48305 * C455) *
                C48104) *
               C4603 +
           ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48305 * C830) *
                C666 -
            ((C5113 + C5112) * C48287 + (C5111 + C5110) * C665) +
            (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48305 * C836) *
                C48104) *
               C48336) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C2133 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C2129 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C2134 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C2130 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C2135 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C2131 -
            (C4606 * C1858 + C48305 * C1864 + C4605 * C1859 + C4601 * C1865) *
                C2136 -
            (C4606 * C1867 + C48305 * C1876 + C4605 * C1868 + C4601 * C1877) *
                C48334) *
               C4603 +
           ((C4802 + C4803) * C2133 + (C4804 + C4805) * C2129 -
            (C5462 + C5463) * C2134 - (C5464 + C5465) * C2130 +
            (C5912 + C5913) * C2135 + (C5914 + C5915) * C2131 -
            (C4606 * C2240 + C48305 * C2243 + C4605 * C2239 + C4601 * C2242) *
                C2136 -
            (C4606 * C2246 + C48305 * C2249 + C4605 * C2245 + C4601 * C2248) *
                C48334) *
               C48336) *
              C48221 * C48000 * C48272 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C2134 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C2129 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C2133) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C2130 -
            (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                C2135 -
            (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                C2131 +
            (C4605 * C1858 + C4601 * C1864 + C4606 * C1857 + C48305 * C1863) *
                C2136 +
            (C4605 * C1867 + C4601 * C1876 + C4606 * C1866 + C48305 * C1875) *
                C48334) *
               C4603 +
           ((C5466 + C5467) * C2134 -
            ((C4813 + C4812) * C2129 + (C4811 + C4810) * C2133) +
            (C5468 + C5469) * C2130 - (C7006 + C7007) * C2135 -
            (C7008 + C7009) * C2131 +
            (C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48305 * C2244) *
                C2136 +
            (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48305 * C2250) *
                C48334) *
               C48336) *
              C48221 * C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C48357 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C48345 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C4605 * C1023 + C4601 * C1032 + C4606 * C1022 + C48305 * C1031) *
                 C116 +
             (C4605 * C1029 + C4601 * C1041 + C4606 * C1028 + C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C258 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C48345 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C48357 -
           (((C4606 * C1027 + C48305 * C1039 + C4605 * C1028 + C4601 * C1040) *
                 C48017 +
             (C4606 * C1021 + C48305 * C1030 + C4605 * C1022 + C4601 * C1031) *
                 C116) *
                C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C48318) *
              C259 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C48357 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C48345 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C4603 +
            ((C4605 * C1021 + C4601 * C1030 + C4606 * C1295 + C48305 * C1296) *
                 C116 +
             (C4605 * C1027 + C4601 * C1039 + C4606 * C1297 + C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C4603 +
           ((C4605 * C263 + C4601 * C276 + C4606 * C262 + C48305 * C275) *
                C116 +
            (C4605 * C273 + C4601 * C293 + C4606 * C272 + C48305 * C292) *
                C48017) *
               C48336) *
              C48221 * C48000 * C108 -
          (((C4606 * C271 + C48305 * C291 + C4605 * C272 + C4601 * C292) *
                C48017 +
            (C4606 * C261 + C48305 * C274 + C4605 * C262 + C4601 * C275) *
                C116) *
               C48336 +
           ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                C48017 +
            (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C4603) *
              C48221 * C48000 * C109 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48017) *
               C4603 +
           ((C4605 * C261 + C4601 * C274 + C4606 * C267 + C48305 * C283) *
                C116 +
            (C4605 * C271 + C4601 * C291 + C4606 * C284 + C48305 * C297) *
                C48017) *
               C48336) *
              C48221 * C48000 * C110 -
          (((C4606 * C287 + C48305 * C299 + C4605 * C284 + C4601 * C297) *
                C48017 +
            (C4606 * C269 + C48305 * C288 + C4605 * C267 + C4601 * C283) *
                C116) *
               C48336 +
           ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                C48017 +
            (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C4603) *
              C48221 * C48000 * C111 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48305 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48305 * C143) *
                C48017) *
               C4603 +
           ((C4605 * C269 + C4601 * C288 + C4606 * C561 + C48305 * C562) *
                C116 +
            (C4605 * C287 + C4601 * C299 + C4606 * C563 + C48305 * C564) *
                C48017) *
               C48336) *
              C48221 * C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C947 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C948 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C4605 * C1023 + C4601 * C1032 + C4606 * C1022 + C48305 * C1031) *
                 C116 +
             (C4605 * C1029 + C4601 * C1041 + C4606 * C1028 + C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48354 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C948 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C947 -
           (((C4606 * C1027 + C48305 * C1039 + C4605 * C1028 + C4601 * C1040) *
                 C48017 +
             (C4606 * C1021 + C48305 * C1030 + C4605 * C1022 + C4601 * C1031) *
                 C116) *
                C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C48318) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C947 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C948 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C4603 +
            ((C4605 * C1021 + C4601 * C1030 + C4606 * C1295 + C48305 * C1296) *
                 C116 +
             (C4605 * C1027 + C4601 * C1039 + C4606 * C1297 + C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C4603 +
           ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
              C48221 * C1015 -
          (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
           ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
              C48221 * C1016 +
          (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
           ((C5726 + C5727) * C116 + (C5728 + C5729) * C48017) * C48336) *
              C48221 * C1017 -
          (((C5730 + C5731) * C48017 + (C5732 + C5733) * C116) * C48336 +
           ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C4603) *
              C48221 * C1018 +
          (((C5733 + C5732) * C116 + (C5731 + C5730) * C48017) * C4603 +
           ((C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48305 * C5704) *
                C116 +
            (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48305 * C5708) *
                C48017) *
               C48336) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C1672 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C1669 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C1673 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C1670 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C1674 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C48321) *
               C4603 +
           ((C4802 + C4803) * C1672 + (C4804 + C4805) * C1669 -
            (C5462 + C5463) * C1673 - (C5464 + C5465) * C1670 +
            (C5912 + C5913) * C1674 + (C5914 + C5915) * C48321) *
               C48336) *
              C48221 * C48000 * C48354 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C1673 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C1669 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C1672) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C1670 -
            (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                C1674 -
            (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                C48321) *
               C4603 +
           ((C5466 + C5467) * C1673 -
            ((C4813 + C4812) * C1669 + (C4811 + C4810) * C1672) +
            (C5468 + C5469) * C1670 -
            (C4606 * C1155 + C48305 * C1164 + C4605 * C1156 + C4601 * C1165) *
                C1674 -
            (C4606 * C1167 + C48305 * C1182 + C4605 * C1168 + C4601 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48341 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C1672 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C1669 -
            (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                C1673 -
            (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                C1670 +
            (C4605 * C422 + C4601 * C435 + C4606 * C424 + C48305 * C441) *
                C1674 +
            (C4605 * C438 + C4601 * C452 + C4606 * C442 + C48305 * C454) *
                C48321) *
               C4603 +
           ((C4818 + C4819) * C1672 + (C4820 + C4821) * C1669 -
            (C5470 + C5471) * C1673 - (C5472 + C5473) * C1670 +
            (C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                C1674 +
            (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C1672 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C1669 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C1673 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C1670 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C1674 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C48321) *
               C4603 +
           ((C4802 + C4803) * C1672 + (C4804 + C4805) * C1669 -
            (C5462 + C5463) * C1673 - (C5464 + C5465) * C1670 +
            (C5912 + C5913) * C1674 + (C5914 + C5915) * C48321) *
               C48336) *
              C48221 * C48357 +
          (((C5463 + C5462) * C1673 -
            ((C4805 + C4804) * C1669 + (C4803 + C4802) * C1672) +
            (C5465 + C5464) * C1670 - (C5913 + C5912) * C1674 -
            (C5915 + C5914) * C48321) *
               C4603 +
           ((C5916 + C5917) * C1673 -
            ((C4806 + C4807) * C1669 + (C4808 + C4809) * C1672) +
            (C5918 + C5919) * C1670 - (C5920 + C5921) * C1674 -
            (C5922 + C5923) * C48321) *
               C48336) *
              C48221 * C48345 +
          (((C4809 + C4808) * C1672 + (C4807 + C4806) * C1669 -
            (C5917 + C5916) * C1673 - (C5919 + C5918) * C1670 +
            (C5921 + C5920) * C1674 + (C5923 + C5922) * C48321) *
               C4603 +
           ((C5726 + C5727) * C1672 + (C5728 + C5729) * C1669 -
            (C6418 + C6419) * C1673 - (C6420 + C6421) * C1670 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48305 * C5882) *
                C1674 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48305 * C5886) *
                C48321) *
               C48336) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C3114 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C3113 + (C4804 + C4805) * C3111 -
             (C5462 + C5463) * C3114 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C5916 + C5917) * C3114 -
             ((C4806 + C4807) * C3111 + (C4808 + C4809) * C3113) +
             (C5918 + C5919) * C48104) *
                C48336) *
               C48221 * C48062) *
              C47978 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C3114 -
             ((C4813 + C4812) * C3111 + (C4811 + C4810) * C3113) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C3113 + (C4816 + C4817) * C3111 -
             (C6268 + C6269) * C3114 - (C6270 + C6271) * C48104) *
                C48336) *
               C48221 * C48062) *
              C47986 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C3113 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C3111 -
             (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                 C3114 -
             (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                 C48104) *
                C4603 +
            ((C4818 + C4819) * C3113 + (C4820 + C4821) * C3111 -
             (C5470 + C5471) * C3114 - (C5472 + C5473) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C5471 + C5470) * C3114 -
             ((C4821 + C4820) * C3111 + (C4819 + C4818) * C3113) +
             (C5473 + C5472) * C48104) *
                C4603 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C3114 -
             ((C4822 + C4823) * C3111 + (C4824 + C4825) * C3113) +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C47032 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48100 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C47024 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48107 +
             (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                 C47038 +
             (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                 C3625) *
                C4603 +
            ((C4802 + C4803) * C47032 + (C4804 + C4805) * C48100 -
             (C5462 + C5463) * C47024 - (C5464 + C5465) * C48107 +
             (C5912 + C5913) * C47038 + (C5914 + C5915) * C3625) *
                C48336) *
               C48221 * C48286 +
           (((C5463 + C5462) * C47024 -
             ((C4805 + C4804) * C48100 + (C4803 + C4802) * C47032) +
             (C5465 + C5464) * C48107 - (C5913 + C5912) * C47038 -
             (C5915 + C5914) * C3625) *
                C4603 +
            ((C5916 + C5917) * C47024 -
             ((C4806 + C4807) * C48100 + (C4808 + C4809) * C47032) +
             (C5918 + C5919) * C48107 - (C5920 + C5921) * C47038 -
             (C5922 + C5923) * C3625) *
                C48336) *
               C48221 * C48062) *
              C2457 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C47024 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48100 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C47032) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48107 -
             (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                 C47038 -
             (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                 C3625) *
                C4603 +
            ((C5466 + C5467) * C47024 -
             ((C4813 + C4812) * C48100 + (C4811 + C4810) * C47032) +
             (C5468 + C5469) * C48107 - (C7006 + C7007) * C47038 -
             (C7008 + C7009) * C3625) *
                C48336) *
               C48221 * C48286 +
           (((C4810 + C4811) * C47032 + (C4812 + C4813) * C48100 -
             (C5467 + C5466) * C47024 - (C5469 + C5468) * C48107 +
             (C7007 + C7006) * C47038 + (C7009 + C7008) * C3625) *
                C4603 +
            ((C4814 + C4815) * C47032 + (C4816 + C4817) * C48100 -
             (C6268 + C6269) * C47024 - (C6270 + C6271) * C48107 +
             (C4605 * C1162 + C4601 * C1177 + C4606 * C1163 + C48305 * C1178) *
                 C47038 +
             (C4605 * C1180 + C4601 * C1189 + C4606 * C1181 + C48305 * C1190) *
                 C3625) *
                C48336) *
               C48221 * C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C3114 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C3113 + (C4804 + C4805) * C3111 -
             (C5462 + C5463) * C3114 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C48357 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C5916 + C5917) * C3114 -
             ((C4806 + C4807) * C3111 + (C4808 + C4809) * C3113) +
             (C5918 + C5919) * C48104) *
                C48336) *
               C48221 * C48345 +
           (((C4809 + C4808) * C3113 + (C4807 + C4806) * C3111 -
             (C5917 + C5916) * C3114 - (C5919 + C5918) * C48104) *
                C4603 +
            ((C5726 + C5727) * C3113 + (C5728 + C5729) * C3111 -
             (C6418 + C6419) * C3114 - (C6420 + C6421) * C48104) *
                C48336) *
               C48221 * C48318) *
              C2457 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C3114 -
             ((C4813 + C4812) * C3111 + (C4811 + C4810) * C3113) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C48357 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C3113 + (C4816 + C4817) * C3111 -
             (C6268 + C6269) * C3114 - (C6270 + C6271) * C48104) *
                C48336) *
               C48221 * C48345 +
           (((C6269 + C6268) * C3114 -
             ((C4817 + C4816) * C3111 + (C4815 + C4814) * C3113) +
             (C6271 + C6270) * C48104) *
                C4603 +
            ((C4605 * C1548 + C4601 * C1551 + C4606 * C1549 + C48305 * C1552) *
                 C3114 -
             ((C6062 + C6063) * C3111 + (C6064 + C6065) * C3113) +
             (C4605 * C1554 + C4601 * C1557 + C4606 * C1555 + C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3113 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C3111 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C3114 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48104) *
               C4603 +
           ((C4802 + C4803) * C3113 + (C4804 + C4805) * C3111 -
            (C5462 + C5463) * C3114 - (C5464 + C5465) * C48104) *
               C48336) *
              C48221 * C48000 * C48363 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C3114 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C3111 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C3113) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C48104) *
               C4603 +
           ((C5466 + C5467) * C3114 -
            ((C4813 + C4812) * C3111 + (C4811 + C4810) * C3113) +
            (C5468 + C5469) * C48104) *
               C48336) *
              C48221 * C48000 * C48356 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C3113 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C3111 -
            (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                C3114 -
            (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                C48104) *
               C4603 +
           ((C4818 + C4819) * C3113 + (C4820 + C4821) * C3111 -
            (C5470 + C5471) * C3114 - (C5472 + C5473) * C48104) *
               C48336) *
              C48221 * C48000 * C48343 +
          (((C4605 * C423 + C4601 * C439 + C4606 * C425 + C48305 * C443) *
                C3114 -
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C3111 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C3113) +
            (C4605 * C440 + C4601 * C453 + C4606 * C444 + C48305 * C455) *
                C48104) *
               C4603 +
           ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48305 * C830) *
                C3114 -
            ((C5113 + C5112) * C3111 + (C5111 + C5110) * C3113) +
            (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48305 * C836) *
                C48104) *
               C48336) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3363 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48365 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C3364 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48362 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C3365 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C48353 -
            (C4606 * C1858 + C48305 * C1864 + C4605 * C1859 + C4601 * C1865) *
                C3366 -
            (C4606 * C1867 + C48305 * C1876 + C4605 * C1868 + C4601 * C1877) *
                C48334) *
               C4603 +
           ((C4802 + C4803) * C3363 + (C4804 + C4805) * C48365 -
            (C5462 + C5463) * C3364 - (C5464 + C5465) * C48362 +
            (C5912 + C5913) * C3365 + (C5914 + C5915) * C48353 -
            (C7286 + C7287) * C3366 - (C7288 + C7289) * C48334) *
               C48336) *
              C48221 * C48000 * C2457 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C3364 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48365 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C3363) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C48362 -
            (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                C3365 -
            (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                C48353 +
            (C4605 * C1858 + C4601 * C1864 + C4606 * C1857 + C48305 * C1863) *
                C3366 +
            (C4605 * C1867 + C4601 * C1876 + C4606 * C1866 + C48305 * C1875) *
                C48334) *
               C4603 +
           ((C5466 + C5467) * C3364 -
            ((C4813 + C4812) * C48365 + (C4811 + C4810) * C3363) +
            (C5468 + C5469) * C48362 - (C7006 + C7007) * C3365 -
            (C7008 + C7009) * C48353 +
            (C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48305 * C2244) *
                C3366 +
            (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48305 * C2250) *
                C48334) *
               C48336) *
              C48221 * C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C47032 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48100 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C47024 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48107 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C47038 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C3625) *
               C4603 +
           ((C4802 + C4803) * C47032 + (C4804 + C4805) * C48100 -
            (C5462 + C5463) * C47024 - (C5464 + C5465) * C48107 +
            (C5912 + C5913) * C47038 + (C5914 + C5915) * C3625) *
               C48336) *
              C48221 * C48000 * C47978 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C47024 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48100 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C47032) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C48107 -
            (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                C47038 -
            (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                C3625) *
               C4603 +
           ((C5466 + C5467) * C47024 -
            ((C4813 + C4812) * C48100 + (C4811 + C4810) * C47032) +
            (C5468 + C5469) * C48107 - (C7006 + C7007) * C47038 -
            (C7008 + C7009) * C3625) *
               C48336) *
              C48221 * C48000 * C47986 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C47032 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48100 -
            (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                C47024 -
            (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                C48107 +
            (C4605 * C422 + C4601 * C435 + C4606 * C424 + C48305 * C441) *
                C47038 +
            (C4605 * C438 + C4601 * C452 + C4606 * C442 + C48305 * C454) *
                C3625) *
               C4603 +
           ((C4818 + C4819) * C47032 + (C4820 + C4821) * C48100 -
            (C5470 + C5471) * C47024 - (C5472 + C5473) * C48107 +
            (C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                C47038 +
            (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                C3625) *
               C48336) *
              C48221 * C48000 * C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3113 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C3111 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C3114 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48104) *
               C4603 +
           ((C4802 + C4803) * C3113 + (C4804 + C4805) * C3111 -
            (C5462 + C5463) * C3114 - (C5464 + C5465) * C48104) *
               C48336) *
              C48221 * C48000 * C48363 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C3114 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C3111 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C3113) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C48104) *
               C4603 +
           ((C5466 + C5467) * C3114 -
            ((C4813 + C4812) * C3111 + (C4811 + C4810) * C3113) +
            (C5468 + C5469) * C48104) *
               C48336) *
              C48221 * C48000 * C48356 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C3113 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C3111 -
            (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                C3114 -
            (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                C48104) *
               C4603 +
           ((C4818 + C4819) * C3113 + (C4820 + C4821) * C3111 -
            (C5470 + C5471) * C3114 - (C5472 + C5473) * C48104) *
               C48336) *
              C48221 * C48000 * C48343 +
          (((C4605 * C423 + C4601 * C439 + C4606 * C425 + C48305 * C443) *
                C3114 -
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C3111 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C3113) +
            (C4605 * C440 + C4601 * C453 + C4606 * C444 + C48305 * C455) *
                C48104) *
               C4603 +
           ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48305 * C830) *
                C3114 -
            ((C5113 + C5112) * C3111 + (C5111 + C5110) * C3113) +
            (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48305 * C836) *
                C48104) *
               C48336) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C3114 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C3113 + (C4804 + C4805) * C3111 -
             (C5462 + C5463) * C3114 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C48357 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C5916 + C5917) * C3114 -
             ((C4806 + C4807) * C3111 + (C4808 + C4809) * C3113) +
             (C5918 + C5919) * C48104) *
                C48336) *
               C48221 * C48345 +
           (((C4809 + C4808) * C3113 + (C4807 + C4806) * C3111 -
             (C5917 + C5916) * C3114 - (C5919 + C5918) * C48104) *
                C4603 +
            ((C5726 + C5727) * C3113 + (C5728 + C5729) * C3111 -
             (C6418 + C6419) * C3114 - (C6420 + C6421) * C48104) *
                C48336) *
               C48221 * C48318) *
              C2457 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C3114 -
             ((C4813 + C4812) * C3111 + (C4811 + C4810) * C3113) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C48357 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C3113 + (C4816 + C4817) * C3111 -
             (C6268 + C6269) * C3114 - (C6270 + C6271) * C48104) *
                C48336) *
               C48221 * C48345 +
           (((C6269 + C6268) * C3114 -
             ((C4817 + C4816) * C3111 + (C4815 + C4814) * C3113) +
             (C6271 + C6270) * C48104) *
                C4603 +
            ((C4605 * C1548 + C4601 * C1551 + C4606 * C1549 + C48305 * C1552) *
                 C3114 -
             ((C6062 + C6063) * C3111 + (C6064 + C6065) * C3113) +
             (C4605 * C1554 + C4601 * C1557 + C4606 * C1555 + C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C48286 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C48062) *
              C557 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C48062 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C48286) *
              C558 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C48286 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C48062) *
              C559 +
          ((((C5110 + C5111) * C116 + (C5112 + C5113) * C48017) * C4603 +
            ((C4605 * C268 + C4601 * C286 + C4606 * C270 + C48305 * C289) *
                 C116 +
             (C4605 * C285 + C4601 * C298 + C4606 * C290 + C48305 * C300) *
                 C48017) *
                C48336) *
               C48221 * C48062 -
           (((C5113 + C5112) * C48017 + (C5111 + C5110) * C116) * C48336 +
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48017 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C4603) *
               C48221 * C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C1289 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C1290 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C5726 + C5727) * C116 + (C5728 + C5729) * C48017) * C48336) *
               C48221 * C1291 -
           (((C5730 + C5731) * C48017 + (C5732 + C5733) * C116) * C48336 +
            ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C4603) *
               C48221 * C48328) *
              C48272 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C1290 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C1289 -
           (((C6062 + C6063) * C48017 + (C6064 + C6065) * C116) * C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C1291 +
           (((C6065 + C6064) * C116 + (C6063 + C6062) * C48017) * C4603 +
            ((C4605 * C1025 + C4601 * C1034 + C4606 * C1026 + C48305 * C1035) *
                 C116 +
             (C4605 * C1037 + C4601 * C1043 + C4606 * C1038 + C48305 * C1044) *
                 C48017) *
                C48336) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C666 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C665 + (C4804 + C4805) * C48287 -
             (C5462 + C5463) * C666 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C4605 * C1160 + C4601 * C1172 + C4606 * C1159 + C48305 * C1171) *
                 C666 -
             ((C4806 + C4807) * C48287 + (C4808 + C4809) * C665) +
             (C4605 * C1175 + C4601 * C1187 + C4606 * C1174 + C48305 * C1186) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C258 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C666 -
             ((C4813 + C4812) * C48287 + (C4811 + C4810) * C665) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C665 + (C4816 + C4817) * C48287 -
             (C4606 * C1158 + C48305 * C1170 + C4605 * C1159 + C4601 * C1171) *
                 C666 -
             (C4606 * C1173 + C48305 * C1185 + C4605 * C1174 + C4601 * C1186) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C259 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C665 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48287 -
             (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                 C666 -
             (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                 C48104) *
                C4603 +
            ((C4818 + C4819) * C665 + (C4820 + C4821) * C48287 -
             (C5470 + C5471) * C666 - (C5472 + C5473) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C5471 + C5470) * C666 -
             ((C4821 + C4820) * C48287 + (C4819 + C4818) * C665) +
             (C5473 + C5472) * C48104) *
                C4603 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C666 -
             ((C4822 + C4823) * C48287 + (C4824 + C4825) * C665) +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C665 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48287 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C666 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48104) *
               C4603 +
           ((C4802 + C4803) * C665 + (C4804 + C4805) * C48287 -
            (C5462 + C5463) * C666 - (C5464 + C5465) * C48104) *
               C48336) *
              C48221 * C1289 +
          (((C5463 + C5462) * C666 -
            ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
            (C5465 + C5464) * C48104) *
               C4603 +
           ((C5916 + C5917) * C666 -
            ((C4806 + C4807) * C48287 + (C4808 + C4809) * C665) +
            (C5918 + C5919) * C48104) *
               C48336) *
              C48221 * C1290 +
          (((C4809 + C4808) * C665 + (C4807 + C4806) * C48287 -
            (C5917 + C5916) * C666 - (C5919 + C5918) * C48104) *
               C4603 +
           ((C5726 + C5727) * C665 + (C5728 + C5729) * C48287 -
            (C6418 + C6419) * C666 - (C6420 + C6421) * C48104) *
               C48336) *
              C48221 * C1291 +
          (((C6419 + C6418) * C666 -
            ((C5729 + C5728) * C48287 + (C5727 + C5726) * C665) +
            (C6421 + C6420) * C48104) *
               C4603 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48305 * C6404) *
                C666 -
            ((C5730 + C5731) * C48287 + (C5732 + C5733) * C665) +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48305 * C6408) *
                C48104) *
               C48336) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C48357 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C48345 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C4605 * C1023 + C4601 * C1032 + C4606 * C1022 + C48305 * C1031) *
                 C116 +
             (C4605 * C1029 + C4601 * C1041 + C4606 * C1028 + C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C258 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C48345 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C48357 -
           (((C4606 * C1027 + C48305 * C1039 + C4605 * C1028 + C4601 * C1040) *
                 C48017 +
             (C4606 * C1021 + C48305 * C1030 + C4605 * C1022 + C4601 * C1031) *
                 C116) *
                C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C48318) *
              C259 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C48357 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C48345 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C4603 +
            ((C4605 * C1021 + C4601 * C1030 + C4606 * C1295 + C48305 * C1296) *
                 C116 +
             (C4605 * C1027 + C4601 * C1039 + C4606 * C1297 + C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C4603 +
           ((C4605 * C263 + C4601 * C276 + C4606 * C262 + C48305 * C275) *
                C116 +
            (C4605 * C273 + C4601 * C293 + C4606 * C272 + C48305 * C292) *
                C48017) *
               C48336) *
              C48221 * C48000 * C108 -
          (((C4606 * C271 + C48305 * C291 + C4605 * C272 + C4601 * C292) *
                C48017 +
            (C4606 * C261 + C48305 * C274 + C4605 * C262 + C4601 * C275) *
                C116) *
               C48336 +
           ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                C48017 +
            (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C4603) *
              C48221 * C48000 * C109 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48017) *
               C4603 +
           ((C4605 * C261 + C4601 * C274 + C4606 * C267 + C48305 * C283) *
                C116 +
            (C4605 * C271 + C4601 * C291 + C4606 * C284 + C48305 * C297) *
                C48017) *
               C48336) *
              C48221 * C48000 * C110 -
          (((C4606 * C287 + C48305 * C299 + C4605 * C284 + C4601 * C297) *
                C48017 +
            (C4606 * C269 + C48305 * C288 + C4605 * C267 + C4601 * C283) *
                C116) *
               C48336 +
           ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                C48017 +
            (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C4603) *
              C48221 * C48000 * C111 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48305 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48305 * C143) *
                C48017) *
               C4603 +
           ((C4605 * C269 + C4601 * C288 + C4606 * C561 + C48305 * C562) *
                C116 +
            (C4605 * C287 + C4601 * C299 + C4606 * C563 + C48305 * C564) *
                C48017) *
               C48336) *
              C48221 * C48000 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C414 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48358 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C415 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48347 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C416 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C48321) *
               C4603 +
           ((C4802 + C4803) * C414 + (C4804 + C4805) * C48358 -
            (C4606 * C818 + C48305 * C823 + C4605 * C817 + C4601 * C822) *
                C415 -
            (C4606 * C826 + C48305 * C833 + C4605 * C825 + C4601 * C832) *
                C48347 +
            (C4605 * C1157 + C4601 * C1166 + C4606 * C1156 + C48305 * C1165) *
                C416 +
            (C4605 * C1169 + C4601 * C1184 + C4606 * C1168 + C48305 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C258 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C415 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48358 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C414) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C48347 -
            (C4606 * C422 + C48305 * C435 + C4605 * C421 + C4601 * C434) *
                C416 -
            (C4606 * C438 + C48305 * C452 + C4605 * C437 + C4601 * C451) *
                C48321) *
               C4603 +
           ((C4605 * C818 + C4601 * C823 + C4606 * C819 + C48305 * C824) *
                C415 -
            ((C4813 + C4812) * C48358 + (C4811 + C4810) * C414) +
            (C4605 * C826 + C4601 * C833 + C4606 * C827 + C48305 * C834) *
                C48347 -
            (C4606 * C1155 + C48305 * C1164 + C4605 * C1156 + C4601 * C1165) *
                C416 -
            (C4606 * C1167 + C48305 * C1182 + C4605 * C1168 + C4601 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C259 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C414 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48358 -
            (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                C415 -
            (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                C48347 +
            (C4605 * C422 + C4601 * C435 + C4606 * C424 + C48305 * C441) *
                C416 +
            (C4605 * C438 + C4601 * C452 + C4606 * C442 + C48305 * C454) *
                C48321) *
               C4603 +
           ((C4818 + C4819) * C414 + (C4820 + C4821) * C48358 -
            (C4606 * C820 + C48305 * C828 + C4605 * C819 + C4601 * C824) *
                C415 -
            (C4606 * C829 + C48305 * C835 + C4605 * C827 + C4601 * C834) *
                C48347 +
            (C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                C416 +
            (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C947 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C948 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C4605 * C1023 + C4601 * C1032 + C4606 * C1022 + C48305 * C1031) *
                 C116 +
             (C4605 * C1029 + C4601 * C1041 + C4606 * C1028 + C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48354 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C948 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C947 -
           (((C4606 * C1027 + C48305 * C1039 + C4605 * C1028 + C4601 * C1040) *
                 C48017 +
             (C4606 * C1021 + C48305 * C1030 + C4605 * C1022 + C4601 * C1031) *
                 C116) *
                C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C48318) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C947 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C948 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C4603 +
            ((C4605 * C1021 + C4601 * C1030 + C4606 * C1295 + C48305 * C1296) *
                 C116 +
             (C4605 * C1027 + C4601 * C1039 + C4606 * C1297 + C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C4603 +
           ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
              C48221 * C1015 -
          (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
           ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
              C48221 * C1016 +
          (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
           ((C5726 + C5727) * C116 + (C5728 + C5729) * C48017) * C48336) *
              C48221 * C1017 -
          (((C5730 + C5731) * C48017 + (C5732 + C5733) * C116) * C48336 +
           ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C4603) *
              C48221 * C1018 +
          (((C5733 + C5732) * C116 + (C5731 + C5730) * C48017) * C4603 +
           ((C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48305 * C5704) *
                C116 +
            (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48305 * C5708) *
                C48017) *
               C48336) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C414 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48358 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C415 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48347 +
            (C4605 * C420 + C4601 * C433 + C4606 * C421 + C48305 * C434) *
                C416 +
            (C4605 * C436 + C4601 * C450 + C4606 * C437 + C48305 * C451) *
                C48321) *
               C4603 +
           ((C4802 + C4803) * C414 + (C4804 + C4805) * C48358 -
            (C5462 + C5463) * C415 - (C5464 + C5465) * C48347 +
            (C5912 + C5913) * C416 + (C5914 + C5915) * C48321) *
               C48336) *
              C48221 * C947 +
          (((C5463 + C5462) * C415 -
            ((C4805 + C4804) * C48358 + (C4803 + C4802) * C414) +
            (C5465 + C5464) * C48347 - (C5913 + C5912) * C416 -
            (C5915 + C5914) * C48321) *
               C4603 +
           ((C5916 + C5917) * C415 -
            ((C4806 + C4807) * C48358 + (C4808 + C4809) * C414) +
            (C5918 + C5919) * C48347 - (C5920 + C5921) * C416 -
            (C5922 + C5923) * C48321) *
               C48336) *
              C48221 * C948 +
          (((C4809 + C4808) * C414 + (C4807 + C4806) * C48358 -
            (C5917 + C5916) * C415 - (C5919 + C5918) * C48347 +
            (C5921 + C5920) * C416 + (C5923 + C5922) * C48321) *
               C4603 +
           ((C5726 + C5727) * C414 + (C5728 + C5729) * C48358 -
            (C4606 * C1548 + C48305 * C1551 + C4605 * C1547 + C4601 * C1550) *
                C415 -
            (C4606 * C1554 + C48305 * C1557 + C4605 * C1553 + C4601 * C1556) *
                C48347 +
            (C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48305 * C5882) *
                C416 +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48305 * C5886) *
                C48321) *
               C48336) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C665 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48287 -
            (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                C666 -
            (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                C48104) *
               C4603 +
           ((C4802 + C4803) * C665 + (C4804 + C4805) * C48287 -
            (C4606 * C818 + C48305 * C823 + C4605 * C817 + C4601 * C822) *
                C666 -
            (C4606 * C826 + C48305 * C833 + C4605 * C825 + C4601 * C832) *
                C48104) *
               C48336) *
              C48221 * C48000 * C557 +
          (((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                C666 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48287 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C665) +
            (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                C48104) *
               C4603 +
           ((C4605 * C818 + C4601 * C823 + C4606 * C819 + C48305 * C824) *
                C666 -
            ((C4813 + C4812) * C48287 + (C4811 + C4810) * C665) +
            (C4605 * C826 + C4601 * C833 + C4606 * C827 + C48305 * C834) *
                C48104) *
               C48336) *
              C48221 * C48000 * C558 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C665 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48287 -
            (C4606 * C423 + C48305 * C439 + C4605 * C417 + C4601 * C427) *
                C666 -
            (C4606 * C440 + C48305 * C453 + C4605 * C430 + C4601 * C447) *
                C48104) *
               C4603 +
           ((C4818 + C4819) * C665 + (C4820 + C4821) * C48287 -
            (C4606 * C820 + C48305 * C828 + C4605 * C819 + C4601 * C824) *
                C666 -
            (C4606 * C829 + C48305 * C835 + C4605 * C827 + C4601 * C834) *
                C48104) *
               C48336) *
              C48221 * C48000 * C559 +
          (((C4605 * C423 + C4601 * C439 + C4606 * C425 + C48305 * C443) *
                C666 -
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48287 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C665) +
            (C4605 * C440 + C4601 * C453 + C4606 * C444 + C48305 * C455) *
                C48104) *
               C4603 +
           ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48305 * C830) *
                C666 -
            ((C5113 + C5112) * C48287 + (C5111 + C5110) * C665) +
            (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48305 * C836) *
                C48104) *
               C48336) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C4606 * C418 + C48305 * C428 + C4605 * C419 + C4601 * C429) *
                 C666 -
             (C4606 * C431 + C48305 * C448 + C4605 * C432 + C4601 * C449) *
                 C48104) *
                C4603 +
            ((C4802 + C4803) * C665 + (C4804 + C4805) * C48287 -
             (C5462 + C5463) * C666 - (C5464 + C5465) * C48104) *
                C48336) *
               C48221 * C947 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C4603 +
            ((C5916 + C5917) * C666 -
             ((C4806 + C4807) * C48287 + (C4808 + C4809) * C665) +
             (C5918 + C5919) * C48104) *
                C48336) *
               C48221 * C948 +
           (((C4809 + C4808) * C665 + (C4807 + C4806) * C48287 -
             (C5917 + C5916) * C666 - (C5919 + C5918) * C48104) *
                C4603 +
            ((C5726 + C5727) * C665 + (C5728 + C5729) * C48287 -
             (C4606 * C1548 + C48305 * C1551 + C4605 * C1547 + C4601 * C1550) *
                 C666 -
             (C4606 * C1554 + C48305 * C1557 + C4605 * C1553 + C4601 * C1556) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C48272 +
          ((((C4605 * C418 + C4601 * C428 + C4606 * C417 + C48305 * C427) *
                 C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C4605 * C431 + C4601 * C448 + C4606 * C430 + C48305 * C447) *
                 C48104) *
                C4603 +
            ((C5466 + C5467) * C666 -
             ((C4813 + C4812) * C48287 + (C4811 + C4810) * C665) +
             (C5468 + C5469) * C48104) *
                C48336) *
               C48221 * C947 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C4603 +
            ((C4814 + C4815) * C665 + (C4816 + C4817) * C48287 -
             (C6268 + C6269) * C666 - (C6270 + C6271) * C48104) *
                C48336) *
               C48221 * C948 +
           (((C6269 + C6268) * C666 -
             ((C4817 + C4816) * C48287 + (C4815 + C4814) * C665) +
             (C6271 + C6270) * C48104) *
                C4603 +
            ((C4605 * C1548 + C4601 * C1551 + C4606 * C1549 + C48305 * C1552) *
                 C666 -
             ((C6062 + C6063) * C48287 + (C6064 + C6065) * C665) +
             (C4605 * C1554 + C4601 * C1557 + C4606 * C1555 + C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C4603 +
           ((C4605 * C263 + C4601 * C276 + C4606 * C262 + C48305 * C275) *
                C116 +
            (C4605 * C273 + C4601 * C293 + C4606 * C272 + C48305 * C292) *
                C48017) *
               C48336) *
              C48221 * C48000 * C108 -
          (((C4606 * C271 + C48305 * C291 + C4605 * C272 + C4601 * C292) *
                C48017 +
            (C4606 * C261 + C48305 * C274 + C4605 * C262 + C4601 * C275) *
                C116) *
               C48336 +
           ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                C48017 +
            (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C4603) *
              C48221 * C48000 * C109 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48017) *
               C4603 +
           ((C4605 * C261 + C4601 * C274 + C4606 * C267 + C48305 * C283) *
                C116 +
            (C4605 * C271 + C4601 * C291 + C4606 * C284 + C48305 * C297) *
                C48017) *
               C48336) *
              C48221 * C48000 * C110 -
          (((C4606 * C287 + C48305 * C299 + C4605 * C284 + C4601 * C297) *
                C48017 +
            (C4606 * C269 + C48305 * C288 + C4605 * C267 + C4601 * C283) *
                C116) *
               C48336 +
           ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                C48017 +
            (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C4603) *
              C48221 * C48000 * C111 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48305 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48305 * C143) *
                C48017) *
               C4603 +
           ((C4605 * C269 + C4601 * C288 + C4606 * C561 + C48305 * C562) *
                C116 +
            (C4605 * C287 + C4601 * C299 + C4606 * C563 + C48305 * C564) *
                C48017) *
               C48336) *
              C48221 * C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C48357 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C48345 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C4605 * C1023 + C4601 * C1032 + C4606 * C1022 + C48305 * C1031) *
                 C116 +
             (C4605 * C1029 + C4601 * C1041 + C4606 * C1028 + C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C258 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C48345 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C48357 -
           (((C4606 * C1027 + C48305 * C1039 + C4605 * C1028 + C4601 * C1040) *
                 C48017 +
             (C4606 * C1021 + C48305 * C1030 + C4605 * C1022 + C4601 * C1031) *
                 C116) *
                C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C48318) *
              C259 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C48357 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C48345 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C4603 +
            ((C4605 * C1021 + C4601 * C1030 + C4606 * C1295 + C48305 * C1296) *
                 C116 +
             (C4605 * C1027 + C4601 * C1039 + C4606 * C1297 + C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C4603 +
            ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
               C48221 * C947 -
           (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
               C48221 * C948 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
            ((C4605 * C1023 + C4601 * C1032 + C4606 * C1022 + C48305 * C1031) *
                 C116 +
             (C4605 * C1029 + C4601 * C1041 + C4606 * C1028 + C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48354 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C4603 +
            ((C4814 + C4815) * C116 + (C4816 + C4817) * C48017) * C48336) *
               C48221 * C948 -
           (((C4813 + C4812) * C48017 + (C4811 + C4810) * C116) * C48336 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C4603) *
               C48221 * C947 -
           (((C4606 * C1027 + C48305 * C1039 + C4605 * C1028 + C4601 * C1040) *
                 C48017 +
             (C4606 * C1021 + C48305 * C1030 + C4605 * C1022 + C4601 * C1031) *
                 C116) *
                C48336 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C4603) *
               C48221 * C48318) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C4603 +
            ((C4818 + C4819) * C116 + (C4820 + C4821) * C48017) * C48336) *
               C48221 * C947 -
           (((C4822 + C4823) * C48017 + (C4824 + C4825) * C116) * C48336 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C4603) *
               C48221 * C948 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C4603 +
            ((C4605 * C1021 + C4601 * C1030 + C4606 * C1295 + C48305 * C1296) *
                 C116 +
             (C4605 * C1027 + C4601 * C1039 + C4606 * C1297 + C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C4603 +
           ((C4802 + C4803) * C116 + (C4804 + C4805) * C48017) * C48336) *
              C48221 * C1015 -
          (((C4806 + C4807) * C48017 + (C4808 + C4809) * C116) * C48336 +
           ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C4603) *
              C48221 * C1016 +
          (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C4603 +
           ((C5726 + C5727) * C116 + (C5728 + C5729) * C48017) * C48336) *
              C48221 * C1017 -
          (((C5730 + C5731) * C48017 + (C5732 + C5733) * C116) * C48336 +
           ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C4603) *
              C48221 * C1018 +
          (((C5733 + C5732) * C116 + (C5731 + C5730) * C48017) * C4603 +
           ((C4605 * C5701 + C4601 * C5703 + C4606 * C5702 + C48305 * C5704) *
                C116 +
            (C4605 * C5705 + C4601 * C5707 + C4606 * C5706 + C48305 * C5708) *
                C48017) *
               C48336) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C48058 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C48065 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C2717) *
              C47978 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C48065 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C48058 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C2717) *
              C47986 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C10695 + C10694) * C116 + (C10697 + C10696) * C48017) * C48206 *
                C48338) *
               C48058 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C48065 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C116 +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C2717) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C10678 + C10679) * C666 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C665 + (C10681 + C10680) * C48287 -
             (C10683 + C10682) * C666 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C48058 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C666 -
             ((C5464 + C5465) * C48287 + (C5462 + C5463) * C665) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C48065 +
           (((C4809 + C4808) * C665 + (C4807 + C4806) * C48287 -
             (C5917 + C5916) * C666 - (C5919 + C5918) * C48104) *
                C48206 * C10335 +
            ((C5916 + C5917) * C665 + (C5918 + C5919) * C48287 -
             (C5920 + C5921) * C666 - (C5922 + C5923) * C48104) *
                C48206 * C48338) *
               C2717) *
              C2457 +
          ((((C10686 + C10687) * C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C666 -
             ((C10689 + C10688) * C48287 + (C10687 + C10686) * C665) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C48058 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C665 + (C5468 + C5469) * C48287 -
             (C7006 + C7007) * C666 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C48065 +
           (((C6269 + C6268) * C666 -
             ((C4817 + C4816) * C48287 + (C4815 + C4814) * C665) +
             (C6271 + C6270) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1162 + C4601 * C1177 + C4606 * C1163 + C48305 * C1178) *
                 C666 -
             ((C6270 + C6271) * C48287 + (C6268 + C6269) * C665) +
             (C4605 * C1180 + C4601 * C1189 + C4606 * C1181 + C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C48364 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C48360 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C48350 -
           (((C6420 + C6421) * C48017 + (C6418 + C6419) * C116) * C48206 *
                C48338 +
            ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C48206 *
                C10335) *
               C48328) *
              C2457 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C48360 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C48364 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C48350 +
           (((C6065 + C6064) * C116 + (C6063 + C6062) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1548 + C4601 * C1551 + C4606 * C1549 + C48305 * C1552) *
                 C116 +
             (C4605 * C1554 + C4601 * C1557 + C4606 * C1555 + C48305 * C1558) *
                 C48017) *
                C48206 * C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C2349 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C48062) *
              C48363 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C48062 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C2349) *
              C48356 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C10695 + C10694) * C116 + (C10697 + C10696) * C48017) * C48206 *
                C48338) *
               C2349 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C48062) *
              C48343 +
          ((((C5110 + C5111) * C116 + (C5112 + C5113) * C48017) * C48206 *
                C10335 +
            ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48305 * C830) *
                 C116 +
             (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48305 * C836) *
                 C48017) *
                C48206 * C48338) *
               C48062 -
           (((C10973 + C10972) * C48017 + (C10971 + C10970) * C116) * C48206 *
                C48338 +
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48017 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C48206 * C10335) *
               C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C414 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48358 -
             (C10678 + C10679) * C415 - (C10680 + C10681) * C48347 +
             (C10682 + C10683) * C416 + (C10684 + C10685) * C48321) *
                C48206 * C10335 +
            ((C10679 + C10678) * C414 + (C10681 + C10680) * C48358 -
             (C10683 + C10682) * C415 - (C10685 + C10684) * C48347 +
             (C12395 + C12394) * C416 + (C12397 + C12396) * C48321) *
                C48206 * C48338) *
               C2349 +
           (((C5463 + C5462) * C415 -
             ((C4805 + C4804) * C48358 + (C4803 + C4802) * C414) +
             (C5465 + C5464) * C48347 - (C5913 + C5912) * C416 -
             (C5915 + C5914) * C48321) *
                C48206 * C10335 +
            ((C5912 + C5913) * C415 -
             ((C5464 + C5465) * C48358 + (C5462 + C5463) * C414) +
             (C5914 + C5915) * C48347 - (C7286 + C7287) * C416 -
             (C7288 + C7289) * C48321) *
                C48206 * C48338) *
               C48062) *
              C2457 +
          ((((C10686 + C10687) * C415 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48358 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C414) +
             (C10688 + C10689) * C48347 - (C10690 + C10691) * C416 -
             (C10692 + C10693) * C48321) *
                C48206 * C10335 +
            ((C10691 + C10690) * C415 -
             ((C10689 + C10688) * C48358 + (C10687 + C10686) * C414) +
             (C10693 + C10692) * C48347 - (C12735 + C12734) * C416 -
             (C12737 + C12736) * C48321) *
                C48206 * C48338) *
               C2349 +
           (((C4810 + C4811) * C414 + (C4812 + C4813) * C48358 -
             (C5467 + C5466) * C415 - (C5469 + C5468) * C48347 +
             (C7007 + C7006) * C416 + (C7009 + C7008) * C48321) *
                C48206 * C10335 +
            ((C5466 + C5467) * C414 + (C5468 + C5469) * C48358 -
             (C7006 + C7007) * C415 - (C7008 + C7009) * C48347 +
             (C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48305 * C2244) *
                 C416 +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48305 * C2250) *
                 C48321) *
                C48206 * C48338) *
               C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C10678 + C10679) * C666 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C665 + (C10681 + C10680) * C48287 -
             (C10683 + C10682) * C666 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C666 -
             ((C5464 + C5465) * C48287 + (C5462 + C5463) * C665) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C48062) *
              C47978 +
          ((((C10686 + C10687) * C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C666 -
             ((C10689 + C10688) * C48287 + (C10687 + C10686) * C665) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C665 + (C5468 + C5469) * C48287 -
             (C7006 + C7007) * C666 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C48062) *
              C47986 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C665 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48287 -
             (C10694 + C10695) * C666 - (C10696 + C10697) * C48104) *
                C48206 * C10335 +
            ((C10695 + C10694) * C665 + (C10697 + C10696) * C48287 -
             (C10699 + C10698) * C666 - (C10701 + C10700) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C5471 + C5470) * C666 -
             ((C4821 + C4820) * C48287 + (C4819 + C4818) * C665) +
             (C5473 + C5472) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                 C666 -
             ((C5472 + C5473) * C48287 + (C5470 + C5471) * C665) +
             (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C2349 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C48062) *
              C48363 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C48062 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C2349) *
              C48356 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C10695 + C10694) * C116 + (C10697 + C10696) * C48017) * C48206 *
                C48338) *
               C2349 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C48062) *
              C48343 +
          ((((C5110 + C5111) * C116 + (C5112 + C5113) * C48017) * C48206 *
                C10335 +
            ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48305 * C830) *
                 C116 +
             (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48305 * C836) *
                 C48017) *
                C48206 * C48338) *
               C48062 -
           (((C10973 + C10972) * C48017 + (C10971 + C10970) * C116) * C48206 *
                C48338 +
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48017 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C48206 * C10335) *
               C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C48364 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C48360 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C48350 -
           (((C6420 + C6421) * C48017 + (C6418 + C6419) * C116) * C48206 *
                C48338 +
            ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C48206 *
                C10335) *
               C48328) *
              C2457 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C48360 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C48364 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C48350 +
           (((C6065 + C6064) * C116 + (C6063 + C6062) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1548 + C4601 * C1551 + C4606 * C1549 + C48305 * C1552) *
                 C116 +
             (C4605 * C1554 + C4601 * C1557 + C4606 * C1555 + C48305 * C1558) *
                 C48017) *
                C48206 * C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C10678 + C10679) * C3114 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C3113 + (C10681 + C10680) * C3111 -
             (C10683 + C10682) * C3114 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C48058 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C3114 -
             ((C5464 + C5465) * C3111 + (C5462 + C5463) * C3113) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C48065 +
           (((C4809 + C4808) * C3113 + (C4807 + C4806) * C3111 -
             (C5917 + C5916) * C3114 - (C5919 + C5918) * C48104) *
                C48206 * C10335 +
            ((C5916 + C5917) * C3113 + (C5918 + C5919) * C3111 -
             (C5920 + C5921) * C3114 - (C5922 + C5923) * C48104) *
                C48206 * C48338) *
               C2717) *
              C48272 +
          ((((C10686 + C10687) * C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C3114 -
             ((C10689 + C10688) * C3111 + (C10687 + C10686) * C3113) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C48058 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C3113 + (C5468 + C5469) * C3111 -
             (C7006 + C7007) * C3114 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C48065 +
           (((C6269 + C6268) * C3114 -
             ((C4817 + C4816) * C3111 + (C4815 + C4814) * C3113) +
             (C6271 + C6270) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1162 + C4601 * C1177 + C4606 * C1163 + C48305 * C1178) *
                 C3114 -
             ((C6270 + C6271) * C3111 + (C6268 + C6269) * C3113) +
             (C4605 * C1180 + C4601 * C1189 + C4606 * C1181 + C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C47032 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48100 -
            (C10678 + C10679) * C47024 - (C10680 + C10681) * C48107 +
            (C10682 + C10683) * C47038 + (C10684 + C10685) * C3625) *
               C48206 * C10335 +
           ((C10679 + C10678) * C47032 + (C10681 + C10680) * C48100 -
            (C10683 + C10682) * C47024 - (C10685 + C10684) * C48107 +
            (C12395 + C12394) * C47038 + (C12397 + C12396) * C3625) *
               C48206 * C48338) *
              C48058 +
          (((C5463 + C5462) * C47024 -
            ((C4805 + C4804) * C48100 + (C4803 + C4802) * C47032) +
            (C5465 + C5464) * C48107 - (C5913 + C5912) * C47038 -
            (C5915 + C5914) * C3625) *
               C48206 * C10335 +
           ((C5912 + C5913) * C47024 -
            ((C5464 + C5465) * C48100 + (C5462 + C5463) * C47032) +
            (C5914 + C5915) * C48107 - (C7286 + C7287) * C47038 -
            (C7288 + C7289) * C3625) *
               C48206 * C48338) *
              C48065 +
          (((C4809 + C4808) * C47032 + (C4807 + C4806) * C48100 -
            (C5917 + C5916) * C47024 - (C5919 + C5918) * C48107 +
            (C5921 + C5920) * C47038 + (C5923 + C5922) * C3625) *
               C48206 * C10335 +
           ((C5916 + C5917) * C47032 + (C5918 + C5919) * C48100 -
            (C5920 + C5921) * C47024 - (C5922 + C5923) * C48107 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48305 * C7272) *
                C47038 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48305 * C7276) *
                C3625) *
               C48206 * C48338) *
              C2717) *
         C47973) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3113 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C3111 -
            (C10678 + C10679) * C3114 - (C10680 + C10681) * C48104) *
               C48206 * C10335 +
           ((C10679 + C10678) * C3113 + (C10681 + C10680) * C3111 -
            (C10683 + C10682) * C3114 - (C10685 + C10684) * C48104) *
               C48206 * C48338) *
              C48364 +
          (((C5463 + C5462) * C3114 -
            ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
            (C5465 + C5464) * C48104) *
               C48206 * C10335 +
           ((C5912 + C5913) * C3114 -
            ((C5464 + C5465) * C3111 + (C5462 + C5463) * C3113) +
            (C5914 + C5915) * C48104) *
               C48206 * C48338) *
              C48360 +
          (((C4809 + C4808) * C3113 + (C4807 + C4806) * C3111 -
            (C5917 + C5916) * C3114 - (C5919 + C5918) * C48104) *
               C48206 * C10335 +
           ((C5916 + C5917) * C3113 + (C5918 + C5919) * C3111 -
            (C5920 + C5921) * C3114 - (C5922 + C5923) * C48104) *
               C48206 * C48338) *
              C48350 +
          (((C6419 + C6418) * C3114 -
            ((C5729 + C5728) * C3111 + (C5727 + C5726) * C3113) +
            (C6421 + C6420) * C48104) *
               C48206 * C10335 +
           ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48305 * C5882) *
                C3114 -
            ((C6420 + C6421) * C3111 + (C6418 + C6419) * C3113) +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48305 * C5886) *
                C48104) *
               C48206 * C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C10678 + C10679) * C3114 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C3113 + (C10681 + C10680) * C3111 -
             (C10683 + C10682) * C3114 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C3114 -
             ((C5464 + C5465) * C3111 + (C5462 + C5463) * C3113) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C48062) *
              C48354 +
          ((((C10686 + C10687) * C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C3114 -
             ((C10689 + C10688) * C3111 + (C10687 + C10686) * C3113) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C3113 + (C5468 + C5469) * C3111 -
             (C7006 + C7007) * C3114 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C48062) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C3113 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C3111 -
             (C10694 + C10695) * C3114 - (C10696 + C10697) * C48104) *
                C48206 * C10335 +
            ((C10695 + C10694) * C3113 + (C10697 + C10696) * C3111 -
             (C10699 + C10698) * C3114 - (C10701 + C10700) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C5471 + C5470) * C3114 -
             ((C4821 + C4820) * C3111 + (C4819 + C4818) * C3113) +
             (C5473 + C5472) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                 C3114 -
             ((C5472 + C5473) * C3111 + (C5470 + C5471) * C3113) +
             (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3363 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48365 -
            (C10678 + C10679) * C3364 - (C10680 + C10681) * C48362 +
            (C10682 + C10683) * C3365 + (C10684 + C10685) * C48353 -
            (C12394 + C12395) * C3366 - (C12396 + C12397) * C48334) *
               C48206 * C10335 +
           ((C10679 + C10678) * C3363 + (C10681 + C10680) * C48365 -
            (C10683 + C10682) * C3364 - (C10685 + C10684) * C48362 +
            (C12395 + C12394) * C3365 + (C12397 + C12396) * C48353 -
            (C12399 + C12398) * C3366 - (C12401 + C12400) * C48334) *
               C48206 * C48338) *
              C2349 +
          (((C5463 + C5462) * C3364 -
            ((C4805 + C4804) * C48365 + (C4803 + C4802) * C3363) +
            (C5465 + C5464) * C48362 - (C5913 + C5912) * C3365 -
            (C5915 + C5914) * C48353 + (C7287 + C7286) * C3366 +
            (C7289 + C7288) * C48334) *
               C48206 * C10335 +
           ((C5912 + C5913) * C3364 -
            ((C5464 + C5465) * C48365 + (C5462 + C5463) * C3363) +
            (C5914 + C5915) * C48362 - (C7286 + C7287) * C3365 -
            (C7288 + C7289) * C48353 +
            (C4605 * C6795 + C4601 * C6797 + C4606 * C6796 + C48305 * C6798) *
                C3366 +
            (C4605 * C6799 + C4601 * C6801 + C4606 * C6800 + C48305 * C6802) *
                C48334) *
               C48206 * C48338) *
              C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C47032 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48100 -
             (C10678 + C10679) * C47024 - (C10680 + C10681) * C48107 +
             (C10682 + C10683) * C47038 + (C10684 + C10685) * C3625) *
                C48206 * C10335 +
            ((C10679 + C10678) * C47032 + (C10681 + C10680) * C48100 -
             (C10683 + C10682) * C47024 - (C10685 + C10684) * C48107 +
             (C12395 + C12394) * C47038 + (C12397 + C12396) * C3625) *
                C48206 * C48338) *
               C2349 +
           (((C5463 + C5462) * C47024 -
             ((C4805 + C4804) * C48100 + (C4803 + C4802) * C47032) +
             (C5465 + C5464) * C48107 - (C5913 + C5912) * C47038 -
             (C5915 + C5914) * C3625) *
                C48206 * C10335 +
            ((C5912 + C5913) * C47024 -
             ((C5464 + C5465) * C48100 + (C5462 + C5463) * C47032) +
             (C5914 + C5915) * C48107 - (C7286 + C7287) * C47038 -
             (C7288 + C7289) * C3625) *
                C48206 * C48338) *
               C48062) *
              C48272 +
          ((((C10686 + C10687) * C47024 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48100 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C47032) +
             (C10688 + C10689) * C48107 - (C10690 + C10691) * C47038 -
             (C10692 + C10693) * C3625) *
                C48206 * C10335 +
            ((C10691 + C10690) * C47024 -
             ((C10689 + C10688) * C48100 + (C10687 + C10686) * C47032) +
             (C10693 + C10692) * C48107 - (C12735 + C12734) * C47038 -
             (C12737 + C12736) * C3625) *
                C48206 * C48338) *
               C2349 +
           (((C4810 + C4811) * C47032 + (C4812 + C4813) * C48100 -
             (C5467 + C5466) * C47024 - (C5469 + C5468) * C48107 +
             (C7007 + C7006) * C47038 + (C7009 + C7008) * C3625) *
                C48206 * C10335 +
            ((C5466 + C5467) * C47032 + (C5468 + C5469) * C48100 -
             (C7006 + C7007) * C47024 - (C7008 + C7009) * C48107 +
             (C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48305 * C2244) *
                 C47038 +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48305 * C2250) *
                 C3625) *
                C48206 * C48338) *
               C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C10678 + C10679) * C3114 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C3113 + (C10681 + C10680) * C3111 -
             (C10683 + C10682) * C3114 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C3114 -
             ((C5464 + C5465) * C3111 + (C5462 + C5463) * C3113) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C48062) *
              C48354 +
          ((((C10686 + C10687) * C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C3114 -
             ((C10689 + C10688) * C3111 + (C10687 + C10686) * C3113) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C3113 + (C5468 + C5469) * C3111 -
             (C7006 + C7007) * C3114 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C48062) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C3113 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C3111 -
             (C10694 + C10695) * C3114 - (C10696 + C10697) * C48104) *
                C48206 * C10335 +
            ((C10695 + C10694) * C3113 + (C10697 + C10696) * C3111 -
             (C10699 + C10698) * C3114 - (C10701 + C10700) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C5471 + C5470) * C3114 -
             ((C4821 + C4820) * C3111 + (C4819 + C4818) * C3113) +
             (C5473 + C5472) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                 C3114 -
             ((C5472 + C5473) * C3111 + (C5470 + C5471) * C3113) +
             (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3113 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C3111 -
            (C10678 + C10679) * C3114 - (C10680 + C10681) * C48104) *
               C48206 * C10335 +
           ((C10679 + C10678) * C3113 + (C10681 + C10680) * C3111 -
            (C10683 + C10682) * C3114 - (C10685 + C10684) * C48104) *
               C48206 * C48338) *
              C48364 +
          (((C5463 + C5462) * C3114 -
            ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
            (C5465 + C5464) * C48104) *
               C48206 * C10335 +
           ((C5912 + C5913) * C3114 -
            ((C5464 + C5465) * C3111 + (C5462 + C5463) * C3113) +
            (C5914 + C5915) * C48104) *
               C48206 * C48338) *
              C48360 +
          (((C4809 + C4808) * C3113 + (C4807 + C4806) * C3111 -
            (C5917 + C5916) * C3114 - (C5919 + C5918) * C48104) *
               C48206 * C10335 +
           ((C5916 + C5917) * C3113 + (C5918 + C5919) * C3111 -
            (C5920 + C5921) * C3114 - (C5922 + C5923) * C48104) *
               C48206 * C48338) *
              C48350 +
          (((C6419 + C6418) * C3114 -
            ((C5729 + C5728) * C3111 + (C5727 + C5726) * C3113) +
            (C6421 + C6420) * C48104) *
               C48206 * C10335 +
           ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48305 * C5882) *
                C3114 -
            ((C6420 + C6421) * C3111 + (C6418 + C6419) * C3113) +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48305 * C5886) *
                C48104) *
               C48206 * C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C1289 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C1290 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C1291 -
           (((C6420 + C6421) * C48017 + (C6418 + C6419) * C116) * C48206 *
                C48338 +
            ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C48206 *
                C10335) *
               C48328) *
              C48272 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C1290 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C1289 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C1291 +
           (((C6065 + C6064) * C116 + (C6063 + C6062) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1548 + C4601 * C1551 + C4606 * C1549 + C48305 * C1552) *
                 C116 +
             (C4605 * C1554 + C4601 * C1557 + C4606 * C1555 + C48305 * C1558) *
                 C48017) *
                C48206 * C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C48286 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C48062) *
              C557 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C48062 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C48286) *
              C558 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C10695 + C10694) * C116 + (C10697 + C10696) * C48017) * C48206 *
                C48338) *
               C48286 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C48062) *
              C559 +
          ((((C5110 + C5111) * C116 + (C5112 + C5113) * C48017) * C48206 *
                C10335 +
            ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48305 * C830) *
                 C116 +
             (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48305 * C836) *
                 C48017) *
                C48206 * C48338) *
               C48062 -
           (((C4606 * C444 + C48305 * C455 + C4605 * C440 + C4601 * C453) *
                 C48017 +
             (C4606 * C425 + C48305 * C443 + C4605 * C423 + C4601 * C439) *
                 C116) *
                C48206 * C48338 +
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48017 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C48206 * C10335) *
               C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C1672 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C1669 -
             (C10678 + C10679) * C1673 - (C10680 + C10681) * C1670 +
             (C10682 + C10683) * C1674 + (C10684 + C10685) * C48321) *
                C48206 * C10335 +
            ((C10679 + C10678) * C1672 + (C10681 + C10680) * C1669 -
             (C10683 + C10682) * C1673 - (C10685 + C10684) * C1670 +
             (C12395 + C12394) * C1674 + (C12397 + C12396) * C48321) *
                C48206 * C48338) *
               C48286 +
           (((C5463 + C5462) * C1673 -
             ((C4805 + C4804) * C1669 + (C4803 + C4802) * C1672) +
             (C5465 + C5464) * C1670 - (C5913 + C5912) * C1674 -
             (C5915 + C5914) * C48321) *
                C48206 * C10335 +
            ((C5912 + C5913) * C1673 -
             ((C5464 + C5465) * C1669 + (C5462 + C5463) * C1672) +
             (C5914 + C5915) * C1670 - (C7286 + C7287) * C1674 -
             (C7288 + C7289) * C48321) *
                C48206 * C48338) *
               C48062) *
              C48272 +
          ((((C10686 + C10687) * C1673 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C1669 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C1672) +
             (C10688 + C10689) * C1670 - (C10690 + C10691) * C1674 -
             (C10692 + C10693) * C48321) *
                C48206 * C10335 +
            ((C10691 + C10690) * C1673 -
             ((C10689 + C10688) * C1669 + (C10687 + C10686) * C1672) +
             (C10693 + C10692) * C1670 -
             (C4606 * C1857 + C48305 * C1863 + C4605 * C1858 + C4601 * C1864) *
                 C1674 -
             (C4606 * C1866 + C48305 * C1875 + C4605 * C1867 + C4601 * C1876) *
                 C48321) *
                C48206 * C48338) *
               C48286 +
           (((C4810 + C4811) * C1672 + (C4812 + C4813) * C1669 -
             (C5467 + C5466) * C1673 - (C5469 + C5468) * C1670 +
             (C7007 + C7006) * C1674 + (C7009 + C7008) * C48321) *
                C48206 * C10335 +
            ((C5466 + C5467) * C1672 + (C5468 + C5469) * C1669 -
             (C7006 + C7007) * C1673 - (C7008 + C7009) * C1670 +
             (C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48305 * C2244) *
                 C1674 +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48305 * C2250) *
                 C48321) *
                C48206 * C48338) *
               C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C665 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48287 -
            (C10678 + C10679) * C666 - (C10680 + C10681) * C48104) *
               C48206 * C10335 +
           ((C10679 + C10678) * C665 + (C10681 + C10680) * C48287 -
            (C10683 + C10682) * C666 - (C10685 + C10684) * C48104) *
               C48206 * C48338) *
              C1289 +
          (((C5463 + C5462) * C666 -
            ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
            (C5465 + C5464) * C48104) *
               C48206 * C10335 +
           ((C5912 + C5913) * C666 -
            ((C5464 + C5465) * C48287 + (C5462 + C5463) * C665) +
            (C5914 + C5915) * C48104) *
               C48206 * C48338) *
              C1290 +
          (((C4809 + C4808) * C665 + (C4807 + C4806) * C48287 -
            (C5917 + C5916) * C666 - (C5919 + C5918) * C48104) *
               C48206 * C10335 +
           ((C5916 + C5917) * C665 + (C5918 + C5919) * C48287 -
            (C5920 + C5921) * C666 - (C5922 + C5923) * C48104) *
               C48206 * C48338) *
              C1291 +
          (((C6419 + C6418) * C666 -
            ((C5729 + C5728) * C48287 + (C5727 + C5726) * C665) +
            (C6421 + C6420) * C48104) *
               C48206 * C10335 +
           ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48305 * C5882) *
                C666 -
            ((C6420 + C6421) * C48287 + (C6418 + C6419) * C665) +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48305 * C5886) *
                C48104) *
               C48206 * C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C10678 + C10679) * C666 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C665 + (C10681 + C10680) * C48287 -
             (C10683 + C10682) * C666 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C666 -
             ((C5464 + C5465) * C48287 + (C5462 + C5463) * C665) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C48062) *
              C258 +
          ((((C10686 + C10687) * C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C666 -
             ((C10689 + C10688) * C48287 + (C10687 + C10686) * C665) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C665 + (C5468 + C5469) * C48287 -
             (C7006 + C7007) * C666 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C48062) *
              C259 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C665 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48287 -
             (C10694 + C10695) * C666 - (C10696 + C10697) * C48104) *
                C48206 * C10335 +
            ((C10695 + C10694) * C665 + (C10697 + C10696) * C48287 -
             (C10699 + C10698) * C666 - (C10701 + C10700) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C5471 + C5470) * C666 -
             ((C4821 + C4820) * C48287 + (C4819 + C4818) * C665) +
             (C5473 + C5472) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                 C666 -
             ((C5472 + C5473) * C48287 + (C5470 + C5471) * C665) +
             (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C2133 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C2129 -
            (C10678 + C10679) * C2134 - (C10680 + C10681) * C2130 +
            (C10682 + C10683) * C2135 + (C10684 + C10685) * C2131 -
            (C12394 + C12395) * C2136 - (C12396 + C12397) * C48334) *
               C48206 * C10335 +
           ((C10679 + C10678) * C2133 + (C10681 + C10680) * C2129 -
            (C10683 + C10682) * C2134 - (C10685 + C10684) * C2130 +
            (C12395 + C12394) * C2135 + (C12397 + C12396) * C2131 -
            (C12399 + C12398) * C2136 - (C12401 + C12400) * C48334) *
               C48206 * C48338) *
              C48286 +
          (((C5463 + C5462) * C2134 -
            ((C4805 + C4804) * C2129 + (C4803 + C4802) * C2133) +
            (C5465 + C5464) * C2130 - (C5913 + C5912) * C2135 -
            (C5915 + C5914) * C2131 + (C7287 + C7286) * C2136 +
            (C7289 + C7288) * C48334) *
               C48206 * C10335 +
           ((C5912 + C5913) * C2134 -
            ((C5464 + C5465) * C2129 + (C5462 + C5463) * C2133) +
            (C5914 + C5915) * C2130 - (C7286 + C7287) * C2135 -
            (C7288 + C7289) * C2131 +
            (C4605 * C6795 + C4601 * C6797 + C4606 * C6796 + C48305 * C6798) *
                C2136 +
            (C4605 * C6799 + C4601 * C6801 + C4606 * C6800 + C48305 * C6802) *
                C48334) *
               C48206 * C48338) *
              C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                    C116 +
                (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                    C48017) *
                   C48206 * C10335 +
               ((C4605 * C419 + C4601 * C429 + C4606 * C418 + C48305 * C428) *
                    C116 +
                (C4605 * C432 + C4601 * C449 + C4606 * C431 + C48305 * C448) *
                    C48017) *
                   C48206 * C48338) *
                  C48000 * C108 -
              (((C4606 * C430 + C48305 * C447 + C4605 * C431 + C4601 * C448) *
                    C48017 +
                (C4606 * C417 + C48305 * C427 + C4605 * C418 + C4601 * C428) *
                    C116) *
                   C48206 * C48338 +
               ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                    C48017 +
                (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                    C116) *
                   C48206 * C10335) *
                  C48000 * C109 +
              (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                    C116 +
                (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                    C48017) *
                   C48206 * C10335 +
               ((C4605 * C417 + C4601 * C427 + C4606 * C423 + C48305 * C439) *
                    C116 +
                (C4605 * C430 + C4601 * C447 + C4606 * C440 + C48305 * C453) *
                    C48017) *
                   C48206 * C48338) *
                  C48000 * C110 -
              (((C4606 * C444 + C48305 * C455 + C4605 * C440 + C4601 * C453) *
                    C48017 +
                (C4606 * C425 + C48305 * C443 + C4605 * C423 + C4601 * C439) *
                    C116) *
                   C48206 * C48338 +
               ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                    C48017 +
                (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                    C116) *
                   C48206 * C10335) *
                  C48000 * C111 +
              (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48305 * C135) *
                    C116 +
                (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48305 * C143) *
                    C48017) *
                   C48206 * C10335 +
               ((C4605 * C425 + C4601 * C443 + C4606 * C667 + C48305 * C668) *
                    C116 +
                (C4605 * C444 + C4601 * C455 + C4606 * C669 + C48305 * C670) *
                    C48017) *
                   C48206 * C48338) *
                  C48000 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                     C116 +
                 (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                     C48017) *
                    C48206 * C10335 +
                ((C4605 * C419 + C4601 * C429 + C4606 * C418 + C48305 * C428) *
                     C116 +
                 (C4605 * C432 + C4601 * C449 + C4606 * C431 + C48305 * C448) *
                     C48017) *
                    C48206 * C48338) *
                   C48357 -
               (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                    C48338 +
                ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                    C10335) *
                   C48345 +
               (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                    C10335 +
                ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                    C48338) *
                   C48318) *
                  C258 +
              ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                    C10335 +
                ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                    C48338) *
                   C48345 -
               (((C4606 * C430 + C48305 * C447 + C4605 * C431 + C4601 * C448) *
                     C48017 +
                 (C4606 * C417 + C48305 * C427 + C4605 * C418 + C4601 * C428) *
                     C116) *
                    C48206 * C48338 +
                ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                     C48017 +
                 (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                     C116) *
                    C48206 * C10335) *
                   C48357 -
               (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                    C48338 +
                ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                    C10335) *
                   C48318) *
                  C259 +
              ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                     C116 +
                 (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                     C48017) *
                    C48206 * C10335 +
                ((C4605 * C417 + C4601 * C427 + C4606 * C423 + C48305 * C439) *
                     C116 +
                 (C4605 * C430 + C4601 * C447 + C4606 * C440 + C48305 * C453) *
                     C48017) *
                    C48206 * C48338) *
                   C48357 -
               (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                    C48338 +
                ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                    C10335) *
                   C48345 +
               (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C48206 *
                    C10335 +
                ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 +
                  C48305 * C1446) *
                     C116 +
                 (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 +
                  C48305 * C1448) *
                     C48017) *
                    C48206 * C48338) *
                   C48318) *
                  C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C414 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48358 -
            (C10678 + C10679) * C415 - (C10680 + C10681) * C48347 +
            (C10682 + C10683) * C416 + (C10684 + C10685) * C48321) *
               C48206 * C10335 +
           ((C10679 + C10678) * C414 + (C10681 + C10680) * C48358 -
            (C10683 + C10682) * C415 - (C10685 + C10684) * C48347 +
            (C4605 * C1859 + C4601 * C1865 + C4606 * C1858 + C48305 * C1864) *
                C416 +
            (C4605 * C1868 + C4601 * C1877 + C4606 * C1867 + C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C258 +
          (((C10686 + C10687) * C415 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48358 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C414) +
            (C10688 + C10689) * C48347 - (C10690 + C10691) * C416 -
            (C10692 + C10693) * C48321) *
               C48206 * C10335 +
           ((C10691 + C10690) * C415 -
            ((C10689 + C10688) * C48358 + (C10687 + C10686) * C414) +
            (C10693 + C10692) * C48347 -
            (C4606 * C1857 + C48305 * C1863 + C4605 * C1858 + C4601 * C1864) *
                C416 -
            (C4606 * C1866 + C48305 * C1875 + C4605 * C1867 + C4601 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C259 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C414 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48358 -
            (C10694 + C10695) * C415 - (C10696 + C10697) * C48347 +
            (C10698 + C10699) * C416 + (C10700 + C10701) * C48321) *
               C48206 * C10335 +
           ((C10695 + C10694) * C414 + (C10697 + C10696) * C48358 -
            (C10699 + C10698) * C415 - (C10701 + C10700) * C48347 +
            (C4605 * C1857 + C4601 * C1863 + C4606 * C2137 + C48305 * C2138) *
                C416 +
            (C4605 * C1866 + C4601 * C1875 + C4606 * C2139 + C48305 * C2140) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C948 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C48318) *
              C48354 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C948 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C947 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C48318) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C10695 + C10694) * C116 + (C10697 + C10696) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C948 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C116 +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C10335 +
           ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
               C48338) *
              C1015 -
          (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
               C48338 +
           ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
               C10335) *
              C1016 +
          (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
               C10335 +
           ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
               C48338) *
              C1017 -
          (((C6420 + C6421) * C48017 + (C6418 + C6419) * C116) * C48206 *
               C48338 +
           ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C48206 *
               C10335) *
              C1018 +
          (((C5733 + C5732) * C116 + (C5731 + C5730) * C48017) * C48206 *
               C10335 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48305 * C6404) *
                C116 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48305 * C6408) *
                C48017) *
               C48206 * C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C414 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48358 -
            (C10678 + C10679) * C415 - (C10680 + C10681) * C48347 +
            (C10682 + C10683) * C416 + (C10684 + C10685) * C48321) *
               C48206 * C10335 +
           ((C10679 + C10678) * C414 + (C10681 + C10680) * C48358 -
            (C10683 + C10682) * C415 - (C10685 + C10684) * C48347 +
            (C4605 * C1859 + C4601 * C1865 + C4606 * C1858 + C48305 * C1864) *
                C416 +
            (C4605 * C1868 + C4601 * C1877 + C4606 * C1867 + C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C947 +
          (((C5463 + C5462) * C415 -
            ((C4805 + C4804) * C48358 + (C4803 + C4802) * C414) +
            (C5465 + C5464) * C48347 - (C5913 + C5912) * C416 -
            (C5915 + C5914) * C48321) *
               C48206 * C10335 +
           ((C5912 + C5913) * C415 -
            ((C5464 + C5465) * C48358 + (C5462 + C5463) * C414) +
            (C5914 + C5915) * C48347 - (C7286 + C7287) * C416 -
            (C7288 + C7289) * C48321) *
               C48206 * C48338) *
              C948 +
          (((C4809 + C4808) * C414 + (C4807 + C4806) * C48358 -
            (C5917 + C5916) * C415 - (C5919 + C5918) * C48347 +
            (C5921 + C5920) * C416 + (C5923 + C5922) * C48321) *
               C48206 * C10335 +
           ((C5916 + C5917) * C414 + (C5918 + C5919) * C48358 -
            (C5920 + C5921) * C415 - (C5922 + C5923) * C48347 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48305 * C7272) *
                C416 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48305 * C7276) *
                C48321) *
               C48206 * C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C1672 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C1669 -
            (C10678 + C10679) * C1673 - (C10680 + C10681) * C1670 +
            (C10682 + C10683) * C1674 + (C10684 + C10685) * C48321) *
               C48206 * C10335 +
           ((C10679 + C10678) * C1672 + (C10681 + C10680) * C1669 -
            (C10683 + C10682) * C1673 - (C10685 + C10684) * C1670 +
            (C4605 * C1859 + C4601 * C1865 + C4606 * C1858 + C48305 * C1864) *
                C1674 +
            (C4605 * C1868 + C4601 * C1877 + C4606 * C1867 + C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48354 +
          (((C10686 + C10687) * C1673 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C1669 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C1672) +
            (C10688 + C10689) * C1670 - (C10690 + C10691) * C1674 -
            (C10692 + C10693) * C48321) *
               C48206 * C10335 +
           ((C10691 + C10690) * C1673 -
            ((C10689 + C10688) * C1669 + (C10687 + C10686) * C1672) +
            (C10693 + C10692) * C1670 -
            (C4606 * C1857 + C48305 * C1863 + C4605 * C1858 + C4601 * C1864) *
                C1674 -
            (C4606 * C1866 + C48305 * C1875 + C4605 * C1867 + C4601 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48341 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C1672 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C1669 -
            (C10694 + C10695) * C1673 - (C10696 + C10697) * C1670 +
            (C10698 + C10699) * C1674 + (C10700 + C10701) * C48321) *
               C48206 * C10335 +
           ((C10695 + C10694) * C1672 + (C10697 + C10696) * C1669 -
            (C10699 + C10698) * C1673 - (C10701 + C10700) * C1670 +
            (C4605 * C1857 + C4601 * C1863 + C4606 * C2137 + C48305 * C2138) *
                C1674 +
            (C4605 * C1866 + C4601 * C1875 + C4606 * C2139 + C48305 * C2140) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C1672 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C1669 -
            (C10678 + C10679) * C1673 - (C10680 + C10681) * C1670 +
            (C10682 + C10683) * C1674 + (C10684 + C10685) * C48321) *
               C48206 * C10335 +
           ((C10679 + C10678) * C1672 + (C10681 + C10680) * C1669 -
            (C10683 + C10682) * C1673 - (C10685 + C10684) * C1670 +
            (C4605 * C1859 + C4601 * C1865 + C4606 * C1858 + C48305 * C1864) *
                C1674 +
            (C4605 * C1868 + C4601 * C1877 + C4606 * C1867 + C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48357 +
          (((C5463 + C5462) * C1673 -
            ((C4805 + C4804) * C1669 + (C4803 + C4802) * C1672) +
            (C5465 + C5464) * C1670 - (C5913 + C5912) * C1674 -
            (C5915 + C5914) * C48321) *
               C48206 * C10335 +
           ((C5912 + C5913) * C1673 -
            ((C5464 + C5465) * C1669 + (C5462 + C5463) * C1672) +
            (C5914 + C5915) * C1670 - (C7286 + C7287) * C1674 -
            (C7288 + C7289) * C48321) *
               C48206 * C48338) *
              C48345 +
          (((C4809 + C4808) * C1672 + (C4807 + C4806) * C1669 -
            (C5917 + C5916) * C1673 - (C5919 + C5918) * C1670 +
            (C5921 + C5920) * C1674 + (C5923 + C5922) * C48321) *
               C48206 * C10335 +
           ((C5916 + C5917) * C1672 + (C5918 + C5919) * C1669 -
            (C5920 + C5921) * C1673 - (C5922 + C5923) * C1670 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48305 * C7272) *
                C1674 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48305 * C7276) *
                C48321) *
               C48206 * C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
               C1852 +
           (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
               C1847 -
           (C10678 + C10679) * C1853 - (C10680 + C10681) * C1848 +
           (C10682 + C10683) * C1854 + (C10684 + C10685) * C1849 -
           (C12394 + C12395) * C1855 - (C12396 + C12397) * C1850 +
           (C12398 + C12399) * C1856 + (C12400 + C12401) * C1851) *
              C48206 * C10335 +
          ((C10679 + C10678) * C1852 + (C10681 + C10680) * C1847 -
           (C10683 + C10682) * C1853 - (C10685 + C10684) * C1848 +
           (C12395 + C12394) * C1854 + (C12397 + C12396) * C1849 -
           (C12399 + C12398) * C1855 - (C12401 + C12400) * C1850 +
           (C4605 * C12369 + C4601 * C12371 + C4606 * C12370 +
            C48305 * C12372) *
               C1856 +
           (C4605 * C12373 + C4601 * C12375 + C4606 * C12374 +
            C48305 * C12376) *
               C1851) *
              C48206 * C48338) *
         C48000 * C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C10678 + C10679) * C666 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C665 + (C10681 + C10680) * C48287 -
             (C10683 + C10682) * C666 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C947 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C666 -
             ((C5464 + C5465) * C48287 + (C5462 + C5463) * C665) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C948 +
           (((C4809 + C4808) * C665 + (C4807 + C4806) * C48287 -
             (C5917 + C5916) * C666 - (C5919 + C5918) * C48104) *
                C48206 * C10335 +
            ((C5916 + C5917) * C665 + (C5918 + C5919) * C48287 -
             (C5920 + C5921) * C666 - (C5922 + C5923) * C48104) *
                C48206 * C48338) *
               C48318) *
              C48272 +
          ((((C10686 + C10687) * C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C666 -
             ((C10689 + C10688) * C48287 + (C10687 + C10686) * C665) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C947 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C665 + (C5468 + C5469) * C48287 -
             (C7006 + C7007) * C666 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C948 +
           (((C6269 + C6268) * C666 -
             ((C4817 + C4816) * C48287 + (C4815 + C4814) * C665) +
             (C6271 + C6270) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1162 + C4601 * C1177 + C4606 * C1163 + C48305 * C1178) *
                 C666 -
             ((C6270 + C6271) * C48287 + (C6268 + C6269) * C665) +
             (C4605 * C1180 + C4601 * C1189 + C4606 * C1181 + C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C665 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48287 -
            (C10678 + C10679) * C666 - (C10680 + C10681) * C48104) *
               C48206 * C10335 +
           ((C10679 + C10678) * C665 + (C10681 + C10680) * C48287 -
            (C10683 + C10682) * C666 - (C10685 + C10684) * C48104) *
               C48206 * C48338) *
              C48000 * C557 +
          (((C10686 + C10687) * C666 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48287 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C665) +
            (C10688 + C10689) * C48104) *
               C48206 * C10335 +
           ((C10691 + C10690) * C666 -
            ((C10689 + C10688) * C48287 + (C10687 + C10686) * C665) +
            (C10693 + C10692) * C48104) *
               C48206 * C48338) *
              C48000 * C558 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C665 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48287 -
            (C10694 + C10695) * C666 - (C10696 + C10697) * C48104) *
               C48206 * C10335 +
           ((C10695 + C10694) * C665 + (C10697 + C10696) * C48287 -
            (C10699 + C10698) * C666 - (C10701 + C10700) * C48104) *
               C48206 * C48338) *
              C48000 * C559 +
          (((C10970 + C10971) * C666 -
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48287 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C665) +
            (C10972 + C10973) * C48104) *
               C48206 * C10335 +
           ((C4605 * C424 + C4601 * C441 + C4606 * C426 + C48305 * C445) *
                C666 -
            ((C10973 + C10972) * C48287 + (C10971 + C10970) * C665) +
            (C4605 * C442 + C4601 * C454 + C4606 * C446 + C48305 * C456) *
                C48104) *
               C48206 * C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C2133 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C2129 -
            (C10678 + C10679) * C2134 - (C10680 + C10681) * C2130 +
            (C10682 + C10683) * C2135 + (C10684 + C10685) * C2131 -
            (C12394 + C12395) * C2136 - (C12396 + C12397) * C48334) *
               C48206 * C10335 +
           ((C10679 + C10678) * C2133 + (C10681 + C10680) * C2129 -
            (C10683 + C10682) * C2134 - (C10685 + C10684) * C2130 +
            (C12395 + C12394) * C2135 + (C12397 + C12396) * C2131 -
            (C12399 + C12398) * C2136 - (C12401 + C12400) * C48334) *
               C48206 * C48338) *
              C48000 * C48272 +
          (((C10686 + C10687) * C2134 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C2129 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C2133) +
            (C10688 + C10689) * C2130 - (C10690 + C10691) * C2135 -
            (C10692 + C10693) * C2131 + (C12734 + C12735) * C2136 +
            (C12736 + C12737) * C48334) *
               C48206 * C10335 +
           ((C10691 + C10690) * C2134 -
            ((C10689 + C10688) * C2129 + (C10687 + C10686) * C2133) +
            (C10693 + C10692) * C2130 - (C12735 + C12734) * C2135 -
            (C12737 + C12736) * C2131 +
            (C4605 * C1861 + C4601 * C1870 + C4606 * C1862 + C48305 * C1871) *
                C2136 +
            (C4605 * C1873 + C4601 * C1879 + C4606 * C1874 + C48305 * C1880) *
                C48334) *
               C48206 * C48338) *
              C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C4605 * C419 + C4601 * C429 + C4606 * C418 + C48305 * C428) *
                 C116 +
             (C4605 * C432 + C4601 * C449 + C4606 * C431 + C48305 * C448) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C48345 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C48318) *
              C258 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C48345 -
           (((C4606 * C430 + C48305 * C447 + C4605 * C431 + C4601 * C448) *
                 C48017 +
             (C4606 * C417 + C48305 * C427 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C48206 * C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C48357 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C48318) *
              C259 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C4605 * C417 + C4601 * C427 + C4606 * C423 + C48305 * C439) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C440 + C48305 * C453) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C48345 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C116 +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C10335 +
           ((C4605 * C419 + C4601 * C429 + C4606 * C418 + C48305 * C428) *
                C116 +
            (C4605 * C432 + C4601 * C449 + C4606 * C431 + C48305 * C448) *
                C48017) *
               C48206 * C48338) *
              C48000 * C108 -
          (((C4606 * C430 + C48305 * C447 + C4605 * C431 + C4601 * C448) *
                C48017 +
            (C4606 * C417 + C48305 * C427 + C4605 * C418 + C4601 * C428) *
                C116) *
               C48206 * C48338 +
           ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                C48017 +
            (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C48206 * C10335) *
              C48000 * C109 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48017) *
               C48206 * C10335 +
           ((C4605 * C417 + C4601 * C427 + C4606 * C423 + C48305 * C439) *
                C116 +
            (C4605 * C430 + C4601 * C447 + C4606 * C440 + C48305 * C453) *
                C48017) *
               C48206 * C48338) *
              C48000 * C110 -
          (((C4606 * C444 + C48305 * C455 + C4605 * C440 + C4601 * C453) *
                C48017 +
            (C4606 * C425 + C48305 * C443 + C4605 * C423 + C4601 * C439) *
                C116) *
               C48206 * C48338 +
           ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                C48017 +
            (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C48206 * C10335) *
              C48000 * C111 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48305 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48305 * C143) *
                C48017) *
               C48206 * C10335 +
           ((C4605 * C425 + C4601 * C443 + C4606 * C667 + C48305 * C668) *
                C116 +
            (C4605 * C444 + C4601 * C455 + C4606 * C669 + C48305 * C670) *
                C48017) *
               C48206 * C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C948 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C48318) *
              C48354 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C948 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C947 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C48318) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C10695 + C10694) * C116 + (C10697 + C10696) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C948 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C116 +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C10335 +
           ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
               C48338) *
              C1015 -
          (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
               C48338 +
           ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
               C10335) *
              C1016 +
          (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
               C10335 +
           ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
               C48338) *
              C1017 -
          (((C6420 + C6421) * C48017 + (C6418 + C6419) * C116) * C48206 *
               C48338 +
           ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C48206 *
               C10335) *
              C1018 +
          (((C5733 + C5732) * C116 + (C5731 + C5730) * C48017) * C48206 *
               C10335 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48305 * C6404) *
                C116 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48305 * C6408) *
                C48017) *
               C48206 * C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C1672 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C1669 -
            (C10678 + C10679) * C1673 - (C10680 + C10681) * C1670 +
            (C10682 + C10683) * C1674 + (C10684 + C10685) * C48321) *
               C48206 * C10335 +
           ((C10679 + C10678) * C1672 + (C10681 + C10680) * C1669 -
            (C10683 + C10682) * C1673 - (C10685 + C10684) * C1670 +
            (C4605 * C1859 + C4601 * C1865 + C4606 * C1858 + C48305 * C1864) *
                C1674 +
            (C4605 * C1868 + C4601 * C1877 + C4606 * C1867 + C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48354 +
          (((C10686 + C10687) * C1673 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C1669 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C1672) +
            (C10688 + C10689) * C1670 - (C10690 + C10691) * C1674 -
            (C10692 + C10693) * C48321) *
               C48206 * C10335 +
           ((C10691 + C10690) * C1673 -
            ((C10689 + C10688) * C1669 + (C10687 + C10686) * C1672) +
            (C10693 + C10692) * C1670 -
            (C4606 * C1857 + C48305 * C1863 + C4605 * C1858 + C4601 * C1864) *
                C1674 -
            (C4606 * C1866 + C48305 * C1875 + C4605 * C1867 + C4601 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48341 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C1672 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C1669 -
            (C10694 + C10695) * C1673 - (C10696 + C10697) * C1670 +
            (C10698 + C10699) * C1674 + (C10700 + C10701) * C48321) *
               C48206 * C10335 +
           ((C10695 + C10694) * C1672 + (C10697 + C10696) * C1669 -
            (C10699 + C10698) * C1673 - (C10701 + C10700) * C1670 +
            (C4605 * C1857 + C4601 * C1863 + C4606 * C2137 + C48305 * C2138) *
                C1674 +
            (C4605 * C1866 + C4601 * C1875 + C4606 * C2139 + C48305 * C2140) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C1672 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C1669 -
            (C10678 + C10679) * C1673 - (C10680 + C10681) * C1670 +
            (C10682 + C10683) * C1674 + (C10684 + C10685) * C48321) *
               C48206 * C10335 +
           ((C10679 + C10678) * C1672 + (C10681 + C10680) * C1669 -
            (C10683 + C10682) * C1673 - (C10685 + C10684) * C1670 +
            (C4605 * C1859 + C4601 * C1865 + C4606 * C1858 + C48305 * C1864) *
                C1674 +
            (C4605 * C1868 + C4601 * C1877 + C4606 * C1867 + C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48357 +
          (((C5463 + C5462) * C1673 -
            ((C4805 + C4804) * C1669 + (C4803 + C4802) * C1672) +
            (C5465 + C5464) * C1670 - (C5913 + C5912) * C1674 -
            (C5915 + C5914) * C48321) *
               C48206 * C10335 +
           ((C5912 + C5913) * C1673 -
            ((C5464 + C5465) * C1669 + (C5462 + C5463) * C1672) +
            (C5914 + C5915) * C1670 - (C7286 + C7287) * C1674 -
            (C7288 + C7289) * C48321) *
               C48206 * C48338) *
              C48345 +
          (((C4809 + C4808) * C1672 + (C4807 + C4806) * C1669 -
            (C5917 + C5916) * C1673 - (C5919 + C5918) * C1670 +
            (C5921 + C5920) * C1674 + (C5923 + C5922) * C48321) *
               C48206 * C10335 +
           ((C5916 + C5917) * C1672 + (C5918 + C5919) * C1669 -
            (C5920 + C5921) * C1673 - (C5922 + C5923) * C1670 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48305 * C7272) *
                C1674 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48305 * C7276) *
                C48321) *
               C48206 * C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C10678 + C10679) * C3114 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C3113 + (C10681 + C10680) * C3111 -
             (C10683 + C10682) * C3114 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C3114 -
             ((C5464 + C5465) * C3111 + (C5462 + C5463) * C3113) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C48062) *
              C47978 +
          ((((C10686 + C10687) * C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C3114 -
             ((C10689 + C10688) * C3111 + (C10687 + C10686) * C3113) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C3113 + (C5468 + C5469) * C3111 -
             (C7006 + C7007) * C3114 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C48062) *
              C47986 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C3113 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C3111 -
             (C10694 + C10695) * C3114 - (C10696 + C10697) * C48104) *
                C48206 * C10335 +
            ((C10695 + C10694) * C3113 + (C10697 + C10696) * C3111 -
             (C10699 + C10698) * C3114 - (C10701 + C10700) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C5471 + C5470) * C3114 -
             ((C4821 + C4820) * C3111 + (C4819 + C4818) * C3113) +
             (C5473 + C5472) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                 C3114 -
             ((C5472 + C5473) * C3111 + (C5470 + C5471) * C3113) +
             (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C47032 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48100 -
             (C10678 + C10679) * C47024 - (C10680 + C10681) * C48107 +
             (C10682 + C10683) * C47038 + (C10684 + C10685) * C3625) *
                C48206 * C10335 +
            ((C10679 + C10678) * C47032 + (C10681 + C10680) * C48100 -
             (C10683 + C10682) * C47024 - (C10685 + C10684) * C48107 +
             (C12395 + C12394) * C47038 + (C12397 + C12396) * C3625) *
                C48206 * C48338) *
               C48286 +
           (((C5463 + C5462) * C47024 -
             ((C4805 + C4804) * C48100 + (C4803 + C4802) * C47032) +
             (C5465 + C5464) * C48107 - (C5913 + C5912) * C47038 -
             (C5915 + C5914) * C3625) *
                C48206 * C10335 +
            ((C5912 + C5913) * C47024 -
             ((C5464 + C5465) * C48100 + (C5462 + C5463) * C47032) +
             (C5914 + C5915) * C48107 - (C7286 + C7287) * C47038 -
             (C7288 + C7289) * C3625) *
                C48206 * C48338) *
               C48062) *
              C2457 +
          ((((C10686 + C10687) * C47024 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48100 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C47032) +
             (C10688 + C10689) * C48107 - (C10690 + C10691) * C47038 -
             (C10692 + C10693) * C3625) *
                C48206 * C10335 +
            ((C10691 + C10690) * C47024 -
             ((C10689 + C10688) * C48100 + (C10687 + C10686) * C47032) +
             (C10693 + C10692) * C48107 - (C12735 + C12734) * C47038 -
             (C12737 + C12736) * C3625) *
                C48206 * C48338) *
               C48286 +
           (((C4810 + C4811) * C47032 + (C4812 + C4813) * C48100 -
             (C5467 + C5466) * C47024 - (C5469 + C5468) * C48107 +
             (C7007 + C7006) * C47038 + (C7009 + C7008) * C3625) *
                C48206 * C10335 +
            ((C5466 + C5467) * C47032 + (C5468 + C5469) * C48100 -
             (C7006 + C7007) * C47024 - (C7008 + C7009) * C48107 +
             (C4605 * C2240 + C4601 * C2243 + C4606 * C2241 + C48305 * C2244) *
                 C47038 +
             (C4605 * C2246 + C4601 * C2249 + C4606 * C2247 + C48305 * C2250) *
                 C3625) *
                C48206 * C48338) *
               C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C10678 + C10679) * C3114 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C3113 + (C10681 + C10680) * C3111 -
             (C10683 + C10682) * C3114 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C48357 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C3114 -
             ((C5464 + C5465) * C3111 + (C5462 + C5463) * C3113) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C48345 +
           (((C4809 + C4808) * C3113 + (C4807 + C4806) * C3111 -
             (C5917 + C5916) * C3114 - (C5919 + C5918) * C48104) *
                C48206 * C10335 +
            ((C5916 + C5917) * C3113 + (C5918 + C5919) * C3111 -
             (C5920 + C5921) * C3114 - (C5922 + C5923) * C48104) *
                C48206 * C48338) *
               C48318) *
              C2457 +
          ((((C10686 + C10687) * C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C3114 -
             ((C10689 + C10688) * C3111 + (C10687 + C10686) * C3113) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C48357 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C3113 + (C5468 + C5469) * C3111 -
             (C7006 + C7007) * C3114 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C48345 +
           (((C6269 + C6268) * C3114 -
             ((C4817 + C4816) * C3111 + (C4815 + C4814) * C3113) +
             (C6271 + C6270) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1162 + C4601 * C1177 + C4606 * C1163 + C48305 * C1178) *
                 C3114 -
             ((C6270 + C6271) * C3111 + (C6268 + C6269) * C3113) +
             (C4605 * C1180 + C4601 * C1189 + C4606 * C1181 + C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3113 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C3111 -
            (C10678 + C10679) * C3114 - (C10680 + C10681) * C48104) *
               C48206 * C10335 +
           ((C10679 + C10678) * C3113 + (C10681 + C10680) * C3111 -
            (C10683 + C10682) * C3114 - (C10685 + C10684) * C48104) *
               C48206 * C48338) *
              C48000 * C48363 +
          (((C10686 + C10687) * C3114 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C3111 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C3113) +
            (C10688 + C10689) * C48104) *
               C48206 * C10335 +
           ((C10691 + C10690) * C3114 -
            ((C10689 + C10688) * C3111 + (C10687 + C10686) * C3113) +
            (C10693 + C10692) * C48104) *
               C48206 * C48338) *
              C48000 * C48356 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C3113 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C3111 -
            (C10694 + C10695) * C3114 - (C10696 + C10697) * C48104) *
               C48206 * C10335 +
           ((C10695 + C10694) * C3113 + (C10697 + C10696) * C3111 -
            (C10699 + C10698) * C3114 - (C10701 + C10700) * C48104) *
               C48206 * C48338) *
              C48000 * C48343 +
          (((C10970 + C10971) * C3114 -
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C3111 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C3113) +
            (C10972 + C10973) * C48104) *
               C48206 * C10335 +
           ((C4605 * C424 + C4601 * C441 + C4606 * C426 + C48305 * C445) *
                C3114 -
            ((C10973 + C10972) * C3111 + (C10971 + C10970) * C3113) +
            (C4605 * C442 + C4601 * C454 + C4606 * C446 + C48305 * C456) *
                C48104) *
               C48206 * C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3363 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48365 -
            (C10678 + C10679) * C3364 - (C10680 + C10681) * C48362 +
            (C10682 + C10683) * C3365 + (C10684 + C10685) * C48353 -
            (C12394 + C12395) * C3366 - (C12396 + C12397) * C48334) *
               C48206 * C10335 +
           ((C10679 + C10678) * C3363 + (C10681 + C10680) * C48365 -
            (C10683 + C10682) * C3364 - (C10685 + C10684) * C48362 +
            (C12395 + C12394) * C3365 + (C12397 + C12396) * C48353 -
            (C12399 + C12398) * C3366 - (C12401 + C12400) * C48334) *
               C48206 * C48338) *
              C48000 * C2457 +
          (((C10686 + C10687) * C3364 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48365 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C3363) +
            (C10688 + C10689) * C48362 - (C10690 + C10691) * C3365 -
            (C10692 + C10693) * C48353 + (C12734 + C12735) * C3366 +
            (C12736 + C12737) * C48334) *
               C48206 * C10335 +
           ((C10691 + C10690) * C3364 -
            ((C10689 + C10688) * C48365 + (C10687 + C10686) * C3363) +
            (C10693 + C10692) * C48362 - (C12735 + C12734) * C3365 -
            (C12737 + C12736) * C48353 +
            (C4605 * C1861 + C4601 * C1870 + C4606 * C1862 + C48305 * C1871) *
                C3366 +
            (C4605 * C1873 + C4601 * C1879 + C4606 * C1874 + C48305 * C1880) *
                C48334) *
               C48206 * C48338) *
              C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C47032 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48100 -
            (C10678 + C10679) * C47024 - (C10680 + C10681) * C48107 +
            (C10682 + C10683) * C47038 + (C10684 + C10685) * C3625) *
               C48206 * C10335 +
           ((C10679 + C10678) * C47032 + (C10681 + C10680) * C48100 -
            (C10683 + C10682) * C47024 - (C10685 + C10684) * C48107 +
            (C12395 + C12394) * C47038 + (C12397 + C12396) * C3625) *
               C48206 * C48338) *
              C48000 * C47978 +
          (((C10686 + C10687) * C47024 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48100 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C47032) +
            (C10688 + C10689) * C48107 - (C10690 + C10691) * C47038 -
            (C10692 + C10693) * C3625) *
               C48206 * C10335 +
           ((C10691 + C10690) * C47024 -
            ((C10689 + C10688) * C48100 + (C10687 + C10686) * C47032) +
            (C10693 + C10692) * C48107 - (C12735 + C12734) * C47038 -
            (C12737 + C12736) * C3625) *
               C48206 * C48338) *
              C48000 * C47986 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C47032 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48100 -
            (C10694 + C10695) * C47024 - (C10696 + C10697) * C48107 +
            (C10698 + C10699) * C47038 + (C10700 + C10701) * C3625) *
               C48206 * C10335 +
           ((C10695 + C10694) * C47032 + (C10697 + C10696) * C48100 -
            (C10699 + C10698) * C47024 - (C10701 + C10700) * C48107 +
            (C4605 * C1857 + C4601 * C1863 + C4606 * C2137 + C48305 * C2138) *
                C47038 +
            (C4605 * C1866 + C4601 * C1875 + C4606 * C2139 + C48305 * C2140) *
                C3625) *
               C48206 * C48338) *
              C48000 * C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C3113 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C3111 -
            (C10678 + C10679) * C3114 - (C10680 + C10681) * C48104) *
               C48206 * C10335 +
           ((C10679 + C10678) * C3113 + (C10681 + C10680) * C3111 -
            (C10683 + C10682) * C3114 - (C10685 + C10684) * C48104) *
               C48206 * C48338) *
              C48000 * C48363 +
          (((C10686 + C10687) * C3114 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C3111 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C3113) +
            (C10688 + C10689) * C48104) *
               C48206 * C10335 +
           ((C10691 + C10690) * C3114 -
            ((C10689 + C10688) * C3111 + (C10687 + C10686) * C3113) +
            (C10693 + C10692) * C48104) *
               C48206 * C48338) *
              C48000 * C48356 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C3113 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C3111 -
            (C10694 + C10695) * C3114 - (C10696 + C10697) * C48104) *
               C48206 * C10335 +
           ((C10695 + C10694) * C3113 + (C10697 + C10696) * C3111 -
            (C10699 + C10698) * C3114 - (C10701 + C10700) * C48104) *
               C48206 * C48338) *
              C48000 * C48343 +
          (((C10970 + C10971) * C3114 -
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C3111 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C3113) +
            (C10972 + C10973) * C48104) *
               C48206 * C10335 +
           ((C4605 * C424 + C4601 * C441 + C4606 * C426 + C48305 * C445) *
                C3114 -
            ((C10973 + C10972) * C3111 + (C10971 + C10970) * C3113) +
            (C4605 * C442 + C4601 * C454 + C4606 * C446 + C48305 * C456) *
                C48104) *
               C48206 * C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C3113 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C3111 -
             (C10678 + C10679) * C3114 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C3113 + (C10681 + C10680) * C3111 -
             (C10683 + C10682) * C3114 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C48357 +
           (((C5463 + C5462) * C3114 -
             ((C4805 + C4804) * C3111 + (C4803 + C4802) * C3113) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C3114 -
             ((C5464 + C5465) * C3111 + (C5462 + C5463) * C3113) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C48345 +
           (((C4809 + C4808) * C3113 + (C4807 + C4806) * C3111 -
             (C5917 + C5916) * C3114 - (C5919 + C5918) * C48104) *
                C48206 * C10335 +
            ((C5916 + C5917) * C3113 + (C5918 + C5919) * C3111 -
             (C5920 + C5921) * C3114 - (C5922 + C5923) * C48104) *
                C48206 * C48338) *
               C48318) *
              C2457 +
          ((((C10686 + C10687) * C3114 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C3111 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C3113) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C3114 -
             ((C10689 + C10688) * C3111 + (C10687 + C10686) * C3113) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C48357 +
           (((C4810 + C4811) * C3113 + (C4812 + C4813) * C3111 -
             (C5467 + C5466) * C3114 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C3113 + (C5468 + C5469) * C3111 -
             (C7006 + C7007) * C3114 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C48345 +
           (((C6269 + C6268) * C3114 -
             ((C4817 + C4816) * C3111 + (C4815 + C4814) * C3113) +
             (C6271 + C6270) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1162 + C4601 * C1177 + C4606 * C1163 + C48305 * C1178) *
                 C3114 -
             ((C6270 + C6271) * C3111 + (C6268 + C6269) * C3113) +
             (C4605 * C1180 + C4601 * C1189 + C4606 * C1181 + C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C48286 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C48062) *
              C557 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C48062 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C48286) *
              C558 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C10695 + C10694) * C116 + (C10697 + C10696) * C48017) * C48206 *
                C48338) *
               C48286 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C48062) *
              C559 +
          ((((C5110 + C5111) * C116 + (C5112 + C5113) * C48017) * C48206 *
                C10335 +
            ((C4605 * C820 + C4601 * C828 + C4606 * C821 + C48305 * C830) *
                 C116 +
             (C4605 * C829 + C4601 * C835 + C4606 * C831 + C48305 * C836) *
                 C48017) *
                C48206 * C48338) *
               C48062 -
           (((C4606 * C444 + C48305 * C455 + C4605 * C440 + C4601 * C453) *
                 C48017 +
             (C4606 * C425 + C48305 * C443 + C4605 * C423 + C4601 * C439) *
                 C116) *
                C48206 * C48338 +
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48017 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C116) *
                C48206 * C10335) *
               C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C1289 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C1290 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C1291 -
           (((C6420 + C6421) * C48017 + (C6418 + C6419) * C116) * C48206 *
                C48338 +
            ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C48206 *
                C10335) *
               C48328) *
              C48272 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C1290 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C1289 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C1291 +
           (((C6065 + C6064) * C116 + (C6063 + C6062) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1548 + C4601 * C1551 + C4606 * C1549 + C48305 * C1552) *
                 C116 +
             (C4605 * C1554 + C4601 * C1557 + C4606 * C1555 + C48305 * C1558) *
                 C48017) *
                C48206 * C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C10678 + C10679) * C666 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C665 + (C10681 + C10680) * C48287 -
             (C10683 + C10682) * C666 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C666 -
             ((C5464 + C5465) * C48287 + (C5462 + C5463) * C665) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C48062) *
              C258 +
          ((((C10686 + C10687) * C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C666 -
             ((C10689 + C10688) * C48287 + (C10687 + C10686) * C665) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C665 + (C5468 + C5469) * C48287 -
             (C7006 + C7007) * C666 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C48062) *
              C259 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C665 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48287 -
             (C10694 + C10695) * C666 - (C10696 + C10697) * C48104) *
                C48206 * C10335 +
            ((C10695 + C10694) * C665 + (C10697 + C10696) * C48287 -
             (C10699 + C10698) * C666 - (C10701 + C10700) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C5471 + C5470) * C666 -
             ((C4821 + C4820) * C48287 + (C4819 + C4818) * C665) +
             (C5473 + C5472) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1155 + C4601 * C1164 + C4606 * C2027 + C48305 * C2028) *
                 C666 -
             ((C5472 + C5473) * C48287 + (C5470 + C5471) * C665) +
             (C4605 * C1167 + C4601 * C1182 + C4606 * C2029 + C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C665 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48287 -
            (C10678 + C10679) * C666 - (C10680 + C10681) * C48104) *
               C48206 * C10335 +
           ((C10679 + C10678) * C665 + (C10681 + C10680) * C48287 -
            (C10683 + C10682) * C666 - (C10685 + C10684) * C48104) *
               C48206 * C48338) *
              C1289 +
          (((C5463 + C5462) * C666 -
            ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
            (C5465 + C5464) * C48104) *
               C48206 * C10335 +
           ((C5912 + C5913) * C666 -
            ((C5464 + C5465) * C48287 + (C5462 + C5463) * C665) +
            (C5914 + C5915) * C48104) *
               C48206 * C48338) *
              C1290 +
          (((C4809 + C4808) * C665 + (C4807 + C4806) * C48287 -
            (C5917 + C5916) * C666 - (C5919 + C5918) * C48104) *
               C48206 * C10335 +
           ((C5916 + C5917) * C665 + (C5918 + C5919) * C48287 -
            (C5920 + C5921) * C666 - (C5922 + C5923) * C48104) *
               C48206 * C48338) *
              C1291 +
          (((C6419 + C6418) * C666 -
            ((C5729 + C5728) * C48287 + (C5727 + C5726) * C665) +
            (C6421 + C6420) * C48104) *
               C48206 * C10335 +
           ((C4605 * C5879 + C4601 * C5881 + C4606 * C5880 + C48305 * C5882) *
                C666 -
            ((C6420 + C6421) * C48287 + (C6418 + C6419) * C665) +
            (C4605 * C5883 + C4601 * C5885 + C4606 * C5884 + C48305 * C5886) *
                C48104) *
               C48206 * C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C4605 * C419 + C4601 * C429 + C4606 * C418 + C48305 * C428) *
                 C116 +
             (C4605 * C432 + C4601 * C449 + C4606 * C431 + C48305 * C448) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C48345 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C48318) *
              C258 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C48345 -
           (((C4606 * C430 + C48305 * C447 + C4605 * C431 + C4601 * C448) *
                 C48017 +
             (C4606 * C417 + C48305 * C427 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C48206 * C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C48357 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C48318) *
              C259 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C4605 * C417 + C4601 * C427 + C4606 * C423 + C48305 * C439) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C440 + C48305 * C453) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C48345 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C116 +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C10335 +
           ((C4605 * C419 + C4601 * C429 + C4606 * C418 + C48305 * C428) *
                C116 +
            (C4605 * C432 + C4601 * C449 + C4606 * C431 + C48305 * C448) *
                C48017) *
               C48206 * C48338) *
              C48000 * C108 -
          (((C4606 * C430 + C48305 * C447 + C4605 * C431 + C4601 * C448) *
                C48017 +
            (C4606 * C417 + C48305 * C427 + C4605 * C418 + C4601 * C428) *
                C116) *
               C48206 * C48338 +
           ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                C48017 +
            (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C48206 * C10335) *
              C48000 * C109 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48017) *
               C48206 * C10335 +
           ((C4605 * C417 + C4601 * C427 + C4606 * C423 + C48305 * C439) *
                C116 +
            (C4605 * C430 + C4601 * C447 + C4606 * C440 + C48305 * C453) *
                C48017) *
               C48206 * C48338) *
              C48000 * C110 -
          (((C4606 * C444 + C48305 * C455 + C4605 * C440 + C4601 * C453) *
                C48017 +
            (C4606 * C425 + C48305 * C443 + C4605 * C423 + C4601 * C439) *
                C116) *
               C48206 * C48338 +
           ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                C48017 +
            (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C48206 * C10335) *
              C48000 * C111 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48305 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48305 * C143) *
                C48017) *
               C48206 * C10335 +
           ((C4605 * C425 + C4601 * C443 + C4606 * C667 + C48305 * C668) *
                C116 +
            (C4605 * C444 + C4601 * C455 + C4606 * C669 + C48305 * C670) *
                C48017) *
               C48206 * C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C414 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48358 -
            (C10678 + C10679) * C415 - (C10680 + C10681) * C48347 +
            (C10682 + C10683) * C416 + (C10684 + C10685) * C48321) *
               C48206 * C10335 +
           ((C10679 + C10678) * C414 + (C10681 + C10680) * C48358 -
            (C10683 + C10682) * C415 - (C10685 + C10684) * C48347 +
            (C4605 * C1859 + C4601 * C1865 + C4606 * C1858 + C48305 * C1864) *
                C416 +
            (C4605 * C1868 + C4601 * C1877 + C4606 * C1867 + C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C258 +
          (((C10686 + C10687) * C415 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48358 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C414) +
            (C10688 + C10689) * C48347 - (C10690 + C10691) * C416 -
            (C10692 + C10693) * C48321) *
               C48206 * C10335 +
           ((C10691 + C10690) * C415 -
            ((C10689 + C10688) * C48358 + (C10687 + C10686) * C414) +
            (C10693 + C10692) * C48347 -
            (C4606 * C1857 + C48305 * C1863 + C4605 * C1858 + C4601 * C1864) *
                C416 -
            (C4606 * C1866 + C48305 * C1875 + C4605 * C1867 + C4601 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C259 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C414 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48358 -
            (C10694 + C10695) * C415 - (C10696 + C10697) * C48347 +
            (C10698 + C10699) * C416 + (C10700 + C10701) * C48321) *
               C48206 * C10335 +
           ((C10695 + C10694) * C414 + (C10697 + C10696) * C48358 -
            (C10699 + C10698) * C415 - (C10701 + C10700) * C48347 +
            (C4605 * C1857 + C4601 * C1863 + C4606 * C2137 + C48305 * C2138) *
                C416 +
            (C4605 * C1866 + C4601 * C1875 + C4606 * C2139 + C48305 * C2140) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C948 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C48318) *
              C48354 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C948 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C947 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C48318) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C10695 + C10694) * C116 + (C10697 + C10696) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C948 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C116 +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C10335 +
           ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
               C48338) *
              C1015 -
          (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
               C48338 +
           ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
               C10335) *
              C1016 +
          (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
               C10335 +
           ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
               C48338) *
              C1017 -
          (((C6420 + C6421) * C48017 + (C6418 + C6419) * C116) * C48206 *
               C48338 +
           ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C48206 *
               C10335) *
              C1018 +
          (((C5733 + C5732) * C116 + (C5731 + C5730) * C48017) * C48206 *
               C10335 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48305 * C6404) *
                C116 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48305 * C6408) *
                C48017) *
               C48206 * C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C414 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48358 -
            (C10678 + C10679) * C415 - (C10680 + C10681) * C48347 +
            (C10682 + C10683) * C416 + (C10684 + C10685) * C48321) *
               C48206 * C10335 +
           ((C10679 + C10678) * C414 + (C10681 + C10680) * C48358 -
            (C10683 + C10682) * C415 - (C10685 + C10684) * C48347 +
            (C4605 * C1859 + C4601 * C1865 + C4606 * C1858 + C48305 * C1864) *
                C416 +
            (C4605 * C1868 + C4601 * C1877 + C4606 * C1867 + C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C947 +
          (((C5463 + C5462) * C415 -
            ((C4805 + C4804) * C48358 + (C4803 + C4802) * C414) +
            (C5465 + C5464) * C48347 - (C5913 + C5912) * C416 -
            (C5915 + C5914) * C48321) *
               C48206 * C10335 +
           ((C5912 + C5913) * C415 -
            ((C5464 + C5465) * C48358 + (C5462 + C5463) * C414) +
            (C5914 + C5915) * C48347 - (C7286 + C7287) * C416 -
            (C7288 + C7289) * C48321) *
               C48206 * C48338) *
              C948 +
          (((C4809 + C4808) * C414 + (C4807 + C4806) * C48358 -
            (C5917 + C5916) * C415 - (C5919 + C5918) * C48347 +
            (C5921 + C5920) * C416 + (C5923 + C5922) * C48321) *
               C48206 * C10335 +
           ((C5916 + C5917) * C414 + (C5918 + C5919) * C48358 -
            (C5920 + C5921) * C415 - (C5922 + C5923) * C48347 +
            (C4605 * C7269 + C4601 * C7271 + C4606 * C7270 + C48305 * C7272) *
                C416 +
            (C4605 * C7273 + C4601 * C7275 + C4606 * C7274 + C48305 * C7276) *
                C48321) *
               C48206 * C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C665 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48287 -
            (C10678 + C10679) * C666 - (C10680 + C10681) * C48104) *
               C48206 * C10335 +
           ((C10679 + C10678) * C665 + (C10681 + C10680) * C48287 -
            (C10683 + C10682) * C666 - (C10685 + C10684) * C48104) *
               C48206 * C48338) *
              C48000 * C557 +
          (((C10686 + C10687) * C666 -
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48287 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C665) +
            (C10688 + C10689) * C48104) *
               C48206 * C10335 +
           ((C10691 + C10690) * C666 -
            ((C10689 + C10688) * C48287 + (C10687 + C10686) * C665) +
            (C10693 + C10692) * C48104) *
               C48206 * C48338) *
              C48000 * C558 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C665 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48287 -
            (C10694 + C10695) * C666 - (C10696 + C10697) * C48104) *
               C48206 * C10335 +
           ((C10695 + C10694) * C665 + (C10697 + C10696) * C48287 -
            (C10699 + C10698) * C666 - (C10701 + C10700) * C48104) *
               C48206 * C48338) *
              C48000 * C559 +
          (((C10970 + C10971) * C666 -
            ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                 C48287 +
             (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                 C665) +
            (C10972 + C10973) * C48104) *
               C48206 * C10335 +
           ((C4605 * C424 + C4601 * C441 + C4606 * C426 + C48305 * C445) *
                C666 -
            ((C10973 + C10972) * C48287 + (C10971 + C10970) * C665) +
            (C4605 * C442 + C4601 * C454 + C4606 * C446 + C48305 * C456) *
                C48104) *
               C48206 * C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C665 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48287 -
             (C10678 + C10679) * C666 - (C10680 + C10681) * C48104) *
                C48206 * C10335 +
            ((C10679 + C10678) * C665 + (C10681 + C10680) * C48287 -
             (C10683 + C10682) * C666 - (C10685 + C10684) * C48104) *
                C48206 * C48338) *
               C947 +
           (((C5463 + C5462) * C666 -
             ((C4805 + C4804) * C48287 + (C4803 + C4802) * C665) +
             (C5465 + C5464) * C48104) *
                C48206 * C10335 +
            ((C5912 + C5913) * C666 -
             ((C5464 + C5465) * C48287 + (C5462 + C5463) * C665) +
             (C5914 + C5915) * C48104) *
                C48206 * C48338) *
               C948 +
           (((C4809 + C4808) * C665 + (C4807 + C4806) * C48287 -
             (C5917 + C5916) * C666 - (C5919 + C5918) * C48104) *
                C48206 * C10335 +
            ((C5916 + C5917) * C665 + (C5918 + C5919) * C48287 -
             (C5920 + C5921) * C666 - (C5922 + C5923) * C48104) *
                C48206 * C48338) *
               C48318) *
              C48272 +
          ((((C10686 + C10687) * C666 -
             ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                  C48287 +
              (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                  C665) +
             (C10688 + C10689) * C48104) *
                C48206 * C10335 +
            ((C10691 + C10690) * C666 -
             ((C10689 + C10688) * C48287 + (C10687 + C10686) * C665) +
             (C10693 + C10692) * C48104) *
                C48206 * C48338) *
               C947 +
           (((C4810 + C4811) * C665 + (C4812 + C4813) * C48287 -
             (C5467 + C5466) * C666 - (C5469 + C5468) * C48104) *
                C48206 * C10335 +
            ((C5466 + C5467) * C665 + (C5468 + C5469) * C48287 -
             (C7006 + C7007) * C666 - (C7008 + C7009) * C48104) *
                C48206 * C48338) *
               C948 +
           (((C6269 + C6268) * C666 -
             ((C4817 + C4816) * C48287 + (C4815 + C4814) * C665) +
             (C6271 + C6270) * C48104) *
                C48206 * C10335 +
            ((C4605 * C1162 + C4601 * C1177 + C4606 * C1163 + C48305 * C1178) *
                 C666 -
             ((C6270 + C6271) * C48287 + (C6268 + C6269) * C665) +
             (C4605 * C1180 + C4601 * C1189 + C4606 * C1181 + C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C10335 +
           ((C4605 * C419 + C4601 * C429 + C4606 * C418 + C48305 * C428) *
                C116 +
            (C4605 * C432 + C4601 * C449 + C4606 * C431 + C48305 * C448) *
                C48017) *
               C48206 * C48338) *
              C48000 * C108 -
          (((C4606 * C430 + C48305 * C447 + C4605 * C431 + C4601 * C448) *
                C48017 +
            (C4606 * C417 + C48305 * C427 + C4605 * C418 + C4601 * C428) *
                C116) *
               C48206 * C48338 +
           ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                C48017 +
            (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                C116) *
               C48206 * C10335) *
              C48000 * C109 +
          (((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                C116 +
            (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                C48017) *
               C48206 * C10335 +
           ((C4605 * C417 + C4601 * C427 + C4606 * C423 + C48305 * C439) *
                C116 +
            (C4605 * C430 + C4601 * C447 + C4606 * C440 + C48305 * C453) *
                C48017) *
               C48206 * C48338) *
              C48000 * C110 -
          (((C4606 * C444 + C48305 * C455 + C4605 * C440 + C4601 * C453) *
                C48017 +
            (C4606 * C425 + C48305 * C443 + C4605 * C423 + C4601 * C439) *
                C116) *
               C48206 * C48338 +
           ((C4606 * C133 + C48305 * C142 + C4605 * C130 + C4601 * C141) *
                C48017 +
            (C4606 * C121 + C48305 * C132 + C4605 * C120 + C4601 * C131) *
                C116) *
               C48206 * C10335) *
              C48000 * C111 +
          (((C4605 * C121 + C4601 * C132 + C4606 * C122 + C48305 * C135) *
                C116 +
            (C4605 * C133 + C4601 * C142 + C4606 * C134 + C48305 * C143) *
                C48017) *
               C48206 * C10335 +
           ((C4605 * C425 + C4601 * C443 + C4606 * C667 + C48305 * C668) *
                C116 +
            (C4605 * C444 + C4601 * C455 + C4606 * C669 + C48305 * C670) *
                C48017) *
               C48206 * C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C4605 * C419 + C4601 * C429 + C4606 * C418 + C48305 * C428) *
                 C116 +
             (C4605 * C432 + C4601 * C449 + C4606 * C431 + C48305 * C448) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C48345 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C48318) *
              C258 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C48345 -
           (((C4606 * C430 + C48305 * C447 + C4605 * C431 + C4601 * C448) *
                 C48017 +
             (C4606 * C417 + C48305 * C427 + C4605 * C418 + C4601 * C428) *
                 C116) *
                C48206 * C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C48357 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C48318) *
              C259 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C4605 * C417 + C4601 * C427 + C4606 * C423 + C48305 * C439) *
                 C116 +
             (C4605 * C430 + C4601 * C447 + C4606 * C440 + C48305 * C453) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C48345 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C116 +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                 C116 +
             (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C10335 +
            ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
                C48338 +
            ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
                C10335) *
               C948 +
           (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
                C10335 +
            ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
                C48338) *
               C48318) *
              C48354 +
          ((((C4810 + C4811) * C116 + (C4812 + C4813) * C48017) * C48206 *
                C10335 +
            ((C5466 + C5467) * C116 + (C5468 + C5469) * C48017) * C48206 *
                C48338) *
               C948 -
           (((C10689 + C10688) * C48017 + (C10687 + C10686) * C116) * C48206 *
                C48338 +
            ((C4606 * C129 + C48305 * C140 + C4605 * C128 + C4601 * C139) *
                 C48017 +
             (C4606 * C119 + C48305 * C126 + C4605 * C118 + C4601 * C125) *
                 C116) *
                C48206 * C10335) *
               C947 -
           (((C6270 + C6271) * C48017 + (C6268 + C6269) * C116) * C48206 *
                C48338 +
            ((C4817 + C4816) * C48017 + (C4815 + C4814) * C116) * C48206 *
                C10335) *
               C48318) *
              C48341 +
          ((((C4605 * C119 + C4601 * C126 + C4606 * C120 + C48305 * C131) *
                 C116 +
             (C4605 * C129 + C4601 * C140 + C4606 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C10335 +
            ((C10695 + C10694) * C116 + (C10697 + C10696) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C5472 + C5473) * C48017 + (C5470 + C5471) * C116) * C48206 *
                C48338 +
            ((C4821 + C4820) * C48017 + (C4819 + C4818) * C116) * C48206 *
                C10335) *
               C948 +
           (((C4825 + C4824) * C116 + (C4823 + C4822) * C48017) * C48206 *
                C10335 +
            ((C4605 * C1158 + C4601 * C1170 + C4606 * C1445 + C48305 * C1446) *
                 C116 +
             (C4605 * C1173 + C4601 * C1185 + C4606 * C1447 + C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4605 * C117 + C4601 * C124 + C4606 * C118 + C48305 * C125) *
                C116 +
            (C4605 * C127 + C4601 * C138 + C4606 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C10335 +
           ((C10679 + C10678) * C116 + (C10681 + C10680) * C48017) * C48206 *
               C48338) *
              C1015 -
          (((C5464 + C5465) * C48017 + (C5462 + C5463) * C116) * C48206 *
               C48338 +
           ((C4805 + C4804) * C48017 + (C4803 + C4802) * C116) * C48206 *
               C10335) *
              C1016 +
          (((C4809 + C4808) * C116 + (C4807 + C4806) * C48017) * C48206 *
               C10335 +
           ((C5916 + C5917) * C116 + (C5918 + C5919) * C48017) * C48206 *
               C48338) *
              C1017 -
          (((C6420 + C6421) * C48017 + (C6418 + C6419) * C116) * C48206 *
               C48338 +
           ((C5729 + C5728) * C48017 + (C5727 + C5726) * C116) * C48206 *
               C10335) *
              C1018 +
          (((C5733 + C5732) * C116 + (C5731 + C5730) * C48017) * C48206 *
               C10335 +
           ((C4605 * C6401 + C4601 * C6403 + C4606 * C6402 + C48305 * C6404) *
                C116 +
            (C4605 * C6405 + C4601 * C6407 + C4606 * C6406 + C48305 * C6408) *
                C48017) *
               C48206 * C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C48058 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C48065 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C17030 + C17031) * C116 + (C17032 + C17033) * C48017) * C48336) *
               C48221 * C2717) *
              C47978 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C48065 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C48058 -
           (((C17358 + C17359) * C48017 + (C17360 + C17361) * C116) * C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C2717) *
              C47986 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C48058 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C48065 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C15915 +
            ((C15917 * C1021 + C15913 * C1030 + C15918 * C1295 +
              C48305 * C1296) *
                 C116 +
             (C15917 * C1027 + C15913 * C1039 + C15918 * C1297 +
              C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C2717) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C666 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C665 + (C16116 + C16117) * C48287 -
             (C16774 + C16775) * C666 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C48058 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C17212 + C17213) * C666 -
             ((C16118 + C16119) * C48287 + (C16120 + C16121) * C665) +
             (C17214 + C17215) * C48104) *
                C48336) *
               C48221 * C48065 +
           (((C16121 + C16120) * C665 + (C16119 + C16118) * C48287 -
             (C17213 + C17212) * C666 - (C17215 + C17214) * C48104) *
                C15915 +
            ((C17030 + C17031) * C665 + (C17032 + C17033) * C48287 -
             (C17706 + C17707) * C666 - (C17708 + C17709) * C48104) *
                C48336) *
               C48221 * C2717) *
              C2457 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C666 -
             ((C16125 + C16124) * C48287 + (C16123 + C16122) * C665) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C48058 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C665 + (C16128 + C16129) * C48287 -
             (C17564 + C17565) * C666 - (C17566 + C17567) * C48104) *
                C48336) *
               C48221 * C48065 +
           (((C17565 + C17564) * C666 -
             ((C16129 + C16128) * C48287 + (C16127 + C16126) * C665) +
             (C17567 + C17566) * C48104) *
                C15915 +
            ((C15917 * C1548 + C15913 * C1551 + C15918 * C1549 +
              C48305 * C1552) *
                 C666 -
             ((C17358 + C17359) * C48287 + (C17360 + C17361) * C665) +
             (C15917 * C1554 + C15913 * C1557 + C15918 * C1555 +
              C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C48364 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C48360 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C17030 + C17031) * C116 + (C17032 + C17033) * C48017) * C48336) *
               C48221 * C48350 -
           (((C17034 + C17035) * C48017 + (C17036 + C17037) * C116) * C48336 +
            ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C15915) *
               C48221 * C48328) *
              C2457 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C48360 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C48364 -
           (((C17358 + C17359) * C48017 + (C17360 + C17361) * C116) * C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C48350 +
           (((C17361 + C17360) * C116 + (C17359 + C17358) * C48017) * C15915 +
            ((C15917 * C1025 + C15913 * C1034 + C15918 * C1026 +
              C48305 * C1035) *
                 C116 +
             (C15917 * C1037 + C15913 * C1043 + C15918 * C1038 +
              C48305 * C1044) *
                 C48017) *
                C48336) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C2349 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C48062) *
              C48363 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C48062 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C2349) *
              C48356 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C2349 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C48062) *
              C48343 +
          ((((C16422 + C16423) * C116 + (C16424 + C16425) * C48017) * C15915 +
            ((C15917 * C268 + C15913 * C286 + C15918 * C270 + C48305 * C289) *
                 C116 +
             (C15917 * C285 + C15913 * C298 + C15918 * C290 + C48305 * C300) *
                 C48017) *
                C48336) *
               C48221 * C48062 -
           (((C16425 + C16424) * C48017 + (C16423 + C16422) * C116) * C48336 +
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48017 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C15915) *
               C48221 * C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C414 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48358 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C415 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48347 +
             (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                 C416 +
             (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                 C48321) *
                C15915 +
            ((C16114 + C16115) * C414 + (C16116 + C16117) * C48358 -
             (C16774 + C16775) * C415 - (C16776 + C16777) * C48347 +
             (C17208 + C17209) * C416 + (C17210 + C17211) * C48321) *
                C48336) *
               C48221 * C2349 +
           (((C16775 + C16774) * C415 -
             ((C16117 + C16116) * C48358 + (C16115 + C16114) * C414) +
             (C16777 + C16776) * C48347 - (C17209 + C17208) * C416 -
             (C17211 + C17210) * C48321) *
                C15915 +
            ((C17212 + C17213) * C415 -
             ((C16118 + C16119) * C48358 + (C16120 + C16121) * C414) +
             (C17214 + C17215) * C48347 - (C17216 + C17217) * C416 -
             (C17218 + C17219) * C48321) *
                C48336) *
               C48221 * C48062) *
              C2457 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C415 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48358 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C414) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48347 -
             (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                 C416 -
             (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                 C48321) *
                C15915 +
            ((C16778 + C16779) * C415 -
             ((C16125 + C16124) * C48358 + (C16123 + C16122) * C414) +
             (C16780 + C16781) * C48347 - (C18286 + C18287) * C416 -
             (C18288 + C18289) * C48321) *
                C48336) *
               C48221 * C2349 +
           (((C16122 + C16123) * C414 + (C16124 + C16125) * C48358 -
             (C16779 + C16778) * C415 - (C16781 + C16780) * C48347 +
             (C18287 + C18286) * C416 + (C18289 + C18288) * C48321) *
                C15915 +
            ((C16126 + C16127) * C414 + (C16128 + C16129) * C48358 -
             (C17564 + C17565) * C415 - (C17566 + C17567) * C48347 +
             (C15917 * C1162 + C15913 * C1177 + C15918 * C1163 +
              C48305 * C1178) *
                 C416 +
             (C15917 * C1180 + C15913 * C1189 + C15918 * C1181 +
              C48305 * C1190) *
                 C48321) *
                C48336) *
               C48221 * C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C666 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C665 + (C16116 + C16117) * C48287 -
             (C16774 + C16775) * C666 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C17212 + C17213) * C666 -
             ((C16118 + C16119) * C48287 + (C16120 + C16121) * C665) +
             (C17214 + C17215) * C48104) *
                C48336) *
               C48221 * C48062) *
              C47978 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C666 -
             ((C16125 + C16124) * C48287 + (C16123 + C16122) * C665) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C665 + (C16128 + C16129) * C48287 -
             (C17564 + C17565) * C666 - (C17566 + C17567) * C48104) *
                C48336) *
               C48221 * C48062) *
              C47986 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C665 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48287 -
             (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                 C666 -
             (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                 C48104) *
                C15915 +
            ((C16130 + C16131) * C665 + (C16132 + C16133) * C48287 -
             (C16782 + C16783) * C666 - (C16784 + C16785) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C16783 + C16782) * C666 -
             ((C16133 + C16132) * C48287 + (C16131 + C16130) * C665) +
             (C16785 + C16784) * C48104) *
                C15915 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C666 -
             ((C16134 + C16135) * C48287 + (C16136 + C16137) * C665) +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C2349 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C48062) *
              C48363 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C48062 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C2349) *
              C48356 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C2349 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C48062) *
              C48343 +
          ((((C16422 + C16423) * C116 + (C16424 + C16425) * C48017) * C15915 +
            ((C15917 * C268 + C15913 * C286 + C15918 * C270 + C48305 * C289) *
                 C116 +
             (C15917 * C285 + C15913 * C298 + C15918 * C290 + C48305 * C300) *
                 C48017) *
                C48336) *
               C48221 * C48062 -
           (((C16425 + C16424) * C48017 + (C16423 + C16422) * C116) * C48336 +
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48017 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C15915) *
               C48221 * C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C48364 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C48360 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C17030 + C17031) * C116 + (C17032 + C17033) * C48017) * C48336) *
               C48221 * C48350 -
           (((C17034 + C17035) * C48017 + (C17036 + C17037) * C116) * C48336 +
            ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C15915) *
               C48221 * C48328) *
              C2457 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C48360 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C48364 -
           (((C17358 + C17359) * C48017 + (C17360 + C17361) * C116) * C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C48350 +
           (((C17361 + C17360) * C116 + (C17359 + C17358) * C48017) * C15915 +
            ((C15917 * C1025 + C15913 * C1034 + C15918 * C1026 +
              C48305 * C1035) *
                 C116 +
             (C15917 * C1037 + C15913 * C1043 + C15918 * C1038 +
              C48305 * C1044) *
                 C48017) *
                C48336) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C3114 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C3113 + (C16116 + C16117) * C3111 -
             (C16774 + C16775) * C3114 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C48058 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C17212 + C17213) * C3114 -
             ((C16118 + C16119) * C3111 + (C16120 + C16121) * C3113) +
             (C17214 + C17215) * C48104) *
                C48336) *
               C48221 * C48065 +
           (((C16121 + C16120) * C3113 + (C16119 + C16118) * C3111 -
             (C17213 + C17212) * C3114 - (C17215 + C17214) * C48104) *
                C15915 +
            ((C17030 + C17031) * C3113 + (C17032 + C17033) * C3111 -
             (C17706 + C17707) * C3114 - (C17708 + C17709) * C48104) *
                C48336) *
               C48221 * C2717) *
              C48272 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C3114 -
             ((C16125 + C16124) * C3111 + (C16123 + C16122) * C3113) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C48058 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C3113 + (C16128 + C16129) * C3111 -
             (C17564 + C17565) * C3114 - (C17566 + C17567) * C48104) *
                C48336) *
               C48221 * C48065 +
           (((C17565 + C17564) * C3114 -
             ((C16129 + C16128) * C3111 + (C16127 + C16126) * C3113) +
             (C17567 + C17566) * C48104) *
                C15915 +
            ((C15917 * C1548 + C15913 * C1551 + C15918 * C1549 +
              C48305 * C1552) *
                 C3114 -
             ((C17358 + C17359) * C3111 + (C17360 + C17361) * C3113) +
             (C15917 * C1554 + C15913 * C1557 + C15918 * C1555 +
              C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C47032 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48100 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C47024 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48107 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C47038 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C3625) *
               C15915 +
           ((C16114 + C16115) * C47032 + (C16116 + C16117) * C48100 -
            (C16774 + C16775) * C47024 - (C16776 + C16777) * C48107 +
            (C17208 + C17209) * C47038 + (C17210 + C17211) * C3625) *
               C48336) *
              C48221 * C48058 +
          (((C16775 + C16774) * C47024 -
            ((C16117 + C16116) * C48100 + (C16115 + C16114) * C47032) +
            (C16777 + C16776) * C48107 - (C17209 + C17208) * C47038 -
            (C17211 + C17210) * C3625) *
               C15915 +
           ((C17212 + C17213) * C47024 -
            ((C16118 + C16119) * C48100 + (C16120 + C16121) * C47032) +
            (C17214 + C17215) * C48107 - (C17216 + C17217) * C47038 -
            (C17218 + C17219) * C3625) *
               C48336) *
              C48221 * C48065 +
          (((C16121 + C16120) * C47032 + (C16119 + C16118) * C48100 -
            (C17213 + C17212) * C47024 - (C17215 + C17214) * C48107 +
            (C17217 + C17216) * C47038 + (C17219 + C17218) * C3625) *
               C15915 +
           ((C17030 + C17031) * C47032 + (C17032 + C17033) * C48100 -
            (C17706 + C17707) * C47024 - (C17708 + C17709) * C48107 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48305 * C5882) *
                C47038 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48305 * C5886) *
                C3625) *
               C48336) *
              C48221 * C2717) *
         C47973) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3113 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C3111 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C3114 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48104) *
               C15915 +
           ((C16114 + C16115) * C3113 + (C16116 + C16117) * C3111 -
            (C16774 + C16775) * C3114 - (C16776 + C16777) * C48104) *
               C48336) *
              C48221 * C48364 +
          (((C16775 + C16774) * C3114 -
            ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
            (C16777 + C16776) * C48104) *
               C15915 +
           ((C17212 + C17213) * C3114 -
            ((C16118 + C16119) * C3111 + (C16120 + C16121) * C3113) +
            (C17214 + C17215) * C48104) *
               C48336) *
              C48221 * C48360 +
          (((C16121 + C16120) * C3113 + (C16119 + C16118) * C3111 -
            (C17213 + C17212) * C3114 - (C17215 + C17214) * C48104) *
               C15915 +
           ((C17030 + C17031) * C3113 + (C17032 + C17033) * C3111 -
            (C17706 + C17707) * C3114 - (C17708 + C17709) * C48104) *
               C48336) *
              C48221 * C48350 +
          (((C17707 + C17706) * C3114 -
            ((C17033 + C17032) * C3111 + (C17031 + C17030) * C3113) +
            (C17709 + C17708) * C48104) *
               C15915 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48305 * C6404) *
                C3114 -
            ((C17034 + C17035) * C3111 + (C17036 + C17037) * C3113) +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48305 * C6408) *
                C48104) *
               C48336) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C3114 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C3113 + (C16116 + C16117) * C3111 -
             (C16774 + C16775) * C3114 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C17212 + C17213) * C3114 -
             ((C16118 + C16119) * C3111 + (C16120 + C16121) * C3113) +
             (C17214 + C17215) * C48104) *
                C48336) *
               C48221 * C48062) *
              C48354 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C3114 -
             ((C16125 + C16124) * C3111 + (C16123 + C16122) * C3113) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C3113 + (C16128 + C16129) * C3111 -
             (C17564 + C17565) * C3114 - (C17566 + C17567) * C48104) *
                C48336) *
               C48221 * C48062) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C3113 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C3111 -
             (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                 C3114 -
             (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                 C48104) *
                C15915 +
            ((C16130 + C16131) * C3113 + (C16132 + C16133) * C3111 -
             (C16782 + C16783) * C3114 - (C16784 + C16785) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C16783 + C16782) * C3114 -
             ((C16133 + C16132) * C3111 + (C16131 + C16130) * C3113) +
             (C16785 + C16784) * C48104) *
                C15915 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C3114 -
             ((C16134 + C16135) * C3111 + (C16136 + C16137) * C3113) +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3363 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48365 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C3364 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48362 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C3365 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C48353 -
            (C15918 * C1858 + C48305 * C1864 + C15917 * C1859 +
             C15913 * C1865) *
                C3366 -
            (C15918 * C1867 + C48305 * C1876 + C15917 * C1868 +
             C15913 * C1877) *
                C48334) *
               C15915 +
           ((C16114 + C16115) * C3363 + (C16116 + C16117) * C48365 -
            (C16774 + C16775) * C3364 - (C16776 + C16777) * C48362 +
            (C17208 + C17209) * C3365 + (C17210 + C17211) * C48353 -
            (C18558 + C18559) * C3366 - (C18560 + C18561) * C48334) *
               C48336) *
              C48221 * C2349 +
          (((C16775 + C16774) * C3364 -
            ((C16117 + C16116) * C48365 + (C16115 + C16114) * C3363) +
            (C16777 + C16776) * C48362 - (C17209 + C17208) * C3365 -
            (C17211 + C17210) * C48353 + (C18559 + C18558) * C3366 +
            (C18561 + C18560) * C48334) *
               C15915 +
           ((C17212 + C17213) * C3364 -
            ((C16118 + C16119) * C48365 + (C16120 + C16121) * C3363) +
            (C17214 + C17215) * C48362 - (C17216 + C17217) * C3365 -
            (C17218 + C17219) * C48353 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48305 * C7272) *
                C3366 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48305 * C7276) *
                C48334) *
               C48336) *
              C48221 * C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C47032 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48100 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C47024 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48107 +
             (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                 C47038 +
             (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                 C3625) *
                C15915 +
            ((C16114 + C16115) * C47032 + (C16116 + C16117) * C48100 -
             (C16774 + C16775) * C47024 - (C16776 + C16777) * C48107 +
             (C17208 + C17209) * C47038 + (C17210 + C17211) * C3625) *
                C48336) *
               C48221 * C2349 +
           (((C16775 + C16774) * C47024 -
             ((C16117 + C16116) * C48100 + (C16115 + C16114) * C47032) +
             (C16777 + C16776) * C48107 - (C17209 + C17208) * C47038 -
             (C17211 + C17210) * C3625) *
                C15915 +
            ((C17212 + C17213) * C47024 -
             ((C16118 + C16119) * C48100 + (C16120 + C16121) * C47032) +
             (C17214 + C17215) * C48107 - (C17216 + C17217) * C47038 -
             (C17218 + C17219) * C3625) *
                C48336) *
               C48221 * C48062) *
              C48272 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C47024 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48100 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C47032) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48107 -
             (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                 C47038 -
             (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                 C3625) *
                C15915 +
            ((C16778 + C16779) * C47024 -
             ((C16125 + C16124) * C48100 + (C16123 + C16122) * C47032) +
             (C16780 + C16781) * C48107 - (C18286 + C18287) * C47038 -
             (C18288 + C18289) * C3625) *
                C48336) *
               C48221 * C2349 +
           (((C16122 + C16123) * C47032 + (C16124 + C16125) * C48100 -
             (C16779 + C16778) * C47024 - (C16781 + C16780) * C48107 +
             (C18287 + C18286) * C47038 + (C18289 + C18288) * C3625) *
                C15915 +
            ((C16126 + C16127) * C47032 + (C16128 + C16129) * C48100 -
             (C17564 + C17565) * C47024 - (C17566 + C17567) * C48107 +
             (C15917 * C1162 + C15913 * C1177 + C15918 * C1163 +
              C48305 * C1178) *
                 C47038 +
             (C15917 * C1180 + C15913 * C1189 + C15918 * C1181 +
              C48305 * C1190) *
                 C3625) *
                C48336) *
               C48221 * C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C3114 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C3113 + (C16116 + C16117) * C3111 -
             (C16774 + C16775) * C3114 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C17212 + C17213) * C3114 -
             ((C16118 + C16119) * C3111 + (C16120 + C16121) * C3113) +
             (C17214 + C17215) * C48104) *
                C48336) *
               C48221 * C48062) *
              C48354 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C3114 -
             ((C16125 + C16124) * C3111 + (C16123 + C16122) * C3113) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C3113 + (C16128 + C16129) * C3111 -
             (C17564 + C17565) * C3114 - (C17566 + C17567) * C48104) *
                C48336) *
               C48221 * C48062) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C3113 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C3111 -
             (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                 C3114 -
             (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                 C48104) *
                C15915 +
            ((C16130 + C16131) * C3113 + (C16132 + C16133) * C3111 -
             (C16782 + C16783) * C3114 - (C16784 + C16785) * C48104) *
                C48336) *
               C48221 * C2349 +
           (((C16783 + C16782) * C3114 -
             ((C16133 + C16132) * C3111 + (C16131 + C16130) * C3113) +
             (C16785 + C16784) * C48104) *
                C15915 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C3114 -
             ((C16134 + C16135) * C3111 + (C16136 + C16137) * C3113) +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3113 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C3111 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C3114 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48104) *
               C15915 +
           ((C16114 + C16115) * C3113 + (C16116 + C16117) * C3111 -
            (C16774 + C16775) * C3114 - (C16776 + C16777) * C48104) *
               C48336) *
              C48221 * C48364 +
          (((C16775 + C16774) * C3114 -
            ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
            (C16777 + C16776) * C48104) *
               C15915 +
           ((C17212 + C17213) * C3114 -
            ((C16118 + C16119) * C3111 + (C16120 + C16121) * C3113) +
            (C17214 + C17215) * C48104) *
               C48336) *
              C48221 * C48360 +
          (((C16121 + C16120) * C3113 + (C16119 + C16118) * C3111 -
            (C17213 + C17212) * C3114 - (C17215 + C17214) * C48104) *
               C15915 +
           ((C17030 + C17031) * C3113 + (C17032 + C17033) * C3111 -
            (C17706 + C17707) * C3114 - (C17708 + C17709) * C48104) *
               C48336) *
              C48221 * C48350 +
          (((C17707 + C17706) * C3114 -
            ((C17033 + C17032) * C3111 + (C17031 + C17030) * C3113) +
            (C17709 + C17708) * C48104) *
               C15915 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48305 * C6404) *
                C3114 -
            ((C17034 + C17035) * C3111 + (C17036 + C17037) * C3113) +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48305 * C6408) *
                C48104) *
               C48336) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C1289 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C1290 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C17030 + C17031) * C116 + (C17032 + C17033) * C48017) * C48336) *
               C48221 * C1291 -
           (((C17034 + C17035) * C48017 + (C17036 + C17037) * C116) * C48336 +
            ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C15915) *
               C48221 * C48328) *
              C48272 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C1290 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C1289 -
           (((C17358 + C17359) * C48017 + (C17360 + C17361) * C116) * C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C1291 +
           (((C17361 + C17360) * C116 + (C17359 + C17358) * C48017) * C15915 +
            ((C15917 * C1025 + C15913 * C1034 + C15918 * C1026 +
              C48305 * C1035) *
                 C116 +
             (C15917 * C1037 + C15913 * C1043 + C15918 * C1038 +
              C48305 * C1044) *
                 C48017) *
                C48336) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C48286 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C48062) *
              C557 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C48062 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C48286) *
              C558 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C48286 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C48062) *
              C559 +
          ((((C16422 + C16423) * C116 + (C16424 + C16425) * C48017) * C15915 +
            ((C15917 * C268 + C15913 * C286 + C15918 * C270 + C48305 * C289) *
                 C116 +
             (C15917 * C285 + C15913 * C298 + C15918 * C290 + C48305 * C300) *
                 C48017) *
                C48336) *
               C48221 * C48062 -
           (((C16425 + C16424) * C48017 + (C16423 + C16422) * C116) * C48336 +
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48017 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C15915) *
               C48221 * C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C1672 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C1669 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C1673 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C1670 +
             (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                 C1674 +
             (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                 C48321) *
                C15915 +
            ((C16114 + C16115) * C1672 + (C16116 + C16117) * C1669 -
             (C16774 + C16775) * C1673 - (C16776 + C16777) * C1670 +
             (C17208 + C17209) * C1674 + (C17210 + C17211) * C48321) *
                C48336) *
               C48221 * C48286 +
           (((C16775 + C16774) * C1673 -
             ((C16117 + C16116) * C1669 + (C16115 + C16114) * C1672) +
             (C16777 + C16776) * C1670 - (C17209 + C17208) * C1674 -
             (C17211 + C17210) * C48321) *
                C15915 +
            ((C17212 + C17213) * C1673 -
             ((C16118 + C16119) * C1669 + (C16120 + C16121) * C1672) +
             (C17214 + C17215) * C1670 - (C17216 + C17217) * C1674 -
             (C17218 + C17219) * C48321) *
                C48336) *
               C48221 * C48062) *
              C48272 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C1673 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C1669 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C1672) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C1670 -
             (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                 C1674 -
             (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                 C48321) *
                C15915 +
            ((C16778 + C16779) * C1673 -
             ((C16125 + C16124) * C1669 + (C16123 + C16122) * C1672) +
             (C16780 + C16781) * C1670 - (C18286 + C18287) * C1674 -
             (C18288 + C18289) * C48321) *
                C48336) *
               C48221 * C48286 +
           (((C16122 + C16123) * C1672 + (C16124 + C16125) * C1669 -
             (C16779 + C16778) * C1673 - (C16781 + C16780) * C1670 +
             (C18287 + C18286) * C1674 + (C18289 + C18288) * C48321) *
                C15915 +
            ((C16126 + C16127) * C1672 + (C16128 + C16129) * C1669 -
             (C17564 + C17565) * C1673 - (C17566 + C17567) * C1670 +
             (C15917 * C1162 + C15913 * C1177 + C15918 * C1163 +
              C48305 * C1178) *
                 C1674 +
             (C15917 * C1180 + C15913 * C1189 + C15918 * C1181 +
              C48305 * C1190) *
                 C48321) *
                C48336) *
               C48221 * C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C665 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48287 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C666 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48104) *
               C15915 +
           ((C16114 + C16115) * C665 + (C16116 + C16117) * C48287 -
            (C16774 + C16775) * C666 - (C16776 + C16777) * C48104) *
               C48336) *
              C48221 * C1289 +
          (((C16775 + C16774) * C666 -
            ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
            (C16777 + C16776) * C48104) *
               C15915 +
           ((C17212 + C17213) * C666 -
            ((C16118 + C16119) * C48287 + (C16120 + C16121) * C665) +
            (C17214 + C17215) * C48104) *
               C48336) *
              C48221 * C1290 +
          (((C16121 + C16120) * C665 + (C16119 + C16118) * C48287 -
            (C17213 + C17212) * C666 - (C17215 + C17214) * C48104) *
               C15915 +
           ((C17030 + C17031) * C665 + (C17032 + C17033) * C48287 -
            (C17706 + C17707) * C666 - (C17708 + C17709) * C48104) *
               C48336) *
              C48221 * C1291 +
          (((C17707 + C17706) * C666 -
            ((C17033 + C17032) * C48287 + (C17031 + C17030) * C665) +
            (C17709 + C17708) * C48104) *
               C15915 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48305 * C6404) *
                C666 -
            ((C17034 + C17035) * C48287 + (C17036 + C17037) * C665) +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48305 * C6408) *
                C48104) *
               C48336) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C666 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C665 + (C16116 + C16117) * C48287 -
             (C16774 + C16775) * C666 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C15917 * C1160 + C15913 * C1172 + C15918 * C1159 +
              C48305 * C1171) *
                 C666 -
             ((C16118 + C16119) * C48287 + (C16120 + C16121) * C665) +
             (C15917 * C1175 + C15913 * C1187 + C15918 * C1174 +
              C48305 * C1186) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C258 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C666 -
             ((C16125 + C16124) * C48287 + (C16123 + C16122) * C665) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C665 + (C16128 + C16129) * C48287 -
             (C15918 * C1158 + C48305 * C1170 + C15917 * C1159 +
              C15913 * C1171) *
                 C666 -
             (C15918 * C1173 + C48305 * C1185 + C15917 * C1174 +
              C15913 * C1186) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C259 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C665 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48287 -
             (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                 C666 -
             (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                 C48104) *
                C15915 +
            ((C16130 + C16131) * C665 + (C16132 + C16133) * C48287 -
             (C16782 + C16783) * C666 - (C16784 + C16785) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C16783 + C16782) * C666 -
             ((C16133 + C16132) * C48287 + (C16131 + C16130) * C665) +
             (C16785 + C16784) * C48104) *
                C15915 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C666 -
             ((C16134 + C16135) * C48287 + (C16136 + C16137) * C665) +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C2133 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C2129 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C2134 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C2130 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C2135 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C2131 -
            (C15918 * C1858 + C48305 * C1864 + C15917 * C1859 +
             C15913 * C1865) *
                C2136 -
            (C15918 * C1867 + C48305 * C1876 + C15917 * C1868 +
             C15913 * C1877) *
                C48334) *
               C15915 +
           ((C16114 + C16115) * C2133 + (C16116 + C16117) * C2129 -
            (C16774 + C16775) * C2134 - (C16776 + C16777) * C2130 +
            (C17208 + C17209) * C2135 + (C17210 + C17211) * C2131 -
            (C18558 + C18559) * C2136 - (C18560 + C18561) * C48334) *
               C48336) *
              C48221 * C48286 +
          (((C16775 + C16774) * C2134 -
            ((C16117 + C16116) * C2129 + (C16115 + C16114) * C2133) +
            (C16777 + C16776) * C2130 - (C17209 + C17208) * C2135 -
            (C17211 + C17210) * C2131 + (C18559 + C18558) * C2136 +
            (C18561 + C18560) * C48334) *
               C15915 +
           ((C17212 + C17213) * C2134 -
            ((C16118 + C16119) * C2129 + (C16120 + C16121) * C2133) +
            (C17214 + C17215) * C2130 - (C17216 + C17217) * C2135 -
            (C17218 + C17219) * C2131 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48305 * C7272) *
                C2136 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48305 * C7276) *
                C48334) *
               C48336) *
              C48221 * C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C15917 * C117 + C15913 * C124 + C15918 * C118 +
                 C48305 * C125) *
                    C116 +
                (C15917 * C127 + C15913 * C138 + C15918 * C128 +
                 C48305 * C139) *
                    C48017) *
                   C15915 +
               ((C15917 * C263 + C15913 * C276 + C15918 * C262 +
                 C48305 * C275) *
                    C116 +
                (C15917 * C273 + C15913 * C293 + C15918 * C272 +
                 C48305 * C292) *
                    C48017) *
                   C48336) *
                  C48221 * C48000 * C108 -
              (((C15918 * C271 + C48305 * C291 + C15917 * C272 +
                 C15913 * C292) *
                    C48017 +
                (C15918 * C261 + C48305 * C274 + C15917 * C262 +
                 C15913 * C275) *
                    C116) *
                   C48336 +
               ((C15918 * C129 + C48305 * C140 + C15917 * C128 +
                 C15913 * C139) *
                    C48017 +
                (C15918 * C119 + C48305 * C126 + C15917 * C118 +
                 C15913 * C125) *
                    C116) *
                   C15915) *
                  C48221 * C48000 * C109 +
              (((C15917 * C119 + C15913 * C126 + C15918 * C120 +
                 C48305 * C131) *
                    C116 +
                (C15917 * C129 + C15913 * C140 + C15918 * C130 +
                 C48305 * C141) *
                    C48017) *
                   C15915 +
               ((C15917 * C261 + C15913 * C274 + C15918 * C267 +
                 C48305 * C283) *
                    C116 +
                (C15917 * C271 + C15913 * C291 + C15918 * C284 +
                 C48305 * C297) *
                    C48017) *
                   C48336) *
                  C48221 * C48000 * C110 -
              (((C15918 * C287 + C48305 * C299 + C15917 * C284 +
                 C15913 * C297) *
                    C48017 +
                (C15918 * C269 + C48305 * C288 + C15917 * C267 +
                 C15913 * C283) *
                    C116) *
                   C48336 +
               ((C15918 * C133 + C48305 * C142 + C15917 * C130 +
                 C15913 * C141) *
                    C48017 +
                (C15918 * C121 + C48305 * C132 + C15917 * C120 +
                 C15913 * C131) *
                    C116) *
                   C15915) *
                  C48221 * C48000 * C111 +
              (((C15917 * C121 + C15913 * C132 + C15918 * C122 +
                 C48305 * C135) *
                    C116 +
                (C15917 * C133 + C15913 * C142 + C15918 * C134 +
                 C48305 * C143) *
                    C48017) *
                   C15915 +
               ((C15917 * C269 + C15913 * C288 + C15918 * C561 +
                 C48305 * C562) *
                    C116 +
                (C15917 * C287 + C15913 * C299 + C15918 * C563 +
                 C48305 * C564) *
                    C48017) *
                   C48336) *
                  C48221 * C48000 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C15917 * C117 + C15913 * C124 + C15918 * C118 +
                  C48305 * C125) *
                     C116 +
                 (C15917 * C127 + C15913 * C138 + C15918 * C128 +
                  C48305 * C139) *
                     C48017) *
                    C15915 +
                ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) *
                    C48336) *
                   C48221 * C48357 -
               (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) *
                    C48336 +
                ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) *
                    C15915) *
                   C48221 * C48345 +
               (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) *
                    C15915 +
                ((C15917 * C1023 + C15913 * C1032 + C15918 * C1022 +
                  C48305 * C1031) *
                     C116 +
                 (C15917 * C1029 + C15913 * C1041 + C15918 * C1028 +
                  C48305 * C1040) *
                     C48017) *
                    C48336) *
                   C48221 * C48318) *
                  C258 +
              ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) *
                    C15915 +
                ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) *
                    C48336) *
                   C48221 * C48345 -
               (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) *
                    C48336 +
                ((C15918 * C129 + C48305 * C140 + C15917 * C128 +
                  C15913 * C139) *
                     C48017 +
                 (C15918 * C119 + C48305 * C126 + C15917 * C118 +
                  C15913 * C125) *
                     C116) *
                    C15915) *
                   C48221 * C48357 -
               (((C15918 * C1027 + C48305 * C1039 + C15917 * C1028 +
                  C15913 * C1040) *
                     C48017 +
                 (C15918 * C1021 + C48305 * C1030 + C15917 * C1022 +
                  C15913 * C1031) *
                     C116) *
                    C48336 +
                ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) *
                    C15915) *
                   C48221 * C48318) *
                  C259 +
              ((((C15917 * C119 + C15913 * C126 + C15918 * C120 +
                  C48305 * C131) *
                     C116 +
                 (C15917 * C129 + C15913 * C140 + C15918 * C130 +
                  C48305 * C141) *
                     C48017) *
                    C15915 +
                ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) *
                    C48336) *
                   C48221 * C48357 -
               (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) *
                    C48336 +
                ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) *
                    C15915) *
                   C48221 * C48345 +
               (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) *
                    C15915 +
                ((C15917 * C1021 + C15913 * C1030 + C15918 * C1295 +
                  C48305 * C1296) *
                     C116 +
                 (C15917 * C1027 + C15913 * C1039 + C15918 * C1297 +
                  C48305 * C1298) *
                     C48017) *
                    C48336) *
                   C48221 * C48318) *
                  C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C414 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48358 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C415 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48347 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C416 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C48321) *
               C15915 +
           ((C16114 + C16115) * C414 + (C16116 + C16117) * C48358 -
            (C15918 * C818 + C48305 * C823 + C15917 * C817 + C15913 * C822) *
                C415 -
            (C15918 * C826 + C48305 * C833 + C15917 * C825 + C15913 * C832) *
                C48347 +
            (C15917 * C1157 + C15913 * C1166 + C15918 * C1156 +
             C48305 * C1165) *
                C416 +
            (C15917 * C1169 + C15913 * C1184 + C15918 * C1168 +
             C48305 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C258 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C415 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48358 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C414) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C48347 -
            (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                C416 -
            (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                C48321) *
               C15915 +
           ((C15917 * C818 + C15913 * C823 + C15918 * C819 + C48305 * C824) *
                C415 -
            ((C16125 + C16124) * C48358 + (C16123 + C16122) * C414) +
            (C15917 * C826 + C15913 * C833 + C15918 * C827 + C48305 * C834) *
                C48347 -
            (C15918 * C1155 + C48305 * C1164 + C15917 * C1156 +
             C15913 * C1165) *
                C416 -
            (C15918 * C1167 + C48305 * C1182 + C15917 * C1168 +
             C15913 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C259 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C414 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48358 -
            (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                C415 -
            (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                C48347 +
            (C15917 * C422 + C15913 * C435 + C15918 * C424 + C48305 * C441) *
                C416 +
            (C15917 * C438 + C15913 * C452 + C15918 * C442 + C48305 * C454) *
                C48321) *
               C15915 +
           ((C16130 + C16131) * C414 + (C16132 + C16133) * C48358 -
            (C15918 * C820 + C48305 * C828 + C15917 * C819 + C15913 * C824) *
                C415 -
            (C15918 * C829 + C48305 * C835 + C15917 * C827 + C15913 * C834) *
                C48347 +
            (C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
             C48305 * C2028) *
                C416 +
            (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
             C48305 * C2030) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C947 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C948 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C15917 * C1023 + C15913 * C1032 + C15918 * C1022 +
              C48305 * C1031) *
                 C116 +
             (C15917 * C1029 + C15913 * C1041 + C15918 * C1028 +
              C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48354 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C948 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C947 -
           (((C15918 * C1027 + C48305 * C1039 + C15917 * C1028 +
              C15913 * C1040) *
                 C48017 +
             (C15918 * C1021 + C48305 * C1030 + C15917 * C1022 +
              C15913 * C1031) *
                 C116) *
                C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C48318) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C947 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C948 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C15915 +
            ((C15917 * C1021 + C15913 * C1030 + C15918 * C1295 +
              C48305 * C1296) *
                 C116 +
             (C15917 * C1027 + C15913 * C1039 + C15918 * C1297 +
              C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C15915 +
           ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
              C48221 * C1015 -
          (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
           ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
              C48221 * C1016 +
          (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
           ((C17030 + C17031) * C116 + (C17032 + C17033) * C48017) * C48336) *
              C48221 * C1017 -
          (((C17034 + C17035) * C48017 + (C17036 + C17037) * C116) * C48336 +
           ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C15915) *
              C48221 * C1018 +
          (((C17037 + C17036) * C116 + (C17035 + C17034) * C48017) * C15915 +
           ((C15917 * C5701 + C15913 * C5703 + C15918 * C5702 +
             C48305 * C5704) *
                C116 +
            (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 +
             C48305 * C5708) *
                C48017) *
               C48336) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C414 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48358 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C415 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48347 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C416 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C48321) *
               C15915 +
           ((C16114 + C16115) * C414 + (C16116 + C16117) * C48358 -
            (C16774 + C16775) * C415 - (C16776 + C16777) * C48347 +
            (C17208 + C17209) * C416 + (C17210 + C17211) * C48321) *
               C48336) *
              C48221 * C947 +
          (((C16775 + C16774) * C415 -
            ((C16117 + C16116) * C48358 + (C16115 + C16114) * C414) +
            (C16777 + C16776) * C48347 - (C17209 + C17208) * C416 -
            (C17211 + C17210) * C48321) *
               C15915 +
           ((C17212 + C17213) * C415 -
            ((C16118 + C16119) * C48358 + (C16120 + C16121) * C414) +
            (C17214 + C17215) * C48347 - (C17216 + C17217) * C416 -
            (C17218 + C17219) * C48321) *
               C48336) *
              C48221 * C948 +
          (((C16121 + C16120) * C414 + (C16119 + C16118) * C48358 -
            (C17213 + C17212) * C415 - (C17215 + C17214) * C48347 +
            (C17217 + C17216) * C416 + (C17219 + C17218) * C48321) *
               C15915 +
           ((C17030 + C17031) * C414 + (C17032 + C17033) * C48358 -
            (C15918 * C1548 + C48305 * C1551 + C15917 * C1547 +
             C15913 * C1550) *
                C415 -
            (C15918 * C1554 + C48305 * C1557 + C15917 * C1553 +
             C15913 * C1556) *
                C48347 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48305 * C5882) *
                C416 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48305 * C5886) *
                C48321) *
               C48336) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C1672 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C1669 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C1673 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C1670 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C1674 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C48321) *
               C15915 +
           ((C16114 + C16115) * C1672 + (C16116 + C16117) * C1669 -
            (C16774 + C16775) * C1673 - (C16776 + C16777) * C1670 +
            (C17208 + C17209) * C1674 + (C17210 + C17211) * C48321) *
               C48336) *
              C48221 * C48000 * C48354 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C1673 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C1669 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C1672) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C1670 -
            (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                C1674 -
            (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                C48321) *
               C15915 +
           ((C16778 + C16779) * C1673 -
            ((C16125 + C16124) * C1669 + (C16123 + C16122) * C1672) +
            (C16780 + C16781) * C1670 -
            (C15918 * C1155 + C48305 * C1164 + C15917 * C1156 +
             C15913 * C1165) *
                C1674 -
            (C15918 * C1167 + C48305 * C1182 + C15917 * C1168 +
             C15913 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48341 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C1672 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C1669 -
            (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                C1673 -
            (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                C1670 +
            (C15917 * C422 + C15913 * C435 + C15918 * C424 + C48305 * C441) *
                C1674 +
            (C15917 * C438 + C15913 * C452 + C15918 * C442 + C48305 * C454) *
                C48321) *
               C15915 +
           ((C16130 + C16131) * C1672 + (C16132 + C16133) * C1669 -
            (C16782 + C16783) * C1673 - (C16784 + C16785) * C1670 +
            (C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
             C48305 * C2028) *
                C1674 +
            (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
             C48305 * C2030) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C1672 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C1669 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C1673 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C1670 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C1674 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C48321) *
               C15915 +
           ((C16114 + C16115) * C1672 + (C16116 + C16117) * C1669 -
            (C16774 + C16775) * C1673 - (C16776 + C16777) * C1670 +
            (C17208 + C17209) * C1674 + (C17210 + C17211) * C48321) *
               C48336) *
              C48221 * C48357 +
          (((C16775 + C16774) * C1673 -
            ((C16117 + C16116) * C1669 + (C16115 + C16114) * C1672) +
            (C16777 + C16776) * C1670 - (C17209 + C17208) * C1674 -
            (C17211 + C17210) * C48321) *
               C15915 +
           ((C17212 + C17213) * C1673 -
            ((C16118 + C16119) * C1669 + (C16120 + C16121) * C1672) +
            (C17214 + C17215) * C1670 - (C17216 + C17217) * C1674 -
            (C17218 + C17219) * C48321) *
               C48336) *
              C48221 * C48345 +
          (((C16121 + C16120) * C1672 + (C16119 + C16118) * C1669 -
            (C17213 + C17212) * C1673 - (C17215 + C17214) * C1670 +
            (C17217 + C17216) * C1674 + (C17219 + C17218) * C48321) *
               C15915 +
           ((C17030 + C17031) * C1672 + (C17032 + C17033) * C1669 -
            (C17706 + C17707) * C1673 - (C17708 + C17709) * C1670 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48305 * C5882) *
                C1674 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48305 * C5886) *
                C48321) *
               C48336) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
               C1852 +
           (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
               C1847 -
           (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
               C1853 -
           (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
               C1848 +
           (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
               C1854 +
           (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
               C1849 -
           (C15918 * C1858 + C48305 * C1864 + C15917 * C1859 + C15913 * C1865) *
               C1855 -
           (C15918 * C1867 + C48305 * C1876 + C15917 * C1868 + C15913 * C1877) *
               C1850 +
           (C15917 * C1860 + C15913 * C1869 + C15918 * C1861 + C48305 * C1870) *
               C1856 +
           (C15917 * C1872 + C15913 * C1878 + C15918 * C1873 + C48305 * C1879) *
               C1851) *
              C15915 +
          ((C16114 + C16115) * C1852 + (C16116 + C16117) * C1847 -
           (C16774 + C16775) * C1853 - (C16776 + C16777) * C1848 +
           (C17208 + C17209) * C1854 + (C17210 + C17211) * C1849 -
           (C15918 * C2240 + C48305 * C2243 + C15917 * C2239 + C15913 * C2242) *
               C1855 -
           (C15918 * C2246 + C48305 * C2249 + C15917 * C2245 + C15913 * C2248) *
               C1850 +
           (C15917 * C6795 + C15913 * C6797 + C15918 * C6796 + C48305 * C6798) *
               C1856 +
           (C15917 * C6799 + C15913 * C6801 + C15918 * C6800 + C48305 * C6802) *
               C1851) *
              C48336) *
         C48221 * C48000 * C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C666 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C665 + (C16116 + C16117) * C48287 -
             (C16774 + C16775) * C666 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C947 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C17212 + C17213) * C666 -
             ((C16118 + C16119) * C48287 + (C16120 + C16121) * C665) +
             (C17214 + C17215) * C48104) *
                C48336) *
               C48221 * C948 +
           (((C16121 + C16120) * C665 + (C16119 + C16118) * C48287 -
             (C17213 + C17212) * C666 - (C17215 + C17214) * C48104) *
                C15915 +
            ((C17030 + C17031) * C665 + (C17032 + C17033) * C48287 -
             (C15918 * C1548 + C48305 * C1551 + C15917 * C1547 +
              C15913 * C1550) *
                 C666 -
             (C15918 * C1554 + C48305 * C1557 + C15917 * C1553 +
              C15913 * C1556) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C48272 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C666 -
             ((C16125 + C16124) * C48287 + (C16123 + C16122) * C665) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C947 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C665 + (C16128 + C16129) * C48287 -
             (C17564 + C17565) * C666 - (C17566 + C17567) * C48104) *
                C48336) *
               C48221 * C948 +
           (((C17565 + C17564) * C666 -
             ((C16129 + C16128) * C48287 + (C16127 + C16126) * C665) +
             (C17567 + C17566) * C48104) *
                C15915 +
            ((C15917 * C1548 + C15913 * C1551 + C15918 * C1549 +
              C48305 * C1552) *
                 C666 -
             ((C17358 + C17359) * C48287 + (C17360 + C17361) * C665) +
             (C15917 * C1554 + C15913 * C1557 + C15918 * C1555 +
              C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C665 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48287 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C666 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48104) *
               C15915 +
           ((C16114 + C16115) * C665 + (C16116 + C16117) * C48287 -
            (C15918 * C818 + C48305 * C823 + C15917 * C817 + C15913 * C822) *
                C666 -
            (C15918 * C826 + C48305 * C833 + C15917 * C825 + C15913 * C832) *
                C48104) *
               C48336) *
              C48221 * C48000 * C557 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C666 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48287 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C665) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C48104) *
               C15915 +
           ((C15917 * C818 + C15913 * C823 + C15918 * C819 + C48305 * C824) *
                C666 -
            ((C16125 + C16124) * C48287 + (C16123 + C16122) * C665) +
            (C15917 * C826 + C15913 * C833 + C15918 * C827 + C48305 * C834) *
                C48104) *
               C48336) *
              C48221 * C48000 * C558 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C665 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48287 -
            (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                C666 -
            (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                C48104) *
               C15915 +
           ((C16130 + C16131) * C665 + (C16132 + C16133) * C48287 -
            (C15918 * C820 + C48305 * C828 + C15917 * C819 + C15913 * C824) *
                C666 -
            (C15918 * C829 + C48305 * C835 + C15917 * C827 + C15913 * C834) *
                C48104) *
               C48336) *
              C48221 * C48000 * C559 +
          (((C15917 * C423 + C15913 * C439 + C15918 * C425 + C48305 * C443) *
                C666 -
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48287 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C665) +
            (C15917 * C440 + C15913 * C453 + C15918 * C444 + C48305 * C455) *
                C48104) *
               C15915 +
           ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48305 * C830) *
                C666 -
            ((C16425 + C16424) * C48287 + (C16423 + C16422) * C665) +
            (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48305 * C836) *
                C48104) *
               C48336) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C2133 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C2129 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C2134 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C2130 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C2135 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C2131 -
            (C15918 * C1858 + C48305 * C1864 + C15917 * C1859 +
             C15913 * C1865) *
                C2136 -
            (C15918 * C1867 + C48305 * C1876 + C15917 * C1868 +
             C15913 * C1877) *
                C48334) *
               C15915 +
           ((C16114 + C16115) * C2133 + (C16116 + C16117) * C2129 -
            (C16774 + C16775) * C2134 - (C16776 + C16777) * C2130 +
            (C17208 + C17209) * C2135 + (C17210 + C17211) * C2131 -
            (C15918 * C2240 + C48305 * C2243 + C15917 * C2239 +
             C15913 * C2242) *
                C2136 -
            (C15918 * C2246 + C48305 * C2249 + C15917 * C2245 +
             C15913 * C2248) *
                C48334) *
               C48336) *
              C48221 * C48000 * C48272 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C2134 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C2129 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C2133) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C2130 -
            (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                C2135 -
            (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                C2131 +
            (C15917 * C1858 + C15913 * C1864 + C15918 * C1857 +
             C48305 * C1863) *
                C2136 +
            (C15917 * C1867 + C15913 * C1876 + C15918 * C1866 +
             C48305 * C1875) *
                C48334) *
               C15915 +
           ((C16778 + C16779) * C2134 -
            ((C16125 + C16124) * C2129 + (C16123 + C16122) * C2133) +
            (C16780 + C16781) * C2130 - (C18286 + C18287) * C2135 -
            (C18288 + C18289) * C2131 +
            (C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
             C48305 * C2244) *
                C2136 +
            (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
             C48305 * C2250) *
                C48334) *
               C48336) *
              C48221 * C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C48357 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C48345 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C15917 * C1023 + C15913 * C1032 + C15918 * C1022 +
              C48305 * C1031) *
                 C116 +
             (C15917 * C1029 + C15913 * C1041 + C15918 * C1028 +
              C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C258 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C48345 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C48357 -
           (((C15918 * C1027 + C48305 * C1039 + C15917 * C1028 +
              C15913 * C1040) *
                 C48017 +
             (C15918 * C1021 + C48305 * C1030 + C15917 * C1022 +
              C15913 * C1031) *
                 C116) *
                C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C48318) *
              C259 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C48357 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C48345 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C15915 +
            ((C15917 * C1021 + C15913 * C1030 + C15918 * C1295 +
              C48305 * C1296) *
                 C116 +
             (C15917 * C1027 + C15913 * C1039 + C15918 * C1297 +
              C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C15915 +
           ((C15917 * C263 + C15913 * C276 + C15918 * C262 + C48305 * C275) *
                C116 +
            (C15917 * C273 + C15913 * C293 + C15918 * C272 + C48305 * C292) *
                C48017) *
               C48336) *
              C48221 * C48000 * C108 -
          (((C15918 * C271 + C48305 * C291 + C15917 * C272 + C15913 * C292) *
                C48017 +
            (C15918 * C261 + C48305 * C274 + C15917 * C262 + C15913 * C275) *
                C116) *
               C48336 +
           ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                C48017 +
            (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C15915) *
              C48221 * C48000 * C109 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48017) *
               C15915 +
           ((C15917 * C261 + C15913 * C274 + C15918 * C267 + C48305 * C283) *
                C116 +
            (C15917 * C271 + C15913 * C291 + C15918 * C284 + C48305 * C297) *
                C48017) *
               C48336) *
              C48221 * C48000 * C110 -
          (((C15918 * C287 + C48305 * C299 + C15917 * C284 + C15913 * C297) *
                C48017 +
            (C15918 * C269 + C48305 * C288 + C15917 * C267 + C15913 * C283) *
                C116) *
               C48336 +
           ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                C48017 +
            (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C15915) *
              C48221 * C48000 * C111 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48305 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48305 * C143) *
                C48017) *
               C15915 +
           ((C15917 * C269 + C15913 * C288 + C15918 * C561 + C48305 * C562) *
                C116 +
            (C15917 * C287 + C15913 * C299 + C15918 * C563 + C48305 * C564) *
                C48017) *
               C48336) *
              C48221 * C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C947 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C948 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C15917 * C1023 + C15913 * C1032 + C15918 * C1022 +
              C48305 * C1031) *
                 C116 +
             (C15917 * C1029 + C15913 * C1041 + C15918 * C1028 +
              C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48354 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C948 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C947 -
           (((C15918 * C1027 + C48305 * C1039 + C15917 * C1028 +
              C15913 * C1040) *
                 C48017 +
             (C15918 * C1021 + C48305 * C1030 + C15917 * C1022 +
              C15913 * C1031) *
                 C116) *
                C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C48318) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C947 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C948 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C15915 +
            ((C15917 * C1021 + C15913 * C1030 + C15918 * C1295 +
              C48305 * C1296) *
                 C116 +
             (C15917 * C1027 + C15913 * C1039 + C15918 * C1297 +
              C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C15915 +
           ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
              C48221 * C1015 -
          (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
           ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
              C48221 * C1016 +
          (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
           ((C17030 + C17031) * C116 + (C17032 + C17033) * C48017) * C48336) *
              C48221 * C1017 -
          (((C17034 + C17035) * C48017 + (C17036 + C17037) * C116) * C48336 +
           ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C15915) *
              C48221 * C1018 +
          (((C17037 + C17036) * C116 + (C17035 + C17034) * C48017) * C15915 +
           ((C15917 * C5701 + C15913 * C5703 + C15918 * C5702 +
             C48305 * C5704) *
                C116 +
            (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 +
             C48305 * C5708) *
                C48017) *
               C48336) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C1672 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C1669 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C1673 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C1670 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C1674 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C48321) *
               C15915 +
           ((C16114 + C16115) * C1672 + (C16116 + C16117) * C1669 -
            (C16774 + C16775) * C1673 - (C16776 + C16777) * C1670 +
            (C17208 + C17209) * C1674 + (C17210 + C17211) * C48321) *
               C48336) *
              C48221 * C48000 * C48354 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C1673 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C1669 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C1672) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C1670 -
            (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                C1674 -
            (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                C48321) *
               C15915 +
           ((C16778 + C16779) * C1673 -
            ((C16125 + C16124) * C1669 + (C16123 + C16122) * C1672) +
            (C16780 + C16781) * C1670 -
            (C15918 * C1155 + C48305 * C1164 + C15917 * C1156 +
             C15913 * C1165) *
                C1674 -
            (C15918 * C1167 + C48305 * C1182 + C15917 * C1168 +
             C15913 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48341 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C1672 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C1669 -
            (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                C1673 -
            (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                C1670 +
            (C15917 * C422 + C15913 * C435 + C15918 * C424 + C48305 * C441) *
                C1674 +
            (C15917 * C438 + C15913 * C452 + C15918 * C442 + C48305 * C454) *
                C48321) *
               C15915 +
           ((C16130 + C16131) * C1672 + (C16132 + C16133) * C1669 -
            (C16782 + C16783) * C1673 - (C16784 + C16785) * C1670 +
            (C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
             C48305 * C2028) *
                C1674 +
            (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
             C48305 * C2030) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C1672 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C1669 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C1673 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C1670 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C1674 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C48321) *
               C15915 +
           ((C16114 + C16115) * C1672 + (C16116 + C16117) * C1669 -
            (C16774 + C16775) * C1673 - (C16776 + C16777) * C1670 +
            (C17208 + C17209) * C1674 + (C17210 + C17211) * C48321) *
               C48336) *
              C48221 * C48357 +
          (((C16775 + C16774) * C1673 -
            ((C16117 + C16116) * C1669 + (C16115 + C16114) * C1672) +
            (C16777 + C16776) * C1670 - (C17209 + C17208) * C1674 -
            (C17211 + C17210) * C48321) *
               C15915 +
           ((C17212 + C17213) * C1673 -
            ((C16118 + C16119) * C1669 + (C16120 + C16121) * C1672) +
            (C17214 + C17215) * C1670 - (C17216 + C17217) * C1674 -
            (C17218 + C17219) * C48321) *
               C48336) *
              C48221 * C48345 +
          (((C16121 + C16120) * C1672 + (C16119 + C16118) * C1669 -
            (C17213 + C17212) * C1673 - (C17215 + C17214) * C1670 +
            (C17217 + C17216) * C1674 + (C17219 + C17218) * C48321) *
               C15915 +
           ((C17030 + C17031) * C1672 + (C17032 + C17033) * C1669 -
            (C17706 + C17707) * C1673 - (C17708 + C17709) * C1670 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48305 * C5882) *
                C1674 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48305 * C5886) *
                C48321) *
               C48336) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C3114 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C3113 + (C16116 + C16117) * C3111 -
             (C16774 + C16775) * C3114 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C17212 + C17213) * C3114 -
             ((C16118 + C16119) * C3111 + (C16120 + C16121) * C3113) +
             (C17214 + C17215) * C48104) *
                C48336) *
               C48221 * C48062) *
              C47978 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C3114 -
             ((C16125 + C16124) * C3111 + (C16123 + C16122) * C3113) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C3113 + (C16128 + C16129) * C3111 -
             (C17564 + C17565) * C3114 - (C17566 + C17567) * C48104) *
                C48336) *
               C48221 * C48062) *
              C47986 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C3113 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C3111 -
             (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                 C3114 -
             (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                 C48104) *
                C15915 +
            ((C16130 + C16131) * C3113 + (C16132 + C16133) * C3111 -
             (C16782 + C16783) * C3114 - (C16784 + C16785) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C16783 + C16782) * C3114 -
             ((C16133 + C16132) * C3111 + (C16131 + C16130) * C3113) +
             (C16785 + C16784) * C48104) *
                C15915 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C3114 -
             ((C16134 + C16135) * C3111 + (C16136 + C16137) * C3113) +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C47032 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48100 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C47024 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48107 +
             (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                 C47038 +
             (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                 C3625) *
                C15915 +
            ((C16114 + C16115) * C47032 + (C16116 + C16117) * C48100 -
             (C16774 + C16775) * C47024 - (C16776 + C16777) * C48107 +
             (C17208 + C17209) * C47038 + (C17210 + C17211) * C3625) *
                C48336) *
               C48221 * C48286 +
           (((C16775 + C16774) * C47024 -
             ((C16117 + C16116) * C48100 + (C16115 + C16114) * C47032) +
             (C16777 + C16776) * C48107 - (C17209 + C17208) * C47038 -
             (C17211 + C17210) * C3625) *
                C15915 +
            ((C17212 + C17213) * C47024 -
             ((C16118 + C16119) * C48100 + (C16120 + C16121) * C47032) +
             (C17214 + C17215) * C48107 - (C17216 + C17217) * C47038 -
             (C17218 + C17219) * C3625) *
                C48336) *
               C48221 * C48062) *
              C2457 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C47024 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48100 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C47032) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48107 -
             (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                 C47038 -
             (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                 C3625) *
                C15915 +
            ((C16778 + C16779) * C47024 -
             ((C16125 + C16124) * C48100 + (C16123 + C16122) * C47032) +
             (C16780 + C16781) * C48107 - (C18286 + C18287) * C47038 -
             (C18288 + C18289) * C3625) *
                C48336) *
               C48221 * C48286 +
           (((C16122 + C16123) * C47032 + (C16124 + C16125) * C48100 -
             (C16779 + C16778) * C47024 - (C16781 + C16780) * C48107 +
             (C18287 + C18286) * C47038 + (C18289 + C18288) * C3625) *
                C15915 +
            ((C16126 + C16127) * C47032 + (C16128 + C16129) * C48100 -
             (C17564 + C17565) * C47024 - (C17566 + C17567) * C48107 +
             (C15917 * C1162 + C15913 * C1177 + C15918 * C1163 +
              C48305 * C1178) *
                 C47038 +
             (C15917 * C1180 + C15913 * C1189 + C15918 * C1181 +
              C48305 * C1190) *
                 C3625) *
                C48336) *
               C48221 * C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C3114 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C3113 + (C16116 + C16117) * C3111 -
             (C16774 + C16775) * C3114 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C48357 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C17212 + C17213) * C3114 -
             ((C16118 + C16119) * C3111 + (C16120 + C16121) * C3113) +
             (C17214 + C17215) * C48104) *
                C48336) *
               C48221 * C48345 +
           (((C16121 + C16120) * C3113 + (C16119 + C16118) * C3111 -
             (C17213 + C17212) * C3114 - (C17215 + C17214) * C48104) *
                C15915 +
            ((C17030 + C17031) * C3113 + (C17032 + C17033) * C3111 -
             (C17706 + C17707) * C3114 - (C17708 + C17709) * C48104) *
                C48336) *
               C48221 * C48318) *
              C2457 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C3114 -
             ((C16125 + C16124) * C3111 + (C16123 + C16122) * C3113) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C48357 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C3113 + (C16128 + C16129) * C3111 -
             (C17564 + C17565) * C3114 - (C17566 + C17567) * C48104) *
                C48336) *
               C48221 * C48345 +
           (((C17565 + C17564) * C3114 -
             ((C16129 + C16128) * C3111 + (C16127 + C16126) * C3113) +
             (C17567 + C17566) * C48104) *
                C15915 +
            ((C15917 * C1548 + C15913 * C1551 + C15918 * C1549 +
              C48305 * C1552) *
                 C3114 -
             ((C17358 + C17359) * C3111 + (C17360 + C17361) * C3113) +
             (C15917 * C1554 + C15913 * C1557 + C15918 * C1555 +
              C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3113 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C3111 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C3114 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48104) *
               C15915 +
           ((C16114 + C16115) * C3113 + (C16116 + C16117) * C3111 -
            (C16774 + C16775) * C3114 - (C16776 + C16777) * C48104) *
               C48336) *
              C48221 * C48000 * C48363 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C3114 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C3111 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C3113) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C48104) *
               C15915 +
           ((C16778 + C16779) * C3114 -
            ((C16125 + C16124) * C3111 + (C16123 + C16122) * C3113) +
            (C16780 + C16781) * C48104) *
               C48336) *
              C48221 * C48000 * C48356 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C3113 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C3111 -
            (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                C3114 -
            (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                C48104) *
               C15915 +
           ((C16130 + C16131) * C3113 + (C16132 + C16133) * C3111 -
            (C16782 + C16783) * C3114 - (C16784 + C16785) * C48104) *
               C48336) *
              C48221 * C48000 * C48343 +
          (((C15917 * C423 + C15913 * C439 + C15918 * C425 + C48305 * C443) *
                C3114 -
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C3111 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C3113) +
            (C15917 * C440 + C15913 * C453 + C15918 * C444 + C48305 * C455) *
                C48104) *
               C15915 +
           ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48305 * C830) *
                C3114 -
            ((C16425 + C16424) * C3111 + (C16423 + C16422) * C3113) +
            (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48305 * C836) *
                C48104) *
               C48336) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3363 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48365 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C3364 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48362 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C3365 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C48353 -
            (C15918 * C1858 + C48305 * C1864 + C15917 * C1859 +
             C15913 * C1865) *
                C3366 -
            (C15918 * C1867 + C48305 * C1876 + C15917 * C1868 +
             C15913 * C1877) *
                C48334) *
               C15915 +
           ((C16114 + C16115) * C3363 + (C16116 + C16117) * C48365 -
            (C16774 + C16775) * C3364 - (C16776 + C16777) * C48362 +
            (C17208 + C17209) * C3365 + (C17210 + C17211) * C48353 -
            (C18558 + C18559) * C3366 - (C18560 + C18561) * C48334) *
               C48336) *
              C48221 * C48000 * C2457 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C3364 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48365 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C3363) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C48362 -
            (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                C3365 -
            (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                C48353 +
            (C15917 * C1858 + C15913 * C1864 + C15918 * C1857 +
             C48305 * C1863) *
                C3366 +
            (C15917 * C1867 + C15913 * C1876 + C15918 * C1866 +
             C48305 * C1875) *
                C48334) *
               C15915 +
           ((C16778 + C16779) * C3364 -
            ((C16125 + C16124) * C48365 + (C16123 + C16122) * C3363) +
            (C16780 + C16781) * C48362 - (C18286 + C18287) * C3365 -
            (C18288 + C18289) * C48353 +
            (C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
             C48305 * C2244) *
                C3366 +
            (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
             C48305 * C2250) *
                C48334) *
               C48336) *
              C48221 * C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C47032 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48100 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C47024 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48107 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C47038 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C3625) *
               C15915 +
           ((C16114 + C16115) * C47032 + (C16116 + C16117) * C48100 -
            (C16774 + C16775) * C47024 - (C16776 + C16777) * C48107 +
            (C17208 + C17209) * C47038 + (C17210 + C17211) * C3625) *
               C48336) *
              C48221 * C48000 * C47978 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C47024 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48100 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C47032) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C48107 -
            (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                C47038 -
            (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                C3625) *
               C15915 +
           ((C16778 + C16779) * C47024 -
            ((C16125 + C16124) * C48100 + (C16123 + C16122) * C47032) +
            (C16780 + C16781) * C48107 - (C18286 + C18287) * C47038 -
            (C18288 + C18289) * C3625) *
               C48336) *
              C48221 * C48000 * C47986 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C47032 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48100 -
            (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                C47024 -
            (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                C48107 +
            (C15917 * C422 + C15913 * C435 + C15918 * C424 + C48305 * C441) *
                C47038 +
            (C15917 * C438 + C15913 * C452 + C15918 * C442 + C48305 * C454) *
                C3625) *
               C15915 +
           ((C16130 + C16131) * C47032 + (C16132 + C16133) * C48100 -
            (C16782 + C16783) * C47024 - (C16784 + C16785) * C48107 +
            (C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
             C48305 * C2028) *
                C47038 +
            (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
             C48305 * C2030) *
                C3625) *
               C48336) *
              C48221 * C48000 * C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3113 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C3111 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C3114 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48104) *
               C15915 +
           ((C16114 + C16115) * C3113 + (C16116 + C16117) * C3111 -
            (C16774 + C16775) * C3114 - (C16776 + C16777) * C48104) *
               C48336) *
              C48221 * C48000 * C48363 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C3114 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C3111 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C3113) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C48104) *
               C15915 +
           ((C16778 + C16779) * C3114 -
            ((C16125 + C16124) * C3111 + (C16123 + C16122) * C3113) +
            (C16780 + C16781) * C48104) *
               C48336) *
              C48221 * C48000 * C48356 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C3113 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C3111 -
            (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                C3114 -
            (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                C48104) *
               C15915 +
           ((C16130 + C16131) * C3113 + (C16132 + C16133) * C3111 -
            (C16782 + C16783) * C3114 - (C16784 + C16785) * C48104) *
               C48336) *
              C48221 * C48000 * C48343 +
          (((C15917 * C423 + C15913 * C439 + C15918 * C425 + C48305 * C443) *
                C3114 -
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C3111 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C3113) +
            (C15917 * C440 + C15913 * C453 + C15918 * C444 + C48305 * C455) *
                C48104) *
               C15915 +
           ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48305 * C830) *
                C3114 -
            ((C16425 + C16424) * C3111 + (C16423 + C16422) * C3113) +
            (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48305 * C836) *
                C48104) *
               C48336) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C3114 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C3113 + (C16116 + C16117) * C3111 -
             (C16774 + C16775) * C3114 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C48357 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C17212 + C17213) * C3114 -
             ((C16118 + C16119) * C3111 + (C16120 + C16121) * C3113) +
             (C17214 + C17215) * C48104) *
                C48336) *
               C48221 * C48345 +
           (((C16121 + C16120) * C3113 + (C16119 + C16118) * C3111 -
             (C17213 + C17212) * C3114 - (C17215 + C17214) * C48104) *
                C15915 +
            ((C17030 + C17031) * C3113 + (C17032 + C17033) * C3111 -
             (C17706 + C17707) * C3114 - (C17708 + C17709) * C48104) *
                C48336) *
               C48221 * C48318) *
              C2457 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C3114 -
             ((C16125 + C16124) * C3111 + (C16123 + C16122) * C3113) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C48357 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C3113 + (C16128 + C16129) * C3111 -
             (C17564 + C17565) * C3114 - (C17566 + C17567) * C48104) *
                C48336) *
               C48221 * C48345 +
           (((C17565 + C17564) * C3114 -
             ((C16129 + C16128) * C3111 + (C16127 + C16126) * C3113) +
             (C17567 + C17566) * C48104) *
                C15915 +
            ((C15917 * C1548 + C15913 * C1551 + C15918 * C1549 +
              C48305 * C1552) *
                 C3114 -
             ((C17358 + C17359) * C3111 + (C17360 + C17361) * C3113) +
             (C15917 * C1554 + C15913 * C1557 + C15918 * C1555 +
              C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C48286 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C48062) *
              C557 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C48062 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C48286) *
              C558 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C48286 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C48062) *
              C559 +
          ((((C16422 + C16423) * C116 + (C16424 + C16425) * C48017) * C15915 +
            ((C15917 * C268 + C15913 * C286 + C15918 * C270 + C48305 * C289) *
                 C116 +
             (C15917 * C285 + C15913 * C298 + C15918 * C290 + C48305 * C300) *
                 C48017) *
                C48336) *
               C48221 * C48062 -
           (((C16425 + C16424) * C48017 + (C16423 + C16422) * C116) * C48336 +
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48017 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C15915) *
               C48221 * C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C1289 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C1290 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C17030 + C17031) * C116 + (C17032 + C17033) * C48017) * C48336) *
               C48221 * C1291 -
           (((C17034 + C17035) * C48017 + (C17036 + C17037) * C116) * C48336 +
            ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C15915) *
               C48221 * C48328) *
              C48272 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C1290 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C1289 -
           (((C17358 + C17359) * C48017 + (C17360 + C17361) * C116) * C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C1291 +
           (((C17361 + C17360) * C116 + (C17359 + C17358) * C48017) * C15915 +
            ((C15917 * C1025 + C15913 * C1034 + C15918 * C1026 +
              C48305 * C1035) *
                 C116 +
             (C15917 * C1037 + C15913 * C1043 + C15918 * C1038 +
              C48305 * C1044) *
                 C48017) *
                C48336) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C666 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C665 + (C16116 + C16117) * C48287 -
             (C16774 + C16775) * C666 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C15917 * C1160 + C15913 * C1172 + C15918 * C1159 +
              C48305 * C1171) *
                 C666 -
             ((C16118 + C16119) * C48287 + (C16120 + C16121) * C665) +
             (C15917 * C1175 + C15913 * C1187 + C15918 * C1174 +
              C48305 * C1186) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C258 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C666 -
             ((C16125 + C16124) * C48287 + (C16123 + C16122) * C665) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C665 + (C16128 + C16129) * C48287 -
             (C15918 * C1158 + C48305 * C1170 + C15917 * C1159 +
              C15913 * C1171) *
                 C666 -
             (C15918 * C1173 + C48305 * C1185 + C15917 * C1174 +
              C15913 * C1186) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C259 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C665 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48287 -
             (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                 C666 -
             (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                 C48104) *
                C15915 +
            ((C16130 + C16131) * C665 + (C16132 + C16133) * C48287 -
             (C16782 + C16783) * C666 - (C16784 + C16785) * C48104) *
                C48336) *
               C48221 * C48286 +
           (((C16783 + C16782) * C666 -
             ((C16133 + C16132) * C48287 + (C16131 + C16130) * C665) +
             (C16785 + C16784) * C48104) *
                C15915 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C666 -
             ((C16134 + C16135) * C48287 + (C16136 + C16137) * C665) +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48104) *
                C48336) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C665 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48287 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C666 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48104) *
               C15915 +
           ((C16114 + C16115) * C665 + (C16116 + C16117) * C48287 -
            (C16774 + C16775) * C666 - (C16776 + C16777) * C48104) *
               C48336) *
              C48221 * C1289 +
          (((C16775 + C16774) * C666 -
            ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
            (C16777 + C16776) * C48104) *
               C15915 +
           ((C17212 + C17213) * C666 -
            ((C16118 + C16119) * C48287 + (C16120 + C16121) * C665) +
            (C17214 + C17215) * C48104) *
               C48336) *
              C48221 * C1290 +
          (((C16121 + C16120) * C665 + (C16119 + C16118) * C48287 -
            (C17213 + C17212) * C666 - (C17215 + C17214) * C48104) *
               C15915 +
           ((C17030 + C17031) * C665 + (C17032 + C17033) * C48287 -
            (C17706 + C17707) * C666 - (C17708 + C17709) * C48104) *
               C48336) *
              C48221 * C1291 +
          (((C17707 + C17706) * C666 -
            ((C17033 + C17032) * C48287 + (C17031 + C17030) * C665) +
            (C17709 + C17708) * C48104) *
               C15915 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48305 * C6404) *
                C666 -
            ((C17034 + C17035) * C48287 + (C17036 + C17037) * C665) +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48305 * C6408) *
                C48104) *
               C48336) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C48357 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C48345 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C15917 * C1023 + C15913 * C1032 + C15918 * C1022 +
              C48305 * C1031) *
                 C116 +
             (C15917 * C1029 + C15913 * C1041 + C15918 * C1028 +
              C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C258 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C48345 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C48357 -
           (((C15918 * C1027 + C48305 * C1039 + C15917 * C1028 +
              C15913 * C1040) *
                 C48017 +
             (C15918 * C1021 + C48305 * C1030 + C15917 * C1022 +
              C15913 * C1031) *
                 C116) *
                C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C48318) *
              C259 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C48357 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C48345 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C15915 +
            ((C15917 * C1021 + C15913 * C1030 + C15918 * C1295 +
              C48305 * C1296) *
                 C116 +
             (C15917 * C1027 + C15913 * C1039 + C15918 * C1297 +
              C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C15915 +
           ((C15917 * C263 + C15913 * C276 + C15918 * C262 + C48305 * C275) *
                C116 +
            (C15917 * C273 + C15913 * C293 + C15918 * C272 + C48305 * C292) *
                C48017) *
               C48336) *
              C48221 * C48000 * C108 -
          (((C15918 * C271 + C48305 * C291 + C15917 * C272 + C15913 * C292) *
                C48017 +
            (C15918 * C261 + C48305 * C274 + C15917 * C262 + C15913 * C275) *
                C116) *
               C48336 +
           ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                C48017 +
            (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C15915) *
              C48221 * C48000 * C109 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48017) *
               C15915 +
           ((C15917 * C261 + C15913 * C274 + C15918 * C267 + C48305 * C283) *
                C116 +
            (C15917 * C271 + C15913 * C291 + C15918 * C284 + C48305 * C297) *
                C48017) *
               C48336) *
              C48221 * C48000 * C110 -
          (((C15918 * C287 + C48305 * C299 + C15917 * C284 + C15913 * C297) *
                C48017 +
            (C15918 * C269 + C48305 * C288 + C15917 * C267 + C15913 * C283) *
                C116) *
               C48336 +
           ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                C48017 +
            (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C15915) *
              C48221 * C48000 * C111 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48305 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48305 * C143) *
                C48017) *
               C15915 +
           ((C15917 * C269 + C15913 * C288 + C15918 * C561 + C48305 * C562) *
                C116 +
            (C15917 * C287 + C15913 * C299 + C15918 * C563 + C48305 * C564) *
                C48017) *
               C48336) *
              C48221 * C48000 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C414 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48358 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C415 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48347 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C416 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C48321) *
               C15915 +
           ((C16114 + C16115) * C414 + (C16116 + C16117) * C48358 -
            (C15918 * C818 + C48305 * C823 + C15917 * C817 + C15913 * C822) *
                C415 -
            (C15918 * C826 + C48305 * C833 + C15917 * C825 + C15913 * C832) *
                C48347 +
            (C15917 * C1157 + C15913 * C1166 + C15918 * C1156 +
             C48305 * C1165) *
                C416 +
            (C15917 * C1169 + C15913 * C1184 + C15918 * C1168 +
             C48305 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C258 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C415 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48358 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C414) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C48347 -
            (C15918 * C422 + C48305 * C435 + C15917 * C421 + C15913 * C434) *
                C416 -
            (C15918 * C438 + C48305 * C452 + C15917 * C437 + C15913 * C451) *
                C48321) *
               C15915 +
           ((C15917 * C818 + C15913 * C823 + C15918 * C819 + C48305 * C824) *
                C415 -
            ((C16125 + C16124) * C48358 + (C16123 + C16122) * C414) +
            (C15917 * C826 + C15913 * C833 + C15918 * C827 + C48305 * C834) *
                C48347 -
            (C15918 * C1155 + C48305 * C1164 + C15917 * C1156 +
             C15913 * C1165) *
                C416 -
            (C15918 * C1167 + C48305 * C1182 + C15917 * C1168 +
             C15913 * C1183) *
                C48321) *
               C48336) *
              C48221 * C48000 * C259 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C414 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48358 -
            (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                C415 -
            (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                C48347 +
            (C15917 * C422 + C15913 * C435 + C15918 * C424 + C48305 * C441) *
                C416 +
            (C15917 * C438 + C15913 * C452 + C15918 * C442 + C48305 * C454) *
                C48321) *
               C15915 +
           ((C16130 + C16131) * C414 + (C16132 + C16133) * C48358 -
            (C15918 * C820 + C48305 * C828 + C15917 * C819 + C15913 * C824) *
                C415 -
            (C15918 * C829 + C48305 * C835 + C15917 * C827 + C15913 * C834) *
                C48347 +
            (C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
             C48305 * C2028) *
                C416 +
            (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
             C48305 * C2030) *
                C48321) *
               C48336) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C947 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C948 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C15917 * C1023 + C15913 * C1032 + C15918 * C1022 +
              C48305 * C1031) *
                 C116 +
             (C15917 * C1029 + C15913 * C1041 + C15918 * C1028 +
              C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48354 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C948 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C947 -
           (((C15918 * C1027 + C48305 * C1039 + C15917 * C1028 +
              C15913 * C1040) *
                 C48017 +
             (C15918 * C1021 + C48305 * C1030 + C15917 * C1022 +
              C15913 * C1031) *
                 C116) *
                C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C48318) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C947 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C948 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C15915 +
            ((C15917 * C1021 + C15913 * C1030 + C15918 * C1295 +
              C48305 * C1296) *
                 C116 +
             (C15917 * C1027 + C15913 * C1039 + C15918 * C1297 +
              C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C15915 +
           ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
              C48221 * C1015 -
          (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
           ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
              C48221 * C1016 +
          (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
           ((C17030 + C17031) * C116 + (C17032 + C17033) * C48017) * C48336) *
              C48221 * C1017 -
          (((C17034 + C17035) * C48017 + (C17036 + C17037) * C116) * C48336 +
           ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C15915) *
              C48221 * C1018 +
          (((C17037 + C17036) * C116 + (C17035 + C17034) * C48017) * C15915 +
           ((C15917 * C5701 + C15913 * C5703 + C15918 * C5702 +
             C48305 * C5704) *
                C116 +
            (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 +
             C48305 * C5708) *
                C48017) *
               C48336) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C414 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48358 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C415 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48347 +
            (C15917 * C420 + C15913 * C433 + C15918 * C421 + C48305 * C434) *
                C416 +
            (C15917 * C436 + C15913 * C450 + C15918 * C437 + C48305 * C451) *
                C48321) *
               C15915 +
           ((C16114 + C16115) * C414 + (C16116 + C16117) * C48358 -
            (C16774 + C16775) * C415 - (C16776 + C16777) * C48347 +
            (C17208 + C17209) * C416 + (C17210 + C17211) * C48321) *
               C48336) *
              C48221 * C947 +
          (((C16775 + C16774) * C415 -
            ((C16117 + C16116) * C48358 + (C16115 + C16114) * C414) +
            (C16777 + C16776) * C48347 - (C17209 + C17208) * C416 -
            (C17211 + C17210) * C48321) *
               C15915 +
           ((C17212 + C17213) * C415 -
            ((C16118 + C16119) * C48358 + (C16120 + C16121) * C414) +
            (C17214 + C17215) * C48347 - (C17216 + C17217) * C416 -
            (C17218 + C17219) * C48321) *
               C48336) *
              C48221 * C948 +
          (((C16121 + C16120) * C414 + (C16119 + C16118) * C48358 -
            (C17213 + C17212) * C415 - (C17215 + C17214) * C48347 +
            (C17217 + C17216) * C416 + (C17219 + C17218) * C48321) *
               C15915 +
           ((C17030 + C17031) * C414 + (C17032 + C17033) * C48358 -
            (C15918 * C1548 + C48305 * C1551 + C15917 * C1547 +
             C15913 * C1550) *
                C415 -
            (C15918 * C1554 + C48305 * C1557 + C15917 * C1553 +
             C15913 * C1556) *
                C48347 +
            (C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48305 * C5882) *
                C416 +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48305 * C5886) *
                C48321) *
               C48336) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C665 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48287 -
            (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                C666 -
            (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                C48104) *
               C15915 +
           ((C16114 + C16115) * C665 + (C16116 + C16117) * C48287 -
            (C15918 * C818 + C48305 * C823 + C15917 * C817 + C15913 * C822) *
                C666 -
            (C15918 * C826 + C48305 * C833 + C15917 * C825 + C15913 * C832) *
                C48104) *
               C48336) *
              C48221 * C48000 * C557 +
          (((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                C666 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48287 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C665) +
            (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                C48104) *
               C15915 +
           ((C15917 * C818 + C15913 * C823 + C15918 * C819 + C48305 * C824) *
                C666 -
            ((C16125 + C16124) * C48287 + (C16123 + C16122) * C665) +
            (C15917 * C826 + C15913 * C833 + C15918 * C827 + C48305 * C834) *
                C48104) *
               C48336) *
              C48221 * C48000 * C558 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C665 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48287 -
            (C15918 * C423 + C48305 * C439 + C15917 * C417 + C15913 * C427) *
                C666 -
            (C15918 * C440 + C48305 * C453 + C15917 * C430 + C15913 * C447) *
                C48104) *
               C15915 +
           ((C16130 + C16131) * C665 + (C16132 + C16133) * C48287 -
            (C15918 * C820 + C48305 * C828 + C15917 * C819 + C15913 * C824) *
                C666 -
            (C15918 * C829 + C48305 * C835 + C15917 * C827 + C15913 * C834) *
                C48104) *
               C48336) *
              C48221 * C48000 * C559 +
          (((C15917 * C423 + C15913 * C439 + C15918 * C425 + C48305 * C443) *
                C666 -
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48287 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C665) +
            (C15917 * C440 + C15913 * C453 + C15918 * C444 + C48305 * C455) *
                C48104) *
               C15915 +
           ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48305 * C830) *
                C666 -
            ((C16425 + C16424) * C48287 + (C16423 + C16422) * C665) +
            (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48305 * C836) *
                C48104) *
               C48336) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C15918 * C418 + C48305 * C428 + C15917 * C419 + C15913 * C429) *
                 C666 -
             (C15918 * C431 + C48305 * C448 + C15917 * C432 + C15913 * C449) *
                 C48104) *
                C15915 +
            ((C16114 + C16115) * C665 + (C16116 + C16117) * C48287 -
             (C16774 + C16775) * C666 - (C16776 + C16777) * C48104) *
                C48336) *
               C48221 * C947 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C15915 +
            ((C17212 + C17213) * C666 -
             ((C16118 + C16119) * C48287 + (C16120 + C16121) * C665) +
             (C17214 + C17215) * C48104) *
                C48336) *
               C48221 * C948 +
           (((C16121 + C16120) * C665 + (C16119 + C16118) * C48287 -
             (C17213 + C17212) * C666 - (C17215 + C17214) * C48104) *
                C15915 +
            ((C17030 + C17031) * C665 + (C17032 + C17033) * C48287 -
             (C15918 * C1548 + C48305 * C1551 + C15917 * C1547 +
              C15913 * C1550) *
                 C666 -
             (C15918 * C1554 + C48305 * C1557 + C15917 * C1553 +
              C15913 * C1556) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C48272 +
          ((((C15917 * C418 + C15913 * C428 + C15918 * C417 + C48305 * C427) *
                 C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C15917 * C431 + C15913 * C448 + C15918 * C430 + C48305 * C447) *
                 C48104) *
                C15915 +
            ((C16778 + C16779) * C666 -
             ((C16125 + C16124) * C48287 + (C16123 + C16122) * C665) +
             (C16780 + C16781) * C48104) *
                C48336) *
               C48221 * C947 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C15915 +
            ((C16126 + C16127) * C665 + (C16128 + C16129) * C48287 -
             (C17564 + C17565) * C666 - (C17566 + C17567) * C48104) *
                C48336) *
               C48221 * C948 +
           (((C17565 + C17564) * C666 -
             ((C16129 + C16128) * C48287 + (C16127 + C16126) * C665) +
             (C17567 + C17566) * C48104) *
                C15915 +
            ((C15917 * C1548 + C15913 * C1551 + C15918 * C1549 +
              C48305 * C1552) *
                 C666 -
             ((C17358 + C17359) * C48287 + (C17360 + C17361) * C665) +
             (C15917 * C1554 + C15913 * C1557 + C15918 * C1555 +
              C48305 * C1558) *
                 C48104) *
                C48336) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C15915 +
           ((C15917 * C263 + C15913 * C276 + C15918 * C262 + C48305 * C275) *
                C116 +
            (C15917 * C273 + C15913 * C293 + C15918 * C272 + C48305 * C292) *
                C48017) *
               C48336) *
              C48221 * C48000 * C108 -
          (((C15918 * C271 + C48305 * C291 + C15917 * C272 + C15913 * C292) *
                C48017 +
            (C15918 * C261 + C48305 * C274 + C15917 * C262 + C15913 * C275) *
                C116) *
               C48336 +
           ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                C48017 +
            (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C15915) *
              C48221 * C48000 * C109 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48017) *
               C15915 +
           ((C15917 * C261 + C15913 * C274 + C15918 * C267 + C48305 * C283) *
                C116 +
            (C15917 * C271 + C15913 * C291 + C15918 * C284 + C48305 * C297) *
                C48017) *
               C48336) *
              C48221 * C48000 * C110 -
          (((C15918 * C287 + C48305 * C299 + C15917 * C284 + C15913 * C297) *
                C48017 +
            (C15918 * C269 + C48305 * C288 + C15917 * C267 + C15913 * C283) *
                C116) *
               C48336 +
           ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                C48017 +
            (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C15915) *
              C48221 * C48000 * C111 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48305 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48305 * C143) *
                C48017) *
               C15915 +
           ((C15917 * C269 + C15913 * C288 + C15918 * C561 + C48305 * C562) *
                C116 +
            (C15917 * C287 + C15913 * C299 + C15918 * C563 + C48305 * C564) *
                C48017) *
               C48336) *
              C48221 * C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C48357 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C48345 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C15917 * C1023 + C15913 * C1032 + C15918 * C1022 +
              C48305 * C1031) *
                 C116 +
             (C15917 * C1029 + C15913 * C1041 + C15918 * C1028 +
              C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C258 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C48345 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C48357 -
           (((C15918 * C1027 + C48305 * C1039 + C15917 * C1028 +
              C15913 * C1040) *
                 C48017 +
             (C15918 * C1021 + C48305 * C1030 + C15917 * C1022 +
              C15913 * C1031) *
                 C116) *
                C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C48318) *
              C259 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C48357 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C48345 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C15915 +
            ((C15917 * C1021 + C15913 * C1030 + C15918 * C1295 +
              C48305 * C1296) *
                 C116 +
             (C15917 * C1027 + C15913 * C1039 + C15918 * C1297 +
              C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C15915 +
            ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
               C48221 * C947 -
           (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
               C48221 * C948 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
            ((C15917 * C1023 + C15913 * C1032 + C15918 * C1022 +
              C48305 * C1031) *
                 C116 +
             (C15917 * C1029 + C15913 * C1041 + C15918 * C1028 +
              C48305 * C1040) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48354 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C15915 +
            ((C16126 + C16127) * C116 + (C16128 + C16129) * C48017) * C48336) *
               C48221 * C948 -
           (((C16125 + C16124) * C48017 + (C16123 + C16122) * C116) * C48336 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C15915) *
               C48221 * C947 -
           (((C15918 * C1027 + C48305 * C1039 + C15917 * C1028 +
              C15913 * C1040) *
                 C48017 +
             (C15918 * C1021 + C48305 * C1030 + C15917 * C1022 +
              C15913 * C1031) *
                 C116) *
                C48336 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C15915) *
               C48221 * C48318) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C15915 +
            ((C16130 + C16131) * C116 + (C16132 + C16133) * C48017) * C48336) *
               C48221 * C947 -
           (((C16134 + C16135) * C48017 + (C16136 + C16137) * C116) * C48336 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C15915) *
               C48221 * C948 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C15915 +
            ((C15917 * C1021 + C15913 * C1030 + C15918 * C1295 +
              C48305 * C1296) *
                 C116 +
             (C15917 * C1027 + C15913 * C1039 + C15918 * C1297 +
              C48305 * C1298) *
                 C48017) *
                C48336) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C15915 +
           ((C16114 + C16115) * C116 + (C16116 + C16117) * C48017) * C48336) *
              C48221 * C1015 -
          (((C16118 + C16119) * C48017 + (C16120 + C16121) * C116) * C48336 +
           ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C15915) *
              C48221 * C1016 +
          (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C15915 +
           ((C17030 + C17031) * C116 + (C17032 + C17033) * C48017) * C48336) *
              C48221 * C1017 -
          (((C17034 + C17035) * C48017 + (C17036 + C17037) * C116) * C48336 +
           ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C15915) *
              C48221 * C1018 +
          (((C17037 + C17036) * C116 + (C17035 + C17034) * C48017) * C15915 +
           ((C15917 * C5701 + C15913 * C5703 + C15918 * C5702 +
             C48305 * C5704) *
                C116 +
            (C15917 * C5705 + C15913 * C5707 + C15918 * C5706 +
             C48305 * C5708) *
                C48017) *
               C48336) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C48058 -
           (C22482 * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C48065 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 + C22499 * C21590) *
               C48221 * C2717) *
              C47978 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            C22759 * C21590) *
               C48221 * C48065 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C48058 -
           ((C22766 + C22767) * C21590 + (C21768 + C21767) * C21589 +
            C21776 * C21588) *
               C48221 * C2717) *
              C47986 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C48058 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C48065 +
           (C21777 * C21588 + (C21774 + C21773) * C21589 +
            ((C21591 * C1026 + C47950 * C1035) * C116 +
             (C21591 * C1038 + C47950 * C1044) * C48017) *
                C21590) *
               C48221 * C2717) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 -
             (C21591 * C419 + C47950 * C429) * C666 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C22246 + C22247 - C22294 - C22295) * C21589 + C22930 * C21590) *
               C48221 * C48058 +
           ((C22294 - (C22247 + C22246) + C22295) * C21588 +
            (C22296 - (C22253 + C22252) + C22297) * C21589 + C23046 * C21590) *
               C48221 * C48065 +
           (C22930 * C21588 + (C22917 + C22916 - C22915 - C22918) * C21589 +
            (C23037 + C23038 - C23047 - C23048) * C21590) *
               C48221 * C2717) *
              C2457 +
          ((((C21591 * C418 + C47950 * C428) * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C22298 - (C22260 + C22261) + C22299) * C21589 + C22931 * C21590) *
               C48221 * C48058 +
           ((C22261 + C22260 - C22298 - C22299) * C21588 +
            (C22267 + C22266 - C22300 - C22301) * C21589 +
            (C22920 + C22921 - C22932 - C22933) * C21590) *
               C48221 * C48065 +
           (C22931 * C21588 + (C22932 - (C22921 + C22920) + C22933) * C21589 +
            ((C21591 * C6402 + C47950 * C6404) * C666 -
             (C22764 * C48287 + C22765 * C665) +
             (C21591 * C6406 + C47950 * C6408) * C48104) *
                C21590) *
               C48221 * C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C48364 -
           (C22482 * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C48360 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 + C22499 * C21590) *
               C48221 * C48350 -
           ((C22497 + C22498) * C21590 + (C22496 + C22495) * C21589 +
            C22482 * C21588) *
               C48221 * C48328) *
              C2457 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            C22759 * C21590) *
               C48221 * C48360 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C48364 -
           ((C22766 + C22767) * C21590 + (C21768 + C21767) * C21589 +
            C21776 * C21588) *
               C48221 * C48350 +
           (C22759 * C21588 + (C22767 + C22766) * C21589 +
            ((C21591 * C5702 + C47950 * C5704) * C116 +
             (C21591 * C5706 + C47950 * C5708) * C48017) *
                C21590) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C2349 -
           (C22482 * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C48062) *
              C48363 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            C22759 * C21590) *
               C48221 * C48062 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C2349) *
              C48356 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C2349 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C48062) *
              C48343 +
          (((C21998 + C21999) * C21588 + (C22000 + C22001) * C21589 +
            ((C21591 * C1295 + C47950 * C1296) * C116 +
             (C21591 * C1297 + C47950 * C1298) * C48017) *
                C21590) *
               C48221 * C48062 -
           ((C22001 + C22000) * C21590 + (C21999 + C21998) * C21589 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C21588) *
               C48221 * C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C414 +
             (C21591 * C127 + C47950 * C138) * C48358 -
             (C21591 * C419 + C47950 * C429) * C415 -
             (C21591 * C432 + C47950 * C449) * C48347 +
             (C21591 * C420 + C47950 * C433) * C416 +
             (C21591 * C436 + C47950 * C450) * C48321) *
                C21588 +
            (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C21589 +
            C22660 * C21590) *
               C48221 * C2349 +
           ((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C21588 +
            (C22624 - (C22623 + C22622) + C22625 - C22652 - C22653) * C21589 +
            (C22654 - (C22632 + C22633) + C22655 - C22656 - C22657) * C21590) *
               C48221 * C48062) *
              C2457 +
          ((((C21591 * C418 + C47950 * C428) * C415 -
             ((C21591 * C128 + C47950 * C139) * C48358 +
              (C21591 * C118 + C47950 * C125) * C414) +
             (C21591 * C431 + C47950 * C448) * C48347 -
             (C21591 * C421 + C47950 * C434) * C416 -
             (C21591 * C437 + C47950 * C451) * C48321) *
                C21588 +
            (C24098 - (C24099 + C24100) + C24101 - C24102 - C24103) * C21589 +
            (C24104 - (C24105 + C24106) + C24107 - C24108 - C24109) * C21590) *
               C48221 * C2349 +
           ((C24100 + C24099 - C24098 - C24101 + C24102 + C24103) * C21588 +
            (C24106 + C24105 - C24104 - C24107 + C24108 + C24109) * C21589 +
            (C21749 * C414 + C21750 * C48358 - C22928 * C415 - C22929 * C48347 +
             (C21591 * C5880 + C47950 * C5882) * C416 +
             (C21591 * C5884 + C47950 * C5886) * C48321) *
                C21590) *
               C48221 * C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 -
             (C21591 * C419 + C47950 * C429) * C666 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C22246 + C22247 - C22294 - C22295) * C21589 + C22930 * C21590) *
               C48221 * C2349 +
           ((C22294 - (C22247 + C22246) + C22295) * C21588 +
            (C22296 - (C22253 + C22252) + C22297) * C21589 + C23046 * C21590) *
               C48221 * C48062) *
              C47978 +
          ((((C21591 * C418 + C47950 * C428) * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C22298 - (C22260 + C22261) + C22299) * C21589 + C22931 * C21590) *
               C48221 * C2349 +
           ((C22261 + C22260 - C22298 - C22299) * C21588 +
            (C22267 + C22266 - C22300 - C22301) * C21589 +
            (C22920 + C22921 - C22932 - C22933) * C21590) *
               C48221 * C48062) *
              C47986 +
          ((((C21591 * C119 + C47950 * C126) * C665 +
             (C21591 * C129 + C47950 * C140) * C48287 -
             (C21591 * C417 + C47950 * C427) * C666 -
             (C21591 * C430 + C47950 * C447) * C48104) *
                C21588 +
            (C22270 + C22271 - C22302 - C22303) * C21589 +
            (C22276 + C22277 - C22304 - C22305) * C21590) *
               C48221 * C2349 +
           ((C22302 - (C22271 + C22270) + C22303) * C21588 +
            (C22304 - (C22277 + C22276) + C22305) * C21589 +
            ((C21591 * C1549 + C47950 * C1552) * C666 -
             (C21755 * C48287 + C21756 * C665) +
             (C21591 * C1555 + C47950 * C1558) * C48104) *
                C21590) *
               C48221 * C48062) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C2349 -
           (C22482 * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C48062) *
              C48363 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            C22759 * C21590) *
               C48221 * C48062 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C2349) *
              C48356 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C2349 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C48062) *
              C48343 +
          (((C21998 + C21999) * C21588 + (C22000 + C22001) * C21589 +
            ((C21591 * C1295 + C47950 * C1296) * C116 +
             (C21591 * C1297 + C47950 * C1298) * C48017) *
                C21590) *
               C48221 * C48062 -
           ((C22001 + C22000) * C21590 + (C21999 + C21998) * C21589 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C21588) *
               C48221 * C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C48364 -
           (C22482 * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C48360 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 + C22499 * C21590) *
               C48221 * C48350 -
           ((C22497 + C22498) * C21590 + (C22496 + C22495) * C21589 +
            C22482 * C21588) *
               C48221 * C48328) *
              C2457 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            C22759 * C21590) *
               C48221 * C48360 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C48364 -
           ((C22766 + C22767) * C21590 + (C21768 + C21767) * C21589 +
            C21776 * C21588) *
               C48221 * C48350 +
           (C22759 * C21588 + (C22767 + C22766) * C21589 +
            ((C21591 * C5702 + C47950 * C5704) * C116 +
             (C21591 * C5706 + C47950 * C5708) * C48017) *
                C21590) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 -
             (C21591 * C419 + C47950 * C429) * C3114 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C24756 + C24757 - C24758 - C24759) * C21589 + C24784 * C21590) *
               C48221 * C48058 +
           ((C24758 - (C24757 + C24756) + C24759) * C21588 +
            (C24762 - (C24761 + C24760) + C24763) * C21589 + C25568 * C21590) *
               C48221 * C48065 +
           (C24784 * C21588 + (C24766 + C24765 - C24764 - C24767) * C21589 +
            (C25563 + C25564 - C25565 - C25566) * C21590) *
               C48221 * C2717) *
              C48272 +
          ((((C21591 * C418 + C47950 * C428) * C3114 -
             ((C21591 * C128 + C47950 * C139) * C3111 +
              (C21591 * C118 + C47950 * C125) * C3113) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C24768 - (C24769 + C24770) + C24771) * C21589 + C24785 * C21590) *
               C48221 * C48058 +
           ((C24770 + C24769 - C24768 - C24771) * C21588 +
            (C24774 + C24773 - C24772 - C24775) * C21589 +
            (C24776 + C24777 - C24778 - C24779) * C21590) *
               C48221 * C48065 +
           (C24785 * C21588 + (C24778 - (C24777 + C24776) + C24779) * C21589 +
            ((C21591 * C6402 + C47950 * C6404) * C3114 -
             (C22764 * C3111 + C22765 * C3113) +
             (C21591 * C6406 + C47950 * C6408) * C48104) *
                C21590) *
               C48221 * C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C47032 +
            (C21591 * C127 + C47950 * C138) * C48100 -
            (C21591 * C419 + C47950 * C429) * C47024 -
            (C21591 * C432 + C47950 * C449) * C48107 +
            (C21591 * C420 + C47950 * C433) * C47038 +
            (C21591 * C436 + C47950 * C450) * C3625) *
               C21588 +
           (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C21589 +
           C26095 * C21590) *
              C48221 * C48058 +
          ((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C21588 +
           (C25302 - (C25301 + C25300) + C25303 - C25304 - C25305) * C21589 +
           (C26086 - (C26087 + C26088) + C26089 - C26090 - C26091) * C21590) *
              C48221 * C48065 +
          (C26095 * C21588 +
           (C26088 + C26087 - C26086 - C26089 + C26090 + C26091) * C21589 +
           (C22491 * C47032 + C22492 * C48100 - C23044 * C47024 -
            C23045 * C48107 + (C21591 * C22609 + C47950 * C22610) * C47038 +
            (C21591 * C22611 + C47950 * C22612) * C3625) *
               C21590) *
              C48221 * C2717) *
         C47973) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C3113 +
            (C21591 * C127 + C47950 * C138) * C3111 -
            (C21591 * C419 + C47950 * C429) * C3114 -
            (C21591 * C432 + C47950 * C449) * C48104) *
               C21588 +
           (C24756 + C24757 - C24758 - C24759) * C21589 + C24784 * C21590) *
              C48221 * C48364 +
          ((C24758 - (C24757 + C24756) + C24759) * C21588 +
           (C24762 - (C24761 + C24760) + C24763) * C21589 + C25568 * C21590) *
              C48221 * C48360 +
          (C24784 * C21588 + (C24766 + C24765 - C24764 - C24767) * C21589 +
           (C25563 + C25564 - C25565 - C25566) * C21590) *
              C48221 * C48350 +
          (C25568 * C21588 + (C25565 - (C25564 + C25563) + C25566) * C21589 +
           ((C21591 * C23031 + C47950 * C23032) * C3114 -
            (C22493 * C3111 + C22494 * C3113) +
            (C21591 * C23033 + C47950 * C23034) * C48104) *
               C21590) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 -
             (C21591 * C419 + C47950 * C429) * C3114 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C24756 + C24757 - C24758 - C24759) * C21589 + C24784 * C21590) *
               C48221 * C2349 +
           ((C24758 - (C24757 + C24756) + C24759) * C21588 +
            (C24762 - (C24761 + C24760) + C24763) * C21589 +
            (C24764 - (C24765 + C24766) + C24767) * C21590) *
               C48221 * C48062) *
              C48354 +
          ((((C21591 * C418 + C47950 * C428) * C3114 -
             ((C21591 * C128 + C47950 * C139) * C3111 +
              (C21591 * C118 + C47950 * C125) * C3113) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C24768 - (C24769 + C24770) + C24771) * C21589 + C24785 * C21590) *
               C48221 * C2349 +
           ((C24770 + C24769 - C24768 - C24771) * C21588 +
            (C24774 + C24773 - C24772 - C24775) * C21589 +
            (C24776 + C24777 - C24778 - C24779) * C21590) *
               C48221 * C48062) *
              C48341 +
          ((((C21591 * C119 + C47950 * C126) * C3113 +
             (C21591 * C129 + C47950 * C140) * C3111 -
             (C21591 * C417 + C47950 * C427) * C3114 -
             (C21591 * C430 + C47950 * C447) * C48104) *
                C21588 +
            (C25030 + C25031 - C25032 - C25033) * C21589 +
            (C25034 + C25035 - C25036 - C25037) * C21590) *
               C48221 * C2349 +
           ((C25032 - (C25031 + C25030) + C25033) * C21588 +
            (C25036 - (C25035 + C25034) + C25037) * C21589 +
            ((C21591 * C1549 + C47950 * C1552) * C3114 -
             (C21755 * C3111 + C21756 * C3113) +
             (C21591 * C1555 + C47950 * C1558) * C48104) *
                C21590) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C3363 +
            (C21591 * C127 + C47950 * C138) * C48365 -
            (C21591 * C419 + C47950 * C429) * C3364 -
            (C21591 * C432 + C47950 * C449) * C48362 +
            (C21591 * C420 + C47950 * C433) * C3365 +
            (C21591 * C436 + C47950 * C450) * C48353 -
            (C21591 * C1859 + C47950 * C1865) * C3366 -
            (C21591 * C1868 + C47950 * C1877) * C48334) *
               C21588 +
           (C25667 + C25668 - C25669 - C25670 + C25671 + C25672 - C25673 -
            C25674) *
               C21589 +
           (C25675 + C25676 - C25677 - C25678 + C25679 + C25680 - C25681 -
            C25682) *
               C21590) *
              C48221 * C2349 +
          ((C25669 - (C25668 + C25667) + C25670 - C25671 - C25672 + C25673 +
            C25674) *
               C21588 +
           (C25677 - (C25676 + C25675) + C25678 - C25679 - C25680 + C25681 +
            C25682) *
               C21589 +
           (C22645 * C3364 - (C21743 * C48365 + C21744 * C3363) +
            C22646 * C48362 - C22647 * C3365 - C22648 * C48353 +
            (C21591 * C23723 + C47950 * C23724) * C3366 +
            (C21591 * C23725 + C47950 * C23726) * C48334) *
               C21590) *
              C48221 * C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C47032 +
             (C21591 * C127 + C47950 * C138) * C48100 -
             (C21591 * C419 + C47950 * C429) * C47024 -
             (C21591 * C432 + C47950 * C449) * C48107 +
             (C21591 * C420 + C47950 * C433) * C47038 +
             (C21591 * C436 + C47950 * C450) * C3625) *
                C21588 +
            (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C21589 +
            (C25300 + C25301 - C25302 - C25303 + C25304 + C25305) * C21590) *
               C48221 * C2349 +
           ((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C21588 +
            (C25302 - (C25301 + C25300) + C25303 - C25304 - C25305) * C21589 +
            (C22645 * C47024 - (C21743 * C48100 + C21744 * C47032) +
             C22646 * C48107 - C22647 * C47038 - C22648 * C3625) *
                C21590) *
               C48221 * C48062) *
              C48272 +
          ((((C21591 * C418 + C47950 * C428) * C47024 -
             ((C21591 * C128 + C47950 * C139) * C48100 +
              (C21591 * C118 + C47950 * C125) * C47032) +
             (C21591 * C431 + C47950 * C448) * C48107 -
             (C21591 * C421 + C47950 * C434) * C47038 -
             (C21591 * C437 + C47950 * C451) * C3625) *
                C21588 +
            (C25306 - (C25307 + C25308) + C25309 - C25310 - C25311) * C21589 +
            (C25312 - (C25313 + C25314) + C25315 - C25316 - C25317) * C21590) *
               C48221 * C2349 +
           ((C25308 + C25307 - C25306 - C25309 + C25310 + C25311) * C21588 +
            (C25314 + C25313 - C25312 - C25315 + C25316 + C25317) * C21589 +
            (C21749 * C47032 + C21750 * C48100 - C22928 * C47024 -
             C22929 * C48107 + (C21591 * C5880 + C47950 * C5882) * C47038 +
             (C21591 * C5884 + C47950 * C5886) * C3625) *
                C21590) *
               C48221 * C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 -
             (C21591 * C419 + C47950 * C429) * C3114 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C24756 + C24757 - C24758 - C24759) * C21589 + C24784 * C21590) *
               C48221 * C2349 +
           ((C24758 - (C24757 + C24756) + C24759) * C21588 +
            (C24762 - (C24761 + C24760) + C24763) * C21589 +
            (C24764 - (C24765 + C24766) + C24767) * C21590) *
               C48221 * C48062) *
              C48354 +
          ((((C21591 * C418 + C47950 * C428) * C3114 -
             ((C21591 * C128 + C47950 * C139) * C3111 +
              (C21591 * C118 + C47950 * C125) * C3113) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C24768 - (C24769 + C24770) + C24771) * C21589 + C24785 * C21590) *
               C48221 * C2349 +
           ((C24770 + C24769 - C24768 - C24771) * C21588 +
            (C24774 + C24773 - C24772 - C24775) * C21589 +
            (C24776 + C24777 - C24778 - C24779) * C21590) *
               C48221 * C48062) *
              C48341 +
          ((((C21591 * C119 + C47950 * C126) * C3113 +
             (C21591 * C129 + C47950 * C140) * C3111 -
             (C21591 * C417 + C47950 * C427) * C3114 -
             (C21591 * C430 + C47950 * C447) * C48104) *
                C21588 +
            (C25030 + C25031 - C25032 - C25033) * C21589 +
            (C25034 + C25035 - C25036 - C25037) * C21590) *
               C48221 * C2349 +
           ((C25032 - (C25031 + C25030) + C25033) * C21588 +
            (C25036 - (C25035 + C25034) + C25037) * C21589 +
            ((C21591 * C1549 + C47950 * C1552) * C3114 -
             (C21755 * C3111 + C21756 * C3113) +
             (C21591 * C1555 + C47950 * C1558) * C48104) *
                C21590) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C3113 +
            (C21591 * C127 + C47950 * C138) * C3111 -
            (C21591 * C419 + C47950 * C429) * C3114 -
            (C21591 * C432 + C47950 * C449) * C48104) *
               C21588 +
           (C24756 + C24757 - C24758 - C24759) * C21589 + C24784 * C21590) *
              C48221 * C48364 +
          ((C24758 - (C24757 + C24756) + C24759) * C21588 +
           (C24762 - (C24761 + C24760) + C24763) * C21589 + C25568 * C21590) *
              C48221 * C48360 +
          (C24784 * C21588 + (C24766 + C24765 - C24764 - C24767) * C21589 +
           (C25563 + C25564 - C25565 - C25566) * C21590) *
              C48221 * C48350 +
          (C25568 * C21588 + (C25565 - (C25564 + C25563) + C25566) * C21589 +
           ((C21591 * C23031 + C47950 * C23032) * C3114 -
            (C22493 * C3111 + C22494 * C3113) +
            (C21591 * C23033 + C47950 * C23034) * C48104) *
               C21590) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C1289 -
           (C22482 * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C1290 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 + C22499 * C21590) *
               C48221 * C1291 -
           ((C22497 + C22498) * C21590 + (C22496 + C22495) * C21589 +
            C22482 * C21588) *
               C48221 * C48328) *
              C48272 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            C22759 * C21590) *
               C48221 * C1290 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C1289 -
           ((C22766 + C22767) * C21590 + (C21768 + C21767) * C21589 +
            C21776 * C21588) *
               C48221 * C1291 +
           (C22759 * C21588 + (C22767 + C22766) * C21589 +
            ((C21591 * C5702 + C47950 * C5704) * C116 +
             (C21591 * C5706 + C47950 * C5708) * C48017) *
                C21590) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C48286 -
           ((C21761 + C21762) * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C48062) *
              C557 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            (C21767 + C21768) * C21590) *
               C48221 * C48062 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C48286) *
              C558 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C48286 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C48062) *
              C559 +
          (((C21998 + C21999) * C21588 + (C22000 + C22001) * C21589 +
            ((C21591 * C1295 + C47950 * C1296) * C116 +
             (C21591 * C1297 + C47950 * C1298) * C48017) *
                C21590) *
               C48221 * C48062 -
           ((C22001 + C22000) * C21590 + (C21999 + C21998) * C21589 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C21588) *
               C48221 * C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C1672 +
             (C21591 * C127 + C47950 * C138) * C1669 -
             (C21591 * C419 + C47950 * C429) * C1673 -
             (C21591 * C432 + C47950 * C449) * C1670 +
             (C21591 * C420 + C47950 * C433) * C1674 +
             (C21591 * C436 + C47950 * C450) * C48321) *
                C21588 +
            (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C21589 +
            C23291 * C21590) *
               C48221 * C48286 +
           ((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C21588 +
            (C23277 - (C23276 + C23275) + C23278 - C23279 - C23280) * C21589 +
            (C23281 - (C23282 + C23283) + C23284 - C23285 - C23286) * C21590) *
               C48221 * C48062) *
              C48272 +
          ((((C21591 * C418 + C47950 * C428) * C1673 -
             ((C21591 * C128 + C47950 * C139) * C1669 +
              (C21591 * C118 + C47950 * C125) * C1672) +
             (C21591 * C431 + C47950 * C448) * C1670 -
             (C21591 * C421 + C47950 * C434) * C1674 -
             (C21591 * C437 + C47950 * C451) * C48321) *
                C21588 +
            (C23504 - (C23505 + C23506) + C23507 - C23524 - C23525) * C21589 +
            (C23512 - (C23513 + C23514) + C23515 - C23526 - C23527) * C21590) *
               C48221 * C48286 +
           ((C23506 + C23505 - C23504 - C23507 + C23524 + C23525) * C21588 +
            (C23514 + C23513 - C23512 - C23515 + C23526 + C23527) * C21589 +
            (C21749 * C1672 + C21750 * C1669 - C22928 * C1673 - C22929 * C1670 +
             (C21591 * C5880 + C47950 * C5882) * C1674 +
             (C21591 * C5884 + C47950 * C5886) * C48321) *
                C21590) *
               C48221 * C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C665 +
            (C21591 * C127 + C47950 * C138) * C48287 -
            (C21591 * C419 + C47950 * C429) * C666 -
            (C21591 * C432 + C47950 * C449) * C48104) *
               C21588 +
           (C22246 + C22247 - C22294 - C22295) * C21589 + C22930 * C21590) *
              C48221 * C1289 +
          ((C22294 - (C22247 + C22246) + C22295) * C21588 +
           (C22296 - (C22253 + C22252) + C22297) * C21589 + C23046 * C21590) *
              C48221 * C1290 +
          (C22930 * C21588 + (C22917 + C22916 - C22915 - C22918) * C21589 +
           (C23037 + C23038 - C23047 - C23048) * C21590) *
              C48221 * C1291 +
          (C23046 * C21588 + (C23047 - (C23038 + C23037) + C23048) * C21589 +
           ((C21591 * C23031 + C47950 * C23032) * C666 -
            (C22493 * C48287 + C22494 * C665) +
            (C21591 * C23033 + C47950 * C23034) * C48104) *
               C21590) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 -
             (C21591 * C419 + C47950 * C429) * C666 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C22246 + C22247 - C22294 - C22295) * C21589 +
            (C22252 + C22253 - C22296 - C22297) * C21590) *
               C48221 * C48286 +
           ((C22294 - (C22247 + C22246) + C22295) * C21588 +
            (C22296 - (C22253 + C22252) + C22297) * C21589 +
            ((C21591 * C1547 + C47950 * C1550) * C666 -
             (C21743 * C48287 + C21744 * C665) +
             (C21591 * C1553 + C47950 * C1556) * C48104) *
                C21590) *
               C48221 * C48062) *
              C258 +
          ((((C21591 * C418 + C47950 * C428) * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C22298 - (C22260 + C22261) + C22299) * C21589 +
            (C22300 - (C22266 + C22267) + C22301) * C21590) *
               C48221 * C48286 +
           ((C22261 + C22260 - C22298 - C22299) * C21588 +
            (C22267 + C22266 - C22300 - C22301) * C21589 +
            (C21749 * C665 + C21750 * C48287 -
             (C21591 * C1548 + C47950 * C1551) * C666 -
             (C21591 * C1554 + C47950 * C1557) * C48104) *
                C21590) *
               C48221 * C48062) *
              C259 +
          ((((C21591 * C119 + C47950 * C126) * C665 +
             (C21591 * C129 + C47950 * C140) * C48287 -
             (C21591 * C417 + C47950 * C427) * C666 -
             (C21591 * C430 + C47950 * C447) * C48104) *
                C21588 +
            (C22270 + C22271 - C22302 - C22303) * C21589 +
            (C22276 + C22277 - C22304 - C22305) * C21590) *
               C48221 * C48286 +
           ((C22302 - (C22271 + C22270) + C22303) * C21588 +
            (C22304 - (C22277 + C22276) + C22305) * C21589 +
            ((C21591 * C1549 + C47950 * C1552) * C666 -
             (C21755 * C48287 + C21756 * C665) +
             (C21591 * C1555 + C47950 * C1558) * C48104) *
                C21590) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C2133 +
            (C21591 * C127 + C47950 * C138) * C2129 -
            (C21591 * C419 + C47950 * C429) * C2134 -
            (C21591 * C432 + C47950 * C449) * C2130 +
            (C21591 * C420 + C47950 * C433) * C2135 +
            (C21591 * C436 + C47950 * C450) * C2131 -
            (C21591 * C1859 + C47950 * C1865) * C2136 -
            (C21591 * C1868 + C47950 * C1877) * C48334) *
               C21588 +
           (C23728 + C23729 - C23730 - C23731 + C23732 + C23733 - C23752 -
            C23753) *
               C21589 +
           (C23738 + C23739 - C23740 - C23741 + C23742 + C23743 - C23754 -
            C23755) *
               C21590) *
              C48221 * C48286 +
          ((C23730 - (C23729 + C23728) + C23731 - C23732 - C23733 + C23752 +
            C23753) *
               C21588 +
           (C23740 - (C23739 + C23738) + C23741 - C23742 - C23743 + C23754 +
            C23755) *
               C21589 +
           (C22645 * C2134 - (C21743 * C2129 + C21744 * C2133) +
            C22646 * C2130 - C22647 * C2135 - C22648 * C2131 +
            (C21591 * C23723 + C47950 * C23724) * C2136 +
            (C21591 * C23725 + C47950 * C23726) * C48334) *
               C21590) *
              C48221 * C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21591 * C117 + C47950 * C124) * C116 +
                (C21591 * C127 + C47950 * C138) * C48017) *
                   C21588 +
               ((C21591 * C263 + C47950 * C276) * C116 +
                (C21591 * C273 + C47950 * C293) * C48017) *
                   C21589 +
               ((C21591 * C264 + C47950 * C277) * C116 +
                (C21591 * C280 + C47950 * C294) * C48017) *
                   C21590) *
                  C48221 * C48000 * C108 -
              (((C21591 * C281 + C47950 * C295) * C48017 +
                (C21591 * C265 + C47950 * C278) * C116) *
                   C21590 +
               ((C21591 * C272 + C47950 * C292) * C48017 +
                (C21591 * C262 + C47950 * C275) * C116) *
                   C21589 +
               ((C21591 * C128 + C47950 * C139) * C48017 +
                (C21591 * C118 + C47950 * C125) * C116) *
                   C21588) *
                  C48221 * C48000 * C109 +
              (((C21591 * C119 + C47950 * C126) * C116 +
                (C21591 * C129 + C47950 * C140) * C48017) *
                   C21588 +
               ((C21591 * C261 + C47950 * C274) * C116 +
                (C21591 * C271 + C47950 * C291) * C48017) *
                   C21589 +
               ((C21591 * C266 + C47950 * C279) * C116 +
                (C21591 * C282 + C47950 * C296) * C48017) *
                   C21590) *
                  C48221 * C48000 * C110 -
              (((C21591 * C285 + C47950 * C298) * C48017 +
                (C21591 * C268 + C47950 * C286) * C116) *
                   C21590 +
               ((C21591 * C284 + C47950 * C297) * C48017 +
                (C21591 * C267 + C47950 * C283) * C116) *
                   C21589 +
               ((C21591 * C130 + C47950 * C141) * C48017 +
                (C21591 * C120 + C47950 * C131) * C116) *
                   C21588) *
                  C48221 * C48000 * C111 +
              (((C21591 * C121 + C47950 * C132) * C116 +
                (C21591 * C133 + C47950 * C142) * C48017) *
                   C21588 +
               ((C21591 * C269 + C47950 * C288) * C116 +
                (C21591 * C287 + C47950 * C299) * C48017) *
                   C21589 +
               ((C21591 * C270 + C47950 * C289) * C116 +
                (C21591 * C290 + C47950 * C300) * C48017) *
                   C21590) *
                  C48221 * C48000 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21591 * C117 + C47950 * C124) * C116 +
                 (C21591 * C127 + C47950 * C138) * C48017) *
                    C21588 +
                (C21757 + C21758) * C21589 + C21775 * C21590) *
                   C48221 * C48357 -
               ((C21761 + C21762) * C21590 + (C21760 + C21759) * C21589 +
                (C21758 + C21757) * C21588) *
                   C48221 * C48345 +
               (C21775 * C21588 + (C21762 + C21761) * C21589 +
                ((C21591 * C1024 + C47950 * C1033) * C116 +
                 (C21591 * C1036 + C47950 * C1042) * C48017) *
                    C21590) *
                   C48221 * C48318) *
                  C258 +
              (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
                (C21767 + C21768) * C21590) *
                   C48221 * C48345 -
               (C21776 * C21590 + (C21764 + C21763) * C21589 +
                ((C21591 * C128 + C47950 * C139) * C48017 +
                 (C21591 * C118 + C47950 * C125) * C116) *
                    C21588) *
                   C48221 * C48357 -
               (((C21591 * C1037 + C47950 * C1043) * C48017 +
                 (C21591 * C1025 + C47950 * C1034) * C116) *
                    C21590 +
                (C21768 + C21767) * C21589 + C21776 * C21588) *
                   C48221 * C48318) *
                  C259 +
              ((((C21591 * C119 + C47950 * C126) * C116 +
                 (C21591 * C129 + C47950 * C140) * C48017) *
                    C21588 +
                (C21769 + C21770) * C21589 + C21777 * C21590) *
                   C48221 * C48357 -
               ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
                (C21770 + C21769) * C21588) *
                   C48221 * C48345 +
               (C21777 * C21588 + (C21774 + C21773) * C21589 +
                ((C21591 * C1026 + C47950 * C1035) * C116 +
                 (C21591 * C1038 + C47950 * C1044) * C48017) *
                    C21590) *
                   C48221 * C48318) *
                  C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C21591 * C117 + C47950 * C124) * C414 +
                                (C21591 * C127 + C47950 * C138) * C48358 -
                                (C21591 * C419 + C47950 * C429) * C415 -
                                (C21591 * C432 + C47950 * C449) * C48347 +
                                (C21591 * C420 + C47950 * C433) * C416 +
                                (C21591 * C436 + C47950 * C450) * C48321) *
                                   C21588 +
                               (C21739 * C414 + C21740 * C48358 -
                                (C21591 * C817 + C47950 * C822) * C415 -
                                (C21591 * C825 + C47950 * C832) * C48347 +
                                (C21591 * C1157 + C47950 * C1166) * C416 +
                                (C21591 * C1169 + C47950 * C1184) * C48321) *
                                   C21589 +
                               (C21741 * C414 + C21742 * C48358 -
                                (C21591 * C1160 + C47950 * C1172) * C415 -
                                (C21591 * C1175 + C47950 * C1187) * C48347 +
                                (C21591 * C1161 + C47950 * C1176) * C416 +
                                (C21591 * C1179 + C47950 * C1188) * C48321) *
                                   C21590) *
                                  C48221 * C48000 * C258 +
                              (((C21591 * C418 + C47950 * C428) * C415 -
                                ((C21591 * C128 + C47950 * C139) * C48358 +
                                 (C21591 * C118 + C47950 * C125) * C414) +
                                (C21591 * C431 + C47950 * C448) * C48347 -
                                (C21591 * C421 + C47950 * C434) * C416 -
                                (C21591 * C437 + C47950 * C451) * C48321) *
                                   C21588 +
                               ((C21591 * C818 + C47950 * C823) * C415 -
                                (C21746 * C48358 + C21745 * C414) +
                                (C21591 * C826 + C47950 * C833) * C48347 -
                                (C21591 * C1156 + C47950 * C1165) * C416 -
                                (C21591 * C1168 + C47950 * C1183) * C48321) *
                                   C21589 +
                               ((C21591 * C1159 + C47950 * C1171) * C415 -
                                (C21748 * C48358 + C21747 * C414) +
                                (C21591 * C1174 + C47950 * C1186) * C48347 -
                                (C21591 * C1162 + C47950 * C1177) * C416 -
                                (C21591 * C1180 + C47950 * C1189) * C48321) *
                                   C21590) *
                                  C48221 * C48000 * C259 +
                              (((C21591 * C119 + C47950 * C126) * C414 +
                                (C21591 * C129 + C47950 * C140) * C48358 -
                                (C21591 * C417 + C47950 * C427) * C415 -
                                (C21591 * C430 + C47950 * C447) * C48347 +
                                (C21591 * C422 + C47950 * C435) * C416 +
                                (C21591 * C438 + C47950 * C452) * C48321) *
                                   C21588 +
                               (C21751 * C414 + C21752 * C48358 -
                                (C21591 * C819 + C47950 * C824) * C415 -
                                (C21591 * C827 + C47950 * C834) * C48347 +
                                (C21591 * C1155 + C47950 * C1164) * C416 +
                                (C21591 * C1167 + C47950 * C1182) * C48321) *
                                   C21589 +
                               (C21753 * C414 + C21754 * C48358 -
                                (C21591 * C1158 + C47950 * C1170) * C415 -
                                (C21591 * C1173 + C47950 * C1185) * C48347 +
                                (C21591 * C1163 + C47950 * C1178) * C416 +
                                (C21591 * C1181 + C47950 * C1190) * C48321) *
                                   C21590) *
                                  C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C947 -
           ((C21761 + C21762) * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C948 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 +
            ((C21591 * C1024 + C47950 * C1033) * C116 +
             (C21591 * C1036 + C47950 * C1042) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48354 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            (C21767 + C21768) * C21590) *
               C48221 * C948 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C947 -
           (((C21591 * C1037 + C47950 * C1043) * C48017 +
             (C21591 * C1025 + C47950 * C1034) * C116) *
                C21590 +
            (C21768 + C21767) * C21589 + C21776 * C21588) *
               C48221 * C48318) *
              C48341 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C947 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C948 +
           (C21777 * C21588 + (C21774 + C21773) * C21589 +
            ((C21591 * C1026 + C47950 * C1035) * C116 +
             (C21591 * C1038 + C47950 * C1044) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C21588 +
           (C21757 + C21758) * C21589 + C21775 * C21590) *
              C48221 * C1015 -
          (C22482 * C21590 + (C21760 + C21759) * C21589 +
           (C21758 + C21757) * C21588) *
              C48221 * C1016 +
          (C21775 * C21588 + (C21762 + C21761) * C21589 + C22499 * C21590) *
              C48221 * C1017 -
          ((C22497 + C22498) * C21590 + (C22496 + C22495) * C21589 +
           C22482 * C21588) *
              C48221 * C1018 +
          (C22499 * C21588 + (C22498 + C22497) * C21589 +
           ((C21591 * C22477 + C47950 * C22478) * C116 +
            (C21591 * C22479 + C47950 * C22480) * C48017) *
               C21590) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C414 +
            (C21591 * C127 + C47950 * C138) * C48358 -
            (C21591 * C419 + C47950 * C429) * C415 -
            (C21591 * C432 + C47950 * C449) * C48347 +
            (C21591 * C420 + C47950 * C433) * C416 +
            (C21591 * C436 + C47950 * C450) * C48321) *
               C21588 +
           (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C21589 +
           C22660 * C21590) *
              C48221 * C947 +
          ((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C21588 +
           (C22624 - (C22623 + C22622) + C22625 - C22652 - C22653) * C21589 +
           (C22654 - (C22632 + C22633) + C22655 - C22656 - C22657) * C21590) *
              C48221 * C948 +
          (C22660 * C21588 +
           (C22633 + C22632 - C22654 - C22655 + C22656 + C22657) * C21589 +
           (C22491 * C414 + C22492 * C48358 -
            (C21591 * C6401 + C47950 * C6403) * C415 -
            (C21591 * C6405 + C47950 * C6407) * C48347 +
            (C21591 * C22609 + C47950 * C22610) * C416 +
            (C21591 * C22611 + C47950 * C22612) * C48321) *
               C21590) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C1672 +
            (C21591 * C127 + C47950 * C138) * C1669 -
            (C21591 * C419 + C47950 * C429) * C1673 -
            (C21591 * C432 + C47950 * C449) * C1670 +
            (C21591 * C420 + C47950 * C433) * C1674 +
            (C21591 * C436 + C47950 * C450) * C48321) *
               C21588 +
           (C21739 * C1672 + C21740 * C1669 - C22282 * C1673 - C22283 * C1670 +
            C22640 * C1674 + C22641 * C48321) *
               C21589 +
           (C21741 * C1672 + C21742 * C1669 - C22284 * C1673 - C22285 * C1670 +
            C22643 * C1674 + C22644 * C48321) *
               C21590) *
              C48221 * C48000 * C48354 +
          (((C21591 * C418 + C47950 * C428) * C1673 -
            ((C21591 * C128 + C47950 * C139) * C1669 +
             (C21591 * C118 + C47950 * C125) * C1672) +
            (C21591 * C431 + C47950 * C448) * C1670 -
            (C21591 * C421 + C47950 * C434) * C1674 -
            (C21591 * C437 + C47950 * C451) * C48321) *
               C21588 +
           (C22286 * C1673 - (C21746 * C1669 + C21745 * C1672) +
            C22287 * C1670 - (C21591 * C1156 + C47950 * C1165) * C1674 -
            (C21591 * C1168 + C47950 * C1183) * C48321) *
               C21589 +
           (C22288 * C1673 - (C21748 * C1669 + C21747 * C1672) +
            C22289 * C1670 - (C21591 * C1162 + C47950 * C1177) * C1674 -
            (C21591 * C1180 + C47950 * C1189) * C48321) *
               C21590) *
              C48221 * C48000 * C48341 +
          (((C21591 * C119 + C47950 * C126) * C1672 +
            (C21591 * C129 + C47950 * C140) * C1669 -
            (C21591 * C417 + C47950 * C427) * C1673 -
            (C21591 * C430 + C47950 * C447) * C1670 +
            (C21591 * C422 + C47950 * C435) * C1674 +
            (C21591 * C438 + C47950 * C452) * C48321) *
               C21588 +
           (C21751 * C1672 + C21752 * C1669 - C22290 * C1673 - C22291 * C1670 +
            (C21591 * C1155 + C47950 * C1164) * C1674 +
            (C21591 * C1167 + C47950 * C1182) * C48321) *
               C21589 +
           (C21753 * C1672 + C21754 * C1669 - C22292 * C1673 - C22293 * C1670 +
            (C21591 * C1163 + C47950 * C1178) * C1674 +
            (C21591 * C1181 + C47950 * C1190) * C48321) *
               C21590) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C1672 +
            (C21591 * C127 + C47950 * C138) * C1669 -
            (C21591 * C419 + C47950 * C429) * C1673 -
            (C21591 * C432 + C47950 * C449) * C1670 +
            (C21591 * C420 + C47950 * C433) * C1674 +
            (C21591 * C436 + C47950 * C450) * C48321) *
               C21588 +
           (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C21589 +
           C23291 * C21590) *
              C48221 * C48357 +
          ((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C21588 +
           (C23277 - (C23276 + C23275) + C23278 - C23279 - C23280) * C21589 +
           (C23281 - (C23282 + C23283) + C23284 - C23285 - C23286) * C21590) *
              C48221 * C48345 +
          (C23291 * C21588 +
           (C23283 + C23282 - C23281 - C23284 + C23285 + C23286) * C21589 +
           (C22491 * C1672 + C22492 * C1669 - C23044 * C1673 - C23045 * C1670 +
            (C21591 * C22609 + C47950 * C22610) * C1674 +
            (C21591 * C22611 + C47950 * C22612) * C48321) *
               C21590) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C21591 * C117 + C47950 * C124) * C1852 +
           (C21591 * C127 + C47950 * C138) * C1847 -
           (C21591 * C419 + C47950 * C429) * C1853 -
           (C21591 * C432 + C47950 * C449) * C1848 +
           (C21591 * C420 + C47950 * C433) * C1854 +
           (C21591 * C436 + C47950 * C450) * C1849 -
           (C21591 * C1859 + C47950 * C1865) * C1855 -
           (C21591 * C1868 + C47950 * C1877) * C1850 +
           (C21591 * C1860 + C47950 * C1869) * C1856 +
           (C21591 * C1872 + C47950 * C1878) * C1851) *
              C21588 +
          (C21739 * C1852 + C21740 * C1847 - C22282 * C1853 - C22283 * C1848 +
           C22640 * C1854 + C22641 * C1849 -
           (C21591 * C2239 + C47950 * C2242) * C1855 -
           (C21591 * C2245 + C47950 * C2248) * C1850 +
           (C21591 * C6795 + C47950 * C6797) * C1856 +
           (C21591 * C6799 + C47950 * C6801) * C1851) *
              C21589 +
          (C21741 * C1852 + C21742 * C1847 - C22284 * C1853 - C22285 * C1848 +
           C22643 * C1854 + C22644 * C1849 -
           (C21591 * C7269 + C47950 * C7271) * C1855 -
           (C21591 * C7273 + C47950 * C7275) * C1850 +
           (C21591 * C23353 + C47950 * C23354) * C1856 +
           (C21591 * C23355 + C47950 * C23356) * C1851) *
              C21590) *
         C48221 * C48000 * C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 -
             (C21591 * C419 + C47950 * C429) * C666 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C22246 + C22247 - C22294 - C22295) * C21589 + C22930 * C21590) *
               C48221 * C947 +
           ((C22294 - (C22247 + C22246) + C22295) * C21588 +
            (C22296 - (C22253 + C22252) + C22297) * C21589 +
            (C22915 - (C22916 + C22917) + C22918) * C21590) *
               C48221 * C948 +
           (C22930 * C21588 + (C22917 + C22916 - C22915 - C22918) * C21589 +
            (C22491 * C665 + C22492 * C48287 -
             (C21591 * C6401 + C47950 * C6403) * C666 -
             (C21591 * C6405 + C47950 * C6407) * C48104) *
                C21590) *
               C48221 * C48318) *
              C48272 +
          ((((C21591 * C418 + C47950 * C428) * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C22298 - (C22260 + C22261) + C22299) * C21589 + C22931 * C21590) *
               C48221 * C947 +
           ((C22261 + C22260 - C22298 - C22299) * C21588 +
            (C22267 + C22266 - C22300 - C22301) * C21589 +
            (C22920 + C22921 - C22932 - C22933) * C21590) *
               C48221 * C948 +
           (C22931 * C21588 + (C22932 - (C22921 + C22920) + C22933) * C21589 +
            ((C21591 * C6402 + C47950 * C6404) * C666 -
             (C22764 * C48287 + C22765 * C665) +
             (C21591 * C6406 + C47950 * C6408) * C48104) *
                C21590) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C665 +
            (C21591 * C127 + C47950 * C138) * C48287 -
            (C21591 * C419 + C47950 * C429) * C666 -
            (C21591 * C432 + C47950 * C449) * C48104) *
               C21588 +
           (C21739 * C665 + C21740 * C48287 -
            (C21591 * C817 + C47950 * C822) * C666 -
            (C21591 * C825 + C47950 * C832) * C48104) *
               C21589 +
           (C21741 * C665 + C21742 * C48287 -
            (C21591 * C1160 + C47950 * C1172) * C666 -
            (C21591 * C1175 + C47950 * C1187) * C48104) *
               C21590) *
              C48221 * C48000 * C557 +
          (((C21591 * C418 + C47950 * C428) * C666 -
            ((C21591 * C128 + C47950 * C139) * C48287 +
             (C21591 * C118 + C47950 * C125) * C665) +
            (C21591 * C431 + C47950 * C448) * C48104) *
               C21588 +
           ((C21591 * C818 + C47950 * C823) * C666 -
            (C21746 * C48287 + C21745 * C665) +
            (C21591 * C826 + C47950 * C833) * C48104) *
               C21589 +
           ((C21591 * C1159 + C47950 * C1171) * C666 -
            (C21748 * C48287 + C21747 * C665) +
            (C21591 * C1174 + C47950 * C1186) * C48104) *
               C21590) *
              C48221 * C48000 * C558 +
          (((C21591 * C119 + C47950 * C126) * C665 +
            (C21591 * C129 + C47950 * C140) * C48287 -
            (C21591 * C417 + C47950 * C427) * C666 -
            (C21591 * C430 + C47950 * C447) * C48104) *
               C21588 +
           (C21751 * C665 + C21752 * C48287 -
            (C21591 * C819 + C47950 * C824) * C666 -
            (C21591 * C827 + C47950 * C834) * C48104) *
               C21589 +
           (C21753 * C665 + C21754 * C48287 -
            (C21591 * C1158 + C47950 * C1170) * C666 -
            (C21591 * C1173 + C47950 * C1185) * C48104) *
               C21590) *
              C48221 * C48000 * C559 +
          (((C21591 * C423 + C47950 * C439) * C666 -
            ((C21591 * C130 + C47950 * C141) * C48287 +
             (C21591 * C120 + C47950 * C131) * C665) +
            (C21591 * C440 + C47950 * C453) * C48104) *
               C21588 +
           ((C21591 * C820 + C47950 * C828) * C666 -
            (C21995 * C48287 + C21994 * C665) +
            (C21591 * C829 + C47950 * C835) * C48104) *
               C21589 +
           ((C21591 * C1445 + C47950 * C1446) * C666 -
            (C21997 * C48287 + C21996 * C665) +
            (C21591 * C1447 + C47950 * C1448) * C48104) *
               C21590) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C2133 +
            (C21591 * C127 + C47950 * C138) * C2129 -
            (C21591 * C419 + C47950 * C429) * C2134 -
            (C21591 * C432 + C47950 * C449) * C2130 +
            (C21591 * C420 + C47950 * C433) * C2135 +
            (C21591 * C436 + C47950 * C450) * C2131 -
            (C21591 * C1859 + C47950 * C1865) * C2136 -
            (C21591 * C1868 + C47950 * C1877) * C48334) *
               C21588 +
           (C21739 * C2133 + C21740 * C2129 - C22282 * C2134 - C22283 * C2130 +
            C22640 * C2135 + C22641 * C2131 -
            (C21591 * C2239 + C47950 * C2242) * C2136 -
            (C21591 * C2245 + C47950 * C2248) * C48334) *
               C21589 +
           (C21741 * C2133 + C21742 * C2129 - C22284 * C2134 - C22285 * C2130 +
            C22643 * C2135 + C22644 * C2131 -
            (C21591 * C7269 + C47950 * C7271) * C2136 -
            (C21591 * C7273 + C47950 * C7275) * C48334) *
               C21590) *
              C48221 * C48000 * C48272 +
          (((C21591 * C418 + C47950 * C428) * C2134 -
            ((C21591 * C128 + C47950 * C139) * C2129 +
             (C21591 * C118 + C47950 * C125) * C2133) +
            (C21591 * C431 + C47950 * C448) * C2130 -
            (C21591 * C421 + C47950 * C434) * C2135 -
            (C21591 * C437 + C47950 * C451) * C2131 +
            (C21591 * C1858 + C47950 * C1864) * C2136 +
            (C21591 * C1867 + C47950 * C1876) * C48334) *
               C21588 +
           (C22286 * C2134 - (C21746 * C2129 + C21745 * C2133) +
            C22287 * C2130 - C23520 * C2135 - C23521 * C2131 +
            (C21591 * C2240 + C47950 * C2243) * C2136 +
            (C21591 * C2246 + C47950 * C2249) * C48334) *
               C21589 +
           (C22288 * C2134 - (C21748 * C2129 + C21747 * C2133) +
            C22289 * C2130 - C23522 * C2135 - C23523 * C2131 +
            (C21591 * C7270 + C47950 * C7272) * C2136 +
            (C21591 * C7274 + C47950 * C7276) * C48334) *
               C21590) *
              C48221 * C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C48357 -
           ((C21761 + C21762) * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C48345 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 +
            ((C21591 * C1024 + C47950 * C1033) * C116 +
             (C21591 * C1036 + C47950 * C1042) * C48017) *
                C21590) *
               C48221 * C48318) *
              C258 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            (C21767 + C21768) * C21590) *
               C48221 * C48345 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C48357 -
           (((C21591 * C1037 + C47950 * C1043) * C48017 +
             (C21591 * C1025 + C47950 * C1034) * C116) *
                C21590 +
            (C21768 + C21767) * C21589 + C21776 * C21588) *
               C48221 * C48318) *
              C259 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C48357 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C48345 +
           (C21777 * C21588 + (C21774 + C21773) * C21589 +
            ((C21591 * C1026 + C47950 * C1035) * C116 +
             (C21591 * C1038 + C47950 * C1044) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C21588 +
           ((C21591 * C263 + C47950 * C276) * C116 +
            (C21591 * C273 + C47950 * C293) * C48017) *
               C21589 +
           ((C21591 * C264 + C47950 * C277) * C116 +
            (C21591 * C280 + C47950 * C294) * C48017) *
               C21590) *
              C48221 * C48000 * C108 -
          (((C21591 * C281 + C47950 * C295) * C48017 +
            (C21591 * C265 + C47950 * C278) * C116) *
               C21590 +
           ((C21591 * C272 + C47950 * C292) * C48017 +
            (C21591 * C262 + C47950 * C275) * C116) *
               C21589 +
           ((C21591 * C128 + C47950 * C139) * C48017 +
            (C21591 * C118 + C47950 * C125) * C116) *
               C21588) *
              C48221 * C48000 * C109 +
          (((C21591 * C119 + C47950 * C126) * C116 +
            (C21591 * C129 + C47950 * C140) * C48017) *
               C21588 +
           ((C21591 * C261 + C47950 * C274) * C116 +
            (C21591 * C271 + C47950 * C291) * C48017) *
               C21589 +
           ((C21591 * C266 + C47950 * C279) * C116 +
            (C21591 * C282 + C47950 * C296) * C48017) *
               C21590) *
              C48221 * C48000 * C110 -
          (((C21591 * C285 + C47950 * C298) * C48017 +
            (C21591 * C268 + C47950 * C286) * C116) *
               C21590 +
           ((C21591 * C284 + C47950 * C297) * C48017 +
            (C21591 * C267 + C47950 * C283) * C116) *
               C21589 +
           ((C21591 * C130 + C47950 * C141) * C48017 +
            (C21591 * C120 + C47950 * C131) * C116) *
               C21588) *
              C48221 * C48000 * C111 +
          (((C21591 * C121 + C47950 * C132) * C116 +
            (C21591 * C133 + C47950 * C142) * C48017) *
               C21588 +
           ((C21591 * C269 + C47950 * C288) * C116 +
            (C21591 * C287 + C47950 * C299) * C48017) *
               C21589 +
           ((C21591 * C270 + C47950 * C289) * C116 +
            (C21591 * C290 + C47950 * C300) * C48017) *
               C21590) *
              C48221 * C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C947 -
           ((C21761 + C21762) * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C948 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 +
            ((C21591 * C1024 + C47950 * C1033) * C116 +
             (C21591 * C1036 + C47950 * C1042) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48354 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            (C21767 + C21768) * C21590) *
               C48221 * C948 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C947 -
           (((C21591 * C1037 + C47950 * C1043) * C48017 +
             (C21591 * C1025 + C47950 * C1034) * C116) *
                C21590 +
            (C21768 + C21767) * C21589 + C21776 * C21588) *
               C48221 * C48318) *
              C48341 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C947 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C948 +
           (C21777 * C21588 + (C21774 + C21773) * C21589 +
            ((C21591 * C1026 + C47950 * C1035) * C116 +
             (C21591 * C1038 + C47950 * C1044) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C21588 +
           (C21757 + C21758) * C21589 + C21775 * C21590) *
              C48221 * C1015 -
          (C22482 * C21590 + (C21760 + C21759) * C21589 +
           (C21758 + C21757) * C21588) *
              C48221 * C1016 +
          (C21775 * C21588 + (C21762 + C21761) * C21589 + C22499 * C21590) *
              C48221 * C1017 -
          ((C22497 + C22498) * C21590 + (C22496 + C22495) * C21589 +
           C22482 * C21588) *
              C48221 * C1018 +
          (C22499 * C21588 + (C22498 + C22497) * C21589 +
           ((C21591 * C22477 + C47950 * C22478) * C116 +
            (C21591 * C22479 + C47950 * C22480) * C48017) *
               C21590) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C1672 +
            (C21591 * C127 + C47950 * C138) * C1669 -
            (C21591 * C419 + C47950 * C429) * C1673 -
            (C21591 * C432 + C47950 * C449) * C1670 +
            (C21591 * C420 + C47950 * C433) * C1674 +
            (C21591 * C436 + C47950 * C450) * C48321) *
               C21588 +
           (C21739 * C1672 + C21740 * C1669 - C22282 * C1673 - C22283 * C1670 +
            C22640 * C1674 + C22641 * C48321) *
               C21589 +
           (C21741 * C1672 + C21742 * C1669 - C22284 * C1673 - C22285 * C1670 +
            C22643 * C1674 + C22644 * C48321) *
               C21590) *
              C48221 * C48000 * C48354 +
          (((C21591 * C418 + C47950 * C428) * C1673 -
            ((C21591 * C128 + C47950 * C139) * C1669 +
             (C21591 * C118 + C47950 * C125) * C1672) +
            (C21591 * C431 + C47950 * C448) * C1670 -
            (C21591 * C421 + C47950 * C434) * C1674 -
            (C21591 * C437 + C47950 * C451) * C48321) *
               C21588 +
           (C22286 * C1673 - (C21746 * C1669 + C21745 * C1672) +
            C22287 * C1670 - (C21591 * C1156 + C47950 * C1165) * C1674 -
            (C21591 * C1168 + C47950 * C1183) * C48321) *
               C21589 +
           (C22288 * C1673 - (C21748 * C1669 + C21747 * C1672) +
            C22289 * C1670 - (C21591 * C1162 + C47950 * C1177) * C1674 -
            (C21591 * C1180 + C47950 * C1189) * C48321) *
               C21590) *
              C48221 * C48000 * C48341 +
          (((C21591 * C119 + C47950 * C126) * C1672 +
            (C21591 * C129 + C47950 * C140) * C1669 -
            (C21591 * C417 + C47950 * C427) * C1673 -
            (C21591 * C430 + C47950 * C447) * C1670 +
            (C21591 * C422 + C47950 * C435) * C1674 +
            (C21591 * C438 + C47950 * C452) * C48321) *
               C21588 +
           (C21751 * C1672 + C21752 * C1669 - C22290 * C1673 - C22291 * C1670 +
            (C21591 * C1155 + C47950 * C1164) * C1674 +
            (C21591 * C1167 + C47950 * C1182) * C48321) *
               C21589 +
           (C21753 * C1672 + C21754 * C1669 - C22292 * C1673 - C22293 * C1670 +
            (C21591 * C1163 + C47950 * C1178) * C1674 +
            (C21591 * C1181 + C47950 * C1190) * C48321) *
               C21590) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C1672 +
            (C21591 * C127 + C47950 * C138) * C1669 -
            (C21591 * C419 + C47950 * C429) * C1673 -
            (C21591 * C432 + C47950 * C449) * C1670 +
            (C21591 * C420 + C47950 * C433) * C1674 +
            (C21591 * C436 + C47950 * C450) * C48321) *
               C21588 +
           (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C21589 +
           C23291 * C21590) *
              C48221 * C48357 +
          ((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C21588 +
           (C23277 - (C23276 + C23275) + C23278 - C23279 - C23280) * C21589 +
           (C23281 - (C23282 + C23283) + C23284 - C23285 - C23286) * C21590) *
              C48221 * C48345 +
          (C23291 * C21588 +
           (C23283 + C23282 - C23281 - C23284 + C23285 + C23286) * C21589 +
           (C22491 * C1672 + C22492 * C1669 - C23044 * C1673 - C23045 * C1670 +
            (C21591 * C22609 + C47950 * C22610) * C1674 +
            (C21591 * C22611 + C47950 * C22612) * C48321) *
               C21590) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 -
             (C21591 * C419 + C47950 * C429) * C3114 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C24756 + C24757 - C24758 - C24759) * C21589 + C24784 * C21590) *
               C48221 * C48286 +
           ((C24758 - (C24757 + C24756) + C24759) * C21588 +
            (C24762 - (C24761 + C24760) + C24763) * C21589 +
            (C24764 - (C24765 + C24766) + C24767) * C21590) *
               C48221 * C48062) *
              C47978 +
          ((((C21591 * C418 + C47950 * C428) * C3114 -
             ((C21591 * C128 + C47950 * C139) * C3111 +
              (C21591 * C118 + C47950 * C125) * C3113) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C24768 - (C24769 + C24770) + C24771) * C21589 + C24785 * C21590) *
               C48221 * C48286 +
           ((C24770 + C24769 - C24768 - C24771) * C21588 +
            (C24774 + C24773 - C24772 - C24775) * C21589 +
            (C24776 + C24777 - C24778 - C24779) * C21590) *
               C48221 * C48062) *
              C47986 +
          ((((C21591 * C119 + C47950 * C126) * C3113 +
             (C21591 * C129 + C47950 * C140) * C3111 -
             (C21591 * C417 + C47950 * C427) * C3114 -
             (C21591 * C430 + C47950 * C447) * C48104) *
                C21588 +
            (C25030 + C25031 - C25032 - C25033) * C21589 +
            (C25034 + C25035 - C25036 - C25037) * C21590) *
               C48221 * C48286 +
           ((C25032 - (C25031 + C25030) + C25033) * C21588 +
            (C25036 - (C25035 + C25034) + C25037) * C21589 +
            ((C21591 * C1549 + C47950 * C1552) * C3114 -
             (C21755 * C3111 + C21756 * C3113) +
             (C21591 * C1555 + C47950 * C1558) * C48104) *
                C21590) *
               C48221 * C48062) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C47032 +
             (C21591 * C127 + C47950 * C138) * C48100 -
             (C21591 * C419 + C47950 * C429) * C47024 -
             (C21591 * C432 + C47950 * C449) * C48107 +
             (C21591 * C420 + C47950 * C433) * C47038 +
             (C21591 * C436 + C47950 * C450) * C3625) *
                C21588 +
            (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C21589 +
            (C25300 + C25301 - C25302 - C25303 + C25304 + C25305) * C21590) *
               C48221 * C48286 +
           ((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C21588 +
            (C25302 - (C25301 + C25300) + C25303 - C25304 - C25305) * C21589 +
            (C22645 * C47024 - (C21743 * C48100 + C21744 * C47032) +
             C22646 * C48107 - C22647 * C47038 - C22648 * C3625) *
                C21590) *
               C48221 * C48062) *
              C2457 +
          ((((C21591 * C418 + C47950 * C428) * C47024 -
             ((C21591 * C128 + C47950 * C139) * C48100 +
              (C21591 * C118 + C47950 * C125) * C47032) +
             (C21591 * C431 + C47950 * C448) * C48107 -
             (C21591 * C421 + C47950 * C434) * C47038 -
             (C21591 * C437 + C47950 * C451) * C3625) *
                C21588 +
            (C25306 - (C25307 + C25308) + C25309 - C25310 - C25311) * C21589 +
            (C25312 - (C25313 + C25314) + C25315 - C25316 - C25317) * C21590) *
               C48221 * C48286 +
           ((C25308 + C25307 - C25306 - C25309 + C25310 + C25311) * C21588 +
            (C25314 + C25313 - C25312 - C25315 + C25316 + C25317) * C21589 +
            (C21749 * C47032 + C21750 * C48100 - C22928 * C47024 -
             C22929 * C48107 + (C21591 * C5880 + C47950 * C5882) * C47038 +
             (C21591 * C5884 + C47950 * C5886) * C3625) *
                C21590) *
               C48221 * C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 -
             (C21591 * C419 + C47950 * C429) * C3114 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C24756 + C24757 - C24758 - C24759) * C21589 + C24784 * C21590) *
               C48221 * C48357 +
           ((C24758 - (C24757 + C24756) + C24759) * C21588 +
            (C24762 - (C24761 + C24760) + C24763) * C21589 +
            (C24764 - (C24765 + C24766) + C24767) * C21590) *
               C48221 * C48345 +
           (C24784 * C21588 + (C24766 + C24765 - C24764 - C24767) * C21589 +
            (C22491 * C3113 + C22492 * C3111 - C23044 * C3114 -
             C23045 * C48104) *
                C21590) *
               C48221 * C48318) *
              C2457 +
          ((((C21591 * C418 + C47950 * C428) * C3114 -
             ((C21591 * C128 + C47950 * C139) * C3111 +
              (C21591 * C118 + C47950 * C125) * C3113) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C24768 - (C24769 + C24770) + C24771) * C21589 + C24785 * C21590) *
               C48221 * C48357 +
           ((C24770 + C24769 - C24768 - C24771) * C21588 +
            (C24774 + C24773 - C24772 - C24775) * C21589 +
            (C24776 + C24777 - C24778 - C24779) * C21590) *
               C48221 * C48345 +
           (C24785 * C21588 + (C24778 - (C24777 + C24776) + C24779) * C21589 +
            ((C21591 * C6402 + C47950 * C6404) * C3114 -
             (C22764 * C3111 + C22765 * C3113) +
             (C21591 * C6406 + C47950 * C6408) * C48104) *
                C21590) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C3113 +
            (C21591 * C127 + C47950 * C138) * C3111 -
            (C21591 * C419 + C47950 * C429) * C3114 -
            (C21591 * C432 + C47950 * C449) * C48104) *
               C21588 +
           (C21739 * C3113 + C21740 * C3111 - C22282 * C3114 -
            C22283 * C48104) *
               C21589 +
           (C21741 * C3113 + C21742 * C3111 - C22284 * C3114 -
            C22285 * C48104) *
               C21590) *
              C48221 * C48000 * C48363 +
          (((C21591 * C418 + C47950 * C428) * C3114 -
            ((C21591 * C128 + C47950 * C139) * C3111 +
             (C21591 * C118 + C47950 * C125) * C3113) +
            (C21591 * C431 + C47950 * C448) * C48104) *
               C21588 +
           (C22286 * C3114 - (C21746 * C3111 + C21745 * C3113) +
            C22287 * C48104) *
               C21589 +
           (C22288 * C3114 - (C21748 * C3111 + C21747 * C3113) +
            C22289 * C48104) *
               C21590) *
              C48221 * C48000 * C48356 +
          (((C21591 * C119 + C47950 * C126) * C3113 +
            (C21591 * C129 + C47950 * C140) * C3111 -
            (C21591 * C417 + C47950 * C427) * C3114 -
            (C21591 * C430 + C47950 * C447) * C48104) *
               C21588 +
           (C21751 * C3113 + C21752 * C3111 - C22290 * C3114 -
            C22291 * C48104) *
               C21589 +
           (C21753 * C3113 + C21754 * C3111 - C22292 * C3114 -
            C22293 * C48104) *
               C21590) *
              C48221 * C48000 * C48343 +
          (((C21591 * C423 + C47950 * C439) * C3114 -
            ((C21591 * C130 + C47950 * C141) * C3111 +
             (C21591 * C120 + C47950 * C131) * C3113) +
            (C21591 * C440 + C47950 * C453) * C48104) *
               C21588 +
           ((C21591 * C820 + C47950 * C828) * C3114 -
            (C21995 * C3111 + C21994 * C3113) +
            (C21591 * C829 + C47950 * C835) * C48104) *
               C21589 +
           ((C21591 * C1445 + C47950 * C1446) * C3114 -
            (C21997 * C3111 + C21996 * C3113) +
            (C21591 * C1447 + C47950 * C1448) * C48104) *
               C21590) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C3363 +
            (C21591 * C127 + C47950 * C138) * C48365 -
            (C21591 * C419 + C47950 * C429) * C3364 -
            (C21591 * C432 + C47950 * C449) * C48362 +
            (C21591 * C420 + C47950 * C433) * C3365 +
            (C21591 * C436 + C47950 * C450) * C48353 -
            (C21591 * C1859 + C47950 * C1865) * C3366 -
            (C21591 * C1868 + C47950 * C1877) * C48334) *
               C21588 +
           (C21739 * C3363 + C21740 * C48365 - C22282 * C3364 -
            C22283 * C48362 + C22640 * C3365 + C22641 * C48353 -
            C23748 * C3366 - C23749 * C48334) *
               C21589 +
           (C21741 * C3363 + C21742 * C48365 - C22284 * C3364 -
            C22285 * C48362 + C22643 * C3365 + C22644 * C48353 -
            C23750 * C3366 - C23751 * C48334) *
               C21590) *
              C48221 * C48000 * C2457 +
          (((C21591 * C418 + C47950 * C428) * C3364 -
            ((C21591 * C128 + C47950 * C139) * C48365 +
             (C21591 * C118 + C47950 * C125) * C3363) +
            (C21591 * C431 + C47950 * C448) * C48362 -
            (C21591 * C421 + C47950 * C434) * C3365 -
            (C21591 * C437 + C47950 * C451) * C48353 +
            (C21591 * C1858 + C47950 * C1864) * C3366 +
            (C21591 * C1867 + C47950 * C1876) * C48334) *
               C21588 +
           (C22286 * C3364 - (C21746 * C48365 + C21745 * C3363) +
            C22287 * C48362 - C23520 * C3365 - C23521 * C48353 +
            (C21591 * C2240 + C47950 * C2243) * C3366 +
            (C21591 * C2246 + C47950 * C2249) * C48334) *
               C21589 +
           (C22288 * C3364 - (C21748 * C48365 + C21747 * C3363) +
            C22289 * C48362 - C23522 * C3365 - C23523 * C48353 +
            (C21591 * C7270 + C47950 * C7272) * C3366 +
            (C21591 * C7274 + C47950 * C7276) * C48334) *
               C21590) *
              C48221 * C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C47032 +
            (C21591 * C127 + C47950 * C138) * C48100 -
            (C21591 * C419 + C47950 * C429) * C47024 -
            (C21591 * C432 + C47950 * C449) * C48107 +
            (C21591 * C420 + C47950 * C433) * C47038 +
            (C21591 * C436 + C47950 * C450) * C3625) *
               C21588 +
           (C21739 * C47032 + C21740 * C48100 - C22282 * C47024 -
            C22283 * C48107 + C22640 * C47038 + C22641 * C3625) *
               C21589 +
           (C21741 * C47032 + C21742 * C48100 - C22284 * C47024 -
            C22285 * C48107 + C22643 * C47038 + C22644 * C3625) *
               C21590) *
              C48221 * C48000 * C47978 +
          (((C21591 * C418 + C47950 * C428) * C47024 -
            ((C21591 * C128 + C47950 * C139) * C48100 +
             (C21591 * C118 + C47950 * C125) * C47032) +
            (C21591 * C431 + C47950 * C448) * C48107 -
            (C21591 * C421 + C47950 * C434) * C47038 -
            (C21591 * C437 + C47950 * C451) * C3625) *
               C21588 +
           (C22286 * C47024 - (C21746 * C48100 + C21745 * C47032) +
            C22287 * C48107 - C23520 * C47038 - C23521 * C3625) *
               C21589 +
           (C22288 * C47024 - (C21748 * C48100 + C21747 * C47032) +
            C22289 * C48107 - C23522 * C47038 - C23523 * C3625) *
               C21590) *
              C48221 * C48000 * C47986 +
          (((C21591 * C119 + C47950 * C126) * C47032 +
            (C21591 * C129 + C47950 * C140) * C48100 -
            (C21591 * C417 + C47950 * C427) * C47024 -
            (C21591 * C430 + C47950 * C447) * C48107 +
            (C21591 * C422 + C47950 * C435) * C47038 +
            (C21591 * C438 + C47950 * C452) * C3625) *
               C21588 +
           (C21751 * C47032 + C21752 * C48100 - C22290 * C47024 -
            C22291 * C48107 + (C21591 * C1155 + C47950 * C1164) * C47038 +
            (C21591 * C1167 + C47950 * C1182) * C3625) *
               C21589 +
           (C21753 * C47032 + C21754 * C48100 - C22292 * C47024 -
            C22293 * C48107 + (C21591 * C1163 + C47950 * C1178) * C47038 +
            (C21591 * C1181 + C47950 * C1190) * C3625) *
               C21590) *
              C48221 * C48000 * C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C3113 +
            (C21591 * C127 + C47950 * C138) * C3111 -
            (C21591 * C419 + C47950 * C429) * C3114 -
            (C21591 * C432 + C47950 * C449) * C48104) *
               C21588 +
           (C21739 * C3113 + C21740 * C3111 - C22282 * C3114 -
            C22283 * C48104) *
               C21589 +
           (C21741 * C3113 + C21742 * C3111 - C22284 * C3114 -
            C22285 * C48104) *
               C21590) *
              C48221 * C48000 * C48363 +
          (((C21591 * C418 + C47950 * C428) * C3114 -
            ((C21591 * C128 + C47950 * C139) * C3111 +
             (C21591 * C118 + C47950 * C125) * C3113) +
            (C21591 * C431 + C47950 * C448) * C48104) *
               C21588 +
           (C22286 * C3114 - (C21746 * C3111 + C21745 * C3113) +
            C22287 * C48104) *
               C21589 +
           (C22288 * C3114 - (C21748 * C3111 + C21747 * C3113) +
            C22289 * C48104) *
               C21590) *
              C48221 * C48000 * C48356 +
          (((C21591 * C119 + C47950 * C126) * C3113 +
            (C21591 * C129 + C47950 * C140) * C3111 -
            (C21591 * C417 + C47950 * C427) * C3114 -
            (C21591 * C430 + C47950 * C447) * C48104) *
               C21588 +
           (C21751 * C3113 + C21752 * C3111 - C22290 * C3114 -
            C22291 * C48104) *
               C21589 +
           (C21753 * C3113 + C21754 * C3111 - C22292 * C3114 -
            C22293 * C48104) *
               C21590) *
              C48221 * C48000 * C48343 +
          (((C21591 * C423 + C47950 * C439) * C3114 -
            ((C21591 * C130 + C47950 * C141) * C3111 +
             (C21591 * C120 + C47950 * C131) * C3113) +
            (C21591 * C440 + C47950 * C453) * C48104) *
               C21588 +
           ((C21591 * C820 + C47950 * C828) * C3114 -
            (C21995 * C3111 + C21994 * C3113) +
            (C21591 * C829 + C47950 * C835) * C48104) *
               C21589 +
           ((C21591 * C1445 + C47950 * C1446) * C3114 -
            (C21997 * C3111 + C21996 * C3113) +
            (C21591 * C1447 + C47950 * C1448) * C48104) *
               C21590) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 -
             (C21591 * C419 + C47950 * C429) * C3114 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C24756 + C24757 - C24758 - C24759) * C21589 + C24784 * C21590) *
               C48221 * C48357 +
           ((C24758 - (C24757 + C24756) + C24759) * C21588 +
            (C24762 - (C24761 + C24760) + C24763) * C21589 +
            (C24764 - (C24765 + C24766) + C24767) * C21590) *
               C48221 * C48345 +
           (C24784 * C21588 + (C24766 + C24765 - C24764 - C24767) * C21589 +
            (C22491 * C3113 + C22492 * C3111 - C23044 * C3114 -
             C23045 * C48104) *
                C21590) *
               C48221 * C48318) *
              C2457 +
          ((((C21591 * C418 + C47950 * C428) * C3114 -
             ((C21591 * C128 + C47950 * C139) * C3111 +
              (C21591 * C118 + C47950 * C125) * C3113) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C24768 - (C24769 + C24770) + C24771) * C21589 + C24785 * C21590) *
               C48221 * C48357 +
           ((C24770 + C24769 - C24768 - C24771) * C21588 +
            (C24774 + C24773 - C24772 - C24775) * C21589 +
            (C24776 + C24777 - C24778 - C24779) * C21590) *
               C48221 * C48345 +
           (C24785 * C21588 + (C24778 - (C24777 + C24776) + C24779) * C21589 +
            ((C21591 * C6402 + C47950 * C6404) * C3114 -
             (C22764 * C3111 + C22765 * C3113) +
             (C21591 * C6406 + C47950 * C6408) * C48104) *
                C21590) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C48286 -
           ((C21761 + C21762) * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C48062) *
              C557 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            (C21767 + C21768) * C21590) *
               C48221 * C48062 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C48286) *
              C558 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C48286 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C48062) *
              C559 +
          (((C21998 + C21999) * C21588 + (C22000 + C22001) * C21589 +
            ((C21591 * C1295 + C47950 * C1296) * C116 +
             (C21591 * C1297 + C47950 * C1298) * C48017) *
                C21590) *
               C48221 * C48062 -
           ((C22001 + C22000) * C21590 + (C21999 + C21998) * C21589 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C21588) *
               C48221 * C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C1289 -
           (C22482 * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C1290 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 + C22499 * C21590) *
               C48221 * C1291 -
           ((C22497 + C22498) * C21590 + (C22496 + C22495) * C21589 +
            C22482 * C21588) *
               C48221 * C48328) *
              C48272 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            C22759 * C21590) *
               C48221 * C1290 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C1289 -
           ((C22766 + C22767) * C21590 + (C21768 + C21767) * C21589 +
            C21776 * C21588) *
               C48221 * C1291 +
           (C22759 * C21588 + (C22767 + C22766) * C21589 +
            ((C21591 * C5702 + C47950 * C5704) * C116 +
             (C21591 * C5706 + C47950 * C5708) * C48017) *
                C21590) *
               C48221 * C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 -
             (C21591 * C419 + C47950 * C429) * C666 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C22246 + C22247 - C22294 - C22295) * C21589 +
            (C22252 + C22253 - C22296 - C22297) * C21590) *
               C48221 * C48286 +
           ((C22294 - (C22247 + C22246) + C22295) * C21588 +
            (C22296 - (C22253 + C22252) + C22297) * C21589 +
            ((C21591 * C1547 + C47950 * C1550) * C666 -
             (C21743 * C48287 + C21744 * C665) +
             (C21591 * C1553 + C47950 * C1556) * C48104) *
                C21590) *
               C48221 * C48062) *
              C258 +
          ((((C21591 * C418 + C47950 * C428) * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C22298 - (C22260 + C22261) + C22299) * C21589 +
            (C22300 - (C22266 + C22267) + C22301) * C21590) *
               C48221 * C48286 +
           ((C22261 + C22260 - C22298 - C22299) * C21588 +
            (C22267 + C22266 - C22300 - C22301) * C21589 +
            (C21749 * C665 + C21750 * C48287 -
             (C21591 * C1548 + C47950 * C1551) * C666 -
             (C21591 * C1554 + C47950 * C1557) * C48104) *
                C21590) *
               C48221 * C48062) *
              C259 +
          ((((C21591 * C119 + C47950 * C126) * C665 +
             (C21591 * C129 + C47950 * C140) * C48287 -
             (C21591 * C417 + C47950 * C427) * C666 -
             (C21591 * C430 + C47950 * C447) * C48104) *
                C21588 +
            (C22270 + C22271 - C22302 - C22303) * C21589 +
            (C22276 + C22277 - C22304 - C22305) * C21590) *
               C48221 * C48286 +
           ((C22302 - (C22271 + C22270) + C22303) * C21588 +
            (C22304 - (C22277 + C22276) + C22305) * C21589 +
            ((C21591 * C1549 + C47950 * C1552) * C666 -
             (C21755 * C48287 + C21756 * C665) +
             (C21591 * C1555 + C47950 * C1558) * C48104) *
                C21590) *
               C48221 * C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C665 +
            (C21591 * C127 + C47950 * C138) * C48287 -
            (C21591 * C419 + C47950 * C429) * C666 -
            (C21591 * C432 + C47950 * C449) * C48104) *
               C21588 +
           (C22246 + C22247 - C22294 - C22295) * C21589 + C22930 * C21590) *
              C48221 * C1289 +
          ((C22294 - (C22247 + C22246) + C22295) * C21588 +
           (C22296 - (C22253 + C22252) + C22297) * C21589 + C23046 * C21590) *
              C48221 * C1290 +
          (C22930 * C21588 + (C22917 + C22916 - C22915 - C22918) * C21589 +
           (C23037 + C23038 - C23047 - C23048) * C21590) *
              C48221 * C1291 +
          (C23046 * C21588 + (C23047 - (C23038 + C23037) + C23048) * C21589 +
           ((C21591 * C23031 + C47950 * C23032) * C666 -
            (C22493 * C48287 + C22494 * C665) +
            (C21591 * C23033 + C47950 * C23034) * C48104) *
               C21590) *
              C48221 * C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C48357 -
           ((C21761 + C21762) * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C48345 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 +
            ((C21591 * C1024 + C47950 * C1033) * C116 +
             (C21591 * C1036 + C47950 * C1042) * C48017) *
                C21590) *
               C48221 * C48318) *
              C258 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            (C21767 + C21768) * C21590) *
               C48221 * C48345 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C48357 -
           (((C21591 * C1037 + C47950 * C1043) * C48017 +
             (C21591 * C1025 + C47950 * C1034) * C116) *
                C21590 +
            (C21768 + C21767) * C21589 + C21776 * C21588) *
               C48221 * C48318) *
              C259 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C48357 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C48345 +
           (C21777 * C21588 + (C21774 + C21773) * C21589 +
            ((C21591 * C1026 + C47950 * C1035) * C116 +
             (C21591 * C1038 + C47950 * C1044) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C21588 +
           ((C21591 * C263 + C47950 * C276) * C116 +
            (C21591 * C273 + C47950 * C293) * C48017) *
               C21589 +
           ((C21591 * C264 + C47950 * C277) * C116 +
            (C21591 * C280 + C47950 * C294) * C48017) *
               C21590) *
              C48221 * C48000 * C108 -
          (((C21591 * C281 + C47950 * C295) * C48017 +
            (C21591 * C265 + C47950 * C278) * C116) *
               C21590 +
           ((C21591 * C272 + C47950 * C292) * C48017 +
            (C21591 * C262 + C47950 * C275) * C116) *
               C21589 +
           ((C21591 * C128 + C47950 * C139) * C48017 +
            (C21591 * C118 + C47950 * C125) * C116) *
               C21588) *
              C48221 * C48000 * C109 +
          (((C21591 * C119 + C47950 * C126) * C116 +
            (C21591 * C129 + C47950 * C140) * C48017) *
               C21588 +
           ((C21591 * C261 + C47950 * C274) * C116 +
            (C21591 * C271 + C47950 * C291) * C48017) *
               C21589 +
           ((C21591 * C266 + C47950 * C279) * C116 +
            (C21591 * C282 + C47950 * C296) * C48017) *
               C21590) *
              C48221 * C48000 * C110 -
          (((C21591 * C285 + C47950 * C298) * C48017 +
            (C21591 * C268 + C47950 * C286) * C116) *
               C21590 +
           ((C21591 * C284 + C47950 * C297) * C48017 +
            (C21591 * C267 + C47950 * C283) * C116) *
               C21589 +
           ((C21591 * C130 + C47950 * C141) * C48017 +
            (C21591 * C120 + C47950 * C131) * C116) *
               C21588) *
              C48221 * C48000 * C111 +
          (((C21591 * C121 + C47950 * C132) * C116 +
            (C21591 * C133 + C47950 * C142) * C48017) *
               C21588 +
           ((C21591 * C269 + C47950 * C288) * C116 +
            (C21591 * C287 + C47950 * C299) * C48017) *
               C21589 +
           ((C21591 * C270 + C47950 * C289) * C116 +
            (C21591 * C290 + C47950 * C300) * C48017) *
               C21590) *
              C48221 * C48000 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C414 +
            (C21591 * C127 + C47950 * C138) * C48358 -
            (C21591 * C419 + C47950 * C429) * C415 -
            (C21591 * C432 + C47950 * C449) * C48347 +
            (C21591 * C420 + C47950 * C433) * C416 +
            (C21591 * C436 + C47950 * C450) * C48321) *
               C21588 +
           (C21739 * C414 + C21740 * C48358 -
            (C21591 * C817 + C47950 * C822) * C415 -
            (C21591 * C825 + C47950 * C832) * C48347 +
            (C21591 * C1157 + C47950 * C1166) * C416 +
            (C21591 * C1169 + C47950 * C1184) * C48321) *
               C21589 +
           (C21741 * C414 + C21742 * C48358 -
            (C21591 * C1160 + C47950 * C1172) * C415 -
            (C21591 * C1175 + C47950 * C1187) * C48347 +
            (C21591 * C1161 + C47950 * C1176) * C416 +
            (C21591 * C1179 + C47950 * C1188) * C48321) *
               C21590) *
              C48221 * C48000 * C258 +
          (((C21591 * C418 + C47950 * C428) * C415 -
            ((C21591 * C128 + C47950 * C139) * C48358 +
             (C21591 * C118 + C47950 * C125) * C414) +
            (C21591 * C431 + C47950 * C448) * C48347 -
            (C21591 * C421 + C47950 * C434) * C416 -
            (C21591 * C437 + C47950 * C451) * C48321) *
               C21588 +
           ((C21591 * C818 + C47950 * C823) * C415 -
            (C21746 * C48358 + C21745 * C414) +
            (C21591 * C826 + C47950 * C833) * C48347 -
            (C21591 * C1156 + C47950 * C1165) * C416 -
            (C21591 * C1168 + C47950 * C1183) * C48321) *
               C21589 +
           ((C21591 * C1159 + C47950 * C1171) * C415 -
            (C21748 * C48358 + C21747 * C414) +
            (C21591 * C1174 + C47950 * C1186) * C48347 -
            (C21591 * C1162 + C47950 * C1177) * C416 -
            (C21591 * C1180 + C47950 * C1189) * C48321) *
               C21590) *
              C48221 * C48000 * C259 +
          (((C21591 * C119 + C47950 * C126) * C414 +
            (C21591 * C129 + C47950 * C140) * C48358 -
            (C21591 * C417 + C47950 * C427) * C415 -
            (C21591 * C430 + C47950 * C447) * C48347 +
            (C21591 * C422 + C47950 * C435) * C416 +
            (C21591 * C438 + C47950 * C452) * C48321) *
               C21588 +
           (C21751 * C414 + C21752 * C48358 -
            (C21591 * C819 + C47950 * C824) * C415 -
            (C21591 * C827 + C47950 * C834) * C48347 +
            (C21591 * C1155 + C47950 * C1164) * C416 +
            (C21591 * C1167 + C47950 * C1182) * C48321) *
               C21589 +
           (C21753 * C414 + C21754 * C48358 -
            (C21591 * C1158 + C47950 * C1170) * C415 -
            (C21591 * C1173 + C47950 * C1185) * C48347 +
            (C21591 * C1163 + C47950 * C1178) * C416 +
            (C21591 * C1181 + C47950 * C1190) * C48321) *
               C21590) *
              C48221 * C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C947 -
           ((C21761 + C21762) * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C948 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 +
            ((C21591 * C1024 + C47950 * C1033) * C116 +
             (C21591 * C1036 + C47950 * C1042) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48354 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            (C21767 + C21768) * C21590) *
               C48221 * C948 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C947 -
           (((C21591 * C1037 + C47950 * C1043) * C48017 +
             (C21591 * C1025 + C47950 * C1034) * C116) *
                C21590 +
            (C21768 + C21767) * C21589 + C21776 * C21588) *
               C48221 * C48318) *
              C48341 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C947 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C948 +
           (C21777 * C21588 + (C21774 + C21773) * C21589 +
            ((C21591 * C1026 + C47950 * C1035) * C116 +
             (C21591 * C1038 + C47950 * C1044) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C21588 +
           (C21757 + C21758) * C21589 + C21775 * C21590) *
              C48221 * C1015 -
          (C22482 * C21590 + (C21760 + C21759) * C21589 +
           (C21758 + C21757) * C21588) *
              C48221 * C1016 +
          (C21775 * C21588 + (C21762 + C21761) * C21589 + C22499 * C21590) *
              C48221 * C1017 -
          ((C22497 + C22498) * C21590 + (C22496 + C22495) * C21589 +
           C22482 * C21588) *
              C48221 * C1018 +
          (C22499 * C21588 + (C22498 + C22497) * C21589 +
           ((C21591 * C22477 + C47950 * C22478) * C116 +
            (C21591 * C22479 + C47950 * C22480) * C48017) *
               C21590) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C414 +
            (C21591 * C127 + C47950 * C138) * C48358 -
            (C21591 * C419 + C47950 * C429) * C415 -
            (C21591 * C432 + C47950 * C449) * C48347 +
            (C21591 * C420 + C47950 * C433) * C416 +
            (C21591 * C436 + C47950 * C450) * C48321) *
               C21588 +
           (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C21589 +
           C22660 * C21590) *
              C48221 * C947 +
          ((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C21588 +
           (C22624 - (C22623 + C22622) + C22625 - C22652 - C22653) * C21589 +
           (C22654 - (C22632 + C22633) + C22655 - C22656 - C22657) * C21590) *
              C48221 * C948 +
          (C22660 * C21588 +
           (C22633 + C22632 - C22654 - C22655 + C22656 + C22657) * C21589 +
           (C22491 * C414 + C22492 * C48358 -
            (C21591 * C6401 + C47950 * C6403) * C415 -
            (C21591 * C6405 + C47950 * C6407) * C48347 +
            (C21591 * C22609 + C47950 * C22610) * C416 +
            (C21591 * C22611 + C47950 * C22612) * C48321) *
               C21590) *
              C48221 * C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C665 +
            (C21591 * C127 + C47950 * C138) * C48287 -
            (C21591 * C419 + C47950 * C429) * C666 -
            (C21591 * C432 + C47950 * C449) * C48104) *
               C21588 +
           (C21739 * C665 + C21740 * C48287 -
            (C21591 * C817 + C47950 * C822) * C666 -
            (C21591 * C825 + C47950 * C832) * C48104) *
               C21589 +
           (C21741 * C665 + C21742 * C48287 -
            (C21591 * C1160 + C47950 * C1172) * C666 -
            (C21591 * C1175 + C47950 * C1187) * C48104) *
               C21590) *
              C48221 * C48000 * C557 +
          (((C21591 * C418 + C47950 * C428) * C666 -
            ((C21591 * C128 + C47950 * C139) * C48287 +
             (C21591 * C118 + C47950 * C125) * C665) +
            (C21591 * C431 + C47950 * C448) * C48104) *
               C21588 +
           ((C21591 * C818 + C47950 * C823) * C666 -
            (C21746 * C48287 + C21745 * C665) +
            (C21591 * C826 + C47950 * C833) * C48104) *
               C21589 +
           ((C21591 * C1159 + C47950 * C1171) * C666 -
            (C21748 * C48287 + C21747 * C665) +
            (C21591 * C1174 + C47950 * C1186) * C48104) *
               C21590) *
              C48221 * C48000 * C558 +
          (((C21591 * C119 + C47950 * C126) * C665 +
            (C21591 * C129 + C47950 * C140) * C48287 -
            (C21591 * C417 + C47950 * C427) * C666 -
            (C21591 * C430 + C47950 * C447) * C48104) *
               C21588 +
           (C21751 * C665 + C21752 * C48287 -
            (C21591 * C819 + C47950 * C824) * C666 -
            (C21591 * C827 + C47950 * C834) * C48104) *
               C21589 +
           (C21753 * C665 + C21754 * C48287 -
            (C21591 * C1158 + C47950 * C1170) * C666 -
            (C21591 * C1173 + C47950 * C1185) * C48104) *
               C21590) *
              C48221 * C48000 * C559 +
          (((C21591 * C423 + C47950 * C439) * C666 -
            ((C21591 * C130 + C47950 * C141) * C48287 +
             (C21591 * C120 + C47950 * C131) * C665) +
            (C21591 * C440 + C47950 * C453) * C48104) *
               C21588 +
           ((C21591 * C820 + C47950 * C828) * C666 -
            (C21995 * C48287 + C21994 * C665) +
            (C21591 * C829 + C47950 * C835) * C48104) *
               C21589 +
           ((C21591 * C1445 + C47950 * C1446) * C666 -
            (C21997 * C48287 + C21996 * C665) +
            (C21591 * C1447 + C47950 * C1448) * C48104) *
               C21590) *
              C48221 * C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 -
             (C21591 * C419 + C47950 * C429) * C666 -
             (C21591 * C432 + C47950 * C449) * C48104) *
                C21588 +
            (C22246 + C22247 - C22294 - C22295) * C21589 + C22930 * C21590) *
               C48221 * C947 +
           ((C22294 - (C22247 + C22246) + C22295) * C21588 +
            (C22296 - (C22253 + C22252) + C22297) * C21589 +
            (C22915 - (C22916 + C22917) + C22918) * C21590) *
               C48221 * C948 +
           (C22930 * C21588 + (C22917 + C22916 - C22915 - C22918) * C21589 +
            (C22491 * C665 + C22492 * C48287 -
             (C21591 * C6401 + C47950 * C6403) * C666 -
             (C21591 * C6405 + C47950 * C6407) * C48104) *
                C21590) *
               C48221 * C48318) *
              C48272 +
          ((((C21591 * C418 + C47950 * C428) * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             (C21591 * C431 + C47950 * C448) * C48104) *
                C21588 +
            (C22298 - (C22260 + C22261) + C22299) * C21589 + C22931 * C21590) *
               C48221 * C947 +
           ((C22261 + C22260 - C22298 - C22299) * C21588 +
            (C22267 + C22266 - C22300 - C22301) * C21589 +
            (C22920 + C22921 - C22932 - C22933) * C21590) *
               C48221 * C948 +
           (C22931 * C21588 + (C22932 - (C22921 + C22920) + C22933) * C21589 +
            ((C21591 * C6402 + C47950 * C6404) * C666 -
             (C22764 * C48287 + C22765 * C665) +
             (C21591 * C6406 + C47950 * C6408) * C48104) *
                C21590) *
               C48221 * C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C21588 +
           ((C21591 * C263 + C47950 * C276) * C116 +
            (C21591 * C273 + C47950 * C293) * C48017) *
               C21589 +
           ((C21591 * C264 + C47950 * C277) * C116 +
            (C21591 * C280 + C47950 * C294) * C48017) *
               C21590) *
              C48221 * C48000 * C108 -
          (((C21591 * C281 + C47950 * C295) * C48017 +
            (C21591 * C265 + C47950 * C278) * C116) *
               C21590 +
           ((C21591 * C272 + C47950 * C292) * C48017 +
            (C21591 * C262 + C47950 * C275) * C116) *
               C21589 +
           ((C21591 * C128 + C47950 * C139) * C48017 +
            (C21591 * C118 + C47950 * C125) * C116) *
               C21588) *
              C48221 * C48000 * C109 +
          (((C21591 * C119 + C47950 * C126) * C116 +
            (C21591 * C129 + C47950 * C140) * C48017) *
               C21588 +
           ((C21591 * C261 + C47950 * C274) * C116 +
            (C21591 * C271 + C47950 * C291) * C48017) *
               C21589 +
           ((C21591 * C266 + C47950 * C279) * C116 +
            (C21591 * C282 + C47950 * C296) * C48017) *
               C21590) *
              C48221 * C48000 * C110 -
          (((C21591 * C285 + C47950 * C298) * C48017 +
            (C21591 * C268 + C47950 * C286) * C116) *
               C21590 +
           ((C21591 * C284 + C47950 * C297) * C48017 +
            (C21591 * C267 + C47950 * C283) * C116) *
               C21589 +
           ((C21591 * C130 + C47950 * C141) * C48017 +
            (C21591 * C120 + C47950 * C131) * C116) *
               C21588) *
              C48221 * C48000 * C111 +
          (((C21591 * C121 + C47950 * C132) * C116 +
            (C21591 * C133 + C47950 * C142) * C48017) *
               C21588 +
           ((C21591 * C269 + C47950 * C288) * C116 +
            (C21591 * C287 + C47950 * C299) * C48017) *
               C21589 +
           ((C21591 * C270 + C47950 * C289) * C116 +
            (C21591 * C290 + C47950 * C300) * C48017) *
               C21590) *
              C48221 * C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C48357 -
           ((C21761 + C21762) * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C48345 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 +
            ((C21591 * C1024 + C47950 * C1033) * C116 +
             (C21591 * C1036 + C47950 * C1042) * C48017) *
                C21590) *
               C48221 * C48318) *
              C258 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            (C21767 + C21768) * C21590) *
               C48221 * C48345 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C48357 -
           (((C21591 * C1037 + C47950 * C1043) * C48017 +
             (C21591 * C1025 + C47950 * C1034) * C116) *
                C21590 +
            (C21768 + C21767) * C21589 + C21776 * C21588) *
               C48221 * C48318) *
              C259 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C48357 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C48345 +
           (C21777 * C21588 + (C21774 + C21773) * C21589 +
            ((C21591 * C1026 + C47950 * C1035) * C116 +
             (C21591 * C1038 + C47950 * C1044) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C21588 +
            (C21757 + C21758) * C21589 + C21775 * C21590) *
               C48221 * C947 -
           ((C21761 + C21762) * C21590 + (C21760 + C21759) * C21589 +
            (C21758 + C21757) * C21588) *
               C48221 * C948 +
           (C21775 * C21588 + (C21762 + C21761) * C21589 +
            ((C21591 * C1024 + C47950 * C1033) * C116 +
             (C21591 * C1036 + C47950 * C1042) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48354 +
          (((C21763 + C21764) * C21588 + (C21765 + C21766) * C21589 +
            (C21767 + C21768) * C21590) *
               C48221 * C948 -
           (C21776 * C21590 + (C21764 + C21763) * C21589 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C21588) *
               C48221 * C947 -
           (((C21591 * C1037 + C47950 * C1043) * C48017 +
             (C21591 * C1025 + C47950 * C1034) * C116) *
                C21590 +
            (C21768 + C21767) * C21589 + C21776 * C21588) *
               C48221 * C48318) *
              C48341 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C21588 +
            (C21769 + C21770) * C21589 + C21777 * C21590) *
               C48221 * C947 -
           ((C21773 + C21774) * C21590 + (C21772 + C21771) * C21589 +
            (C21770 + C21769) * C21588) *
               C48221 * C948 +
           (C21777 * C21588 + (C21774 + C21773) * C21589 +
            ((C21591 * C1026 + C47950 * C1035) * C116 +
             (C21591 * C1038 + C47950 * C1044) * C48017) *
                C21590) *
               C48221 * C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C21588 +
           (C21757 + C21758) * C21589 + C21775 * C21590) *
              C48221 * C1015 -
          (C22482 * C21590 + (C21760 + C21759) * C21589 +
           (C21758 + C21757) * C21588) *
              C48221 * C1016 +
          (C21775 * C21588 + (C21762 + C21761) * C21589 + C22499 * C21590) *
              C48221 * C1017 -
          ((C22497 + C22498) * C21590 + (C22496 + C22495) * C21589 +
           C22482 * C21588) *
              C48221 * C1018 +
          (C22499 * C21588 + (C22498 + C22497) * C21589 +
           ((C21591 * C22477 + C47950 * C22478) * C116 +
            (C21591 * C22479 + C47950 * C22480) * C48017) *
               C21590) *
              C48221 * C1019) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48058 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C48065 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 + (C27232 + C27233) * C48336) *
                C48338) *
               C2717) *
              C47978 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C48065 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C48058 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C15915) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C2717) *
              C47986 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            ((C26518 * C116 + C26519 * C48017) * C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48058 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C48065 +
           ((C21777 * C15915 + (C21774 + C21773) * C48336) * C10335 +
            ((C26335 + C26334) * C15915 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C2717) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C665 +
              (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
              C26511 * C48104) *
                 C15915 +
             (C22246 + C22247 - C22294 - C22295) * C48336) *
                C10335 +
            ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
              C26513 * C48104) *
                 C15915 +
             (C26992 + C26993 - C26994 - C26995) * C48336) *
                C48338) *
               C48058 +
           (((C22294 - (C22247 + C22246) + C22295) * C15915 +
             (C22296 - (C22253 + C22252) + C22297) * C48336) *
                C10335 +
            ((C26994 - (C26993 + C26992) + C26995) * C15915 +
             (C27720 - (C27721 + C27722) + C27723) * C48336) *
                C48338) *
               C48065 +
           ((C22930 * C15915 + (C22917 + C22916 - C22915 - C22918) * C48336) *
                C10335 +
            ((C27722 + C27721 - C27720 - C27723) * C15915 +
             (C27858 + C27859 - C27860 - C27861) * C48336) *
                C48338) *
               C2717) *
              C2457 +
          ((((C26514 * C666 -
              ((C21591 * C128 + C47950 * C139) * C48287 +
               (C21591 * C118 + C47950 * C125) * C665) +
              C26515 * C48104) *
                 C15915 +
             (C22298 - (C22260 + C22261) + C22299) * C48336) *
                C10335 +
            ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
              C26517 * C48104) *
                 C15915 +
             (C26996 - (C26997 + C26998) + C26999) * C48336) *
                C48338) *
               C48058 +
           (((C22261 + C22260 - C22298 - C22299) * C15915 +
             (C22267 + C22266 - C22300 - C22301) * C48336) *
                C10335 +
            ((C26998 + C26997 - C26996 - C26999) * C15915 +
             (C27724 + C27725 - C27726 - C27727) * C48336) *
                C48338) *
               C48065 +
           ((C22931 * C15915 + (C22932 - (C22921 + C22920) + C22933) * C48336) *
                C10335 +
            ((C27726 - (C27725 + C27724) + C27727) * C15915 +
             ((C21591 * C5880 + C47950 * C5882) * C666 -
              (C22929 * C48287 + C22928 * C665) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48364 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C48360 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 + (C27232 + C27233) * C48336) *
                C48338) *
               C48350 -
           (((C27234 + C27235) * C48336 + (C27233 + C27232) * C15915) * C48338 +
            ((C22496 + C22495) * C48336 + C22482 * C15915) * C10335) *
               C48328) *
              C2457 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C48360 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C48364 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C15915) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C48350 +
           ((C22759 * C15915 + (C22767 + C22766) * C48336) * C10335 +
            ((C27525 + C27524) * C15915 +
             ((C21591 * C6402 + C47950 * C6404) * C116 +
              (C21591 * C6406 + C47950 * C6408) * C48017) *
                 C48336) *
                C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C2349 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C48062) *
              C48363 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C48062 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C2349) *
              C48356 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            ((C26518 * C116 + C26519 * C48017) * C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C2349 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C48062) *
              C48343 +
          ((((C21998 + C21999) * C15915 + (C22000 + C22001) * C48336) * C10335 +
            ((C26660 + C26661) * C15915 +
             ((C21591 * C1445 + C47950 * C1446) * C116 +
              (C21591 * C1447 + C47950 * C1448) * C48017) *
                 C48336) *
                C48338) *
               C48062 -
           (((C26661 + C26660) * C48336 +
             (C26797 * C48017 + C26796 * C116) * C15915) *
                C48338 +
            ((C21999 + C21998) * C48336 +
             ((C21591 * C130 + C47950 * C141) * C48017 +
              (C21591 * C120 + C47950 * C131) * C116) *
                 C15915) *
                C10335) *
               C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C414 +
              (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
              C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                 C15915 +
             (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C48336) *
                C10335 +
            ((C26510 * C414 + C26511 * C48358 - C26512 * C415 -
              C26513 * C48347 + C28264 * C416 + C28265 * C48321) *
                 C15915 +
             (C27382 + C27383 - C27384 - C27385 + C27386 + C27387) * C48336) *
                C48338) *
               C2349 +
           (((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C15915 +
             (C22624 - (C22623 + C22622) + C22625 - C22652 - C22653) * C48336) *
                C10335 +
            ((C27384 - (C27383 + C27382) + C27385 - C27386 - C27387) * C15915 +
             (C27388 - (C27389 + C27390) + C27391 - C27392 - C27393) * C48336) *
                C48338) *
               C48062) *
              C2457 +
          ((((C26514 * C415 -
              ((C21591 * C128 + C47950 * C139) * C48358 +
               (C21591 * C118 + C47950 * C125) * C414) +
              C26515 * C48347 - C26516 * C416 - C26517 * C48321) *
                 C15915 +
             (C24098 - (C24099 + C24100) + C24101 - C24102 - C24103) * C48336) *
                C10335 +
            ((C26516 * C415 - (C26515 * C48358 + C26514 * C414) +
              C26517 * C48347 - C28610 * C416 - C28611 * C48321) *
                 C15915 +
             (C29204 - (C29205 + C29206) + C29207 - C29208 - C29209) * C48336) *
                C48338) *
               C2349 +
           (((C24100 + C24099 - C24098 - C24101 + C24102 + C24103) * C15915 +
             (C24106 + C24105 - C24104 - C24107 + C24108 + C24109) * C48336) *
                C10335 +
            ((C29206 + C29205 - C29204 - C29207 + C29208 + C29209) * C15915 +
             (C22288 * C414 + C22289 * C48358 - C23522 * C415 -
              C23523 * C48347 + (C21591 * C7270 + C47950 * C7272) * C416 +
              (C21591 * C7274 + C47950 * C7276) * C48321) *
                 C48336) *
                C48338) *
               C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47950 * C124) * C665 +
                       (C21591 * C127 + C47950 * C138) * C48287 -
                       C26510 * C666 - C26511 * C48104) *
                          C15915 +
                      (C22246 + C22247 - C22294 - C22295) * C48336) *
                         C10335 +
                     ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
                       C26513 * C48104) *
                          C15915 +
                      (C26992 + C26993 - C26994 - C26995) * C48336) *
                         C48338) *
                        C2349 +
                    (((C22294 - (C22247 + C22246) + C22295) * C15915 +
                      (C22296 - (C22253 + C22252) + C22297) * C48336) *
                         C10335 +
                     ((C26994 - (C26993 + C26992) + C26995) * C15915 +
                      (C27720 - (C27721 + C27722) + C27723) * C48336) *
                         C48338) *
                        C48062) *
                       C47978 +
                   ((((C26514 * C666 -
                       ((C21591 * C128 + C47950 * C139) * C48287 +
                        (C21591 * C118 + C47950 * C125) * C665) +
                       C26515 * C48104) *
                          C15915 +
                      (C22298 - (C22260 + C22261) + C22299) * C48336) *
                         C10335 +
                     ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
                       C26517 * C48104) *
                          C15915 +
                      (C26996 - (C26997 + C26998) + C26999) * C48336) *
                         C48338) *
                        C2349 +
                    (((C22261 + C22260 - C22298 - C22299) * C15915 +
                      (C22267 + C22266 - C22300 - C22301) * C48336) *
                         C10335 +
                     ((C26998 + C26997 - C26996 - C26999) * C15915 +
                      (C27724 + C27725 - C27726 - C27727) * C48336) *
                         C48338) *
                        C48062) *
                       C47986 +
                   (((((C21591 * C119 + C47950 * C126) * C665 +
                       (C21591 * C129 + C47950 * C140) * C48287 -
                       C26518 * C666 - C26519 * C48104) *
                          C15915 +
                      (C22270 + C22271 - C22302 - C22303) * C48336) *
                         C10335 +
                     ((C26518 * C665 + C26519 * C48287 - C26520 * C666 -
                       C26521 * C48104) *
                          C15915 +
                      (C27000 + C27001 - C27002 - C27003) * C48336) *
                         C48338) *
                        C2349 +
                    (((C22302 - (C22271 + C22270) + C22303) * C15915 +
                      (C22304 - (C22277 + C22276) + C22305) * C48336) *
                         C10335 +
                     ((C27002 - (C27001 + C27000) + C27003) * C15915 +
                      ((C21591 * C1163 + C47950 * C1178) * C666 -
                       (C22293 * C48287 + C22292 * C665) +
                       (C21591 * C1181 + C47950 * C1190) * C48104) *
                          C48336) *
                         C48338) *
                        C48062) *
                       C2720)) /
                 (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C2349 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C48062) *
              C48363 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C48062 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C2349) *
              C48356 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            ((C26518 * C116 + C26519 * C48017) * C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C2349 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C48062) *
              C48343 +
          ((((C21998 + C21999) * C15915 + (C22000 + C22001) * C48336) * C10335 +
            ((C26660 + C26661) * C15915 +
             ((C21591 * C1445 + C47950 * C1446) * C116 +
              (C21591 * C1447 + C47950 * C1448) * C48017) *
                 C48336) *
                C48338) *
               C48062 -
           (((C26661 + C26660) * C48336 +
             (C26797 * C48017 + C26796 * C116) * C15915) *
                C48338 +
            ((C21999 + C21998) * C48336 +
             ((C21591 * C130 + C47950 * C141) * C48017 +
              (C21591 * C120 + C47950 * C131) * C116) *
                 C15915) *
                C10335) *
               C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48364 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C48360 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 + (C27232 + C27233) * C48336) *
                C48338) *
               C48350 -
           (((C27234 + C27235) * C48336 + (C27233 + C27232) * C15915) * C48338 +
            ((C22496 + C22495) * C48336 + C22482 * C15915) * C10335) *
               C48328) *
              C2457 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C48360 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C48364 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C15915) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C48350 +
           ((C22759 * C15915 + (C22767 + C22766) * C48336) * C10335 +
            ((C27525 + C27524) * C15915 +
             ((C21591 * C6402 + C47950 * C6404) * C116 +
              (C21591 * C6406 + C47950 * C6408) * C48017) *
                 C48336) *
                C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C3113 +
              (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
              C26511 * C48104) *
                 C15915 +
             (C24756 + C24757 - C24758 - C24759) * C48336) *
                C10335 +
            ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
              C26513 * C48104) *
                 C15915 +
             (C30068 + C30069 - C30070 - C30071) * C48336) *
                C48338) *
               C48058 +
           (((C24758 - (C24757 + C24756) + C24759) * C15915 +
             (C24762 - (C24761 + C24760) + C24763) * C48336) *
                C10335 +
            ((C30070 - (C30069 + C30068) + C30071) * C15915 +
             (C30072 - (C30073 + C30074) + C30075) * C48336) *
                C48338) *
               C48065 +
           ((C24784 * C15915 + (C24766 + C24765 - C24764 - C24767) * C48336) *
                C10335 +
            ((C30074 + C30073 - C30072 - C30075) * C15915 +
             (C31088 + C31089 - C31090 - C31091) * C48336) *
                C48338) *
               C2717) *
              C48272 +
          ((((C26514 * C3114 -
              ((C21591 * C128 + C47950 * C139) * C3111 +
               (C21591 * C118 + C47950 * C125) * C3113) +
              C26515 * C48104) *
                 C15915 +
             (C24768 - (C24769 + C24770) + C24771) * C48336) *
                C10335 +
            ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
              C26517 * C48104) *
                 C15915 +
             (C30076 - (C30077 + C30078) + C30079) * C48336) *
                C48338) *
               C48058 +
           (((C24770 + C24769 - C24768 - C24771) * C15915 +
             (C24774 + C24773 - C24772 - C24775) * C48336) *
                C10335 +
            ((C30078 + C30077 - C30076 - C30079) * C15915 +
             (C30080 + C30081 - C30082 - C30083) * C48336) *
                C48338) *
               C48065 +
           ((C24785 * C15915 + (C24778 - (C24777 + C24776) + C24779) * C48336) *
                C10335 +
            ((C30082 - (C30081 + C30080) + C30083) * C15915 +
             ((C21591 * C5880 + C47950 * C5882) * C3114 -
              (C22929 * C3111 + C22928 * C3113) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C47032 +
             (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
             C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
                C15915 +
            (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C48336) *
               C10335 +
           ((C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
             C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
                C15915 +
            (C30752 + C30753 - C30754 - C30755 + C30756 + C30757) * C48336) *
               C48338) *
              C48058 +
          (((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C15915 +
            (C25302 - (C25301 + C25300) + C25303 - C25304 - C25305) * C48336) *
               C10335 +
           ((C30754 - (C30753 + C30752) + C30755 - C30756 - C30757) * C15915 +
            (C31764 - (C31765 + C31766) + C31767 - C31768 - C31769) * C48336) *
               C48338) *
              C48065 +
          ((C26095 * C15915 +
            (C26088 + C26087 - C26086 - C26089 + C26090 + C26091) * C48336) *
               C10335 +
           ((C31766 + C31765 - C31764 - C31767 + C31768 + C31769) * C15915 +
            (C22645 * C47032 + C22646 * C48100 - C22647 * C47024 -
             C22648 * C48107 + (C21591 * C23723 + C47950 * C23724) * C47038 +
             (C21591 * C23725 + C47950 * C23726) * C3625) *
                C48336) *
               C48338) *
              C2717) *
         C47973) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
             C26511 * C48104) *
                C15915 +
            (C24756 + C24757 - C24758 - C24759) * C48336) *
               C10335 +
           ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
             C26513 * C48104) *
                C15915 +
            (C30068 + C30069 - C30070 - C30071) * C48336) *
               C48338) *
              C48364 +
          (((C24758 - (C24757 + C24756) + C24759) * C15915 +
            (C24762 - (C24761 + C24760) + C24763) * C48336) *
               C10335 +
           ((C30070 - (C30069 + C30068) + C30071) * C15915 +
            (C30072 - (C30073 + C30074) + C30075) * C48336) *
               C48338) *
              C48360 +
          ((C24784 * C15915 + (C24766 + C24765 - C24764 - C24767) * C48336) *
               C10335 +
           ((C30074 + C30073 - C30072 - C30075) * C15915 +
            (C31088 + C31089 - C31090 - C31091) * C48336) *
               C48338) *
              C48350 +
          ((C25568 * C15915 + (C25565 - (C25564 + C25563) + C25566) * C48336) *
               C10335 +
           ((C31090 - (C31089 + C31088) + C31091) * C15915 +
            ((C21591 * C22609 + C47950 * C22610) * C3114 -
             (C23045 * C3111 + C23044 * C3113) +
             (C21591 * C22611 + C47950 * C22612) * C48104) *
                C48336) *
               C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C3113 +
              (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
              C26511 * C48104) *
                 C15915 +
             (C24756 + C24757 - C24758 - C24759) * C48336) *
                C10335 +
            ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
              C26513 * C48104) *
                 C15915 +
             (C30068 + C30069 - C30070 - C30071) * C48336) *
                C48338) *
               C2349 +
           (((C24758 - (C24757 + C24756) + C24759) * C15915 +
             (C24762 - (C24761 + C24760) + C24763) * C48336) *
                C10335 +
            ((C30070 - (C30069 + C30068) + C30071) * C15915 +
             (C30072 - (C30073 + C30074) + C30075) * C48336) *
                C48338) *
               C48062) *
              C48354 +
          ((((C26514 * C3114 -
              ((C21591 * C128 + C47950 * C139) * C3111 +
               (C21591 * C118 + C47950 * C125) * C3113) +
              C26515 * C48104) *
                 C15915 +
             (C24768 - (C24769 + C24770) + C24771) * C48336) *
                C10335 +
            ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
              C26517 * C48104) *
                 C15915 +
             (C30076 - (C30077 + C30078) + C30079) * C48336) *
                C48338) *
               C2349 +
           (((C24770 + C24769 - C24768 - C24771) * C15915 +
             (C24774 + C24773 - C24772 - C24775) * C48336) *
                C10335 +
            ((C30078 + C30077 - C30076 - C30079) * C15915 +
             (C30080 + C30081 - C30082 - C30083) * C48336) *
                C48338) *
               C48062) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C3113 +
              (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
              C26519 * C48104) *
                 C15915 +
             (C25030 + C25031 - C25032 - C25033) * C48336) *
                C10335 +
            ((C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
              C26521 * C48104) *
                 C15915 +
             (C30408 + C30409 - C30410 - C30411) * C48336) *
                C48338) *
               C2349 +
           (((C25032 - (C25031 + C25030) + C25033) * C15915 +
             (C25036 - (C25035 + C25034) + C25037) * C48336) *
                C10335 +
            ((C30410 - (C30409 + C30408) + C30411) * C15915 +
             ((C21591 * C1163 + C47950 * C1178) * C3114 -
              (C22293 * C3111 + C22292 * C3113) +
              (C21591 * C1181 + C47950 * C1190) * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3363 +
             (C21591 * C127 + C47950 * C138) * C48365 - C26510 * C3364 -
             C26511 * C48362 + C26512 * C3365 + C26513 * C48353 -
             C28264 * C3366 - C28265 * C48334) *
                C15915 +
            (C25667 + C25668 - C25669 - C25670 + C25671 + C25672 - C25673 -
             C25674) *
                C48336) *
               C10335 +
           ((C26510 * C3363 + C26511 * C48365 - C26512 * C3364 -
             C26513 * C48362 + C28264 * C3365 + C28265 * C48353 -
             C28266 * C3366 - C28267 * C48334) *
                C15915 +
            (C31222 + C31223 - C31224 - C31225 + C31226 + C31227 - C31228 -
             C31229) *
                C48336) *
               C48338) *
              C2349 +
          (((C25669 - (C25668 + C25667) + C25670 - C25671 - C25672 + C25673 +
             C25674) *
                C15915 +
            (C25677 - (C25676 + C25675) + C25678 - C25679 - C25680 + C25681 +
             C25682) *
                C48336) *
               C10335 +
           ((C31224 - (C31223 + C31222) + C31225 - C31226 - C31227 + C31228 +
             C31229) *
                C15915 +
            (C22643 * C3364 - (C22285 * C48365 + C22284 * C3363) +
             C22644 * C48362 - C23750 * C3365 - C23751 * C48353 +
             (C21591 * C23353 + C47950 * C23354) * C3366 +
             (C21591 * C23355 + C47950 * C23356) * C48334) *
                C48336) *
               C48338) *
              C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C47032 +
              (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
              C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
                 C15915 +
             (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C48336) *
                C10335 +
            ((C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
              C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
                 C15915 +
             (C30752 + C30753 - C30754 - C30755 + C30756 + C30757) * C48336) *
                C48338) *
               C2349 +
           (((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C15915 +
             (C25302 - (C25301 + C25300) + C25303 - C25304 - C25305) * C48336) *
                C10335 +
            ((C30754 - (C30753 + C30752) + C30755 - C30756 - C30757) * C15915 +
             (C22643 * C47024 - (C22285 * C48100 + C22284 * C47032) +
              C22644 * C48107 - C23750 * C47038 - C23751 * C3625) *
                 C48336) *
                C48338) *
               C48062) *
              C48272 +
          ((((C26514 * C47024 -
              ((C21591 * C128 + C47950 * C139) * C48100 +
               (C21591 * C118 + C47950 * C125) * C47032) +
              C26515 * C48107 - C26516 * C47038 - C26517 * C3625) *
                 C15915 +
             (C25306 - (C25307 + C25308) + C25309 - C25310 - C25311) * C48336) *
                C10335 +
            ((C26516 * C47024 - (C26515 * C48100 + C26514 * C47032) +
              C26517 * C48107 - C28610 * C47038 - C28611 * C3625) *
                 C15915 +
             (C30758 - (C30759 + C30760) + C30761 - C30762 - C30763) * C48336) *
                C48338) *
               C2349 +
           (((C25308 + C25307 - C25306 - C25309 + C25310 + C25311) * C15915 +
             (C25314 + C25313 - C25312 - C25315 + C25316 + C25317) * C48336) *
                C10335 +
            ((C30760 + C30759 - C30758 - C30761 + C30762 + C30763) * C15915 +
             (C22288 * C47032 + C22289 * C48100 - C23522 * C47024 -
              C23523 * C48107 + (C21591 * C7270 + C47950 * C7272) * C47038 +
              (C21591 * C7274 + C47950 * C7276) * C3625) *
                 C48336) *
                C48338) *
               C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C3113 +
              (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
              C26511 * C48104) *
                 C15915 +
             (C24756 + C24757 - C24758 - C24759) * C48336) *
                C10335 +
            ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
              C26513 * C48104) *
                 C15915 +
             (C30068 + C30069 - C30070 - C30071) * C48336) *
                C48338) *
               C2349 +
           (((C24758 - (C24757 + C24756) + C24759) * C15915 +
             (C24762 - (C24761 + C24760) + C24763) * C48336) *
                C10335 +
            ((C30070 - (C30069 + C30068) + C30071) * C15915 +
             (C30072 - (C30073 + C30074) + C30075) * C48336) *
                C48338) *
               C48062) *
              C48354 +
          ((((C26514 * C3114 -
              ((C21591 * C128 + C47950 * C139) * C3111 +
               (C21591 * C118 + C47950 * C125) * C3113) +
              C26515 * C48104) *
                 C15915 +
             (C24768 - (C24769 + C24770) + C24771) * C48336) *
                C10335 +
            ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
              C26517 * C48104) *
                 C15915 +
             (C30076 - (C30077 + C30078) + C30079) * C48336) *
                C48338) *
               C2349 +
           (((C24770 + C24769 - C24768 - C24771) * C15915 +
             (C24774 + C24773 - C24772 - C24775) * C48336) *
                C10335 +
            ((C30078 + C30077 - C30076 - C30079) * C15915 +
             (C30080 + C30081 - C30082 - C30083) * C48336) *
                C48338) *
               C48062) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C3113 +
              (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
              C26519 * C48104) *
                 C15915 +
             (C25030 + C25031 - C25032 - C25033) * C48336) *
                C10335 +
            ((C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
              C26521 * C48104) *
                 C15915 +
             (C30408 + C30409 - C30410 - C30411) * C48336) *
                C48338) *
               C2349 +
           (((C25032 - (C25031 + C25030) + C25033) * C15915 +
             (C25036 - (C25035 + C25034) + C25037) * C48336) *
                C10335 +
            ((C30410 - (C30409 + C30408) + C30411) * C15915 +
             ((C21591 * C1163 + C47950 * C1178) * C3114 -
              (C22293 * C3111 + C22292 * C3113) +
              (C21591 * C1181 + C47950 * C1190) * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
             C26511 * C48104) *
                C15915 +
            (C24756 + C24757 - C24758 - C24759) * C48336) *
               C10335 +
           ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
             C26513 * C48104) *
                C15915 +
            (C30068 + C30069 - C30070 - C30071) * C48336) *
               C48338) *
              C48364 +
          (((C24758 - (C24757 + C24756) + C24759) * C15915 +
            (C24762 - (C24761 + C24760) + C24763) * C48336) *
               C10335 +
           ((C30070 - (C30069 + C30068) + C30071) * C15915 +
            (C30072 - (C30073 + C30074) + C30075) * C48336) *
               C48338) *
              C48360 +
          ((C24784 * C15915 + (C24766 + C24765 - C24764 - C24767) * C48336) *
               C10335 +
           ((C30074 + C30073 - C30072 - C30075) * C15915 +
            (C31088 + C31089 - C31090 - C31091) * C48336) *
               C48338) *
              C48350 +
          ((C25568 * C15915 + (C25565 - (C25564 + C25563) + C25566) * C48336) *
               C10335 +
           ((C31090 - (C31089 + C31088) + C31091) * C15915 +
            ((C21591 * C22609 + C47950 * C22610) * C3114 -
             (C23045 * C3111 + C23044 * C3113) +
             (C21591 * C22611 + C47950 * C22612) * C48104) *
                C48336) *
               C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C1289 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C1290 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 + (C27232 + C27233) * C48336) *
                C48338) *
               C1291 -
           (((C27234 + C27235) * C48336 + (C27233 + C27232) * C15915) * C48338 +
            ((C22496 + C22495) * C48336 + C22482 * C15915) * C10335) *
               C48328) *
              C48272 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C1290 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C1289 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C15915) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C1291 +
           ((C22759 * C15915 + (C22767 + C22766) * C48336) * C10335 +
            ((C27525 + C27524) * C15915 +
             ((C21591 * C6402 + C47950 * C6404) * C116 +
              (C21591 * C6406 + C47950 * C6408) * C48017) *
                 C48336) *
                C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48286 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C48062) *
              C557 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C48062 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C48286) *
              C558 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            ((C26518 * C116 + C26519 * C48017) * C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48286 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C48062) *
              C559 +
          ((((C21998 + C21999) * C15915 + (C22000 + C22001) * C48336) * C10335 +
            ((C26660 + C26661) * C15915 +
             ((C21591 * C1445 + C47950 * C1446) * C116 +
              (C21591 * C1447 + C47950 * C1448) * C48017) *
                 C48336) *
                C48338) *
               C48062 -
           (((C26661 + C26660) * C48336 +
             ((C21591 * C440 + C47950 * C453) * C48017 +
              (C21591 * C423 + C47950 * C439) * C116) *
                 C15915) *
                C48338 +
            ((C21999 + C21998) * C48336 +
             ((C21591 * C130 + C47950 * C141) * C48017 +
              (C21591 * C120 + C47950 * C131) * C116) *
                 C15915) *
                C10335) *
               C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C1672 +
              (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
              C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                 C15915 +
             (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C48336) *
                C10335 +
            ((C26510 * C1672 + C26511 * C1669 - C26512 * C1673 -
              C26513 * C1670 + C28264 * C1674 + C28265 * C48321) *
                 C15915 +
             (C28154 + C28155 - C28156 - C28157 + C28158 + C28159) * C48336) *
                C48338) *
               C48286 +
           (((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C15915 +
             (C23277 - (C23276 + C23275) + C23278 - C23279 - C23280) * C48336) *
                C10335 +
            ((C28156 - (C28155 + C28154) + C28157 - C28158 - C28159) * C15915 +
             (C28160 - (C28161 + C28162) + C28163 - C28164 - C28165) * C48336) *
                C48338) *
               C48062) *
              C48272 +
          ((((C26514 * C1673 -
              ((C21591 * C128 + C47950 * C139) * C1669 +
               (C21591 * C118 + C47950 * C125) * C1672) +
              C26515 * C1670 - C26516 * C1674 - C26517 * C48321) *
                 C15915 +
             (C23504 - (C23505 + C23506) + C23507 - C23524 - C23525) * C48336) *
                C10335 +
            ((C26516 * C1673 - (C26515 * C1669 + C26514 * C1672) +
              C26517 * C1670 - (C21591 * C1858 + C47950 * C1864) * C1674 -
              (C21591 * C1867 + C47950 * C1876) * C48321) *
                 C15915 +
             (C28464 - (C28465 + C28466) + C28467 - C28474 - C28475) * C48336) *
                C48338) *
               C48286 +
           (((C23506 + C23505 - C23504 - C23507 + C23524 + C23525) * C15915 +
             (C23514 + C23513 - C23512 - C23515 + C23526 + C23527) * C48336) *
                C10335 +
            ((C28466 + C28465 - C28464 - C28467 + C28474 + C28475) * C15915 +
             (C22288 * C1672 + C22289 * C1669 - C23522 * C1673 -
              C23523 * C1670 + (C21591 * C7270 + C47950 * C7272) * C1674 +
              (C21591 * C7274 + C47950 * C7276) * C48321) *
                 C48336) *
                C48338) *
               C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C15915 +
            (C22246 + C22247 - C22294 - C22295) * C48336) *
               C10335 +
           ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C15915 +
            (C26992 + C26993 - C26994 - C26995) * C48336) *
               C48338) *
              C1289 +
          (((C22294 - (C22247 + C22246) + C22295) * C15915 +
            (C22296 - (C22253 + C22252) + C22297) * C48336) *
               C10335 +
           ((C26994 - (C26993 + C26992) + C26995) * C15915 +
            (C27720 - (C27721 + C27722) + C27723) * C48336) *
               C48338) *
              C1290 +
          ((C22930 * C15915 + (C22917 + C22916 - C22915 - C22918) * C48336) *
               C10335 +
           ((C27722 + C27721 - C27720 - C27723) * C15915 +
            (C27858 + C27859 - C27860 - C27861) * C48336) *
               C48338) *
              C1291 +
          ((C23046 * C15915 + (C23047 - (C23038 + C23037) + C23048) * C48336) *
               C10335 +
           ((C27860 - (C27859 + C27858) + C27861) * C15915 +
            ((C21591 * C22609 + C47950 * C22610) * C666 -
             (C23045 * C48287 + C23044 * C665) +
             (C21591 * C22611 + C47950 * C22612) * C48104) *
                C48336) *
               C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C665 +
              (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
              C26511 * C48104) *
                 C15915 +
             (C22246 + C22247 - C22294 - C22295) * C48336) *
                C10335 +
            ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
              C26513 * C48104) *
                 C15915 +
             (C26992 + C26993 - C26994 - C26995) * C48336) *
                C48338) *
               C48286 +
           (((C22294 - (C22247 + C22246) + C22295) * C15915 +
             (C22296 - (C22253 + C22252) + C22297) * C48336) *
                C10335 +
            ((C26994 - (C26993 + C26992) + C26995) * C15915 +
             (C22643 * C666 - (C22285 * C48287 + C22284 * C665) +
              C22644 * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C258 +
          ((((C26514 * C666 -
              ((C21591 * C128 + C47950 * C139) * C48287 +
               (C21591 * C118 + C47950 * C125) * C665) +
              C26515 * C48104) *
                 C15915 +
             (C22298 - (C22260 + C22261) + C22299) * C48336) *
                C10335 +
            ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
              C26517 * C48104) *
                 C15915 +
             (C26996 - (C26997 + C26998) + C26999) * C48336) *
                C48338) *
               C48286 +
           (((C22261 + C22260 - C22298 - C22299) * C15915 +
             (C22267 + C22266 - C22300 - C22301) * C48336) *
                C10335 +
            ((C26998 + C26997 - C26996 - C26999) * C15915 +
             (C22288 * C665 + C22289 * C48287 - C23522 * C666 -
              C23523 * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C259 +
          (((((C21591 * C119 + C47950 * C126) * C665 +
              (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
              C26519 * C48104) *
                 C15915 +
             (C22270 + C22271 - C22302 - C22303) * C48336) *
                C10335 +
            ((C26518 * C665 + C26519 * C48287 - C26520 * C666 -
              C26521 * C48104) *
                 C15915 +
             (C27000 + C27001 - C27002 - C27003) * C48336) *
                C48338) *
               C48286 +
           (((C22302 - (C22271 + C22270) + C22303) * C15915 +
             (C22304 - (C22277 + C22276) + C22305) * C48336) *
                C10335 +
            ((C27002 - (C27001 + C27000) + C27003) * C15915 +
             ((C21591 * C1163 + C47950 * C1178) * C666 -
              (C22293 * C48287 + C22292 * C665) +
              (C21591 * C1181 + C47950 * C1190) * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C2133 +
             (C21591 * C127 + C47950 * C138) * C2129 - C26510 * C2134 -
             C26511 * C2130 + C26512 * C2135 + C26513 * C2131 - C28264 * C2136 -
             C28265 * C48334) *
                C15915 +
            (C23728 + C23729 - C23730 - C23731 + C23732 + C23733 - C23752 -
             C23753) *
                C48336) *
               C10335 +
           ((C26510 * C2133 + C26511 * C2129 - C26512 * C2134 - C26513 * C2130 +
             C28264 * C2135 + C28265 * C2131 - C28266 * C2136 -
             C28267 * C48334) *
                C15915 +
            (C28742 + C28743 - C28744 - C28745 + C28746 + C28747 - C28748 -
             C28749) *
                C48336) *
               C48338) *
              C48286 +
          (((C23730 - (C23729 + C23728) + C23731 - C23732 - C23733 + C23752 +
             C23753) *
                C15915 +
            (C23740 - (C23739 + C23738) + C23741 - C23742 - C23743 + C23754 +
             C23755) *
                C48336) *
               C10335 +
           ((C28744 - (C28743 + C28742) + C28745 - C28746 - C28747 + C28748 +
             C28749) *
                C15915 +
            (C22643 * C2134 - (C22285 * C2129 + C22284 * C2133) +
             C22644 * C2130 - C23750 * C2135 - C23751 * C2131 +
             (C21591 * C23353 + C47950 * C23354) * C2136 +
             (C21591 * C23355 + C47950 * C23356) * C48334) *
                C48336) *
               C48338) *
              C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C21591 * C117 + C47950 * C124) * C116 +
                 (C21591 * C127 + C47950 * C138) * C48017) *
                    C15915 +
                (C21757 + C21758) * C48336) *
                   C10335 +
               (((C21591 * C419 + C47950 * C429) * C116 +
                 (C21591 * C432 + C47950 * C449) * C48017) *
                    C15915 +
                (C22282 * C116 + C22283 * C48017) * C48336) *
                   C48338) *
                  C48000 * C108 -
              (((C22287 * C48017 + C22286 * C116) * C48336 +
                ((C21591 * C431 + C47950 * C448) * C48017 +
                 (C21591 * C418 + C47950 * C428) * C116) *
                    C15915) *
                   C48338 +
               ((C21764 + C21763) * C48336 +
                ((C21591 * C128 + C47950 * C139) * C48017 +
                 (C21591 * C118 + C47950 * C125) * C116) *
                    C15915) *
                   C10335) *
                  C48000 * C109 +
              ((((C21591 * C119 + C47950 * C126) * C116 +
                 (C21591 * C129 + C47950 * C140) * C48017) *
                    C15915 +
                (C21769 + C21770) * C48336) *
                   C10335 +
               (((C21591 * C417 + C47950 * C427) * C116 +
                 (C21591 * C430 + C47950 * C447) * C48017) *
                    C15915 +
                (C22290 * C116 + C22291 * C48017) * C48336) *
                   C48338) *
                  C48000 * C110 -
              ((((C21591 * C829 + C47950 * C835) * C48017 +
                 (C21591 * C820 + C47950 * C828) * C116) *
                    C48336 +
                ((C21591 * C440 + C47950 * C453) * C48017 +
                 (C21591 * C423 + C47950 * C439) * C116) *
                    C15915) *
                   C48338 +
               ((C21999 + C21998) * C48336 +
                ((C21591 * C130 + C47950 * C141) * C48017 +
                 (C21591 * C120 + C47950 * C131) * C116) *
                    C15915) *
                   C10335) *
                  C48000 * C111 +
              ((((C21591 * C121 + C47950 * C132) * C116 +
                 (C21591 * C133 + C47950 * C142) * C48017) *
                    C15915 +
                ((C21591 * C269 + C47950 * C288) * C116 +
                 (C21591 * C287 + C47950 * C299) * C48017) *
                    C48336) *
                   C10335 +
               (((C21591 * C425 + C47950 * C443) * C116 +
                 (C21591 * C444 + C47950 * C455) * C48017) *
                    C15915 +
                ((C21591 * C821 + C47950 * C830) * C116 +
                 (C21591 * C831 + C47950 * C836) * C48017) *
                    C48336) *
                   C48338) *
                  C48000 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C21591 * C117 + C47950 * C124) * C116 +
                  (C21591 * C127 + C47950 * C138) * C48017) *
                     C15915 +
                 (C21757 + C21758) * C48336) *
                    C10335 +
                (((C21591 * C419 + C47950 * C429) * C116 +
                  (C21591 * C432 + C47950 * C449) * C48017) *
                     C15915 +
                 (C26324 + C26325) * C48336) *
                    C48338) *
                   C48357 -
               (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) *
                    C48338 +
                ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                    C10335) *
                   C48345 +
               ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
                ((C26327 + C26326) * C15915 +
                 (C22645 * C116 + C22646 * C48017) * C48336) *
                    C48338) *
                   C48318) *
                  C258 +
              ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) *
                    C10335 +
                ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                    C48338) *
                   C48345 -
               (((C26329 + C26328) * C48336 +
                 ((C21591 * C431 + C47950 * C448) * C48017 +
                  (C21591 * C418 + C47950 * C428) * C116) *
                     C15915) *
                    C48338 +
                ((C21764 + C21763) * C48336 +
                 ((C21591 * C128 + C47950 * C139) * C48017 +
                  (C21591 * C118 + C47950 * C125) * C116) *
                     C15915) *
                    C10335) *
                   C48357 -
               (((C22929 * C48017 + C22928 * C116) * C48336 +
                 (C26331 + C26330) * C15915) *
                    C48338 +
                ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
                   C48318) *
                  C259 +
              (((((C21591 * C119 + C47950 * C126) * C116 +
                  (C21591 * C129 + C47950 * C140) * C48017) *
                     C15915 +
                 (C21769 + C21770) * C48336) *
                    C10335 +
                (((C21591 * C417 + C47950 * C427) * C116 +
                  (C21591 * C430 + C47950 * C447) * C48017) *
                     C15915 +
                 (C26332 + C26333) * C48336) *
                    C48338) *
                   C48357 -
               (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) *
                    C48338 +
                ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                    C10335) *
                   C48345 +
               ((C21777 * C15915 + (C21774 + C21773) * C48336) * C10335 +
                ((C26335 + C26334) * C15915 +
                 ((C21591 * C1549 + C47950 * C1552) * C116 +
                  (C21591 * C1555 + C47950 * C1558) * C48017) *
                     C48336) *
                    C48338) *
                   C48318) *
                  C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C414 +
             (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
             C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                C15915 +
            (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C48336) *
               C10335 +
           ((C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
             (C21591 * C1859 + C47950 * C1865) * C416 +
             (C21591 * C1868 + C47950 * C1877) * C48321) *
                C15915 +
            (C22282 * C414 + C22283 * C48358 - C22640 * C415 - C22641 * C48347 +
             C23748 * C416 + C23749 * C48321) *
                C48336) *
               C48338) *
              C48000 * C258 +
          (((C26514 * C415 -
             ((C21591 * C128 + C47950 * C139) * C48358 +
              (C21591 * C118 + C47950 * C125) * C414) +
             C26515 * C48347 - C26516 * C416 - C26517 * C48321) *
                C15915 +
            (C24098 - (C24099 + C24100) + C24101 - C24102 - C24103) * C48336) *
               C10335 +
           ((C26516 * C415 - (C26515 * C48358 + C26514 * C414) +
             C26517 * C48347 - (C21591 * C1858 + C47950 * C1864) * C416 -
             (C21591 * C1867 + C47950 * C1876) * C48321) *
                C15915 +
            (C23520 * C415 - (C22287 * C48358 + C22286 * C414) +
             C23521 * C48347 - (C21591 * C2240 + C47950 * C2243) * C416 -
             (C21591 * C2246 + C47950 * C2249) * C48321) *
                C48336) *
               C48338) *
              C48000 * C259 +
          ((((C21591 * C119 + C47950 * C126) * C414 +
             (C21591 * C129 + C47950 * C140) * C48358 - C26518 * C415 -
             C26519 * C48347 + C26520 * C416 + C26521 * C48321) *
                C15915 +
            (C21751 * C414 + C21752 * C48358 - C22290 * C415 - C22291 * C48347 +
             C26522 * C416 + C26523 * C48321) *
                C48336) *
               C10335 +
           ((C26518 * C414 + C26519 * C48358 - C26520 * C415 - C26521 * C48347 +
             (C21591 * C1857 + C47950 * C1863) * C416 +
             (C21591 * C1866 + C47950 * C1875) * C48321) *
                C15915 +
            (C22290 * C414 + C22291 * C48358 - C26522 * C415 - C26523 * C48347 +
             (C21591 * C2241 + C47950 * C2244) * C416 +
             (C21591 * C2247 + C47950 * C2250) * C48321) *
                C48336) *
               C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C947 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C948 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 +
             (C22645 * C116 + C22646 * C48017) * C48336) *
                C48338) *
               C48318) *
              C48354 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C948 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C947 -
           (((C22929 * C48017 + C22928 * C116) * C48336 +
             (C26331 + C26330) * C15915) *
                C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C48318) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            ((C26518 * C116 + C26519 * C48017) * C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C947 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C948 +
           ((C21777 * C15915 + (C21774 + C21773) * C48336) * C10335 +
            ((C26335 + C26334) * C15915 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C15915 +
            (C21757 + C21758) * C48336) *
               C10335 +
           ((C26510 * C116 + C26511 * C48017) * C15915 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C1015 -
          (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
           ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) * C10335) *
              C1016 +
          ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
           ((C26327 + C26326) * C15915 + (C27232 + C27233) * C48336) * C48338) *
              C1017 -
          (((C27234 + C27235) * C48336 + (C27233 + C27232) * C15915) * C48338 +
           ((C22496 + C22495) * C48336 + C22482 * C15915) * C10335) *
              C1018 +
          ((C22499 * C15915 + (C22498 + C22497) * C48336) * C10335 +
           ((C27235 + C27234) * C15915 +
            ((C21591 * C23031 + C47950 * C23032) * C116 +
             (C21591 * C23033 + C47950 * C23034) * C48017) *
                C48336) *
               C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C414 +
             (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
             C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                C15915 +
            (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C48336) *
               C10335 +
           ((C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
             (C21591 * C1859 + C47950 * C1865) * C416 +
             (C21591 * C1868 + C47950 * C1877) * C48321) *
                C15915 +
            (C27382 + C27383 - C27384 - C27385 + C27386 + C27387) * C48336) *
               C48338) *
              C947 +
          (((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C15915 +
            (C22624 - (C22623 + C22622) + C22625 - C22652 - C22653) * C48336) *
               C10335 +
           ((C27384 - (C27383 + C27382) + C27385 - C27386 - C27387) * C15915 +
            (C27388 - (C27389 + C27390) + C27391 - C27392 - C27393) * C48336) *
               C48338) *
              C948 +
          ((C22660 * C15915 +
            (C22633 + C22632 - C22654 - C22655 + C22656 + C22657) * C48336) *
               C10335 +
           ((C27390 + C27389 - C27388 - C27391 + C27392 + C27393) * C15915 +
            (C22645 * C414 + C22646 * C48358 - C22647 * C415 - C22648 * C48347 +
             (C21591 * C23723 + C47950 * C23724) * C416 +
             (C21591 * C23725 + C47950 * C23726) * C48321) *
                C48336) *
               C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C1672 +
             (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
             C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                C15915 +
            (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C48336) *
               C10335 +
           ((C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
             (C21591 * C1859 + C47950 * C1865) * C1674 +
             (C21591 * C1868 + C47950 * C1877) * C48321) *
                C15915 +
            (C22282 * C1672 + C22283 * C1669 - C22640 * C1673 - C22641 * C1670 +
             C23748 * C1674 + C23749 * C48321) *
                C48336) *
               C48338) *
              C48000 * C48354 +
          (((C26514 * C1673 -
             ((C21591 * C128 + C47950 * C139) * C1669 +
              (C21591 * C118 + C47950 * C125) * C1672) +
             C26515 * C1670 - C26516 * C1674 - C26517 * C48321) *
                C15915 +
            (C23504 - (C23505 + C23506) + C23507 - C23524 - C23525) * C48336) *
               C10335 +
           ((C26516 * C1673 - (C26515 * C1669 + C26514 * C1672) +
             C26517 * C1670 - (C21591 * C1858 + C47950 * C1864) * C1674 -
             (C21591 * C1867 + C47950 * C1876) * C48321) *
                C15915 +
            (C23520 * C1673 - (C22287 * C1669 + C22286 * C1672) +
             C23521 * C1670 - (C21591 * C2240 + C47950 * C2243) * C1674 -
             (C21591 * C2246 + C47950 * C2249) * C48321) *
                C48336) *
               C48338) *
              C48000 * C48341 +
          ((((C21591 * C119 + C47950 * C126) * C1672 +
             (C21591 * C129 + C47950 * C140) * C1669 - C26518 * C1673 -
             C26519 * C1670 + C26520 * C1674 + C26521 * C48321) *
                C15915 +
            (C21751 * C1672 + C21752 * C1669 - C22290 * C1673 - C22291 * C1670 +
             C26522 * C1674 + C26523 * C48321) *
                C48336) *
               C10335 +
           ((C26518 * C1672 + C26519 * C1669 - C26520 * C1673 - C26521 * C1670 +
             (C21591 * C1857 + C47950 * C1863) * C1674 +
             (C21591 * C1866 + C47950 * C1875) * C48321) *
                C15915 +
            (C22290 * C1672 + C22291 * C1669 - C26522 * C1673 - C26523 * C1670 +
             (C21591 * C2241 + C47950 * C2244) * C1674 +
             (C21591 * C2247 + C47950 * C2250) * C48321) *
                C48336) *
               C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C1672 +
             (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
             C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                C15915 +
            (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C48336) *
               C10335 +
           ((C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
             (C21591 * C1859 + C47950 * C1865) * C1674 +
             (C21591 * C1868 + C47950 * C1877) * C48321) *
                C15915 +
            (C28154 + C28155 - C28156 - C28157 + C28158 + C28159) * C48336) *
               C48338) *
              C48357 +
          (((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C15915 +
            (C23277 - (C23276 + C23275) + C23278 - C23279 - C23280) * C48336) *
               C10335 +
           ((C28156 - (C28155 + C28154) + C28157 - C28158 - C28159) * C15915 +
            (C28160 - (C28161 + C28162) + C28163 - C28164 - C28165) * C48336) *
               C48338) *
              C48345 +
          ((C23291 * C15915 +
            (C23283 + C23282 - C23281 - C23284 + C23285 + C23286) * C48336) *
               C10335 +
           ((C28162 + C28161 - C28160 - C28163 + C28164 + C28165) * C15915 +
            (C22645 * C1672 + C22646 * C1669 - C22647 * C1673 - C22648 * C1670 +
             (C21591 * C23723 + C47950 * C23724) * C1674 +
             (C21591 * C23725 + C47950 * C23726) * C48321) *
                C48336) *
               C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C1852 +
            (C21591 * C127 + C47950 * C138) * C1847 - C26510 * C1853 -
            C26511 * C1848 + C26512 * C1854 + C26513 * C1849 - C28264 * C1855 -
            C28265 * C1850 + C28266 * C1856 + C28267 * C1851) *
               C15915 +
           (C21739 * C1852 + C21740 * C1847 - C22282 * C1853 - C22283 * C1848 +
            C22640 * C1854 + C22641 * C1849 - C23748 * C1855 - C23749 * C1850 +
            C28268 * C1856 + C28269 * C1851) *
               C48336) *
              C10335 +
          ((C26510 * C1852 + C26511 * C1847 - C26512 * C1853 - C26513 * C1848 +
            C28264 * C1854 + C28265 * C1849 - C28266 * C1855 - C28267 * C1850 +
            (C21591 * C12369 + C47950 * C12371) * C1856 +
            (C21591 * C12373 + C47950 * C12375) * C1851) *
               C15915 +
           (C22282 * C1852 + C22283 * C1847 - C22640 * C1853 - C22641 * C1848 +
            C23748 * C1854 + C23749 * C1849 - C28268 * C1855 - C28269 * C1850 +
            (C21591 * C28247 + C47950 * C28248) * C1856 +
            (C21591 * C28249 + C47950 * C28250) * C1851) *
               C48336) *
              C48338) *
         C48000 * C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C665 +
              (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
              C26511 * C48104) *
                 C15915 +
             (C22246 + C22247 - C22294 - C22295) * C48336) *
                C10335 +
            ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
              C26513 * C48104) *
                 C15915 +
             (C26992 + C26993 - C26994 - C26995) * C48336) *
                C48338) *
               C947 +
           (((C22294 - (C22247 + C22246) + C22295) * C15915 +
             (C22296 - (C22253 + C22252) + C22297) * C48336) *
                C10335 +
            ((C26994 - (C26993 + C26992) + C26995) * C15915 +
             (C27720 - (C27721 + C27722) + C27723) * C48336) *
                C48338) *
               C948 +
           ((C22930 * C15915 + (C22917 + C22916 - C22915 - C22918) * C48336) *
                C10335 +
            ((C27722 + C27721 - C27720 - C27723) * C15915 +
             (C22645 * C665 + C22646 * C48287 - C22647 * C666 -
              C22648 * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C48272 +
          ((((C26514 * C666 -
              ((C21591 * C128 + C47950 * C139) * C48287 +
               (C21591 * C118 + C47950 * C125) * C665) +
              C26515 * C48104) *
                 C15915 +
             (C22298 - (C22260 + C22261) + C22299) * C48336) *
                C10335 +
            ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
              C26517 * C48104) *
                 C15915 +
             (C26996 - (C26997 + C26998) + C26999) * C48336) *
                C48338) *
               C947 +
           (((C22261 + C22260 - C22298 - C22299) * C15915 +
             (C22267 + C22266 - C22300 - C22301) * C48336) *
                C10335 +
            ((C26998 + C26997 - C26996 - C26999) * C15915 +
             (C27724 + C27725 - C27726 - C27727) * C48336) *
                C48338) *
               C948 +
           ((C22931 * C15915 + (C22932 - (C22921 + C22920) + C22933) * C48336) *
                C10335 +
            ((C27726 - (C27725 + C27724) + C27727) * C15915 +
             ((C21591 * C5880 + C47950 * C5882) * C666 -
              (C22929 * C48287 + C22928 * C665) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C15915 +
            (C22246 + C22247 - C22294 - C22295) * C48336) *
               C10335 +
           ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C15915 +
            (C22282 * C665 + C22283 * C48287 - C22640 * C666 -
             C22641 * C48104) *
                C48336) *
               C48338) *
              C48000 * C557 +
          (((C26514 * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             C26515 * C48104) *
                C15915 +
            (C22298 - (C22260 + C22261) + C22299) * C48336) *
               C10335 +
           ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
             C26517 * C48104) *
                C15915 +
            (C23520 * C666 - (C22287 * C48287 + C22286 * C665) +
             C23521 * C48104) *
                C48336) *
               C48338) *
              C48000 * C558 +
          ((((C21591 * C119 + C47950 * C126) * C665 +
             (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
             C26519 * C48104) *
                C15915 +
            (C22270 + C22271 - C22302 - C22303) * C48336) *
               C10335 +
           ((C26518 * C665 + C26519 * C48287 - C26520 * C666 -
             C26521 * C48104) *
                C15915 +
            (C22290 * C665 + C22291 * C48287 - C26522 * C666 -
             C26523 * C48104) *
                C48336) *
               C48338) *
              C48000 * C559 +
          (((C26796 * C666 -
             ((C21591 * C130 + C47950 * C141) * C48287 +
              (C21591 * C120 + C47950 * C131) * C665) +
             C26797 * C48104) *
                C15915 +
            (C26658 * C666 - (C21995 * C48287 + C21994 * C665) +
             C26659 * C48104) *
                C48336) *
               C10335 +
           (((C21591 * C424 + C47950 * C441) * C666 -
             (C26797 * C48287 + C26796 * C665) +
             (C21591 * C442 + C47950 * C454) * C48104) *
                C15915 +
            ((C21591 * C2027 + C47950 * C2028) * C666 -
             (C26659 * C48287 + C26658 * C665) +
             (C21591 * C2029 + C47950 * C2030) * C48104) *
                C48336) *
               C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C2133 +
             (C21591 * C127 + C47950 * C138) * C2129 - C26510 * C2134 -
             C26511 * C2130 + C26512 * C2135 + C26513 * C2131 - C28264 * C2136 -
             C28265 * C48334) *
                C15915 +
            (C23728 + C23729 - C23730 - C23731 + C23732 + C23733 - C23752 -
             C23753) *
                C48336) *
               C10335 +
           ((C26510 * C2133 + C26511 * C2129 - C26512 * C2134 - C26513 * C2130 +
             C28264 * C2135 + C28265 * C2131 - C28266 * C2136 -
             C28267 * C48334) *
                C15915 +
            (C22282 * C2133 + C22283 * C2129 - C22640 * C2134 - C22641 * C2130 +
             C23748 * C2135 + C23749 * C2131 - C28268 * C2136 -
             C28269 * C48334) *
                C48336) *
               C48338) *
              C48000 * C48272 +
          (((C26514 * C2134 -
             ((C21591 * C128 + C47950 * C139) * C2129 +
              (C21591 * C118 + C47950 * C125) * C2133) +
             C26515 * C2130 - C26516 * C2135 - C26517 * C2131 + C28610 * C2136 +
             C28611 * C48334) *
                C15915 +
            (C22286 * C2134 - (C21746 * C2129 + C21745 * C2133) +
             C22287 * C2130 - C23520 * C2135 - C23521 * C2131 + C28472 * C2136 +
             C28473 * C48334) *
                C48336) *
               C10335 +
           ((C26516 * C2134 - (C26515 * C2129 + C26514 * C2133) +
             C26517 * C2130 - C28610 * C2135 - C28611 * C2131 +
             (C21591 * C1861 + C47950 * C1870) * C2136 +
             (C21591 * C1873 + C47950 * C1879) * C48334) *
                C15915 +
            (C23520 * C2134 - (C22287 * C2129 + C22286 * C2133) +
             C23521 * C2130 - C28472 * C2135 - C28473 * C2131 +
             (C21591 * C6796 + C47950 * C6798) * C2136 +
             (C21591 * C6800 + C47950 * C6802) * C48334) *
                C48336) *
               C48338) *
              C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            (((C21591 * C419 + C47950 * C429) * C116 +
              (C21591 * C432 + C47950 * C449) * C48017) *
                 C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48357 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C48345 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 +
             (C22645 * C116 + C22646 * C48017) * C48336) *
                C48338) *
               C48318) *
              C258 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C48345 -
           (((C26329 + C26328) * C48336 +
             ((C21591 * C431 + C47950 * C448) * C48017 +
              (C21591 * C418 + C47950 * C428) * C116) *
                 C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C48357 -
           (((C22929 * C48017 + C22928 * C116) * C48336 +
             (C26331 + C26330) * C15915) *
                C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C48318) *
              C259 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            (((C21591 * C417 + C47950 * C427) * C116 +
              (C21591 * C430 + C47950 * C447) * C48017) *
                 C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48357 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C48345 +
           ((C21777 * C15915 + (C21774 + C21773) * C48336) * C10335 +
            ((C26335 + C26334) * C15915 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C15915 +
            (C21757 + C21758) * C48336) *
               C10335 +
           (((C21591 * C419 + C47950 * C429) * C116 +
             (C21591 * C432 + C47950 * C449) * C48017) *
                C15915 +
            (C22282 * C116 + C22283 * C48017) * C48336) *
               C48338) *
              C48000 * C108 -
          (((C22287 * C48017 + C22286 * C116) * C48336 +
            ((C21591 * C431 + C47950 * C448) * C48017 +
             (C21591 * C418 + C47950 * C428) * C116) *
                C15915) *
               C48338 +
           ((C21764 + C21763) * C48336 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C15915) *
               C10335) *
              C48000 * C109 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C15915 +
            (C21769 + C21770) * C48336) *
               C10335 +
           (((C21591 * C417 + C47950 * C427) * C116 +
             (C21591 * C430 + C47950 * C447) * C48017) *
                C15915 +
            (C22290 * C116 + C22291 * C48017) * C48336) *
               C48338) *
              C48000 * C110 -
          ((((C21591 * C829 + C47950 * C835) * C48017 +
             (C21591 * C820 + C47950 * C828) * C116) *
                C48336 +
            ((C21591 * C440 + C47950 * C453) * C48017 +
             (C21591 * C423 + C47950 * C439) * C116) *
                C15915) *
               C48338 +
           ((C21999 + C21998) * C48336 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C15915) *
               C10335) *
              C48000 * C111 +
          ((((C21591 * C121 + C47950 * C132) * C116 +
             (C21591 * C133 + C47950 * C142) * C48017) *
                C15915 +
            ((C21591 * C269 + C47950 * C288) * C116 +
             (C21591 * C287 + C47950 * C299) * C48017) *
                C48336) *
               C10335 +
           (((C21591 * C425 + C47950 * C443) * C116 +
             (C21591 * C444 + C47950 * C455) * C48017) *
                C15915 +
            ((C21591 * C821 + C47950 * C830) * C116 +
             (C21591 * C831 + C47950 * C836) * C48017) *
                C48336) *
               C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C947 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C948 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 +
             (C22645 * C116 + C22646 * C48017) * C48336) *
                C48338) *
               C48318) *
              C48354 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C948 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C947 -
           (((C22929 * C48017 + C22928 * C116) * C48336 +
             (C26331 + C26330) * C15915) *
                C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C48318) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            ((C26518 * C116 + C26519 * C48017) * C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C947 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C948 +
           ((C21777 * C15915 + (C21774 + C21773) * C48336) * C10335 +
            ((C26335 + C26334) * C15915 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C15915 +
            (C21757 + C21758) * C48336) *
               C10335 +
           ((C26510 * C116 + C26511 * C48017) * C15915 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C1015 -
          (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
           ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) * C10335) *
              C1016 +
          ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
           ((C26327 + C26326) * C15915 + (C27232 + C27233) * C48336) * C48338) *
              C1017 -
          (((C27234 + C27235) * C48336 + (C27233 + C27232) * C15915) * C48338 +
           ((C22496 + C22495) * C48336 + C22482 * C15915) * C10335) *
              C1018 +
          ((C22499 * C15915 + (C22498 + C22497) * C48336) * C10335 +
           ((C27235 + C27234) * C15915 +
            ((C21591 * C23031 + C47950 * C23032) * C116 +
             (C21591 * C23033 + C47950 * C23034) * C48017) *
                C48336) *
               C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C1672 +
             (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
             C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                C15915 +
            (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C48336) *
               C10335 +
           ((C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
             (C21591 * C1859 + C47950 * C1865) * C1674 +
             (C21591 * C1868 + C47950 * C1877) * C48321) *
                C15915 +
            (C22282 * C1672 + C22283 * C1669 - C22640 * C1673 - C22641 * C1670 +
             C23748 * C1674 + C23749 * C48321) *
                C48336) *
               C48338) *
              C48000 * C48354 +
          (((C26514 * C1673 -
             ((C21591 * C128 + C47950 * C139) * C1669 +
              (C21591 * C118 + C47950 * C125) * C1672) +
             C26515 * C1670 - C26516 * C1674 - C26517 * C48321) *
                C15915 +
            (C23504 - (C23505 + C23506) + C23507 - C23524 - C23525) * C48336) *
               C10335 +
           ((C26516 * C1673 - (C26515 * C1669 + C26514 * C1672) +
             C26517 * C1670 - (C21591 * C1858 + C47950 * C1864) * C1674 -
             (C21591 * C1867 + C47950 * C1876) * C48321) *
                C15915 +
            (C23520 * C1673 - (C22287 * C1669 + C22286 * C1672) +
             C23521 * C1670 - (C21591 * C2240 + C47950 * C2243) * C1674 -
             (C21591 * C2246 + C47950 * C2249) * C48321) *
                C48336) *
               C48338) *
              C48000 * C48341 +
          ((((C21591 * C119 + C47950 * C126) * C1672 +
             (C21591 * C129 + C47950 * C140) * C1669 - C26518 * C1673 -
             C26519 * C1670 + C26520 * C1674 + C26521 * C48321) *
                C15915 +
            (C21751 * C1672 + C21752 * C1669 - C22290 * C1673 - C22291 * C1670 +
             C26522 * C1674 + C26523 * C48321) *
                C48336) *
               C10335 +
           ((C26518 * C1672 + C26519 * C1669 - C26520 * C1673 - C26521 * C1670 +
             (C21591 * C1857 + C47950 * C1863) * C1674 +
             (C21591 * C1866 + C47950 * C1875) * C48321) *
                C15915 +
            (C22290 * C1672 + C22291 * C1669 - C26522 * C1673 - C26523 * C1670 +
             (C21591 * C2241 + C47950 * C2244) * C1674 +
             (C21591 * C2247 + C47950 * C2250) * C48321) *
                C48336) *
               C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C1672 +
             (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
             C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                C15915 +
            (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C48336) *
               C10335 +
           ((C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
             (C21591 * C1859 + C47950 * C1865) * C1674 +
             (C21591 * C1868 + C47950 * C1877) * C48321) *
                C15915 +
            (C28154 + C28155 - C28156 - C28157 + C28158 + C28159) * C48336) *
               C48338) *
              C48357 +
          (((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C15915 +
            (C23277 - (C23276 + C23275) + C23278 - C23279 - C23280) * C48336) *
               C10335 +
           ((C28156 - (C28155 + C28154) + C28157 - C28158 - C28159) * C15915 +
            (C28160 - (C28161 + C28162) + C28163 - C28164 - C28165) * C48336) *
               C48338) *
              C48345 +
          ((C23291 * C15915 +
            (C23283 + C23282 - C23281 - C23284 + C23285 + C23286) * C48336) *
               C10335 +
           ((C28162 + C28161 - C28160 - C28163 + C28164 + C28165) * C15915 +
            (C22645 * C1672 + C22646 * C1669 - C22647 * C1673 - C22648 * C1670 +
             (C21591 * C23723 + C47950 * C23724) * C1674 +
             (C21591 * C23725 + C47950 * C23726) * C48321) *
                C48336) *
               C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[140] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47950 * C124) * C3113 +
                       (C21591 * C127 + C47950 * C138) * C3111 -
                       C26510 * C3114 - C26511 * C48104) *
                          C15915 +
                      (C24756 + C24757 - C24758 - C24759) * C48336) *
                         C10335 +
                     ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                       C26513 * C48104) *
                          C15915 +
                      (C30068 + C30069 - C30070 - C30071) * C48336) *
                         C48338) *
                        C48286 +
                    (((C24758 - (C24757 + C24756) + C24759) * C15915 +
                      (C24762 - (C24761 + C24760) + C24763) * C48336) *
                         C10335 +
                     ((C30070 - (C30069 + C30068) + C30071) * C15915 +
                      (C30072 - (C30073 + C30074) + C30075) * C48336) *
                         C48338) *
                        C48062) *
                       C47978 +
                   ((((C26514 * C3114 -
                       ((C21591 * C128 + C47950 * C139) * C3111 +
                        (C21591 * C118 + C47950 * C125) * C3113) +
                       C26515 * C48104) *
                          C15915 +
                      (C24768 - (C24769 + C24770) + C24771) * C48336) *
                         C10335 +
                     ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
                       C26517 * C48104) *
                          C15915 +
                      (C30076 - (C30077 + C30078) + C30079) * C48336) *
                         C48338) *
                        C48286 +
                    (((C24770 + C24769 - C24768 - C24771) * C15915 +
                      (C24774 + C24773 - C24772 - C24775) * C48336) *
                         C10335 +
                     ((C30078 + C30077 - C30076 - C30079) * C15915 +
                      (C30080 + C30081 - C30082 - C30083) * C48336) *
                         C48338) *
                        C48062) *
                       C47986 +
                   (((((C21591 * C119 + C47950 * C126) * C3113 +
                       (C21591 * C129 + C47950 * C140) * C3111 -
                       C26518 * C3114 - C26519 * C48104) *
                          C15915 +
                      (C25030 + C25031 - C25032 - C25033) * C48336) *
                         C10335 +
                     ((C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
                       C26521 * C48104) *
                          C15915 +
                      (C30408 + C30409 - C30410 - C30411) * C48336) *
                         C48338) *
                        C48286 +
                    (((C25032 - (C25031 + C25030) + C25033) * C15915 +
                      (C25036 - (C25035 + C25034) + C25037) * C48336) *
                         C10335 +
                     ((C30410 - (C30409 + C30408) + C30411) * C15915 +
                      ((C21591 * C1163 + C47950 * C1178) * C3114 -
                       (C22293 * C3111 + C22292 * C3113) +
                       (C21591 * C1181 + C47950 * C1190) * C48104) *
                          C48336) *
                         C48338) *
                        C48062) *
                       C2720)) /
                 (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C47032 +
              (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
              C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
                 C15915 +
             (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C48336) *
                C10335 +
            ((C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
              C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
                 C15915 +
             (C30752 + C30753 - C30754 - C30755 + C30756 + C30757) * C48336) *
                C48338) *
               C48286 +
           (((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C15915 +
             (C25302 - (C25301 + C25300) + C25303 - C25304 - C25305) * C48336) *
                C10335 +
            ((C30754 - (C30753 + C30752) + C30755 - C30756 - C30757) * C15915 +
             (C22643 * C47024 - (C22285 * C48100 + C22284 * C47032) +
              C22644 * C48107 - C23750 * C47038 - C23751 * C3625) *
                 C48336) *
                C48338) *
               C48062) *
              C2457 +
          ((((C26514 * C47024 -
              ((C21591 * C128 + C47950 * C139) * C48100 +
               (C21591 * C118 + C47950 * C125) * C47032) +
              C26515 * C48107 - C26516 * C47038 - C26517 * C3625) *
                 C15915 +
             (C25306 - (C25307 + C25308) + C25309 - C25310 - C25311) * C48336) *
                C10335 +
            ((C26516 * C47024 - (C26515 * C48100 + C26514 * C47032) +
              C26517 * C48107 - C28610 * C47038 - C28611 * C3625) *
                 C15915 +
             (C30758 - (C30759 + C30760) + C30761 - C30762 - C30763) * C48336) *
                C48338) *
               C48286 +
           (((C25308 + C25307 - C25306 - C25309 + C25310 + C25311) * C15915 +
             (C25314 + C25313 - C25312 - C25315 + C25316 + C25317) * C48336) *
                C10335 +
            ((C30760 + C30759 - C30758 - C30761 + C30762 + C30763) * C15915 +
             (C22288 * C47032 + C22289 * C48100 - C23522 * C47024 -
              C23523 * C48107 + (C21591 * C7270 + C47950 * C7272) * C47038 +
              (C21591 * C7274 + C47950 * C7276) * C3625) *
                 C48336) *
                C48338) *
               C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C3113 +
              (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
              C26511 * C48104) *
                 C15915 +
             (C24756 + C24757 - C24758 - C24759) * C48336) *
                C10335 +
            ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
              C26513 * C48104) *
                 C15915 +
             (C30068 + C30069 - C30070 - C30071) * C48336) *
                C48338) *
               C48357 +
           (((C24758 - (C24757 + C24756) + C24759) * C15915 +
             (C24762 - (C24761 + C24760) + C24763) * C48336) *
                C10335 +
            ((C30070 - (C30069 + C30068) + C30071) * C15915 +
             (C30072 - (C30073 + C30074) + C30075) * C48336) *
                C48338) *
               C48345 +
           ((C24784 * C15915 + (C24766 + C24765 - C24764 - C24767) * C48336) *
                C10335 +
            ((C30074 + C30073 - C30072 - C30075) * C15915 +
             (C22645 * C3113 + C22646 * C3111 - C22647 * C3114 -
              C22648 * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C2457 +
          ((((C26514 * C3114 -
              ((C21591 * C128 + C47950 * C139) * C3111 +
               (C21591 * C118 + C47950 * C125) * C3113) +
              C26515 * C48104) *
                 C15915 +
             (C24768 - (C24769 + C24770) + C24771) * C48336) *
                C10335 +
            ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
              C26517 * C48104) *
                 C15915 +
             (C30076 - (C30077 + C30078) + C30079) * C48336) *
                C48338) *
               C48357 +
           (((C24770 + C24769 - C24768 - C24771) * C15915 +
             (C24774 + C24773 - C24772 - C24775) * C48336) *
                C10335 +
            ((C30078 + C30077 - C30076 - C30079) * C15915 +
             (C30080 + C30081 - C30082 - C30083) * C48336) *
                C48338) *
               C48345 +
           ((C24785 * C15915 + (C24778 - (C24777 + C24776) + C24779) * C48336) *
                C10335 +
            ((C30082 - (C30081 + C30080) + C30083) * C15915 +
             ((C21591 * C5880 + C47950 * C5882) * C3114 -
              (C22929 * C3111 + C22928 * C3113) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
             C26511 * C48104) *
                C15915 +
            (C24756 + C24757 - C24758 - C24759) * C48336) *
               C10335 +
           ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
             C26513 * C48104) *
                C15915 +
            (C22282 * C3113 + C22283 * C3111 - C22640 * C3114 -
             C22641 * C48104) *
                C48336) *
               C48338) *
              C48000 * C48363 +
          (((C26514 * C3114 -
             ((C21591 * C128 + C47950 * C139) * C3111 +
              (C21591 * C118 + C47950 * C125) * C3113) +
             C26515 * C48104) *
                C15915 +
            (C24768 - (C24769 + C24770) + C24771) * C48336) *
               C10335 +
           ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
             C26517 * C48104) *
                C15915 +
            (C23520 * C3114 - (C22287 * C3111 + C22286 * C3113) +
             C23521 * C48104) *
                C48336) *
               C48338) *
              C48000 * C48356 +
          ((((C21591 * C119 + C47950 * C126) * C3113 +
             (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
             C26519 * C48104) *
                C15915 +
            (C25030 + C25031 - C25032 - C25033) * C48336) *
               C10335 +
           ((C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
             C26521 * C48104) *
                C15915 +
            (C22290 * C3113 + C22291 * C3111 - C26522 * C3114 -
             C26523 * C48104) *
                C48336) *
               C48338) *
              C48000 * C48343 +
          (((C26796 * C3114 -
             ((C21591 * C130 + C47950 * C141) * C3111 +
              (C21591 * C120 + C47950 * C131) * C3113) +
             C26797 * C48104) *
                C15915 +
            (C26658 * C3114 - (C21995 * C3111 + C21994 * C3113) +
             C26659 * C48104) *
                C48336) *
               C10335 +
           (((C21591 * C424 + C47950 * C441) * C3114 -
             (C26797 * C3111 + C26796 * C3113) +
             (C21591 * C442 + C47950 * C454) * C48104) *
                C15915 +
            ((C21591 * C2027 + C47950 * C2028) * C3114 -
             (C26659 * C3111 + C26658 * C3113) +
             (C21591 * C2029 + C47950 * C2030) * C48104) *
                C48336) *
               C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3363 +
             (C21591 * C127 + C47950 * C138) * C48365 - C26510 * C3364 -
             C26511 * C48362 + C26512 * C3365 + C26513 * C48353 -
             C28264 * C3366 - C28265 * C48334) *
                C15915 +
            (C25667 + C25668 - C25669 - C25670 + C25671 + C25672 - C25673 -
             C25674) *
                C48336) *
               C10335 +
           ((C26510 * C3363 + C26511 * C48365 - C26512 * C3364 -
             C26513 * C48362 + C28264 * C3365 + C28265 * C48353 -
             C28266 * C3366 - C28267 * C48334) *
                C15915 +
            (C22282 * C3363 + C22283 * C48365 - C22640 * C3364 -
             C22641 * C48362 + C23748 * C3365 + C23749 * C48353 -
             C28268 * C3366 - C28269 * C48334) *
                C48336) *
               C48338) *
              C48000 * C2457 +
          (((C26514 * C3364 -
             ((C21591 * C128 + C47950 * C139) * C48365 +
              (C21591 * C118 + C47950 * C125) * C3363) +
             C26515 * C48362 - C26516 * C3365 - C26517 * C48353 +
             C28610 * C3366 + C28611 * C48334) *
                C15915 +
            (C22286 * C3364 - (C21746 * C48365 + C21745 * C3363) +
             C22287 * C48362 - C23520 * C3365 - C23521 * C48353 +
             C28472 * C3366 + C28473 * C48334) *
                C48336) *
               C10335 +
           ((C26516 * C3364 - (C26515 * C48365 + C26514 * C3363) +
             C26517 * C48362 - C28610 * C3365 - C28611 * C48353 +
             (C21591 * C1861 + C47950 * C1870) * C3366 +
             (C21591 * C1873 + C47950 * C1879) * C48334) *
                C15915 +
            (C23520 * C3364 - (C22287 * C48365 + C22286 * C3363) +
             C23521 * C48362 - C28472 * C3365 - C28473 * C48353 +
             (C21591 * C6796 + C47950 * C6798) * C3366 +
             (C21591 * C6800 + C47950 * C6802) * C48334) *
                C48336) *
               C48338) *
              C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C47032 +
             (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
             C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
                C15915 +
            (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C48336) *
               C10335 +
           ((C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
             C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
                C15915 +
            (C22282 * C47032 + C22283 * C48100 - C22640 * C47024 -
             C22641 * C48107 + C23748 * C47038 + C23749 * C3625) *
                C48336) *
               C48338) *
              C48000 * C47978 +
          (((C26514 * C47024 -
             ((C21591 * C128 + C47950 * C139) * C48100 +
              (C21591 * C118 + C47950 * C125) * C47032) +
             C26515 * C48107 - C26516 * C47038 - C26517 * C3625) *
                C15915 +
            (C25306 - (C25307 + C25308) + C25309 - C25310 - C25311) * C48336) *
               C10335 +
           ((C26516 * C47024 - (C26515 * C48100 + C26514 * C47032) +
             C26517 * C48107 - C28610 * C47038 - C28611 * C3625) *
                C15915 +
            (C23520 * C47024 - (C22287 * C48100 + C22286 * C47032) +
             C23521 * C48107 - C28472 * C47038 - C28473 * C3625) *
                C48336) *
               C48338) *
              C48000 * C47986 +
          ((((C21591 * C119 + C47950 * C126) * C47032 +
             (C21591 * C129 + C47950 * C140) * C48100 - C26518 * C47024 -
             C26519 * C48107 + C26520 * C47038 + C26521 * C3625) *
                C15915 +
            (C21751 * C47032 + C21752 * C48100 - C22290 * C47024 -
             C22291 * C48107 + C26522 * C47038 + C26523 * C3625) *
                C48336) *
               C10335 +
           ((C26518 * C47032 + C26519 * C48100 - C26520 * C47024 -
             C26521 * C48107 + (C21591 * C1857 + C47950 * C1863) * C47038 +
             (C21591 * C1866 + C47950 * C1875) * C3625) *
                C15915 +
            (C22290 * C47032 + C22291 * C48100 - C26522 * C47024 -
             C26523 * C48107 + (C21591 * C2241 + C47950 * C2244) * C47038 +
             (C21591 * C2247 + C47950 * C2250) * C3625) *
                C48336) *
               C48338) *
              C48000 * C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
             C26511 * C48104) *
                C15915 +
            (C24756 + C24757 - C24758 - C24759) * C48336) *
               C10335 +
           ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
             C26513 * C48104) *
                C15915 +
            (C22282 * C3113 + C22283 * C3111 - C22640 * C3114 -
             C22641 * C48104) *
                C48336) *
               C48338) *
              C48000 * C48363 +
          (((C26514 * C3114 -
             ((C21591 * C128 + C47950 * C139) * C3111 +
              (C21591 * C118 + C47950 * C125) * C3113) +
             C26515 * C48104) *
                C15915 +
            (C24768 - (C24769 + C24770) + C24771) * C48336) *
               C10335 +
           ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
             C26517 * C48104) *
                C15915 +
            (C23520 * C3114 - (C22287 * C3111 + C22286 * C3113) +
             C23521 * C48104) *
                C48336) *
               C48338) *
              C48000 * C48356 +
          ((((C21591 * C119 + C47950 * C126) * C3113 +
             (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
             C26519 * C48104) *
                C15915 +
            (C25030 + C25031 - C25032 - C25033) * C48336) *
               C10335 +
           ((C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
             C26521 * C48104) *
                C15915 +
            (C22290 * C3113 + C22291 * C3111 - C26522 * C3114 -
             C26523 * C48104) *
                C48336) *
               C48338) *
              C48000 * C48343 +
          (((C26796 * C3114 -
             ((C21591 * C130 + C47950 * C141) * C3111 +
              (C21591 * C120 + C47950 * C131) * C3113) +
             C26797 * C48104) *
                C15915 +
            (C26658 * C3114 - (C21995 * C3111 + C21994 * C3113) +
             C26659 * C48104) *
                C48336) *
               C10335 +
           (((C21591 * C424 + C47950 * C441) * C3114 -
             (C26797 * C3111 + C26796 * C3113) +
             (C21591 * C442 + C47950 * C454) * C48104) *
                C15915 +
            ((C21591 * C2027 + C47950 * C2028) * C3114 -
             (C26659 * C3111 + C26658 * C3113) +
             (C21591 * C2029 + C47950 * C2030) * C48104) *
                C48336) *
               C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C3113 +
              (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
              C26511 * C48104) *
                 C15915 +
             (C24756 + C24757 - C24758 - C24759) * C48336) *
                C10335 +
            ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
              C26513 * C48104) *
                 C15915 +
             (C30068 + C30069 - C30070 - C30071) * C48336) *
                C48338) *
               C48357 +
           (((C24758 - (C24757 + C24756) + C24759) * C15915 +
             (C24762 - (C24761 + C24760) + C24763) * C48336) *
                C10335 +
            ((C30070 - (C30069 + C30068) + C30071) * C15915 +
             (C30072 - (C30073 + C30074) + C30075) * C48336) *
                C48338) *
               C48345 +
           ((C24784 * C15915 + (C24766 + C24765 - C24764 - C24767) * C48336) *
                C10335 +
            ((C30074 + C30073 - C30072 - C30075) * C15915 +
             (C22645 * C3113 + C22646 * C3111 - C22647 * C3114 -
              C22648 * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C2457 +
          ((((C26514 * C3114 -
              ((C21591 * C128 + C47950 * C139) * C3111 +
               (C21591 * C118 + C47950 * C125) * C3113) +
              C26515 * C48104) *
                 C15915 +
             (C24768 - (C24769 + C24770) + C24771) * C48336) *
                C10335 +
            ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
              C26517 * C48104) *
                 C15915 +
             (C30076 - (C30077 + C30078) + C30079) * C48336) *
                C48338) *
               C48357 +
           (((C24770 + C24769 - C24768 - C24771) * C15915 +
             (C24774 + C24773 - C24772 - C24775) * C48336) *
                C10335 +
            ((C30078 + C30077 - C30076 - C30079) * C15915 +
             (C30080 + C30081 - C30082 - C30083) * C48336) *
                C48338) *
               C48345 +
           ((C24785 * C15915 + (C24778 - (C24777 + C24776) + C24779) * C48336) *
                C10335 +
            ((C30082 - (C30081 + C30080) + C30083) * C15915 +
             ((C21591 * C5880 + C47950 * C5882) * C3114 -
              (C22929 * C3111 + C22928 * C3113) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48286 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C48062) *
              C557 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C48062 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C48286) *
              C558 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            ((C26518 * C116 + C26519 * C48017) * C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48286 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C48062) *
              C559 +
          ((((C21998 + C21999) * C15915 + (C22000 + C22001) * C48336) * C10335 +
            ((C26660 + C26661) * C15915 +
             ((C21591 * C1445 + C47950 * C1446) * C116 +
              (C21591 * C1447 + C47950 * C1448) * C48017) *
                 C48336) *
                C48338) *
               C48062 -
           (((C26661 + C26660) * C48336 +
             ((C21591 * C440 + C47950 * C453) * C48017 +
              (C21591 * C423 + C47950 * C439) * C116) *
                 C15915) *
                C48338 +
            ((C21999 + C21998) * C48336 +
             ((C21591 * C130 + C47950 * C141) * C48017 +
              (C21591 * C120 + C47950 * C131) * C116) *
                 C15915) *
                C10335) *
               C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C1289 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C1290 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 + (C27232 + C27233) * C48336) *
                C48338) *
               C1291 -
           (((C27234 + C27235) * C48336 + (C27233 + C27232) * C15915) * C48338 +
            ((C22496 + C22495) * C48336 + C22482 * C15915) * C10335) *
               C48328) *
              C48272 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C1290 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C1289 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C15915) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C1291 +
           ((C22759 * C15915 + (C22767 + C22766) * C48336) * C10335 +
            ((C27525 + C27524) * C15915 +
             ((C21591 * C6402 + C47950 * C6404) * C116 +
              (C21591 * C6406 + C47950 * C6408) * C48017) *
                 C48336) *
                C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C665 +
              (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
              C26511 * C48104) *
                 C15915 +
             (C22246 + C22247 - C22294 - C22295) * C48336) *
                C10335 +
            ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
              C26513 * C48104) *
                 C15915 +
             (C26992 + C26993 - C26994 - C26995) * C48336) *
                C48338) *
               C48286 +
           (((C22294 - (C22247 + C22246) + C22295) * C15915 +
             (C22296 - (C22253 + C22252) + C22297) * C48336) *
                C10335 +
            ((C26994 - (C26993 + C26992) + C26995) * C15915 +
             (C22643 * C666 - (C22285 * C48287 + C22284 * C665) +
              C22644 * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C258 +
          ((((C26514 * C666 -
              ((C21591 * C128 + C47950 * C139) * C48287 +
               (C21591 * C118 + C47950 * C125) * C665) +
              C26515 * C48104) *
                 C15915 +
             (C22298 - (C22260 + C22261) + C22299) * C48336) *
                C10335 +
            ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
              C26517 * C48104) *
                 C15915 +
             (C26996 - (C26997 + C26998) + C26999) * C48336) *
                C48338) *
               C48286 +
           (((C22261 + C22260 - C22298 - C22299) * C15915 +
             (C22267 + C22266 - C22300 - C22301) * C48336) *
                C10335 +
            ((C26998 + C26997 - C26996 - C26999) * C15915 +
             (C22288 * C665 + C22289 * C48287 - C23522 * C666 -
              C23523 * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C259 +
          (((((C21591 * C119 + C47950 * C126) * C665 +
              (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
              C26519 * C48104) *
                 C15915 +
             (C22270 + C22271 - C22302 - C22303) * C48336) *
                C10335 +
            ((C26518 * C665 + C26519 * C48287 - C26520 * C666 -
              C26521 * C48104) *
                 C15915 +
             (C27000 + C27001 - C27002 - C27003) * C48336) *
                C48338) *
               C48286 +
           (((C22302 - (C22271 + C22270) + C22303) * C15915 +
             (C22304 - (C22277 + C22276) + C22305) * C48336) *
                C10335 +
            ((C27002 - (C27001 + C27000) + C27003) * C15915 +
             ((C21591 * C1163 + C47950 * C1178) * C666 -
              (C22293 * C48287 + C22292 * C665) +
              (C21591 * C1181 + C47950 * C1190) * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C15915 +
            (C22246 + C22247 - C22294 - C22295) * C48336) *
               C10335 +
           ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C15915 +
            (C26992 + C26993 - C26994 - C26995) * C48336) *
               C48338) *
              C1289 +
          (((C22294 - (C22247 + C22246) + C22295) * C15915 +
            (C22296 - (C22253 + C22252) + C22297) * C48336) *
               C10335 +
           ((C26994 - (C26993 + C26992) + C26995) * C15915 +
            (C27720 - (C27721 + C27722) + C27723) * C48336) *
               C48338) *
              C1290 +
          ((C22930 * C15915 + (C22917 + C22916 - C22915 - C22918) * C48336) *
               C10335 +
           ((C27722 + C27721 - C27720 - C27723) * C15915 +
            (C27858 + C27859 - C27860 - C27861) * C48336) *
               C48338) *
              C1291 +
          ((C23046 * C15915 + (C23047 - (C23038 + C23037) + C23048) * C48336) *
               C10335 +
           ((C27860 - (C27859 + C27858) + C27861) * C15915 +
            ((C21591 * C22609 + C47950 * C22610) * C666 -
             (C23045 * C48287 + C23044 * C665) +
             (C21591 * C22611 + C47950 * C22612) * C48104) *
                C48336) *
               C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            (((C21591 * C419 + C47950 * C429) * C116 +
              (C21591 * C432 + C47950 * C449) * C48017) *
                 C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48357 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C48345 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 +
             (C22645 * C116 + C22646 * C48017) * C48336) *
                C48338) *
               C48318) *
              C258 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C48345 -
           (((C26329 + C26328) * C48336 +
             ((C21591 * C431 + C47950 * C448) * C48017 +
              (C21591 * C418 + C47950 * C428) * C116) *
                 C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C48357 -
           (((C22929 * C48017 + C22928 * C116) * C48336 +
             (C26331 + C26330) * C15915) *
                C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C48318) *
              C259 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            (((C21591 * C417 + C47950 * C427) * C116 +
              (C21591 * C430 + C47950 * C447) * C48017) *
                 C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48357 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C48345 +
           ((C21777 * C15915 + (C21774 + C21773) * C48336) * C10335 +
            ((C26335 + C26334) * C15915 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C15915 +
            (C21757 + C21758) * C48336) *
               C10335 +
           (((C21591 * C419 + C47950 * C429) * C116 +
             (C21591 * C432 + C47950 * C449) * C48017) *
                C15915 +
            (C22282 * C116 + C22283 * C48017) * C48336) *
               C48338) *
              C48000 * C108 -
          (((C22287 * C48017 + C22286 * C116) * C48336 +
            ((C21591 * C431 + C47950 * C448) * C48017 +
             (C21591 * C418 + C47950 * C428) * C116) *
                C15915) *
               C48338 +
           ((C21764 + C21763) * C48336 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C15915) *
               C10335) *
              C48000 * C109 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C15915 +
            (C21769 + C21770) * C48336) *
               C10335 +
           (((C21591 * C417 + C47950 * C427) * C116 +
             (C21591 * C430 + C47950 * C447) * C48017) *
                C15915 +
            (C22290 * C116 + C22291 * C48017) * C48336) *
               C48338) *
              C48000 * C110 -
          ((((C21591 * C829 + C47950 * C835) * C48017 +
             (C21591 * C820 + C47950 * C828) * C116) *
                C48336 +
            ((C21591 * C440 + C47950 * C453) * C48017 +
             (C21591 * C423 + C47950 * C439) * C116) *
                C15915) *
               C48338 +
           ((C21999 + C21998) * C48336 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C15915) *
               C10335) *
              C48000 * C111 +
          ((((C21591 * C121 + C47950 * C132) * C116 +
             (C21591 * C133 + C47950 * C142) * C48017) *
                C15915 +
            ((C21591 * C269 + C47950 * C288) * C116 +
             (C21591 * C287 + C47950 * C299) * C48017) *
                C48336) *
               C10335 +
           (((C21591 * C425 + C47950 * C443) * C116 +
             (C21591 * C444 + C47950 * C455) * C48017) *
                C15915 +
            ((C21591 * C821 + C47950 * C830) * C116 +
             (C21591 * C831 + C47950 * C836) * C48017) *
                C48336) *
               C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C414 +
             (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
             C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                C15915 +
            (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C48336) *
               C10335 +
           ((C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
             (C21591 * C1859 + C47950 * C1865) * C416 +
             (C21591 * C1868 + C47950 * C1877) * C48321) *
                C15915 +
            (C22282 * C414 + C22283 * C48358 - C22640 * C415 - C22641 * C48347 +
             C23748 * C416 + C23749 * C48321) *
                C48336) *
               C48338) *
              C48000 * C258 +
          (((C26514 * C415 -
             ((C21591 * C128 + C47950 * C139) * C48358 +
              (C21591 * C118 + C47950 * C125) * C414) +
             C26515 * C48347 - C26516 * C416 - C26517 * C48321) *
                C15915 +
            (C24098 - (C24099 + C24100) + C24101 - C24102 - C24103) * C48336) *
               C10335 +
           ((C26516 * C415 - (C26515 * C48358 + C26514 * C414) +
             C26517 * C48347 - (C21591 * C1858 + C47950 * C1864) * C416 -
             (C21591 * C1867 + C47950 * C1876) * C48321) *
                C15915 +
            (C23520 * C415 - (C22287 * C48358 + C22286 * C414) +
             C23521 * C48347 - (C21591 * C2240 + C47950 * C2243) * C416 -
             (C21591 * C2246 + C47950 * C2249) * C48321) *
                C48336) *
               C48338) *
              C48000 * C259 +
          ((((C21591 * C119 + C47950 * C126) * C414 +
             (C21591 * C129 + C47950 * C140) * C48358 - C26518 * C415 -
             C26519 * C48347 + C26520 * C416 + C26521 * C48321) *
                C15915 +
            (C21751 * C414 + C21752 * C48358 - C22290 * C415 - C22291 * C48347 +
             C26522 * C416 + C26523 * C48321) *
                C48336) *
               C10335 +
           ((C26518 * C414 + C26519 * C48358 - C26520 * C415 - C26521 * C48347 +
             (C21591 * C1857 + C47950 * C1863) * C416 +
             (C21591 * C1866 + C47950 * C1875) * C48321) *
                C15915 +
            (C22290 * C414 + C22291 * C48358 - C26522 * C415 - C26523 * C48347 +
             (C21591 * C2241 + C47950 * C2244) * C416 +
             (C21591 * C2247 + C47950 * C2250) * C48321) *
                C48336) *
               C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C947 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C948 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 +
             (C22645 * C116 + C22646 * C48017) * C48336) *
                C48338) *
               C48318) *
              C48354 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C948 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C947 -
           (((C22929 * C48017 + C22928 * C116) * C48336 +
             (C26331 + C26330) * C15915) *
                C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C48318) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            ((C26518 * C116 + C26519 * C48017) * C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C947 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C948 +
           ((C21777 * C15915 + (C21774 + C21773) * C48336) * C10335 +
            ((C26335 + C26334) * C15915 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C15915 +
            (C21757 + C21758) * C48336) *
               C10335 +
           ((C26510 * C116 + C26511 * C48017) * C15915 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C1015 -
          (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
           ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) * C10335) *
              C1016 +
          ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
           ((C26327 + C26326) * C15915 + (C27232 + C27233) * C48336) * C48338) *
              C1017 -
          (((C27234 + C27235) * C48336 + (C27233 + C27232) * C15915) * C48338 +
           ((C22496 + C22495) * C48336 + C22482 * C15915) * C10335) *
              C1018 +
          ((C22499 * C15915 + (C22498 + C22497) * C48336) * C10335 +
           ((C27235 + C27234) * C15915 +
            ((C21591 * C23031 + C47950 * C23032) * C116 +
             (C21591 * C23033 + C47950 * C23034) * C48017) *
                C48336) *
               C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C414 +
             (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
             C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                C15915 +
            (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C48336) *
               C10335 +
           ((C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
             (C21591 * C1859 + C47950 * C1865) * C416 +
             (C21591 * C1868 + C47950 * C1877) * C48321) *
                C15915 +
            (C27382 + C27383 - C27384 - C27385 + C27386 + C27387) * C48336) *
               C48338) *
              C947 +
          (((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C15915 +
            (C22624 - (C22623 + C22622) + C22625 - C22652 - C22653) * C48336) *
               C10335 +
           ((C27384 - (C27383 + C27382) + C27385 - C27386 - C27387) * C15915 +
            (C27388 - (C27389 + C27390) + C27391 - C27392 - C27393) * C48336) *
               C48338) *
              C948 +
          ((C22660 * C15915 +
            (C22633 + C22632 - C22654 - C22655 + C22656 + C22657) * C48336) *
               C10335 +
           ((C27390 + C27389 - C27388 - C27391 + C27392 + C27393) * C15915 +
            (C22645 * C414 + C22646 * C48358 - C22647 * C415 - C22648 * C48347 +
             (C21591 * C23723 + C47950 * C23724) * C416 +
             (C21591 * C23725 + C47950 * C23726) * C48321) *
                C48336) *
               C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C15915 +
            (C22246 + C22247 - C22294 - C22295) * C48336) *
               C10335 +
           ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C15915 +
            (C22282 * C665 + C22283 * C48287 - C22640 * C666 -
             C22641 * C48104) *
                C48336) *
               C48338) *
              C48000 * C557 +
          (((C26514 * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             C26515 * C48104) *
                C15915 +
            (C22298 - (C22260 + C22261) + C22299) * C48336) *
               C10335 +
           ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
             C26517 * C48104) *
                C15915 +
            (C23520 * C666 - (C22287 * C48287 + C22286 * C665) +
             C23521 * C48104) *
                C48336) *
               C48338) *
              C48000 * C558 +
          ((((C21591 * C119 + C47950 * C126) * C665 +
             (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
             C26519 * C48104) *
                C15915 +
            (C22270 + C22271 - C22302 - C22303) * C48336) *
               C10335 +
           ((C26518 * C665 + C26519 * C48287 - C26520 * C666 -
             C26521 * C48104) *
                C15915 +
            (C22290 * C665 + C22291 * C48287 - C26522 * C666 -
             C26523 * C48104) *
                C48336) *
               C48338) *
              C48000 * C559 +
          (((C26796 * C666 -
             ((C21591 * C130 + C47950 * C141) * C48287 +
              (C21591 * C120 + C47950 * C131) * C665) +
             C26797 * C48104) *
                C15915 +
            (C26658 * C666 - (C21995 * C48287 + C21994 * C665) +
             C26659 * C48104) *
                C48336) *
               C10335 +
           (((C21591 * C424 + C47950 * C441) * C666 -
             (C26797 * C48287 + C26796 * C665) +
             (C21591 * C442 + C47950 * C454) * C48104) *
                C15915 +
            ((C21591 * C2027 + C47950 * C2028) * C666 -
             (C26659 * C48287 + C26658 * C665) +
             (C21591 * C2029 + C47950 * C2030) * C48104) *
                C48336) *
               C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C665 +
              (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
              C26511 * C48104) *
                 C15915 +
             (C22246 + C22247 - C22294 - C22295) * C48336) *
                C10335 +
            ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
              C26513 * C48104) *
                 C15915 +
             (C26992 + C26993 - C26994 - C26995) * C48336) *
                C48338) *
               C947 +
           (((C22294 - (C22247 + C22246) + C22295) * C15915 +
             (C22296 - (C22253 + C22252) + C22297) * C48336) *
                C10335 +
            ((C26994 - (C26993 + C26992) + C26995) * C15915 +
             (C27720 - (C27721 + C27722) + C27723) * C48336) *
                C48338) *
               C948 +
           ((C22930 * C15915 + (C22917 + C22916 - C22915 - C22918) * C48336) *
                C10335 +
            ((C27722 + C27721 - C27720 - C27723) * C15915 +
             (C22645 * C665 + C22646 * C48287 - C22647 * C666 -
              C22648 * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C48272 +
          ((((C26514 * C666 -
              ((C21591 * C128 + C47950 * C139) * C48287 +
               (C21591 * C118 + C47950 * C125) * C665) +
              C26515 * C48104) *
                 C15915 +
             (C22298 - (C22260 + C22261) + C22299) * C48336) *
                C10335 +
            ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
              C26517 * C48104) *
                 C15915 +
             (C26996 - (C26997 + C26998) + C26999) * C48336) *
                C48338) *
               C947 +
           (((C22261 + C22260 - C22298 - C22299) * C15915 +
             (C22267 + C22266 - C22300 - C22301) * C48336) *
                C10335 +
            ((C26998 + C26997 - C26996 - C26999) * C15915 +
             (C27724 + C27725 - C27726 - C27727) * C48336) *
                C48338) *
               C948 +
           ((C22931 * C15915 + (C22932 - (C22921 + C22920) + C22933) * C48336) *
                C10335 +
            ((C27726 - (C27725 + C27724) + C27727) * C15915 +
             ((C21591 * C5880 + C47950 * C5882) * C666 -
              (C22929 * C48287 + C22928 * C665) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C15915 +
            (C21757 + C21758) * C48336) *
               C10335 +
           (((C21591 * C419 + C47950 * C429) * C116 +
             (C21591 * C432 + C47950 * C449) * C48017) *
                C15915 +
            (C22282 * C116 + C22283 * C48017) * C48336) *
               C48338) *
              C48000 * C108 -
          (((C22287 * C48017 + C22286 * C116) * C48336 +
            ((C21591 * C431 + C47950 * C448) * C48017 +
             (C21591 * C418 + C47950 * C428) * C116) *
                C15915) *
               C48338 +
           ((C21764 + C21763) * C48336 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C15915) *
               C10335) *
              C48000 * C109 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C15915 +
            (C21769 + C21770) * C48336) *
               C10335 +
           (((C21591 * C417 + C47950 * C427) * C116 +
             (C21591 * C430 + C47950 * C447) * C48017) *
                C15915 +
            (C22290 * C116 + C22291 * C48017) * C48336) *
               C48338) *
              C48000 * C110 -
          ((((C21591 * C829 + C47950 * C835) * C48017 +
             (C21591 * C820 + C47950 * C828) * C116) *
                C48336 +
            ((C21591 * C440 + C47950 * C453) * C48017 +
             (C21591 * C423 + C47950 * C439) * C116) *
                C15915) *
               C48338 +
           ((C21999 + C21998) * C48336 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C15915) *
               C10335) *
              C48000 * C111 +
          ((((C21591 * C121 + C47950 * C132) * C116 +
             (C21591 * C133 + C47950 * C142) * C48017) *
                C15915 +
            ((C21591 * C269 + C47950 * C288) * C116 +
             (C21591 * C287 + C47950 * C299) * C48017) *
                C48336) *
               C10335 +
           (((C21591 * C425 + C47950 * C443) * C116 +
             (C21591 * C444 + C47950 * C455) * C48017) *
                C15915 +
            ((C21591 * C821 + C47950 * C830) * C116 +
             (C21591 * C831 + C47950 * C836) * C48017) *
                C48336) *
               C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            (((C21591 * C419 + C47950 * C429) * C116 +
              (C21591 * C432 + C47950 * C449) * C48017) *
                 C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48357 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C48345 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 +
             (C22645 * C116 + C22646 * C48017) * C48336) *
                C48338) *
               C48318) *
              C258 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C48345 -
           (((C26329 + C26328) * C48336 +
             ((C21591 * C431 + C47950 * C448) * C48017 +
              (C21591 * C418 + C47950 * C428) * C116) *
                 C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C48357 -
           (((C22929 * C48017 + C22928 * C116) * C48336 +
             (C26331 + C26330) * C15915) *
                C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C48318) *
              C259 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            (((C21591 * C417 + C47950 * C427) * C116 +
              (C21591 * C430 + C47950 * C447) * C48017) *
                 C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48357 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C48345 +
           ((C21777 * C15915 + (C21774 + C21773) * C48336) * C10335 +
            ((C26335 + C26334) * C15915 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C15915 +
             (C21757 + C21758) * C48336) *
                C10335 +
            ((C26510 * C116 + C26511 * C48017) * C15915 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C947 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) *
                C10335) *
               C948 +
           ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
            ((C26327 + C26326) * C15915 +
             (C22645 * C116 + C22646 * C48017) * C48336) *
                C48338) *
               C48318) *
              C48354 +
          ((((C21763 + C21764) * C15915 + (C21765 + C21766) * C48336) * C10335 +
            ((C26328 + C26329) * C15915 + (C26330 + C26331) * C48336) *
                C48338) *
               C948 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C15915) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C15915) *
                C10335) *
               C947 -
           (((C22929 * C48017 + C22928 * C116) * C48336 +
             (C26331 + C26330) * C15915) *
                C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C15915) * C10335) *
               C48318) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C15915 +
             (C21769 + C21770) * C48336) *
                C10335 +
            ((C26518 * C116 + C26519 * C48017) * C15915 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C947 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C15915) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C15915) *
                C10335) *
               C948 +
           ((C21777 * C15915 + (C21774 + C21773) * C48336) * C10335 +
            ((C26335 + C26334) * C15915 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C15915 +
            (C21757 + C21758) * C48336) *
               C10335 +
           ((C26510 * C116 + C26511 * C48017) * C15915 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C1015 -
          (((C26326 + C26327) * C48336 + (C26325 + C26324) * C15915) * C48338 +
           ((C21760 + C21759) * C48336 + (C21758 + C21757) * C15915) * C10335) *
              C1016 +
          ((C21775 * C15915 + (C21762 + C21761) * C48336) * C10335 +
           ((C26327 + C26326) * C15915 + (C27232 + C27233) * C48336) * C48338) *
              C1017 -
          (((C27234 + C27235) * C48336 + (C27233 + C27232) * C15915) * C48338 +
           ((C22496 + C22495) * C48336 + C22482 * C15915) * C10335) *
              C1018 +
          ((C22499 * C15915 + (C22498 + C22497) * C48336) * C10335 +
           ((C27235 + C27234) * C15915 +
            ((C21591 * C23031 + C47950 * C23032) * C116 +
             (C21591 * C23033 + C47950 * C23034) * C48017) *
                C48336) *
               C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C48058 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C48065 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C2717) *
              C47978 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C48065 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C48058 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C2717) *
              C47986 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C32211 + C32210) * C116 + (C32213 + C32212) * C48017) * C48206 *
                C48338) *
               C48058 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C48065 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C116 +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C2717) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C32194 + C32195) * C666 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C665 + (C32197 + C32196) * C48287 -
             (C32199 + C32198) * C666 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C48058 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C666 -
             ((C16776 + C16777) * C48287 + (C16774 + C16775) * C665) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C48065 +
           (((C16121 + C16120) * C665 + (C16119 + C16118) * C48287 -
             (C17213 + C17212) * C666 - (C17215 + C17214) * C48104) *
                C48206 * C31851 +
            ((C17212 + C17213) * C665 + (C17214 + C17215) * C48287 -
             (C17216 + C17217) * C666 - (C17218 + C17219) * C48104) *
                C48206 * C48338) *
               C2717) *
              C2457 +
          ((((C32202 + C32203) * C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C666 -
             ((C32205 + C32204) * C48287 + (C32203 + C32202) * C665) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C48058 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C665 + (C16780 + C16781) * C48287 -
             (C18286 + C18287) * C666 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C48065 +
           (((C17565 + C17564) * C666 -
             ((C16129 + C16128) * C48287 + (C16127 + C16126) * C665) +
             (C17567 + C17566) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1162 + C15913 * C1177 + C15918 * C1163 +
              C48305 * C1178) *
                 C666 -
             ((C17566 + C17567) * C48287 + (C17564 + C17565) * C665) +
             (C15917 * C1180 + C15913 * C1189 + C15918 * C1181 +
              C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C48364 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C48360 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C48350 -
           (((C17708 + C17709) * C48017 + (C17706 + C17707) * C116) * C48206 *
                C48338 +
            ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C48206 *
                C31851) *
               C48328) *
              C2457 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C48360 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C48364 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C48350 +
           (((C17361 + C17360) * C116 + (C17359 + C17358) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1548 + C15913 * C1551 + C15918 * C1549 +
              C48305 * C1552) *
                 C116 +
             (C15917 * C1554 + C15913 * C1557 + C15918 * C1555 +
              C48305 * C1558) *
                 C48017) *
                C48206 * C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C2349 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C48062) *
              C48363 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C48062 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C2349) *
              C48356 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C32211 + C32210) * C116 + (C32213 + C32212) * C48017) * C48206 *
                C48338) *
               C2349 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C48062) *
              C48343 +
          ((((C16422 + C16423) * C116 + (C16424 + C16425) * C48017) * C48206 *
                C31851 +
            ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48305 * C830) *
                 C116 +
             (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48305 * C836) *
                 C48017) *
                C48206 * C48338) *
               C48062 -
           (((C32489 + C32488) * C48017 + (C32487 + C32486) * C116) * C48206 *
                C48338 +
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48017 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C48206 * C31851) *
               C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C414 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48358 -
             (C32194 + C32195) * C415 - (C32196 + C32197) * C48347 +
             (C32198 + C32199) * C416 + (C32200 + C32201) * C48321) *
                C48206 * C31851 +
            ((C32195 + C32194) * C414 + (C32197 + C32196) * C48358 -
             (C32199 + C32198) * C415 - (C32201 + C32200) * C48347 +
             (C33903 + C33902) * C416 + (C33905 + C33904) * C48321) *
                C48206 * C48338) *
               C2349 +
           (((C16775 + C16774) * C415 -
             ((C16117 + C16116) * C48358 + (C16115 + C16114) * C414) +
             (C16777 + C16776) * C48347 - (C17209 + C17208) * C416 -
             (C17211 + C17210) * C48321) *
                C48206 * C31851 +
            ((C17208 + C17209) * C415 -
             ((C16776 + C16777) * C48358 + (C16774 + C16775) * C414) +
             (C17210 + C17211) * C48347 - (C18558 + C18559) * C416 -
             (C18560 + C18561) * C48321) *
                C48206 * C48338) *
               C48062) *
              C2457 +
          ((((C32202 + C32203) * C415 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48358 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C414) +
             (C32204 + C32205) * C48347 - (C32206 + C32207) * C416 -
             (C32208 + C32209) * C48321) *
                C48206 * C31851 +
            ((C32207 + C32206) * C415 -
             ((C32205 + C32204) * C48358 + (C32203 + C32202) * C414) +
             (C32209 + C32208) * C48347 - (C34243 + C34242) * C416 -
             (C34245 + C34244) * C48321) *
                C48206 * C48338) *
               C2349 +
           (((C16122 + C16123) * C414 + (C16124 + C16125) * C48358 -
             (C16779 + C16778) * C415 - (C16781 + C16780) * C48347 +
             (C18287 + C18286) * C416 + (C18289 + C18288) * C48321) *
                C48206 * C31851 +
            ((C16778 + C16779) * C414 + (C16780 + C16781) * C48358 -
             (C18286 + C18287) * C415 - (C18288 + C18289) * C48347 +
             (C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48305 * C2244) *
                 C416 +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48305 * C2250) *
                 C48321) *
                C48206 * C48338) *
               C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C32194 + C32195) * C666 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C665 + (C32197 + C32196) * C48287 -
             (C32199 + C32198) * C666 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C666 -
             ((C16776 + C16777) * C48287 + (C16774 + C16775) * C665) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C48062) *
              C47978 +
          ((((C32202 + C32203) * C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C666 -
             ((C32205 + C32204) * C48287 + (C32203 + C32202) * C665) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C665 + (C16780 + C16781) * C48287 -
             (C18286 + C18287) * C666 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C48062) *
              C47986 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C665 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48287 -
             (C32210 + C32211) * C666 - (C32212 + C32213) * C48104) *
                C48206 * C31851 +
            ((C32211 + C32210) * C665 + (C32213 + C32212) * C48287 -
             (C32215 + C32214) * C666 - (C32217 + C32216) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C16783 + C16782) * C666 -
             ((C16133 + C16132) * C48287 + (C16131 + C16130) * C665) +
             (C16785 + C16784) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
              C48305 * C2028) *
                 C666 -
             ((C16784 + C16785) * C48287 + (C16782 + C16783) * C665) +
             (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
              C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C2349 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C48062) *
              C48363 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C48062 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C2349) *
              C48356 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C32211 + C32210) * C116 + (C32213 + C32212) * C48017) * C48206 *
                C48338) *
               C2349 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C48062) *
              C48343 +
          ((((C16422 + C16423) * C116 + (C16424 + C16425) * C48017) * C48206 *
                C31851 +
            ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48305 * C830) *
                 C116 +
             (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48305 * C836) *
                 C48017) *
                C48206 * C48338) *
               C48062 -
           (((C32489 + C32488) * C48017 + (C32487 + C32486) * C116) * C48206 *
                C48338 +
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48017 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C48206 * C31851) *
               C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C48364 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C48360 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C48350 -
           (((C17708 + C17709) * C48017 + (C17706 + C17707) * C116) * C48206 *
                C48338 +
            ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C48206 *
                C31851) *
               C48328) *
              C2457 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C48360 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C48364 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C48350 +
           (((C17361 + C17360) * C116 + (C17359 + C17358) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1548 + C15913 * C1551 + C15918 * C1549 +
              C48305 * C1552) *
                 C116 +
             (C15917 * C1554 + C15913 * C1557 + C15918 * C1555 +
              C48305 * C1558) *
                 C48017) *
                C48206 * C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C32194 + C32195) * C3114 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C3113 + (C32197 + C32196) * C3111 -
             (C32199 + C32198) * C3114 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C48058 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C3114 -
             ((C16776 + C16777) * C3111 + (C16774 + C16775) * C3113) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C48065 +
           (((C16121 + C16120) * C3113 + (C16119 + C16118) * C3111 -
             (C17213 + C17212) * C3114 - (C17215 + C17214) * C48104) *
                C48206 * C31851 +
            ((C17212 + C17213) * C3113 + (C17214 + C17215) * C3111 -
             (C17216 + C17217) * C3114 - (C17218 + C17219) * C48104) *
                C48206 * C48338) *
               C2717) *
              C48272 +
          ((((C32202 + C32203) * C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C3114 -
             ((C32205 + C32204) * C3111 + (C32203 + C32202) * C3113) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C48058 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C3113 + (C16780 + C16781) * C3111 -
             (C18286 + C18287) * C3114 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C48065 +
           (((C17565 + C17564) * C3114 -
             ((C16129 + C16128) * C3111 + (C16127 + C16126) * C3113) +
             (C17567 + C17566) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1162 + C15913 * C1177 + C15918 * C1163 +
              C48305 * C1178) *
                 C3114 -
             ((C17566 + C17567) * C3111 + (C17564 + C17565) * C3113) +
             (C15917 * C1180 + C15913 * C1189 + C15918 * C1181 +
              C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C47032 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48100 -
            (C32194 + C32195) * C47024 - (C32196 + C32197) * C48107 +
            (C32198 + C32199) * C47038 + (C32200 + C32201) * C3625) *
               C48206 * C31851 +
           ((C32195 + C32194) * C47032 + (C32197 + C32196) * C48100 -
            (C32199 + C32198) * C47024 - (C32201 + C32200) * C48107 +
            (C33903 + C33902) * C47038 + (C33905 + C33904) * C3625) *
               C48206 * C48338) *
              C48058 +
          (((C16775 + C16774) * C47024 -
            ((C16117 + C16116) * C48100 + (C16115 + C16114) * C47032) +
            (C16777 + C16776) * C48107 - (C17209 + C17208) * C47038 -
            (C17211 + C17210) * C3625) *
               C48206 * C31851 +
           ((C17208 + C17209) * C47024 -
            ((C16776 + C16777) * C48100 + (C16774 + C16775) * C47032) +
            (C17210 + C17211) * C48107 - (C18558 + C18559) * C47038 -
            (C18560 + C18561) * C3625) *
               C48206 * C48338) *
              C48065 +
          (((C16121 + C16120) * C47032 + (C16119 + C16118) * C48100 -
            (C17213 + C17212) * C47024 - (C17215 + C17214) * C48107 +
            (C17217 + C17216) * C47038 + (C17219 + C17218) * C3625) *
               C48206 * C31851 +
           ((C17212 + C17213) * C47032 + (C17214 + C17215) * C48100 -
            (C17216 + C17217) * C47024 - (C17218 + C17219) * C48107 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48305 * C7272) *
                C47038 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48305 * C7276) *
                C3625) *
               C48206 * C48338) *
              C2717) *
         C47973) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3113 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C3111 -
            (C32194 + C32195) * C3114 - (C32196 + C32197) * C48104) *
               C48206 * C31851 +
           ((C32195 + C32194) * C3113 + (C32197 + C32196) * C3111 -
            (C32199 + C32198) * C3114 - (C32201 + C32200) * C48104) *
               C48206 * C48338) *
              C48364 +
          (((C16775 + C16774) * C3114 -
            ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
            (C16777 + C16776) * C48104) *
               C48206 * C31851 +
           ((C17208 + C17209) * C3114 -
            ((C16776 + C16777) * C3111 + (C16774 + C16775) * C3113) +
            (C17210 + C17211) * C48104) *
               C48206 * C48338) *
              C48360 +
          (((C16121 + C16120) * C3113 + (C16119 + C16118) * C3111 -
            (C17213 + C17212) * C3114 - (C17215 + C17214) * C48104) *
               C48206 * C31851 +
           ((C17212 + C17213) * C3113 + (C17214 + C17215) * C3111 -
            (C17216 + C17217) * C3114 - (C17218 + C17219) * C48104) *
               C48206 * C48338) *
              C48350 +
          (((C17707 + C17706) * C3114 -
            ((C17033 + C17032) * C3111 + (C17031 + C17030) * C3113) +
            (C17709 + C17708) * C48104) *
               C48206 * C31851 +
           ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48305 * C5882) *
                C3114 -
            ((C17708 + C17709) * C3111 + (C17706 + C17707) * C3113) +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48305 * C5886) *
                C48104) *
               C48206 * C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C32194 + C32195) * C3114 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C3113 + (C32197 + C32196) * C3111 -
             (C32199 + C32198) * C3114 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C3114 -
             ((C16776 + C16777) * C3111 + (C16774 + C16775) * C3113) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C48062) *
              C48354 +
          ((((C32202 + C32203) * C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C3114 -
             ((C32205 + C32204) * C3111 + (C32203 + C32202) * C3113) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C3113 + (C16780 + C16781) * C3111 -
             (C18286 + C18287) * C3114 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C48062) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C3113 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C3111 -
             (C32210 + C32211) * C3114 - (C32212 + C32213) * C48104) *
                C48206 * C31851 +
            ((C32211 + C32210) * C3113 + (C32213 + C32212) * C3111 -
             (C32215 + C32214) * C3114 - (C32217 + C32216) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C16783 + C16782) * C3114 -
             ((C16133 + C16132) * C3111 + (C16131 + C16130) * C3113) +
             (C16785 + C16784) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
              C48305 * C2028) *
                 C3114 -
             ((C16784 + C16785) * C3111 + (C16782 + C16783) * C3113) +
             (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
              C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3363 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48365 -
            (C32194 + C32195) * C3364 - (C32196 + C32197) * C48362 +
            (C32198 + C32199) * C3365 + (C32200 + C32201) * C48353 -
            (C33902 + C33903) * C3366 - (C33904 + C33905) * C48334) *
               C48206 * C31851 +
           ((C32195 + C32194) * C3363 + (C32197 + C32196) * C48365 -
            (C32199 + C32198) * C3364 - (C32201 + C32200) * C48362 +
            (C33903 + C33902) * C3365 + (C33905 + C33904) * C48353 -
            (C33907 + C33906) * C3366 - (C33909 + C33908) * C48334) *
               C48206 * C48338) *
              C2349 +
          (((C16775 + C16774) * C3364 -
            ((C16117 + C16116) * C48365 + (C16115 + C16114) * C3363) +
            (C16777 + C16776) * C48362 - (C17209 + C17208) * C3365 -
            (C17211 + C17210) * C48353 + (C18559 + C18558) * C3366 +
            (C18561 + C18560) * C48334) *
               C48206 * C31851 +
           ((C17208 + C17209) * C3364 -
            ((C16776 + C16777) * C48365 + (C16774 + C16775) * C3363) +
            (C17210 + C17211) * C48362 - (C18558 + C18559) * C3365 -
            (C18560 + C18561) * C48353 +
            (C15917 * C6795 + C15913 * C6797 + C15918 * C6796 +
             C48305 * C6798) *
                C3366 +
            (C15917 * C6799 + C15913 * C6801 + C15918 * C6800 +
             C48305 * C6802) *
                C48334) *
               C48206 * C48338) *
              C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C47032 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48100 -
             (C32194 + C32195) * C47024 - (C32196 + C32197) * C48107 +
             (C32198 + C32199) * C47038 + (C32200 + C32201) * C3625) *
                C48206 * C31851 +
            ((C32195 + C32194) * C47032 + (C32197 + C32196) * C48100 -
             (C32199 + C32198) * C47024 - (C32201 + C32200) * C48107 +
             (C33903 + C33902) * C47038 + (C33905 + C33904) * C3625) *
                C48206 * C48338) *
               C2349 +
           (((C16775 + C16774) * C47024 -
             ((C16117 + C16116) * C48100 + (C16115 + C16114) * C47032) +
             (C16777 + C16776) * C48107 - (C17209 + C17208) * C47038 -
             (C17211 + C17210) * C3625) *
                C48206 * C31851 +
            ((C17208 + C17209) * C47024 -
             ((C16776 + C16777) * C48100 + (C16774 + C16775) * C47032) +
             (C17210 + C17211) * C48107 - (C18558 + C18559) * C47038 -
             (C18560 + C18561) * C3625) *
                C48206 * C48338) *
               C48062) *
              C48272 +
          ((((C32202 + C32203) * C47024 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48100 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C47032) +
             (C32204 + C32205) * C48107 - (C32206 + C32207) * C47038 -
             (C32208 + C32209) * C3625) *
                C48206 * C31851 +
            ((C32207 + C32206) * C47024 -
             ((C32205 + C32204) * C48100 + (C32203 + C32202) * C47032) +
             (C32209 + C32208) * C48107 - (C34243 + C34242) * C47038 -
             (C34245 + C34244) * C3625) *
                C48206 * C48338) *
               C2349 +
           (((C16122 + C16123) * C47032 + (C16124 + C16125) * C48100 -
             (C16779 + C16778) * C47024 - (C16781 + C16780) * C48107 +
             (C18287 + C18286) * C47038 + (C18289 + C18288) * C3625) *
                C48206 * C31851 +
            ((C16778 + C16779) * C47032 + (C16780 + C16781) * C48100 -
             (C18286 + C18287) * C47024 - (C18288 + C18289) * C48107 +
             (C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48305 * C2244) *
                 C47038 +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48305 * C2250) *
                 C3625) *
                C48206 * C48338) *
               C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C32194 + C32195) * C3114 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C3113 + (C32197 + C32196) * C3111 -
             (C32199 + C32198) * C3114 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C3114 -
             ((C16776 + C16777) * C3111 + (C16774 + C16775) * C3113) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C48062) *
              C48354 +
          ((((C32202 + C32203) * C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C3114 -
             ((C32205 + C32204) * C3111 + (C32203 + C32202) * C3113) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C3113 + (C16780 + C16781) * C3111 -
             (C18286 + C18287) * C3114 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C48062) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C3113 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C3111 -
             (C32210 + C32211) * C3114 - (C32212 + C32213) * C48104) *
                C48206 * C31851 +
            ((C32211 + C32210) * C3113 + (C32213 + C32212) * C3111 -
             (C32215 + C32214) * C3114 - (C32217 + C32216) * C48104) *
                C48206 * C48338) *
               C2349 +
           (((C16783 + C16782) * C3114 -
             ((C16133 + C16132) * C3111 + (C16131 + C16130) * C3113) +
             (C16785 + C16784) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
              C48305 * C2028) *
                 C3114 -
             ((C16784 + C16785) * C3111 + (C16782 + C16783) * C3113) +
             (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
              C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3113 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C3111 -
            (C32194 + C32195) * C3114 - (C32196 + C32197) * C48104) *
               C48206 * C31851 +
           ((C32195 + C32194) * C3113 + (C32197 + C32196) * C3111 -
            (C32199 + C32198) * C3114 - (C32201 + C32200) * C48104) *
               C48206 * C48338) *
              C48364 +
          (((C16775 + C16774) * C3114 -
            ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
            (C16777 + C16776) * C48104) *
               C48206 * C31851 +
           ((C17208 + C17209) * C3114 -
            ((C16776 + C16777) * C3111 + (C16774 + C16775) * C3113) +
            (C17210 + C17211) * C48104) *
               C48206 * C48338) *
              C48360 +
          (((C16121 + C16120) * C3113 + (C16119 + C16118) * C3111 -
            (C17213 + C17212) * C3114 - (C17215 + C17214) * C48104) *
               C48206 * C31851 +
           ((C17212 + C17213) * C3113 + (C17214 + C17215) * C3111 -
            (C17216 + C17217) * C3114 - (C17218 + C17219) * C48104) *
               C48206 * C48338) *
              C48350 +
          (((C17707 + C17706) * C3114 -
            ((C17033 + C17032) * C3111 + (C17031 + C17030) * C3113) +
            (C17709 + C17708) * C48104) *
               C48206 * C31851 +
           ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48305 * C5882) *
                C3114 -
            ((C17708 + C17709) * C3111 + (C17706 + C17707) * C3113) +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48305 * C5886) *
                C48104) *
               C48206 * C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C1289 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C1290 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C1291 -
           (((C17708 + C17709) * C48017 + (C17706 + C17707) * C116) * C48206 *
                C48338 +
            ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C48206 *
                C31851) *
               C48328) *
              C48272 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C1290 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C1289 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C1291 +
           (((C17361 + C17360) * C116 + (C17359 + C17358) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1548 + C15913 * C1551 + C15918 * C1549 +
              C48305 * C1552) *
                 C116 +
             (C15917 * C1554 + C15913 * C1557 + C15918 * C1555 +
              C48305 * C1558) *
                 C48017) *
                C48206 * C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C48286 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C48062) *
              C557 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C48062 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C48286) *
              C558 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C32211 + C32210) * C116 + (C32213 + C32212) * C48017) * C48206 *
                C48338) *
               C48286 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C48062) *
              C559 +
          ((((C16422 + C16423) * C116 + (C16424 + C16425) * C48017) * C48206 *
                C31851 +
            ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48305 * C830) *
                 C116 +
             (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48305 * C836) *
                 C48017) *
                C48206 * C48338) *
               C48062 -
           (((C15918 * C444 + C48305 * C455 + C15917 * C440 + C15913 * C453) *
                 C48017 +
             (C15918 * C425 + C48305 * C443 + C15917 * C423 + C15913 * C439) *
                 C116) *
                C48206 * C48338 +
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48017 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C48206 * C31851) *
               C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C1672 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C1669 -
             (C32194 + C32195) * C1673 - (C32196 + C32197) * C1670 +
             (C32198 + C32199) * C1674 + (C32200 + C32201) * C48321) *
                C48206 * C31851 +
            ((C32195 + C32194) * C1672 + (C32197 + C32196) * C1669 -
             (C32199 + C32198) * C1673 - (C32201 + C32200) * C1670 +
             (C33903 + C33902) * C1674 + (C33905 + C33904) * C48321) *
                C48206 * C48338) *
               C48286 +
           (((C16775 + C16774) * C1673 -
             ((C16117 + C16116) * C1669 + (C16115 + C16114) * C1672) +
             (C16777 + C16776) * C1670 - (C17209 + C17208) * C1674 -
             (C17211 + C17210) * C48321) *
                C48206 * C31851 +
            ((C17208 + C17209) * C1673 -
             ((C16776 + C16777) * C1669 + (C16774 + C16775) * C1672) +
             (C17210 + C17211) * C1670 - (C18558 + C18559) * C1674 -
             (C18560 + C18561) * C48321) *
                C48206 * C48338) *
               C48062) *
              C48272 +
          ((((C32202 + C32203) * C1673 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C1669 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C1672) +
             (C32204 + C32205) * C1670 - (C32206 + C32207) * C1674 -
             (C32208 + C32209) * C48321) *
                C48206 * C31851 +
            ((C32207 + C32206) * C1673 -
             ((C32205 + C32204) * C1669 + (C32203 + C32202) * C1672) +
             (C32209 + C32208) * C1670 -
             (C15918 * C1857 + C48305 * C1863 + C15917 * C1858 +
              C15913 * C1864) *
                 C1674 -
             (C15918 * C1866 + C48305 * C1875 + C15917 * C1867 +
              C15913 * C1876) *
                 C48321) *
                C48206 * C48338) *
               C48286 +
           (((C16122 + C16123) * C1672 + (C16124 + C16125) * C1669 -
             (C16779 + C16778) * C1673 - (C16781 + C16780) * C1670 +
             (C18287 + C18286) * C1674 + (C18289 + C18288) * C48321) *
                C48206 * C31851 +
            ((C16778 + C16779) * C1672 + (C16780 + C16781) * C1669 -
             (C18286 + C18287) * C1673 - (C18288 + C18289) * C1670 +
             (C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48305 * C2244) *
                 C1674 +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48305 * C2250) *
                 C48321) *
                C48206 * C48338) *
               C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C665 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48287 -
            (C32194 + C32195) * C666 - (C32196 + C32197) * C48104) *
               C48206 * C31851 +
           ((C32195 + C32194) * C665 + (C32197 + C32196) * C48287 -
            (C32199 + C32198) * C666 - (C32201 + C32200) * C48104) *
               C48206 * C48338) *
              C1289 +
          (((C16775 + C16774) * C666 -
            ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
            (C16777 + C16776) * C48104) *
               C48206 * C31851 +
           ((C17208 + C17209) * C666 -
            ((C16776 + C16777) * C48287 + (C16774 + C16775) * C665) +
            (C17210 + C17211) * C48104) *
               C48206 * C48338) *
              C1290 +
          (((C16121 + C16120) * C665 + (C16119 + C16118) * C48287 -
            (C17213 + C17212) * C666 - (C17215 + C17214) * C48104) *
               C48206 * C31851 +
           ((C17212 + C17213) * C665 + (C17214 + C17215) * C48287 -
            (C17216 + C17217) * C666 - (C17218 + C17219) * C48104) *
               C48206 * C48338) *
              C1291 +
          (((C17707 + C17706) * C666 -
            ((C17033 + C17032) * C48287 + (C17031 + C17030) * C665) +
            (C17709 + C17708) * C48104) *
               C48206 * C31851 +
           ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48305 * C5882) *
                C666 -
            ((C17708 + C17709) * C48287 + (C17706 + C17707) * C665) +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48305 * C5886) *
                C48104) *
               C48206 * C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C32194 + C32195) * C666 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C665 + (C32197 + C32196) * C48287 -
             (C32199 + C32198) * C666 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C666 -
             ((C16776 + C16777) * C48287 + (C16774 + C16775) * C665) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C48062) *
              C258 +
          ((((C32202 + C32203) * C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C666 -
             ((C32205 + C32204) * C48287 + (C32203 + C32202) * C665) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C665 + (C16780 + C16781) * C48287 -
             (C18286 + C18287) * C666 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C48062) *
              C259 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C665 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48287 -
             (C32210 + C32211) * C666 - (C32212 + C32213) * C48104) *
                C48206 * C31851 +
            ((C32211 + C32210) * C665 + (C32213 + C32212) * C48287 -
             (C32215 + C32214) * C666 - (C32217 + C32216) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C16783 + C16782) * C666 -
             ((C16133 + C16132) * C48287 + (C16131 + C16130) * C665) +
             (C16785 + C16784) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
              C48305 * C2028) *
                 C666 -
             ((C16784 + C16785) * C48287 + (C16782 + C16783) * C665) +
             (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
              C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C2133 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C2129 -
            (C32194 + C32195) * C2134 - (C32196 + C32197) * C2130 +
            (C32198 + C32199) * C2135 + (C32200 + C32201) * C2131 -
            (C33902 + C33903) * C2136 - (C33904 + C33905) * C48334) *
               C48206 * C31851 +
           ((C32195 + C32194) * C2133 + (C32197 + C32196) * C2129 -
            (C32199 + C32198) * C2134 - (C32201 + C32200) * C2130 +
            (C33903 + C33902) * C2135 + (C33905 + C33904) * C2131 -
            (C33907 + C33906) * C2136 - (C33909 + C33908) * C48334) *
               C48206 * C48338) *
              C48286 +
          (((C16775 + C16774) * C2134 -
            ((C16117 + C16116) * C2129 + (C16115 + C16114) * C2133) +
            (C16777 + C16776) * C2130 - (C17209 + C17208) * C2135 -
            (C17211 + C17210) * C2131 + (C18559 + C18558) * C2136 +
            (C18561 + C18560) * C48334) *
               C48206 * C31851 +
           ((C17208 + C17209) * C2134 -
            ((C16776 + C16777) * C2129 + (C16774 + C16775) * C2133) +
            (C17210 + C17211) * C2130 - (C18558 + C18559) * C2135 -
            (C18560 + C18561) * C2131 +
            (C15917 * C6795 + C15913 * C6797 + C15918 * C6796 +
             C48305 * C6798) *
                C2136 +
            (C15917 * C6799 + C15913 * C6801 + C15918 * C6800 +
             C48305 * C6802) *
                C48334) *
               C48206 * C48338) *
              C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C15917 * C117 + C15913 * C124 + C15918 * C118 +
                 C48305 * C125) *
                    C116 +
                (C15917 * C127 + C15913 * C138 + C15918 * C128 +
                 C48305 * C139) *
                    C48017) *
                   C48206 * C31851 +
               ((C15917 * C419 + C15913 * C429 + C15918 * C418 +
                 C48305 * C428) *
                    C116 +
                (C15917 * C432 + C15913 * C449 + C15918 * C431 +
                 C48305 * C448) *
                    C48017) *
                   C48206 * C48338) *
                  C48000 * C108 -
              (((C15918 * C430 + C48305 * C447 + C15917 * C431 +
                 C15913 * C448) *
                    C48017 +
                (C15918 * C417 + C48305 * C427 + C15917 * C418 +
                 C15913 * C428) *
                    C116) *
                   C48206 * C48338 +
               ((C15918 * C129 + C48305 * C140 + C15917 * C128 +
                 C15913 * C139) *
                    C48017 +
                (C15918 * C119 + C48305 * C126 + C15917 * C118 +
                 C15913 * C125) *
                    C116) *
                   C48206 * C31851) *
                  C48000 * C109 +
              (((C15917 * C119 + C15913 * C126 + C15918 * C120 +
                 C48305 * C131) *
                    C116 +
                (C15917 * C129 + C15913 * C140 + C15918 * C130 +
                 C48305 * C141) *
                    C48017) *
                   C48206 * C31851 +
               ((C15917 * C417 + C15913 * C427 + C15918 * C423 +
                 C48305 * C439) *
                    C116 +
                (C15917 * C430 + C15913 * C447 + C15918 * C440 +
                 C48305 * C453) *
                    C48017) *
                   C48206 * C48338) *
                  C48000 * C110 -
              (((C15918 * C444 + C48305 * C455 + C15917 * C440 +
                 C15913 * C453) *
                    C48017 +
                (C15918 * C425 + C48305 * C443 + C15917 * C423 +
                 C15913 * C439) *
                    C116) *
                   C48206 * C48338 +
               ((C15918 * C133 + C48305 * C142 + C15917 * C130 +
                 C15913 * C141) *
                    C48017 +
                (C15918 * C121 + C48305 * C132 + C15917 * C120 +
                 C15913 * C131) *
                    C116) *
                   C48206 * C31851) *
                  C48000 * C111 +
              (((C15917 * C121 + C15913 * C132 + C15918 * C122 +
                 C48305 * C135) *
                    C116 +
                (C15917 * C133 + C15913 * C142 + C15918 * C134 +
                 C48305 * C143) *
                    C48017) *
                   C48206 * C31851 +
               ((C15917 * C425 + C15913 * C443 + C15918 * C667 +
                 C48305 * C668) *
                    C116 +
                (C15917 * C444 + C15913 * C455 + C15918 * C669 +
                 C48305 * C670) *
                    C48017) *
                   C48206 * C48338) *
                  C48000 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C15917 * C117 + C15913 * C124 + C15918 * C118 +
                  C48305 * C125) *
                     C116 +
                 (C15917 * C127 + C15913 * C138 + C15918 * C128 +
                  C48305 * C139) *
                     C48017) *
                    C48206 * C31851 +
                ((C15917 * C419 + C15913 * C429 + C15918 * C418 +
                  C48305 * C428) *
                     C116 +
                 (C15917 * C432 + C15913 * C449 + C15918 * C431 +
                  C48305 * C448) *
                     C48017) *
                    C48206 * C48338) *
                   C48357 -
               (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) *
                    C48206 * C48338 +
                ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) *
                    C48206 * C31851) *
                   C48345 +
               (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) *
                    C48206 * C31851 +
                ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) *
                    C48206 * C48338) *
                   C48318) *
                  C258 +
              ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) *
                    C48206 * C31851 +
                ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) *
                    C48206 * C48338) *
                   C48345 -
               (((C15918 * C430 + C48305 * C447 + C15917 * C431 +
                  C15913 * C448) *
                     C48017 +
                 (C15918 * C417 + C48305 * C427 + C15917 * C418 +
                  C15913 * C428) *
                     C116) *
                    C48206 * C48338 +
                ((C15918 * C129 + C48305 * C140 + C15917 * C128 +
                  C15913 * C139) *
                     C48017 +
                 (C15918 * C119 + C48305 * C126 + C15917 * C118 +
                  C15913 * C125) *
                     C116) *
                    C48206 * C31851) *
                   C48357 -
               (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) *
                    C48206 * C48338 +
                ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) *
                    C48206 * C31851) *
                   C48318) *
                  C259 +
              ((((C15917 * C119 + C15913 * C126 + C15918 * C120 +
                  C48305 * C131) *
                     C116 +
                 (C15917 * C129 + C15913 * C140 + C15918 * C130 +
                  C48305 * C141) *
                     C48017) *
                    C48206 * C31851 +
                ((C15917 * C417 + C15913 * C427 + C15918 * C423 +
                  C48305 * C439) *
                     C116 +
                 (C15917 * C430 + C15913 * C447 + C15918 * C440 +
                  C48305 * C453) *
                     C48017) *
                    C48206 * C48338) *
                   C48357 -
               (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) *
                    C48206 * C48338 +
                ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) *
                    C48206 * C31851) *
                   C48345 +
               (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) *
                    C48206 * C31851 +
                ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
                  C48305 * C1446) *
                     C116 +
                 (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
                  C48305 * C1448) *
                     C48017) *
                    C48206 * C48338) *
                   C48318) *
                  C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C414 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48358 -
            (C32194 + C32195) * C415 - (C32196 + C32197) * C48347 +
            (C32198 + C32199) * C416 + (C32200 + C32201) * C48321) *
               C48206 * C31851 +
           ((C32195 + C32194) * C414 + (C32197 + C32196) * C48358 -
            (C32199 + C32198) * C415 - (C32201 + C32200) * C48347 +
            (C15917 * C1859 + C15913 * C1865 + C15918 * C1858 +
             C48305 * C1864) *
                C416 +
            (C15917 * C1868 + C15913 * C1877 + C15918 * C1867 +
             C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C258 +
          (((C32202 + C32203) * C415 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48358 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C414) +
            (C32204 + C32205) * C48347 - (C32206 + C32207) * C416 -
            (C32208 + C32209) * C48321) *
               C48206 * C31851 +
           ((C32207 + C32206) * C415 -
            ((C32205 + C32204) * C48358 + (C32203 + C32202) * C414) +
            (C32209 + C32208) * C48347 -
            (C15918 * C1857 + C48305 * C1863 + C15917 * C1858 +
             C15913 * C1864) *
                C416 -
            (C15918 * C1866 + C48305 * C1875 + C15917 * C1867 +
             C15913 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C259 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C414 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48358 -
            (C32210 + C32211) * C415 - (C32212 + C32213) * C48347 +
            (C32214 + C32215) * C416 + (C32216 + C32217) * C48321) *
               C48206 * C31851 +
           ((C32211 + C32210) * C414 + (C32213 + C32212) * C48358 -
            (C32215 + C32214) * C415 - (C32217 + C32216) * C48347 +
            (C15917 * C1857 + C15913 * C1863 + C15918 * C2137 +
             C48305 * C2138) *
                C416 +
            (C15917 * C1866 + C15913 * C1875 + C15918 * C2139 +
             C48305 * C2140) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C948 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C48318) *
              C48354 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C948 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C947 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C48318) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C32211 + C32210) * C116 + (C32213 + C32212) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C948 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C116 +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C31851 +
           ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
               C48338) *
              C1015 -
          (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
               C48338 +
           ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
               C31851) *
              C1016 +
          (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
               C31851 +
           ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
               C48338) *
              C1017 -
          (((C17708 + C17709) * C48017 + (C17706 + C17707) * C116) * C48206 *
               C48338 +
           ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C48206 *
               C31851) *
              C1018 +
          (((C17037 + C17036) * C116 + (C17035 + C17034) * C48017) * C48206 *
               C31851 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48305 * C6404) *
                C116 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48305 * C6408) *
                C48017) *
               C48206 * C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C414 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48358 -
            (C32194 + C32195) * C415 - (C32196 + C32197) * C48347 +
            (C32198 + C32199) * C416 + (C32200 + C32201) * C48321) *
               C48206 * C31851 +
           ((C32195 + C32194) * C414 + (C32197 + C32196) * C48358 -
            (C32199 + C32198) * C415 - (C32201 + C32200) * C48347 +
            (C15917 * C1859 + C15913 * C1865 + C15918 * C1858 +
             C48305 * C1864) *
                C416 +
            (C15917 * C1868 + C15913 * C1877 + C15918 * C1867 +
             C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C947 +
          (((C16775 + C16774) * C415 -
            ((C16117 + C16116) * C48358 + (C16115 + C16114) * C414) +
            (C16777 + C16776) * C48347 - (C17209 + C17208) * C416 -
            (C17211 + C17210) * C48321) *
               C48206 * C31851 +
           ((C17208 + C17209) * C415 -
            ((C16776 + C16777) * C48358 + (C16774 + C16775) * C414) +
            (C17210 + C17211) * C48347 - (C18558 + C18559) * C416 -
            (C18560 + C18561) * C48321) *
               C48206 * C48338) *
              C948 +
          (((C16121 + C16120) * C414 + (C16119 + C16118) * C48358 -
            (C17213 + C17212) * C415 - (C17215 + C17214) * C48347 +
            (C17217 + C17216) * C416 + (C17219 + C17218) * C48321) *
               C48206 * C31851 +
           ((C17212 + C17213) * C414 + (C17214 + C17215) * C48358 -
            (C17216 + C17217) * C415 - (C17218 + C17219) * C48347 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48305 * C7272) *
                C416 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48305 * C7276) *
                C48321) *
               C48206 * C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C1672 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C1669 -
            (C32194 + C32195) * C1673 - (C32196 + C32197) * C1670 +
            (C32198 + C32199) * C1674 + (C32200 + C32201) * C48321) *
               C48206 * C31851 +
           ((C32195 + C32194) * C1672 + (C32197 + C32196) * C1669 -
            (C32199 + C32198) * C1673 - (C32201 + C32200) * C1670 +
            (C15917 * C1859 + C15913 * C1865 + C15918 * C1858 +
             C48305 * C1864) *
                C1674 +
            (C15917 * C1868 + C15913 * C1877 + C15918 * C1867 +
             C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48354 +
          (((C32202 + C32203) * C1673 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C1669 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C1672) +
            (C32204 + C32205) * C1670 - (C32206 + C32207) * C1674 -
            (C32208 + C32209) * C48321) *
               C48206 * C31851 +
           ((C32207 + C32206) * C1673 -
            ((C32205 + C32204) * C1669 + (C32203 + C32202) * C1672) +
            (C32209 + C32208) * C1670 -
            (C15918 * C1857 + C48305 * C1863 + C15917 * C1858 +
             C15913 * C1864) *
                C1674 -
            (C15918 * C1866 + C48305 * C1875 + C15917 * C1867 +
             C15913 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48341 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C1672 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C1669 -
            (C32210 + C32211) * C1673 - (C32212 + C32213) * C1670 +
            (C32214 + C32215) * C1674 + (C32216 + C32217) * C48321) *
               C48206 * C31851 +
           ((C32211 + C32210) * C1672 + (C32213 + C32212) * C1669 -
            (C32215 + C32214) * C1673 - (C32217 + C32216) * C1670 +
            (C15917 * C1857 + C15913 * C1863 + C15918 * C2137 +
             C48305 * C2138) *
                C1674 +
            (C15917 * C1866 + C15913 * C1875 + C15918 * C2139 +
             C48305 * C2140) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C1672 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C1669 -
            (C32194 + C32195) * C1673 - (C32196 + C32197) * C1670 +
            (C32198 + C32199) * C1674 + (C32200 + C32201) * C48321) *
               C48206 * C31851 +
           ((C32195 + C32194) * C1672 + (C32197 + C32196) * C1669 -
            (C32199 + C32198) * C1673 - (C32201 + C32200) * C1670 +
            (C15917 * C1859 + C15913 * C1865 + C15918 * C1858 +
             C48305 * C1864) *
                C1674 +
            (C15917 * C1868 + C15913 * C1877 + C15918 * C1867 +
             C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48357 +
          (((C16775 + C16774) * C1673 -
            ((C16117 + C16116) * C1669 + (C16115 + C16114) * C1672) +
            (C16777 + C16776) * C1670 - (C17209 + C17208) * C1674 -
            (C17211 + C17210) * C48321) *
               C48206 * C31851 +
           ((C17208 + C17209) * C1673 -
            ((C16776 + C16777) * C1669 + (C16774 + C16775) * C1672) +
            (C17210 + C17211) * C1670 - (C18558 + C18559) * C1674 -
            (C18560 + C18561) * C48321) *
               C48206 * C48338) *
              C48345 +
          (((C16121 + C16120) * C1672 + (C16119 + C16118) * C1669 -
            (C17213 + C17212) * C1673 - (C17215 + C17214) * C1670 +
            (C17217 + C17216) * C1674 + (C17219 + C17218) * C48321) *
               C48206 * C31851 +
           ((C17212 + C17213) * C1672 + (C17214 + C17215) * C1669 -
            (C17216 + C17217) * C1673 - (C17218 + C17219) * C1670 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48305 * C7272) *
                C1674 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48305 * C7276) *
                C48321) *
               C48206 * C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
               C1852 +
           (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
               C1847 -
           (C32194 + C32195) * C1853 - (C32196 + C32197) * C1848 +
           (C32198 + C32199) * C1854 + (C32200 + C32201) * C1849 -
           (C33902 + C33903) * C1855 - (C33904 + C33905) * C1850 +
           (C33906 + C33907) * C1856 + (C33908 + C33909) * C1851) *
              C48206 * C31851 +
          ((C32195 + C32194) * C1852 + (C32197 + C32196) * C1847 -
           (C32199 + C32198) * C1853 - (C32201 + C32200) * C1848 +
           (C33903 + C33902) * C1854 + (C33905 + C33904) * C1849 -
           (C33907 + C33906) * C1855 - (C33909 + C33908) * C1850 +
           (C15917 * C12369 + C15913 * C12371 + C15918 * C12370 +
            C48305 * C12372) *
               C1856 +
           (C15917 * C12373 + C15913 * C12375 + C15918 * C12374 +
            C48305 * C12376) *
               C1851) *
              C48206 * C48338) *
         C48000 * C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C32194 + C32195) * C666 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C665 + (C32197 + C32196) * C48287 -
             (C32199 + C32198) * C666 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C947 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C666 -
             ((C16776 + C16777) * C48287 + (C16774 + C16775) * C665) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C948 +
           (((C16121 + C16120) * C665 + (C16119 + C16118) * C48287 -
             (C17213 + C17212) * C666 - (C17215 + C17214) * C48104) *
                C48206 * C31851 +
            ((C17212 + C17213) * C665 + (C17214 + C17215) * C48287 -
             (C17216 + C17217) * C666 - (C17218 + C17219) * C48104) *
                C48206 * C48338) *
               C48318) *
              C48272 +
          ((((C32202 + C32203) * C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C666 -
             ((C32205 + C32204) * C48287 + (C32203 + C32202) * C665) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C947 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C665 + (C16780 + C16781) * C48287 -
             (C18286 + C18287) * C666 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C948 +
           (((C17565 + C17564) * C666 -
             ((C16129 + C16128) * C48287 + (C16127 + C16126) * C665) +
             (C17567 + C17566) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1162 + C15913 * C1177 + C15918 * C1163 +
              C48305 * C1178) *
                 C666 -
             ((C17566 + C17567) * C48287 + (C17564 + C17565) * C665) +
             (C15917 * C1180 + C15913 * C1189 + C15918 * C1181 +
              C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C665 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48287 -
            (C32194 + C32195) * C666 - (C32196 + C32197) * C48104) *
               C48206 * C31851 +
           ((C32195 + C32194) * C665 + (C32197 + C32196) * C48287 -
            (C32199 + C32198) * C666 - (C32201 + C32200) * C48104) *
               C48206 * C48338) *
              C48000 * C557 +
          (((C32202 + C32203) * C666 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48287 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C665) +
            (C32204 + C32205) * C48104) *
               C48206 * C31851 +
           ((C32207 + C32206) * C666 -
            ((C32205 + C32204) * C48287 + (C32203 + C32202) * C665) +
            (C32209 + C32208) * C48104) *
               C48206 * C48338) *
              C48000 * C558 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C665 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48287 -
            (C32210 + C32211) * C666 - (C32212 + C32213) * C48104) *
               C48206 * C31851 +
           ((C32211 + C32210) * C665 + (C32213 + C32212) * C48287 -
            (C32215 + C32214) * C666 - (C32217 + C32216) * C48104) *
               C48206 * C48338) *
              C48000 * C559 +
          (((C32486 + C32487) * C666 -
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48287 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C665) +
            (C32488 + C32489) * C48104) *
               C48206 * C31851 +
           ((C15917 * C424 + C15913 * C441 + C15918 * C426 + C48305 * C445) *
                C666 -
            ((C32489 + C32488) * C48287 + (C32487 + C32486) * C665) +
            (C15917 * C442 + C15913 * C454 + C15918 * C446 + C48305 * C456) *
                C48104) *
               C48206 * C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C2133 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C2129 -
            (C32194 + C32195) * C2134 - (C32196 + C32197) * C2130 +
            (C32198 + C32199) * C2135 + (C32200 + C32201) * C2131 -
            (C33902 + C33903) * C2136 - (C33904 + C33905) * C48334) *
               C48206 * C31851 +
           ((C32195 + C32194) * C2133 + (C32197 + C32196) * C2129 -
            (C32199 + C32198) * C2134 - (C32201 + C32200) * C2130 +
            (C33903 + C33902) * C2135 + (C33905 + C33904) * C2131 -
            (C33907 + C33906) * C2136 - (C33909 + C33908) * C48334) *
               C48206 * C48338) *
              C48000 * C48272 +
          (((C32202 + C32203) * C2134 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C2129 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C2133) +
            (C32204 + C32205) * C2130 - (C32206 + C32207) * C2135 -
            (C32208 + C32209) * C2131 + (C34242 + C34243) * C2136 +
            (C34244 + C34245) * C48334) *
               C48206 * C31851 +
           ((C32207 + C32206) * C2134 -
            ((C32205 + C32204) * C2129 + (C32203 + C32202) * C2133) +
            (C32209 + C32208) * C2130 - (C34243 + C34242) * C2135 -
            (C34245 + C34244) * C2131 +
            (C15917 * C1861 + C15913 * C1870 + C15918 * C1862 +
             C48305 * C1871) *
                C2136 +
            (C15917 * C1873 + C15913 * C1879 + C15918 * C1874 +
             C48305 * C1880) *
                C48334) *
               C48206 * C48338) *
              C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C15917 * C419 + C15913 * C429 + C15918 * C418 + C48305 * C428) *
                 C116 +
             (C15917 * C432 + C15913 * C449 + C15918 * C431 + C48305 * C448) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C48345 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C48318) *
              C258 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C48345 -
           (((C15918 * C430 + C48305 * C447 + C15917 * C431 + C15913 * C448) *
                 C48017 +
             (C15918 * C417 + C48305 * C427 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C48206 * C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C48357 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C48318) *
              C259 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C15917 * C417 + C15913 * C427 + C15918 * C423 + C48305 * C439) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C440 + C48305 * C453) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C48345 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C116 +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C31851 +
           ((C15917 * C419 + C15913 * C429 + C15918 * C418 + C48305 * C428) *
                C116 +
            (C15917 * C432 + C15913 * C449 + C15918 * C431 + C48305 * C448) *
                C48017) *
               C48206 * C48338) *
              C48000 * C108 -
          (((C15918 * C430 + C48305 * C447 + C15917 * C431 + C15913 * C448) *
                C48017 +
            (C15918 * C417 + C48305 * C427 + C15917 * C418 + C15913 * C428) *
                C116) *
               C48206 * C48338 +
           ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                C48017 +
            (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C48206 * C31851) *
              C48000 * C109 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48017) *
               C48206 * C31851 +
           ((C15917 * C417 + C15913 * C427 + C15918 * C423 + C48305 * C439) *
                C116 +
            (C15917 * C430 + C15913 * C447 + C15918 * C440 + C48305 * C453) *
                C48017) *
               C48206 * C48338) *
              C48000 * C110 -
          (((C15918 * C444 + C48305 * C455 + C15917 * C440 + C15913 * C453) *
                C48017 +
            (C15918 * C425 + C48305 * C443 + C15917 * C423 + C15913 * C439) *
                C116) *
               C48206 * C48338 +
           ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                C48017 +
            (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C48206 * C31851) *
              C48000 * C111 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48305 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48305 * C143) *
                C48017) *
               C48206 * C31851 +
           ((C15917 * C425 + C15913 * C443 + C15918 * C667 + C48305 * C668) *
                C116 +
            (C15917 * C444 + C15913 * C455 + C15918 * C669 + C48305 * C670) *
                C48017) *
               C48206 * C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C948 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C48318) *
              C48354 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C948 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C947 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C48318) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C32211 + C32210) * C116 + (C32213 + C32212) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C948 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C116 +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C31851 +
           ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
               C48338) *
              C1015 -
          (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
               C48338 +
           ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
               C31851) *
              C1016 +
          (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
               C31851 +
           ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
               C48338) *
              C1017 -
          (((C17708 + C17709) * C48017 + (C17706 + C17707) * C116) * C48206 *
               C48338 +
           ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C48206 *
               C31851) *
              C1018 +
          (((C17037 + C17036) * C116 + (C17035 + C17034) * C48017) * C48206 *
               C31851 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48305 * C6404) *
                C116 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48305 * C6408) *
                C48017) *
               C48206 * C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C1672 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C1669 -
            (C32194 + C32195) * C1673 - (C32196 + C32197) * C1670 +
            (C32198 + C32199) * C1674 + (C32200 + C32201) * C48321) *
               C48206 * C31851 +
           ((C32195 + C32194) * C1672 + (C32197 + C32196) * C1669 -
            (C32199 + C32198) * C1673 - (C32201 + C32200) * C1670 +
            (C15917 * C1859 + C15913 * C1865 + C15918 * C1858 +
             C48305 * C1864) *
                C1674 +
            (C15917 * C1868 + C15913 * C1877 + C15918 * C1867 +
             C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48354 +
          (((C32202 + C32203) * C1673 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C1669 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C1672) +
            (C32204 + C32205) * C1670 - (C32206 + C32207) * C1674 -
            (C32208 + C32209) * C48321) *
               C48206 * C31851 +
           ((C32207 + C32206) * C1673 -
            ((C32205 + C32204) * C1669 + (C32203 + C32202) * C1672) +
            (C32209 + C32208) * C1670 -
            (C15918 * C1857 + C48305 * C1863 + C15917 * C1858 +
             C15913 * C1864) *
                C1674 -
            (C15918 * C1866 + C48305 * C1875 + C15917 * C1867 +
             C15913 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48341 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C1672 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C1669 -
            (C32210 + C32211) * C1673 - (C32212 + C32213) * C1670 +
            (C32214 + C32215) * C1674 + (C32216 + C32217) * C48321) *
               C48206 * C31851 +
           ((C32211 + C32210) * C1672 + (C32213 + C32212) * C1669 -
            (C32215 + C32214) * C1673 - (C32217 + C32216) * C1670 +
            (C15917 * C1857 + C15913 * C1863 + C15918 * C2137 +
             C48305 * C2138) *
                C1674 +
            (C15917 * C1866 + C15913 * C1875 + C15918 * C2139 +
             C48305 * C2140) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C1672 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C1669 -
            (C32194 + C32195) * C1673 - (C32196 + C32197) * C1670 +
            (C32198 + C32199) * C1674 + (C32200 + C32201) * C48321) *
               C48206 * C31851 +
           ((C32195 + C32194) * C1672 + (C32197 + C32196) * C1669 -
            (C32199 + C32198) * C1673 - (C32201 + C32200) * C1670 +
            (C15917 * C1859 + C15913 * C1865 + C15918 * C1858 +
             C48305 * C1864) *
                C1674 +
            (C15917 * C1868 + C15913 * C1877 + C15918 * C1867 +
             C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48357 +
          (((C16775 + C16774) * C1673 -
            ((C16117 + C16116) * C1669 + (C16115 + C16114) * C1672) +
            (C16777 + C16776) * C1670 - (C17209 + C17208) * C1674 -
            (C17211 + C17210) * C48321) *
               C48206 * C31851 +
           ((C17208 + C17209) * C1673 -
            ((C16776 + C16777) * C1669 + (C16774 + C16775) * C1672) +
            (C17210 + C17211) * C1670 - (C18558 + C18559) * C1674 -
            (C18560 + C18561) * C48321) *
               C48206 * C48338) *
              C48345 +
          (((C16121 + C16120) * C1672 + (C16119 + C16118) * C1669 -
            (C17213 + C17212) * C1673 - (C17215 + C17214) * C1670 +
            (C17217 + C17216) * C1674 + (C17219 + C17218) * C48321) *
               C48206 * C31851 +
           ((C17212 + C17213) * C1672 + (C17214 + C17215) * C1669 -
            (C17216 + C17217) * C1673 - (C17218 + C17219) * C1670 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48305 * C7272) *
                C1674 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48305 * C7276) *
                C48321) *
               C48206 * C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C32194 + C32195) * C3114 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C3113 + (C32197 + C32196) * C3111 -
             (C32199 + C32198) * C3114 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C3114 -
             ((C16776 + C16777) * C3111 + (C16774 + C16775) * C3113) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C48062) *
              C47978 +
          ((((C32202 + C32203) * C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C3114 -
             ((C32205 + C32204) * C3111 + (C32203 + C32202) * C3113) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C3113 + (C16780 + C16781) * C3111 -
             (C18286 + C18287) * C3114 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C48062) *
              C47986 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C3113 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C3111 -
             (C32210 + C32211) * C3114 - (C32212 + C32213) * C48104) *
                C48206 * C31851 +
            ((C32211 + C32210) * C3113 + (C32213 + C32212) * C3111 -
             (C32215 + C32214) * C3114 - (C32217 + C32216) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C16783 + C16782) * C3114 -
             ((C16133 + C16132) * C3111 + (C16131 + C16130) * C3113) +
             (C16785 + C16784) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
              C48305 * C2028) *
                 C3114 -
             ((C16784 + C16785) * C3111 + (C16782 + C16783) * C3113) +
             (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
              C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C47032 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48100 -
             (C32194 + C32195) * C47024 - (C32196 + C32197) * C48107 +
             (C32198 + C32199) * C47038 + (C32200 + C32201) * C3625) *
                C48206 * C31851 +
            ((C32195 + C32194) * C47032 + (C32197 + C32196) * C48100 -
             (C32199 + C32198) * C47024 - (C32201 + C32200) * C48107 +
             (C33903 + C33902) * C47038 + (C33905 + C33904) * C3625) *
                C48206 * C48338) *
               C48286 +
           (((C16775 + C16774) * C47024 -
             ((C16117 + C16116) * C48100 + (C16115 + C16114) * C47032) +
             (C16777 + C16776) * C48107 - (C17209 + C17208) * C47038 -
             (C17211 + C17210) * C3625) *
                C48206 * C31851 +
            ((C17208 + C17209) * C47024 -
             ((C16776 + C16777) * C48100 + (C16774 + C16775) * C47032) +
             (C17210 + C17211) * C48107 - (C18558 + C18559) * C47038 -
             (C18560 + C18561) * C3625) *
                C48206 * C48338) *
               C48062) *
              C2457 +
          ((((C32202 + C32203) * C47024 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48100 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C47032) +
             (C32204 + C32205) * C48107 - (C32206 + C32207) * C47038 -
             (C32208 + C32209) * C3625) *
                C48206 * C31851 +
            ((C32207 + C32206) * C47024 -
             ((C32205 + C32204) * C48100 + (C32203 + C32202) * C47032) +
             (C32209 + C32208) * C48107 - (C34243 + C34242) * C47038 -
             (C34245 + C34244) * C3625) *
                C48206 * C48338) *
               C48286 +
           (((C16122 + C16123) * C47032 + (C16124 + C16125) * C48100 -
             (C16779 + C16778) * C47024 - (C16781 + C16780) * C48107 +
             (C18287 + C18286) * C47038 + (C18289 + C18288) * C3625) *
                C48206 * C31851 +
            ((C16778 + C16779) * C47032 + (C16780 + C16781) * C48100 -
             (C18286 + C18287) * C47024 - (C18288 + C18289) * C48107 +
             (C15917 * C2240 + C15913 * C2243 + C15918 * C2241 +
              C48305 * C2244) *
                 C47038 +
             (C15917 * C2246 + C15913 * C2249 + C15918 * C2247 +
              C48305 * C2250) *
                 C3625) *
                C48206 * C48338) *
               C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C32194 + C32195) * C3114 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C3113 + (C32197 + C32196) * C3111 -
             (C32199 + C32198) * C3114 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C48357 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C3114 -
             ((C16776 + C16777) * C3111 + (C16774 + C16775) * C3113) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C48345 +
           (((C16121 + C16120) * C3113 + (C16119 + C16118) * C3111 -
             (C17213 + C17212) * C3114 - (C17215 + C17214) * C48104) *
                C48206 * C31851 +
            ((C17212 + C17213) * C3113 + (C17214 + C17215) * C3111 -
             (C17216 + C17217) * C3114 - (C17218 + C17219) * C48104) *
                C48206 * C48338) *
               C48318) *
              C2457 +
          ((((C32202 + C32203) * C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C3114 -
             ((C32205 + C32204) * C3111 + (C32203 + C32202) * C3113) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C48357 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C3113 + (C16780 + C16781) * C3111 -
             (C18286 + C18287) * C3114 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C48345 +
           (((C17565 + C17564) * C3114 -
             ((C16129 + C16128) * C3111 + (C16127 + C16126) * C3113) +
             (C17567 + C17566) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1162 + C15913 * C1177 + C15918 * C1163 +
              C48305 * C1178) *
                 C3114 -
             ((C17566 + C17567) * C3111 + (C17564 + C17565) * C3113) +
             (C15917 * C1180 + C15913 * C1189 + C15918 * C1181 +
              C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3113 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C3111 -
            (C32194 + C32195) * C3114 - (C32196 + C32197) * C48104) *
               C48206 * C31851 +
           ((C32195 + C32194) * C3113 + (C32197 + C32196) * C3111 -
            (C32199 + C32198) * C3114 - (C32201 + C32200) * C48104) *
               C48206 * C48338) *
              C48000 * C48363 +
          (((C32202 + C32203) * C3114 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C3111 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C3113) +
            (C32204 + C32205) * C48104) *
               C48206 * C31851 +
           ((C32207 + C32206) * C3114 -
            ((C32205 + C32204) * C3111 + (C32203 + C32202) * C3113) +
            (C32209 + C32208) * C48104) *
               C48206 * C48338) *
              C48000 * C48356 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C3113 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C3111 -
            (C32210 + C32211) * C3114 - (C32212 + C32213) * C48104) *
               C48206 * C31851 +
           ((C32211 + C32210) * C3113 + (C32213 + C32212) * C3111 -
            (C32215 + C32214) * C3114 - (C32217 + C32216) * C48104) *
               C48206 * C48338) *
              C48000 * C48343 +
          (((C32486 + C32487) * C3114 -
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C3111 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C3113) +
            (C32488 + C32489) * C48104) *
               C48206 * C31851 +
           ((C15917 * C424 + C15913 * C441 + C15918 * C426 + C48305 * C445) *
                C3114 -
            ((C32489 + C32488) * C3111 + (C32487 + C32486) * C3113) +
            (C15917 * C442 + C15913 * C454 + C15918 * C446 + C48305 * C456) *
                C48104) *
               C48206 * C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3363 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48365 -
            (C32194 + C32195) * C3364 - (C32196 + C32197) * C48362 +
            (C32198 + C32199) * C3365 + (C32200 + C32201) * C48353 -
            (C33902 + C33903) * C3366 - (C33904 + C33905) * C48334) *
               C48206 * C31851 +
           ((C32195 + C32194) * C3363 + (C32197 + C32196) * C48365 -
            (C32199 + C32198) * C3364 - (C32201 + C32200) * C48362 +
            (C33903 + C33902) * C3365 + (C33905 + C33904) * C48353 -
            (C33907 + C33906) * C3366 - (C33909 + C33908) * C48334) *
               C48206 * C48338) *
              C48000 * C2457 +
          (((C32202 + C32203) * C3364 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48365 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C3363) +
            (C32204 + C32205) * C48362 - (C32206 + C32207) * C3365 -
            (C32208 + C32209) * C48353 + (C34242 + C34243) * C3366 +
            (C34244 + C34245) * C48334) *
               C48206 * C31851 +
           ((C32207 + C32206) * C3364 -
            ((C32205 + C32204) * C48365 + (C32203 + C32202) * C3363) +
            (C32209 + C32208) * C48362 - (C34243 + C34242) * C3365 -
            (C34245 + C34244) * C48353 +
            (C15917 * C1861 + C15913 * C1870 + C15918 * C1862 +
             C48305 * C1871) *
                C3366 +
            (C15917 * C1873 + C15913 * C1879 + C15918 * C1874 +
             C48305 * C1880) *
                C48334) *
               C48206 * C48338) *
              C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C47032 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48100 -
            (C32194 + C32195) * C47024 - (C32196 + C32197) * C48107 +
            (C32198 + C32199) * C47038 + (C32200 + C32201) * C3625) *
               C48206 * C31851 +
           ((C32195 + C32194) * C47032 + (C32197 + C32196) * C48100 -
            (C32199 + C32198) * C47024 - (C32201 + C32200) * C48107 +
            (C33903 + C33902) * C47038 + (C33905 + C33904) * C3625) *
               C48206 * C48338) *
              C48000 * C47978 +
          (((C32202 + C32203) * C47024 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48100 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C47032) +
            (C32204 + C32205) * C48107 - (C32206 + C32207) * C47038 -
            (C32208 + C32209) * C3625) *
               C48206 * C31851 +
           ((C32207 + C32206) * C47024 -
            ((C32205 + C32204) * C48100 + (C32203 + C32202) * C47032) +
            (C32209 + C32208) * C48107 - (C34243 + C34242) * C47038 -
            (C34245 + C34244) * C3625) *
               C48206 * C48338) *
              C48000 * C47986 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C47032 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48100 -
            (C32210 + C32211) * C47024 - (C32212 + C32213) * C48107 +
            (C32214 + C32215) * C47038 + (C32216 + C32217) * C3625) *
               C48206 * C31851 +
           ((C32211 + C32210) * C47032 + (C32213 + C32212) * C48100 -
            (C32215 + C32214) * C47024 - (C32217 + C32216) * C48107 +
            (C15917 * C1857 + C15913 * C1863 + C15918 * C2137 +
             C48305 * C2138) *
                C47038 +
            (C15917 * C1866 + C15913 * C1875 + C15918 * C2139 +
             C48305 * C2140) *
                C3625) *
               C48206 * C48338) *
              C48000 * C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C3113 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C3111 -
            (C32194 + C32195) * C3114 - (C32196 + C32197) * C48104) *
               C48206 * C31851 +
           ((C32195 + C32194) * C3113 + (C32197 + C32196) * C3111 -
            (C32199 + C32198) * C3114 - (C32201 + C32200) * C48104) *
               C48206 * C48338) *
              C48000 * C48363 +
          (((C32202 + C32203) * C3114 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C3111 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C3113) +
            (C32204 + C32205) * C48104) *
               C48206 * C31851 +
           ((C32207 + C32206) * C3114 -
            ((C32205 + C32204) * C3111 + (C32203 + C32202) * C3113) +
            (C32209 + C32208) * C48104) *
               C48206 * C48338) *
              C48000 * C48356 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C3113 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C3111 -
            (C32210 + C32211) * C3114 - (C32212 + C32213) * C48104) *
               C48206 * C31851 +
           ((C32211 + C32210) * C3113 + (C32213 + C32212) * C3111 -
            (C32215 + C32214) * C3114 - (C32217 + C32216) * C48104) *
               C48206 * C48338) *
              C48000 * C48343 +
          (((C32486 + C32487) * C3114 -
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C3111 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C3113) +
            (C32488 + C32489) * C48104) *
               C48206 * C31851 +
           ((C15917 * C424 + C15913 * C441 + C15918 * C426 + C48305 * C445) *
                C3114 -
            ((C32489 + C32488) * C3111 + (C32487 + C32486) * C3113) +
            (C15917 * C442 + C15913 * C454 + C15918 * C446 + C48305 * C456) *
                C48104) *
               C48206 * C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C3113 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C3111 -
             (C32194 + C32195) * C3114 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C3113 + (C32197 + C32196) * C3111 -
             (C32199 + C32198) * C3114 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C48357 +
           (((C16775 + C16774) * C3114 -
             ((C16117 + C16116) * C3111 + (C16115 + C16114) * C3113) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C3114 -
             ((C16776 + C16777) * C3111 + (C16774 + C16775) * C3113) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C48345 +
           (((C16121 + C16120) * C3113 + (C16119 + C16118) * C3111 -
             (C17213 + C17212) * C3114 - (C17215 + C17214) * C48104) *
                C48206 * C31851 +
            ((C17212 + C17213) * C3113 + (C17214 + C17215) * C3111 -
             (C17216 + C17217) * C3114 - (C17218 + C17219) * C48104) *
                C48206 * C48338) *
               C48318) *
              C2457 +
          ((((C32202 + C32203) * C3114 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C3111 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C3113) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C3114 -
             ((C32205 + C32204) * C3111 + (C32203 + C32202) * C3113) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C48357 +
           (((C16122 + C16123) * C3113 + (C16124 + C16125) * C3111 -
             (C16779 + C16778) * C3114 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C3113 + (C16780 + C16781) * C3111 -
             (C18286 + C18287) * C3114 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C48345 +
           (((C17565 + C17564) * C3114 -
             ((C16129 + C16128) * C3111 + (C16127 + C16126) * C3113) +
             (C17567 + C17566) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1162 + C15913 * C1177 + C15918 * C1163 +
              C48305 * C1178) *
                 C3114 -
             ((C17566 + C17567) * C3111 + (C17564 + C17565) * C3113) +
             (C15917 * C1180 + C15913 * C1189 + C15918 * C1181 +
              C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C48286 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C48062) *
              C557 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C48062 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C48286) *
              C558 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C32211 + C32210) * C116 + (C32213 + C32212) * C48017) * C48206 *
                C48338) *
               C48286 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C48062) *
              C559 +
          ((((C16422 + C16423) * C116 + (C16424 + C16425) * C48017) * C48206 *
                C31851 +
            ((C15917 * C820 + C15913 * C828 + C15918 * C821 + C48305 * C830) *
                 C116 +
             (C15917 * C829 + C15913 * C835 + C15918 * C831 + C48305 * C836) *
                 C48017) *
                C48206 * C48338) *
               C48062 -
           (((C15918 * C444 + C48305 * C455 + C15917 * C440 + C15913 * C453) *
                 C48017 +
             (C15918 * C425 + C48305 * C443 + C15917 * C423 + C15913 * C439) *
                 C116) *
                C48206 * C48338 +
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48017 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C116) *
                C48206 * C31851) *
               C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C1289 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C1290 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C1291 -
           (((C17708 + C17709) * C48017 + (C17706 + C17707) * C116) * C48206 *
                C48338 +
            ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C48206 *
                C31851) *
               C48328) *
              C48272 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C1290 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C1289 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C1291 +
           (((C17361 + C17360) * C116 + (C17359 + C17358) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1548 + C15913 * C1551 + C15918 * C1549 +
              C48305 * C1552) *
                 C116 +
             (C15917 * C1554 + C15913 * C1557 + C15918 * C1555 +
              C48305 * C1558) *
                 C48017) *
                C48206 * C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C32194 + C32195) * C666 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C665 + (C32197 + C32196) * C48287 -
             (C32199 + C32198) * C666 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C666 -
             ((C16776 + C16777) * C48287 + (C16774 + C16775) * C665) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C48062) *
              C258 +
          ((((C32202 + C32203) * C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C666 -
             ((C32205 + C32204) * C48287 + (C32203 + C32202) * C665) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C665 + (C16780 + C16781) * C48287 -
             (C18286 + C18287) * C666 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C48062) *
              C259 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C665 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48287 -
             (C32210 + C32211) * C666 - (C32212 + C32213) * C48104) *
                C48206 * C31851 +
            ((C32211 + C32210) * C665 + (C32213 + C32212) * C48287 -
             (C32215 + C32214) * C666 - (C32217 + C32216) * C48104) *
                C48206 * C48338) *
               C48286 +
           (((C16783 + C16782) * C666 -
             ((C16133 + C16132) * C48287 + (C16131 + C16130) * C665) +
             (C16785 + C16784) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1155 + C15913 * C1164 + C15918 * C2027 +
              C48305 * C2028) *
                 C666 -
             ((C16784 + C16785) * C48287 + (C16782 + C16783) * C665) +
             (C15917 * C1167 + C15913 * C1182 + C15918 * C2029 +
              C48305 * C2030) *
                 C48104) *
                C48206 * C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C665 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48287 -
            (C32194 + C32195) * C666 - (C32196 + C32197) * C48104) *
               C48206 * C31851 +
           ((C32195 + C32194) * C665 + (C32197 + C32196) * C48287 -
            (C32199 + C32198) * C666 - (C32201 + C32200) * C48104) *
               C48206 * C48338) *
              C1289 +
          (((C16775 + C16774) * C666 -
            ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
            (C16777 + C16776) * C48104) *
               C48206 * C31851 +
           ((C17208 + C17209) * C666 -
            ((C16776 + C16777) * C48287 + (C16774 + C16775) * C665) +
            (C17210 + C17211) * C48104) *
               C48206 * C48338) *
              C1290 +
          (((C16121 + C16120) * C665 + (C16119 + C16118) * C48287 -
            (C17213 + C17212) * C666 - (C17215 + C17214) * C48104) *
               C48206 * C31851 +
           ((C17212 + C17213) * C665 + (C17214 + C17215) * C48287 -
            (C17216 + C17217) * C666 - (C17218 + C17219) * C48104) *
               C48206 * C48338) *
              C1291 +
          (((C17707 + C17706) * C666 -
            ((C17033 + C17032) * C48287 + (C17031 + C17030) * C665) +
            (C17709 + C17708) * C48104) *
               C48206 * C31851 +
           ((C15917 * C5879 + C15913 * C5881 + C15918 * C5880 +
             C48305 * C5882) *
                C666 -
            ((C17708 + C17709) * C48287 + (C17706 + C17707) * C665) +
            (C15917 * C5883 + C15913 * C5885 + C15918 * C5884 +
             C48305 * C5886) *
                C48104) *
               C48206 * C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C15917 * C419 + C15913 * C429 + C15918 * C418 + C48305 * C428) *
                 C116 +
             (C15917 * C432 + C15913 * C449 + C15918 * C431 + C48305 * C448) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C48345 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C48318) *
              C258 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C48345 -
           (((C15918 * C430 + C48305 * C447 + C15917 * C431 + C15913 * C448) *
                 C48017 +
             (C15918 * C417 + C48305 * C427 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C48206 * C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C48357 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C48318) *
              C259 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C15917 * C417 + C15913 * C427 + C15918 * C423 + C48305 * C439) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C440 + C48305 * C453) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C48345 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C116 +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C31851 +
           ((C15917 * C419 + C15913 * C429 + C15918 * C418 + C48305 * C428) *
                C116 +
            (C15917 * C432 + C15913 * C449 + C15918 * C431 + C48305 * C448) *
                C48017) *
               C48206 * C48338) *
              C48000 * C108 -
          (((C15918 * C430 + C48305 * C447 + C15917 * C431 + C15913 * C448) *
                C48017 +
            (C15918 * C417 + C48305 * C427 + C15917 * C418 + C15913 * C428) *
                C116) *
               C48206 * C48338 +
           ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                C48017 +
            (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C48206 * C31851) *
              C48000 * C109 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48017) *
               C48206 * C31851 +
           ((C15917 * C417 + C15913 * C427 + C15918 * C423 + C48305 * C439) *
                C116 +
            (C15917 * C430 + C15913 * C447 + C15918 * C440 + C48305 * C453) *
                C48017) *
               C48206 * C48338) *
              C48000 * C110 -
          (((C15918 * C444 + C48305 * C455 + C15917 * C440 + C15913 * C453) *
                C48017 +
            (C15918 * C425 + C48305 * C443 + C15917 * C423 + C15913 * C439) *
                C116) *
               C48206 * C48338 +
           ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                C48017 +
            (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C48206 * C31851) *
              C48000 * C111 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48305 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48305 * C143) *
                C48017) *
               C48206 * C31851 +
           ((C15917 * C425 + C15913 * C443 + C15918 * C667 + C48305 * C668) *
                C116 +
            (C15917 * C444 + C15913 * C455 + C15918 * C669 + C48305 * C670) *
                C48017) *
               C48206 * C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C414 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48358 -
            (C32194 + C32195) * C415 - (C32196 + C32197) * C48347 +
            (C32198 + C32199) * C416 + (C32200 + C32201) * C48321) *
               C48206 * C31851 +
           ((C32195 + C32194) * C414 + (C32197 + C32196) * C48358 -
            (C32199 + C32198) * C415 - (C32201 + C32200) * C48347 +
            (C15917 * C1859 + C15913 * C1865 + C15918 * C1858 +
             C48305 * C1864) *
                C416 +
            (C15917 * C1868 + C15913 * C1877 + C15918 * C1867 +
             C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C258 +
          (((C32202 + C32203) * C415 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48358 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C414) +
            (C32204 + C32205) * C48347 - (C32206 + C32207) * C416 -
            (C32208 + C32209) * C48321) *
               C48206 * C31851 +
           ((C32207 + C32206) * C415 -
            ((C32205 + C32204) * C48358 + (C32203 + C32202) * C414) +
            (C32209 + C32208) * C48347 -
            (C15918 * C1857 + C48305 * C1863 + C15917 * C1858 +
             C15913 * C1864) *
                C416 -
            (C15918 * C1866 + C48305 * C1875 + C15917 * C1867 +
             C15913 * C1876) *
                C48321) *
               C48206 * C48338) *
              C48000 * C259 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C414 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48358 -
            (C32210 + C32211) * C415 - (C32212 + C32213) * C48347 +
            (C32214 + C32215) * C416 + (C32216 + C32217) * C48321) *
               C48206 * C31851 +
           ((C32211 + C32210) * C414 + (C32213 + C32212) * C48358 -
            (C32215 + C32214) * C415 - (C32217 + C32216) * C48347 +
            (C15917 * C1857 + C15913 * C1863 + C15918 * C2137 +
             C48305 * C2138) *
                C416 +
            (C15917 * C1866 + C15913 * C1875 + C15918 * C2139 +
             C48305 * C2140) *
                C48321) *
               C48206 * C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C948 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C48318) *
              C48354 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C948 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C947 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C48318) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C32211 + C32210) * C116 + (C32213 + C32212) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C948 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C116 +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C31851 +
           ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
               C48338) *
              C1015 -
          (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
               C48338 +
           ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
               C31851) *
              C1016 +
          (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
               C31851 +
           ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
               C48338) *
              C1017 -
          (((C17708 + C17709) * C48017 + (C17706 + C17707) * C116) * C48206 *
               C48338 +
           ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C48206 *
               C31851) *
              C1018 +
          (((C17037 + C17036) * C116 + (C17035 + C17034) * C48017) * C48206 *
               C31851 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48305 * C6404) *
                C116 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48305 * C6408) *
                C48017) *
               C48206 * C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C414 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48358 -
            (C32194 + C32195) * C415 - (C32196 + C32197) * C48347 +
            (C32198 + C32199) * C416 + (C32200 + C32201) * C48321) *
               C48206 * C31851 +
           ((C32195 + C32194) * C414 + (C32197 + C32196) * C48358 -
            (C32199 + C32198) * C415 - (C32201 + C32200) * C48347 +
            (C15917 * C1859 + C15913 * C1865 + C15918 * C1858 +
             C48305 * C1864) *
                C416 +
            (C15917 * C1868 + C15913 * C1877 + C15918 * C1867 +
             C48305 * C1876) *
                C48321) *
               C48206 * C48338) *
              C947 +
          (((C16775 + C16774) * C415 -
            ((C16117 + C16116) * C48358 + (C16115 + C16114) * C414) +
            (C16777 + C16776) * C48347 - (C17209 + C17208) * C416 -
            (C17211 + C17210) * C48321) *
               C48206 * C31851 +
           ((C17208 + C17209) * C415 -
            ((C16776 + C16777) * C48358 + (C16774 + C16775) * C414) +
            (C17210 + C17211) * C48347 - (C18558 + C18559) * C416 -
            (C18560 + C18561) * C48321) *
               C48206 * C48338) *
              C948 +
          (((C16121 + C16120) * C414 + (C16119 + C16118) * C48358 -
            (C17213 + C17212) * C415 - (C17215 + C17214) * C48347 +
            (C17217 + C17216) * C416 + (C17219 + C17218) * C48321) *
               C48206 * C31851 +
           ((C17212 + C17213) * C414 + (C17214 + C17215) * C48358 -
            (C17216 + C17217) * C415 - (C17218 + C17219) * C48347 +
            (C15917 * C7269 + C15913 * C7271 + C15918 * C7270 +
             C48305 * C7272) *
                C416 +
            (C15917 * C7273 + C15913 * C7275 + C15918 * C7274 +
             C48305 * C7276) *
                C48321) *
               C48206 * C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C665 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48287 -
            (C32194 + C32195) * C666 - (C32196 + C32197) * C48104) *
               C48206 * C31851 +
           ((C32195 + C32194) * C665 + (C32197 + C32196) * C48287 -
            (C32199 + C32198) * C666 - (C32201 + C32200) * C48104) *
               C48206 * C48338) *
              C48000 * C557 +
          (((C32202 + C32203) * C666 -
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48287 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C665) +
            (C32204 + C32205) * C48104) *
               C48206 * C31851 +
           ((C32207 + C32206) * C666 -
            ((C32205 + C32204) * C48287 + (C32203 + C32202) * C665) +
            (C32209 + C32208) * C48104) *
               C48206 * C48338) *
              C48000 * C558 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C665 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48287 -
            (C32210 + C32211) * C666 - (C32212 + C32213) * C48104) *
               C48206 * C31851 +
           ((C32211 + C32210) * C665 + (C32213 + C32212) * C48287 -
            (C32215 + C32214) * C666 - (C32217 + C32216) * C48104) *
               C48206 * C48338) *
              C48000 * C559 +
          (((C32486 + C32487) * C666 -
            ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                 C48287 +
             (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                 C665) +
            (C32488 + C32489) * C48104) *
               C48206 * C31851 +
           ((C15917 * C424 + C15913 * C441 + C15918 * C426 + C48305 * C445) *
                C666 -
            ((C32489 + C32488) * C48287 + (C32487 + C32486) * C665) +
            (C15917 * C442 + C15913 * C454 + C15918 * C446 + C48305 * C456) *
                C48104) *
               C48206 * C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C665 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48287 -
             (C32194 + C32195) * C666 - (C32196 + C32197) * C48104) *
                C48206 * C31851 +
            ((C32195 + C32194) * C665 + (C32197 + C32196) * C48287 -
             (C32199 + C32198) * C666 - (C32201 + C32200) * C48104) *
                C48206 * C48338) *
               C947 +
           (((C16775 + C16774) * C666 -
             ((C16117 + C16116) * C48287 + (C16115 + C16114) * C665) +
             (C16777 + C16776) * C48104) *
                C48206 * C31851 +
            ((C17208 + C17209) * C666 -
             ((C16776 + C16777) * C48287 + (C16774 + C16775) * C665) +
             (C17210 + C17211) * C48104) *
                C48206 * C48338) *
               C948 +
           (((C16121 + C16120) * C665 + (C16119 + C16118) * C48287 -
             (C17213 + C17212) * C666 - (C17215 + C17214) * C48104) *
                C48206 * C31851 +
            ((C17212 + C17213) * C665 + (C17214 + C17215) * C48287 -
             (C17216 + C17217) * C666 - (C17218 + C17219) * C48104) *
                C48206 * C48338) *
               C48318) *
              C48272 +
          ((((C32202 + C32203) * C666 -
             ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                  C48287 +
              (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                  C665) +
             (C32204 + C32205) * C48104) *
                C48206 * C31851 +
            ((C32207 + C32206) * C666 -
             ((C32205 + C32204) * C48287 + (C32203 + C32202) * C665) +
             (C32209 + C32208) * C48104) *
                C48206 * C48338) *
               C947 +
           (((C16122 + C16123) * C665 + (C16124 + C16125) * C48287 -
             (C16779 + C16778) * C666 - (C16781 + C16780) * C48104) *
                C48206 * C31851 +
            ((C16778 + C16779) * C665 + (C16780 + C16781) * C48287 -
             (C18286 + C18287) * C666 - (C18288 + C18289) * C48104) *
                C48206 * C48338) *
               C948 +
           (((C17565 + C17564) * C666 -
             ((C16129 + C16128) * C48287 + (C16127 + C16126) * C665) +
             (C17567 + C17566) * C48104) *
                C48206 * C31851 +
            ((C15917 * C1162 + C15913 * C1177 + C15918 * C1163 +
              C48305 * C1178) *
                 C666 -
             ((C17566 + C17567) * C48287 + (C17564 + C17565) * C665) +
             (C15917 * C1180 + C15913 * C1189 + C15918 * C1181 +
              C48305 * C1190) *
                 C48104) *
                C48206 * C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C31851 +
           ((C15917 * C419 + C15913 * C429 + C15918 * C418 + C48305 * C428) *
                C116 +
            (C15917 * C432 + C15913 * C449 + C15918 * C431 + C48305 * C448) *
                C48017) *
               C48206 * C48338) *
              C48000 * C108 -
          (((C15918 * C430 + C48305 * C447 + C15917 * C431 + C15913 * C448) *
                C48017 +
            (C15918 * C417 + C48305 * C427 + C15917 * C418 + C15913 * C428) *
                C116) *
               C48206 * C48338 +
           ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                C48017 +
            (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                C116) *
               C48206 * C31851) *
              C48000 * C109 +
          (((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                C116 +
            (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                C48017) *
               C48206 * C31851 +
           ((C15917 * C417 + C15913 * C427 + C15918 * C423 + C48305 * C439) *
                C116 +
            (C15917 * C430 + C15913 * C447 + C15918 * C440 + C48305 * C453) *
                C48017) *
               C48206 * C48338) *
              C48000 * C110 -
          (((C15918 * C444 + C48305 * C455 + C15917 * C440 + C15913 * C453) *
                C48017 +
            (C15918 * C425 + C48305 * C443 + C15917 * C423 + C15913 * C439) *
                C116) *
               C48206 * C48338 +
           ((C15918 * C133 + C48305 * C142 + C15917 * C130 + C15913 * C141) *
                C48017 +
            (C15918 * C121 + C48305 * C132 + C15917 * C120 + C15913 * C131) *
                C116) *
               C48206 * C31851) *
              C48000 * C111 +
          (((C15917 * C121 + C15913 * C132 + C15918 * C122 + C48305 * C135) *
                C116 +
            (C15917 * C133 + C15913 * C142 + C15918 * C134 + C48305 * C143) *
                C48017) *
               C48206 * C31851 +
           ((C15917 * C425 + C15913 * C443 + C15918 * C667 + C48305 * C668) *
                C116 +
            (C15917 * C444 + C15913 * C455 + C15918 * C669 + C48305 * C670) *
                C48017) *
               C48206 * C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C15917 * C419 + C15913 * C429 + C15918 * C418 + C48305 * C428) *
                 C116 +
             (C15917 * C432 + C15913 * C449 + C15918 * C431 + C48305 * C448) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C48345 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C48318) *
              C258 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C48345 -
           (((C15918 * C430 + C48305 * C447 + C15917 * C431 + C15913 * C448) *
                 C48017 +
             (C15918 * C417 + C48305 * C427 + C15917 * C418 + C15913 * C428) *
                 C116) *
                C48206 * C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C48357 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C48318) *
              C259 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C15917 * C417 + C15913 * C427 + C15918 * C423 + C48305 * C439) *
                 C116 +
             (C15917 * C430 + C15913 * C447 + C15918 * C440 + C48305 * C453) *
                 C48017) *
                C48206 * C48338) *
               C48357 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C48345 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C116 +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                 C116 +
             (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                 C48017) *
                C48206 * C31851 +
            ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
                C48338 +
            ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
                C31851) *
               C948 +
           (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
                C31851 +
            ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
                C48338) *
               C48318) *
              C48354 +
          ((((C16122 + C16123) * C116 + (C16124 + C16125) * C48017) * C48206 *
                C31851 +
            ((C16778 + C16779) * C116 + (C16780 + C16781) * C48017) * C48206 *
                C48338) *
               C948 -
           (((C32205 + C32204) * C48017 + (C32203 + C32202) * C116) * C48206 *
                C48338 +
            ((C15918 * C129 + C48305 * C140 + C15917 * C128 + C15913 * C139) *
                 C48017 +
             (C15918 * C119 + C48305 * C126 + C15917 * C118 + C15913 * C125) *
                 C116) *
                C48206 * C31851) *
               C947 -
           (((C17566 + C17567) * C48017 + (C17564 + C17565) * C116) * C48206 *
                C48338 +
            ((C16129 + C16128) * C48017 + (C16127 + C16126) * C116) * C48206 *
                C31851) *
               C48318) *
              C48341 +
          ((((C15917 * C119 + C15913 * C126 + C15918 * C120 + C48305 * C131) *
                 C116 +
             (C15917 * C129 + C15913 * C140 + C15918 * C130 + C48305 * C141) *
                 C48017) *
                C48206 * C31851 +
            ((C32211 + C32210) * C116 + (C32213 + C32212) * C48017) * C48206 *
                C48338) *
               C947 -
           (((C16784 + C16785) * C48017 + (C16782 + C16783) * C116) * C48206 *
                C48338 +
            ((C16133 + C16132) * C48017 + (C16131 + C16130) * C116) * C48206 *
                C31851) *
               C948 +
           (((C16137 + C16136) * C116 + (C16135 + C16134) * C48017) * C48206 *
                C31851 +
            ((C15917 * C1158 + C15913 * C1170 + C15918 * C1445 +
              C48305 * C1446) *
                 C116 +
             (C15917 * C1173 + C15913 * C1185 + C15918 * C1447 +
              C48305 * C1448) *
                 C48017) *
                C48206 * C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C15917 * C117 + C15913 * C124 + C15918 * C118 + C48305 * C125) *
                C116 +
            (C15917 * C127 + C15913 * C138 + C15918 * C128 + C48305 * C139) *
                C48017) *
               C48206 * C31851 +
           ((C32195 + C32194) * C116 + (C32197 + C32196) * C48017) * C48206 *
               C48338) *
              C1015 -
          (((C16776 + C16777) * C48017 + (C16774 + C16775) * C116) * C48206 *
               C48338 +
           ((C16117 + C16116) * C48017 + (C16115 + C16114) * C116) * C48206 *
               C31851) *
              C1016 +
          (((C16121 + C16120) * C116 + (C16119 + C16118) * C48017) * C48206 *
               C31851 +
           ((C17212 + C17213) * C116 + (C17214 + C17215) * C48017) * C48206 *
               C48338) *
              C1017 -
          (((C17708 + C17709) * C48017 + (C17706 + C17707) * C116) * C48206 *
               C48338 +
           ((C17033 + C17032) * C48017 + (C17031 + C17030) * C116) * C48206 *
               C31851) *
              C1018 +
          (((C17037 + C17036) * C116 + (C17035 + C17034) * C48017) * C48206 *
               C31851 +
           ((C15917 * C6401 + C15913 * C6403 + C15918 * C6402 +
             C48305 * C6404) *
                C116 +
            (C15917 * C6405 + C15913 * C6407 + C15918 * C6406 +
             C48305 * C6408) *
                C48017) *
               C48206 * C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48058 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C48065 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C2717) *
              C47978 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C48065 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C48058 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C2717) *
              C47986 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48058 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C48065 +
           ((C21777 * C4603 + (C21774 + C21773) * C48336) * C31851 +
            ((C26335 + C26334) * C4603 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C2717) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C665 +
              (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
              C26511 * C48104) *
                 C4603 +
             (C22246 + C22247 - C22294 - C22295) * C48336) *
                C31851 +
            ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
              C26513 * C48104) *
                 C4603 +
             (C26992 + C26993 - C26994 - C26995) * C48336) *
                C48338) *
               C48058 +
           (((C22294 - (C22247 + C22246) + C22295) * C4603 +
             (C22296 - (C22253 + C22252) + C22297) * C48336) *
                C31851 +
            ((C26994 - (C26993 + C26992) + C26995) * C4603 +
             (C27720 - (C27721 + C27722) + C27723) * C48336) *
                C48338) *
               C48065 +
           ((C22930 * C4603 + (C22917 + C22916 - C22915 - C22918) * C48336) *
                C31851 +
            ((C27722 + C27721 - C27720 - C27723) * C4603 +
             (C27858 + C27859 - C27860 - C27861) * C48336) *
                C48338) *
               C2717) *
              C2457 +
          ((((C26514 * C666 -
              ((C21591 * C128 + C47950 * C139) * C48287 +
               (C21591 * C118 + C47950 * C125) * C665) +
              C26515 * C48104) *
                 C4603 +
             (C22298 - (C22260 + C22261) + C22299) * C48336) *
                C31851 +
            ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
              C26517 * C48104) *
                 C4603 +
             (C26996 - (C26997 + C26998) + C26999) * C48336) *
                C48338) *
               C48058 +
           (((C22261 + C22260 - C22298 - C22299) * C4603 +
             (C22267 + C22266 - C22300 - C22301) * C48336) *
                C31851 +
            ((C26998 + C26997 - C26996 - C26999) * C4603 +
             (C27724 + C27725 - C27726 - C27727) * C48336) *
                C48338) *
               C48065 +
           ((C22931 * C4603 + (C22932 - (C22921 + C22920) + C22933) * C48336) *
                C31851 +
            ((C27726 - (C27725 + C27724) + C27727) * C4603 +
             ((C21591 * C5880 + C47950 * C5882) * C666 -
              (C22929 * C48287 + C22928 * C665) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48364 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C48360 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C48350 -
           (((C27234 + C27235) * C48336 + (C27233 + C27232) * C4603) * C48338 +
            ((C22496 + C22495) * C48336 + C22482 * C4603) * C31851) *
               C48328) *
              C2457 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C48360 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C48364 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C48350 +
           ((C22759 * C4603 + (C22767 + C22766) * C48336) * C31851 +
            ((C27525 + C27524) * C4603 +
             ((C21591 * C6402 + C47950 * C6404) * C116 +
              (C21591 * C6406 + C47950 * C6408) * C48017) *
                 C48336) *
                C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C2349 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C48062) *
              C48363 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C48062 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C2349) *
              C48356 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C2349 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C48062) *
              C48343 +
          ((((C21998 + C21999) * C4603 + (C22000 + C22001) * C48336) * C31851 +
            ((C26660 + C26661) * C4603 +
             ((C21591 * C1445 + C47950 * C1446) * C116 +
              (C21591 * C1447 + C47950 * C1448) * C48017) *
                 C48336) *
                C48338) *
               C48062 -
           (((C26661 + C26660) * C48336 +
             (C26797 * C48017 + C26796 * C116) * C4603) *
                C48338 +
            ((C21999 + C21998) * C48336 +
             ((C21591 * C130 + C47950 * C141) * C48017 +
              (C21591 * C120 + C47950 * C131) * C116) *
                 C4603) *
                C31851) *
               C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C414 +
              (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
              C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                 C4603 +
             (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C48336) *
                C31851 +
            ((C26510 * C414 + C26511 * C48358 - C26512 * C415 -
              C26513 * C48347 + C28264 * C416 + C28265 * C48321) *
                 C4603 +
             (C27382 + C27383 - C27384 - C27385 + C27386 + C27387) * C48336) *
                C48338) *
               C2349 +
           (((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C4603 +
             (C22624 - (C22623 + C22622) + C22625 - C22652 - C22653) * C48336) *
                C31851 +
            ((C27384 - (C27383 + C27382) + C27385 - C27386 - C27387) * C4603 +
             (C27388 - (C27389 + C27390) + C27391 - C27392 - C27393) * C48336) *
                C48338) *
               C48062) *
              C2457 +
          ((((C26514 * C415 -
              ((C21591 * C128 + C47950 * C139) * C48358 +
               (C21591 * C118 + C47950 * C125) * C414) +
              C26515 * C48347 - C26516 * C416 - C26517 * C48321) *
                 C4603 +
             (C24098 - (C24099 + C24100) + C24101 - C24102 - C24103) * C48336) *
                C31851 +
            ((C26516 * C415 - (C26515 * C48358 + C26514 * C414) +
              C26517 * C48347 - C28610 * C416 - C28611 * C48321) *
                 C4603 +
             (C29204 - (C29205 + C29206) + C29207 - C29208 - C29209) * C48336) *
                C48338) *
               C2349 +
           (((C24100 + C24099 - C24098 - C24101 + C24102 + C24103) * C4603 +
             (C24106 + C24105 - C24104 - C24107 + C24108 + C24109) * C48336) *
                C31851 +
            ((C29206 + C29205 - C29204 - C29207 + C29208 + C29209) * C4603 +
             (C22288 * C414 + C22289 * C48358 - C23522 * C415 -
              C23523 * C48347 + (C21591 * C7270 + C47950 * C7272) * C416 +
              (C21591 * C7274 + C47950 * C7276) * C48321) *
                 C48336) *
                C48338) *
               C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47950 * C124) * C665 +
                       (C21591 * C127 + C47950 * C138) * C48287 -
                       C26510 * C666 - C26511 * C48104) *
                          C4603 +
                      (C22246 + C22247 - C22294 - C22295) * C48336) *
                         C31851 +
                     ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
                       C26513 * C48104) *
                          C4603 +
                      (C26992 + C26993 - C26994 - C26995) * C48336) *
                         C48338) *
                        C2349 +
                    (((C22294 - (C22247 + C22246) + C22295) * C4603 +
                      (C22296 - (C22253 + C22252) + C22297) * C48336) *
                         C31851 +
                     ((C26994 - (C26993 + C26992) + C26995) * C4603 +
                      (C27720 - (C27721 + C27722) + C27723) * C48336) *
                         C48338) *
                        C48062) *
                       C47978 +
                   ((((C26514 * C666 -
                       ((C21591 * C128 + C47950 * C139) * C48287 +
                        (C21591 * C118 + C47950 * C125) * C665) +
                       C26515 * C48104) *
                          C4603 +
                      (C22298 - (C22260 + C22261) + C22299) * C48336) *
                         C31851 +
                     ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
                       C26517 * C48104) *
                          C4603 +
                      (C26996 - (C26997 + C26998) + C26999) * C48336) *
                         C48338) *
                        C2349 +
                    (((C22261 + C22260 - C22298 - C22299) * C4603 +
                      (C22267 + C22266 - C22300 - C22301) * C48336) *
                         C31851 +
                     ((C26998 + C26997 - C26996 - C26999) * C4603 +
                      (C27724 + C27725 - C27726 - C27727) * C48336) *
                         C48338) *
                        C48062) *
                       C47986 +
                   (((((C21591 * C119 + C47950 * C126) * C665 +
                       (C21591 * C129 + C47950 * C140) * C48287 -
                       C26518 * C666 - C26519 * C48104) *
                          C4603 +
                      (C22270 + C22271 - C22302 - C22303) * C48336) *
                         C31851 +
                     ((C26518 * C665 + C26519 * C48287 - C26520 * C666 -
                       C26521 * C48104) *
                          C4603 +
                      (C27000 + C27001 - C27002 - C27003) * C48336) *
                         C48338) *
                        C2349 +
                    (((C22302 - (C22271 + C22270) + C22303) * C4603 +
                      (C22304 - (C22277 + C22276) + C22305) * C48336) *
                         C31851 +
                     ((C27002 - (C27001 + C27000) + C27003) * C4603 +
                      ((C21591 * C1163 + C47950 * C1178) * C666 -
                       (C22293 * C48287 + C22292 * C665) +
                       (C21591 * C1181 + C47950 * C1190) * C48104) *
                          C48336) *
                         C48338) *
                        C48062) *
                       C2720)) /
                 (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C2349 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C48062) *
              C48363 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C48062 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C2349) *
              C48356 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C2349 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C48062) *
              C48343 +
          ((((C21998 + C21999) * C4603 + (C22000 + C22001) * C48336) * C31851 +
            ((C26660 + C26661) * C4603 +
             ((C21591 * C1445 + C47950 * C1446) * C116 +
              (C21591 * C1447 + C47950 * C1448) * C48017) *
                 C48336) *
                C48338) *
               C48062 -
           (((C26661 + C26660) * C48336 +
             (C26797 * C48017 + C26796 * C116) * C4603) *
                C48338 +
            ((C21999 + C21998) * C48336 +
             ((C21591 * C130 + C47950 * C141) * C48017 +
              (C21591 * C120 + C47950 * C131) * C116) *
                 C4603) *
                C31851) *
               C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48364 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C48360 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C48350 -
           (((C27234 + C27235) * C48336 + (C27233 + C27232) * C4603) * C48338 +
            ((C22496 + C22495) * C48336 + C22482 * C4603) * C31851) *
               C48328) *
              C2457 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C48360 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C48364 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C48350 +
           ((C22759 * C4603 + (C22767 + C22766) * C48336) * C31851 +
            ((C27525 + C27524) * C4603 +
             ((C21591 * C6402 + C47950 * C6404) * C116 +
              (C21591 * C6406 + C47950 * C6408) * C48017) *
                 C48336) *
                C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C3113 +
              (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
              C26511 * C48104) *
                 C4603 +
             (C24756 + C24757 - C24758 - C24759) * C48336) *
                C31851 +
            ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
              C26513 * C48104) *
                 C4603 +
             (C30068 + C30069 - C30070 - C30071) * C48336) *
                C48338) *
               C48058 +
           (((C24758 - (C24757 + C24756) + C24759) * C4603 +
             (C24762 - (C24761 + C24760) + C24763) * C48336) *
                C31851 +
            ((C30070 - (C30069 + C30068) + C30071) * C4603 +
             (C30072 - (C30073 + C30074) + C30075) * C48336) *
                C48338) *
               C48065 +
           ((C24784 * C4603 + (C24766 + C24765 - C24764 - C24767) * C48336) *
                C31851 +
            ((C30074 + C30073 - C30072 - C30075) * C4603 +
             (C31088 + C31089 - C31090 - C31091) * C48336) *
                C48338) *
               C2717) *
              C48272 +
          ((((C26514 * C3114 -
              ((C21591 * C128 + C47950 * C139) * C3111 +
               (C21591 * C118 + C47950 * C125) * C3113) +
              C26515 * C48104) *
                 C4603 +
             (C24768 - (C24769 + C24770) + C24771) * C48336) *
                C31851 +
            ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
              C26517 * C48104) *
                 C4603 +
             (C30076 - (C30077 + C30078) + C30079) * C48336) *
                C48338) *
               C48058 +
           (((C24770 + C24769 - C24768 - C24771) * C4603 +
             (C24774 + C24773 - C24772 - C24775) * C48336) *
                C31851 +
            ((C30078 + C30077 - C30076 - C30079) * C4603 +
             (C30080 + C30081 - C30082 - C30083) * C48336) *
                C48338) *
               C48065 +
           ((C24785 * C4603 + (C24778 - (C24777 + C24776) + C24779) * C48336) *
                C31851 +
            ((C30082 - (C30081 + C30080) + C30083) * C4603 +
             ((C21591 * C5880 + C47950 * C5882) * C3114 -
              (C22929 * C3111 + C22928 * C3113) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C2717) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C47032 +
             (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
             C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
                C4603 +
            (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C48336) *
               C31851 +
           ((C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
             C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
                C4603 +
            (C30752 + C30753 - C30754 - C30755 + C30756 + C30757) * C48336) *
               C48338) *
              C48058 +
          (((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C4603 +
            (C25302 - (C25301 + C25300) + C25303 - C25304 - C25305) * C48336) *
               C31851 +
           ((C30754 - (C30753 + C30752) + C30755 - C30756 - C30757) * C4603 +
            (C31764 - (C31765 + C31766) + C31767 - C31768 - C31769) * C48336) *
               C48338) *
              C48065 +
          ((C26095 * C4603 +
            (C26088 + C26087 - C26086 - C26089 + C26090 + C26091) * C48336) *
               C31851 +
           ((C31766 + C31765 - C31764 - C31767 + C31768 + C31769) * C4603 +
            (C22645 * C47032 + C22646 * C48100 - C22647 * C47024 -
             C22648 * C48107 + (C21591 * C23723 + C47950 * C23724) * C47038 +
             (C21591 * C23725 + C47950 * C23726) * C3625) *
                C48336) *
               C48338) *
              C2717) *
         C47973) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
             C26511 * C48104) *
                C4603 +
            (C24756 + C24757 - C24758 - C24759) * C48336) *
               C31851 +
           ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
             C26513 * C48104) *
                C4603 +
            (C30068 + C30069 - C30070 - C30071) * C48336) *
               C48338) *
              C48364 +
          (((C24758 - (C24757 + C24756) + C24759) * C4603 +
            (C24762 - (C24761 + C24760) + C24763) * C48336) *
               C31851 +
           ((C30070 - (C30069 + C30068) + C30071) * C4603 +
            (C30072 - (C30073 + C30074) + C30075) * C48336) *
               C48338) *
              C48360 +
          ((C24784 * C4603 + (C24766 + C24765 - C24764 - C24767) * C48336) *
               C31851 +
           ((C30074 + C30073 - C30072 - C30075) * C4603 +
            (C31088 + C31089 - C31090 - C31091) * C48336) *
               C48338) *
              C48350 +
          ((C25568 * C4603 + (C25565 - (C25564 + C25563) + C25566) * C48336) *
               C31851 +
           ((C31090 - (C31089 + C31088) + C31091) * C4603 +
            ((C21591 * C22609 + C47950 * C22610) * C3114 -
             (C23045 * C3111 + C23044 * C3113) +
             (C21591 * C22611 + C47950 * C22612) * C48104) *
                C48336) *
               C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C3113 +
              (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
              C26511 * C48104) *
                 C4603 +
             (C24756 + C24757 - C24758 - C24759) * C48336) *
                C31851 +
            ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
              C26513 * C48104) *
                 C4603 +
             (C30068 + C30069 - C30070 - C30071) * C48336) *
                C48338) *
               C2349 +
           (((C24758 - (C24757 + C24756) + C24759) * C4603 +
             (C24762 - (C24761 + C24760) + C24763) * C48336) *
                C31851 +
            ((C30070 - (C30069 + C30068) + C30071) * C4603 +
             (C30072 - (C30073 + C30074) + C30075) * C48336) *
                C48338) *
               C48062) *
              C48354 +
          ((((C26514 * C3114 -
              ((C21591 * C128 + C47950 * C139) * C3111 +
               (C21591 * C118 + C47950 * C125) * C3113) +
              C26515 * C48104) *
                 C4603 +
             (C24768 - (C24769 + C24770) + C24771) * C48336) *
                C31851 +
            ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
              C26517 * C48104) *
                 C4603 +
             (C30076 - (C30077 + C30078) + C30079) * C48336) *
                C48338) *
               C2349 +
           (((C24770 + C24769 - C24768 - C24771) * C4603 +
             (C24774 + C24773 - C24772 - C24775) * C48336) *
                C31851 +
            ((C30078 + C30077 - C30076 - C30079) * C4603 +
             (C30080 + C30081 - C30082 - C30083) * C48336) *
                C48338) *
               C48062) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C3113 +
              (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
              C26519 * C48104) *
                 C4603 +
             (C25030 + C25031 - C25032 - C25033) * C48336) *
                C31851 +
            ((C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
              C26521 * C48104) *
                 C4603 +
             (C30408 + C30409 - C30410 - C30411) * C48336) *
                C48338) *
               C2349 +
           (((C25032 - (C25031 + C25030) + C25033) * C4603 +
             (C25036 - (C25035 + C25034) + C25037) * C48336) *
                C31851 +
            ((C30410 - (C30409 + C30408) + C30411) * C4603 +
             ((C21591 * C1163 + C47950 * C1178) * C3114 -
              (C22293 * C3111 + C22292 * C3113) +
              (C21591 * C1181 + C47950 * C1190) * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3363 +
             (C21591 * C127 + C47950 * C138) * C48365 - C26510 * C3364 -
             C26511 * C48362 + C26512 * C3365 + C26513 * C48353 -
             C28264 * C3366 - C28265 * C48334) *
                C4603 +
            (C25667 + C25668 - C25669 - C25670 + C25671 + C25672 - C25673 -
             C25674) *
                C48336) *
               C31851 +
           ((C26510 * C3363 + C26511 * C48365 - C26512 * C3364 -
             C26513 * C48362 + C28264 * C3365 + C28265 * C48353 -
             C28266 * C3366 - C28267 * C48334) *
                C4603 +
            (C31222 + C31223 - C31224 - C31225 + C31226 + C31227 - C31228 -
             C31229) *
                C48336) *
               C48338) *
              C2349 +
          (((C25669 - (C25668 + C25667) + C25670 - C25671 - C25672 + C25673 +
             C25674) *
                C4603 +
            (C25677 - (C25676 + C25675) + C25678 - C25679 - C25680 + C25681 +
             C25682) *
                C48336) *
               C31851 +
           ((C31224 - (C31223 + C31222) + C31225 - C31226 - C31227 + C31228 +
             C31229) *
                C4603 +
            (C22643 * C3364 - (C22285 * C48365 + C22284 * C3363) +
             C22644 * C48362 - C23750 * C3365 - C23751 * C48353 +
             (C21591 * C23353 + C47950 * C23354) * C3366 +
             (C21591 * C23355 + C47950 * C23356) * C48334) *
                C48336) *
               C48338) *
              C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C47032 +
              (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
              C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
                 C4603 +
             (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C48336) *
                C31851 +
            ((C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
              C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
                 C4603 +
             (C30752 + C30753 - C30754 - C30755 + C30756 + C30757) * C48336) *
                C48338) *
               C2349 +
           (((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C4603 +
             (C25302 - (C25301 + C25300) + C25303 - C25304 - C25305) * C48336) *
                C31851 +
            ((C30754 - (C30753 + C30752) + C30755 - C30756 - C30757) * C4603 +
             (C31764 - (C31765 + C31766) + C31767 - C31768 - C31769) * C48336) *
                C48338) *
               C48062) *
              C48272 +
          ((((C26514 * C47024 -
              ((C21591 * C128 + C47950 * C139) * C48100 +
               (C21591 * C118 + C47950 * C125) * C47032) +
              C26515 * C48107 - C26516 * C47038 - C26517 * C3625) *
                 C4603 +
             (C25306 - (C25307 + C25308) + C25309 - C25310 - C25311) * C48336) *
                C31851 +
            ((C26516 * C47024 - (C26515 * C48100 + C26514 * C47032) +
              C26517 * C48107 - C28610 * C47038 - C28611 * C3625) *
                 C4603 +
             (C30758 - (C30759 + C30760) + C30761 - C30762 - C30763) * C48336) *
                C48338) *
               C2349 +
           (((C25308 + C25307 - C25306 - C25309 + C25310 + C25311) * C4603 +
             (C25314 + C25313 - C25312 - C25315 + C25316 + C25317) * C48336) *
                C31851 +
            ((C30760 + C30759 - C30758 - C30761 + C30762 + C30763) * C4603 +
             (C22288 * C47032 + C22289 * C48100 - C23522 * C47024 -
              C23523 * C48107 + (C21591 * C7270 + C47950 * C7272) * C47038 +
              (C21591 * C7274 + C47950 * C7276) * C3625) *
                 C48336) *
                C48338) *
               C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C3113 +
              (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
              C26511 * C48104) *
                 C4603 +
             (C24756 + C24757 - C24758 - C24759) * C48336) *
                C31851 +
            ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
              C26513 * C48104) *
                 C4603 +
             (C30068 + C30069 - C30070 - C30071) * C48336) *
                C48338) *
               C2349 +
           (((C24758 - (C24757 + C24756) + C24759) * C4603 +
             (C24762 - (C24761 + C24760) + C24763) * C48336) *
                C31851 +
            ((C30070 - (C30069 + C30068) + C30071) * C4603 +
             (C30072 - (C30073 + C30074) + C30075) * C48336) *
                C48338) *
               C48062) *
              C48354 +
          ((((C26514 * C3114 -
              ((C21591 * C128 + C47950 * C139) * C3111 +
               (C21591 * C118 + C47950 * C125) * C3113) +
              C26515 * C48104) *
                 C4603 +
             (C24768 - (C24769 + C24770) + C24771) * C48336) *
                C31851 +
            ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
              C26517 * C48104) *
                 C4603 +
             (C30076 - (C30077 + C30078) + C30079) * C48336) *
                C48338) *
               C2349 +
           (((C24770 + C24769 - C24768 - C24771) * C4603 +
             (C24774 + C24773 - C24772 - C24775) * C48336) *
                C31851 +
            ((C30078 + C30077 - C30076 - C30079) * C4603 +
             (C30080 + C30081 - C30082 - C30083) * C48336) *
                C48338) *
               C48062) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C3113 +
              (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
              C26519 * C48104) *
                 C4603 +
             (C25030 + C25031 - C25032 - C25033) * C48336) *
                C31851 +
            ((C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
              C26521 * C48104) *
                 C4603 +
             (C30408 + C30409 - C30410 - C30411) * C48336) *
                C48338) *
               C2349 +
           (((C25032 - (C25031 + C25030) + C25033) * C4603 +
             (C25036 - (C25035 + C25034) + C25037) * C48336) *
                C31851 +
            ((C30410 - (C30409 + C30408) + C30411) * C4603 +
             ((C21591 * C1163 + C47950 * C1178) * C3114 -
              (C22293 * C3111 + C22292 * C3113) +
              (C21591 * C1181 + C47950 * C1190) * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
             C26511 * C48104) *
                C4603 +
            (C24756 + C24757 - C24758 - C24759) * C48336) *
               C31851 +
           ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
             C26513 * C48104) *
                C4603 +
            (C30068 + C30069 - C30070 - C30071) * C48336) *
               C48338) *
              C48364 +
          (((C24758 - (C24757 + C24756) + C24759) * C4603 +
            (C24762 - (C24761 + C24760) + C24763) * C48336) *
               C31851 +
           ((C30070 - (C30069 + C30068) + C30071) * C4603 +
            (C30072 - (C30073 + C30074) + C30075) * C48336) *
               C48338) *
              C48360 +
          ((C24784 * C4603 + (C24766 + C24765 - C24764 - C24767) * C48336) *
               C31851 +
           ((C30074 + C30073 - C30072 - C30075) * C4603 +
            (C31088 + C31089 - C31090 - C31091) * C48336) *
               C48338) *
              C48350 +
          ((C25568 * C4603 + (C25565 - (C25564 + C25563) + C25566) * C48336) *
               C31851 +
           ((C31090 - (C31089 + C31088) + C31091) * C4603 +
            ((C21591 * C22609 + C47950 * C22610) * C3114 -
             (C23045 * C3111 + C23044 * C3113) +
             (C21591 * C22611 + C47950 * C22612) * C48104) *
                C48336) *
               C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C1289 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C1290 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C1291 -
           (((C27234 + C27235) * C48336 + (C27233 + C27232) * C4603) * C48338 +
            ((C22496 + C22495) * C48336 + C22482 * C4603) * C31851) *
               C48328) *
              C48272 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C1290 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C1289 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C1291 +
           ((C22759 * C4603 + (C22767 + C22766) * C48336) * C31851 +
            ((C27525 + C27524) * C4603 +
             ((C21591 * C6402 + C47950 * C6404) * C116 +
              (C21591 * C6406 + C47950 * C6408) * C48017) *
                 C48336) *
                C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48286 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C48062) *
              C557 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C48062 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C48286) *
              C558 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48286 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C48062) *
              C559 +
          ((((C21998 + C21999) * C4603 + (C22000 + C22001) * C48336) * C31851 +
            ((C26660 + C26661) * C4603 +
             ((C21591 * C1445 + C47950 * C1446) * C116 +
              (C21591 * C1447 + C47950 * C1448) * C48017) *
                 C48336) *
                C48338) *
               C48062 -
           (((C26661 + C26660) * C48336 +
             (C26797 * C48017 + C26796 * C116) * C4603) *
                C48338 +
            ((C21999 + C21998) * C48336 +
             ((C21591 * C130 + C47950 * C141) * C48017 +
              (C21591 * C120 + C47950 * C131) * C116) *
                 C4603) *
                C31851) *
               C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C1672 +
              (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
              C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                 C4603 +
             (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C48336) *
                C31851 +
            ((C26510 * C1672 + C26511 * C1669 - C26512 * C1673 -
              C26513 * C1670 + C28264 * C1674 + C28265 * C48321) *
                 C4603 +
             (C28154 + C28155 - C28156 - C28157 + C28158 + C28159) * C48336) *
                C48338) *
               C48286 +
           (((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C4603 +
             (C23277 - (C23276 + C23275) + C23278 - C23279 - C23280) * C48336) *
                C31851 +
            ((C28156 - (C28155 + C28154) + C28157 - C28158 - C28159) * C4603 +
             (C28160 - (C28161 + C28162) + C28163 - C28164 - C28165) * C48336) *
                C48338) *
               C48062) *
              C48272 +
          ((((C26514 * C1673 -
              ((C21591 * C128 + C47950 * C139) * C1669 +
               (C21591 * C118 + C47950 * C125) * C1672) +
              C26515 * C1670 - C26516 * C1674 - C26517 * C48321) *
                 C4603 +
             (C23504 - (C23505 + C23506) + C23507 - C23524 - C23525) * C48336) *
                C31851 +
            ((C26516 * C1673 - (C26515 * C1669 + C26514 * C1672) +
              C26517 * C1670 - C28610 * C1674 - C28611 * C48321) *
                 C4603 +
             (C28464 - (C28465 + C28466) + C28467 - C28474 - C28475) * C48336) *
                C48338) *
               C48286 +
           (((C23506 + C23505 - C23504 - C23507 + C23524 + C23525) * C4603 +
             (C23514 + C23513 - C23512 - C23515 + C23526 + C23527) * C48336) *
                C31851 +
            ((C28466 + C28465 - C28464 - C28467 + C28474 + C28475) * C4603 +
             (C22288 * C1672 + C22289 * C1669 - C23522 * C1673 -
              C23523 * C1670 + (C21591 * C7270 + C47950 * C7272) * C1674 +
              (C21591 * C7274 + C47950 * C7276) * C48321) *
                 C48336) *
                C48338) *
               C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C4603 +
            (C22246 + C22247 - C22294 - C22295) * C48336) *
               C31851 +
           ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C4603 +
            (C26992 + C26993 - C26994 - C26995) * C48336) *
               C48338) *
              C1289 +
          (((C22294 - (C22247 + C22246) + C22295) * C4603 +
            (C22296 - (C22253 + C22252) + C22297) * C48336) *
               C31851 +
           ((C26994 - (C26993 + C26992) + C26995) * C4603 +
            (C27720 - (C27721 + C27722) + C27723) * C48336) *
               C48338) *
              C1290 +
          ((C22930 * C4603 + (C22917 + C22916 - C22915 - C22918) * C48336) *
               C31851 +
           ((C27722 + C27721 - C27720 - C27723) * C4603 +
            (C27858 + C27859 - C27860 - C27861) * C48336) *
               C48338) *
              C1291 +
          ((C23046 * C4603 + (C23047 - (C23038 + C23037) + C23048) * C48336) *
               C31851 +
           ((C27860 - (C27859 + C27858) + C27861) * C4603 +
            ((C21591 * C22609 + C47950 * C22610) * C666 -
             (C23045 * C48287 + C23044 * C665) +
             (C21591 * C22611 + C47950 * C22612) * C48104) *
                C48336) *
               C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C665 +
              (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
              C26511 * C48104) *
                 C4603 +
             (C22246 + C22247 - C22294 - C22295) * C48336) *
                C31851 +
            ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
              C26513 * C48104) *
                 C4603 +
             (C26992 + C26993 - C26994 - C26995) * C48336) *
                C48338) *
               C48286 +
           (((C22294 - (C22247 + C22246) + C22295) * C4603 +
             (C22296 - (C22253 + C22252) + C22297) * C48336) *
                C31851 +
            ((C26994 - (C26993 + C26992) + C26995) * C4603 +
             (C27720 - (C27721 + C27722) + C27723) * C48336) *
                C48338) *
               C48062) *
              C258 +
          ((((C26514 * C666 -
              ((C21591 * C128 + C47950 * C139) * C48287 +
               (C21591 * C118 + C47950 * C125) * C665) +
              C26515 * C48104) *
                 C4603 +
             (C22298 - (C22260 + C22261) + C22299) * C48336) *
                C31851 +
            ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
              C26517 * C48104) *
                 C4603 +
             (C26996 - (C26997 + C26998) + C26999) * C48336) *
                C48338) *
               C48286 +
           (((C22261 + C22260 - C22298 - C22299) * C4603 +
             (C22267 + C22266 - C22300 - C22301) * C48336) *
                C31851 +
            ((C26998 + C26997 - C26996 - C26999) * C4603 +
             (C27724 + C27725 - C27726 - C27727) * C48336) *
                C48338) *
               C48062) *
              C259 +
          (((((C21591 * C119 + C47950 * C126) * C665 +
              (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
              C26519 * C48104) *
                 C4603 +
             (C22270 + C22271 - C22302 - C22303) * C48336) *
                C31851 +
            ((C26518 * C665 + C26519 * C48287 - C26520 * C666 -
              C26521 * C48104) *
                 C4603 +
             (C27000 + C27001 - C27002 - C27003) * C48336) *
                C48338) *
               C48286 +
           (((C22302 - (C22271 + C22270) + C22303) * C4603 +
             (C22304 - (C22277 + C22276) + C22305) * C48336) *
                C31851 +
            ((C27002 - (C27001 + C27000) + C27003) * C4603 +
             ((C21591 * C1163 + C47950 * C1178) * C666 -
              (C22293 * C48287 + C22292 * C665) +
              (C21591 * C1181 + C47950 * C1190) * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C2133 +
             (C21591 * C127 + C47950 * C138) * C2129 - C26510 * C2134 -
             C26511 * C2130 + C26512 * C2135 + C26513 * C2131 - C28264 * C2136 -
             C28265 * C48334) *
                C4603 +
            (C23728 + C23729 - C23730 - C23731 + C23732 + C23733 - C23752 -
             C23753) *
                C48336) *
               C31851 +
           ((C26510 * C2133 + C26511 * C2129 - C26512 * C2134 - C26513 * C2130 +
             C28264 * C2135 + C28265 * C2131 - C28266 * C2136 -
             C28267 * C48334) *
                C4603 +
            (C28742 + C28743 - C28744 - C28745 + C28746 + C28747 - C28748 -
             C28749) *
                C48336) *
               C48338) *
              C48286 +
          (((C23730 - (C23729 + C23728) + C23731 - C23732 - C23733 + C23752 +
             C23753) *
                C4603 +
            (C23740 - (C23739 + C23738) + C23741 - C23742 - C23743 + C23754 +
             C23755) *
                C48336) *
               C31851 +
           ((C28744 - (C28743 + C28742) + C28745 - C28746 - C28747 + C28748 +
             C28749) *
                C4603 +
            (C22643 * C2134 - (C22285 * C2129 + C22284 * C2133) +
             C22644 * C2130 - C23750 * C2135 - C23751 * C2131 +
             (C21591 * C23353 + C47950 * C23354) * C2136 +
             (C21591 * C23355 + C47950 * C23356) * C48334) *
                C48336) *
               C48338) *
              C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C21591 * C117 + C47950 * C124) * C116 +
                 (C21591 * C127 + C47950 * C138) * C48017) *
                    C4603 +
                (C21757 + C21758) * C48336) *
                   C31851 +
               ((C26510 * C116 + C26511 * C48017) * C4603 +
                (C26324 + C26325) * C48336) *
                   C48338) *
                  C48000 * C108 -
              (((C26329 + C26328) * C48336 +
                (C26515 * C48017 + C26514 * C116) * C4603) *
                   C48338 +
               ((C21764 + C21763) * C48336 +
                ((C21591 * C128 + C47950 * C139) * C48017 +
                 (C21591 * C118 + C47950 * C125) * C116) *
                    C4603) *
                   C31851) *
                  C48000 * C109 +
              ((((C21591 * C119 + C47950 * C126) * C116 +
                 (C21591 * C129 + C47950 * C140) * C48017) *
                    C4603 +
                (C21769 + C21770) * C48336) *
                   C31851 +
               ((C26518 * C116 + C26519 * C48017) * C4603 +
                (C26332 + C26333) * C48336) *
                   C48338) *
                  C48000 * C110 -
              (((C26661 + C26660) * C48336 +
                (C26797 * C48017 + C26796 * C116) * C4603) *
                   C48338 +
               ((C21999 + C21998) * C48336 +
                ((C21591 * C130 + C47950 * C141) * C48017 +
                 (C21591 * C120 + C47950 * C131) * C116) *
                    C4603) *
                   C31851) *
                  C48000 * C111 +
              ((((C21591 * C121 + C47950 * C132) * C116 +
                 (C21591 * C133 + C47950 * C142) * C48017) *
                    C4603 +
                ((C21591 * C269 + C47950 * C288) * C116 +
                 (C21591 * C287 + C47950 * C299) * C48017) *
                    C48336) *
                   C31851 +
               (((C21591 * C425 + C47950 * C443) * C116 +
                 (C21591 * C444 + C47950 * C455) * C48017) *
                    C4603 +
                ((C21591 * C821 + C47950 * C830) * C116 +
                 (C21591 * C831 + C47950 * C836) * C48017) *
                    C48336) *
                   C48338) *
                  C48000 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C21591 * C117 + C47950 * C124) * C116 +
                  (C21591 * C127 + C47950 * C138) * C48017) *
                     C4603 +
                 (C21757 + C21758) * C48336) *
                    C31851 +
                ((C26510 * C116 + C26511 * C48017) * C4603 +
                 (C26324 + C26325) * C48336) *
                    C48338) *
                   C48357 -
               (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) *
                    C48338 +
                ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) *
                    C31851) *
                   C48345 +
               ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
                ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) *
                    C48338) *
                   C48318) *
                  C258 +
              ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) *
                    C31851 +
                ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) *
                    C48338) *
                   C48345 -
               (((C26329 + C26328) * C48336 +
                 (C26515 * C48017 + C26514 * C116) * C4603) *
                    C48338 +
                ((C21764 + C21763) * C48336 +
                 ((C21591 * C128 + C47950 * C139) * C48017 +
                  (C21591 * C118 + C47950 * C125) * C116) *
                     C4603) *
                    C31851) *
                   C48357 -
               (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) *
                    C48338 +
                ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
                   C48318) *
                  C259 +
              (((((C21591 * C119 + C47950 * C126) * C116 +
                  (C21591 * C129 + C47950 * C140) * C48017) *
                     C4603 +
                 (C21769 + C21770) * C48336) *
                    C31851 +
                ((C26518 * C116 + C26519 * C48017) * C4603 +
                 (C26332 + C26333) * C48336) *
                    C48338) *
                   C48357 -
               (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) *
                    C48338 +
                ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) *
                    C31851) *
                   C48345 +
               ((C21777 * C4603 + (C21774 + C21773) * C48336) * C31851 +
                ((C26335 + C26334) * C4603 +
                 ((C21591 * C1549 + C47950 * C1552) * C116 +
                  (C21591 * C1555 + C47950 * C1558) * C48017) *
                     C48336) *
                    C48338) *
                   C48318) *
                  C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C414 +
             (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
             C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                C4603 +
            (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C48336) *
               C31851 +
           ((C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
             C28264 * C416 + C28265 * C48321) *
                C4603 +
            (C27382 + C27383 - C27384 - C27385 + C27386 + C27387) * C48336) *
               C48338) *
              C48000 * C258 +
          (((C26514 * C415 -
             ((C21591 * C128 + C47950 * C139) * C48358 +
              (C21591 * C118 + C47950 * C125) * C414) +
             C26515 * C48347 - C26516 * C416 - C26517 * C48321) *
                C4603 +
            (C24098 - (C24099 + C24100) + C24101 - C24102 - C24103) * C48336) *
               C31851 +
           ((C26516 * C415 - (C26515 * C48358 + C26514 * C414) +
             C26517 * C48347 - C28610 * C416 - C28611 * C48321) *
                C4603 +
            (C29204 - (C29205 + C29206) + C29207 - C29208 - C29209) * C48336) *
               C48338) *
              C48000 * C259 +
          ((((C21591 * C119 + C47950 * C126) * C414 +
             (C21591 * C129 + C47950 * C140) * C48358 - C26518 * C415 -
             C26519 * C48347 + C26520 * C416 + C26521 * C48321) *
                C4603 +
            (C21751 * C414 + C21752 * C48358 - C22290 * C415 - C22291 * C48347 +
             C26522 * C416 + C26523 * C48321) *
                C48336) *
               C31851 +
           ((C26518 * C414 + C26519 * C48358 - C26520 * C415 - C26521 * C48347 +
             (C21591 * C1857 + C47950 * C1863) * C416 +
             (C21591 * C1866 + C47950 * C1875) * C48321) *
                C4603 +
            (C22290 * C414 + C22291 * C48358 - C26522 * C415 - C26523 * C48347 +
             (C21591 * C2241 + C47950 * C2244) * C416 +
             (C21591 * C2247 + C47950 * C2250) * C48321) *
                C48336) *
               C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C947 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C948 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C48318) *
              C48354 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C948 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C947 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C48318) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C947 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C948 +
           ((C21777 * C4603 + (C21774 + C21773) * C48336) * C31851 +
            ((C26335 + C26334) * C4603 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C4603 +
            (C21757 + C21758) * C48336) *
               C31851 +
           ((C26510 * C116 + C26511 * C48017) * C4603 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C1015 -
          (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
           ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
              C1016 +
          ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
           ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
              C1017 -
          (((C27234 + C27235) * C48336 + (C27233 + C27232) * C4603) * C48338 +
           ((C22496 + C22495) * C48336 + C22482 * C4603) * C31851) *
              C1018 +
          ((C22499 * C4603 + (C22498 + C22497) * C48336) * C31851 +
           ((C27235 + C27234) * C4603 +
            ((C21591 * C23031 + C47950 * C23032) * C116 +
             (C21591 * C23033 + C47950 * C23034) * C48017) *
                C48336) *
               C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C414 +
             (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
             C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                C4603 +
            (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C48336) *
               C31851 +
           ((C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
             C28264 * C416 + C28265 * C48321) *
                C4603 +
            (C27382 + C27383 - C27384 - C27385 + C27386 + C27387) * C48336) *
               C48338) *
              C947 +
          (((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C4603 +
            (C22624 - (C22623 + C22622) + C22625 - C22652 - C22653) * C48336) *
               C31851 +
           ((C27384 - (C27383 + C27382) + C27385 - C27386 - C27387) * C4603 +
            (C27388 - (C27389 + C27390) + C27391 - C27392 - C27393) * C48336) *
               C48338) *
              C948 +
          ((C22660 * C4603 +
            (C22633 + C22632 - C22654 - C22655 + C22656 + C22657) * C48336) *
               C31851 +
           ((C27390 + C27389 - C27388 - C27391 + C27392 + C27393) * C4603 +
            (C22645 * C414 + C22646 * C48358 - C22647 * C415 - C22648 * C48347 +
             (C21591 * C23723 + C47950 * C23724) * C416 +
             (C21591 * C23725 + C47950 * C23726) * C48321) *
                C48336) *
               C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C1672 +
             (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
             C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                C4603 +
            (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C48336) *
               C31851 +
           ((C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
             C28264 * C1674 + C28265 * C48321) *
                C4603 +
            (C28154 + C28155 - C28156 - C28157 + C28158 + C28159) * C48336) *
               C48338) *
              C48000 * C48354 +
          (((C26514 * C1673 -
             ((C21591 * C128 + C47950 * C139) * C1669 +
              (C21591 * C118 + C47950 * C125) * C1672) +
             C26515 * C1670 - C26516 * C1674 - C26517 * C48321) *
                C4603 +
            (C23504 - (C23505 + C23506) + C23507 - C23524 - C23525) * C48336) *
               C31851 +
           ((C26516 * C1673 - (C26515 * C1669 + C26514 * C1672) +
             C26517 * C1670 - C28610 * C1674 - C28611 * C48321) *
                C4603 +
            (C28464 - (C28465 + C28466) + C28467 - C28474 - C28475) * C48336) *
               C48338) *
              C48000 * C48341 +
          ((((C21591 * C119 + C47950 * C126) * C1672 +
             (C21591 * C129 + C47950 * C140) * C1669 - C26518 * C1673 -
             C26519 * C1670 + C26520 * C1674 + C26521 * C48321) *
                C4603 +
            (C21751 * C1672 + C21752 * C1669 - C22290 * C1673 - C22291 * C1670 +
             C26522 * C1674 + C26523 * C48321) *
                C48336) *
               C31851 +
           ((C26518 * C1672 + C26519 * C1669 - C26520 * C1673 - C26521 * C1670 +
             (C21591 * C1857 + C47950 * C1863) * C1674 +
             (C21591 * C1866 + C47950 * C1875) * C48321) *
                C4603 +
            (C22290 * C1672 + C22291 * C1669 - C26522 * C1673 - C26523 * C1670 +
             (C21591 * C2241 + C47950 * C2244) * C1674 +
             (C21591 * C2247 + C47950 * C2250) * C48321) *
                C48336) *
               C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C1672 +
             (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
             C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                C4603 +
            (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C48336) *
               C31851 +
           ((C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
             C28264 * C1674 + C28265 * C48321) *
                C4603 +
            (C28154 + C28155 - C28156 - C28157 + C28158 + C28159) * C48336) *
               C48338) *
              C48357 +
          (((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C4603 +
            (C23277 - (C23276 + C23275) + C23278 - C23279 - C23280) * C48336) *
               C31851 +
           ((C28156 - (C28155 + C28154) + C28157 - C28158 - C28159) * C4603 +
            (C28160 - (C28161 + C28162) + C28163 - C28164 - C28165) * C48336) *
               C48338) *
              C48345 +
          ((C23291 * C4603 +
            (C23283 + C23282 - C23281 - C23284 + C23285 + C23286) * C48336) *
               C31851 +
           ((C28162 + C28161 - C28160 - C28163 + C28164 + C28165) * C4603 +
            (C22645 * C1672 + C22646 * C1669 - C22647 * C1673 - C22648 * C1670 +
             (C21591 * C23723 + C47950 * C23724) * C1674 +
             (C21591 * C23725 + C47950 * C23726) * C48321) *
                C48336) *
               C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C1852 +
            (C21591 * C127 + C47950 * C138) * C1847 - C26510 * C1853 -
            C26511 * C1848 + C26512 * C1854 + C26513 * C1849 - C28264 * C1855 -
            C28265 * C1850 + C28266 * C1856 + C28267 * C1851) *
               C4603 +
           (C21739 * C1852 + C21740 * C1847 - C22282 * C1853 - C22283 * C1848 +
            C22640 * C1854 + C22641 * C1849 - C23748 * C1855 - C23749 * C1850 +
            C28268 * C1856 + C28269 * C1851) *
               C48336) *
              C31851 +
          ((C26510 * C1852 + C26511 * C1847 - C26512 * C1853 - C26513 * C1848 +
            C28264 * C1854 + C28265 * C1849 - C28266 * C1855 - C28267 * C1850 +
            (C21591 * C12369 + C47950 * C12371) * C1856 +
            (C21591 * C12373 + C47950 * C12375) * C1851) *
               C4603 +
           (C22282 * C1852 + C22283 * C1847 - C22640 * C1853 - C22641 * C1848 +
            C23748 * C1854 + C23749 * C1849 - C28268 * C1855 - C28269 * C1850 +
            (C21591 * C28247 + C47950 * C28248) * C1856 +
            (C21591 * C28249 + C47950 * C28250) * C1851) *
               C48336) *
              C48338) *
         C48000 * C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C665 +
              (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
              C26511 * C48104) *
                 C4603 +
             (C22246 + C22247 - C22294 - C22295) * C48336) *
                C31851 +
            ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
              C26513 * C48104) *
                 C4603 +
             (C26992 + C26993 - C26994 - C26995) * C48336) *
                C48338) *
               C947 +
           (((C22294 - (C22247 + C22246) + C22295) * C4603 +
             (C22296 - (C22253 + C22252) + C22297) * C48336) *
                C31851 +
            ((C26994 - (C26993 + C26992) + C26995) * C4603 +
             (C27720 - (C27721 + C27722) + C27723) * C48336) *
                C48338) *
               C948 +
           ((C22930 * C4603 + (C22917 + C22916 - C22915 - C22918) * C48336) *
                C31851 +
            ((C27722 + C27721 - C27720 - C27723) * C4603 +
             (C27858 + C27859 - C27860 - C27861) * C48336) *
                C48338) *
               C48318) *
              C48272 +
          ((((C26514 * C666 -
              ((C21591 * C128 + C47950 * C139) * C48287 +
               (C21591 * C118 + C47950 * C125) * C665) +
              C26515 * C48104) *
                 C4603 +
             (C22298 - (C22260 + C22261) + C22299) * C48336) *
                C31851 +
            ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
              C26517 * C48104) *
                 C4603 +
             (C26996 - (C26997 + C26998) + C26999) * C48336) *
                C48338) *
               C947 +
           (((C22261 + C22260 - C22298 - C22299) * C4603 +
             (C22267 + C22266 - C22300 - C22301) * C48336) *
                C31851 +
            ((C26998 + C26997 - C26996 - C26999) * C4603 +
             (C27724 + C27725 - C27726 - C27727) * C48336) *
                C48338) *
               C948 +
           ((C22931 * C4603 + (C22932 - (C22921 + C22920) + C22933) * C48336) *
                C31851 +
            ((C27726 - (C27725 + C27724) + C27727) * C4603 +
             ((C21591 * C5880 + C47950 * C5882) * C666 -
              (C22929 * C48287 + C22928 * C665) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C4603 +
            (C22246 + C22247 - C22294 - C22295) * C48336) *
               C31851 +
           ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C4603 +
            (C26992 + C26993 - C26994 - C26995) * C48336) *
               C48338) *
              C48000 * C557 +
          (((C26514 * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             C26515 * C48104) *
                C4603 +
            (C22298 - (C22260 + C22261) + C22299) * C48336) *
               C31851 +
           ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
             C26517 * C48104) *
                C4603 +
            (C26996 - (C26997 + C26998) + C26999) * C48336) *
               C48338) *
              C48000 * C558 +
          ((((C21591 * C119 + C47950 * C126) * C665 +
             (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
             C26519 * C48104) *
                C4603 +
            (C22270 + C22271 - C22302 - C22303) * C48336) *
               C31851 +
           ((C26518 * C665 + C26519 * C48287 - C26520 * C666 -
             C26521 * C48104) *
                C4603 +
            (C27000 + C27001 - C27002 - C27003) * C48336) *
               C48338) *
              C48000 * C559 +
          (((C26796 * C666 -
             ((C21591 * C130 + C47950 * C141) * C48287 +
              (C21591 * C120 + C47950 * C131) * C665) +
             C26797 * C48104) *
                C4603 +
            (C26658 * C666 - (C21995 * C48287 + C21994 * C665) +
             C26659 * C48104) *
                C48336) *
               C31851 +
           (((C21591 * C424 + C47950 * C441) * C666 -
             (C26797 * C48287 + C26796 * C665) +
             (C21591 * C442 + C47950 * C454) * C48104) *
                C4603 +
            ((C21591 * C2027 + C47950 * C2028) * C666 -
             (C26659 * C48287 + C26658 * C665) +
             (C21591 * C2029 + C47950 * C2030) * C48104) *
                C48336) *
               C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C2133 +
             (C21591 * C127 + C47950 * C138) * C2129 - C26510 * C2134 -
             C26511 * C2130 + C26512 * C2135 + C26513 * C2131 - C28264 * C2136 -
             C28265 * C48334) *
                C4603 +
            (C23728 + C23729 - C23730 - C23731 + C23732 + C23733 - C23752 -
             C23753) *
                C48336) *
               C31851 +
           ((C26510 * C2133 + C26511 * C2129 - C26512 * C2134 - C26513 * C2130 +
             C28264 * C2135 + C28265 * C2131 - C28266 * C2136 -
             C28267 * C48334) *
                C4603 +
            (C28742 + C28743 - C28744 - C28745 + C28746 + C28747 - C28748 -
             C28749) *
                C48336) *
               C48338) *
              C48000 * C48272 +
          (((C26514 * C2134 -
             ((C21591 * C128 + C47950 * C139) * C2129 +
              (C21591 * C118 + C47950 * C125) * C2133) +
             C26515 * C2130 - C26516 * C2135 - C26517 * C2131 + C28610 * C2136 +
             C28611 * C48334) *
                C4603 +
            (C22286 * C2134 - (C21746 * C2129 + C21745 * C2133) +
             C22287 * C2130 - C23520 * C2135 - C23521 * C2131 + C28472 * C2136 +
             C28473 * C48334) *
                C48336) *
               C31851 +
           ((C26516 * C2134 - (C26515 * C2129 + C26514 * C2133) +
             C26517 * C2130 - C28610 * C2135 - C28611 * C2131 +
             (C21591 * C1861 + C47950 * C1870) * C2136 +
             (C21591 * C1873 + C47950 * C1879) * C48334) *
                C4603 +
            (C23520 * C2134 - (C22287 * C2129 + C22286 * C2133) +
             C23521 * C2130 - C28472 * C2135 - C28473 * C2131 +
             (C21591 * C6796 + C47950 * C6798) * C2136 +
             (C21591 * C6800 + C47950 * C6802) * C48334) *
                C48336) *
               C48338) *
              C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48357 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C48345 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C48318) *
              C258 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C48345 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C48357 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C48318) *
              C259 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48357 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C48345 +
           ((C21777 * C4603 + (C21774 + C21773) * C48336) * C31851 +
            ((C26335 + C26334) * C4603 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C4603 +
            (C21757 + C21758) * C48336) *
               C31851 +
           ((C26510 * C116 + C26511 * C48017) * C4603 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C48000 * C108 -
          (((C26329 + C26328) * C48336 +
            (C26515 * C48017 + C26514 * C116) * C4603) *
               C48338 +
           ((C21764 + C21763) * C48336 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C4603) *
               C31851) *
              C48000 * C109 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C4603 +
            (C21769 + C21770) * C48336) *
               C31851 +
           ((C26518 * C116 + C26519 * C48017) * C4603 +
            (C26332 + C26333) * C48336) *
               C48338) *
              C48000 * C110 -
          (((C26661 + C26660) * C48336 +
            (C26797 * C48017 + C26796 * C116) * C4603) *
               C48338 +
           ((C21999 + C21998) * C48336 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C4603) *
               C31851) *
              C48000 * C111 +
          ((((C21591 * C121 + C47950 * C132) * C116 +
             (C21591 * C133 + C47950 * C142) * C48017) *
                C4603 +
            ((C21591 * C269 + C47950 * C288) * C116 +
             (C21591 * C287 + C47950 * C299) * C48017) *
                C48336) *
               C31851 +
           (((C21591 * C425 + C47950 * C443) * C116 +
             (C21591 * C444 + C47950 * C455) * C48017) *
                C4603 +
            ((C21591 * C821 + C47950 * C830) * C116 +
             (C21591 * C831 + C47950 * C836) * C48017) *
                C48336) *
               C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C947 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C948 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C48318) *
              C48354 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C948 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C947 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C48318) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C947 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C948 +
           ((C21777 * C4603 + (C21774 + C21773) * C48336) * C31851 +
            ((C26335 + C26334) * C4603 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C4603 +
            (C21757 + C21758) * C48336) *
               C31851 +
           ((C26510 * C116 + C26511 * C48017) * C4603 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C1015 -
          (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
           ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
              C1016 +
          ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
           ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
              C1017 -
          (((C27234 + C27235) * C48336 + (C27233 + C27232) * C4603) * C48338 +
           ((C22496 + C22495) * C48336 + C22482 * C4603) * C31851) *
              C1018 +
          ((C22499 * C4603 + (C22498 + C22497) * C48336) * C31851 +
           ((C27235 + C27234) * C4603 +
            ((C21591 * C23031 + C47950 * C23032) * C116 +
             (C21591 * C23033 + C47950 * C23034) * C48017) *
                C48336) *
               C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C1672 +
             (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
             C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                C4603 +
            (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C48336) *
               C31851 +
           ((C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
             C28264 * C1674 + C28265 * C48321) *
                C4603 +
            (C28154 + C28155 - C28156 - C28157 + C28158 + C28159) * C48336) *
               C48338) *
              C48000 * C48354 +
          (((C26514 * C1673 -
             ((C21591 * C128 + C47950 * C139) * C1669 +
              (C21591 * C118 + C47950 * C125) * C1672) +
             C26515 * C1670 - C26516 * C1674 - C26517 * C48321) *
                C4603 +
            (C23504 - (C23505 + C23506) + C23507 - C23524 - C23525) * C48336) *
               C31851 +
           ((C26516 * C1673 - (C26515 * C1669 + C26514 * C1672) +
             C26517 * C1670 - C28610 * C1674 - C28611 * C48321) *
                C4603 +
            (C28464 - (C28465 + C28466) + C28467 - C28474 - C28475) * C48336) *
               C48338) *
              C48000 * C48341 +
          ((((C21591 * C119 + C47950 * C126) * C1672 +
             (C21591 * C129 + C47950 * C140) * C1669 - C26518 * C1673 -
             C26519 * C1670 + C26520 * C1674 + C26521 * C48321) *
                C4603 +
            (C21751 * C1672 + C21752 * C1669 - C22290 * C1673 - C22291 * C1670 +
             C26522 * C1674 + C26523 * C48321) *
                C48336) *
               C31851 +
           ((C26518 * C1672 + C26519 * C1669 - C26520 * C1673 - C26521 * C1670 +
             (C21591 * C1857 + C47950 * C1863) * C1674 +
             (C21591 * C1866 + C47950 * C1875) * C48321) *
                C4603 +
            (C22290 * C1672 + C22291 * C1669 - C26522 * C1673 - C26523 * C1670 +
             (C21591 * C2241 + C47950 * C2244) * C1674 +
             (C21591 * C2247 + C47950 * C2250) * C48321) *
                C48336) *
               C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C1672 +
             (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
             C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                C4603 +
            (C23269 + C23270 - C23271 - C23272 + C23273 + C23274) * C48336) *
               C31851 +
           ((C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
             C28264 * C1674 + C28265 * C48321) *
                C4603 +
            (C28154 + C28155 - C28156 - C28157 + C28158 + C28159) * C48336) *
               C48338) *
              C48357 +
          (((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C4603 +
            (C23277 - (C23276 + C23275) + C23278 - C23279 - C23280) * C48336) *
               C31851 +
           ((C28156 - (C28155 + C28154) + C28157 - C28158 - C28159) * C4603 +
            (C28160 - (C28161 + C28162) + C28163 - C28164 - C28165) * C48336) *
               C48338) *
              C48345 +
          ((C23291 * C4603 +
            (C23283 + C23282 - C23281 - C23284 + C23285 + C23286) * C48336) *
               C31851 +
           ((C28162 + C28161 - C28160 - C28163 + C28164 + C28165) * C4603 +
            (C22645 * C1672 + C22646 * C1669 - C22647 * C1673 - C22648 * C1670 +
             (C21591 * C23723 + C47950 * C23724) * C1674 +
             (C21591 * C23725 + C47950 * C23726) * C48321) *
                C48336) *
               C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[190] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C21591 * C117 + C47950 * C124) * C3113 +
                       (C21591 * C127 + C47950 * C138) * C3111 -
                       C26510 * C3114 - C26511 * C48104) *
                          C4603 +
                      (C24756 + C24757 - C24758 - C24759) * C48336) *
                         C31851 +
                     ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                       C26513 * C48104) *
                          C4603 +
                      (C30068 + C30069 - C30070 - C30071) * C48336) *
                         C48338) *
                        C48286 +
                    (((C24758 - (C24757 + C24756) + C24759) * C4603 +
                      (C24762 - (C24761 + C24760) + C24763) * C48336) *
                         C31851 +
                     ((C30070 - (C30069 + C30068) + C30071) * C4603 +
                      (C30072 - (C30073 + C30074) + C30075) * C48336) *
                         C48338) *
                        C48062) *
                       C47978 +
                   ((((C26514 * C3114 -
                       ((C21591 * C128 + C47950 * C139) * C3111 +
                        (C21591 * C118 + C47950 * C125) * C3113) +
                       C26515 * C48104) *
                          C4603 +
                      (C24768 - (C24769 + C24770) + C24771) * C48336) *
                         C31851 +
                     ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
                       C26517 * C48104) *
                          C4603 +
                      (C30076 - (C30077 + C30078) + C30079) * C48336) *
                         C48338) *
                        C48286 +
                    (((C24770 + C24769 - C24768 - C24771) * C4603 +
                      (C24774 + C24773 - C24772 - C24775) * C48336) *
                         C31851 +
                     ((C30078 + C30077 - C30076 - C30079) * C4603 +
                      (C30080 + C30081 - C30082 - C30083) * C48336) *
                         C48338) *
                        C48062) *
                       C47986 +
                   (((((C21591 * C119 + C47950 * C126) * C3113 +
                       (C21591 * C129 + C47950 * C140) * C3111 -
                       C26518 * C3114 - C26519 * C48104) *
                          C4603 +
                      (C25030 + C25031 - C25032 - C25033) * C48336) *
                         C31851 +
                     ((C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
                       C26521 * C48104) *
                          C4603 +
                      (C30408 + C30409 - C30410 - C30411) * C48336) *
                         C48338) *
                        C48286 +
                    (((C25032 - (C25031 + C25030) + C25033) * C4603 +
                      (C25036 - (C25035 + C25034) + C25037) * C48336) *
                         C31851 +
                     ((C30410 - (C30409 + C30408) + C30411) * C4603 +
                      ((C21591 * C1163 + C47950 * C1178) * C3114 -
                       (C22293 * C3111 + C22292 * C3113) +
                       (C21591 * C1181 + C47950 * C1190) * C48104) *
                          C48336) *
                         C48338) *
                        C48062) *
                       C2720)) /
                 (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C47032 +
              (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
              C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
                 C4603 +
             (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C48336) *
                C31851 +
            ((C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
              C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
                 C4603 +
             (C30752 + C30753 - C30754 - C30755 + C30756 + C30757) * C48336) *
                C48338) *
               C48286 +
           (((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C4603 +
             (C25302 - (C25301 + C25300) + C25303 - C25304 - C25305) * C48336) *
                C31851 +
            ((C30754 - (C30753 + C30752) + C30755 - C30756 - C30757) * C4603 +
             (C31764 - (C31765 + C31766) + C31767 - C31768 - C31769) * C48336) *
                C48338) *
               C48062) *
              C2457 +
          ((((C26514 * C47024 -
              ((C21591 * C128 + C47950 * C139) * C48100 +
               (C21591 * C118 + C47950 * C125) * C47032) +
              C26515 * C48107 - C26516 * C47038 - C26517 * C3625) *
                 C4603 +
             (C25306 - (C25307 + C25308) + C25309 - C25310 - C25311) * C48336) *
                C31851 +
            ((C26516 * C47024 - (C26515 * C48100 + C26514 * C47032) +
              C26517 * C48107 - C28610 * C47038 - C28611 * C3625) *
                 C4603 +
             (C30758 - (C30759 + C30760) + C30761 - C30762 - C30763) * C48336) *
                C48338) *
               C48286 +
           (((C25308 + C25307 - C25306 - C25309 + C25310 + C25311) * C4603 +
             (C25314 + C25313 - C25312 - C25315 + C25316 + C25317) * C48336) *
                C31851 +
            ((C30760 + C30759 - C30758 - C30761 + C30762 + C30763) * C4603 +
             (C22288 * C47032 + C22289 * C48100 - C23522 * C47024 -
              C23523 * C48107 + (C21591 * C7270 + C47950 * C7272) * C47038 +
              (C21591 * C7274 + C47950 * C7276) * C3625) *
                 C48336) *
                C48338) *
               C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C3113 +
              (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
              C26511 * C48104) *
                 C4603 +
             (C24756 + C24757 - C24758 - C24759) * C48336) *
                C31851 +
            ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
              C26513 * C48104) *
                 C4603 +
             (C30068 + C30069 - C30070 - C30071) * C48336) *
                C48338) *
               C48357 +
           (((C24758 - (C24757 + C24756) + C24759) * C4603 +
             (C24762 - (C24761 + C24760) + C24763) * C48336) *
                C31851 +
            ((C30070 - (C30069 + C30068) + C30071) * C4603 +
             (C30072 - (C30073 + C30074) + C30075) * C48336) *
                C48338) *
               C48345 +
           ((C24784 * C4603 + (C24766 + C24765 - C24764 - C24767) * C48336) *
                C31851 +
            ((C30074 + C30073 - C30072 - C30075) * C4603 +
             (C31088 + C31089 - C31090 - C31091) * C48336) *
                C48338) *
               C48318) *
              C2457 +
          ((((C26514 * C3114 -
              ((C21591 * C128 + C47950 * C139) * C3111 +
               (C21591 * C118 + C47950 * C125) * C3113) +
              C26515 * C48104) *
                 C4603 +
             (C24768 - (C24769 + C24770) + C24771) * C48336) *
                C31851 +
            ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
              C26517 * C48104) *
                 C4603 +
             (C30076 - (C30077 + C30078) + C30079) * C48336) *
                C48338) *
               C48357 +
           (((C24770 + C24769 - C24768 - C24771) * C4603 +
             (C24774 + C24773 - C24772 - C24775) * C48336) *
                C31851 +
            ((C30078 + C30077 - C30076 - C30079) * C4603 +
             (C30080 + C30081 - C30082 - C30083) * C48336) *
                C48338) *
               C48345 +
           ((C24785 * C4603 + (C24778 - (C24777 + C24776) + C24779) * C48336) *
                C31851 +
            ((C30082 - (C30081 + C30080) + C30083) * C4603 +
             ((C21591 * C5880 + C47950 * C5882) * C3114 -
              (C22929 * C3111 + C22928 * C3113) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
             C26511 * C48104) *
                C4603 +
            (C24756 + C24757 - C24758 - C24759) * C48336) *
               C31851 +
           ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
             C26513 * C48104) *
                C4603 +
            (C30068 + C30069 - C30070 - C30071) * C48336) *
               C48338) *
              C48000 * C48363 +
          (((C26514 * C3114 -
             ((C21591 * C128 + C47950 * C139) * C3111 +
              (C21591 * C118 + C47950 * C125) * C3113) +
             C26515 * C48104) *
                C4603 +
            (C24768 - (C24769 + C24770) + C24771) * C48336) *
               C31851 +
           ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
             C26517 * C48104) *
                C4603 +
            (C30076 - (C30077 + C30078) + C30079) * C48336) *
               C48338) *
              C48000 * C48356 +
          ((((C21591 * C119 + C47950 * C126) * C3113 +
             (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
             C26519 * C48104) *
                C4603 +
            (C25030 + C25031 - C25032 - C25033) * C48336) *
               C31851 +
           ((C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
             C26521 * C48104) *
                C4603 +
            (C30408 + C30409 - C30410 - C30411) * C48336) *
               C48338) *
              C48000 * C48343 +
          (((C26796 * C3114 -
             ((C21591 * C130 + C47950 * C141) * C3111 +
              (C21591 * C120 + C47950 * C131) * C3113) +
             C26797 * C48104) *
                C4603 +
            (C26658 * C3114 - (C21995 * C3111 + C21994 * C3113) +
             C26659 * C48104) *
                C48336) *
               C31851 +
           (((C21591 * C424 + C47950 * C441) * C3114 -
             (C26797 * C3111 + C26796 * C3113) +
             (C21591 * C442 + C47950 * C454) * C48104) *
                C4603 +
            ((C21591 * C2027 + C47950 * C2028) * C3114 -
             (C26659 * C3111 + C26658 * C3113) +
             (C21591 * C2029 + C47950 * C2030) * C48104) *
                C48336) *
               C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3363 +
             (C21591 * C127 + C47950 * C138) * C48365 - C26510 * C3364 -
             C26511 * C48362 + C26512 * C3365 + C26513 * C48353 -
             C28264 * C3366 - C28265 * C48334) *
                C4603 +
            (C25667 + C25668 - C25669 - C25670 + C25671 + C25672 - C25673 -
             C25674) *
                C48336) *
               C31851 +
           ((C26510 * C3363 + C26511 * C48365 - C26512 * C3364 -
             C26513 * C48362 + C28264 * C3365 + C28265 * C48353 -
             C28266 * C3366 - C28267 * C48334) *
                C4603 +
            (C31222 + C31223 - C31224 - C31225 + C31226 + C31227 - C31228 -
             C31229) *
                C48336) *
               C48338) *
              C48000 * C2457 +
          (((C26514 * C3364 -
             ((C21591 * C128 + C47950 * C139) * C48365 +
              (C21591 * C118 + C47950 * C125) * C3363) +
             C26515 * C48362 - C26516 * C3365 - C26517 * C48353 +
             C28610 * C3366 + C28611 * C48334) *
                C4603 +
            (C22286 * C3364 - (C21746 * C48365 + C21745 * C3363) +
             C22287 * C48362 - C23520 * C3365 - C23521 * C48353 +
             C28472 * C3366 + C28473 * C48334) *
                C48336) *
               C31851 +
           ((C26516 * C3364 - (C26515 * C48365 + C26514 * C3363) +
             C26517 * C48362 - C28610 * C3365 - C28611 * C48353 +
             (C21591 * C1861 + C47950 * C1870) * C3366 +
             (C21591 * C1873 + C47950 * C1879) * C48334) *
                C4603 +
            (C23520 * C3364 - (C22287 * C48365 + C22286 * C3363) +
             C23521 * C48362 - C28472 * C3365 - C28473 * C48353 +
             (C21591 * C6796 + C47950 * C6798) * C3366 +
             (C21591 * C6800 + C47950 * C6802) * C48334) *
                C48336) *
               C48338) *
              C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C47032 +
             (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
             C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
                C4603 +
            (C25294 + C25295 - C25296 - C25297 + C25298 + C25299) * C48336) *
               C31851 +
           ((C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
             C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
                C4603 +
            (C30752 + C30753 - C30754 - C30755 + C30756 + C30757) * C48336) *
               C48338) *
              C48000 * C47978 +
          (((C26514 * C47024 -
             ((C21591 * C128 + C47950 * C139) * C48100 +
              (C21591 * C118 + C47950 * C125) * C47032) +
             C26515 * C48107 - C26516 * C47038 - C26517 * C3625) *
                C4603 +
            (C25306 - (C25307 + C25308) + C25309 - C25310 - C25311) * C48336) *
               C31851 +
           ((C26516 * C47024 - (C26515 * C48100 + C26514 * C47032) +
             C26517 * C48107 - C28610 * C47038 - C28611 * C3625) *
                C4603 +
            (C30758 - (C30759 + C30760) + C30761 - C30762 - C30763) * C48336) *
               C48338) *
              C48000 * C47986 +
          ((((C21591 * C119 + C47950 * C126) * C47032 +
             (C21591 * C129 + C47950 * C140) * C48100 - C26518 * C47024 -
             C26519 * C48107 + C26520 * C47038 + C26521 * C3625) *
                C4603 +
            (C21751 * C47032 + C21752 * C48100 - C22290 * C47024 -
             C22291 * C48107 + C26522 * C47038 + C26523 * C3625) *
                C48336) *
               C31851 +
           ((C26518 * C47032 + C26519 * C48100 - C26520 * C47024 -
             C26521 * C48107 + (C21591 * C1857 + C47950 * C1863) * C47038 +
             (C21591 * C1866 + C47950 * C1875) * C3625) *
                C4603 +
            (C22290 * C47032 + C22291 * C48100 - C26522 * C47024 -
             C26523 * C48107 + (C21591 * C2241 + C47950 * C2244) * C47038 +
             (C21591 * C2247 + C47950 * C2250) * C3625) *
                C48336) *
               C48338) *
              C48000 * C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C3113 +
             (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
             C26511 * C48104) *
                C4603 +
            (C24756 + C24757 - C24758 - C24759) * C48336) *
               C31851 +
           ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
             C26513 * C48104) *
                C4603 +
            (C30068 + C30069 - C30070 - C30071) * C48336) *
               C48338) *
              C48000 * C48363 +
          (((C26514 * C3114 -
             ((C21591 * C128 + C47950 * C139) * C3111 +
              (C21591 * C118 + C47950 * C125) * C3113) +
             C26515 * C48104) *
                C4603 +
            (C24768 - (C24769 + C24770) + C24771) * C48336) *
               C31851 +
           ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
             C26517 * C48104) *
                C4603 +
            (C30076 - (C30077 + C30078) + C30079) * C48336) *
               C48338) *
              C48000 * C48356 +
          ((((C21591 * C119 + C47950 * C126) * C3113 +
             (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
             C26519 * C48104) *
                C4603 +
            (C25030 + C25031 - C25032 - C25033) * C48336) *
               C31851 +
           ((C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
             C26521 * C48104) *
                C4603 +
            (C30408 + C30409 - C30410 - C30411) * C48336) *
               C48338) *
              C48000 * C48343 +
          (((C26796 * C3114 -
             ((C21591 * C130 + C47950 * C141) * C3111 +
              (C21591 * C120 + C47950 * C131) * C3113) +
             C26797 * C48104) *
                C4603 +
            (C26658 * C3114 - (C21995 * C3111 + C21994 * C3113) +
             C26659 * C48104) *
                C48336) *
               C31851 +
           (((C21591 * C424 + C47950 * C441) * C3114 -
             (C26797 * C3111 + C26796 * C3113) +
             (C21591 * C442 + C47950 * C454) * C48104) *
                C4603 +
            ((C21591 * C2027 + C47950 * C2028) * C3114 -
             (C26659 * C3111 + C26658 * C3113) +
             (C21591 * C2029 + C47950 * C2030) * C48104) *
                C48336) *
               C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C3113 +
              (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
              C26511 * C48104) *
                 C4603 +
             (C24756 + C24757 - C24758 - C24759) * C48336) *
                C31851 +
            ((C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
              C26513 * C48104) *
                 C4603 +
             (C30068 + C30069 - C30070 - C30071) * C48336) *
                C48338) *
               C48357 +
           (((C24758 - (C24757 + C24756) + C24759) * C4603 +
             (C24762 - (C24761 + C24760) + C24763) * C48336) *
                C31851 +
            ((C30070 - (C30069 + C30068) + C30071) * C4603 +
             (C30072 - (C30073 + C30074) + C30075) * C48336) *
                C48338) *
               C48345 +
           ((C24784 * C4603 + (C24766 + C24765 - C24764 - C24767) * C48336) *
                C31851 +
            ((C30074 + C30073 - C30072 - C30075) * C4603 +
             (C31088 + C31089 - C31090 - C31091) * C48336) *
                C48338) *
               C48318) *
              C2457 +
          ((((C26514 * C3114 -
              ((C21591 * C128 + C47950 * C139) * C3111 +
               (C21591 * C118 + C47950 * C125) * C3113) +
              C26515 * C48104) *
                 C4603 +
             (C24768 - (C24769 + C24770) + C24771) * C48336) *
                C31851 +
            ((C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
              C26517 * C48104) *
                 C4603 +
             (C30076 - (C30077 + C30078) + C30079) * C48336) *
                C48338) *
               C48357 +
           (((C24770 + C24769 - C24768 - C24771) * C4603 +
             (C24774 + C24773 - C24772 - C24775) * C48336) *
                C31851 +
            ((C30078 + C30077 - C30076 - C30079) * C4603 +
             (C30080 + C30081 - C30082 - C30083) * C48336) *
                C48338) *
               C48345 +
           ((C24785 * C4603 + (C24778 - (C24777 + C24776) + C24779) * C48336) *
                C31851 +
            ((C30082 - (C30081 + C30080) + C30083) * C4603 +
             ((C21591 * C5880 + C47950 * C5882) * C3114 -
              (C22929 * C3111 + C22928 * C3113) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48286 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C48062) *
              C557 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C48062 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C48286) *
              C558 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48286 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C48062) *
              C559 +
          ((((C21998 + C21999) * C4603 + (C22000 + C22001) * C48336) * C31851 +
            ((C26660 + C26661) * C4603 +
             ((C21591 * C1445 + C47950 * C1446) * C116 +
              (C21591 * C1447 + C47950 * C1448) * C48017) *
                 C48336) *
                C48338) *
               C48062 -
           (((C26661 + C26660) * C48336 +
             (C26797 * C48017 + C26796 * C116) * C4603) *
                C48338 +
            ((C21999 + C21998) * C48336 +
             ((C21591 * C130 + C47950 * C141) * C48017 +
              (C21591 * C120 + C47950 * C131) * C116) *
                 C4603) *
                C31851) *
               C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C1289 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C1290 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C1291 -
           (((C27234 + C27235) * C48336 + (C27233 + C27232) * C4603) * C48338 +
            ((C22496 + C22495) * C48336 + C22482 * C4603) * C31851) *
               C48328) *
              C48272 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C1290 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C1289 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C1291 +
           ((C22759 * C4603 + (C22767 + C22766) * C48336) * C31851 +
            ((C27525 + C27524) * C4603 +
             ((C21591 * C6402 + C47950 * C6404) * C116 +
              (C21591 * C6406 + C47950 * C6408) * C48017) *
                 C48336) *
                C48338) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C665 +
              (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
              C26511 * C48104) *
                 C4603 +
             (C22246 + C22247 - C22294 - C22295) * C48336) *
                C31851 +
            ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
              C26513 * C48104) *
                 C4603 +
             (C26992 + C26993 - C26994 - C26995) * C48336) *
                C48338) *
               C48286 +
           (((C22294 - (C22247 + C22246) + C22295) * C4603 +
             (C22296 - (C22253 + C22252) + C22297) * C48336) *
                C31851 +
            ((C26994 - (C26993 + C26992) + C26995) * C4603 +
             (C27720 - (C27721 + C27722) + C27723) * C48336) *
                C48338) *
               C48062) *
              C258 +
          ((((C26514 * C666 -
              ((C21591 * C128 + C47950 * C139) * C48287 +
               (C21591 * C118 + C47950 * C125) * C665) +
              C26515 * C48104) *
                 C4603 +
             (C22298 - (C22260 + C22261) + C22299) * C48336) *
                C31851 +
            ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
              C26517 * C48104) *
                 C4603 +
             (C26996 - (C26997 + C26998) + C26999) * C48336) *
                C48338) *
               C48286 +
           (((C22261 + C22260 - C22298 - C22299) * C4603 +
             (C22267 + C22266 - C22300 - C22301) * C48336) *
                C31851 +
            ((C26998 + C26997 - C26996 - C26999) * C4603 +
             (C27724 + C27725 - C27726 - C27727) * C48336) *
                C48338) *
               C48062) *
              C259 +
          (((((C21591 * C119 + C47950 * C126) * C665 +
              (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
              C26519 * C48104) *
                 C4603 +
             (C22270 + C22271 - C22302 - C22303) * C48336) *
                C31851 +
            ((C26518 * C665 + C26519 * C48287 - C26520 * C666 -
              C26521 * C48104) *
                 C4603 +
             (C27000 + C27001 - C27002 - C27003) * C48336) *
                C48338) *
               C48286 +
           (((C22302 - (C22271 + C22270) + C22303) * C4603 +
             (C22304 - (C22277 + C22276) + C22305) * C48336) *
                C31851 +
            ((C27002 - (C27001 + C27000) + C27003) * C4603 +
             ((C21591 * C1163 + C47950 * C1178) * C666 -
              (C22293 * C48287 + C22292 * C665) +
              (C21591 * C1181 + C47950 * C1190) * C48104) *
                 C48336) *
                C48338) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C4603 +
            (C22246 + C22247 - C22294 - C22295) * C48336) *
               C31851 +
           ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C4603 +
            (C26992 + C26993 - C26994 - C26995) * C48336) *
               C48338) *
              C1289 +
          (((C22294 - (C22247 + C22246) + C22295) * C4603 +
            (C22296 - (C22253 + C22252) + C22297) * C48336) *
               C31851 +
           ((C26994 - (C26993 + C26992) + C26995) * C4603 +
            (C27720 - (C27721 + C27722) + C27723) * C48336) *
               C48338) *
              C1290 +
          ((C22930 * C4603 + (C22917 + C22916 - C22915 - C22918) * C48336) *
               C31851 +
           ((C27722 + C27721 - C27720 - C27723) * C4603 +
            (C27858 + C27859 - C27860 - C27861) * C48336) *
               C48338) *
              C1291 +
          ((C23046 * C4603 + (C23047 - (C23038 + C23037) + C23048) * C48336) *
               C31851 +
           ((C27860 - (C27859 + C27858) + C27861) * C4603 +
            ((C21591 * C22609 + C47950 * C22610) * C666 -
             (C23045 * C48287 + C23044 * C665) +
             (C21591 * C22611 + C47950 * C22612) * C48104) *
                C48336) *
               C48338) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48357 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C48345 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C48318) *
              C258 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C48345 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C48357 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C48318) *
              C259 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48357 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C48345 +
           ((C21777 * C4603 + (C21774 + C21773) * C48336) * C31851 +
            ((C26335 + C26334) * C4603 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C4603 +
            (C21757 + C21758) * C48336) *
               C31851 +
           ((C26510 * C116 + C26511 * C48017) * C4603 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C48000 * C108 -
          (((C26329 + C26328) * C48336 +
            (C26515 * C48017 + C26514 * C116) * C4603) *
               C48338 +
           ((C21764 + C21763) * C48336 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C4603) *
               C31851) *
              C48000 * C109 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C4603 +
            (C21769 + C21770) * C48336) *
               C31851 +
           ((C26518 * C116 + C26519 * C48017) * C4603 +
            (C26332 + C26333) * C48336) *
               C48338) *
              C48000 * C110 -
          (((C26661 + C26660) * C48336 +
            (C26797 * C48017 + C26796 * C116) * C4603) *
               C48338 +
           ((C21999 + C21998) * C48336 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C4603) *
               C31851) *
              C48000 * C111 +
          ((((C21591 * C121 + C47950 * C132) * C116 +
             (C21591 * C133 + C47950 * C142) * C48017) *
                C4603 +
            ((C21591 * C269 + C47950 * C288) * C116 +
             (C21591 * C287 + C47950 * C299) * C48017) *
                C48336) *
               C31851 +
           (((C21591 * C425 + C47950 * C443) * C116 +
             (C21591 * C444 + C47950 * C455) * C48017) *
                C4603 +
            ((C21591 * C821 + C47950 * C830) * C116 +
             (C21591 * C831 + C47950 * C836) * C48017) *
                C48336) *
               C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C414 +
             (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
             C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                C4603 +
            (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C48336) *
               C31851 +
           ((C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
             C28264 * C416 + C28265 * C48321) *
                C4603 +
            (C27382 + C27383 - C27384 - C27385 + C27386 + C27387) * C48336) *
               C48338) *
              C48000 * C258 +
          (((C26514 * C415 -
             ((C21591 * C128 + C47950 * C139) * C48358 +
              (C21591 * C118 + C47950 * C125) * C414) +
             C26515 * C48347 - C26516 * C416 - C26517 * C48321) *
                C4603 +
            (C24098 - (C24099 + C24100) + C24101 - C24102 - C24103) * C48336) *
               C31851 +
           ((C26516 * C415 - (C26515 * C48358 + C26514 * C414) +
             C26517 * C48347 - C28610 * C416 - C28611 * C48321) *
                C4603 +
            (C29204 - (C29205 + C29206) + C29207 - C29208 - C29209) * C48336) *
               C48338) *
              C48000 * C259 +
          ((((C21591 * C119 + C47950 * C126) * C414 +
             (C21591 * C129 + C47950 * C140) * C48358 - C26518 * C415 -
             C26519 * C48347 + C26520 * C416 + C26521 * C48321) *
                C4603 +
            (C21751 * C414 + C21752 * C48358 - C22290 * C415 - C22291 * C48347 +
             C26522 * C416 + C26523 * C48321) *
                C48336) *
               C31851 +
           ((C26518 * C414 + C26519 * C48358 - C26520 * C415 - C26521 * C48347 +
             (C21591 * C1857 + C47950 * C1863) * C416 +
             (C21591 * C1866 + C47950 * C1875) * C48321) *
                C4603 +
            (C22290 * C414 + C22291 * C48358 - C26522 * C415 - C26523 * C48347 +
             (C21591 * C2241 + C47950 * C2244) * C416 +
             (C21591 * C2247 + C47950 * C2250) * C48321) *
                C48336) *
               C48338) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C947 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C948 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C48318) *
              C48354 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C948 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C947 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C48318) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C947 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C948 +
           ((C21777 * C4603 + (C21774 + C21773) * C48336) * C31851 +
            ((C26335 + C26334) * C4603 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C4603 +
            (C21757 + C21758) * C48336) *
               C31851 +
           ((C26510 * C116 + C26511 * C48017) * C4603 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C1015 -
          (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
           ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
              C1016 +
          ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
           ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
              C1017 -
          (((C27234 + C27235) * C48336 + (C27233 + C27232) * C4603) * C48338 +
           ((C22496 + C22495) * C48336 + C22482 * C4603) * C31851) *
              C1018 +
          ((C22499 * C4603 + (C22498 + C22497) * C48336) * C31851 +
           ((C27235 + C27234) * C4603 +
            ((C21591 * C23031 + C47950 * C23032) * C116 +
             (C21591 * C23033 + C47950 * C23034) * C48017) *
                C48336) *
               C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C414 +
             (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
             C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                C4603 +
            (C22614 + C22615 - C22616 - C22617 + C22649 + C22650) * C48336) *
               C31851 +
           ((C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
             C28264 * C416 + C28265 * C48321) *
                C4603 +
            (C27382 + C27383 - C27384 - C27385 + C27386 + C27387) * C48336) *
               C48338) *
              C947 +
          (((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C4603 +
            (C22624 - (C22623 + C22622) + C22625 - C22652 - C22653) * C48336) *
               C31851 +
           ((C27384 - (C27383 + C27382) + C27385 - C27386 - C27387) * C4603 +
            (C27388 - (C27389 + C27390) + C27391 - C27392 - C27393) * C48336) *
               C48338) *
              C948 +
          ((C22660 * C4603 +
            (C22633 + C22632 - C22654 - C22655 + C22656 + C22657) * C48336) *
               C31851 +
           ((C27390 + C27389 - C27388 - C27391 + C27392 + C27393) * C4603 +
            (C22645 * C414 + C22646 * C48358 - C22647 * C415 - C22648 * C48347 +
             (C21591 * C23723 + C47950 * C23724) * C416 +
             (C21591 * C23725 + C47950 * C23726) * C48321) *
                C48336) *
               C48338) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C4603 +
            (C22246 + C22247 - C22294 - C22295) * C48336) *
               C31851 +
           ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C4603 +
            (C26992 + C26993 - C26994 - C26995) * C48336) *
               C48338) *
              C48000 * C557 +
          (((C26514 * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             C26515 * C48104) *
                C4603 +
            (C22298 - (C22260 + C22261) + C22299) * C48336) *
               C31851 +
           ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
             C26517 * C48104) *
                C4603 +
            (C26996 - (C26997 + C26998) + C26999) * C48336) *
               C48338) *
              C48000 * C558 +
          ((((C21591 * C119 + C47950 * C126) * C665 +
             (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
             C26519 * C48104) *
                C4603 +
            (C22270 + C22271 - C22302 - C22303) * C48336) *
               C31851 +
           ((C26518 * C665 + C26519 * C48287 - C26520 * C666 -
             C26521 * C48104) *
                C4603 +
            (C27000 + C27001 - C27002 - C27003) * C48336) *
               C48338) *
              C48000 * C559 +
          (((C26796 * C666 -
             ((C21591 * C130 + C47950 * C141) * C48287 +
              (C21591 * C120 + C47950 * C131) * C665) +
             C26797 * C48104) *
                C4603 +
            (C26658 * C666 - (C21995 * C48287 + C21994 * C665) +
             C26659 * C48104) *
                C48336) *
               C31851 +
           (((C21591 * C424 + C47950 * C441) * C666 -
             (C26797 * C48287 + C26796 * C665) +
             (C21591 * C442 + C47950 * C454) * C48104) *
                C4603 +
            ((C21591 * C2027 + C47950 * C2028) * C666 -
             (C26659 * C48287 + C26658 * C665) +
             (C21591 * C2029 + C47950 * C2030) * C48104) *
                C48336) *
               C48338) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C665 +
              (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
              C26511 * C48104) *
                 C4603 +
             (C22246 + C22247 - C22294 - C22295) * C48336) *
                C31851 +
            ((C26510 * C665 + C26511 * C48287 - C26512 * C666 -
              C26513 * C48104) *
                 C4603 +
             (C26992 + C26993 - C26994 - C26995) * C48336) *
                C48338) *
               C947 +
           (((C22294 - (C22247 + C22246) + C22295) * C4603 +
             (C22296 - (C22253 + C22252) + C22297) * C48336) *
                C31851 +
            ((C26994 - (C26993 + C26992) + C26995) * C4603 +
             (C27720 - (C27721 + C27722) + C27723) * C48336) *
                C48338) *
               C948 +
           ((C22930 * C4603 + (C22917 + C22916 - C22915 - C22918) * C48336) *
                C31851 +
            ((C27722 + C27721 - C27720 - C27723) * C4603 +
             (C27858 + C27859 - C27860 - C27861) * C48336) *
                C48338) *
               C48318) *
              C48272 +
          ((((C26514 * C666 -
              ((C21591 * C128 + C47950 * C139) * C48287 +
               (C21591 * C118 + C47950 * C125) * C665) +
              C26515 * C48104) *
                 C4603 +
             (C22298 - (C22260 + C22261) + C22299) * C48336) *
                C31851 +
            ((C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
              C26517 * C48104) *
                 C4603 +
             (C26996 - (C26997 + C26998) + C26999) * C48336) *
                C48338) *
               C947 +
           (((C22261 + C22260 - C22298 - C22299) * C4603 +
             (C22267 + C22266 - C22300 - C22301) * C48336) *
                C31851 +
            ((C26998 + C26997 - C26996 - C26999) * C4603 +
             (C27724 + C27725 - C27726 - C27727) * C48336) *
                C48338) *
               C948 +
           ((C22931 * C4603 + (C22932 - (C22921 + C22920) + C22933) * C48336) *
                C31851 +
            ((C27726 - (C27725 + C27724) + C27727) * C4603 +
             ((C21591 * C5880 + C47950 * C5882) * C666 -
              (C22929 * C48287 + C22928 * C665) +
              (C21591 * C5884 + C47950 * C5886) * C48104) *
                 C48336) *
                C48338) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C4603 +
            (C21757 + C21758) * C48336) *
               C31851 +
           ((C26510 * C116 + C26511 * C48017) * C4603 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C48000 * C108 -
          (((C26329 + C26328) * C48336 +
            (C26515 * C48017 + C26514 * C116) * C4603) *
               C48338 +
           ((C21764 + C21763) * C48336 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C4603) *
               C31851) *
              C48000 * C109 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C4603 +
            (C21769 + C21770) * C48336) *
               C31851 +
           ((C26518 * C116 + C26519 * C48017) * C4603 +
            (C26332 + C26333) * C48336) *
               C48338) *
              C48000 * C110 -
          (((C26661 + C26660) * C48336 +
            (C26797 * C48017 + C26796 * C116) * C4603) *
               C48338 +
           ((C21999 + C21998) * C48336 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C4603) *
               C31851) *
              C48000 * C111 +
          ((((C21591 * C121 + C47950 * C132) * C116 +
             (C21591 * C133 + C47950 * C142) * C48017) *
                C4603 +
            ((C21591 * C269 + C47950 * C288) * C116 +
             (C21591 * C287 + C47950 * C299) * C48017) *
                C48336) *
               C31851 +
           (((C21591 * C425 + C47950 * C443) * C116 +
             (C21591 * C444 + C47950 * C455) * C48017) *
                C4603 +
            ((C21591 * C821 + C47950 * C830) * C116 +
             (C21591 * C831 + C47950 * C836) * C48017) *
                C48336) *
               C48338) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C48357 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C48345 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C48318) *
              C258 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C48345 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C48357 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C48318) *
              C259 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C48357 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C48345 +
           ((C21777 * C4603 + (C21774 + C21773) * C48336) * C31851 +
            ((C26335 + C26334) * C4603 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C21591 * C117 + C47950 * C124) * C116 +
              (C21591 * C127 + C47950 * C138) * C48017) *
                 C4603 +
             (C21757 + C21758) * C48336) *
                C31851 +
            ((C26510 * C116 + C26511 * C48017) * C4603 +
             (C26324 + C26325) * C48336) *
                C48338) *
               C947 -
           (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
            ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
               C948 +
           ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
            ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
               C48318) *
              C48354 +
          ((((C21763 + C21764) * C4603 + (C21765 + C21766) * C48336) * C31851 +
            ((C26328 + C26329) * C4603 + (C26330 + C26331) * C48336) * C48338) *
               C948 -
           (((C26329 + C26328) * C48336 +
             (C26515 * C48017 + C26514 * C116) * C4603) *
                C48338 +
            ((C21764 + C21763) * C48336 +
             ((C21591 * C128 + C47950 * C139) * C48017 +
              (C21591 * C118 + C47950 * C125) * C116) *
                 C4603) *
                C31851) *
               C947 -
           (((C27524 + C27525) * C48336 + (C26331 + C26330) * C4603) * C48338 +
            ((C21768 + C21767) * C48336 + C21776 * C4603) * C31851) *
               C48318) *
              C48341 +
          (((((C21591 * C119 + C47950 * C126) * C116 +
              (C21591 * C129 + C47950 * C140) * C48017) *
                 C4603 +
             (C21769 + C21770) * C48336) *
                C31851 +
            ((C26518 * C116 + C26519 * C48017) * C4603 +
             (C26332 + C26333) * C48336) *
                C48338) *
               C947 -
           (((C26334 + C26335) * C48336 + (C26333 + C26332) * C4603) * C48338 +
            ((C21772 + C21771) * C48336 + (C21770 + C21769) * C4603) * C31851) *
               C948 +
           ((C21777 * C4603 + (C21774 + C21773) * C48336) * C31851 +
            ((C26335 + C26334) * C4603 +
             ((C21591 * C1549 + C47950 * C1552) * C116 +
              (C21591 * C1555 + C47950 * C1558) * C48017) *
                 C48336) *
                C48338) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C4603 +
            (C21757 + C21758) * C48336) *
               C31851 +
           ((C26510 * C116 + C26511 * C48017) * C4603 +
            (C26324 + C26325) * C48336) *
               C48338) *
              C1015 -
          (((C26326 + C26327) * C48336 + (C26325 + C26324) * C4603) * C48338 +
           ((C21760 + C21759) * C48336 + (C21758 + C21757) * C4603) * C31851) *
              C1016 +
          ((C21775 * C4603 + (C21762 + C21761) * C48336) * C31851 +
           ((C26327 + C26326) * C4603 + (C27232 + C27233) * C48336) * C48338) *
              C1017 -
          (((C27234 + C27235) * C48336 + (C27233 + C27232) * C4603) * C48338 +
           ((C22496 + C22495) * C48336 + C22482 * C4603) * C31851) *
              C1018 +
          ((C22499 * C4603 + (C22498 + C22497) * C48336) * C31851 +
           ((C27235 + C27234) * C4603 +
            ((C21591 * C23031 + C47950 * C23032) * C116 +
             (C21591 * C23033 + C47950 * C23034) * C48017) *
                C48336) *
               C48338) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C48058 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C48065 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C2717) *
              C47978 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C48065 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C48058 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C2717) *
              C47986 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C48058 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C48065 +
           (C21777 * C48206 * C42849 + (C26335 + C26334) * C48206 * C42850 +
            ((C21591 * C1163 + C47950 * C1178) * C116 +
             (C21591 * C1181 + C47950 * C1190) * C48017) *
                C48206 * C42851) *
               C2717) *
              C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47950 * C124) * C665 +
                      (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
                      C26511 * C48104) *
                         C48206 * C42849 +
                     (C26510 * C665 + C26511 * C48287 - C26512 * C666 -
                      C26513 * C48104) *
                         C48206 * C42850 +
                     (C26512 * C665 + C26513 * C48287 - C28264 * C666 -
                      C28265 * C48104) *
                         C48206 * C42851) *
                        C48058 +
                    ((C22294 - (C22247 + C22246) + C22295) * C48206 * C42849 +
                     (C26994 - (C26993 + C26992) + C26995) * C48206 * C42850 +
                     (C23748 * C666 - (C22641 * C48287 + C22640 * C665) +
                      C23749 * C48104) *
                         C48206 * C42851) *
                        C48065 +
                    (C22930 * C48206 * C42849 +
                     (C27722 + C27721 - C27720 - C27723) * C48206 * C42850 +
                     (C22643 * C665 + C22644 * C48287 - C23750 * C666 -
                      C23751 * C48104) *
                         C48206 * C42851) *
                        C2717) *
                       C2457 +
                   (((C26514 * C666 -
                      ((C21591 * C128 + C47950 * C139) * C48287 +
                       (C21591 * C118 + C47950 * C125) * C665) +
                      C26515 * C48104) *
                         C48206 * C42849 +
                     (C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
                      C26517 * C48104) *
                         C48206 * C42850 +
                     (C28610 * C666 - (C26517 * C48287 + C26516 * C665) +
                      C28611 * C48104) *
                         C48206 * C42851) *
                        C48058 +
                    ((C22261 + C22260 - C22298 - C22299) * C48206 * C42849 +
                     (C26998 + C26997 - C26996 - C26999) * C48206 * C42850 +
                     (C23520 * C665 + C23521 * C48287 - C28472 * C666 -
                      C28473 * C48104) *
                         C48206 * C42851) *
                        C48065 +
                    (C22931 * C48206 * C42849 +
                     (C27726 - (C27725 + C27724) + C27727) * C48206 * C42850 +
                     ((C21591 * C7270 + C47950 * C7272) * C666 -
                      (C23523 * C48287 + C23522 * C665) +
                      (C21591 * C7274 + C47950 * C7276) * C48104) *
                         C48206 * C42851) *
                        C2717) *
                       C47983)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C48364 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C48360 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C48350 -
           ((C22648 * C48017 + C22647 * C116) * C48206 * C42851 +
            (C27233 + C27232) * C48206 * C42850 + C22482 * C48206 * C42849) *
               C48328) *
              C2457 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C48360 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C48364 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C48350 +
           (C22759 * C48206 * C42849 + (C27525 + C27524) * C48206 * C42850 +
            ((C21591 * C5880 + C47950 * C5882) * C116 +
             (C21591 * C5884 + C47950 * C5886) * C48017) *
                C48206 * C42851) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C2349 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C48062) *
              C48363 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C48062 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C2349) *
              C48356 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C2349 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C48062) *
              C48343 +
          (((C21998 + C21999) * C48206 * C42849 +
            (C26660 + C26661) * C48206 * C42850 +
            ((C21591 * C2027 + C47950 * C2028) * C116 +
             (C21591 * C2029 + C47950 * C2030) * C48017) *
                C48206 * C42851) *
               C48062 -
           ((C43280 * C48017 + C43279 * C116) * C48206 * C42851 +
            (C26797 * C48017 + C26796 * C116) * C48206 * C42850 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C48206 * C42849) *
               C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C414 +
             (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
             C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
                C48206 * C42849 +
            (C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
             C28264 * C416 + C28265 * C48321) *
                C48206 * C42850 +
            (C26512 * C414 + C26513 * C48358 - C28264 * C415 - C28265 * C48347 +
             C28266 * C416 + C28267 * C48321) *
                C48206 * C42851) *
               C2349 +
           ((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C48206 *
                C42849 +
            (C27384 - (C27383 + C27382) + C27385 - C27386 - C27387) * C48206 *
                C42850 +
            (C23748 * C415 - (C22641 * C48358 + C22640 * C414) +
             C23749 * C48347 - C28268 * C416 - C28269 * C48321) *
                C48206 * C42851) *
               C48062) *
              C2457 +
          (((C26514 * C415 -
             ((C21591 * C128 + C47950 * C139) * C48358 +
              (C21591 * C118 + C47950 * C125) * C414) +
             C26515 * C48347 - C26516 * C416 - C26517 * C48321) *
                C48206 * C42849 +
            (C26516 * C415 - (C26515 * C48358 + C26514 * C414) +
             C26517 * C48347 - C28610 * C416 - C28611 * C48321) *
                C48206 * C42850 +
            (C28610 * C415 - (C26517 * C48358 + C26516 * C414) +
             C28611 * C48347 - C44591 * C416 - C44592 * C48321) *
                C48206 * C42851) *
               C2349 +
           ((C24100 + C24099 - C24098 - C24101 + C24102 + C24103) * C48206 *
                C42849 +
            (C29206 + C29205 - C29204 - C29207 + C29208 + C29209) * C48206 *
                C42850 +
            (C23520 * C414 + C23521 * C48358 - C28472 * C415 - C28473 * C48347 +
             (C21591 * C6796 + C47950 * C6798) * C416 +
             (C21591 * C6800 + C47950 * C6802) * C48321) *
                C48206 * C42851) *
               C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47950 * C124) * C665 +
                      (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
                      C26511 * C48104) *
                         C48206 * C42849 +
                     (C26510 * C665 + C26511 * C48287 - C26512 * C666 -
                      C26513 * C48104) *
                         C48206 * C42850 +
                     (C26512 * C665 + C26513 * C48287 - C28264 * C666 -
                      C28265 * C48104) *
                         C48206 * C42851) *
                        C2349 +
                    ((C22294 - (C22247 + C22246) + C22295) * C48206 * C42849 +
                     (C26994 - (C26993 + C26992) + C26995) * C48206 * C42850 +
                     (C23748 * C666 - (C22641 * C48287 + C22640 * C665) +
                      C23749 * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C47978 +
                   (((C26514 * C666 -
                      ((C21591 * C128 + C47950 * C139) * C48287 +
                       (C21591 * C118 + C47950 * C125) * C665) +
                      C26515 * C48104) *
                         C48206 * C42849 +
                     (C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
                      C26517 * C48104) *
                         C48206 * C42850 +
                     (C28610 * C666 - (C26517 * C48287 + C26516 * C665) +
                      C28611 * C48104) *
                         C48206 * C42851) *
                        C2349 +
                    ((C22261 + C22260 - C22298 - C22299) * C48206 * C42849 +
                     (C26998 + C26997 - C26996 - C26999) * C48206 * C42850 +
                     (C23520 * C665 + C23521 * C48287 - C28472 * C666 -
                      C28473 * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C47986 +
                   ((((C21591 * C119 + C47950 * C126) * C665 +
                      (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
                      C26519 * C48104) *
                         C48206 * C42849 +
                     (C26518 * C665 + C26519 * C48287 - C26520 * C666 -
                      C26521 * C48104) *
                         C48206 * C42850 +
                     (C26520 * C665 + C26521 * C48287 - C43077 * C666 -
                      C43078 * C48104) *
                         C48206 * C42851) *
                        C2349 +
                    ((C22302 - (C22271 + C22270) + C22303) * C48206 * C42849 +
                     (C27002 - (C27001 + C27000) + C27003) * C48206 * C42850 +
                     ((C21591 * C2241 + C47950 * C2244) * C666 -
                      (C26523 * C48287 + C26522 * C665) +
                      (C21591 * C2247 + C47950 * C2250) * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C2720)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C2349 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C48062) *
              C48363 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C48062 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C2349) *
              C48356 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C2349 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C48062) *
              C48343 +
          (((C21998 + C21999) * C48206 * C42849 +
            (C26660 + C26661) * C48206 * C42850 +
            ((C21591 * C2027 + C47950 * C2028) * C116 +
             (C21591 * C2029 + C47950 * C2030) * C48017) *
                C48206 * C42851) *
               C48062 -
           ((C43280 * C48017 + C43279 * C116) * C48206 * C42851 +
            (C26797 * C48017 + C26796 * C116) * C48206 * C42850 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C48206 * C42849) *
               C2349) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C48364 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C48360 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C48350 -
           ((C22648 * C48017 + C22647 * C116) * C48206 * C42851 +
            (C27233 + C27232) * C48206 * C42850 + C22482 * C48206 * C42849) *
               C48328) *
              C2457 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C48360 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C48364 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C48350 +
           (C22759 * C48206 * C42849 + (C27525 + C27524) * C48206 * C42850 +
            ((C21591 * C5880 + C47950 * C5882) * C116 +
             (C21591 * C5884 + C47950 * C5886) * C48017) *
                C48206 * C42851) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47950 * C124) * C3113 +
                      (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
                      C26511 * C48104) *
                         C48206 * C42849 +
                     (C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                      C26513 * C48104) *
                         C48206 * C42850 +
                     (C26512 * C3113 + C26513 * C3111 - C28264 * C3114 -
                      C28265 * C48104) *
                         C48206 * C42851) *
                        C48058 +
                    ((C24758 - (C24757 + C24756) + C24759) * C48206 * C42849 +
                     (C30070 - (C30069 + C30068) + C30071) * C48206 * C42850 +
                     (C23748 * C3114 - (C22641 * C3111 + C22640 * C3113) +
                      C23749 * C48104) *
                         C48206 * C42851) *
                        C48065 +
                    (C24784 * C48206 * C42849 +
                     (C30074 + C30073 - C30072 - C30075) * C48206 * C42850 +
                     (C22643 * C3113 + C22644 * C3111 - C23750 * C3114 -
                      C23751 * C48104) *
                         C48206 * C42851) *
                        C2717) *
                       C48272 +
                   (((C26514 * C3114 -
                      ((C21591 * C128 + C47950 * C139) * C3111 +
                       (C21591 * C118 + C47950 * C125) * C3113) +
                      C26515 * C48104) *
                         C48206 * C42849 +
                     (C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
                      C26517 * C48104) *
                         C48206 * C42850 +
                     (C28610 * C3114 - (C26517 * C3111 + C26516 * C3113) +
                      C28611 * C48104) *
                         C48206 * C42851) *
                        C48058 +
                    ((C24770 + C24769 - C24768 - C24771) * C48206 * C42849 +
                     (C30078 + C30077 - C30076 - C30079) * C48206 * C42850 +
                     (C23520 * C3113 + C23521 * C3111 - C28472 * C3114 -
                      C28473 * C48104) *
                         C48206 * C42851) *
                        C48065 +
                    (C24785 * C48206 * C42849 +
                     (C30082 - (C30081 + C30080) + C30083) * C48206 * C42850 +
                     ((C21591 * C7270 + C47950 * C7272) * C3114 -
                      (C23523 * C3111 + C23522 * C3113) +
                      (C21591 * C7274 + C47950 * C7276) * C48104) *
                         C48206 * C42851) *
                        C2717) *
                       C47983)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C47032 +
            (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
            C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
               C48206 * C42849 +
           (C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
            C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
               C48206 * C42850 +
           (C26512 * C47032 + C26513 * C48100 - C28264 * C47024 -
            C28265 * C48107 + C28266 * C47038 + C28267 * C3625) *
               C48206 * C42851) *
              C48058 +
          ((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C48206 *
               C42849 +
           (C30754 - (C30753 + C30752) + C30755 - C30756 - C30757) * C48206 *
               C42850 +
           (C23748 * C47024 - (C22641 * C48100 + C22640 * C47032) +
            C23749 * C48107 - C28268 * C47038 - C28269 * C3625) *
               C48206 * C42851) *
              C48065 +
          (C26095 * C48206 * C42849 +
           (C31766 + C31765 - C31764 - C31767 + C31768 + C31769) * C48206 *
               C42850 +
           (C22643 * C47032 + C22644 * C48100 - C23750 * C47024 -
            C23751 * C48107 + (C21591 * C23353 + C47950 * C23354) * C47038 +
            (C21591 * C23355 + C47950 * C23356) * C3625) *
               C48206 * C42851) *
              C2717) *
         C47973) /
        (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47950 * C124) * C3113 +
                     (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
                     C26511 * C48104) *
                        C48206 * C42849 +
                    (C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                     C26513 * C48104) *
                        C48206 * C42850 +
                    (C26512 * C3113 + C26513 * C3111 - C28264 * C3114 -
                     C28265 * C48104) *
                        C48206 * C42851) *
                       C48364 +
                   ((C24758 - (C24757 + C24756) + C24759) * C48206 * C42849 +
                    (C30070 - (C30069 + C30068) + C30071) * C48206 * C42850 +
                    (C23748 * C3114 - (C22641 * C3111 + C22640 * C3113) +
                     C23749 * C48104) *
                        C48206 * C42851) *
                       C48360 +
                   (C24784 * C48206 * C42849 +
                    (C30074 + C30073 - C30072 - C30075) * C48206 * C42850 +
                    (C22643 * C3113 + C22644 * C3111 - C23750 * C3114 -
                     C23751 * C48104) *
                        C48206 * C42851) *
                       C48350 +
                   (C25568 * C48206 * C42849 +
                    (C31090 - (C31089 + C31088) + C31091) * C48206 * C42850 +
                    ((C21591 * C23723 + C47950 * C23724) * C3114 -
                     (C22648 * C3111 + C22647 * C3113) +
                     (C21591 * C23725 + C47950 * C23726) * C48104) *
                        C48206 * C42851) *
                       C48328) *
                  C47973) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47950 * C124) * C3113 +
                      (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
                      C26511 * C48104) *
                         C48206 * C42849 +
                     (C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                      C26513 * C48104) *
                         C48206 * C42850 +
                     (C26512 * C3113 + C26513 * C3111 - C28264 * C3114 -
                      C28265 * C48104) *
                         C48206 * C42851) *
                        C2349 +
                    ((C24758 - (C24757 + C24756) + C24759) * C48206 * C42849 +
                     (C30070 - (C30069 + C30068) + C30071) * C48206 * C42850 +
                     (C23748 * C3114 - (C22641 * C3111 + C22640 * C3113) +
                      C23749 * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C48354 +
                   (((C26514 * C3114 -
                      ((C21591 * C128 + C47950 * C139) * C3111 +
                       (C21591 * C118 + C47950 * C125) * C3113) +
                      C26515 * C48104) *
                         C48206 * C42849 +
                     (C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
                      C26517 * C48104) *
                         C48206 * C42850 +
                     (C28610 * C3114 - (C26517 * C3111 + C26516 * C3113) +
                      C28611 * C48104) *
                         C48206 * C42851) *
                        C2349 +
                    ((C24770 + C24769 - C24768 - C24771) * C48206 * C42849 +
                     (C30078 + C30077 - C30076 - C30079) * C48206 * C42850 +
                     (C23520 * C3113 + C23521 * C3111 - C28472 * C3114 -
                      C28473 * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C48341 +
                   ((((C21591 * C119 + C47950 * C126) * C3113 +
                      (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
                      C26519 * C48104) *
                         C48206 * C42849 +
                     (C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
                      C26521 * C48104) *
                         C48206 * C42850 +
                     (C26520 * C3113 + C26521 * C3111 - C43077 * C3114 -
                      C43078 * C48104) *
                         C48206 * C42851) *
                        C2349 +
                    ((C25032 - (C25031 + C25030) + C25033) * C48206 * C42849 +
                     (C30410 - (C30409 + C30408) + C30411) * C48206 * C42850 +
                     ((C21591 * C2241 + C47950 * C2244) * C3114 -
                      (C26523 * C3111 + C26522 * C3113) +
                      (C21591 * C2247 + C47950 * C2250) * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C48312)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47950 * C124) * C3363 +
                     (C21591 * C127 + C47950 * C138) * C48365 - C26510 * C3364 -
                     C26511 * C48362 + C26512 * C3365 + C26513 * C48353 -
                     C28264 * C3366 - C28265 * C48334) *
                        C48206 * C42849 +
                    (C26510 * C3363 + C26511 * C48365 - C26512 * C3364 -
                     C26513 * C48362 + C28264 * C3365 + C28265 * C48353 -
                     C28266 * C3366 - C28267 * C48334) *
                        C48206 * C42850 +
                    (C26512 * C3363 + C26513 * C48365 - C28264 * C3364 -
                     C28265 * C48362 + C28266 * C3365 + C28267 * C48353 -
                     C44341 * C3366 - C44342 * C48334) *
                        C48206 * C42851) *
                       C2349 +
                   ((C25669 - (C25668 + C25667) + C25670 - C25671 - C25672 +
                     C25673 + C25674) *
                        C48206 * C42849 +
                    (C31224 - (C31223 + C31222) + C31225 - C31226 - C31227 +
                     C31228 + C31229) *
                        C48206 * C42850 +
                    (C23748 * C3364 - (C22641 * C48365 + C22640 * C3363) +
                     C23749 * C48362 - C28268 * C3365 - C28269 * C48353 +
                     (C21591 * C28247 + C47950 * C28248) * C3366 +
                     (C21591 * C28249 + C47950 * C28250) * C48334) *
                        C48206 * C42851) *
                       C48062) *
                  C47973) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C47032 +
             (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
             C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
                C48206 * C42849 +
            (C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
             C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
                C48206 * C42850 +
            (C26512 * C47032 + C26513 * C48100 - C28264 * C47024 -
             C28265 * C48107 + C28266 * C47038 + C28267 * C3625) *
                C48206 * C42851) *
               C2349 +
           ((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C48206 *
                C42849 +
            (C30754 - (C30753 + C30752) + C30755 - C30756 - C30757) * C48206 *
                C42850 +
            (C23748 * C47024 - (C22641 * C48100 + C22640 * C47032) +
             C23749 * C48107 - C28268 * C47038 - C28269 * C3625) *
                C48206 * C42851) *
               C48062) *
              C48272 +
          (((C26514 * C47024 -
             ((C21591 * C128 + C47950 * C139) * C48100 +
              (C21591 * C118 + C47950 * C125) * C47032) +
             C26515 * C48107 - C26516 * C47038 - C26517 * C3625) *
                C48206 * C42849 +
            (C26516 * C47024 - (C26515 * C48100 + C26514 * C47032) +
             C26517 * C48107 - C28610 * C47038 - C28611 * C3625) *
                C48206 * C42850 +
            (C28610 * C47024 - (C26517 * C48100 + C26516 * C47032) +
             C28611 * C48107 - C44591 * C47038 - C44592 * C3625) *
                C48206 * C42851) *
               C2349 +
           ((C25308 + C25307 - C25306 - C25309 + C25310 + C25311) * C48206 *
                C42849 +
            (C30760 + C30759 - C30758 - C30761 + C30762 + C30763) * C48206 *
                C42850 +
            (C23520 * C47032 + C23521 * C48100 - C28472 * C47024 -
             C28473 * C48107 + (C21591 * C6796 + C47950 * C6798) * C47038 +
             (C21591 * C6800 + C47950 * C6802) * C3625) *
                C48206 * C42851) *
               C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47950 * C124) * C3113 +
                      (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
                      C26511 * C48104) *
                         C48206 * C42849 +
                     (C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                      C26513 * C48104) *
                         C48206 * C42850 +
                     (C26512 * C3113 + C26513 * C3111 - C28264 * C3114 -
                      C28265 * C48104) *
                         C48206 * C42851) *
                        C2349 +
                    ((C24758 - (C24757 + C24756) + C24759) * C48206 * C42849 +
                     (C30070 - (C30069 + C30068) + C30071) * C48206 * C42850 +
                     (C23748 * C3114 - (C22641 * C3111 + C22640 * C3113) +
                      C23749 * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C48354 +
                   (((C26514 * C3114 -
                      ((C21591 * C128 + C47950 * C139) * C3111 +
                       (C21591 * C118 + C47950 * C125) * C3113) +
                      C26515 * C48104) *
                         C48206 * C42849 +
                     (C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
                      C26517 * C48104) *
                         C48206 * C42850 +
                     (C28610 * C3114 - (C26517 * C3111 + C26516 * C3113) +
                      C28611 * C48104) *
                         C48206 * C42851) *
                        C2349 +
                    ((C24770 + C24769 - C24768 - C24771) * C48206 * C42849 +
                     (C30078 + C30077 - C30076 - C30079) * C48206 * C42850 +
                     (C23520 * C3113 + C23521 * C3111 - C28472 * C3114 -
                      C28473 * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C48341 +
                   ((((C21591 * C119 + C47950 * C126) * C3113 +
                      (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
                      C26519 * C48104) *
                         C48206 * C42849 +
                     (C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
                      C26521 * C48104) *
                         C48206 * C42850 +
                     (C26520 * C3113 + C26521 * C3111 - C43077 * C3114 -
                      C43078 * C48104) *
                         C48206 * C42851) *
                        C2349 +
                    ((C25032 - (C25031 + C25030) + C25033) * C48206 * C42849 +
                     (C30410 - (C30409 + C30408) + C30411) * C48206 * C42850 +
                     ((C21591 * C2241 + C47950 * C2244) * C3114 -
                      (C26523 * C3111 + C26522 * C3113) +
                      (C21591 * C2247 + C47950 * C2250) * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C48312)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47950 * C124) * C3113 +
                     (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
                     C26511 * C48104) *
                        C48206 * C42849 +
                    (C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                     C26513 * C48104) *
                        C48206 * C42850 +
                    (C26512 * C3113 + C26513 * C3111 - C28264 * C3114 -
                     C28265 * C48104) *
                        C48206 * C42851) *
                       C48364 +
                   ((C24758 - (C24757 + C24756) + C24759) * C48206 * C42849 +
                    (C30070 - (C30069 + C30068) + C30071) * C48206 * C42850 +
                    (C23748 * C3114 - (C22641 * C3111 + C22640 * C3113) +
                     C23749 * C48104) *
                        C48206 * C42851) *
                       C48360 +
                   (C24784 * C48206 * C42849 +
                    (C30074 + C30073 - C30072 - C30075) * C48206 * C42850 +
                    (C22643 * C3113 + C22644 * C3111 - C23750 * C3114 -
                     C23751 * C48104) *
                        C48206 * C42851) *
                       C48350 +
                   (C25568 * C48206 * C42849 +
                    (C31090 - (C31089 + C31088) + C31091) * C48206 * C42850 +
                    ((C21591 * C23723 + C47950 * C23724) * C3114 -
                     (C22648 * C3111 + C22647 * C3113) +
                     (C21591 * C23725 + C47950 * C23726) * C48104) *
                        C48206 * C42851) *
                       C48328) *
                  C47973) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C1289 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C1290 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C1291 -
           ((C22648 * C48017 + C22647 * C116) * C48206 * C42851 +
            (C27233 + C27232) * C48206 * C42850 + C22482 * C48206 * C42849) *
               C48328) *
              C48272 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C1290 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C1289 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C1291 +
           (C22759 * C48206 * C42849 + (C27525 + C27524) * C48206 * C42850 +
            ((C21591 * C5880 + C47950 * C5882) * C116 +
             (C21591 * C5884 + C47950 * C5886) * C48017) *
                C48206 * C42851) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C48286 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C48062) *
              C557 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C48062 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C48286) *
              C558 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C48286 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C48062) *
              C559 +
          (((C21998 + C21999) * C48206 * C42849 +
            (C26660 + C26661) * C48206 * C42850 +
            ((C21591 * C2027 + C47950 * C2028) * C116 +
             (C21591 * C2029 + C47950 * C2030) * C48017) *
                C48206 * C42851) *
               C48062 -
           (((C21591 * C442 + C47950 * C454) * C48017 +
             (C21591 * C424 + C47950 * C441) * C116) *
                C48206 * C42851 +
            (C26797 * C48017 + C26796 * C116) * C48206 * C42850 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C48206 * C42849) *
               C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C1672 +
             (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
             C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
                C48206 * C42849 +
            (C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
             C28264 * C1674 + C28265 * C48321) *
                C48206 * C42850 +
            (C26512 * C1672 + C26513 * C1669 - C28264 * C1673 - C28265 * C1670 +
             C28266 * C1674 + C28267 * C48321) *
                C48206 * C42851) *
               C48286 +
           ((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C48206 *
                C42849 +
            (C28156 - (C28155 + C28154) + C28157 - C28158 - C28159) * C48206 *
                C42850 +
            (C23748 * C1673 - (C22641 * C1669 + C22640 * C1672) +
             C23749 * C1670 - C28268 * C1674 - C28269 * C48321) *
                C48206 * C42851) *
               C48062) *
              C48272 +
          (((C26514 * C1673 -
             ((C21591 * C128 + C47950 * C139) * C1669 +
              (C21591 * C118 + C47950 * C125) * C1672) +
             C26515 * C1670 - C26516 * C1674 - C26517 * C48321) *
                C48206 * C42849 +
            (C26516 * C1673 - (C26515 * C1669 + C26514 * C1672) +
             C26517 * C1670 - C28610 * C1674 - C28611 * C48321) *
                C48206 * C42850 +
            (C28610 * C1673 - (C26517 * C1669 + C26516 * C1672) +
             C28611 * C1670 - (C21591 * C1861 + C47950 * C1870) * C1674 -
             (C21591 * C1873 + C47950 * C1879) * C48321) *
                C48206 * C42851) *
               C48286 +
           ((C23506 + C23505 - C23504 - C23507 + C23524 + C23525) * C48206 *
                C42849 +
            (C28466 + C28465 - C28464 - C28467 + C28474 + C28475) * C48206 *
                C42850 +
            (C23520 * C1672 + C23521 * C1669 - C28472 * C1673 - C28473 * C1670 +
             (C21591 * C6796 + C47950 * C6798) * C1674 +
             (C21591 * C6800 + C47950 * C6802) * C48321) *
                C48206 * C42851) *
               C48062) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C665 +
            (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
            C26511 * C48104) *
               C48206 * C42849 +
           (C26510 * C665 + C26511 * C48287 - C26512 * C666 - C26513 * C48104) *
               C48206 * C42850 +
           (C26512 * C665 + C26513 * C48287 - C28264 * C666 - C28265 * C48104) *
               C48206 * C42851) *
              C1289 +
          ((C22294 - (C22247 + C22246) + C22295) * C48206 * C42849 +
           (C26994 - (C26993 + C26992) + C26995) * C48206 * C42850 +
           (C23748 * C666 - (C22641 * C48287 + C22640 * C665) +
            C23749 * C48104) *
               C48206 * C42851) *
              C1290 +
          (C22930 * C48206 * C42849 +
           (C27722 + C27721 - C27720 - C27723) * C48206 * C42850 +
           (C22643 * C665 + C22644 * C48287 - C23750 * C666 - C23751 * C48104) *
               C48206 * C42851) *
              C1291 +
          (C23046 * C48206 * C42849 +
           (C27860 - (C27859 + C27858) + C27861) * C48206 * C42850 +
           ((C21591 * C23723 + C47950 * C23724) * C666 -
            (C22648 * C48287 + C22647 * C665) +
            (C21591 * C23725 + C47950 * C23726) * C48104) *
               C48206 * C42851) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C48206 * C42849 +
            (C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C48206 * C42850 +
            (C26512 * C665 + C26513 * C48287 - C28264 * C666 -
             C28265 * C48104) *
                C48206 * C42851) *
               C48286 +
           ((C22294 - (C22247 + C22246) + C22295) * C48206 * C42849 +
            (C26994 - (C26993 + C26992) + C26995) * C48206 * C42850 +
            (C23748 * C666 - (C22641 * C48287 + C22640 * C665) +
             C23749 * C48104) *
                C48206 * C42851) *
               C48062) *
              C258 +
          (((C26514 * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             C26515 * C48104) *
                C48206 * C42849 +
            (C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
             C26517 * C48104) *
                C48206 * C42850 +
            (C28610 * C666 - (C26517 * C48287 + C26516 * C665) +
             C28611 * C48104) *
                C48206 * C42851) *
               C48286 +
           ((C22261 + C22260 - C22298 - C22299) * C48206 * C42849 +
            (C26998 + C26997 - C26996 - C26999) * C48206 * C42850 +
            (C23520 * C665 + C23521 * C48287 - C28472 * C666 -
             C28473 * C48104) *
                C48206 * C42851) *
               C48062) *
              C259 +
          ((((C21591 * C119 + C47950 * C126) * C665 +
             (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
             C26519 * C48104) *
                C48206 * C42849 +
            (C26518 * C665 + C26519 * C48287 - C26520 * C666 -
             C26521 * C48104) *
                C48206 * C42850 +
            (C26520 * C665 + C26521 * C48287 - C43077 * C666 -
             C43078 * C48104) *
                C48206 * C42851) *
               C48286 +
           ((C22302 - (C22271 + C22270) + C22303) * C48206 * C42849 +
            (C27002 - (C27001 + C27000) + C27003) * C48206 * C42850 +
            ((C21591 * C2241 + C47950 * C2244) * C666 -
             (C26523 * C48287 + C26522 * C665) +
             (C21591 * C2247 + C47950 * C2250) * C48104) *
                C48206 * C42851) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C2133 +
            (C21591 * C127 + C47950 * C138) * C2129 - C26510 * C2134 -
            C26511 * C2130 + C26512 * C2135 + C26513 * C2131 - C28264 * C2136 -
            C28265 * C48334) *
               C48206 * C42849 +
           (C26510 * C2133 + C26511 * C2129 - C26512 * C2134 - C26513 * C2130 +
            C28264 * C2135 + C28265 * C2131 - C28266 * C2136 -
            C28267 * C48334) *
               C48206 * C42850 +
           (C26512 * C2133 + C26513 * C2129 - C28264 * C2134 - C28265 * C2130 +
            C28266 * C2135 + C28267 * C2131 - C44341 * C2136 -
            C44342 * C48334) *
               C48206 * C42851) *
              C48286 +
          ((C23730 - (C23729 + C23728) + C23731 - C23732 - C23733 + C23752 +
            C23753) *
               C48206 * C42849 +
           (C28744 - (C28743 + C28742) + C28745 - C28746 - C28747 + C28748 +
            C28749) *
               C48206 * C42850 +
           (C23748 * C2134 - (C22641 * C2129 + C22640 * C2133) +
            C23749 * C2130 - C28268 * C2135 - C28269 * C2131 +
            (C21591 * C28247 + C47950 * C28248) * C2136 +
            (C21591 * C28249 + C47950 * C28250) * C48334) *
               C48206 * C42851) *
              C48062) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C21591 * C117 + C47950 * C124) * C116 +
                (C21591 * C127 + C47950 * C138) * C48017) *
                   C48206 * C42849 +
               (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
               (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
                  C48000 * C108 -
              ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
               (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
               ((C21591 * C128 + C47950 * C139) * C48017 +
                (C21591 * C118 + C47950 * C125) * C116) *
                   C48206 * C42849) *
                  C48000 * C109 +
              (((C21591 * C119 + C47950 * C126) * C116 +
                (C21591 * C129 + C47950 * C140) * C48017) *
                   C48206 * C42849 +
               (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
               (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
                  C48000 * C110 -
              (((C21591 * C442 + C47950 * C454) * C48017 +
                (C21591 * C424 + C47950 * C441) * C116) *
                   C48206 * C42851 +
               (C26797 * C48017 + C26796 * C116) * C48206 * C42850 +
               ((C21591 * C130 + C47950 * C141) * C48017 +
                (C21591 * C120 + C47950 * C131) * C116) *
                   C48206 * C42849) *
                  C48000 * C111 +
              (((C21591 * C121 + C47950 * C132) * C116 +
                (C21591 * C133 + C47950 * C142) * C48017) *
                   C48206 * C42849 +
               ((C21591 * C425 + C47950 * C443) * C116 +
                (C21591 * C444 + C47950 * C455) * C48017) *
                   C48206 * C42850 +
               ((C21591 * C426 + C47950 * C445) * C116 +
                (C21591 * C446 + C47950 * C456) * C48017) *
                   C48206 * C42851) *
                  C48000 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C21591 * C117 + C47950 * C124) * C116 +
                 (C21591 * C127 + C47950 * C138) * C48017) *
                    C48206 * C42849 +
                (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
                (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
                   C48357 -
               ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
                (C26325 + C26324) * C48206 * C42850 +
                (C21758 + C21757) * C48206 * C42849) *
                   C48345 +
               (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
                (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
                   C48318) *
                  C258 +
              (((C21763 + C21764) * C48206 * C42849 +
                (C26328 + C26329) * C48206 * C42850 +
                (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
                   C48345 -
               ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
                (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
                ((C21591 * C128 + C47950 * C139) * C48017 +
                 (C21591 * C118 + C47950 * C125) * C116) *
                    C48206 * C42849) *
                   C48357 -
               ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
                (C26331 + C26330) * C48206 * C42850 +
                C21776 * C48206 * C42849) *
                   C48318) *
                  C259 +
              ((((C21591 * C119 + C47950 * C126) * C116 +
                 (C21591 * C129 + C47950 * C140) * C48017) *
                    C48206 * C42849 +
                (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
                (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
                   C48357 -
               ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
                (C26333 + C26332) * C48206 * C42850 +
                (C21770 + C21769) * C48206 * C42849) *
                   C48345 +
               (C21777 * C48206 * C42849 + (C26335 + C26334) * C48206 * C42850 +
                ((C21591 * C1163 + C47950 * C1178) * C116 +
                 (C21591 * C1181 + C47950 * C1190) * C48017) *
                    C48206 * C42851) *
                   C48318) *
                  C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C414 +
            (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
            C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
               C48206 * C42849 +
           (C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
            C28264 * C416 + C28265 * C48321) *
               C48206 * C42850 +
           (C26512 * C414 + C26513 * C48358 - C28264 * C415 - C28265 * C48347 +
            C28266 * C416 + C28267 * C48321) *
               C48206 * C42851) *
              C48000 * C258 +
          ((C26514 * C415 -
            ((C21591 * C128 + C47950 * C139) * C48358 +
             (C21591 * C118 + C47950 * C125) * C414) +
            C26515 * C48347 - C26516 * C416 - C26517 * C48321) *
               C48206 * C42849 +
           (C26516 * C415 - (C26515 * C48358 + C26514 * C414) +
            C26517 * C48347 - C28610 * C416 - C28611 * C48321) *
               C48206 * C42850 +
           (C28610 * C415 - (C26517 * C48358 + C26516 * C414) +
            C28611 * C48347 - (C21591 * C1861 + C47950 * C1870) * C416 -
            (C21591 * C1873 + C47950 * C1879) * C48321) *
               C48206 * C42851) *
              C48000 * C259 +
          (((C21591 * C119 + C47950 * C126) * C414 +
            (C21591 * C129 + C47950 * C140) * C48358 - C26518 * C415 -
            C26519 * C48347 + C26520 * C416 + C26521 * C48321) *
               C48206 * C42849 +
           (C26518 * C414 + C26519 * C48358 - C26520 * C415 - C26521 * C48347 +
            C43077 * C416 + C43078 * C48321) *
               C48206 * C42850 +
           (C26520 * C414 + C26521 * C48358 - C43077 * C415 - C43078 * C48347 +
            (C21591 * C1862 + C47950 * C1871) * C416 +
            (C21591 * C1874 + C47950 * C1880) * C48321) *
               C48206 * C42851) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C947 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C948 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C48318) *
              C48354 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C948 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C947 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C48318) *
              C48341 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C947 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C948 +
           (C21777 * C48206 * C42849 + (C26335 + C26334) * C48206 * C42850 +
            ((C21591 * C1163 + C47950 * C1178) * C116 +
             (C21591 * C1181 + C47950 * C1190) * C48017) *
                C48206 * C42851) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C48206 * C42849 +
           (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
           (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
              C1015 -
          ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
           (C26325 + C26324) * C48206 * C42850 +
           (C21758 + C21757) * C48206 * C42849) *
              C1016 +
          (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
           (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
              C1017 -
          ((C22648 * C48017 + C22647 * C116) * C48206 * C42851 +
           (C27233 + C27232) * C48206 * C42850 + C22482 * C48206 * C42849) *
              C1018 +
          (C22499 * C48206 * C42849 + (C27235 + C27234) * C48206 * C42850 +
           ((C21591 * C22609 + C47950 * C22610) * C116 +
            (C21591 * C22611 + C47950 * C22612) * C48017) *
               C48206 * C42851) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C414 +
            (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
            C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
               C48206 * C42849 +
           (C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
            C28264 * C416 + C28265 * C48321) *
               C48206 * C42850 +
           (C26512 * C414 + C26513 * C48358 - C28264 * C415 - C28265 * C48347 +
            C28266 * C416 + C28267 * C48321) *
               C48206 * C42851) *
              C947 +
          ((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C48206 *
               C42849 +
           (C27384 - (C27383 + C27382) + C27385 - C27386 - C27387) * C48206 *
               C42850 +
           (C23748 * C415 - (C22641 * C48358 + C22640 * C414) +
            C23749 * C48347 - C28268 * C416 - C28269 * C48321) *
               C48206 * C42851) *
              C948 +
          (C22660 * C48206 * C42849 +
           (C27390 + C27389 - C27388 - C27391 + C27392 + C27393) * C48206 *
               C42850 +
           (C22643 * C414 + C22644 * C48358 - C23750 * C415 - C23751 * C48347 +
            (C21591 * C23353 + C47950 * C23354) * C416 +
            (C21591 * C23355 + C47950 * C23356) * C48321) *
               C48206 * C42851) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C1672 +
            (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
            C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
               C48206 * C42849 +
           (C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
            C28264 * C1674 + C28265 * C48321) *
               C48206 * C42850 +
           (C26512 * C1672 + C26513 * C1669 - C28264 * C1673 - C28265 * C1670 +
            C28266 * C1674 + C28267 * C48321) *
               C48206 * C42851) *
              C48000 * C48354 +
          ((C26514 * C1673 -
            ((C21591 * C128 + C47950 * C139) * C1669 +
             (C21591 * C118 + C47950 * C125) * C1672) +
            C26515 * C1670 - C26516 * C1674 - C26517 * C48321) *
               C48206 * C42849 +
           (C26516 * C1673 - (C26515 * C1669 + C26514 * C1672) +
            C26517 * C1670 - C28610 * C1674 - C28611 * C48321) *
               C48206 * C42850 +
           (C28610 * C1673 - (C26517 * C1669 + C26516 * C1672) +
            C28611 * C1670 - (C21591 * C1861 + C47950 * C1870) * C1674 -
            (C21591 * C1873 + C47950 * C1879) * C48321) *
               C48206 * C42851) *
              C48000 * C48341 +
          (((C21591 * C119 + C47950 * C126) * C1672 +
            (C21591 * C129 + C47950 * C140) * C1669 - C26518 * C1673 -
            C26519 * C1670 + C26520 * C1674 + C26521 * C48321) *
               C48206 * C42849 +
           (C26518 * C1672 + C26519 * C1669 - C26520 * C1673 - C26521 * C1670 +
            C43077 * C1674 + C43078 * C48321) *
               C48206 * C42850 +
           (C26520 * C1672 + C26521 * C1669 - C43077 * C1673 - C43078 * C1670 +
            (C21591 * C1862 + C47950 * C1871) * C1674 +
            (C21591 * C1874 + C47950 * C1880) * C48321) *
               C48206 * C42851) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C1672 +
            (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
            C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
               C48206 * C42849 +
           (C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
            C28264 * C1674 + C28265 * C48321) *
               C48206 * C42850 +
           (C26512 * C1672 + C26513 * C1669 - C28264 * C1673 - C28265 * C1670 +
            C28266 * C1674 + C28267 * C48321) *
               C48206 * C42851) *
              C48357 +
          ((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C48206 *
               C42849 +
           (C28156 - (C28155 + C28154) + C28157 - C28158 - C28159) * C48206 *
               C42850 +
           (C23748 * C1673 - (C22641 * C1669 + C22640 * C1672) +
            C23749 * C1670 - C28268 * C1674 - C28269 * C48321) *
               C48206 * C42851) *
              C48345 +
          (C23291 * C48206 * C42849 +
           (C28162 + C28161 - C28160 - C28163 + C28164 + C28165) * C48206 *
               C42850 +
           (C22643 * C1672 + C22644 * C1669 - C23750 * C1673 - C23751 * C1670 +
            (C21591 * C23353 + C47950 * C23354) * C1674 +
            (C21591 * C23355 + C47950 * C23356) * C48321) *
               C48206 * C42851) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C21591 * C117 + C47950 * C124) * C1852 +
           (C21591 * C127 + C47950 * C138) * C1847 - C26510 * C1853 -
           C26511 * C1848 + C26512 * C1854 + C26513 * C1849 - C28264 * C1855 -
           C28265 * C1850 + C28266 * C1856 + C28267 * C1851) *
              C48206 * C42849 +
          (C26510 * C1852 + C26511 * C1847 - C26512 * C1853 - C26513 * C1848 +
           C28264 * C1854 + C28265 * C1849 - C28266 * C1855 - C28267 * C1850 +
           C44341 * C1856 + C44342 * C1851) *
              C48206 * C42850 +
          (C26512 * C1852 + C26513 * C1847 - C28264 * C1853 - C28265 * C1848 +
           C28266 * C1854 + C28267 * C1849 - C44341 * C1855 - C44342 * C1850 +
           (C21591 * C44332 + C47950 * C44333) * C1856 +
           (C21591 * C44334 + C47950 * C44335) * C1851) *
              C48206 * C42851) *
         C48000 * C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C48206 * C42849 +
            (C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C48206 * C42850 +
            (C26512 * C665 + C26513 * C48287 - C28264 * C666 -
             C28265 * C48104) *
                C48206 * C42851) *
               C947 +
           ((C22294 - (C22247 + C22246) + C22295) * C48206 * C42849 +
            (C26994 - (C26993 + C26992) + C26995) * C48206 * C42850 +
            (C23748 * C666 - (C22641 * C48287 + C22640 * C665) +
             C23749 * C48104) *
                C48206 * C42851) *
               C948 +
           (C22930 * C48206 * C42849 +
            (C27722 + C27721 - C27720 - C27723) * C48206 * C42850 +
            (C22643 * C665 + C22644 * C48287 - C23750 * C666 -
             C23751 * C48104) *
                C48206 * C42851) *
               C48318) *
              C48272 +
          (((C26514 * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             C26515 * C48104) *
                C48206 * C42849 +
            (C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
             C26517 * C48104) *
                C48206 * C42850 +
            (C28610 * C666 - (C26517 * C48287 + C26516 * C665) +
             C28611 * C48104) *
                C48206 * C42851) *
               C947 +
           ((C22261 + C22260 - C22298 - C22299) * C48206 * C42849 +
            (C26998 + C26997 - C26996 - C26999) * C48206 * C42850 +
            (C23520 * C665 + C23521 * C48287 - C28472 * C666 -
             C28473 * C48104) *
                C48206 * C42851) *
               C948 +
           (C22931 * C48206 * C42849 +
            (C27726 - (C27725 + C27724) + C27727) * C48206 * C42850 +
            ((C21591 * C7270 + C47950 * C7272) * C666 -
             (C23523 * C48287 + C23522 * C665) +
             (C21591 * C7274 + C47950 * C7276) * C48104) *
                C48206 * C42851) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C665 +
            (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
            C26511 * C48104) *
               C48206 * C42849 +
           (C26510 * C665 + C26511 * C48287 - C26512 * C666 - C26513 * C48104) *
               C48206 * C42850 +
           (C26512 * C665 + C26513 * C48287 - C28264 * C666 - C28265 * C48104) *
               C48206 * C42851) *
              C48000 * C557 +
          ((C26514 * C666 -
            ((C21591 * C128 + C47950 * C139) * C48287 +
             (C21591 * C118 + C47950 * C125) * C665) +
            C26515 * C48104) *
               C48206 * C42849 +
           (C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
            C26517 * C48104) *
               C48206 * C42850 +
           (C28610 * C666 - (C26517 * C48287 + C26516 * C665) +
            C28611 * C48104) *
               C48206 * C42851) *
              C48000 * C558 +
          (((C21591 * C119 + C47950 * C126) * C665 +
            (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
            C26519 * C48104) *
               C48206 * C42849 +
           (C26518 * C665 + C26519 * C48287 - C26520 * C666 - C26521 * C48104) *
               C48206 * C42850 +
           (C26520 * C665 + C26521 * C48287 - C43077 * C666 - C43078 * C48104) *
               C48206 * C42851) *
              C48000 * C559 +
          ((C26796 * C666 -
            ((C21591 * C130 + C47950 * C141) * C48287 +
             (C21591 * C120 + C47950 * C131) * C665) +
            C26797 * C48104) *
               C48206 * C42849 +
           (C43279 * C666 - (C26797 * C48287 + C26796 * C665) +
            C43280 * C48104) *
               C48206 * C42850 +
           ((C21591 * C2137 + C47950 * C2138) * C666 -
            (C43280 * C48287 + C43279 * C665) +
            (C21591 * C2139 + C47950 * C2140) * C48104) *
               C48206 * C42851) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C2133 +
            (C21591 * C127 + C47950 * C138) * C2129 - C26510 * C2134 -
            C26511 * C2130 + C26512 * C2135 + C26513 * C2131 - C28264 * C2136 -
            C28265 * C48334) *
               C48206 * C42849 +
           (C26510 * C2133 + C26511 * C2129 - C26512 * C2134 - C26513 * C2130 +
            C28264 * C2135 + C28265 * C2131 - C28266 * C2136 -
            C28267 * C48334) *
               C48206 * C42850 +
           (C26512 * C2133 + C26513 * C2129 - C28264 * C2134 - C28265 * C2130 +
            C28266 * C2135 + C28267 * C2131 - C44341 * C2136 -
            C44342 * C48334) *
               C48206 * C42851) *
              C48000 * C48272 +
          ((C26514 * C2134 -
            ((C21591 * C128 + C47950 * C139) * C2129 +
             (C21591 * C118 + C47950 * C125) * C2133) +
            C26515 * C2130 - C26516 * C2135 - C26517 * C2131 + C28610 * C2136 +
            C28611 * C48334) *
               C48206 * C42849 +
           (C26516 * C2134 - (C26515 * C2129 + C26514 * C2133) +
            C26517 * C2130 - C28610 * C2135 - C28611 * C2131 + C44591 * C2136 +
            C44592 * C48334) *
               C48206 * C42850 +
           (C28610 * C2134 - (C26517 * C2129 + C26516 * C2133) +
            C28611 * C2130 - C44591 * C2135 - C44592 * C2131 +
            (C21591 * C12370 + C47950 * C12372) * C2136 +
            (C21591 * C12374 + C47950 * C12376) * C48334) *
               C48206 * C42851) *
              C48000 * C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C48357 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C48345 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C48318) *
              C258 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C48345 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C48357 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C48318) *
              C259 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C48357 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C48345 +
           (C21777 * C48206 * C42849 + (C26335 + C26334) * C48206 * C42850 +
            ((C21591 * C1163 + C47950 * C1178) * C116 +
             (C21591 * C1181 + C47950 * C1190) * C48017) *
                C48206 * C42851) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C48206 * C42849 +
           (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
           (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
              C48000 * C108 -
          ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
           (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
           ((C21591 * C128 + C47950 * C139) * C48017 +
            (C21591 * C118 + C47950 * C125) * C116) *
               C48206 * C42849) *
              C48000 * C109 +
          (((C21591 * C119 + C47950 * C126) * C116 +
            (C21591 * C129 + C47950 * C140) * C48017) *
               C48206 * C42849 +
           (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
           (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
              C48000 * C110 -
          (((C21591 * C442 + C47950 * C454) * C48017 +
            (C21591 * C424 + C47950 * C441) * C116) *
               C48206 * C42851 +
           (C26797 * C48017 + C26796 * C116) * C48206 * C42850 +
           ((C21591 * C130 + C47950 * C141) * C48017 +
            (C21591 * C120 + C47950 * C131) * C116) *
               C48206 * C42849) *
              C48000 * C111 +
          (((C21591 * C121 + C47950 * C132) * C116 +
            (C21591 * C133 + C47950 * C142) * C48017) *
               C48206 * C42849 +
           ((C21591 * C425 + C47950 * C443) * C116 +
            (C21591 * C444 + C47950 * C455) * C48017) *
               C48206 * C42850 +
           ((C21591 * C426 + C47950 * C445) * C116 +
            (C21591 * C446 + C47950 * C456) * C48017) *
               C48206 * C42851) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C947 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C948 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C48318) *
              C48354 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C948 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C947 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C48318) *
              C48341 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C947 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C948 +
           (C21777 * C48206 * C42849 + (C26335 + C26334) * C48206 * C42850 +
            ((C21591 * C1163 + C47950 * C1178) * C116 +
             (C21591 * C1181 + C47950 * C1190) * C48017) *
                C48206 * C42851) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C48206 * C42849 +
           (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
           (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
              C1015 -
          ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
           (C26325 + C26324) * C48206 * C42850 +
           (C21758 + C21757) * C48206 * C42849) *
              C1016 +
          (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
           (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
              C1017 -
          ((C22648 * C48017 + C22647 * C116) * C48206 * C42851 +
           (C27233 + C27232) * C48206 * C42850 + C22482 * C48206 * C42849) *
              C1018 +
          (C22499 * C48206 * C42849 + (C27235 + C27234) * C48206 * C42850 +
           ((C21591 * C22609 + C47950 * C22610) * C116 +
            (C21591 * C22611 + C47950 * C22612) * C48017) *
               C48206 * C42851) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C1672 +
            (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
            C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
               C48206 * C42849 +
           (C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
            C28264 * C1674 + C28265 * C48321) *
               C48206 * C42850 +
           (C26512 * C1672 + C26513 * C1669 - C28264 * C1673 - C28265 * C1670 +
            C28266 * C1674 + C28267 * C48321) *
               C48206 * C42851) *
              C48000 * C48354 +
          ((C26514 * C1673 -
            ((C21591 * C128 + C47950 * C139) * C1669 +
             (C21591 * C118 + C47950 * C125) * C1672) +
            C26515 * C1670 - C26516 * C1674 - C26517 * C48321) *
               C48206 * C42849 +
           (C26516 * C1673 - (C26515 * C1669 + C26514 * C1672) +
            C26517 * C1670 - C28610 * C1674 - C28611 * C48321) *
               C48206 * C42850 +
           (C28610 * C1673 - (C26517 * C1669 + C26516 * C1672) +
            C28611 * C1670 - (C21591 * C1861 + C47950 * C1870) * C1674 -
            (C21591 * C1873 + C47950 * C1879) * C48321) *
               C48206 * C42851) *
              C48000 * C48341 +
          (((C21591 * C119 + C47950 * C126) * C1672 +
            (C21591 * C129 + C47950 * C140) * C1669 - C26518 * C1673 -
            C26519 * C1670 + C26520 * C1674 + C26521 * C48321) *
               C48206 * C42849 +
           (C26518 * C1672 + C26519 * C1669 - C26520 * C1673 - C26521 * C1670 +
            C43077 * C1674 + C43078 * C48321) *
               C48206 * C42850 +
           (C26520 * C1672 + C26521 * C1669 - C43077 * C1673 - C43078 * C1670 +
            (C21591 * C1862 + C47950 * C1871) * C1674 +
            (C21591 * C1874 + C47950 * C1880) * C48321) *
               C48206 * C42851) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C1672 +
            (C21591 * C127 + C47950 * C138) * C1669 - C26510 * C1673 -
            C26511 * C1670 + C26512 * C1674 + C26513 * C48321) *
               C48206 * C42849 +
           (C26510 * C1672 + C26511 * C1669 - C26512 * C1673 - C26513 * C1670 +
            C28264 * C1674 + C28265 * C48321) *
               C48206 * C42850 +
           (C26512 * C1672 + C26513 * C1669 - C28264 * C1673 - C28265 * C1670 +
            C28266 * C1674 + C28267 * C48321) *
               C48206 * C42851) *
              C48357 +
          ((C23271 - (C23270 + C23269) + C23272 - C23273 - C23274) * C48206 *
               C42849 +
           (C28156 - (C28155 + C28154) + C28157 - C28158 - C28159) * C48206 *
               C42850 +
           (C23748 * C1673 - (C22641 * C1669 + C22640 * C1672) +
            C23749 * C1670 - C28268 * C1674 - C28269 * C48321) *
               C48206 * C42851) *
              C48345 +
          (C23291 * C48206 * C42849 +
           (C28162 + C28161 - C28160 - C28163 + C28164 + C28165) * C48206 *
               C42850 +
           (C22643 * C1672 + C22644 * C1669 - C23750 * C1673 - C23751 * C1670 +
            (C21591 * C23353 + C47950 * C23354) * C1674 +
            (C21591 * C23355 + C47950 * C23356) * C48321) *
               C48206 * C42851) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47950 * C124) * C3113 +
                      (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
                      C26511 * C48104) *
                         C48206 * C42849 +
                     (C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                      C26513 * C48104) *
                         C48206 * C42850 +
                     (C26512 * C3113 + C26513 * C3111 - C28264 * C3114 -
                      C28265 * C48104) *
                         C48206 * C42851) *
                        C48286 +
                    ((C24758 - (C24757 + C24756) + C24759) * C48206 * C42849 +
                     (C30070 - (C30069 + C30068) + C30071) * C48206 * C42850 +
                     (C23748 * C3114 - (C22641 * C3111 + C22640 * C3113) +
                      C23749 * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C47978 +
                   (((C26514 * C3114 -
                      ((C21591 * C128 + C47950 * C139) * C3111 +
                       (C21591 * C118 + C47950 * C125) * C3113) +
                      C26515 * C48104) *
                         C48206 * C42849 +
                     (C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
                      C26517 * C48104) *
                         C48206 * C42850 +
                     (C28610 * C3114 - (C26517 * C3111 + C26516 * C3113) +
                      C28611 * C48104) *
                         C48206 * C42851) *
                        C48286 +
                    ((C24770 + C24769 - C24768 - C24771) * C48206 * C42849 +
                     (C30078 + C30077 - C30076 - C30079) * C48206 * C42850 +
                     (C23520 * C3113 + C23521 * C3111 - C28472 * C3114 -
                      C28473 * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C47986 +
                   ((((C21591 * C119 + C47950 * C126) * C3113 +
                      (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
                      C26519 * C48104) *
                         C48206 * C42849 +
                     (C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
                      C26521 * C48104) *
                         C48206 * C42850 +
                     (C26520 * C3113 + C26521 * C3111 - C43077 * C3114 -
                      C43078 * C48104) *
                         C48206 * C42851) *
                        C48286 +
                    ((C25032 - (C25031 + C25030) + C25033) * C48206 * C42849 +
                     (C30410 - (C30409 + C30408) + C30411) * C48206 * C42850 +
                     ((C21591 * C2241 + C47950 * C2244) * C3114 -
                      (C26523 * C3111 + C26522 * C3113) +
                      (C21591 * C2247 + C47950 * C2250) * C48104) *
                         C48206 * C42851) *
                        C48062) *
                       C2720)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C47032 +
             (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
             C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
                C48206 * C42849 +
            (C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
             C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
                C48206 * C42850 +
            (C26512 * C47032 + C26513 * C48100 - C28264 * C47024 -
             C28265 * C48107 + C28266 * C47038 + C28267 * C3625) *
                C48206 * C42851) *
               C48286 +
           ((C25296 - (C25295 + C25294) + C25297 - C25298 - C25299) * C48206 *
                C42849 +
            (C30754 - (C30753 + C30752) + C30755 - C30756 - C30757) * C48206 *
                C42850 +
            (C23748 * C47024 - (C22641 * C48100 + C22640 * C47032) +
             C23749 * C48107 - C28268 * C47038 - C28269 * C3625) *
                C48206 * C42851) *
               C48062) *
              C2457 +
          (((C26514 * C47024 -
             ((C21591 * C128 + C47950 * C139) * C48100 +
              (C21591 * C118 + C47950 * C125) * C47032) +
             C26515 * C48107 - C26516 * C47038 - C26517 * C3625) *
                C48206 * C42849 +
            (C26516 * C47024 - (C26515 * C48100 + C26514 * C47032) +
             C26517 * C48107 - C28610 * C47038 - C28611 * C3625) *
                C48206 * C42850 +
            (C28610 * C47024 - (C26517 * C48100 + C26516 * C47032) +
             C28611 * C48107 - C44591 * C47038 - C44592 * C3625) *
                C48206 * C42851) *
               C48286 +
           ((C25308 + C25307 - C25306 - C25309 + C25310 + C25311) * C48206 *
                C42849 +
            (C30760 + C30759 - C30758 - C30761 + C30762 + C30763) * C48206 *
                C42850 +
            (C23520 * C47032 + C23521 * C48100 - C28472 * C47024 -
             C28473 * C48107 + (C21591 * C6796 + C47950 * C6798) * C47038 +
             (C21591 * C6800 + C47950 * C6802) * C3625) *
                C48206 * C42851) *
               C48062) *
              C47983)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47950 * C124) * C3113 +
                      (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
                      C26511 * C48104) *
                         C48206 * C42849 +
                     (C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                      C26513 * C48104) *
                         C48206 * C42850 +
                     (C26512 * C3113 + C26513 * C3111 - C28264 * C3114 -
                      C28265 * C48104) *
                         C48206 * C42851) *
                        C48357 +
                    ((C24758 - (C24757 + C24756) + C24759) * C48206 * C42849 +
                     (C30070 - (C30069 + C30068) + C30071) * C48206 * C42850 +
                     (C23748 * C3114 - (C22641 * C3111 + C22640 * C3113) +
                      C23749 * C48104) *
                         C48206 * C42851) *
                        C48345 +
                    (C24784 * C48206 * C42849 +
                     (C30074 + C30073 - C30072 - C30075) * C48206 * C42850 +
                     (C22643 * C3113 + C22644 * C3111 - C23750 * C3114 -
                      C23751 * C48104) *
                         C48206 * C42851) *
                        C48318) *
                       C2457 +
                   (((C26514 * C3114 -
                      ((C21591 * C128 + C47950 * C139) * C3111 +
                       (C21591 * C118 + C47950 * C125) * C3113) +
                      C26515 * C48104) *
                         C48206 * C42849 +
                     (C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
                      C26517 * C48104) *
                         C48206 * C42850 +
                     (C28610 * C3114 - (C26517 * C3111 + C26516 * C3113) +
                      C28611 * C48104) *
                         C48206 * C42851) *
                        C48357 +
                    ((C24770 + C24769 - C24768 - C24771) * C48206 * C42849 +
                     (C30078 + C30077 - C30076 - C30079) * C48206 * C42850 +
                     (C23520 * C3113 + C23521 * C3111 - C28472 * C3114 -
                      C28473 * C48104) *
                         C48206 * C42851) *
                        C48345 +
                    (C24785 * C48206 * C42849 +
                     (C30082 - (C30081 + C30080) + C30083) * C48206 * C42850 +
                     ((C21591 * C7270 + C47950 * C7272) * C3114 -
                      (C23523 * C3111 + C23522 * C3113) +
                      (C21591 * C7274 + C47950 * C7276) * C48104) *
                         C48206 * C42851) *
                        C48318) *
                       C47983)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47950 * C124) * C3113 +
                     (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
                     C26511 * C48104) *
                        C48206 * C42849 +
                    (C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                     C26513 * C48104) *
                        C48206 * C42850 +
                    (C26512 * C3113 + C26513 * C3111 - C28264 * C3114 -
                     C28265 * C48104) *
                        C48206 * C42851) *
                       C48000 * C48363 +
                   ((C26514 * C3114 -
                     ((C21591 * C128 + C47950 * C139) * C3111 +
                      (C21591 * C118 + C47950 * C125) * C3113) +
                     C26515 * C48104) *
                        C48206 * C42849 +
                    (C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
                     C26517 * C48104) *
                        C48206 * C42850 +
                    (C28610 * C3114 - (C26517 * C3111 + C26516 * C3113) +
                     C28611 * C48104) *
                        C48206 * C42851) *
                       C48000 * C48356 +
                   (((C21591 * C119 + C47950 * C126) * C3113 +
                     (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
                     C26519 * C48104) *
                        C48206 * C42849 +
                    (C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
                     C26521 * C48104) *
                        C48206 * C42850 +
                    (C26520 * C3113 + C26521 * C3111 - C43077 * C3114 -
                     C43078 * C48104) *
                        C48206 * C42851) *
                       C48000 * C48343 +
                   ((C26796 * C3114 -
                     ((C21591 * C130 + C47950 * C141) * C3111 +
                      (C21591 * C120 + C47950 * C131) * C3113) +
                     C26797 * C48104) *
                        C48206 * C42849 +
                    (C43279 * C3114 - (C26797 * C3111 + C26796 * C3113) +
                     C43280 * C48104) *
                        C48206 * C42850 +
                    ((C21591 * C2137 + C47950 * C2138) * C3114 -
                     (C43280 * C3111 + C43279 * C3113) +
                     (C21591 * C2139 + C47950 * C2140) * C48104) *
                        C48206 * C42851) *
                       C48000 * C48322)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47950 * C124) * C3363 +
                     (C21591 * C127 + C47950 * C138) * C48365 - C26510 * C3364 -
                     C26511 * C48362 + C26512 * C3365 + C26513 * C48353 -
                     C28264 * C3366 - C28265 * C48334) *
                        C48206 * C42849 +
                    (C26510 * C3363 + C26511 * C48365 - C26512 * C3364 -
                     C26513 * C48362 + C28264 * C3365 + C28265 * C48353 -
                     C28266 * C3366 - C28267 * C48334) *
                        C48206 * C42850 +
                    (C26512 * C3363 + C26513 * C48365 - C28264 * C3364 -
                     C28265 * C48362 + C28266 * C3365 + C28267 * C48353 -
                     C44341 * C3366 - C44342 * C48334) *
                        C48206 * C42851) *
                       C48000 * C2457 +
                   ((C26514 * C3364 -
                     ((C21591 * C128 + C47950 * C139) * C48365 +
                      (C21591 * C118 + C47950 * C125) * C3363) +
                     C26515 * C48362 - C26516 * C3365 - C26517 * C48353 +
                     C28610 * C3366 + C28611 * C48334) *
                        C48206 * C42849 +
                    (C26516 * C3364 - (C26515 * C48365 + C26514 * C3363) +
                     C26517 * C48362 - C28610 * C3365 - C28611 * C48353 +
                     C44591 * C3366 + C44592 * C48334) *
                        C48206 * C42850 +
                    (C28610 * C3364 - (C26517 * C48365 + C26516 * C3363) +
                     C28611 * C48362 - C44591 * C3365 - C44592 * C48353 +
                     (C21591 * C12370 + C47950 * C12372) * C3366 +
                     (C21591 * C12374 + C47950 * C12376) * C48334) *
                        C48206 * C42851) *
                       C48000 * C47983)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C47032 +
            (C21591 * C127 + C47950 * C138) * C48100 - C26510 * C47024 -
            C26511 * C48107 + C26512 * C47038 + C26513 * C3625) *
               C48206 * C42849 +
           (C26510 * C47032 + C26511 * C48100 - C26512 * C47024 -
            C26513 * C48107 + C28264 * C47038 + C28265 * C3625) *
               C48206 * C42850 +
           (C26512 * C47032 + C26513 * C48100 - C28264 * C47024 -
            C28265 * C48107 + C28266 * C47038 + C28267 * C3625) *
               C48206 * C42851) *
              C48000 * C47978 +
          ((C26514 * C47024 -
            ((C21591 * C128 + C47950 * C139) * C48100 +
             (C21591 * C118 + C47950 * C125) * C47032) +
            C26515 * C48107 - C26516 * C47038 - C26517 * C3625) *
               C48206 * C42849 +
           (C26516 * C47024 - (C26515 * C48100 + C26514 * C47032) +
            C26517 * C48107 - C28610 * C47038 - C28611 * C3625) *
               C48206 * C42850 +
           (C28610 * C47024 - (C26517 * C48100 + C26516 * C47032) +
            C28611 * C48107 - C44591 * C47038 - C44592 * C3625) *
               C48206 * C42851) *
              C48000 * C47986 +
          (((C21591 * C119 + C47950 * C126) * C47032 +
            (C21591 * C129 + C47950 * C140) * C48100 - C26518 * C47024 -
            C26519 * C48107 + C26520 * C47038 + C26521 * C3625) *
               C48206 * C42849 +
           (C26518 * C47032 + C26519 * C48100 - C26520 * C47024 -
            C26521 * C48107 + C43077 * C47038 + C43078 * C3625) *
               C48206 * C42850 +
           (C26520 * C47032 + C26521 * C48100 - C43077 * C47024 -
            C43078 * C48107 + (C21591 * C1862 + C47950 * C1871) * C47038 +
            (C21591 * C1874 + C47950 * C1880) * C3625) *
               C48206 * C42851) *
              C48000 * C2720)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C21591 * C117 + C47950 * C124) * C3113 +
                     (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
                     C26511 * C48104) *
                        C48206 * C42849 +
                    (C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                     C26513 * C48104) *
                        C48206 * C42850 +
                    (C26512 * C3113 + C26513 * C3111 - C28264 * C3114 -
                     C28265 * C48104) *
                        C48206 * C42851) *
                       C48000 * C48363 +
                   ((C26514 * C3114 -
                     ((C21591 * C128 + C47950 * C139) * C3111 +
                      (C21591 * C118 + C47950 * C125) * C3113) +
                     C26515 * C48104) *
                        C48206 * C42849 +
                    (C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
                     C26517 * C48104) *
                        C48206 * C42850 +
                    (C28610 * C3114 - (C26517 * C3111 + C26516 * C3113) +
                     C28611 * C48104) *
                        C48206 * C42851) *
                       C48000 * C48356 +
                   (((C21591 * C119 + C47950 * C126) * C3113 +
                     (C21591 * C129 + C47950 * C140) * C3111 - C26518 * C3114 -
                     C26519 * C48104) *
                        C48206 * C42849 +
                    (C26518 * C3113 + C26519 * C3111 - C26520 * C3114 -
                     C26521 * C48104) *
                        C48206 * C42850 +
                    (C26520 * C3113 + C26521 * C3111 - C43077 * C3114 -
                     C43078 * C48104) *
                        C48206 * C42851) *
                       C48000 * C48343 +
                   ((C26796 * C3114 -
                     ((C21591 * C130 + C47950 * C141) * C3111 +
                      (C21591 * C120 + C47950 * C131) * C3113) +
                     C26797 * C48104) *
                        C48206 * C42849 +
                    (C43279 * C3114 - (C26797 * C3111 + C26796 * C3113) +
                     C43280 * C48104) *
                        C48206 * C42850 +
                    ((C21591 * C2137 + C47950 * C2138) * C3114 -
                     (C43280 * C3111 + C43279 * C3113) +
                     (C21591 * C2139 + C47950 * C2140) * C48104) *
                        C48206 * C42851) *
                       C48000 * C48322)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C21591 * C117 + C47950 * C124) * C3113 +
                      (C21591 * C127 + C47950 * C138) * C3111 - C26510 * C3114 -
                      C26511 * C48104) *
                         C48206 * C42849 +
                     (C26510 * C3113 + C26511 * C3111 - C26512 * C3114 -
                      C26513 * C48104) *
                         C48206 * C42850 +
                     (C26512 * C3113 + C26513 * C3111 - C28264 * C3114 -
                      C28265 * C48104) *
                         C48206 * C42851) *
                        C48357 +
                    ((C24758 - (C24757 + C24756) + C24759) * C48206 * C42849 +
                     (C30070 - (C30069 + C30068) + C30071) * C48206 * C42850 +
                     (C23748 * C3114 - (C22641 * C3111 + C22640 * C3113) +
                      C23749 * C48104) *
                         C48206 * C42851) *
                        C48345 +
                    (C24784 * C48206 * C42849 +
                     (C30074 + C30073 - C30072 - C30075) * C48206 * C42850 +
                     (C22643 * C3113 + C22644 * C3111 - C23750 * C3114 -
                      C23751 * C48104) *
                         C48206 * C42851) *
                        C48318) *
                       C2457 +
                   (((C26514 * C3114 -
                      ((C21591 * C128 + C47950 * C139) * C3111 +
                       (C21591 * C118 + C47950 * C125) * C3113) +
                      C26515 * C48104) *
                         C48206 * C42849 +
                     (C26516 * C3114 - (C26515 * C3111 + C26514 * C3113) +
                      C26517 * C48104) *
                         C48206 * C42850 +
                     (C28610 * C3114 - (C26517 * C3111 + C26516 * C3113) +
                      C28611 * C48104) *
                         C48206 * C42851) *
                        C48357 +
                    ((C24770 + C24769 - C24768 - C24771) * C48206 * C42849 +
                     (C30078 + C30077 - C30076 - C30079) * C48206 * C42850 +
                     (C23520 * C3113 + C23521 * C3111 - C28472 * C3114 -
                      C28473 * C48104) *
                         C48206 * C42851) *
                        C48345 +
                    (C24785 * C48206 * C42849 +
                     (C30082 - (C30081 + C30080) + C30083) * C48206 * C42850 +
                     ((C21591 * C7270 + C47950 * C7272) * C3114 -
                      (C23523 * C3111 + C23522 * C3113) +
                      (C21591 * C7274 + C47950 * C7276) * C48104) *
                         C48206 * C42851) *
                        C48318) *
                       C47983)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C48286 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C48062) *
              C557 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C48062 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C48286) *
              C558 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C48286 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C48062) *
              C559 +
          (((C21998 + C21999) * C48206 * C42849 +
            (C26660 + C26661) * C48206 * C42850 +
            ((C21591 * C2027 + C47950 * C2028) * C116 +
             (C21591 * C2029 + C47950 * C2030) * C48017) *
                C48206 * C42851) *
               C48062 -
           (((C21591 * C442 + C47950 * C454) * C48017 +
             (C21591 * C424 + C47950 * C441) * C116) *
                C48206 * C42851 +
            (C26797 * C48017 + C26796 * C116) * C48206 * C42850 +
            ((C21591 * C130 + C47950 * C141) * C48017 +
             (C21591 * C120 + C47950 * C131) * C116) *
                C48206 * C42849) *
               C48286) *
              C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C1289 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C1290 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C1291 -
           ((C22648 * C48017 + C22647 * C116) * C48206 * C42851 +
            (C27233 + C27232) * C48206 * C42850 + C22482 * C48206 * C42849) *
               C48328) *
              C48272 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C1290 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C1289 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C1291 +
           (C22759 * C48206 * C42849 + (C27525 + C27524) * C48206 * C42850 +
            ((C21591 * C5880 + C47950 * C5882) * C116 +
             (C21591 * C5884 + C47950 * C5886) * C48017) *
                C48206 * C42851) *
               C48328) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C48206 * C42849 +
            (C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C48206 * C42850 +
            (C26512 * C665 + C26513 * C48287 - C28264 * C666 -
             C28265 * C48104) *
                C48206 * C42851) *
               C48286 +
           ((C22294 - (C22247 + C22246) + C22295) * C48206 * C42849 +
            (C26994 - (C26993 + C26992) + C26995) * C48206 * C42850 +
            (C23748 * C666 - (C22641 * C48287 + C22640 * C665) +
             C23749 * C48104) *
                C48206 * C42851) *
               C48062) *
              C258 +
          (((C26514 * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             C26515 * C48104) *
                C48206 * C42849 +
            (C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
             C26517 * C48104) *
                C48206 * C42850 +
            (C28610 * C666 - (C26517 * C48287 + C26516 * C665) +
             C28611 * C48104) *
                C48206 * C42851) *
               C48286 +
           ((C22261 + C22260 - C22298 - C22299) * C48206 * C42849 +
            (C26998 + C26997 - C26996 - C26999) * C48206 * C42850 +
            (C23520 * C665 + C23521 * C48287 - C28472 * C666 -
             C28473 * C48104) *
                C48206 * C42851) *
               C48062) *
              C259 +
          ((((C21591 * C119 + C47950 * C126) * C665 +
             (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
             C26519 * C48104) *
                C48206 * C42849 +
            (C26518 * C665 + C26519 * C48287 - C26520 * C666 -
             C26521 * C48104) *
                C48206 * C42850 +
            (C26520 * C665 + C26521 * C48287 - C43077 * C666 -
             C43078 * C48104) *
                C48206 * C42851) *
               C48286 +
           ((C22302 - (C22271 + C22270) + C22303) * C48206 * C42849 +
            (C27002 - (C27001 + C27000) + C27003) * C48206 * C42850 +
            ((C21591 * C2241 + C47950 * C2244) * C666 -
             (C26523 * C48287 + C26522 * C665) +
             (C21591 * C2247 + C47950 * C2250) * C48104) *
                C48206 * C42851) *
               C48062) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C665 +
            (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
            C26511 * C48104) *
               C48206 * C42849 +
           (C26510 * C665 + C26511 * C48287 - C26512 * C666 - C26513 * C48104) *
               C48206 * C42850 +
           (C26512 * C665 + C26513 * C48287 - C28264 * C666 - C28265 * C48104) *
               C48206 * C42851) *
              C1289 +
          ((C22294 - (C22247 + C22246) + C22295) * C48206 * C42849 +
           (C26994 - (C26993 + C26992) + C26995) * C48206 * C42850 +
           (C23748 * C666 - (C22641 * C48287 + C22640 * C665) +
            C23749 * C48104) *
               C48206 * C42851) *
              C1290 +
          (C22930 * C48206 * C42849 +
           (C27722 + C27721 - C27720 - C27723) * C48206 * C42850 +
           (C22643 * C665 + C22644 * C48287 - C23750 * C666 - C23751 * C48104) *
               C48206 * C42851) *
              C1291 +
          (C23046 * C48206 * C42849 +
           (C27860 - (C27859 + C27858) + C27861) * C48206 * C42850 +
           ((C21591 * C23723 + C47950 * C23724) * C666 -
            (C22648 * C48287 + C22647 * C665) +
            (C21591 * C23725 + C47950 * C23726) * C48104) *
               C48206 * C42851) *
              C48328) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C48357 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C48345 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C48318) *
              C258 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C48345 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C48357 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C48318) *
              C259 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C48357 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C48345 +
           (C21777 * C48206 * C42849 + (C26335 + C26334) * C48206 * C42850 +
            ((C21591 * C1163 + C47950 * C1178) * C116 +
             (C21591 * C1181 + C47950 * C1190) * C48017) *
                C48206 * C42851) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C48206 * C42849 +
           (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
           (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
              C48000 * C108 -
          ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
           (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
           ((C21591 * C128 + C47950 * C139) * C48017 +
            (C21591 * C118 + C47950 * C125) * C116) *
               C48206 * C42849) *
              C48000 * C109 +
          (((C21591 * C119 + C47950 * C126) * C116 +
            (C21591 * C129 + C47950 * C140) * C48017) *
               C48206 * C42849 +
           (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
           (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
              C48000 * C110 -
          (((C21591 * C442 + C47950 * C454) * C48017 +
            (C21591 * C424 + C47950 * C441) * C116) *
               C48206 * C42851 +
           (C26797 * C48017 + C26796 * C116) * C48206 * C42850 +
           ((C21591 * C130 + C47950 * C141) * C48017 +
            (C21591 * C120 + C47950 * C131) * C116) *
               C48206 * C42849) *
              C48000 * C111 +
          (((C21591 * C121 + C47950 * C132) * C116 +
            (C21591 * C133 + C47950 * C142) * C48017) *
               C48206 * C42849 +
           ((C21591 * C425 + C47950 * C443) * C116 +
            (C21591 * C444 + C47950 * C455) * C48017) *
               C48206 * C42850 +
           ((C21591 * C426 + C47950 * C445) * C116 +
            (C21591 * C446 + C47950 * C456) * C48017) *
               C48206 * C42851) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C414 +
            (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
            C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
               C48206 * C42849 +
           (C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
            C28264 * C416 + C28265 * C48321) *
               C48206 * C42850 +
           (C26512 * C414 + C26513 * C48358 - C28264 * C415 - C28265 * C48347 +
            C28266 * C416 + C28267 * C48321) *
               C48206 * C42851) *
              C48000 * C258 +
          ((C26514 * C415 -
            ((C21591 * C128 + C47950 * C139) * C48358 +
             (C21591 * C118 + C47950 * C125) * C414) +
            C26515 * C48347 - C26516 * C416 - C26517 * C48321) *
               C48206 * C42849 +
           (C26516 * C415 - (C26515 * C48358 + C26514 * C414) +
            C26517 * C48347 - C28610 * C416 - C28611 * C48321) *
               C48206 * C42850 +
           (C28610 * C415 - (C26517 * C48358 + C26516 * C414) +
            C28611 * C48347 - (C21591 * C1861 + C47950 * C1870) * C416 -
            (C21591 * C1873 + C47950 * C1879) * C48321) *
               C48206 * C42851) *
              C48000 * C259 +
          (((C21591 * C119 + C47950 * C126) * C414 +
            (C21591 * C129 + C47950 * C140) * C48358 - C26518 * C415 -
            C26519 * C48347 + C26520 * C416 + C26521 * C48321) *
               C48206 * C42849 +
           (C26518 * C414 + C26519 * C48358 - C26520 * C415 - C26521 * C48347 +
            C43077 * C416 + C43078 * C48321) *
               C48206 * C42850 +
           (C26520 * C414 + C26521 * C48358 - C43077 * C415 - C43078 * C48347 +
            (C21591 * C1862 + C47950 * C1871) * C416 +
            (C21591 * C1874 + C47950 * C1880) * C48321) *
               C48206 * C42851) *
              C48000 * C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C947 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C948 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C48318) *
              C48354 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C948 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C947 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C48318) *
              C48341 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C947 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C948 +
           (C21777 * C48206 * C42849 + (C26335 + C26334) * C48206 * C42850 +
            ((C21591 * C1163 + C47950 * C1178) * C116 +
             (C21591 * C1181 + C47950 * C1190) * C48017) *
                C48206 * C42851) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C48206 * C42849 +
           (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
           (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
              C1015 -
          ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
           (C26325 + C26324) * C48206 * C42850 +
           (C21758 + C21757) * C48206 * C42849) *
              C1016 +
          (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
           (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
              C1017 -
          ((C22648 * C48017 + C22647 * C116) * C48206 * C42851 +
           (C27233 + C27232) * C48206 * C42850 + C22482 * C48206 * C42849) *
              C1018 +
          (C22499 * C48206 * C42849 + (C27235 + C27234) * C48206 * C42850 +
           ((C21591 * C22609 + C47950 * C22610) * C116 +
            (C21591 * C22611 + C47950 * C22612) * C48017) *
               C48206 * C42851) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C414 +
            (C21591 * C127 + C47950 * C138) * C48358 - C26510 * C415 -
            C26511 * C48347 + C26512 * C416 + C26513 * C48321) *
               C48206 * C42849 +
           (C26510 * C414 + C26511 * C48358 - C26512 * C415 - C26513 * C48347 +
            C28264 * C416 + C28265 * C48321) *
               C48206 * C42850 +
           (C26512 * C414 + C26513 * C48358 - C28264 * C415 - C28265 * C48347 +
            C28266 * C416 + C28267 * C48321) *
               C48206 * C42851) *
              C947 +
          ((C22616 - (C22615 + C22614) + C22617 - C22649 - C22650) * C48206 *
               C42849 +
           (C27384 - (C27383 + C27382) + C27385 - C27386 - C27387) * C48206 *
               C42850 +
           (C23748 * C415 - (C22641 * C48358 + C22640 * C414) +
            C23749 * C48347 - C28268 * C416 - C28269 * C48321) *
               C48206 * C42851) *
              C948 +
          (C22660 * C48206 * C42849 +
           (C27390 + C27389 - C27388 - C27391 + C27392 + C27393) * C48206 *
               C42850 +
           (C22643 * C414 + C22644 * C48358 - C23750 * C415 - C23751 * C48347 +
            (C21591 * C23353 + C47950 * C23354) * C416 +
            (C21591 * C23355 + C47950 * C23356) * C48321) *
               C48206 * C42851) *
              C48318) *
         C47973) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C665 +
            (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
            C26511 * C48104) *
               C48206 * C42849 +
           (C26510 * C665 + C26511 * C48287 - C26512 * C666 - C26513 * C48104) *
               C48206 * C42850 +
           (C26512 * C665 + C26513 * C48287 - C28264 * C666 - C28265 * C48104) *
               C48206 * C42851) *
              C48000 * C557 +
          ((C26514 * C666 -
            ((C21591 * C128 + C47950 * C139) * C48287 +
             (C21591 * C118 + C47950 * C125) * C665) +
            C26515 * C48104) *
               C48206 * C42849 +
           (C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
            C26517 * C48104) *
               C48206 * C42850 +
           (C28610 * C666 - (C26517 * C48287 + C26516 * C665) +
            C28611 * C48104) *
               C48206 * C42851) *
              C48000 * C558 +
          (((C21591 * C119 + C47950 * C126) * C665 +
            (C21591 * C129 + C47950 * C140) * C48287 - C26518 * C666 -
            C26519 * C48104) *
               C48206 * C42849 +
           (C26518 * C665 + C26519 * C48287 - C26520 * C666 - C26521 * C48104) *
               C48206 * C42850 +
           (C26520 * C665 + C26521 * C48287 - C43077 * C666 - C43078 * C48104) *
               C48206 * C42851) *
              C48000 * C559 +
          ((C26796 * C666 -
            ((C21591 * C130 + C47950 * C141) * C48287 +
             (C21591 * C120 + C47950 * C131) * C665) +
            C26797 * C48104) *
               C48206 * C42849 +
           (C43279 * C666 - (C26797 * C48287 + C26796 * C665) +
            C43280 * C48104) *
               C48206 * C42850 +
           ((C21591 * C2137 + C47950 * C2138) * C666 -
            (C43280 * C48287 + C43279 * C665) +
            (C21591 * C2139 + C47950 * C2140) * C48104) *
               C48206 * C42851) *
              C48000 * C48322)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C665 +
             (C21591 * C127 + C47950 * C138) * C48287 - C26510 * C666 -
             C26511 * C48104) *
                C48206 * C42849 +
            (C26510 * C665 + C26511 * C48287 - C26512 * C666 -
             C26513 * C48104) *
                C48206 * C42850 +
            (C26512 * C665 + C26513 * C48287 - C28264 * C666 -
             C28265 * C48104) *
                C48206 * C42851) *
               C947 +
           ((C22294 - (C22247 + C22246) + C22295) * C48206 * C42849 +
            (C26994 - (C26993 + C26992) + C26995) * C48206 * C42850 +
            (C23748 * C666 - (C22641 * C48287 + C22640 * C665) +
             C23749 * C48104) *
                C48206 * C42851) *
               C948 +
           (C22930 * C48206 * C42849 +
            (C27722 + C27721 - C27720 - C27723) * C48206 * C42850 +
            (C22643 * C665 + C22644 * C48287 - C23750 * C666 -
             C23751 * C48104) *
                C48206 * C42851) *
               C48318) *
              C48272 +
          (((C26514 * C666 -
             ((C21591 * C128 + C47950 * C139) * C48287 +
              (C21591 * C118 + C47950 * C125) * C665) +
             C26515 * C48104) *
                C48206 * C42849 +
            (C26516 * C666 - (C26515 * C48287 + C26514 * C665) +
             C26517 * C48104) *
                C48206 * C42850 +
            (C28610 * C666 - (C26517 * C48287 + C26516 * C665) +
             C28611 * C48104) *
                C48206 * C42851) *
               C947 +
           ((C22261 + C22260 - C22298 - C22299) * C48206 * C42849 +
            (C26998 + C26997 - C26996 - C26999) * C48206 * C42850 +
            (C23520 * C665 + C23521 * C48287 - C28472 * C666 -
             C28473 * C48104) *
                C48206 * C42851) *
               C948 +
           (C22931 * C48206 * C42849 +
            (C27726 - (C27725 + C27724) + C27727) * C48206 * C42850 +
            ((C21591 * C7270 + C47950 * C7272) * C666 -
             (C23523 * C48287 + C23522 * C665) +
             (C21591 * C7274 + C47950 * C7276) * C48104) *
                C48206 * C42851) *
               C48318) *
              C47983)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C48206 * C42849 +
           (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
           (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
              C48000 * C108 -
          ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
           (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
           ((C21591 * C128 + C47950 * C139) * C48017 +
            (C21591 * C118 + C47950 * C125) * C116) *
               C48206 * C42849) *
              C48000 * C109 +
          (((C21591 * C119 + C47950 * C126) * C116 +
            (C21591 * C129 + C47950 * C140) * C48017) *
               C48206 * C42849 +
           (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
           (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
              C48000 * C110 -
          (((C21591 * C442 + C47950 * C454) * C48017 +
            (C21591 * C424 + C47950 * C441) * C116) *
               C48206 * C42851 +
           (C26797 * C48017 + C26796 * C116) * C48206 * C42850 +
           ((C21591 * C130 + C47950 * C141) * C48017 +
            (C21591 * C120 + C47950 * C131) * C116) *
               C48206 * C42849) *
              C48000 * C111 +
          (((C21591 * C121 + C47950 * C132) * C116 +
            (C21591 * C133 + C47950 * C142) * C48017) *
               C48206 * C42849 +
           ((C21591 * C425 + C47950 * C443) * C116 +
            (C21591 * C444 + C47950 * C455) * C48017) *
               C48206 * C42850 +
           ((C21591 * C426 + C47950 * C445) * C116 +
            (C21591 * C446 + C47950 * C456) * C48017) *
               C48206 * C42851) *
              C48000 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C48357 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C48345 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C48318) *
              C258 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C48345 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C48357 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C48318) *
              C259 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C48357 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C48345 +
           (C21777 * C48206 * C42849 + (C26335 + C26334) * C48206 * C42850 +
            ((C21591 * C1163 + C47950 * C1178) * C116 +
             (C21591 * C1181 + C47950 * C1190) * C48017) *
                C48206 * C42851) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C21591 * C117 + C47950 * C124) * C116 +
             (C21591 * C127 + C47950 * C138) * C48017) *
                C48206 * C42849 +
            (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
            (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
               C947 -
           ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
            (C26325 + C26324) * C48206 * C42850 +
            (C21758 + C21757) * C48206 * C42849) *
               C948 +
           (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
            (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
               C48318) *
              C48354 +
          (((C21763 + C21764) * C48206 * C42849 +
            (C26328 + C26329) * C48206 * C42850 +
            (C23520 * C116 + C23521 * C48017) * C48206 * C42851) *
               C948 -
           ((C26517 * C48017 + C26516 * C116) * C48206 * C42851 +
            (C26515 * C48017 + C26514 * C116) * C48206 * C42850 +
            ((C21591 * C128 + C47950 * C139) * C48017 +
             (C21591 * C118 + C47950 * C125) * C116) *
                C48206 * C42849) *
               C947 -
           ((C23523 * C48017 + C23522 * C116) * C48206 * C42851 +
            (C26331 + C26330) * C48206 * C42850 + C21776 * C48206 * C42849) *
               C48318) *
              C48341 +
          ((((C21591 * C119 + C47950 * C126) * C116 +
             (C21591 * C129 + C47950 * C140) * C48017) *
                C48206 * C42849 +
            (C26518 * C116 + C26519 * C48017) * C48206 * C42850 +
            (C26520 * C116 + C26521 * C48017) * C48206 * C42851) *
               C947 -
           ((C26523 * C48017 + C26522 * C116) * C48206 * C42851 +
            (C26333 + C26332) * C48206 * C42850 +
            (C21770 + C21769) * C48206 * C42849) *
               C948 +
           (C21777 * C48206 * C42849 + (C26335 + C26334) * C48206 * C42850 +
            ((C21591 * C1163 + C47950 * C1178) * C116 +
             (C21591 * C1181 + C47950 * C1190) * C48017) *
                C48206 * C42851) *
               C48318) *
              C48312)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C21591 * C117 + C47950 * C124) * C116 +
            (C21591 * C127 + C47950 * C138) * C48017) *
               C48206 * C42849 +
           (C26510 * C116 + C26511 * C48017) * C48206 * C42850 +
           (C26512 * C116 + C26513 * C48017) * C48206 * C42851) *
              C1015 -
          ((C22641 * C48017 + C22640 * C116) * C48206 * C42851 +
           (C26325 + C26324) * C48206 * C42850 +
           (C21758 + C21757) * C48206 * C42849) *
              C1016 +
          (C21775 * C48206 * C42849 + (C26327 + C26326) * C48206 * C42850 +
           (C22643 * C116 + C22644 * C48017) * C48206 * C42851) *
              C1017 -
          ((C22648 * C48017 + C22647 * C116) * C48206 * C42851 +
           (C27233 + C27232) * C48206 * C42850 + C22482 * C48206 * C42849) *
              C1018 +
          (C22499 * C48206 * C42849 + (C27235 + C27234) * C48206 * C42850 +
           ((C21591 * C22609 + C47950 * C22610) * C116 +
            (C21591 * C22611 + C47950 * C22612) * C48017) *
               C48206 * C42851) *
              C1019) *
         C47973) /
            (p * q * std::sqrt(p + q));
}
