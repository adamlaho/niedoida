/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AC_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_13_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46945 = 0 * ce;
    const double C46944 = ce * de;
    const double C46943 = 0 * de;
    const double C46942 = 0 * de;
    const double C46941 = ce + de;
    const double C46940 = 0 * de;
    const double C46939 = xC - xD;
    const double C47000 = 0 * de;
    const double C47060 = ae + be;
    const double C47059 = yA - yB;
    const double C47074 = ae * be;
    const double C47072 = 0 * be;
    const double C47088 = yP - yQ;
    const double C47087 = p + q;
    const double C47086 = p * q;
    const double C47085 = xP - xQ;
    const double C47093 = bs[3];
    const double C47104 = bs[4];
    const double C47112 = bs[5];
    const double C47131 = bs[6];
    const double C47161 = bs[7];
    const double C47287 = zP - zQ;
    const double C47503 = bs[2];
    const double C119 = bs[0];
    const double C47895 = xA - xB;
    const double C47918 = yC - yD;
    const double C47930 = zC - zD;
    const double C48104 = zA - zB;
    const double C46952 = C46945 / C46941;
    const double C46949 = C46943 / C46941;
    const double C46947 = 2 * C46941;
    const double C46946 = std::pow(C46941, 2);
    const double C46951 = C46944 * C46939;
    const double C46950 = C46939 * C46943;
    const double C46948 = C46939 * C46942;
    const double C47867 = C46939 * de;
    const double C47866 = C46939 * ce;
    const double C47865 = std::pow(C46939, 2);
    const double C47001 = C47000 / C46941;
    const double C47073 = std::pow(C47060, 2);
    const double C47096 = C46941 * C47060;
    const double C140 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (yP - yQ) * (xP - xQ) * ae * ce) /
                         C46941) /
                        C47060;
    const double C47905 = 2 * C47060;
    const double C48117 = std::pow(C47059, 2);
    const double C48219 = C47059 * be;
    const double C48217 = C47059 * ae;
    const double C47076 = C47074 * C47059;
    const double C47094 = C47088 * ae;
    const double C47299 = std::pow(C47088, 2);
    const double C47089 = 2 * C47086;
    const double C47095 = C47088 * C47085;
    const double C47114 = std::pow(C47085, 2);
    const double C47195 = C47085 * ce;
    const double C47324 = std::pow(C47287, 2);
    const double C47896 = std::pow(C47895, 2);
    const double C48197 = C47895 * be;
    const double C48196 = C47895 * ae;
    const double C47919 = std::pow(C47918, 2);
    const double C47974 = C47918 * de;
    const double C47972 = C47918 * ce;
    const double C47931 = std::pow(C47930, 2);
    const double C48014 = C47930 * de;
    const double C48012 = C47930 * ce;
    const double C48134 = std::pow(C48104, 2);
    const double C48220 = C48104 * be;
    const double C48218 = C48104 * ae;
    const double C47879 = std::pow(C46947, -1);
    const double C48191 = std::pow(C46947, -2);
    const double C46953 = 2 * C46946;
    const double C48195 = C46946 * C46947;
    const double C48194 = 4 * C46946;
    const double C46955 = C46950 / C46941;
    const double C46954 = C46948 / C46941;
    const double C48184 = std::pow(C47866, 2);
    const double C47868 = C47865 * C46944;
    const double C47075 = 2 * C47073;
    const double C48198 = std::pow(C47905, -1);
    const double C48118 = C48117 * C47074;
    const double C47098 = C47093 * C47094;
    const double C47106 = C47104 * C47094;
    const double C47117 = C47112 * C47094;
    const double C47137 = C47131 * C47094;
    const double C47169 = C47161 * C47094;
    const double C47090 = C47089 / C47087;
    const double C126 = (-(bs[1] * C47094 * C47089) / C47087) / C47060;
    const double C120 = -(C47085 * bs[1] * C47089) / C47087;
    const double C297 = -(C47088 * bs[1] * C47089) / C47087;
    const double C486 = -(C47287 * bs[1] * C47089) / C47087;
    const double C47099 = C47095 * ae;
    const double C47198 = C47104 * C47195;
    const double C47202 = C47112 * C47195;
    const double C47212 = C47093 * C47195;
    const double C47225 = C47131 * C47195;
    const double C47245 = C47161 * C47195;
    const double C127 = (bs[1] * C47195 * C47089) / (C47087 * C46941);
    const double C47897 = C47896 * C47074;
    const double C47920 = C47919 * C46944;
    const double C48199 = std::pow(C47972, 2);
    const double C47932 = C47931 * C46944;
    const double C48201 = std::pow(C48012, 2);
    const double C48135 = C48134 * C47074;
    const double C46962 = C46943 / C46953;
    const double C46959 = C46942 / C46953;
    const double C46958 = C46940 / C46953;
    const double C48230 = 4 * C48195;
    const double C48229 = C46941 * C48194;
    const double C46960 = 0 - C46955;
    const double C46957 = 0 - C46954;
    const double C47869 = C47868 / C46941;
    const double C48119 = C48118 / C47060;
    const double C47092 = -C47090;
    const double C47103 = std::pow(C47090, 4);
    const double C47130 = std::pow(C47090, 6);
    const double C141 =
        (-(C47085 * std::pow(-C47090, 3) * bs[3] * C47088 * C47085 * ae * ce) /
         C46941) /
            C47060 -
        (std::pow(C47090, 2) * bs[2] * C47088 * ae * ce) / (C46941 * C47060);
    const double C47504 = std::pow(C47090, 2);
    const double C128 =
        (C47085 * std::pow(C47090, 2) * bs[2] * C47094) / C47060;
    const double C129 =
        (ce * bs[1] * C47089) / (C47087 * C46941) -
        (C47085 * std::pow(C47090, 2) * bs[2] * C47195) / C46941;
    const double C47101 = C47099 * ce;
    const double C47898 = C47897 / C47060;
    const double C47921 = C47920 / C46941;
    const double C47933 = C47932 / C46941;
    const double C48136 = C48135 / C47060;
    const double C46965 = C46960 * ce;
    const double C46964 = C46957 * ce;
    const double C47870 = -C47869;
    const double C48120 = -C48119;
    const double C47097 = std::pow(C47092, 3);
    const double C47111 = std::pow(C47092, 5);
    const double C47160 = std::pow(C47092, 7);
    const double C47108 = C47103 * C47106;
    const double C47199 = C47104 * C47103;
    const double C47200 = C47103 * C47198;
    const double C47140 = C47130 * C47137;
    const double C47230 = C47130 * C47225;
    const double C47246 = C47131 * C47130;
    const double C47505 = C47503 * C47504;
    const double C307 = -(C47088 * C47504 * C47503 * C47195) / C46941;
    const double C308 = (C47088 * C47504 * C47503 * C47094) / C47060 -
                        (ae * bs[1] * C47089) / (C47087 * C47060);
    const double C496 = -(C47287 * C47504 * C47503 * C47195) / C46941;
    const double C497 = (C47287 * C47504 * C47503 * C47094) / C47060;
    const double C47105 = C47104 * C47101;
    const double C47115 = C47112 * C47101;
    const double C47134 = C47131 * C47101;
    const double C47166 = C47161 * C47101;
    const double C47899 = -C47898;
    const double C47922 = -C47921;
    const double C47934 = -C47933;
    const double C48137 = -C48136;
    const double C46969 = C46965 / C46941;
    const double C46968 = C46964 / C46941;
    const double C47871 = std::exp(C47870);
    const double C48121 = std::exp(C48120);
    const double C47100 = C47097 * C47098;
    const double C47196 = C47093 * C47097;
    const double C47213 = C47097 * C47212;
    const double C326 =
        (-(C47088 * C47097 * C47093 * C47101) / C46941) / C47060 -
        (ae * std::pow(C47090, 2) * bs[2] * C47085 * ce) / C47096;
    const double C515 =
        (-((zP - zQ) * C47097 * C47093 * C47101) / C46941) / C47060;
    const double C47119 = C47111 * C47117;
    const double C47205 = C47112 * C47111;
    const double C47206 = C47111 * C47202;
    const double C47173 = C47160 * C47169;
    const double C47250 = C47160 * C47245;
    const double C47113 = C47108 * ce;
    const double C47110 = C47085 * C47108;
    const double C47584 = C47088 * C47108;
    const double C47204 = C47085 * C47199;
    const double C47203 = C47199 * ce;
    const double C47511 = C47199 * C47114;
    const double C47587 = C47199 * C47299;
    const double C47660 = C47088 * C47199;
    const double C47659 = C47199 * ae;
    const double C47841 = C47199 * C47324;
    const double C47855 = C47287 * C47199;
    const double C47215 = C47085 * C47200;
    const double C47298 = ae * C47200;
    const double C47296 = C47088 * C47200;
    const double C47143 = C47140 * C47114;
    const double C47162 = C47140 * ce;
    const double C47158 = C47085 * C47140;
    const double C47717 = C47088 * C47140;
    const double C47754 = C47140 * C47324;
    const double C47233 = C47085 * C47230;
    const double C47356 = C47230 * C47299;
    const double C47430 = ae * C47230;
    const double C47428 = C47088 * C47230;
    const double C47460 = C47230 * C47324;
    const double C47474 = C47287 * C47230;
    const double C47253 = C47246 * C47114;
    const double C47252 = C47085 * C47246;
    const double C47251 = C47246 * ce;
    const double C47721 = C47246 * C47299;
    const double C121 = C47505 * C47114 - (bs[1] * C47089) / C47087;
    const double C296 = C47088 * C47085 * C47505;
    const double C301 = C47505 * C47299 - (bs[1] * C47089) / C47087;
    const double C485 = C47287 * C47085 * C47505;
    const double C490 = C47505 * C47324 - (bs[1] * C47089) / C47087;
    const double C935 = C47287 * C47088 * C47505;
    const double C47107 = C47103 * C47105;
    const double C47118 = C47111 * C47115;
    const double C47139 = C47130 * C47134;
    const double C47172 = C47160 * C47166;
    const double C47900 = std::exp(C47899);
    const double C47923 = std::exp(C47922);
    const double C47935 = std::exp(C47934);
    const double C48138 = std::exp(C48137);
    const double C46973 = C46969 - C46959;
    const double C46972 = C46968 - C46958;
    const double C46956 = C46951 * C47871;
    const double C47873 = C47871 * C47866;
    const double C47872 = C47871 / C46947;
    const double C47881 = C47879 * C47871;
    const double C48187 = C47871 * C47867;
    const double C48227 = C48191 * C47871;
    const double C48221 = C47871 * C48184;
    const double C151 = C48121 * C141;
    const double C149 = C48121 * C128;
    const double C10809 = C48121 * C497;
    const double C47077 = C47076 * C48121;
    const double C113 = -(2 * ae * be * (yA - yB) * C48121) / (ae + be);
    const double C4783 =
        ((C48121 - (C47059 * 2 * ae * be * C47059 * C48121) / C47060) * ae) /
            C47060 -
        (0 * be) / (2 * std::pow(C47060, 2));
    const double C4784 =
        (0 * ae) / C47060 - (ae * be * C47059 * C48121) / std::pow(C47060, 2);
    const double C16335 =
        (-(0 * be) / C47060) / (2 * C47060) -
        ((C48121 - (C47059 * 2 * ae * be * C47059 * C48121) / C47060) * be) /
            C47060;
    const double C16336 =
        (-(2 * ae * be * C47059 * C48121) / C47060) / (2 * C47060) -
        (0 * be) / C47060;
    const double C48253 = C48198 * C48121;
    const double C48252 = C48121 * C48217;
    const double C16331 = -(C48121 * C48219) / C47060;
    const double C142 =
        (-(C47085 * C47100 * ce) / C46941) / C47060 -
        (C47097 * C47093 * C47101) / C47096 +
        C47085 * ((-(C47085 * std::pow(C47090, 4) * bs[4] * C47101) / C46941) /
                      C47060 -
                  (C47100 * ce) / C47096);
    const double C130 =
        (std::pow(C47090, 2) * bs[2] * C47094 + C47100 * C47114) / C47060;
    const double C132 =
        (2 * C47085 * C47100 + C47085 * (C47100 + C47108 * C47114)) / C47060;
    const double C306 =
        (C47088 * C47085 * C47100 + C47085 * C47505 * ae) / C47060;
    const double C316 =
        (C47504 * C47503 * C47094 + C47088 * (C47088 * C47100 + C47505 * ae) +
         C47088 * C47505 * ae) /
        C47060;
    const double C495 = (C47287 * C47085 * C47100) / C47060;
    const double C499 = (C47287 * (C47100 + C47108 * C47114)) / C47060;
    const double C505 = (C47504 * C47503 * C47094 + C47100 * C47324) / C47060;
    const double C940 = (C47287 * (C47088 * C47100 + C47505 * ae)) / C47060;
    const double C2026 =
        (2 * C47287 * C47100 + C47287 * (C47100 + C47108 * C47324)) / C47060;
    const double C47216 = C47196 * ce;
    const double C47510 = C47085 * C47196;
    const double C47586 = C47088 * C47196;
    const double C47585 = C47196 * ae;
    const double C310 = (C47088 * (C47100 + C47108 * C47114) +
                         (C47505 + C47196 * C47114) * ae) /
                        C47060;
    const double C1172 =
        (2 * (C47088 * C47100 + C47505 * ae) +
         C47088 * (C47100 + C47088 * (C47088 * C47108 + C47196 * ae) +
                   C47088 * C47196 * ae) +
         (C47505 + C47196 * C47299) * ae) /
        C47060;
    const double C122 =
        2 * C47085 * C47505 + C47085 * (C47505 + C47196 * C47114);
    const double C298 = C47088 * (C47505 + C47196 * C47114);
    const double C487 = C47287 * (C47505 + C47196 * C47114);
    const double C1163 =
        2 * C47088 * C47505 + C47088 * (C47505 + C47196 * C47299);
    const double C1300 = C47287 * (C47505 + C47196 * C47299);
    const double C2017 =
        2 * C47287 * C47505 + C47287 * (C47505 + C47196 * C47324);
    const double C2018 =
        3 * (C47505 + C47196 * C47324) +
        C47287 * (2 * C47287 * C47196 + C47287 * (C47196 + C47199 * C47324));
    const double C131 = -(C47085 * (C47085 * C47213 + C47505 * ce) +
                          C47504 * C47503 * C47195 + C47085 * C47505 * ce) /
                        C46941;
    const double C309 = -(C47088 * (C47085 * C47213 + C47505 * ce)) / C46941;
    const double C317 = -(C47213 * C47299 + C47504 * C47503 * C47195) / C46941;
    const double C498 = -(C47287 * (C47085 * C47213 + C47505 * ce)) / C46941;
    const double C506 = -(C47213 * C47324 + C47504 * C47503 * C47195) / C46941;
    const double C941 = -(C47287 * C47088 * C47213) / C46941;
    const double C1171 = (-2 * C47088 * C47213) / C46941 -
                         (C47088 * (C47200 * C47299 + C47213)) / C46941;
    const double C1314 = -(C47287 * (C47200 * C47299 + C47213)) / C46941;
    const double C2025 = (-2 * C47287 * C47213) / C46941 -
                         (C47287 * (C47200 * C47324 + C47213)) / C46941;
    const double C10811 = C48121 * C515;
    const double C47121 = C47119 * C47114;
    const double C47132 = C47119 * ce;
    const double C47128 = C47085 * C47119;
    const double C47658 = C47088 * C47119;
    const double C47704 = C47119 * C47324;
    const double C47753 = C47287 * C47119;
    const double C2027 =
        (3 * (C47100 + C47108 * C47324) +
         C47287 * (2 * C47287 * C47108 + C47287 * (C47108 + C47119 * C47324))) /
        C47060;
    const double C47207 = C47205 * C47114;
    const double C47227 = C47085 * C47205;
    const double C47226 = C47205 * ce;
    const double C47661 = C47205 * C47299;
    const double C47719 = C47088 * C47205;
    const double C47718 = C47205 * ae;
    const double C47856 = C47205 * C47324;
    const double C47208 = C47085 * C47206;
    const double C47302 = C47206 * C47299;
    const double C47355 = ae * C47206;
    const double C47353 = C47088 * C47206;
    const double C47404 = C47287 * C47206;
    const double C47707 = C47206 * C47324;
    const double C2028 =
        (-3 * (C47200 * C47324 + C47213)) / C46941 +
        C47287 * ((-2 * C47287 * C47200) / C46941 -
                  (C47287 * (C47206 * C47324 + C47200)) / C46941);
    const double C47176 = C47173 * C47114;
    const double C47254 = C47085 * C47250;
    const double C47432 = C47250 * C47299;
    const double C47116 = C47113 / C47096;
    const double C507 = (C47085 * C47100 + C47110 * C47324) / C47060;
    const double C47220 = C47204 * ce;
    const double C47515 = 2 * C47204;
    const double C47594 = C47088 * C47204;
    const double C47593 = C47204 * ae;
    const double C47512 = C47196 + C47511;
    const double C47589 = C47196 + C47587;
    const double C47665 = 2 * C47660;
    const double C47663 = C47660 * ae;
    const double C47842 = C47196 + C47841;
    const double C47857 = 2 * C47855;
    const double C47301 = C47298 / C47096;
    const double C1308 = -(C47296 * C47324 + C47088 * C47213) / C46941;
    const double C47146 = C47119 + C47143;
    const double C47167 = C47162 / C47096;
    const double C47168 = 2 * C47158;
    const double C47165 = C47158 * ce;
    const double C47673 = C47088 * C47158;
    const double C47710 = C47158 * C47324;
    const double C47756 = C47119 + C47754;
    const double C47361 = C47356 + C47206;
    const double C47436 = C47430 / C47096;
    const double C47438 = -2 * C47428;
    const double C47434 = ae * C47428;
    const double C47471 = C47287 * C47428;
    const double C47750 = C47428 * C47324;
    const double C47462 = C47460 + C47206;
    const double C47477 = ae * C47474;
    const double C47256 = C47205 + C47253;
    const double C47255 = C47252 * ce;
    const double C47676 = C47252 * C47299;
    const double C47725 = C47205 + C47721;
    const double C143 =
        2 * ((-(C47085 * C47107) / C46941) / C47060 - (C47100 * ce) / C47096) -
        ((C47100 + C47108 * std::pow(C47085, 2)) * ce) / C47096 +
        C47085 *
            ((-(C47085 * C47108 * ce) / C46941) / C47060 - C47107 / C47096 +
             C47085 *
                 ((-(C47085 * std::pow(C47092, 5) * bs[5] * C47101) / C46941) /
                      C47060 -
                  (C47108 * ce) / C47096));
    const double C327 = C47088 * ((-(C47085 * C47107) / C46941) / C47060 -
                                  (C47100 * ce) / C47096) -
                        (ae * (C47085 * C47097 * C47093 * C47085 * ce +
                               bs[2] * std::pow(C47090, 2) * ce)) /
                            C47096;
    const double C331 = (-(ae * C47088 * C47213) / C46941) / C47060 -
                        (C47097 * C47093 * C47101) / C47096 +
                        C47088 * ((-(C47088 * C47107) / C46941) / C47060 -
                                  (ae * C47213) / C47096);
    const double C516 = (zP - zQ) * ((-(C47085 * C47107) / C46941) / C47060 -
                                     (C47100 * ce) / C47096);
    const double C520 = (-(C47107 * std::pow(zP - zQ, 2)) / C46941) / C47060 -
                        (C47097 * C47093 * C47101) / C47096;
    const double C950 = (-(C47088 * C47287 * C47107) / C46941) / C47060 -
                        (ae * C47287 * C47213) / C47096;
    const double C47120 = C47085 * C47118;
    const double C47129 = C47118 / C47096;
    const double C47297 = C47088 * C47118;
    const double C47336 = C47287 * C47118;
    const double C1181 =
        2 * ((-(C47088 * C47107) / C46941) / C47060 - (ae * C47213) / C47096) -
        (ae * (C47200 * std::pow(C47088, 2) + C47213)) / C47096 +
        C47088 *
            ((-(ae * C47088 * C47200) / C46941) / C47060 - C47107 / C47096 +
             C47088 * ((-(C47088 * C47118) / C46941) / C47060 -
                       (ae * C47200) / C47096));
    const double C1324 =
        C47088 * ((-(C47118 * C47324) / C46941) / C47060 - C47107 / C47096) -
        (ae * (C47200 * C47324 + C47213)) / C47096;
    const double C1327 =
        (-(ae * C47287 * C47296) / C46941) / C47060 -
        (C47287 * C47107) / C47096 +
        C47088 * ((-(C47088 * C47287 * C47118) / C46941) / C47060 -
                  (ae * C47287 * C47200) / C47096);
    const double C2035 =
        (-2 * C47287 * C47107) / C47096 +
        C47287 * ((-(C47118 * C47324) / C46941) / C47060 - C47107 / C47096);
    const double C47142 = C47085 * C47139;
    const double C47159 = C47139 / C47096;
    const double C47354 = C47088 * C47139;
    const double C47394 = C47139 * C47324;
    const double C47403 = C47287 * C47139;
    const double C47175 = C47085 * C47172;
    const double C47429 = C47088 * C47172;
    const double C47459 = C47172 * C47324;
    const double C47473 = C47287 * C47172;
    const double C48232 = C48198 * C47900;
    const double C48231 = C47900 * C48196;
    const double C4781 = -(C47900 * C48197) / C47060;
    const double C47973 = C47923 / C46947;
    const double C47975 = C47923 * C47972;
    const double C47982 = C47879 * C47923;
    const double C48205 = C47923 * C47974;
    const double C48235 = C48191 * C47923;
    const double C48233 = C47923 * C48199;
    const double C48013 = C47935 / C46947;
    const double C48015 = C47935 * C48012;
    const double C48022 = C47879 * C47935;
    const double C48211 = C47935 * C48014;
    const double C48238 = C48191 * C47935;
    const double C48236 = C47935 * C48201;
    const double C48255 = C48198 * C48138;
    const double C48254 = C48138 * C48218;
    const double C31728 = -(C48138 * C48220) / C47060;
    const double C46978 = C46973 / C46947;
    const double C46977 = C46939 * C46973;
    const double C46976 = C46972 + C46949;
    const double C46963 = C46956 / C46946;
    const double C46961 = 2 * C46956;
    const double C47874 = C47873 * C47867;
    const double C47880 = C47873 / C46953;
    const double C48188 = C47879 * C47873;
    const double C48186 = C47873 / C46941;
    const double C287 = (C47871 * std::pow(C47867, 2)) / C46946 + C47872;
    const double C47882 = C47881 * C47867;
    const double C48192 = C47866 * C47881;
    const double C48190 = 2 * C47881;
    const double C48239 = C47881 / C48194;
    const double C106 = C47881 / C48230;
    const double C2901 = C47881 / C46947;
    const double C48223 = C48187 / C46941;
    const double C288 = (-2 * C47879 * C48187) / C46941;
    const double C48256 = C48221 / C46946;
    const double C22011 = ((0 * ae) / C47060 - C47077 / C47073) / (2 * C47060) -
                          (0 * be) / C47060;
    const double C152 = C113 * C121;
    const double C150 = C113 * C129;
    const double C148 = C113 * C120;
    const double C337 = C113 * C296;
    const double C526 = C113 * C485;
    const double C10825 = C113 * C490;
    const double C10810 = C113 * C496;
    const double C10808 = C113 * C486;
    const double C11317 = C113 * C935;
    const double C4794 = C4783 * C121;
    const double C4792 = C4783 * C129;
    const double C4788 = C4783 * C120;
    const double C4980 = C4783 * C296;
    const double C5174 = C4783 * C485;
    const double C37485 = C4783 * C490;
    const double C37475 = C4783 * C496;
    const double C37471 = C4783 * C486;
    const double C37955 = C4783 * C935;
    const double C4786 = C4784 * C296;
    const double C37473 = C4784 * C935;
    const double C16346 = C16335 * C121;
    const double C16344 = C16335 * C129;
    const double C16340 = C16335 * C120;
    const double C16532 = C16335 * C296;
    const double C16726 = C16335 * C485;
    const double C26463 = C16335 * C490;
    const double C26453 = C16335 * C496;
    const double C26449 = C16335 * C486;
    const double C26933 = C16335 * C935;
    const double C16338 = C16336 * C296;
    const double C26451 = C16336 * C935;
    const double C22010 =
        (((C48121 - (C47059 * 2 * C47077) / C47060) * ae) / C47060 -
         C47072 / C47075) /
            (2 * C47060) -
        ((C47059 * ((0 * ae) / C47060 - C47077 / C47073) + C48253) * be) /
            C47060;
    const double C22007 = C48253 / C47905;
    const double C4779 = C48252 / C47060;
    const double C22005 = C48121 / C47905 - (C48252 * C48219) / C47073;
    const double C22006 = C48252 / C47075 - (C48253 * C48219) / C47060;
    const double C16345 = C16331 * C141;
    const double C16341 = C16331 * C128;
    const double C26454 = C16331 * C515;
    const double C26450 = C16331 * C497;
    const double C155 = C48121 * C142;
    const double C16351 = C16331 * C142;
    const double C153 = C48121 * C130;
    const double C16347 = C16331 * C130;
    const double C157 = C48121 * C132;
    const double C16357 = C16331 * C132;
    const double C338 = C48121 * C306;
    const double C4787 = C48253 * C306;
    const double C16339 = C48253 * C306;
    const double C16533 = C16331 * C306;
    const double C527 = C48121 * C495;
    const double C16727 = C16331 * C495;
    const double C531 = C48121 * C499;
    const double C16737 = C16331 * C499;
    const double C10826 = C48121 * C505;
    const double C26464 = C16331 * C505;
    const double C11318 = C48121 * C940;
    const double C26452 = C48253 * C940;
    const double C26934 = C16331 * C940;
    const double C37474 = C48253 * C940;
    const double C12655 = C48121 * C2026;
    const double C28194 = C16331 * C2026;
    const double C47217 = C47215 + C47216;
    const double C318 =
        (C47085 * C47100 + C47088 * (C47088 * C47110 + C47510 * ae) +
         C47088 * C47510 * ae) /
        C47060;
    const double C942 = (C47287 * (C47088 * C47110 + C47510 * ae)) / C47060;
    const double C302 = C47085 * C47505 + C47510 * C47299;
    const double C491 = C47085 * C47505 + C47510 * C47324;
    const double C936 = C47287 * C47088 * C47510;
    const double C1162 =
        2 * C47088 * C47510 + C47088 * (C47510 + C47204 * C47299);
    const double C1299 = C47287 * (C47510 + C47204 * C47299);
    const double C2016 =
        2 * C47287 * C47510 + C47287 * (C47510 + C47204 * C47324);
    const double C1297 = C47088 * C47505 + C47586 * C47324;
    const double C2417 =
        2 * C47287 * C47586 + C47287 * (C47586 + C47660 * C47324);
    const double C47588 = C47584 + C47585;
    const double C342 = C48121 * C310;
    const double C4797 = C48253 * C310;
    const double C16349 = C48253 * C310;
    const double C16543 = C16331 * C310;
    const double C156 = C113 * C122;
    const double C4804 = C4783 * C122;
    const double C16356 = C16335 * C122;
    const double C341 = C113 * C298;
    const double C4796 = C4784 * C298;
    const double C4990 = C4783 * C298;
    const double C16348 = C16336 * C298;
    const double C16542 = C16335 * C298;
    const double C530 = C113 * C487;
    const double C5184 = C4783 * C487;
    const double C16736 = C16335 * C487;
    const double C11724 = C113 * C1300;
    const double C26931 = C16336 * C1300;
    const double C27321 = C16335 * C1300;
    const double C37953 = C4784 * C1300;
    const double C38343 = C4783 * C1300;
    const double C12654 = C113 * C2017;
    const double C28193 = C16335 * C2017;
    const double C39211 = C4783 * C2017;
    const double C12666 = C113 * C2018;
    const double C28207 = C16335 * C2018;
    const double C39225 = C4783 * C2018;
    const double C154 = C113 * C131;
    const double C4798 = C4783 * C131;
    const double C16350 = C16335 * C131;
    const double C339 = C113 * C309;
    const double C4790 = C4784 * C309;
    const double C4984 = C4783 * C309;
    const double C16342 = C16336 * C309;
    const double C16536 = C16335 * C309;
    const double C528 = C113 * C498;
    const double C5178 = C4783 * C498;
    const double C16730 = C16335 * C498;
    const double C10823 = C113 * C506;
    const double C26459 = C16335 * C506;
    const double C37481 = C4783 * C506;
    const double C11315 = C113 * C941;
    const double C26455 = C16336 * C941;
    const double C26929 = C16335 * C941;
    const double C37477 = C4784 * C941;
    const double C37951 = C4783 * C941;
    const double C11726 = C113 * C1314;
    const double C26927 = C16336 * C1314;
    const double C27325 = C16335 * C1314;
    const double C37949 = C4784 * C1314;
    const double C38347 = C4783 * C1314;
    const double C12656 = C113 * C2025;
    const double C28197 = C16335 * C2025;
    const double C39215 = C4783 * C2025;
    const double C47123 = C47108 + C47121;
    const double C47135 = C47132 / C47096;
    const double C47136 = 2 * C47128;
    const double C47133 = C47128 * ce;
    const double C47592 = C47088 * C47128;
    const double C1170 =
        (2 * (C47088 * C47110 + C47510 * ae) +
         C47088 * (C47110 + C47088 * (C47088 * C47128 + C47204 * ae) +
                   C47088 * C47204 * ae) +
         (C47510 + C47204 * C47299) * ae) /
        C47060;
    const double C2024 =
        (2 * C47287 * C47110 + C47287 * (C47110 + C47128 * C47324)) / C47060;
    const double C2029 =
        (3 * (C47110 + C47128 * C47324) +
         C47287 * (2 * C47287 * C47128 + C47287 * (C47128 + C47158 * C47324))) /
        C47060;
    const double C47662 = C47658 + C47659;
    const double C47705 = C47108 + C47704;
    const double C47755 = 2 * C47753;
    const double C12667 = C48121 * C2027;
    const double C28208 = C16331 * C2027;
    const double C47209 = C47199 + C47207;
    const double C47231 = C47227 * ce;
    const double C47247 = 2 * C47227;
    const double C47595 = C47227 * C47299;
    const double C47675 = C47088 * C47227;
    const double C47674 = C47227 * ae;
    const double C47844 = C47227 * C47324;
    const double C2019 =
        3 * (C47510 + C47204 * C47324) +
        C47287 * (2 * C47287 * C47204 + C47287 * (C47204 + C47227 * C47324));
    const double C47234 = C47233 + C47226;
    const double C47664 = C47199 + C47661;
    const double C47726 = 2 * C47719;
    const double C47724 = C47719 * ae;
    const double C47852 = C47719 * C47324;
    const double C6973 =
        3 * (C47586 + C47660 * C47324) +
        C47287 * (2 * C47287 * C47660 + C47287 * (C47660 + C47719 * C47324));
    const double C47723 = C47717 + C47718;
    const double C47858 = C47199 + C47856;
    const double C47210 = C47208 + C47203;
    const double C47304 = C47302 + C47200;
    const double C47359 = C47355 / C47096;
    const double C47360 = -2 * C47353;
    const double C47357 = ae * C47353;
    const double C2421 = (-2 * C47287 * C47296) / C46941 -
                         (C47287 * (C47353 * C47324 + C47296)) / C46941;
    const double C6976 =
        (-3 * (C47353 * C47324 + C47296)) / C46941 +
        C47287 * ((-2 * C47287 * C47353) / C46941 -
                  (C47287 * (C47428 * C47324 + C47353)) / C46941);
    const double C47406 = ae * C47404;
    const double C47760 = -2 * C47404;
    const double C47708 = C47707 + C47200;
    const double C12664 = C113 * C2028;
    const double C28203 = C16335 * C2028;
    const double C39221 = C4783 * C2028;
    const double C47179 = C47140 + C47176;
    const double C47257 = C47254 + C47251;
    const double C47439 = C47432 + C47230;
    const double C539 = C48121 * C507;
    const double C16745 = C16331 * C507;
    const double C1296 = C47088 * C47510 + C47594 * C47324;
    const double C123 = 3 * (C47505 + C47196 * C47114) +
                        C47085 * (2 * C47510 + C47085 * C47512);
    const double C299 = C47088 * (2 * C47510 + C47085 * C47512);
    const double C303 = C47505 + C47196 * C47114 + C47512 * C47299;
    const double C488 = C47287 * (2 * C47510 + C47085 * C47512);
    const double C492 = C47505 + C47196 * C47114 + C47512 * C47324;
    const double C937 = C47287 * C47088 * C47512;
    const double C1164 = 3 * (C47505 + C47196 * C47299) +
                         C47088 * (2 * C47586 + C47088 * C47589);
    const double C1301 = C47505 + C47196 * C47299 + C47589 * C47324;
    const double C1713 = C47287 * (2 * C47586 + C47088 * C47589);
    const double C12645 =
        4 * (2 * C47287 * C47196 + C47287 * C47842) +
        C47287 * (3 * C47842 + C47287 * (2 * C47287 * C47199 +
                                         C47287 * (C47199 + C47205 * C47324)));
    const double C11718 = C113 * C1308;
    const double C26457 = C16336 * C1308;
    const double C27317 = C16335 * C1308;
    const double C37479 = C4784 * C1308;
    const double C38339 = C4783 * C1308;
    const double C47149 = C47085 * C47146;
    const double C47163 = 3 * C47146;
    const double C47157 = C47146 * ce;
    const double C47600 = C47088 * C47146;
    const double C47171 = C47165 / C46941;
    const double C47711 = C47128 + C47710;
    const double C47757 = C47287 * C47756;
    const double C47365 = C47088 * C47361;
    const double C47431 = -3 * C47361;
    const double C47427 = ae * C47361;
    const double C47443 = C47438 / C46941;
    const double C47441 = C47434 / C46941;
    const double C47475 = ae * C47471;
    const double C47751 = C47750 + C47353;
    const double C47464 = ae * C47462;
    const double C47761 = C47287 * C47462;
    const double C47480 = C47477 / C47096;
    const double C47259 = C47085 * C47256;
    const double C47258 = C47256 * ce;
    const double C47603 = C47256 * C47299;
    const double C47679 = C47227 + C47676;
    const double C47728 = C47088 * C47725;
    const double C159 = C48121 * C143;
    const double C16361 = C16331 * C143;
    const double C340 = C48121 * C327;
    const double C4791 = C48253 * C327;
    const double C16343 = C48253 * C327;
    const double C16537 = C16331 * C327;
    const double C529 = C48121 * C516;
    const double C16731 = C16331 * C516;
    const double C10824 = C48121 * C520;
    const double C26460 = C16331 * C520;
    const double C11316 = C48121 * C950;
    const double C26456 = C48253 * C950;
    const double C26930 = C16331 * C950;
    const double C37478 = C48253 * C950;
    const double C47122 = C47120 / C46941;
    const double C1328 =
        (-(C47118 * C47324) / C46941) / C47060 - C47107 / C47096 -
        (ae * (C47088 * C47206 * C47324 + C47296)) / C47096 +
        C47088 * (C47088 * ((-(C47139 * C47324) / C46941) / C47060 - C47129) -
                  (ae * (C47206 * C47324 + C47200)) / C47096);
    const double C47300 = C47297 / C46941;
    const double C2036 =
        3 * ((-(C47118 * C47324) / C46941) / C47060 - C47107 / C47096) +
        C47287 * ((-2 * C47336) / C47096 +
                  C47287 * ((-(C47139 * C47324) / C46941) / C47060 - C47129));
    const double C2426 =
        (((-2 * C47287 * C47200) / C46941 -
          (C47287 * (C47206 * C47324 + C47200)) / C46941) *
         ae) /
            C47060 +
        C47088 * ((-2 * C47336) / C47096 +
                  C47287 * ((-(C47139 * C47324) / C46941) / C47060 - C47129));
    const double C11719 = C48121 * C1324;
    const double C26458 = C48253 * C1324;
    const double C27318 = C16331 * C1324;
    const double C37480 = C48253 * C1324;
    const double C11727 = C48121 * C1327;
    const double C26928 = C48253 * C1327;
    const double C27326 = C16331 * C1327;
    const double C37950 = C48253 * C1327;
    const double C12657 = C48121 * C2035;
    const double C28198 = C16331 * C2035;
    const double C47145 = C47142 / C46941;
    const double C47358 = C47354 / C46941;
    const double C47395 = C47394 / C46941;
    const double C47405 = C47088 * C47403;
    const double C47472 = C47403 / C47096;
    const double C47491 = -2 * C47403;
    const double C47178 = C47175 / C46941;
    const double C47435 = C47429 / C46941;
    const double C47461 = C47459 / C46941;
    const double C47476 = C47088 * C47473;
    const double C110 = C48232 / C47905;
    const double C108 = C47900 / C47905 - (C48231 * C48197) / C47073;
    const double C109 = C48231 / C47075 - (C48232 * C48197) / C47060;
    const double C16333 = C48231 / C47060;
    const double C1086 = (C47923 * std::pow(C47974, 2)) / C46946 + C47973;
    const double C47976 = C47975 * C47974;
    const double C47981 = C47975 / C46953;
    const double C48203 = C47975 / C46941;
    const double C48200 = C47879 * C47975;
    const double C47983 = C47982 * C47974;
    const double C48209 = C47972 * C47982;
    const double C48208 = 2 * C47982;
    const double C48245 = C47982 / C48194;
    const double C1159 = C47982 / C48230;
    const double C2904 = C47982 / C46947;
    const double C48241 = C48205 / C46941;
    const double C1087 = (-2 * C47879 * C48205) / C46941;
    const double C48261 = C48233 / C46946;
    const double C1835 = (C47935 * std::pow(C48014, 2)) / C46946 + C48013;
    const double C48016 = C48015 * C48014;
    const double C48021 = C48015 / C46953;
    const double C48204 = C48015 / C46941;
    const double C48202 = C47879 * C48015;
    const double C48023 = C48022 * C48014;
    const double C48215 = C48012 * C48022;
    const double C48214 = 2 * C48022;
    const double C48251 = C48022 / C48194;
    const double C2014 = C48022 / C48230;
    const double C3806 = C48022 / C46947;
    const double C48247 = C48211 / C46941;
    const double C1836 = (-2 * C47879 * C48211) / C46941;
    const double C48263 = C48236 / C46946;
    const double C42728 = C48255 / C47905;
    const double C10513 = C48254 / C47060;
    const double C42726 = C48138 / C47905 - (C48254 * C48220) / C47073;
    const double C42727 = C48254 / C47075 - (C48255 * C48220) / C47060;
    const double C46982 = C46977 + 0;
    const double C46981 = C46976 / C46947;
    const double C46967 = C46952 - C46963;
    const double C46966 = C46939 * C46961;
    const double C295 =
        ((-C46961 / C46941) / C46947 - (0 * de) / C46941) / C46947 -
        (0 * de) / C46941;
    const double C1160 = -C46961 / C46941;
    const double C2642 = (-C46961 / C46941) / C46947 - (0 * de) / C46941;
    const double C47875 = C47874 / C46946;
    const double C48224 = 2 * C48188;
    const double C47883 = C47882 / C46941;
    const double C48228 = C48192 / C46953;
    const double C48257 = C48186 - C48223;
    const double C2635 = -C48223;
    const double C48271 = C48256 + C47872;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C10837 = C10810 + C10811;
    const double C10836 = C10808 + C10809;
    const double C4809 = C4779 * C143;
    const double C4805 = C4779 * C132;
    const double C4799 = C4779 * C142;
    const double C4795 = C4779 * C130;
    const double C4793 = C4779 * C141;
    const double C4789 = C4779 * C128;
    const double C4991 = C4779 * C310;
    const double C4985 = C4779 * C327;
    const double C4981 = C4779 * C306;
    const double C5193 = C4779 * C507;
    const double C5185 = C4779 * C499;
    const double C5179 = C4779 * C516;
    const double C5175 = C4779 * C495;
    const double C37486 = C4779 * C505;
    const double C37482 = C4779 * C520;
    const double C37476 = C4779 * C515;
    const double C37472 = C4779 * C497;
    const double C37956 = C4779 * C940;
    const double C37952 = C4779 * C950;
    const double C38348 = C4779 * C1327;
    const double C38340 = C4779 * C1324;
    const double C39226 = C4779 * C2027;
    const double C39216 = C4779 * C2035;
    const double C39212 = C4779 * C2026;
    const double C22009 =
        (((0 - (C47059 * C47072) / C47060) * ae) / C47060 - (0 * be) / C47075) /
            (2 * C47060) -
        ((C47059 * (((C48121 - (C47059 * 2 * C47077) / C47060) * ae) / C47060 -
                    C47072 / C47075) +
          C4779) *
         be) /
            C47060 +
        (0 * ae) / C47060 - C47077 / C47073;
    const double C16373 = C16344 + C16345;
    const double C16371 = C16340 + C16341;
    const double C26467 = C26453 + C26454;
    const double C26465 = C26449 + C26450;
    const double C170 = C152 + C153;
    const double C16374 = C16346 + C16347;
    const double C361 = C337 + C338;
    const double C4818 = C4786 + C4787;
    const double C16370 = C16338 + C16339;
    const double C16564 = C16532 + C16533;
    const double C550 = C526 + C527;
    const double C16758 = C16726 + C16727;
    const double C10839 = C10825 + C10826;
    const double C26472 = C26463 + C26464;
    const double C11329 = C11317 + C11318;
    const double C26466 = C26451 + C26452;
    const double C26938 = C26933 + C26934;
    const double C37488 = C37473 + C37474;
    const double C133 =
        (-2 * (C47085 * C47213 + C47505 * ce)) / C46941 -
        (C47085 * (C47085 * C47217 + C47213 + C47085 * C47196 * ce)) / C46941 -
        ((C47505 + C47196 * C47114) * ce) / C46941;
    const double C311 =
        -(C47088 * (C47085 * C47217 + C47213 + C47510 * ce)) / C46941;
    const double C319 =
        -(C47217 * C47299 + C47085 * C47213 + C47505 * ce) / C46941;
    const double C500 =
        -(C47287 * (C47085 * C47217 + C47213 + C47510 * ce)) / C46941;
    const double C508 =
        -(C47217 * C47324 + C47085 * C47213 + C47505 * ce) / C46941;
    const double C943 = -(C47287 * C47088 * C47217) / C46941;
    const double C350 = C48121 * C318;
    const double C4999 = C4779 * C318;
    const double C4983 = C48253 * C318;
    const double C16551 = C16331 * C318;
    const double C16535 = C48253 * C318;
    const double C957 = C48121 * C942;
    const double C5177 = C48253 * C942;
    const double C5703 = C4779 * C942;
    const double C16729 = C48253 * C942;
    const double C17255 = C16331 * C942;
    const double C349 = C113 * C302;
    const double C4998 = C4783 * C302;
    const double C4982 = C4784 * C302;
    const double C16550 = C16335 * C302;
    const double C16534 = C16336 * C302;
    const double C538 = C113 * C491;
    const double C5192 = C4783 * C491;
    const double C16744 = C16335 * C491;
    const double C956 = C113 * C936;
    const double C5176 = C4784 * C936;
    const double C5702 = C4783 * C936;
    const double C16728 = C16336 * C936;
    const double C17254 = C16335 * C936;
    const double C1442 = C113 * C1162;
    const double C4996 = C4784 * C1162;
    const double C6244 = C4783 * C1162;
    const double C16548 = C16336 * C1162;
    const double C17780 = C16335 * C1162;
    const double C1604 = C113 * C1299;
    const double C5700 = C4784 * C1299;
    const double C6450 = C4783 * C1299;
    const double C17252 = C16336 * C1299;
    const double C17986 = C16335 * C1299;
    const double C2308 = C113 * C2016;
    const double C7318 = C4783 * C2016;
    const double C18838 = C16335 * C2016;
    const double C11716 = C113 * C1297;
    const double C26461 = C16336 * C1297;
    const double C27313 = C16335 * C1297;
    const double C37483 = C4784 * C1297;
    const double C38335 = C4783 * C1297;
    const double C13168 = C113 * C2417;
    const double C28195 = C16336 * C2417;
    const double C28677 = C16335 * C2417;
    const double C39213 = C4784 * C2417;
    const double C39695 = C4783 * C2417;
    const double C1173 =
        (3 * (C47100 + C47088 * C47588 + C47586 * ae) +
         C47088 * (2 * C47588 +
                   C47088 * (C47108 + C47088 * (C47088 * C47119 + C47199 * ae) +
                             C47088 * C47199 * ae) +
                   C47589 * ae) +
         (2 * C47586 + C47088 * C47589) * ae) /
        C47060;
    const double C1309 =
        (C47088 * C47100 + C47505 * ae + C47588 * C47324) / C47060;
    const double C1315 =
        (C47287 * (C47100 + C47088 * C47588 + C47586 * ae)) / C47060;
    const double C1316 = (C47100 + C47088 * C47588 + C47586 * ae +
                          (C47108 + C47088 * (C47088 * C47119 + C47199 * ae) +
                           C47088 * C47199 * ae) *
                              C47324) /
                         C47060;
    const double C1716 =
        (C47287 * (2 * C47588 +
                   C47088 * (C47108 + C47088 * (C47088 * C47119 + C47199 * ae) +
                             C47088 * C47199 * ae) +
                   C47589 * ae)) /
        C47060;
    const double C2420 =
        (2 * C47287 * C47588 +
         C47287 * (C47588 + (C47088 * C47119 + C47199 * ae) * C47324)) /
        C47060;
    const double C172 = C156 + C157;
    const double C16379 = C16356 + C16357;
    const double C363 = C341 + C342;
    const double C4823 = C4796 + C4797;
    const double C16375 = C16348 + C16349;
    const double C16569 = C16542 + C16543;
    const double C552 = C530 + C531;
    const double C16763 = C16736 + C16737;
    const double C12668 = C12654 + C12655;
    const double C28209 = C28193 + C28194;
    const double C171 = C154 + C155;
    const double C16376 = C16350 + C16351;
    const double C134 = (3 * (C47100 + C47108 * C47114) +
                         C47085 * (2 * C47110 + C47085 * C47123)) /
                        C47060;
    const double C312 = (C47088 * (2 * C47110 + C47085 * C47123) +
                         (2 * C47510 + C47085 * C47512) * ae) /
                        C47060;
    const double C320 =
        (C47100 + C47108 * C47114 + C47088 * (C47088 * C47123 + C47512 * ae) +
         C47088 * C47512 * ae) /
        C47060;
    const double C501 = (C47287 * (2 * C47110 + C47085 * C47123)) / C47060;
    const double C509 = (C47100 + C47108 * C47114 + C47123 * C47324) / C47060;
    const double C944 = (C47287 * (C47088 * C47123 + C47512 * ae)) / C47060;
    const double C2022 =
        (2 * C47287 * C47123 + C47287 * (C47123 + C47146 * C47324)) / C47060;
    const double C47138 = C47133 / C46941;
    const double C47596 = C47592 + C47593;
    const double C1443 = C48121 * C1170;
    const double C4997 = C48253 * C1170;
    const double C6245 = C4779 * C1170;
    const double C16549 = C48253 * C1170;
    const double C17781 = C16331 * C1170;
    const double C2309 = C48121 * C2024;
    const double C7319 = C4779 * C2024;
    const double C18839 = C16331 * C2024;
    const double C12663 = C48121 * C2029;
    const double C47666 = C47088 * C47662;
    const double C47716 = 2 * C47662;
    const double C6975 =
        (3 * (C47588 + C47662 * C47324) +
         C47287 *
             (2 * C47287 * C47662 +
              C47287 * (C47662 + (C47088 * C47140 + C47205 * ae) * C47324))) /
        C47060;
    const double C12647 =
        (4 * (2 * C47287 * C47108 + C47287 * C47705) +
         C47287 *
             (3 * C47705 + C47287 * (2 * C47287 * C47119 +
                                     C47287 * (C47119 + C47140 * C47324)))) /
        C47060;
    const double C12673 = C12666 + C12667;
    const double C28216 = C28207 + C28208;
    const double C47228 = C47209 * ce;
    const double C47516 = C47085 * C47209;
    const double C47520 = 3 * C47209;
    const double C47602 = C47088 * C47209;
    const double C47601 = C47209 * ae;
    const double C1168 =
        (2 * (C47088 * C47123 + C47512 * ae) +
         C47088 * (C47123 + C47088 * (C47088 * C47146 + C47209 * ae) +
                   C47088 * C47209 * ae) +
         (C47512 + C47209 * C47299) * ae) /
        C47060;
    const double C1161 =
        2 * C47088 * C47512 + C47088 * (C47512 + C47209 * C47299);
    const double C1298 = C47287 * (C47512 + C47209 * C47299);
    const double C2015 =
        2 * C47287 * C47512 + C47287 * (C47512 + C47209 * C47324);
    const double C2020 =
        3 * (C47512 + C47209 * C47324) +
        C47287 * (2 * C47287 * C47209 + C47287 * (C47209 + C47256 * C47324));
    const double C47597 = C47204 + C47595;
    const double C47680 = 2 * C47675;
    const double C47678 = C47675 * ae;
    const double C2418 =
        2 * C47287 * C47594 + C47287 * (C47594 + C47675 * C47324);
    const double C6974 =
        3 * (C47594 + C47675 * C47324) +
        C47287 * (2 * C47287 * C47675 +
                  C47287 * (C47675 + C47088 * C47252 * C47324));
    const double C47677 = C47673 + C47674;
    const double C47845 = C47204 + C47844;
    const double C12662 = C113 * C2019;
    const double C47235 = C47085 * C47234;
    const double C47244 = -2 * C47234;
    const double C47311 = C47234 * C47299;
    const double C47378 = ae * C47234;
    const double C47376 = C47088 * C47234;
    const double C47414 = C47287 * C47234;
    const double C47713 = C47234 * C47324;
    const double C47667 = C47088 * C47664;
    const double C47722 = 3 * C47664;
    const double C47720 = C47664 * ae;
    const double C7459 =
        2 * C47287 * C47589 + C47287 * (C47589 + C47664 * C47324);
    const double C23492 =
        3 * (C47589 + C47664 * C47324) +
        C47287 * (2 * C47287 * C47664 + C47287 * (C47664 + C47725 * C47324));
    const double C47853 = C47660 + C47852;
    const double C28205 = C16336 * C6973;
    const double C39223 = C4784 * C6973;
    const double C44633 = C113 * C6973;
    const double C47727 = C47088 * C47723;
    const double C47747 = C47723 * C47324;
    const double C47859 = C47287 * C47858;
    const double C47219 = C47085 * C47210;
    const double C47224 = -2 * C47210;
    const double C47310 = ae * C47210;
    const double C47308 = C47088 * C47210;
    const double C1169 = (-2 * C47088 * C47217) / C46941 -
                         (C47088 * (C47210 * C47299 + C47217)) / C46941;
    const double C1312 = -(C47287 * (C47210 * C47299 + C47217)) / C46941;
    const double C2023 = (-2 * C47287 * C47217) / C46941 -
                         (C47287 * (C47210 * C47324 + C47217)) / C46941;
    const double C2030 =
        (-3 * (C47210 * C47324 + C47217)) / C46941 +
        C47287 * ((-2 * C47287 * C47210) / C46941 -
                  (C47287 * (C47234 * C47324 + C47210)) / C46941);
    const double C1722 =
        2 * ((-(C47088 * C47336) / C46941) / C47060 -
             (ae * C47287 * C47200) / C47096) -
        (ae * C47287 * C47304) / C47096 +
        C47088 * ((-(ae * C47287 * C47088 * C47206) / C46941) / C47060 -
                  C47336 / C47096 +
                  C47088 * ((-(C47088 * C47287 * C47139) / C46941) / C47060 -
                            (ae * C47287 * C47206) / C47096));
    const double C1174 =
        (-3 * (C47200 * C47299 + C47213)) / C46941 +
        C47088 * ((-2 * C47296) / C46941 - (C47088 * C47304) / C46941);
    const double C1317 = -(C47304 * C47324 + C47200 * C47299 + C47213) / C46941;
    const double C1717 =
        C47287 * ((-2 * C47296) / C46941 - (C47088 * C47304) / C46941);
    const double C7462 = (-2 * C47287 * C47304) / C46941 -
                         (C47287 * (C47361 * C47324 + C47304)) / C46941;
    const double C47364 = C47360 / C46941;
    const double C47362 = C47357 / C46941;
    const double C13166 = C113 * C2421;
    const double C28199 = C16336 * C2421;
    const double C28673 = C16335 * C2421;
    const double C39217 = C4784 * C2421;
    const double C39691 = C4783 * C2421;
    const double C28201 = C16336 * C6976;
    const double C39219 = C4784 * C6976;
    const double C44631 = C113 * C6976;
    const double C47408 = C47406 / C47096;
    const double C47762 = C47760 / C46941;
    const double C12648 =
        4 * ((-2 * C47287 * C47200) / C46941 - (C47287 * C47708) / C46941) +
        C47287 *
            ((-3 * C47708) / C46941 +
             C47287 * ((-2 * C47404) / C46941 - (C47287 * C47462) / C46941));
    const double C47182 = C47085 * C47179;
    const double C2031 =
        (3 * (C47123 + C47146 * C47324) +
         C47287 * (2 * C47287 * C47146 + C47287 * (C47146 + C47179 * C47324))) /
        C47060;
    const double C47260 = C47085 * C47257;
    const double C47379 = C47257 * C47299;
    const double C47444 = C47088 * C47439;
    const double C23494 =
        (-3 * (C47361 * C47324 + C47304)) / C46941 +
        C47287 * ((-2 * C47287 * C47361) / C46941 -
                  (C47287 * (C47439 * C47324 + C47361)) / C46941);
    const double C2190 = C113 * C1296;
    const double C5190 = C4784 * C1296;
    const double C7176 = C4783 * C1296;
    const double C16742 = C16336 * C1296;
    const double C18696 = C16335 * C1296;
    const double C160 = C113 * C123;
    const double C4810 = C4783 * C123;
    const double C16362 = C16335 * C123;
    const double C345 = C113 * C299;
    const double C4802 = C4784 * C299;
    const double C5352 = C4783 * C299;
    const double C16354 = C16336 * C299;
    const double C16904 = C16335 * C299;
    const double C353 = C113 * C303;
    const double C5004 = C4783 * C303;
    const double C4988 = C4784 * C303;
    const double C16556 = C16335 * C303;
    const double C16540 = C16336 * C303;
    const double C534 = C113 * C488;
    const double C5494 = C4783 * C488;
    const double C17046 = C16335 * C488;
    const double C542 = C113 * C492;
    const double C5198 = C4783 * C492;
    const double C16750 = C16335 * C492;
    const double C960 = C113 * C937;
    const double C5182 = C4784 * C937;
    const double C5708 = C4783 * C937;
    const double C16734 = C16336 * C937;
    const double C17260 = C16335 * C937;
    const double C11736 = C113 * C1301;
    const double C27335 = C16335 * C1301;
    const double C27315 = C16336 * C1301;
    const double C38357 = C4783 * C1301;
    const double C38337 = C4784 * C1301;
    const double C12238 = C113 * C1713;
    const double C27323 = C16336 * C1713;
    const double C27803 = C16335 * C1713;
    const double C38345 = C4784 * C1713;
    const double C38825 = C4783 * C1713;
    const double C44265 = C113 * C12645;
    const double C47151 = C47136 + C47149;
    const double C47164 = C47157 / C47096;
    const double C47174 = -C47171;
    const double C12649 =
        (4 * (2 * C47287 * C47128 + C47287 * C47711) +
         C47287 * (3 * C47711 +
                   C47287 * (2 * C47287 * C47158 +
                             C47287 * (C47158 + C47085 * C47173 * C47324)))) /
        C47060;
    const double C47758 = C47755 + C47757;
    const double C47368 = C47365 / C46941;
    const double C47437 = C47431 / C46941;
    const double C47433 = C47427 / C47096;
    const double C47445 = -C47441;
    const double C47478 = C47475 / C46941;
    const double C28190 =
        4 * ((-2 * C47287 * C47353) / C46941 - (C47287 * C47751) / C46941) +
        C47287 * ((-3 * C47751) / C46941 +
                  C47287 * ((-2 * C47471) / C46941 -
                            (C47287 * (C47088 * C47250 * C47324 + C47428)) /
                                C46941));
    const double C47466 = C47464 / C47096;
    const double C47763 = C47761 / C46941;
    const double C47262 = C47247 + C47259;
    const double C47261 = C47258 / C46941;
    const double C47605 = C47209 + C47603;
    const double C47682 = C47088 * C47679;
    const double C47730 = C47726 + C47728;
    const double C362 = C339 + C340;
    const double C4820 = C4790 + C4791;
    const double C16372 = C16342 + C16343;
    const double C16566 = C16536 + C16537;
    const double C551 = C528 + C529;
    const double C16760 = C16730 + C16731;
    const double C10838 = C10823 + C10824;
    const double C26470 = C26459 + C26460;
    const double C11328 = C11315 + C11316;
    const double C26468 = C26455 + C26456;
    const double C26936 = C26929 + C26930;
    const double C37490 = C37477 + C37478;
    const double C47124 = -C47122;
    const double C11735 = C48121 * C1328;
    const double C27332 = C16331 * C1328;
    const double C27320 = C48253 * C1328;
    const double C38354 = C4779 * C1328;
    const double C38342 = C48253 * C1328;
    const double C47303 = -C47300;
    const double C12665 = C48121 * C2036;
    const double C28204 = C16331 * C2036;
    const double C39222 = C4779 * C2036;
    const double C13167 = C48121 * C2426;
    const double C28200 = C48253 * C2426;
    const double C28674 = C16331 * C2426;
    const double C39218 = C48253 * C2426;
    const double C39692 = C4779 * C2426;
    const double C11739 = C11718 + C11719;
    const double C26469 = C26457 + C26458;
    const double C27339 = C27317 + C27318;
    const double C37491 = C37479 + C37480;
    const double C11741 = C11726 + C11727;
    const double C26935 = C26927 + C26928;
    const double C27343 = C27325 + C27326;
    const double C37957 = C37949 + C37950;
    const double C12669 = C12656 + C12657;
    const double C28211 = C28197 + C28198;
    const double C47148 = -C47145;
    const double C47363 = -C47358;
    const double C47396 = -C47395;
    const double C47407 = C47405 / C46941;
    const double C47493 = C47491 / C47096;
    const double C47181 = -C47178;
    const double C47442 = -C47435;
    const double C47463 = -C47461;
    const double C47479 = C47476 / C46941;
    const double C47977 = C47976 / C46946;
    const double C48234 = 2 * C48200;
    const double C47984 = C47983 / C46941;
    const double C48244 = C48209 / C46953;
    const double C48265 = C48203 - C48241;
    const double C2531 = -C48241;
    const double C48274 = C48261 + C47973;
    const double C48017 = C48016 / C46946;
    const double C48237 = 2 * C48202;
    const double C48024 = C48023 / C46941;
    const double C48250 = C48215 / C46953;
    const double C48268 = C48204 - C48247;
    const double C3298 = -C48247;
    const double C48275 = C48263 + C48013;
    const double C46985 = C46982 * de;
    const double C46971 = C46939 * C46967;
    const double C46999 = C46967 / C46947;
    const double C46970 = C46966 / C46941;
    const double C47876 = C47872 - C47875;
    const double C48258 = C48224 / C46941;
    const double C47884 = C47880 - C47883;
    const double C48272 = C48257 / C46947;
    const double C10841 = C10837 * C287;
    const double C11707 = C10837 * C47871;
    const double C12085 = C10837 * C48186;
    const double C12395 = C10837 * C48271;
    const double C13629 = C10837 * C2635;
    const double C11706 = C10836 * C1160;
    const double C4827 = C4804 + C4805;
    const double C4824 = C4798 + C4799;
    const double C4822 = C4794 + C4795;
    const double C4821 = C4792 + C4793;
    const double C4819 = C4788 + C4789;
    const double C5017 = C4990 + C4991;
    const double C5014 = C4984 + C4985;
    const double C5012 = C4980 + C4981;
    const double C5211 = C5184 + C5185;
    const double C5208 = C5178 + C5179;
    const double C5206 = C5174 + C5175;
    const double C37494 = C37485 + C37486;
    const double C37492 = C37481 + C37482;
    const double C37489 = C37475 + C37476;
    const double C37487 = C37471 + C37472;
    const double C37960 = C37955 + C37956;
    const double C37958 = C37951 + C37952;
    const double C38365 = C38347 + C38348;
    const double C38361 = C38339 + C38340;
    const double C39234 = C39225 + C39226;
    const double C39229 = C39215 + C39216;
    const double C39227 = C39211 + C39212;
    const double C11708 = C550 * C1160;
    const double C12086 = C550 * C46967;
    const double C13630 = C550 * C2642;
    const double C11713 = C10839 * C1160;
    const double C11714 = C11329 * C1160;
    const double C158 = C113 * C133;
    const double C4808 = C4783 * C133;
    const double C16360 = C16335 * C133;
    const double C343 = C113 * C311;
    const double C4800 = C4784 * C311;
    const double C4994 = C4783 * C311;
    const double C16352 = C16336 * C311;
    const double C16546 = C16335 * C311;
    const double C351 = C113 * C319;
    const double C5002 = C4783 * C319;
    const double C4986 = C4784 * C319;
    const double C16554 = C16335 * C319;
    const double C16538 = C16336 * C319;
    const double C532 = C113 * C500;
    const double C5188 = C4783 * C500;
    const double C16740 = C16335 * C500;
    const double C540 = C113 * C508;
    const double C5196 = C4783 * C508;
    const double C16748 = C16335 * C508;
    const double C958 = C113 * C943;
    const double C5180 = C4784 * C943;
    const double C5706 = C4783 * C943;
    const double C16732 = C16336 * C943;
    const double C17258 = C16335 * C943;
    const double C367 = C349 + C350;
    const double C5021 = C4998 + C4999;
    const double C5013 = C4982 + C4983;
    const double C16573 = C16550 + C16551;
    const double C16565 = C16534 + C16535;
    const double C556 = C538 + C539;
    const double C5215 = C5192 + C5193;
    const double C16767 = C16744 + C16745;
    const double C968 = C956 + C957;
    const double C5207 = C5176 + C5177;
    const double C5717 = C5702 + C5703;
    const double C16759 = C16728 + C16729;
    const double C17269 = C17254 + C17255;
    const double C11717 = C48121 * C1309;
    const double C26462 = C48253 * C1309;
    const double C27314 = C16331 * C1309;
    const double C37484 = C48253 * C1309;
    const double C38336 = C4779 * C1309;
    const double C11725 = C48121 * C1315;
    const double C26932 = C48253 * C1315;
    const double C27322 = C16331 * C1315;
    const double C37954 = C48253 * C1315;
    const double C38344 = C4779 * C1315;
    const double C11737 = C48121 * C1316;
    const double C27336 = C16331 * C1316;
    const double C27316 = C48253 * C1316;
    const double C38358 = C4779 * C1316;
    const double C38338 = C48253 * C1316;
    const double C12239 = C48121 * C1716;
    const double C27324 = C48253 * C1716;
    const double C27804 = C16331 * C1716;
    const double C38346 = C48253 * C1716;
    const double C38826 = C4779 * C1716;
    const double C13169 = C48121 * C2420;
    const double C28196 = C48253 * C2420;
    const double C28678 = C16331 * C2420;
    const double C39214 = C48253 * C2420;
    const double C39696 = C4779 * C2420;
    const double C10814 = C552 * C295;
    const double C12090 = C552 * C46967;
    const double C13634 = C552 * C2642;
    const double C12674 = C12668 * C1160;
    const double C161 = C48121 * C134;
    const double C4811 = C4779 * C134;
    const double C16363 = C16331 * C134;
    const double C346 = C48121 * C312;
    const double C4803 = C48253 * C312;
    const double C5353 = C4779 * C312;
    const double C16355 = C48253 * C312;
    const double C16905 = C16331 * C312;
    const double C354 = C48121 * C320;
    const double C5005 = C4779 * C320;
    const double C4989 = C48253 * C320;
    const double C16557 = C16331 * C320;
    const double C16541 = C48253 * C320;
    const double C535 = C48121 * C501;
    const double C5495 = C4779 * C501;
    const double C17047 = C16331 * C501;
    const double C543 = C48121 * C509;
    const double C5199 = C4779 * C509;
    const double C16751 = C16331 * C509;
    const double C961 = C48121 * C944;
    const double C5183 = C48253 * C944;
    const double C5709 = C4779 * C944;
    const double C16735 = C48253 * C944;
    const double C17261 = C16331 * C944;
    const double C2313 = C48121 * C2022;
    const double C47141 = -C47138;
    const double C1307 =
        (C47088 * C47110 + C47510 * ae + C47596 * C47324) / C47060;
    const double C1313 =
        (C47287 * (C47110 + C47088 * C47596 + C47594 * ae)) / C47060;
    const double C1318 = (C47110 + C47088 * C47596 + C47594 * ae +
                          (C47128 + C47088 * (C47088 * C47158 + C47227 * ae) +
                           C47088 * C47227 * ae) *
                              C47324) /
                         C47060;
    const double C2422 =
        (2 * C47287 * C47596 +
         C47287 * (C47596 + (C47088 * C47158 + C47227 * ae) * C47324)) /
        C47060;
    const double C1450 = C1442 + C1443;
    const double C5020 = C4996 + C4997;
    const double C6252 = C6244 + C6245;
    const double C16572 = C16548 + C16549;
    const double C17788 = C17780 + C17781;
    const double C2316 = C2308 + C2309;
    const double C7326 = C7318 + C7319;
    const double C18846 = C18838 + C18839;
    const double C47668 = C47108 + C47666;
    const double C28206 = C48253 * C6975;
    const double C39224 = C48253 * C6975;
    const double C44634 = C48121 * C6975;
    const double C44266 = C48121 * C12647;
    const double C12679 = C12673 * C1160;
    const double C47232 = C47228 / C46941;
    const double C47517 = C47515 + C47516;
    const double C1295 = C47088 * C47512 + C47602 * C47324;
    const double C2419 =
        2 * C47287 * C47602 + C47287 * (C47602 + C47088 * C47256 * C47324);
    const double C47604 = C47600 + C47601;
    const double C1447 = C48121 * C1168;
    const double C5007 = C48253 * C1168;
    const double C16559 = C48253 * C1168;
    const double C1446 = C113 * C1161;
    const double C5006 = C4784 * C1161;
    const double C16558 = C16336 * C1161;
    const double C1608 = C113 * C1298;
    const double C5710 = C4784 * C1298;
    const double C17262 = C16336 * C1298;
    const double C2312 = C113 * C2015;
    const double C1175 =
        (3 * (C47110 + C47088 * C47596 + C47594 * ae) +
         C47088 * (2 * C47596 +
                   C47088 * (C47128 + C47088 * (C47088 * C47158 + C47227 * ae) +
                             C47088 * C47227 * ae) +
                   C47597 * ae) +
         (2 * C47594 + C47088 * C47597) * ae) /
        C47060;
    const double C1718 =
        (C47287 * (2 * C47596 +
                   C47088 * (C47128 + C47088 * (C47088 * C47158 + C47227 * ae) +
                             C47088 * C47227 * ae) +
                   C47597 * ae)) /
        C47060;
    const double C1165 = 3 * (C47510 + C47204 * C47299) +
                         C47088 * (2 * C47594 + C47088 * C47597);
    const double C1302 = C47510 + C47204 * C47299 + C47597 * C47324;
    const double C1714 = C47287 * (2 * C47594 + C47088 * C47597);
    const double C7460 =
        2 * C47287 * C47597 + C47287 * (C47597 + C47679 * C47324);
    const double C7320 = C4784 * C2418;
    const double C12890 = C113 * C2418;
    const double C18840 = C16336 * C2418;
    const double C47681 = C47088 * C47677;
    const double C6977 =
        (3 * (C47596 + C47677 * C47324) +
         C47287 * (2 * C47287 * C47677 +
                   C47287 * (C47677 + (C47088 * C47085 * C47173 + C47252 * ae) *
                                          C47324))) /
        C47060;
    const double C12646 =
        4 * (2 * C47287 * C47204 + C47287 * C47845) +
        C47287 * (3 * C47845 + C47287 * (2 * C47287 * C47227 +
                                         C47287 * (C47227 + C47252 * C47324)));
    const double C12671 = C12662 + C12663;
    const double C47236 = C47235 + C47206;
    const double C47249 = C47244 / C46941;
    const double C47313 = C47311 + C47210;
    const double C47381 = C47378 / C47096;
    const double C47382 = -2 * C47376;
    const double C47380 = ae * C47376;
    const double C47416 = ae * C47414;
    const double C47714 = C47713 + C47210;
    const double C47669 = C47665 + C47667;
    const double C28675 = C16336 * C7459;
    const double C39693 = C4784 * C7459;
    const double C43604 = C113 * C7459;
    const double C28188 =
        4 * (2 * C47287 * C47660 + C47287 * C47853) +
        C47287 * (3 * C47853 +
                  C47287 * (2 * C47287 * C47719 +
                            C47287 * (C47719 + C47088 * C47246 * C47324)));
    const double C47729 = C47119 + C47727;
    const double C47748 = C47662 + C47747;
    const double C47860 = C47857 + C47859;
    const double C47221 = C47219 + C47200;
    const double C47229 = C47224 / C46941;
    const double C47312 = C47310 / C47096;
    const double C1306 = -(C47308 * C47324 + C47088 * C47217) / C46941;
    const double C2423 = (-2 * C47287 * C47308) / C46941 -
                         (C47287 * (C47376 * C47324 + C47308)) / C46941;
    const double C6978 =
        (-3 * (C47376 * C47324 + C47308)) / C46941 +
        C47287 * ((-2 * C47287 * C47376) / C46941 -
                  (C47287 * (C47088 * C47257 * C47324 + C47376)) / C46941);
    const double C1444 = C113 * C1169;
    const double C5000 = C4784 * C1169;
    const double C6248 = C4783 * C1169;
    const double C16552 = C16336 * C1169;
    const double C17784 = C16335 * C1169;
    const double C1606 = C113 * C1312;
    const double C5704 = C4784 * C1312;
    const double C6454 = C4783 * C1312;
    const double C17256 = C16336 * C1312;
    const double C17990 = C16335 * C1312;
    const double C2310 = C113 * C2023;
    const double C7322 = C4783 * C2023;
    const double C18842 = C16335 * C2023;
    const double C12660 = C113 * C2030;
    const double C12241 = C48121 * C1722;
    const double C27328 = C48253 * C1722;
    const double C27808 = C16331 * C1722;
    const double C38350 = C48253 * C1722;
    const double C38830 = C4779 * C1722;
    const double C11734 = C113 * C1317;
    const double C27331 = C16335 * C1317;
    const double C27319 = C16336 * C1317;
    const double C38353 = C4783 * C1317;
    const double C38341 = C4784 * C1317;
    const double C12240 = C113 * C1717;
    const double C27327 = C16336 * C1717;
    const double C27807 = C16335 * C1717;
    const double C38349 = C4784 * C1717;
    const double C38829 = C4783 * C1717;
    const double C28671 = C16336 * C7462;
    const double C39689 = C4784 * C7462;
    const double C43602 = C113 * C7462;
    const double C47366 = -C47362;
    const double C44263 = C113 * C12648;
    const double C47184 = C47168 + C47182;
    const double C47263 = C47260 + C47230;
    const double C47383 = C47379 + C47234;
    const double C47447 = C47444 / C46941;
    const double C136 = (4 * (2 * C47110 + C47085 * C47123) +
                         C47085 * (3 * C47123 + C47085 * C47151)) /
                        C47060;
    const double C503 = (C47287 * (3 * C47123 + C47085 * C47151)) / C47060;
    const double C511 =
        (2 * C47110 + C47085 * C47123 + C47151 * C47324) / C47060;
    const double C47177 = C47174 / C47060;
    const double C44257 =
        (5 * (3 * C47705 + C47287 * C47758) +
         C47287 * (4 * C47758 +
                   C47287 * (3 * C47756 +
                             C47287 * (2 * C47287 * C47140 +
                                       C47287 * (C47140 + C47173 * C47324))))) /
        C47060;
    const double C47371 = C47364 - C47368;
    const double C47448 = C47445 / C47060;
    const double C47481 = -C47478;
    const double C47764 = C47762 - C47763;
    const double C47264 = C47262 * ce;
    const double C47521 = C47085 * C47262;
    const double C1166 = 3 * (C47512 + C47209 * C47299) +
                         C47088 * (2 * C47602 + C47088 * C47605);
    const double C1303 = C47512 + C47209 * C47299 + C47605 * C47324;
    const double C1715 = C47287 * (2 * C47602 + C47088 * C47605);
    const double C47684 = C47680 + C47682;
    const double C47732 = C47088 * C47730;
    const double C10817 = C551 * C287;
    const double C10813 = C551 * C288;
    const double C11709 = C551 * C47871;
    const double C12089 = C551 * C48186;
    const double C12087 = C551 * C47881;
    const double C12401 = C551 * C48271;
    const double C13633 = C551 * C2635;
    const double C13631 = C551 * C47881;
    const double C10842 = C10838 * C287;
    const double C11712 = C10838 * C47871;
    const double C12407 = C10838 * C48271;
    const double C12875 = C10838 * C48186;
    const double C13637 = C10838 * C2635;
    const double C11330 = C11328 * C287;
    const double C11715 = C11328 * C47871;
    const double C12093 = C11328 * C48186;
    const double C13645 = C11328 * C2635;
    const double C15445 = C11328 * C48271;
    const double C47125 = C47124 / C47060;
    const double C47305 = C47303 / C47060;
    const double C12672 = C12664 + C12665;
    const double C28214 = C28203 + C28204;
    const double C39232 = C39221 + C39222;
    const double C13170 = C13166 + C13167;
    const double C28212 = C28199 + C28200;
    const double C28680 = C28673 + C28674;
    const double C39230 = C39217 + C39218;
    const double C39698 = C39691 + C39692;
    const double C11747 = C11739 * C47871;
    const double C12883 = C11739 * C48186;
    const double C13653 = C11739 * C2635;
    const double C43312 = C11739 * C287;
    const double C46320 = C11739 * C48271;
    const double C11749 = C11741 * C47871;
    const double C12101 = C11741 * C48186;
    const double C14219 = C11741 * C2635;
    const double C12675 = C12669 * C47871;
    const double C13027 = C12669 * C48186;
    const double C14697 = C12669 * C2635;
    const double C42952 = C12669 * C287;
    const double C44076 = C12669 * C48271;
    const double C47150 = C47148 / C47060;
    const double C47367 = C47363 / C47060;
    const double C47397 = C47396 / C47060;
    const double C47409 = -C47407;
    const double C47183 = C47181 / C47060;
    const double C47446 = C47442 / C47060;
    const double C47465 = C47463 / C47060;
    const double C47482 = -C47479;
    const double C47978 = C47973 - C47977;
    const double C48262 = C48234 / C46941;
    const double C47985 = C47981 - C47984;
    const double C48276 = C48265 / C46947;
    const double C48018 = C48013 - C48017;
    const double C48264 = C48237 / C46941;
    const double C48025 = C48021 - C48024;
    const double C48278 = C48268 / C46947;
    const double C46987 = C46985 / C46941;
    const double C46975 = C46971 + C47881;
    const double C47002 = C46999 - C47001;
    const double C1091 = C46999 + (0 * ce) / C46941;
    const double C46974 = C47871 - C46970;
    const double C14013 = C11328 * C47876;
    const double C14007 = C551 * C47876;
    const double C14001 = C10837 * C47876;
    const double C15045 = C10838 * C47876;
    const double C45248 = C11739 * C47876;
    const double C46018 = C12669 * C47876;
    const double C48185 = C47876 * C47866;
    const double C48226 = C48190 + C47876;
    const double C12397 = C551 * C48258;
    const double C14003 = C551 * C47884;
    const double C48193 = C47884 / C46947;
    const double C48189 = C47884 * C47866;
    const double C659 = C48272 - (C47876 * C47867) / C46941;
    const double C173 = C158 + C159;
    const double C4829 = C4808 + C4809;
    const double C16381 = C16360 + C16361;
    const double C11711 = C556 * C1160;
    const double C12874 = C556 * C46967;
    const double C13636 = C556 * C2642;
    const double C11720 = C968 * C1160;
    const double C12092 = C968 * C46967;
    const double C13644 = C968 * C2642;
    const double C11738 = C11716 + C11717;
    const double C26471 = C26461 + C26462;
    const double C27337 = C27313 + C27314;
    const double C37493 = C37483 + C37484;
    const double C38359 = C38335 + C38336;
    const double C11740 = C11724 + C11725;
    const double C26937 = C26931 + C26932;
    const double C27341 = C27321 + C27322;
    const double C37959 = C37953 + C37954;
    const double C38363 = C38343 + C38344;
    const double C11745 = C11736 + C11737;
    const double C27348 = C27335 + C27336;
    const double C27338 = C27315 + C27316;
    const double C38370 = C38357 + C38358;
    const double C38360 = C38337 + C38338;
    const double C12244 = C12238 + C12239;
    const double C27342 = C27323 + C27324;
    const double C27811 = C27803 + C27804;
    const double C38364 = C38345 + C38346;
    const double C38833 = C38825 + C38826;
    const double C13171 = C13168 + C13169;
    const double C28210 = C28195 + C28196;
    const double C28682 = C28677 + C28678;
    const double C39228 = C39213 + C39214;
    const double C39700 = C39695 + C39696;
    const double C174 = C160 + C161;
    const double C4830 = C4810 + C4811;
    const double C16382 = C16362 + C16363;
    const double C365 = C345 + C346;
    const double C4826 = C4802 + C4803;
    const double C5360 = C5352 + C5353;
    const double C16378 = C16354 + C16355;
    const double C16912 = C16904 + C16905;
    const double C369 = C353 + C354;
    const double C5024 = C5004 + C5005;
    const double C5016 = C4988 + C4989;
    const double C16576 = C16556 + C16557;
    const double C16568 = C16540 + C16541;
    const double C554 = C534 + C535;
    const double C5502 = C5494 + C5495;
    const double C17054 = C17046 + C17047;
    const double C558 = C542 + C543;
    const double C5218 = C5198 + C5199;
    const double C16770 = C16750 + C16751;
    const double C970 = C960 + C961;
    const double C5210 = C5182 + C5183;
    const double C5720 = C5708 + C5709;
    const double C16762 = C16734 + C16735;
    const double C17272 = C17260 + C17261;
    const double C47144 = C47141 / C47060;
    const double C2191 = C48121 * C1307;
    const double C5191 = C48253 * C1307;
    const double C7177 = C4779 * C1307;
    const double C16743 = C48253 * C1307;
    const double C18697 = C16331 * C1307;
    const double C1605 = C48121 * C1313;
    const double C5701 = C48253 * C1313;
    const double C6451 = C4779 * C1313;
    const double C17253 = C48253 * C1313;
    const double C17987 = C16331 * C1313;
    const double C7179 = C48253 * C1318;
    const double C11733 = C48121 * C1318;
    const double C18699 = C48253 * C1318;
    const double C7321 = C48253 * C2422;
    const double C12891 = C48121 * C2422;
    const double C18841 = C48253 * C2422;
    const double C12658 = C2316 * C1160;
    const double C13028 = C2316 * C46967;
    const double C14698 = C2316 * C2642;
    const double C47670 = C47668 + C47663;
    const double C28215 = C28205 + C28206;
    const double C39233 = C39223 + C39224;
    const double C44636 = C44633 + C44634;
    const double C44268 = C44265 + C44266;
    const double C314 = (C47088 * (3 * C47123 + C47085 * C47151) +
                         (3 * C47512 + C47085 * C47517) * ae) /
                        C47060;
    const double C322 =
        (2 * C47110 + C47085 * C47123 +
         C47088 * (C47088 * C47151 + C47517 * ae) + C47088 * C47517 * ae) /
        C47060;
    const double C946 = (C47287 * (C47088 * C47151 + C47517 * ae)) / C47060;
    const double C124 = 4 * (2 * C47510 + C47085 * C47512) +
                        C47085 * (3 * C47512 + C47085 * C47517);
    const double C300 = C47088 * (3 * C47512 + C47085 * C47517);
    const double C304 = 2 * C47510 + C47085 * C47512 + C47517 * C47299;
    const double C489 = C47287 * (3 * C47512 + C47085 * C47517);
    const double C493 = 2 * C47510 + C47085 * C47512 + C47517 * C47324;
    const double C938 = C47287 * C47088 * C47517;
    const double C1437 =
        2 * C47088 * C47517 + C47088 * (C47517 + C47262 * C47299);
    const double C1599 = C47287 * (C47517 + C47262 * C47299);
    const double C2185 = C47088 * C47517 + C47088 * C47262 * C47324;
    const double C2303 =
        2 * C47287 * C47517 + C47287 * (C47517 + C47262 * C47324);
    const double C2194 = C113 * C1295;
    const double C5200 = C4784 * C1295;
    const double C16752 = C16336 * C1295;
    const double C1177 =
        (3 * (C47123 + C47088 * C47604 + C47602 * ae) +
         C47088 * (2 * C47604 +
                   C47088 * (C47146 + C47088 * (C47088 * C47179 + C47256 * ae) +
                             C47088 * C47256 * ae) +
                   C47605 * ae) +
         (2 * C47602 + C47088 * C47605) * ae) /
        C47060;
    const double C1305 =
        (C47088 * C47123 + C47512 * ae + C47604 * C47324) / C47060;
    const double C1311 =
        (C47287 * (C47123 + C47088 * C47604 + C47602 * ae)) / C47060;
    const double C1320 = (C47123 + C47088 * C47604 + C47602 * ae +
                          (C47146 + C47088 * (C47088 * C47179 + C47256 * ae) +
                           C47088 * C47256 * ae) *
                              C47324) /
                         C47060;
    const double C1720 =
        (C47287 * (2 * C47604 +
                   C47088 * (C47146 + C47088 * (C47088 * C47179 + C47256 * ae) +
                             C47088 * C47256 * ae) +
                   C47605 * ae)) /
        C47060;
    const double C2424 =
        (2 * C47287 * C47604 +
         C47287 * (C47604 + (C47088 * C47179 + C47256 * ae) * C47324)) /
        C47060;
    const double C1452 = C1446 + C1447;
    const double C5025 = C5006 + C5007;
    const double C16577 = C16558 + C16559;
    const double C2318 = C2312 + C2313;
    const double C6247 = C48253 * C1175;
    const double C17783 = C48253 * C1175;
    const double C6453 = C48253 * C1718;
    const double C11885 = C48121 * C1718;
    const double C17989 = C48253 * C1718;
    const double C6246 = C4784 * C1165;
    const double C17782 = C16336 * C1165;
    const double C7178 = C4784 * C1302;
    const double C11732 = C113 * C1302;
    const double C18698 = C16336 * C1302;
    const double C6452 = C4784 * C1714;
    const double C11884 = C113 * C1714;
    const double C17988 = C16336 * C1714;
    const double C47683 = C47128 + C47681;
    const double C12677 = C12671 * C1160;
    const double C44528 = C12671 * C46967;
    const double C45756 = C12671 * C2642;
    const double C47237 = C47236 + C47231;
    const double C1176 =
        (-3 * (C47210 * C47299 + C47217)) / C46941 +
        C47088 * ((-2 * C47308) / C46941 - (C47088 * C47313) / C46941);
    const double C1319 = -(C47313 * C47324 + C47210 * C47299 + C47217) / C46941;
    const double C1719 =
        C47287 * ((-2 * C47308) / C46941 - (C47088 * C47313) / C46941);
    const double C47386 = C47382 / C46941;
    const double C47384 = C47380 / C47096;
    const double C47417 = C47416 / C47096;
    const double C12650 =
        4 * ((-2 * C47287 * C47210) / C46941 - (C47287 * C47714) / C46941) +
        C47287 * ((-3 * C47714) / C46941 +
                  C47287 * ((-2 * C47414) / C46941 -
                            (C47287 * (C47257 * C47324 + C47234)) / C46941));
    const double C5951 = 4 * (2 * C47586 + C47088 * C47589) +
                         C47088 * (3 * C47589 + C47088 * C47669);
    const double C6105 = 2 * C47586 + C47088 * C47589 + C47669 * C47324;
    const double C6591 = C47287 * (3 * C47589 + C47088 * C47669);
    const double C23838 =
        2 * C47287 * C47669 + C47287 * (C47669 + C47730 * C47324);
    const double C47731 = C47729 + C47724;
    const double C28189 =
        (4 * (2 * C47287 * C47662 + C47287 * C47748) +
         C47287 * (3 * C47748 + C47287 * (2 * C47287 * C47723 +
                                          C47287 * (C47723 + (C47088 * C47173 +
                                                              C47246 * ae) *
                                                                 C47324)))) /
        C47060;
    const double C44256 =
        5 * (3 * C47842 + C47287 * C47860) +
        C47287 * (4 * C47860 +
                  C47287 * (3 * C47858 +
                            C47287 * (2 * C47287 * C47205 +
                                      C47287 * (C47205 + C47246 * C47324))));
    const double C47222 = C47221 + C47220;
    const double C2192 = C113 * C1306;
    const double C5194 = C4784 * C1306;
    const double C7180 = C4783 * C1306;
    const double C16746 = C16336 * C1306;
    const double C18700 = C16335 * C1306;
    const double C7324 = C4784 * C2423;
    const double C12892 = C113 * C2423;
    const double C18844 = C16336 * C2423;
    const double C11744 = C11734 + C11735;
    const double C27346 = C27331 + C27332;
    const double C27340 = C27319 + C27320;
    const double C38368 = C38353 + C38354;
    const double C38362 = C38341 + C38342;
    const double C12245 = C12240 + C12241;
    const double C27344 = C27327 + C27328;
    const double C27813 = C27807 + C27808;
    const double C38366 = C38349 + C38350;
    const double C38835 = C38829 + C38830;
    const double C47369 = C47366 / C47060;
    const double C47186 = C47085 * C47184;
    const double C1438 =
        (2 * (C47088 * C47151 + C47517 * ae) +
         C47088 * (C47151 + C47088 * (C47088 * C47184 + C47262 * ae) +
                   C47088 * C47262 * ae) +
         (C47517 + C47262 * C47299) * ae) /
        C47060;
    const double C1600 =
        (C47287 * (C47151 + C47088 * (C47088 * C47184 + C47262 * ae) +
                   C47088 * C47262 * ae)) /
        C47060;
    const double C2186 = (C47088 * C47151 + C47517 * ae +
                          (C47088 * C47184 + C47262 * ae) * C47324) /
                         C47060;
    const double C2304 =
        (2 * C47287 * C47151 + C47287 * (C47151 + C47184 * C47324)) / C47060;
    const double C47265 = C47263 + C47255;
    const double C47387 = C47088 * C47383;
    const double C7464 = (-2 * C47287 * C47313) / C46941 -
                         (C47287 * (C47383 * C47324 + C47313)) / C46941;
    const double C47450 = C47443 - C47447;
    const double C165 = C48121 * C136;
    const double C785 = C48121 * C503;
    const double C547 = C48121 * C511;
    const double C47180 = C47177 - C47159;
    const double C5954 =
        4 * ((-2 * C47296) / C46941 - (C47088 * C47304) / C46941) +
        C47088 * ((-3 * C47304) / C46941 + C47088 * C47371);
    const double C6108 =
        (-2 * C47296) / C46941 - (C47088 * C47304) / C46941 + C47371 * C47324;
    const double C6594 = C47287 * ((-3 * C47304) / C46941 + C47088 * C47371);
    const double C47451 = C47448 - C47159;
    const double C47483 = C47481 / C47060;
    const double C44258 =
        5 * ((-3 * C47708) / C46941 + C47287 * C47764) +
        C47287 * (4 * C47764 +
                  C47287 * ((-3 * C47462) / C46941 +
                            C47287 * ((-2 * C47474) / C46941 -
                                      (C47287 * (C47250 * C47324 + C47230)) /
                                          C46941)));
    const double C47266 = C47264 / C46941;
    const double C47522 = C47520 + C47521;
    const double C5952 = 4 * (2 * C47594 + C47088 * C47597) +
                         C47088 * (3 * C47597 + C47088 * C47684);
    const double C6106 = 2 * C47594 + C47088 * C47597 + C47684 * C47324;
    const double C6592 = C47287 * (3 * C47597 + C47088 * C47684);
    const double C47734 = C47722 + C47732;
    const double C43599 = C11713 + C11712;
    const double C47126 = C47125 - C47116;
    const double C47306 = C47305 - C47301;
    const double C12678 = C12672 * C47871;
    const double C44527 = C12672 * C48186;
    const double C45755 = C12672 * C2635;
    const double C13172 = C13170 * C47871;
    const double C44420 = C13170 * C48186;
    const double C44984 = C13170 * C2635;
    const double C44261 = C12675 + C12674;
    const double C47152 = C47150 - C47135;
    const double C47370 = C47367 - C47359;
    const double C47398 = C47397 - C47129;
    const double C47410 = C47409 / C47060;
    const double C47185 = C47183 - C47167;
    const double C47449 = C47446 - C47436;
    const double C47467 = C47465 - C47159;
    const double C47484 = C47482 / C47060;
    const double C48206 = C47978 * C47972;
    const double C48243 = C48208 + C47978;
    const double C48210 = C47985 / C46947;
    const double C48207 = C47985 * C47972;
    const double C1431 = C48276 - (C47978 * C47974) / C46941;
    const double C48212 = C48018 * C48012;
    const double C48249 = C48214 + C48018;
    const double C48216 = C48025 / C46947;
    const double C48213 = C48025 * C48012;
    const double C2299 = C48278 - (C48018 * C48014) / C46941;
    const double C46990 = C46981 - C46987;
    const double C46980 = C46975 * de;
    const double C14004 = C552 * C47002;
    const double C118 =
        (C47002 / C46947 + (0 * ce) / C46941) / C46947 - (0 * de) / C46941;
    const double C668 = C47002 / C46947 - (0 * de) / C46941;
    const double C2536 = C47002 / C46947 + (0 * ce) / C46941;
    const double C12398 = C552 * C1091;
    const double C46979 = C46974 * ce;
    const double C293 =
        ((-C46942 / C46941) / C46947 - (C46960 * de) / C46941) / C46947 -
        ((C46939 * ((-C46949) / C46947 - (C46974 * de) / C46941) + C2635) *
         de) /
            C46941 +
        (-C46961 / C46941) / C46947 - (0 * de) / C46941;
    const double C294 =
        ((-C46949) / C46947 - (C46974 * de) / C46941) / C46947 -
        ((C46939 * ((-C46961 / C46941) / C46947 - (0 * de) / C46941) + C47881) *
         de) /
            C46941;
    const double C2641 = (-C46949) / C46947 - (C46974 * de) / C46941;
    const double C48222 = C48185 / C46941;
    const double C48259 = C48226 / C46947;
    const double C48260 = C48228 + C48193;
    const double C661 = C48193 - C47882 / C46953;
    const double C48225 = C48189 / C46941;
    const double C11113 = C551 * C659;
    const double C11105 = C10837 * C659;
    const double C43158 = C10838 * C659;
    const double C11746 = C11738 * C1160;
    const double C11748 = C11740 * C1160;
    const double C11753 = C11745 * C1160;
    const double C12246 = C12244 * C1160;
    const double C13173 = C13171 * C1160;
    const double C10820 = C554 * C295;
    const double C12404 = C554 * C1091;
    const double C14010 = C554 * C47002;
    const double C10828 = C558 * C295;
    const double C12410 = C558 * C1091;
    const double C12878 = C558 * C46967;
    const double C13640 = C558 * C2642;
    const double C15048 = C558 * C47002;
    const double C11320 = C970 * C295;
    const double C12096 = C970 * C46967;
    const double C13648 = C970 * C2642;
    const double C14016 = C970 * C47002;
    const double C15448 = C970 * C1091;
    const double C47147 = C47144 - C47129;
    const double C2198 = C2190 + C2191;
    const double C5214 = C5190 + C5191;
    const double C7184 = C7176 + C7177;
    const double C16766 = C16742 + C16743;
    const double C18704 = C18696 + C18697;
    const double C1612 = C1604 + C1605;
    const double C5716 = C5700 + C5701;
    const double C6458 = C6450 + C6451;
    const double C17268 = C17252 + C17253;
    const double C17994 = C17986 + C17987;
    const double C7327 = C7320 + C7321;
    const double C12894 = C12890 + C12891;
    const double C18847 = C18840 + C18841;
    const double C5953 =
        (4 * (2 * C47588 + C47088 * C47670 + C47589 * ae) +
         C47088 *
             (3 * C47670 +
              C47088 *
                  (2 * C47662 +
                   C47088 * (C47119 + C47088 * (C47088 * C47140 + C47205 * ae) +
                             C47088 * C47205 * ae) +
                   C47664 * ae) +
              C47669 * ae) +
         (3 * C47589 + C47088 * C47669) * ae) /
        C47060;
    const double C6107 =
        (2 * C47588 + C47088 * C47670 + C47589 * ae +
         (2 * C47662 +
          C47088 * (C47119 + C47088 * (C47088 * C47140 + C47205 * ae) +
                    C47088 * C47205 * ae) +
          C47664 * ae) *
             C47324) /
        C47060;
    const double C6593 =
        (C47287 *
         (3 * C47670 +
          C47088 *
              (2 * C47662 +
               C47088 * (C47119 + C47088 * (C47088 * C47140 + C47205 * ae) +
                         C47088 * C47205 * ae) +
               C47664 * ae) +
          C47669 * ae)) /
        C47060;
    const double C7461 =
        (2 * C47287 * C47670 +
         C47287 * (C47670 + (C47119 + C47088 * (C47088 * C47140 + C47205 * ae) +
                             C47088 * C47205 * ae) *
                                C47324)) /
        C47060;
    const double C44638 = C44636 * C1160;
    const double C44270 = C44268 * C1160;
    const double C675 = C48121 * C314;
    const double C4813 = C48253 * C314;
    const double C16365 = C48253 * C314;
    const double C358 = C48121 * C322;
    const double C5355 = C48253 * C322;
    const double C16907 = C48253 * C322;
    const double C965 = C48121 * C946;
    const double C5497 = C48253 * C946;
    const double C17049 = C48253 * C946;
    const double C164 = C113 * C124;
    const double C674 = C113 * C300;
    const double C4812 = C4784 * C300;
    const double C16364 = C16336 * C300;
    const double C357 = C113 * C304;
    const double C5354 = C4784 * C304;
    const double C16906 = C16336 * C304;
    const double C784 = C113 * C489;
    const double C546 = C113 * C493;
    const double C964 = C113 * C938;
    const double C5496 = C4784 * C938;
    const double C17048 = C16336 * C938;
    const double C2195 = C48121 * C1305;
    const double C5201 = C48253 * C1305;
    const double C16753 = C48253 * C1305;
    const double C1609 = C48121 * C1311;
    const double C5711 = C48253 * C1311;
    const double C17263 = C48253 * C1311;
    const double C13032 = C2318 * C46967;
    const double C14702 = C2318 * C2642;
    const double C42955 = C2318 * C295;
    const double C44079 = C2318 * C1091;
    const double C46021 = C2318 * C47002;
    const double C6253 = C6246 + C6247;
    const double C17789 = C17782 + C17783;
    const double C7185 = C7178 + C7179;
    const double C11743 = C11732 + C11733;
    const double C18705 = C18698 + C18699;
    const double C6459 = C6452 + C6453;
    const double C11888 = C11884 + C11885;
    const double C17995 = C17988 + C17989;
    const double C47685 = C47683 + C47678;
    const double C47238 = C47085 * C47237;
    const double C47243 = -3 * C47237;
    const double C47318 = ae * C47237;
    const double C47316 = C47088 * C47237;
    const double C6250 = C4784 * C1176;
    const double C17786 = C16336 * C1176;
    const double C7182 = C4784 * C1319;
    const double C11730 = C113 * C1319;
    const double C18702 = C16336 * C1319;
    const double C6456 = C4784 * C1719;
    const double C11886 = C113 * C1719;
    const double C17992 = C16336 * C1719;
    const double C27333 = C16336 * C6105;
    const double C38355 = C4784 * C6105;
    const double C43956 = C113 * C6105;
    const double C27805 = C16336 * C6591;
    const double C38827 = C4784 * C6591;
    const double C47733 = C47088 * C47731;
    const double C23493 =
        (3 * (C47670 + C47731 * C47324) +
         C47287 *
             (2 * C47287 * C47731 +
              C47287 *
                  (C47731 + (C47140 + C47088 * (C47088 * C47173 + C47246 * ae) +
                             C47088 * C47246 * ae) *
                                C47324))) /
        C47060;
    const double C135 =
        (-3 * (C47085 * C47217 + C47213 + C47510 * ce)) / C46941 +
        C47085 * ((-2 * C47217) / C46941 - (C47085 * C47222) / C46941 -
                  (C47512 * ce) / C46941) -
        ((2 * C47510 + C47085 * C47512) * ce) / C46941;
    const double C313 =
        C47088 * ((-2 * C47217) / C46941 - (C47085 * C47222) / C46941 -
                  (C47512 * ce) / C46941);
    const double C321 =
        -(C47222 * C47299 + C47085 * C47217 + C47213 + C47510 * ce) / C46941;
    const double C502 =
        C47287 * ((-2 * C47217) / C46941 - (C47085 * C47222) / C46941 -
                  (C47512 * ce) / C46941);
    const double C510 =
        -(C47222 * C47324 + C47085 * C47217 + C47213 + C47510 * ce) / C46941;
    const double C945 = -(C47287 * C47088 * C47222) / C46941;
    const double C1167 = (-2 * C47088 * C47222) / C46941 -
                         (C47088 * (C47237 * C47299 + C47222)) / C46941;
    const double C1310 = -(C47287 * (C47237 * C47299 + C47222)) / C46941;
    const double C2021 = (-2 * C47287 * C47222) / C46941 -
                         (C47287 * (C47237 * C47324 + C47222)) / C46941;
    const double C11752 = C11744 * C47871;
    const double C43855 = C11744 * C48186;
    const double C45400 = C11744 * C2635;
    const double C12247 = C12245 * C47871;
    const double C47372 = C47369 - C47129;
    const double C47188 = C47163 + C47186;
    const double C47267 = C47085 * C47265;
    const double C47319 = C47265 * C47299;
    const double C2032 =
        (-3 * (C47237 * C47324 + C47222)) / C46941 +
        C47287 * ((-2 * C47287 * C47237) / C46941 -
                  (C47287 * (C47265 * C47324 + C47237)) / C46941);
    const double C47390 = C47387 / C46941;
    const double C47453 = C47088 * C47450;
    const double C23840 =
        2 * C47287 * C47371 + C47287 * (C47371 + C47450 * C47324);
    const double C27329 = C16336 * C6108;
    const double C38351 = C4784 * C6108;
    const double C43958 = C113 * C6108;
    const double C27809 = C16336 * C6594;
    const double C38831 = C4784 * C6594;
    const double C47485 = C47483 - C47472;
    const double C125 = 5 * (3 * C47512 + C47085 * C47517) +
                        C47085 * (4 * C47517 + C47085 * C47522);
    const double C305 = 3 * C47512 + C47085 * C47517 + C47522 * C47299;
    const double C494 = 3 * C47512 + C47085 * C47517 + C47522 * C47324;
    const double C669 = C47088 * (4 * C47517 + C47085 * C47522);
    const double C779 = C47287 * (4 * C47517 + C47085 * C47522);
    const double C939 = C47287 * C47088 * C47522;
    const double C22746 = 5 * (3 * C47589 + C47088 * C47669) +
                          C47088 * (4 * C47669 + C47088 * C47734);
    const double C22860 = 3 * C47589 + C47088 * C47669 + C47734 * C47324;
    const double C23206 = C47287 * (4 * C47669 + C47088 * C47734);
    const double C144 =
        3 * ((-(C47110 * ce) / C46941) / C47060 - C47107 / C47096 +
             C47085 * C47126) -
        ((2 * C47110 + C47085 * C47123) * ce) / C47096 +
        C47085 *
            (2 * C47126 - (C47123 * ce) / C47096 +
             C47085 *
                 ((-(C47085 * C47119 * ce) / C46941) / C47060 -
                  C47118 / C47096 +
                  C47085 * ((-(C47085 * std::pow(C47090, 6) * bs[6] * C47101) /
                             C46941) /
                                C47060 -
                            (C47119 * ce) / C47096)));
    const double C328 =
        C47088 * ((-(C47110 * ce) / C46941) / C47060 - C47107 / C47096 +
                  C47085 * C47126) -
        (ae * (C47085 * (C47085 * C47103 * C47104 * C47195 + C47196 * ce) +
               C47097 * C47093 * C47195 + C47085 * C47196 * ce)) /
            C47096;
    const double C332 = (-(C47085 * C47107) / C46941) / C47060 -
                        (C47100 * ce) / C47096 -
                        (ae * C47088 * C47217) / C47096 +
                        C47088 * (C47088 * C47126 - (ae * C47217) / C47096);
    const double C517 = (zP - zQ) * ((-(C47110 * ce) / C46941) / C47060 -
                                     C47107 / C47096 + C47085 * C47126);
    const double C521 = (-(C47085 * C47107) / C46941) / C47060 -
                        (C47100 * ce) / C47096 + C47126 * std::pow(zP - zQ, 2);
    const double C951 =
        C47088 * C47287 * C47126 - (ae * C47287 * C47217) / C47096;
    const double C1182 =
        3 * ((-(ae * C47296) / C46941) / C47060 - C47107 / C47096 +
             C47088 * C47306) +
        (((-2 * C47296) / C46941 - (C47088 * C47304) / C46941) * ae) / C47060 +
        C47088 *
            (2 * C47306 - (ae * C47304) / C47096 +
             C47088 * ((-(ae * C47088 * C47206) / C46941) / C47060 - C47129 +
                       C47088 * ((-(C47088 * C47139) / C46941) / C47060 -
                                 (ae * C47206) / C47096)));
    const double C44262 = C12679 + C12678;
    const double C47153 = C47085 * C47152;
    const double C47156 = 2 * C47152;
    const double C47309 = C47088 * C47152;
    const double C47338 = C47287 * C47152;
    const double C47388 = C47152 - C47384;
    const double C1180 =
        2 * (C47088 * C47126 - (ae * C47217) / C47096) -
        (ae * (C47210 * std::pow(C47088, 2) + C47217)) / C47096 +
        C47088 * (C47126 - (ae * C47088 * C47210) / C47096 +
                  C47088 * (C47088 * C47152 - (ae * C47210) / C47096));
    const double C1323 = C47088 * (C47126 + C47152 * C47324) -
                         (ae * (C47210 * C47324 + C47217)) / C47096;
    const double C1326 =
        C47287 * C47126 - (ae * C47287 * C47308) / C47096 +
        C47088 * (C47088 * C47287 * C47152 - (ae * C47287 * C47210) / C47096);
    const double C2034 =
        2 * C47287 * C47126 + C47287 * (C47126 + C47152 * C47324);
    const double C47373 = C47088 * C47370;
    const double C47426 = 2 * C47370;
    const double C6111 =
        2 * (C47088 * C47398 - (ae * (C47206 * C47324 + C47200)) / C47096) -
        (ae * (C47361 * C47324 + C47304)) / C47096 +
        C47088 * (C47398 - (ae * (C47088 * C47230 * C47324 + C47353)) / C47096 +
                  C47088 * (C47088 * ((-(C47172 * C47324) / C46941) / C47060 -
                                      C47159) -
                            (ae * (C47230 * C47324 + C47206)) / C47096));
    const double C6979 =
        (((-3 * (C47206 * C47324 + C47200)) / C46941 +
          C47287 * ((-2 * C47404) / C46941 -
                    (C47287 * (C47230 * C47324 + C47206)) / C46941)) *
         ae) /
            C47060 +
        C47088 * (3 * C47398 +
                  C47287 * ((-2 * C47403) / C47096 +
                            C47287 * ((-(C47172 * C47324) / C46941) / C47060 -
                                      C47159)));
    const double C7465 =
        (-2 * C47336) / C47096 + C47287 * C47398 +
        (((-2 * C47287 * C47353) / C46941 -
          (C47287 * (C47088 * C47230 * C47324 + C47353)) / C46941) *
         ae) /
            C47060 +
        C47088 * ((((-2 * C47404) / C46941 -
                    (C47287 * (C47230 * C47324 + C47206)) / C46941) *
                   ae) /
                      C47060 +
                  C47088 * ((-2 * C47403) / C47096 +
                            C47287 * ((-(C47172 * C47324) / C46941) / C47060 -
                                      C47159)));
    const double C12651 =
        4 * ((-2 * C47336) / C47096 + C47287 * C47398) +
        C47287 * (3 * C47398 +
                  C47287 * ((-2 * C47403) / C47096 +
                            C47287 * ((-(C47172 * C47324) / C46941) / C47060 -
                                      C47159)));
    const double C47411 = C47410 - C47408;
    const double C47187 = C47085 * C47185;
    const double C47377 = C47088 * C47185;
    const double C47400 = C47185 * C47324;
    const double C47413 = C47287 * C47185;
    const double C1329 = C47126 + C47152 * C47324 -
                         (ae * (C47088 * C47234 * C47324 + C47308)) / C47096 +
                         C47088 * (C47088 * (C47152 + C47185 * C47324) -
                                   (ae * (C47234 * C47324 + C47210)) / C47096);
    const double C47452 = C47088 * C47449;
    const double C47468 = C47088 * C47467;
    const double C47492 = C47287 * C47467;
    const double C23495 =
        3 * C47398 + C47287 * ((-2 * C47403) / C47096 + C47287 * C47467) +
        (((-3 * (C47428 * C47324 + C47353)) / C46941 +
          C47287 * ((-2 * C47471) / C46941 -
                    (C47287 * (C47088 * C47250 * C47324 + C47428)) / C46941)) *
         ae) /
            C47060 +
        C47088 * ((((-3 * C47462) / C46941 +
                    C47287 * ((-2 * C47474) / C46941 -
                              (C47287 * (C47250 * C47324 + C47230)) / C46941)) *
                   ae) /
                      C47060 +
                  C47088 * (3 * C47467 +
                            C47287 * ((-2 * C47473) / C47096 +
                                      C47287 * ((-(std::pow(C47090, 8) * bs[8] *
                                                   C47101 * C47324) /
                                                 C46941) /
                                                    C47060 -
                                                C47172 / C47096))));
    const double C47486 = C47484 - C47480;
    const double C48240 = C48206 / C46941;
    const double C48266 = C48243 / C46947;
    const double C48267 = C48244 + C48210;
    const double C1433 = C48210 - C47983 / C46953;
    const double C48242 = C48207 / C46941;
    const double C48246 = C48212 / C46941;
    const double C48269 = C48249 / C46947;
    const double C48270 = C48250 + C48216;
    const double C2301 = C48216 - C48023 / C46953;
    const double C48248 = C48213 / C46941;
    const double C46984 = C46980 / C46941;
    const double C11110 = C554 * C668;
    const double C14362 = C554 * C2536;
    const double C46983 = C46979 / C46941;
    const double C10832 = C556 * C293;
    const double C10816 = C550 * C293;
    const double C10843 = C10839 * C293;
    const double C10840 = C10836 * C293;
    const double C11324 = C968 * C293;
    const double C11331 = C11329 * C293;
    const double C42953 = C12668 * C293;
    const double C43313 = C11738 * C293;
    const double C10830 = C558 * C294;
    const double C10822 = C556 * C294;
    const double C10818 = C552 * C294;
    const double C10812 = C550 * C294;
    const double C11322 = C970 * C294;
    const double C11314 = C968 * C294;
    const double C42951 = C2316 * C294;
    const double C13652 = C11738 * C2641;
    const double C13650 = C968 * C2641;
    const double C13646 = C11329 * C2641;
    const double C13642 = C556 * C2641;
    const double C13638 = C10839 * C2641;
    const double C13632 = C550 * C2641;
    const double C13628 = C10836 * C2641;
    const double C14218 = C11740 * C2641;
    const double C14700 = C2316 * C2641;
    const double C14696 = C12668 * C2641;
    const double C44983 = C13171 * C2641;
    const double C45399 = C11745 * C2641;
    const double C45754 = C12673 * C2641;
    const double C48280 = C48222 + C48272;
    const double C660 = C48259 - (C47884 * C47867) / C46941;
    const double C105 = C48260 / C46947 - C47882 / C48229;
    const double C48273 = C48225 + C48259;
    const double C43600 = C11747 + C11746;
    const double C44630 = C13173 + C13172;
    const double C11722 = C2198 * C1160;
    const double C12884 = C2198 * C46967;
    const double C13656 = C2198 * C2641;
    const double C13654 = C2198 * C2642;
    const double C43311 = C2198 * C294;
    const double C11728 = C1612 * C1160;
    const double C12102 = C1612 * C46967;
    const double C14222 = C1612 * C2641;
    const double C14220 = C1612 * C2642;
    const double C13165 = C12894 * C1160;
    const double C44421 = C12894 * C46967;
    const double C44985 = C12894 * C2642;
    const double C27334 = C48253 * C6107;
    const double C38356 = C48253 * C6107;
    const double C43957 = C48121 * C6107;
    const double C27806 = C48253 * C6593;
    const double C38828 = C48253 * C6593;
    const double C28676 = C48253 * C7461;
    const double C39694 = C48253 * C7461;
    const double C43605 = C48121 * C7461;
    const double C176 = C164 + C165;
    const double C678 = C674 + C675;
    const double C4831 = C4812 + C4813;
    const double C16383 = C16364 + C16365;
    const double C371 = C357 + C358;
    const double C5361 = C5354 + C5355;
    const double C16913 = C16906 + C16907;
    const double C788 = C784 + C785;
    const double C560 = C546 + C547;
    const double C972 = C964 + C965;
    const double C5503 = C5496 + C5497;
    const double C17055 = C17048 + C17049;
    const double C2200 = C2194 + C2195;
    const double C5219 = C5200 + C5201;
    const double C16771 = C16752 + C16753;
    const double C1614 = C1608 + C1609;
    const double C5721 = C5710 + C5711;
    const double C17273 = C17262 + C17263;
    const double C11751 = C11743 * C1160;
    const double C43856 = C11743 * C46967;
    const double C45401 = C11743 * C2642;
    const double C12242 = C11888 * C1160;
    const double C5955 =
        (4 * (2 * C47596 + C47088 * C47685 + C47597 * ae) +
         C47088 * (3 * C47685 +
                   C47088 * (2 * C47677 +
                             C47088 * (C47158 +
                                       C47088 * (C47088 * C47085 * C47173 +
                                                 C47252 * ae) +
                                       C47088 * C47252 * ae) +
                             C47679 * ae) +
                   C47684 * ae) +
         (3 * C47597 + C47088 * C47684) * ae) /
        C47060;
    const double C6109 =
        (2 * C47596 + C47088 * C47685 + C47597 * ae +
         (2 * C47677 +
          C47088 * (C47158 + C47088 * (C47088 * C47085 * C47173 + C47252 * ae) +
                    C47088 * C47252 * ae) +
          C47679 * ae) *
             C47324) /
        C47060;
    const double C6595 =
        (C47287 * (3 * C47685 +
                   C47088 * (2 * C47677 +
                             C47088 * (C47158 +
                                       C47088 * (C47088 * C47085 * C47173 +
                                                 C47252 * ae) +
                                       C47088 * C47252 * ae) +
                             C47679 * ae) +
                   C47684 * ae)) /
        C47060;
    const double C7463 =
        (2 * C47287 * C47685 +
         C47287 * (C47685 +
                   (C47158 + C47088 * (C47088 * C47085 * C47173 + C47252 * ae) +
                    C47088 * C47252 * ae) *
                       C47324)) /
        C47060;
    const double C47239 = C47238 / C46941;
    const double C47248 = C47243 / C46941;
    const double C47320 = C47318 / C47096;
    const double C1304 = -(C47316 * C47324 + C47088 * C47222) / C46941;
    const double C2425 =
        (-2 * C47287 * C47316) / C46941 -
        (C47287 * (C47088 * C47265 * C47324 + C47316)) / C46941;
    const double C47735 = C47716 + C47733;
    const double C162 = C113 * C135;
    const double C4814 = C4783 * C135;
    const double C16366 = C16335 * C135;
    const double C347 = C113 * C313;
    const double C4806 = C4784 * C313;
    const double C5356 = C4783 * C313;
    const double C16358 = C16336 * C313;
    const double C16908 = C16335 * C313;
    const double C355 = C113 * C321;
    const double C5008 = C4783 * C321;
    const double C4992 = C4784 * C321;
    const double C16560 = C16335 * C321;
    const double C16544 = C16336 * C321;
    const double C536 = C113 * C502;
    const double C5498 = C4783 * C502;
    const double C17050 = C16335 * C502;
    const double C544 = C113 * C510;
    const double C5202 = C4783 * C510;
    const double C16754 = C16335 * C510;
    const double C962 = C113 * C945;
    const double C5186 = C4784 * C945;
    const double C5712 = C4783 * C945;
    const double C16738 = C16336 * C945;
    const double C17264 = C16335 * C945;
    const double C1448 = C113 * C1167;
    const double C5010 = C4784 * C1167;
    const double C16562 = C16336 * C1167;
    const double C1610 = C113 * C1310;
    const double C5714 = C4784 * C1310;
    const double C17266 = C16336 * C1310;
    const double C2314 = C113 * C2021;
    const double C43601 = C11753 + C11752;
    const double C138 = (5 * (3 * C47123 + C47085 * C47151) +
                         C47085 * (4 * C47151 + C47085 * C47188)) /
                        C47060;
    const double C324 =
        (3 * C47123 + C47085 * C47151 +
         C47088 * (C47088 * C47188 + C47522 * ae) + C47088 * C47522 * ae) /
        C47060;
    const double C513 =
        (3 * C47123 + C47085 * C47151 + C47188 * C47324) / C47060;
    const double C670 = (C47088 * (4 * C47151 + C47085 * C47188) +
                         (4 * C47517 + C47085 * C47522) * ae) /
                        C47060;
    const double C780 = (C47287 * (4 * C47151 + C47085 * C47188)) / C47060;
    const double C948 = (C47287 * (C47088 * C47188 + C47522 * ae)) / C47060;
    const double C47268 = C47267 / C46941;
    const double C47321 = C47319 + C47237;
    const double C47392 = C47386 - C47390;
    const double C47455 = C47437 + C47453;
    const double C163 = C48121 * C144;
    const double C4815 = C4779 * C144;
    const double C16367 = C16331 * C144;
    const double C344 = C48121 * C328;
    const double C4801 = C48253 * C328;
    const double C4995 = C4779 * C328;
    const double C16353 = C48253 * C328;
    const double C16547 = C16331 * C328;
    const double C352 = C48121 * C332;
    const double C5003 = C4779 * C332;
    const double C4987 = C48253 * C332;
    const double C16555 = C16331 * C332;
    const double C16539 = C48253 * C332;
    const double C533 = C48121 * C517;
    const double C5189 = C4779 * C517;
    const double C16741 = C16331 * C517;
    const double C541 = C48121 * C521;
    const double C5197 = C4779 * C521;
    const double C16749 = C16331 * C521;
    const double C959 = C48121 * C951;
    const double C5181 = C48253 * C951;
    const double C5707 = C4779 * C951;
    const double C16733 = C48253 * C951;
    const double C17259 = C16331 * C951;
    const double C47154 = C47147 + C47153;
    const double C47170 = C47156 - C47164;
    const double C47314 = C47309 - C47312;
    const double C1723 =
        2 * (C47088 * C47338 - (ae * C47287 * C47210) / C47096) -
        (ae * C47287 * C47313) / C47096 +
        C47088 * (C47338 - (ae * C47287 * C47088 * C47234) / C47096 +
                  C47088 * (C47088 * C47287 * C47185 -
                            (ae * C47287 * C47234) / C47096));
    const double C2037 =
        3 * (C47126 + C47152 * C47324) +
        C47287 * (2 * C47338 + C47287 * (C47152 + C47185 * C47324));
    const double C2427 =
        (((-2 * C47287 * C47210) / C46941 -
          (C47287 * (C47234 * C47324 + C47210)) / C46941) *
         ae) /
            C47060 +
        C47088 * (2 * C47338 + C47287 * (C47152 + C47185 * C47324));
    const double C1445 = C48121 * C1180;
    const double C5001 = C48253 * C1180;
    const double C6249 = C4779 * C1180;
    const double C16553 = C48253 * C1180;
    const double C17785 = C16331 * C1180;
    const double C2193 = C48121 * C1323;
    const double C5195 = C48253 * C1323;
    const double C7181 = C4779 * C1323;
    const double C16747 = C48253 * C1323;
    const double C18701 = C16331 * C1323;
    const double C1607 = C48121 * C1326;
    const double C5705 = C48253 * C1326;
    const double C6455 = C4779 * C1326;
    const double C17257 = C48253 * C1326;
    const double C17991 = C16331 * C1326;
    const double C2311 = C48121 * C2034;
    const double C7323 = C4779 * C2034;
    const double C18843 = C16331 * C2034;
    const double C47374 = C47372 + C47373;
    const double C47440 = C47426 - C47433;
    const double C27330 = C48253 * C6111;
    const double C38352 = C48253 * C6111;
    const double C43959 = C48121 * C6111;
    const double C28202 = C48253 * C6979;
    const double C39220 = C48253 * C6979;
    const double C44632 = C48121 * C6979;
    const double C28672 = C48253 * C7465;
    const double C39690 = C48253 * C7465;
    const double C43603 = C48121 * C7465;
    const double C44264 = C48121 * C12651;
    const double C6597 =
        3 * ((-(ae * C47287 * C47353) / C46941) / C47060 - C47336 / C47096 +
             C47088 * C47411) +
        (C47287 * C47371 * ae) / C47060 +
        C47088 *
            (2 * C47411 - (ae * C47287 * C47361) / C47096 +
             C47088 *
                 ((-(ae * C47287 * C47088 * C47230) / C46941) / C47060 -
                  C47403 / C47096 +
                  C47088 * ((-(C47088 * C47287 * C47172) / C46941) / C47060 -
                            (ae * C47287 * C47230) / C47096)));
    const double C47189 = C47180 + C47187;
    const double C47385 = C47377 - C47381;
    const double C47401 = C47152 + C47400;
    const double C47415 = C47088 * C47413;
    const double C7183 = C48253 * C1329;
    const double C11731 = C48121 * C1329;
    const double C18703 = C48253 * C1329;
    const double C47454 = C47451 + C47452;
    const double C47469 = C47468 - C47466;
    const double C47494 = C47493 + C47492;
    const double C47487 = C47088 * C47486;
    const double C48281 = C48240 + C48276;
    const double C1432 = C48266 - (C47985 * C47974) / C46941;
    const double C1158 = C48267 / C46947 - C47983 / C48229;
    const double C48277 = C48242 + C48266;
    const double C48282 = C48246 + C48278;
    const double C2300 = C48269 - (C48025 * C48014) / C46941;
    const double C2013 = C48270 / C46947 - C48023 / C48229;
    const double C48279 = C48248 + C48269;
    const double C46986 = C46983 - C46962;
    const double C42950 = C10843 + C10842;
    const double C44982 = C13653 + C13652;
    const double C44981 = C13638 + C13637;
    const double C45753 = C14697 + C14696;
    const double C14365 = C551 * C48280;
    const double C14357 = C10837 * C48280;
    const double C45502 = C10838 * C48280;
    const double C102 =
        (C48271 + 2 * C47876) / C46947 - (C48280 * C47867) / C46941;
    const double C11107 = C551 * C660;
    const double C14359 = C551 * C48273;
    const double C103 =
        (C48258 + 2 * C47884 + C48280) / C46947 - (C48273 * C47867) / C46941;
    const double C104 = (C48227 + C47881 / C46941 + C48273) / C46947 -
                        (C48260 * C47867) / C46941;
    const double C27347 = C27333 + C27334;
    const double C38369 = C38355 + C38356;
    const double C43960 = C43956 + C43957;
    const double C27812 = C27805 + C27806;
    const double C38834 = C38827 + C38828;
    const double C28681 = C28675 + C28676;
    const double C39699 = C39693 + C39694;
    const double C43607 = C43604 + C43605;
    const double C11118 = C788 * C668;
    const double C14370 = C788 * C2536;
    const double C10834 = C560 * C295;
    const double C12416 = C560 * C1091;
    const double C15054 = C560 * C47002;
    const double C43163 = C560 * C668;
    const double C45507 = C560 * C2536;
    const double C11326 = C972 * C295;
    const double C14022 = C972 * C47002;
    const double C15454 = C972 * C1091;
    const double C12888 = C2200 * C46967;
    const double C13658 = C2200 * C2642;
    const double C43315 = C2200 * C295;
    const double C45251 = C2200 * C47002;
    const double C46323 = C2200 * C1091;
    const double C12106 = C1614 * C46967;
    const double C14224 = C1614 * C2642;
    const double C47240 = C47229 - C47239;
    const double C2196 = C113 * C1304;
    const double C5204 = C4784 * C1304;
    const double C16756 = C16336 * C1304;
    const double C47736 = C47735 + C47720;
    const double C47269 = C47249 - C47268;
    const double C1178 =
        (-3 * (C47237 * C47299 + C47222)) / C46941 +
        C47088 * ((-2 * C47316) / C46941 - (C47088 * C47321) / C46941);
    const double C1321 = -(C47321 * C47324 + C47237 * C47299 + C47222) / C46941;
    const double C1721 =
        C47287 * ((-2 * C47316) / C46941 - (C47088 * C47321) / C46941);
    const double C5956 =
        4 * ((-2 * C47308) / C46941 - (C47088 * C47313) / C46941) +
        C47088 * ((-3 * C47313) / C46941 + C47088 * C47392);
    const double C6110 =
        (-2 * C47308) / C46941 - (C47088 * C47313) / C46941 + C47392 * C47324;
    const double C6596 = C47287 * ((-3 * C47313) / C46941 + C47088 * C47392);
    const double C22748 = 5 * ((-3 * C47304) / C46941 + C47088 * C47371) +
                          C47088 * (4 * C47371 + C47088 * C47455);
    const double C22862 =
        (-3 * C47304) / C46941 + C47088 * C47371 + C47455 * C47324;
    const double C23208 = C47287 * (4 * C47371 + C47088 * C47455);
    const double C175 = C162 + C163;
    const double C4832 = C4814 + C4815;
    const double C16384 = C16366 + C16367;
    const double C364 = C343 + C344;
    const double C4825 = C4800 + C4801;
    const double C5019 = C4994 + C4995;
    const double C16377 = C16352 + C16353;
    const double C16571 = C16546 + C16547;
    const double C368 = C351 + C352;
    const double C5023 = C5002 + C5003;
    const double C5015 = C4986 + C4987;
    const double C16575 = C16554 + C16555;
    const double C16567 = C16538 + C16539;
    const double C553 = C532 + C533;
    const double C5213 = C5188 + C5189;
    const double C16765 = C16740 + C16741;
    const double C557 = C540 + C541;
    const double C5217 = C5196 + C5197;
    const double C16769 = C16748 + C16749;
    const double C969 = C958 + C959;
    const double C5209 = C5180 + C5181;
    const double C5719 = C5706 + C5707;
    const double C16761 = C16732 + C16733;
    const double C17271 = C17258 + C17259;
    const double C145 =
        4 * (2 * C47126 - (C47123 * ce) / C47096 + C47085 * C47154) -
        ((3 * C47123 + C47085 * C47151) * ce) / C47096 +
        C47085 *
            (3 * C47154 - (C47151 * ce) / C47096 +
             C47085 * (2 * C47152 - (C47146 * ce) / C47096 +
                       C47085 * ((-(C47085 * C47140 * ce) / C46941) / C47060 -
                                 C47139 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47092, 7) *
                                              bs[7] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47140 * ce) / C47096))));
    const double C329 =
        (((-2 * (C47085 * C47200 + C47196 * ce)) / C46941 -
          (C47085 *
           (C47085 * (C47085 * C47111 * C47112 * C47195 + C47199 * ce) +
            C47200 + C47085 * C47199 * ce)) /
              C46941 -
          ((C47196 + C47199 * C47114) * ce) / C46941) *
         ae) /
            C47060 +
        C47088 * (2 * C47126 - (C47123 * ce) / C47096 + C47085 * C47154);
    const double C333 = (-(C47110 * ce) / C46941) / C47060 - C47107 / C47096 +
                        C47085 * C47126 - (ae * C47088 * C47222) / C47096 +
                        C47088 * (C47088 * C47154 - (ae * C47222) / C47096);
    const double C518 =
        (zP - zQ) * (2 * C47126 - (C47123 * ce) / C47096 + C47085 * C47154);
    const double C522 = (-(C47110 * ce) / C46941) / C47060 - C47107 / C47096 +
                        C47085 * C47126 + C47154 * std::pow(zP - zQ, 2);
    const double C952 =
        C47088 * C47287 * C47154 - (ae * C47287 * C47222) / C47096;
    const double C1183 =
        3 * (C47126 - (ae * C47308) / C47096 + C47088 * C47314) +
        (((-2 * C47308) / C46941 - (C47088 * C47313) / C46941) * ae) / C47060 +
        C47088 *
            (2 * C47314 - (ae * C47313) / C47096 +
             C47088 * (C47152 - (ae * C47088 * C47234) / C47096 +
                       C47088 * (C47088 * C47185 - (ae * C47234) / C47096)));
    const double C6457 = C48253 * C1723;
    const double C11887 = C48121 * C1723;
    const double C17993 = C48253 * C1723;
    const double C12661 = C48121 * C2037;
    const double C7325 = C48253 * C2427;
    const double C12893 = C48121 * C2427;
    const double C18845 = C48253 * C2427;
    const double C1451 = C1444 + C1445;
    const double C5022 = C5000 + C5001;
    const double C6254 = C6248 + C6249;
    const double C16574 = C16552 + C16553;
    const double C17790 = C17784 + C17785;
    const double C2199 = C2192 + C2193;
    const double C5216 = C5194 + C5195;
    const double C7186 = C7180 + C7181;
    const double C16768 = C16746 + C16747;
    const double C18706 = C18700 + C18701;
    const double C1613 = C1606 + C1607;
    const double C5718 = C5704 + C5705;
    const double C6460 = C6454 + C6455;
    const double C17270 = C17256 + C17257;
    const double C17996 = C17990 + C17991;
    const double C2317 = C2310 + C2311;
    const double C7328 = C7322 + C7323;
    const double C18848 = C18842 + C18843;
    const double C5957 =
        4 * (2 * C47306 - (ae * C47304) / C47096 + C47088 * C47374) +
        (((-3 * C47304) / C46941 + C47088 * C47371) * ae) / C47060 +
        C47088 *
            (3 * C47374 + (C47371 * ae) / C47060 +
             C47088 *
                 (2 * C47370 - (ae * C47361) / C47096 +
                  C47088 *
                      ((-(ae * C47088 * C47230) / C46941) / C47060 - C47159 +
                       C47088 * ((-(C47088 * C47172) / C46941) / C47060 -
                                 (ae * C47230) / C47096))));
    const double C27345 = C27329 + C27330;
    const double C38367 = C38351 + C38352;
    const double C43961 = C43958 + C43959;
    const double C28213 = C28201 + C28202;
    const double C39231 = C39219 + C39220;
    const double C44635 = C44631 + C44632;
    const double C28679 = C28671 + C28672;
    const double C39697 = C39689 + C39690;
    const double C43606 = C43602 + C43603;
    const double C44267 = C44263 + C44264;
    const double C27810 = C48253 * C6597;
    const double C38832 = C48253 * C6597;
    const double C47190 = C47085 * C47189;
    const double C47317 = C47088 * C47189;
    const double C47340 = C47287 * C47189;
    const double C1179 =
        2 * (C47088 * C47154 - (ae * C47222) / C47096) -
        (ae * (C47237 * std::pow(C47088, 2) + C47222)) / C47096 +
        C47088 * (C47154 - (ae * C47088 * C47237) / C47096 +
                  C47088 * (C47088 * C47189 - (ae * C47237) / C47096));
    const double C1322 = C47088 * (C47154 + C47189 * C47324) -
                         (ae * (C47237 * C47324 + C47222)) / C47096;
    const double C1325 =
        C47287 * C47154 - (ae * C47287 * C47316) / C47096 +
        C47088 * (C47088 * C47287 * C47189 - (ae * C47287 * C47237) / C47096);
    const double C1330 =
        C47154 + C47189 * C47324 -
        (ae * (C47088 * C47265 * C47324 + C47316)) / C47096 +
        C47088 *
            (C47088 *
                 (C47189 +
                  ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                   C47172 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46941) /
                                 C47060 -
                             (C47173 * ce) / C47096)) *
                      C47324) -
             (ae * (C47265 * C47324 + C47237)) / C47096);
    const double C2033 =
        2 * C47287 * C47154 + C47287 * (C47154 + C47189 * C47324);
    const double C47389 = C47088 * C47385;
    const double C6112 =
        2 * (C47088 * C47401 - (ae * (C47234 * C47324 + C47210)) / C47096) -
        (ae * (C47383 * C47324 + C47313)) / C47096 +
        C47088 *
            (C47401 - (ae * (C47088 * C47257 * C47324 + C47376)) / C47096 +
             C47088 * (C47088 * (C47185 + ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096) *
                                              C47324) -
                       (ae * (C47257 * C47324 + C47234)) / C47096));
    const double C6980 =
        (((-3 * (C47234 * C47324 + C47210)) / C46941 +
          C47287 * ((-2 * C47414) / C46941 -
                    (C47287 * (C47257 * C47324 + C47234)) / C46941)) *
         ae) /
            C47060 +
        C47088 *
            (3 * C47401 +
             C47287 * (2 * C47413 +
                       C47287 * (C47185 + ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096) *
                                              C47324)));
    const double C7466 =
        2 * C47338 + C47287 * C47401 +
        (((-2 * C47287 * C47376) / C46941 -
          (C47287 * (C47088 * C47257 * C47324 + C47376)) / C46941) *
         ae) /
            C47060 +
        C47088 *
            ((((-2 * C47414) / C46941 -
               (C47287 * (C47257 * C47324 + C47234)) / C46941) *
              ae) /
                 C47060 +
             C47088 * (2 * C47413 +
                       C47287 * (C47185 + ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096) *
                                              C47324)));
    const double C12652 =
        4 * (2 * C47338 + C47287 * C47401) +
        C47287 *
            (3 * C47401 +
             C47287 * (2 * C47413 +
                       C47287 * (C47185 + ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096) *
                                              C47324)));
    const double C47418 = C47415 - C47417;
    const double C7187 = C7182 + C7183;
    const double C11742 = C11730 + C11731;
    const double C18707 = C18702 + C18703;
    const double C47456 = C47088 * C47454;
    const double C22863 =
        3 * (C47398 - (ae * (C47428 * C47324 + C47353)) / C47096 +
             C47088 * C47469) +
        ((C47371 + C47450 * C47324) * ae) / C47060 +
        C47088 *
            (2 * C47469 - (ae * (C47439 * C47324 + C47361)) / C47096 +
             C47088 *
                 (C47467 - (ae * (C47088 * C47250 * C47324 + C47428)) / C47096 +
                  C47088 * (C47088 * ((-(std::pow(C47090, 8) * bs[8] * C47101 *
                                         C47324) /
                                       C46941) /
                                          C47060 -
                                      C47172 / C47096) -
                            (ae * (C47250 * C47324 + C47230)) / C47096)));
    const double C23841 =
        2 * ((((-2 * C47404) / C46941 - (C47287 * C47462) / C46941) * ae) /
                 C47060 +
             C47088 * C47494) +
        (((-2 * C47287 * C47361) / C46941 -
          (C47287 * (C47439 * C47324 + C47361)) / C46941) *
         ae) /
            C47060 +
        C47088 * (C47494 +
                  (((-2 * C47471) / C46941 -
                    (C47287 * (C47088 * C47250 * C47324 + C47428)) / C46941) *
                   ae) /
                      C47060 +
                  C47088 * ((((-2 * C47474) / C46941 -
                              (C47287 * (C47250 * C47324 + C47230)) / C46941) *
                             ae) /
                                C47060 +
                            C47088 * ((-2 * C47473) / C47096 +
                                      C47287 * ((-(std::pow(C47090, 8) * bs[8] *
                                                   C47101 * C47324) /
                                                 C46941) /
                                                    C47060 -
                                                C47172 / C47096))));
    const double C28191 =
        ((4 * ((-2 * C47404) / C46941 - (C47287 * C47462) / C46941) +
          C47287 *
              ((-3 * C47462) / C46941 +
               C47287 * ((-2 * C47474) / C46941 -
                         (C47287 * (C47250 * C47324 + C47230)) / C46941))) *
         ae) /
            C47060 +
        C47088 * (4 * C47494 +
                  C47287 * (3 * C47467 +
                            C47287 * ((-2 * C47473) / C47096 +
                                      C47287 * ((-(std::pow(C47090, 8) * bs[8] *
                                                   C47101 * C47324) /
                                                 C46941) /
                                                    C47060 -
                                                C47172 / C47096))));
    const double C44259 =
        5 * (3 * C47398 + C47287 * C47494) +
        C47287 * (4 * C47494 +
                  C47287 * (3 * C47467 +
                            C47287 * ((-2 * C47473) / C47096 +
                                      C47287 * ((-(std::pow(C47090, 8) * bs[8] *
                                                   C47101 * C47324) /
                                                 C46941) /
                                                    C47060 -
                                                C47172 / C47096))));
    const double C47488 = C47485 + C47487;
    const double C1155 =
        (C48274 + 2 * C47978) / C46947 - (C48281 * C47974) / C46941;
    const double C1156 =
        (C48262 + 2 * C47985 + C48281) / C46947 - (C48277 * C47974) / C46941;
    const double C1157 = (C48235 + C47982 / C46941 + C48277) / C46947 -
                         (C48267 * C47974) / C46941;
    const double C2010 =
        (C48275 + 2 * C48018) / C46947 - (C48282 * C48014) / C46941;
    const double C2011 =
        (C48264 + 2 * C48025 + C48282) / C46947 - (C48279 * C48014) / C46941;
    const double C2012 = (C48238 + C48022 / C46941 + C48279) / C46947 -
                         (C48270 * C48014) / C46941;
    const double C12104 = C1612 * C46986;
    const double C12100 = C11740 * C46986;
    const double C12098 = C968 * C46986;
    const double C12094 = C11329 * C46986;
    const double C12088 = C550 * C46986;
    const double C12084 = C10836 * C46986;
    const double C12886 = C2198 * C46986;
    const double C12882 = C11738 * C46986;
    const double C12880 = C556 * C46986;
    const double C12876 = C10839 * C46986;
    const double C13030 = C2316 * C46986;
    const double C13026 = C12668 * C46986;
    const double C43854 = C11745 * C46986;
    const double C44419 = C13171 * C46986;
    const double C44526 = C12673 * C46986;
    const double C46989 = C46986 / C46947;
    const double C46988 = C46939 * C46986;
    const double C42957 = C42950 - C10822;
    const double C44988 = C13654 - C44982;
    const double C44987 = C44981 - C13636;
    const double C45758 = C14698 - C45753;
    const double C43962 = C43960 * C1160;
    const double C43609 = C43607 * C1160;
    const double C47241 = C47240 - C47232;
    const double C22747 =
        (5 * (3 * C47670 + C47088 * C47736 + C47669 * ae) +
         C47088 * (4 * C47736 +
                   C47088 * (3 * C47731 +
                             C47088 * (2 * C47723 +
                                       C47088 * (C47140 +
                                                 C47088 * (C47088 * C47173 +
                                                           C47246 * ae) +
                                                 C47088 * C47246 * ae) +
                                       C47725 * ae) +
                             C47730 * ae) +
                   C47734 * ae) +
         (4 * C47669 + C47088 * C47734) * ae) /
        C47060;
    const double C22861 =
        (3 * C47670 + C47088 * C47736 + C47669 * ae +
         (3 * C47731 +
          C47088 *
              (2 * C47723 +
               C47088 * (C47140 + C47088 * (C47088 * C47173 + C47246 * ae) +
                         C47088 * C47246 * ae) +
               C47725 * ae) +
          C47730 * ae) *
             C47324) /
        C47060;
    const double C23207 =
        (C47287 *
         (4 * C47736 +
          C47088 *
              (3 * C47731 +
               C47088 * (2 * C47723 +
                         C47088 * (C47140 +
                                   C47088 * (C47088 * C47173 + C47246 * ae) +
                                   C47088 * C47246 * ae) +
                         C47725 * ae) +
               C47730 * ae) +
          C47734 * ae)) /
        C47060;
    const double C23839 =
        (2 * C47287 * C47736 +
         C47287 *
             (C47736 +
              (2 * C47723 +
               C47088 * (C47140 + C47088 * (C47088 * C47173 + C47246 * ae) +
                         C47088 * C47246 * ae) +
               C47725 * ae) *
                  C47324)) /
        C47060;
    const double C47270 = C47269 - C47261;
    const double C10819 = C553 * C288;
    const double C10815 = C553 * C48227;
    const double C11115 = C553 * C660;
    const double C11109 = C553 * C661;
    const double C12091 = C553 * C47881;
    const double C12403 = C553 * C48258;
    const double C12399 = C553 * C48227;
    const double C13635 = C553 * C47881;
    const double C14009 = C553 * C47884;
    const double C14005 = C553 * C2901;
    const double C14367 = C553 * C48273;
    const double C14361 = C553 * C48260;
    const double C10831 = C557 * C287;
    const double C10827 = C557 * C288;
    const double C11710 = C557 * C47871;
    const double C12413 = C557 * C48271;
    const double C12409 = C557 * C48258;
    const double C12879 = C557 * C48186;
    const double C12877 = C557 * C47881;
    const double C13641 = C557 * C2635;
    const double C13639 = C557 * C47881;
    const double C15051 = C557 * C47876;
    const double C15047 = C557 * C47884;
    const double C43160 = C557 * C660;
    const double C45504 = C557 * C48273;
    const double C11323 = C969 * C287;
    const double C11319 = C969 * C288;
    const double C11721 = C969 * C47871;
    const double C12097 = C969 * C48186;
    const double C12095 = C969 * C47881;
    const double C13649 = C969 * C2635;
    const double C13647 = C969 * C47881;
    const double C14019 = C969 * C47876;
    const double C14015 = C969 * C47884;
    const double C15451 = C969 * C48271;
    const double C15447 = C969 * C48258;
    const double C167 = C48121 * C145;
    const double C348 = C48121 * C329;
    const double C4807 = C48253 * C329;
    const double C5357 = C4779 * C329;
    const double C16359 = C48253 * C329;
    const double C16909 = C16331 * C329;
    const double C356 = C48121 * C333;
    const double C5009 = C4779 * C333;
    const double C4993 = C48253 * C333;
    const double C16561 = C16331 * C333;
    const double C16545 = C48253 * C333;
    const double C537 = C48121 * C518;
    const double C5499 = C4779 * C518;
    const double C17051 = C16331 * C518;
    const double C545 = C48121 * C522;
    const double C5203 = C4779 * C522;
    const double C16755 = C16331 * C522;
    const double C963 = C48121 * C952;
    const double C5187 = C48253 * C952;
    const double C5713 = C4779 * C952;
    const double C16739 = C48253 * C952;
    const double C17265 = C16331 * C952;
    const double C6251 = C48253 * C1183;
    const double C17787 = C48253 * C1183;
    const double C6461 = C6456 + C6457;
    const double C11889 = C11886 + C11887;
    const double C17997 = C17992 + C17993;
    const double C12670 = C12660 + C12661;
    const double C7329 = C7324 + C7325;
    const double C12895 = C12892 + C12893;
    const double C18849 = C18844 + C18845;
    const double C11723 = C2199 * C47871;
    const double C12887 = C2199 * C48186;
    const double C12885 = C2199 * C47881;
    const double C13657 = C2199 * C2635;
    const double C13655 = C2199 * C47881;
    const double C43314 = C2199 * C288;
    const double C45250 = C2199 * C47884;
    const double C46322 = C2199 * C48258;
    const double C11729 = C1613 * C47871;
    const double C12105 = C1613 * C48186;
    const double C12103 = C1613 * C47881;
    const double C14223 = C1613 * C2635;
    const double C14221 = C1613 * C47881;
    const double C12659 = C2317 * C47871;
    const double C13031 = C2317 * C48186;
    const double C13029 = C2317 * C47881;
    const double C14701 = C2317 * C2635;
    const double C14699 = C2317 * C47881;
    const double C42954 = C2317 * C288;
    const double C44078 = C2317 * C48258;
    const double C46020 = C2317 * C47884;
    const double C43963 = C43961 * C47871;
    const double C44637 = C44635 * C47871;
    const double C43608 = C43606 * C47871;
    const double C44269 = C44267 * C47871;
    const double C27814 = C27809 + C27810;
    const double C38836 = C38831 + C38832;
    const double C47191 = C47170 + C47190;
    const double C47322 = C47317 - C47320;
    const double C1724 =
        2 * (C47088 * C47340 - (ae * C47287 * C47237) / C47096) -
        (ae * C47287 * C47321) / C47096 +
        C47088 * (C47340 - (ae * C47287 * C47088 * C47265) / C47096 +
                  C47088 * (C47088 * C47287 *
                                ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                                 C47172 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096)) -
                            (ae * C47287 * C47265) / C47096));
    const double C2038 =
        3 * (C47154 + C47189 * C47324) +
        C47287 *
            (2 * C47340 +
             C47287 *
                 (C47189 +
                  ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                   C47172 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46941) /
                                 C47060 -
                             (C47173 * ce) / C47096)) *
                      C47324));
    const double C2428 =
        (((-2 * C47287 * C47237) / C46941 -
          (C47287 * (C47265 * C47324 + C47237)) / C46941) *
         ae) /
            C47060 +
        C47088 *
            (2 * C47340 +
             C47287 *
                 (C47189 +
                  ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                   C47172 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46941) /
                                 C47060 -
                             (C47173 * ce) / C47096)) *
                      C47324));
    const double C1449 = C48121 * C1179;
    const double C5011 = C48253 * C1179;
    const double C16563 = C48253 * C1179;
    const double C2197 = C48121 * C1322;
    const double C5205 = C48253 * C1322;
    const double C16757 = C48253 * C1322;
    const double C1611 = C48121 * C1325;
    const double C5715 = C48253 * C1325;
    const double C17267 = C48253 * C1325;
    const double C2315 = C48121 * C2033;
    const double C47391 = C47388 + C47389;
    const double C6598 =
        3 * (C47338 - (ae * C47287 * C47376) / C47096 + C47088 * C47418) +
        (C47287 * C47392 * ae) / C47060 +
        C47088 * (2 * C47418 - (ae * C47287 * C47383) / C47096 +
                  C47088 * (C47413 - (ae * C47287 * C47088 * C47257) / C47096 +
                            C47088 * (C47088 * C47287 *
                                          ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096) -
                                      (ae * C47287 * C47257) / C47096)));
    const double C11750 = C11742 * C47871;
    const double C43857 = C11742 * C47881;
    const double C45402 = C11742 * C47881;
    const double C47457 = C47440 + C47456;
    const double C23209 =
        4 * (2 * C47411 - (ae * C47287 * C47361) / C47096 + C47088 * C47488) +
        (C47287 * C47455 * ae) / C47060 +
        C47088 *
            (3 * C47488 + (C47287 * C47450 * ae) / C47060 +
             C47088 *
                 (2 * C47486 - (ae * C47287 * C47439) / C47096 +
                  C47088 *
                      ((-(ae * C47287 * C47088 * C47250) / C46941) / C47060 -
                       C47473 / C47096 +
                       C47088 * ((-(C47088 * C47287 * std::pow(C47090, 8) *
                                    bs[8] * C47101) /
                                  C46941) /
                                     C47060 -
                                 (ae * C47287 * C47250) / C47096))));
    const double C44418 = C12883 + C12882;
    const double C44417 = C12876 + C12875;
    const double C44525 = C13027 + C13026;
    const double C46992 = C46989 - C46984;
    const double C1090 = C46989 + (C46975 * ce) / C46941;
    const double C46991 = C46988 + C48186;
    const double C137 =
        4 * ((-2 * C47217) / C46941 - (C47085 * C47222) / C46941 -
             (C47512 * ce) / C46941) +
        C47085 * ((-3 * C47222) / C46941 + C47085 * C47241 -
                  (C47517 * ce) / C46941) -
        ((3 * C47512 + C47085 * C47517) * ce) / C46941;
    const double C315 = C47088 * ((-3 * C47222) / C46941 + C47085 * C47241 -
                                  (C47517 * ce) / C46941);
    const double C323 = (-2 * C47217) / C46941 - (C47085 * C47222) / C46941 -
                        (C47512 * ce) / C46941 + C47241 * C47299;
    const double C504 = C47287 * ((-3 * C47222) / C46941 + C47085 * C47241 -
                                  (C47517 * ce) / C46941);
    const double C512 = (-2 * C47217) / C46941 - (C47085 * C47222) / C46941 -
                        (C47512 * ce) / C46941 + C47241 * C47324;
    const double C947 = C47287 * C47088 * C47241;
    const double C47271 = C47085 * C47270;
    const double C1439 =
        2 * C47088 * C47241 + C47088 * (C47241 + C47270 * C47299);
    const double C1601 = C47287 * (C47241 + C47270 * C47299);
    const double C2187 = C47088 * C47241 + C47088 * C47270 * C47324;
    const double C2305 =
        2 * C47287 * C47241 + C47287 * (C47241 + C47270 * C47324);
    const double C42958 = C42957 - C10827;
    const double C44989 = C44987 - C13639;
    const double C366 = C347 + C348;
    const double C4828 = C4806 + C4807;
    const double C5362 = C5356 + C5357;
    const double C16380 = C16358 + C16359;
    const double C16914 = C16908 + C16909;
    const double C370 = C355 + C356;
    const double C5026 = C5008 + C5009;
    const double C5018 = C4992 + C4993;
    const double C16578 = C16560 + C16561;
    const double C16570 = C16544 + C16545;
    const double C555 = C536 + C537;
    const double C5504 = C5498 + C5499;
    const double C17056 = C17050 + C17051;
    const double C559 = C544 + C545;
    const double C5220 = C5202 + C5203;
    const double C16772 = C16754 + C16755;
    const double C971 = C962 + C963;
    const double C5212 = C5186 + C5187;
    const double C5722 = C5712 + C5713;
    const double C16764 = C16738 + C16739;
    const double C17274 = C17264 + C17265;
    const double C6255 = C6250 + C6251;
    const double C17791 = C17786 + C17787;
    const double C12243 = C11889 * C47871;
    const double C12676 = C12670 * C47871;
    const double C44529 = C12670 * C47881;
    const double C45757 = C12670 * C47881;
    const double C13164 = C12895 * C47871;
    const double C44422 = C12895 * C47881;
    const double C44986 = C12895 * C47881;
    const double C44990 = C44988 + C13655;
    const double C45759 = C45758 + C14699;
    const double C146 =
        5 * (3 * C47154 - (C47151 * ce) / C47096 + C47085 * C47191) -
        ((4 * C47151 + C47085 * C47188) * ce) / C47096 +
        C47085 *
            (4 * C47191 - (C47188 * ce) / C47096 +
             C47085 *
                 (3 * C47189 - (C47184 * ce) / C47096 +
                  C47085 *
                      (2 * C47185 - (C47179 * ce) / C47096 +
                       C47085 * ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                                 C47172 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096)))));
    const double C330 =
        (((-3 * (C47085 * C47210 + C47200 + C47204 * ce)) / C46941 +
          C47085 * ((-2 * C47210) / C46941 -
                    (C47085 * (C47085 * (C47085 * C47130 * C47131 * C47195 +
                                         C47205 * ce) +
                               C47206 + C47085 * C47205 * ce)) /
                        C46941 -
                    (C47209 * ce) / C46941) -
          ((2 * C47204 + C47085 * C47209) * ce) / C46941) *
         ae) /
            C47060 +
        C47088 * (3 * C47154 - (C47151 * ce) / C47096 + C47085 * C47191);
    const double C334 = 2 * C47126 - (C47123 * ce) / C47096 + C47085 * C47154 +
                        (C47088 * C47241 * ae) / C47060 +
                        C47088 * ((C47241 * ae) / C47060 + C47088 * C47191);
    const double C519 =
        (zP - zQ) * (3 * C47154 - (C47151 * ce) / C47096 + C47085 * C47191);
    const double C523 = 2 * C47126 - (C47123 * ce) / C47096 + C47085 * C47154 +
                        C47191 * std::pow(zP - zQ, 2);
    const double C524 =
        3 * C47154 - (C47151 * ce) / C47096 + C47085 * C47191 +
        (3 * C47189 - (C47184 * ce) / C47096 +
         C47085 *
             (2 * C47185 - (C47179 * ce) / C47096 +
              C47085 *
                  ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                   C47172 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46941) /
                                 C47060 -
                             (C47173 * ce) / C47096)))) *
            std::pow(zP - zQ, 2);
    const double C782 =
        (zP - zQ) *
        (4 * C47191 - (C47188 * ce) / C47096 +
         C47085 *
             (3 * C47189 - (C47184 * ce) / C47096 +
              C47085 * (2 * C47185 - (C47179 * ce) / C47096 +
                        C47085 * ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                                  C47172 / C47096 +
                                  C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                               bs[8] * C47101) /
                                             C46941) /
                                                C47060 -
                                            (C47173 * ce) / C47096)))));
    const double C953 =
        (C47287 * C47241 * ae) / C47060 + C47088 * C47287 * C47191;
    const double C1440 =
        2 * ((C47241 * ae) / C47060 + C47088 * C47191) +
        ((C47241 + C47270 * C47299) * ae) / C47060 +
        C47088 *
            (C47191 + (C47088 * C47270 * ae) / C47060 +
             C47088 *
                 ((C47270 * ae) / C47060 +
                  C47088 *
                      (2 * C47185 - (C47179 * ce) / C47096 +
                       C47085 * ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                                 C47172 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096)))));
    const double C1602 =
        C47287 * C47191 + (C47287 * C47088 * C47270 * ae) / C47060 +
        C47088 * ((C47287 * C47270 * ae) / C47060 +
                  C47088 * C47287 *
                      (2 * C47185 - (C47179 * ce) / C47096 +
                       C47085 * ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                                 C47172 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096))));
    const double C2188 =
        ((C47241 + C47270 * C47324) * ae) / C47060 +
        C47088 *
            (C47191 +
             (2 * C47185 - (C47179 * ce) / C47096 +
              C47085 *
                  ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                   C47172 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46941) /
                                 C47060 -
                             (C47173 * ce) / C47096))) *
                 C47324);
    const double C2306 =
        2 * C47287 * C47191 +
        C47287 *
            (C47191 +
             (2 * C47185 - (C47179 * ce) / C47096 +
              C47085 *
                  ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                   C47172 / C47096 +
                   C47085 * ((-(C47085 * std::pow(C47090, 8) * bs[8] * C47101) /
                              C46941) /
                                 C47060 -
                             (C47173 * ce) / C47096))) *
                 C47324);
    const double C1184 =
        3 * (C47154 - (ae * C47316) / C47096 + C47088 * C47322) +
        (((-2 * C47316) / C46941 - (C47088 * C47321) / C46941) * ae) / C47060 +
        C47088 *
            (2 * C47322 - (ae * C47321) / C47096 +
             C47088 *
                 (C47189 - (ae * C47088 * C47265) / C47096 +
                  C47088 *
                      (C47088 * ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                                 C47172 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096)) -
                       (ae * C47265) / C47096)));
    const double C1453 = C1448 + C1449;
    const double C5027 = C5010 + C5011;
    const double C16579 = C16562 + C16563;
    const double C2201 = C2196 + C2197;
    const double C5221 = C5204 + C5205;
    const double C16773 = C16756 + C16757;
    const double C1615 = C1610 + C1611;
    const double C5723 = C5714 + C5715;
    const double C17275 = C17266 + C17267;
    const double C2319 = C2314 + C2315;
    const double C5958 =
        4 * (2 * C47314 - (ae * C47313) / C47096 + C47088 * C47391) +
        (((-3 * C47313) / C46941 + C47088 * C47392) * ae) / C47060 +
        C47088 *
            (3 * C47391 + (C47392 * ae) / C47060 +
             C47088 *
                 (2 * C47385 - (ae * C47383) / C47096 +
                  C47088 *
                      (C47185 - (ae * C47088 * C47257) / C47096 +
                       C47088 * (C47088 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096) -
                                 (ae * C47257) / C47096))));
    const double C22749 =
        5 * (3 * C47374 + (C47371 * ae) / C47060 + C47088 * C47457) +
        ((4 * C47371 + C47088 * C47455) * ae) / C47060 +
        C47088 *
            (4 * C47457 + (C47455 * ae) / C47060 +
             C47088 *
                 (3 * C47454 + (C47450 * ae) / C47060 +
                  C47088 *
                      (2 * C47449 - (ae * C47439) / C47096 +
                       C47088 * ((-(ae * C47088 * C47250) / C46941) / C47060 -
                                 C47172 / C47096 +
                                 C47088 * ((-(C47088 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (ae * C47250) / C47096)))));
    const double C44424 = C12884 - C44418;
    const double C44423 = C44417 - C12874;
    const double C44530 = C13028 - C44525;
    const double C14018 = C970 * C46992;
    const double C14012 = C968 * C46992;
    const double C14008 = C552 * C46992;
    const double C14002 = C550 * C46992;
    const double C15050 = C558 * C46992;
    const double C15044 = C556 * C46992;
    const double C45247 = C2198 * C46992;
    const double C46017 = C2316 * C46992;
    const double C117 =
        (C46992 / C46947 + ((C46939 * C47002 + C2901) * ce) / C46941) / C46947 -
        ((C46939 * (C47002 / C46947 + (0 * ce) / C46941) + C48239) * de) /
            C46941;
    const double C667 =
        C46992 / C46947 - ((C46939 * C47002 + C2901) * de) / C46941;
    const double C2535 =
        C46992 / C46947 + ((C46939 * C47002 + C2901) * ce) / C46941;
    const double C12412 = C558 * C1090;
    const double C12406 = C556 * C1090;
    const double C12402 = C552 * C1090;
    const double C12396 = C550 * C1090;
    const double C15450 = C970 * C1090;
    const double C15444 = C968 * C1090;
    const double C44075 = C2316 * C1090;
    const double C46319 = C2198 * C1090;
    const double C46993 = C46991 * de;
    const double C1089 = C46978 + (C46991 * ce) / C46941 + C46967;
    const double C166 = C113 * C137;
    const double C676 = C113 * C315;
    const double C4816 = C4784 * C315;
    const double C16368 = C16336 * C315;
    const double C359 = C113 * C323;
    const double C5358 = C4784 * C323;
    const double C16910 = C16336 * C323;
    const double C786 = C113 * C504;
    const double C548 = C113 * C512;
    const double C966 = C113 * C947;
    const double C5500 = C4784 * C947;
    const double C17052 = C16336 * C947;
    const double C47272 = C47248 + C47271;
    const double C42959 = C42958 + C10828;
    const double C10821 = C555 * C48227;
    const double C11117 = C555 * C661;
    const double C11111 = C555 * C48239;
    const double C12405 = C555 * C48227;
    const double C14011 = C555 * C2901;
    const double C14369 = C555 * C48260;
    const double C14363 = C555 * C48239;
    const double C10833 = C559 * C288;
    const double C10829 = C559 * C48227;
    const double C12415 = C559 * C48258;
    const double C12411 = C559 * C48227;
    const double C12881 = C559 * C47881;
    const double C13643 = C559 * C47881;
    const double C15053 = C559 * C47884;
    const double C15049 = C559 * C2901;
    const double C43162 = C559 * C661;
    const double C45506 = C559 * C48260;
    const double C11325 = C971 * C288;
    const double C11321 = C971 * C48227;
    const double C12099 = C971 * C47881;
    const double C13651 = C971 * C47881;
    const double C14021 = C971 * C47884;
    const double C14017 = C971 * C2901;
    const double C15453 = C971 * C48258;
    const double C15449 = C971 * C48227;
    const double C677 = C48121 * C330;
    const double C4817 = C48253 * C330;
    const double C16369 = C48253 * C330;
    const double C360 = C48121 * C334;
    const double C5359 = C48253 * C334;
    const double C16911 = C48253 * C334;
    const double C787 = C48121 * C519;
    const double C549 = C48121 * C523;
    const double C967 = C48121 * C953;
    const double C5501 = C48253 * C953;
    const double C17053 = C48253 * C953;
    const double C12889 = C2201 * C47881;
    const double C13659 = C2201 * C47881;
    const double C43316 = C2201 * C48227;
    const double C45252 = C2201 * C2901;
    const double C46324 = C2201 * C48227;
    const double C12107 = C1615 * C47881;
    const double C14225 = C1615 * C47881;
    const double C13033 = C2319 * C47881;
    const double C14703 = C2319 * C47881;
    const double C42956 = C2319 * C48227;
    const double C44080 = C2319 * C48227;
    const double C46022 = C2319 * C2901;
    const double C44426 = C44424 + C12885;
    const double C44425 = C44423 - C12877;
    const double C44531 = C44530 + C13029;
    const double C11116 = C554 * C667;
    const double C11108 = C552 * C667;
    const double C43161 = C558 * C667;
    const double C14368 = C554 * C2535;
    const double C14360 = C552 * C2535;
    const double C45505 = C558 * C2535;
    const double C46994 = C46993 / C46941;
    const double C12414 = C556 * C1089;
    const double C12408 = C10839 * C1089;
    const double C12400 = C550 * C1089;
    const double C12394 = C10836 * C1089;
    const double C15452 = C968 * C1089;
    const double C15446 = C11329 * C1089;
    const double C44077 = C12668 * C1089;
    const double C46321 = C11738 * C1089;
    const double C177 = C166 + C167;
    const double C47273 = C47272 - C47266;
    const double C42960 = C42959 + C10829;
    const double C679 = C676 + C677;
    const double C4833 = C4816 + C4817;
    const double C16385 = C16368 + C16369;
    const double C372 = C359 + C360;
    const double C5363 = C5358 + C5359;
    const double C16915 = C16910 + C16911;
    const double C789 = C786 + C787;
    const double C561 = C548 + C549;
    const double C973 = C966 + C967;
    const double C5505 = C5500 + C5501;
    const double C17057 = C17052 + C17053;
    const double C46995 = C46978 - C46994;
    const double C44074 = C12408 + C12407;
    const double C335 =
        3 * C47154 - (C47151 * ce) / C47096 + C47085 * C47191 +
        (C47088 * C47273 * ae) / C47060 +
        C47088 *
            ((C47273 * ae) / C47060 +
             C47088 *
                 (3 * C47189 - (C47184 * ce) / C47096 +
                  C47085 *
                      (2 * C47185 - (C47179 * ce) / C47096 +
                       C47085 * ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                                 C47172 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096)))));
    const double C672 =
        ((4 * C47241 + C47085 * C47273 -
          ((3 * C47209 + C47085 * C47262) * ce) / C46941) *
         ae) /
            C47060 +
        C47088 *
            (4 * C47191 - (C47188 * ce) / C47096 +
             C47085 *
                 (3 * C47189 - (C47184 * ce) / C47096 +
                  C47085 *
                      (2 * C47185 - (C47179 * ce) / C47096 +
                       C47085 * ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                                 C47172 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096)))));
    const double C954 =
        (C47287 * C47273 * ae) / C47060 +
        C47088 * C47287 *
            (3 * C47189 - (C47184 * ce) / C47096 +
             C47085 * (2 * C47185 - (C47179 * ce) / C47096 +
                       C47085 * ((-(C47085 * C47173 * ce) / C46941) / C47060 -
                                 C47172 / C47096 +
                                 C47085 * ((-(C47085 * std::pow(C47090, 8) *
                                              bs[8] * C47101) /
                                            C46941) /
                                               C47060 -
                                           (C47173 * ce) / C47096))));
    const double C139 =
        5 * ((-3 * C47222) / C46941 + C47085 * C47241 -
             (C47517 * ce) / C46941) +
        C47085 * (4 * C47241 + C47085 * C47273 - (C47522 * ce) / C46941) -
        ((4 * C47517 + C47085 * C47522) * ce) / C46941;
    const double C325 = (-3 * C47222) / C46941 + C47085 * C47241 -
                        (C47517 * ce) / C46941 + C47273 * C47299;
    const double C514 = (-3 * C47222) / C46941 + C47085 * C47241 -
                        (C47517 * ce) / C46941 + C47273 * C47324;
    const double C671 =
        C47088 * (4 * C47241 + C47085 * C47273 - (C47522 * ce) / C46941);
    const double C781 =
        C47287 * (4 * C47241 + C47085 * C47273 - (C47522 * ce) / C46941);
    const double C949 = C47287 * C47088 * C47273;
    const double C11119 = C789 * C48239;
    const double C14371 = C789 * C48239;
    const double C10835 = C561 * C48227;
    const double C12417 = C561 * C48227;
    const double C15055 = C561 * C2901;
    const double C43164 = C561 * C48239;
    const double C45508 = C561 * C48239;
    const double C11327 = C973 * C48227;
    const double C14023 = C973 * C2901;
    const double C15455 = C973 * C48227;
    const double C46996 = C46995 + C46967;
    const double C44081 = C44074 - C12406;
    const double C14020 = C968 * C46996;
    const double C14014 = C11329 * C46996;
    const double C14006 = C550 * C46996;
    const double C14000 = C10836 * C46996;
    const double C15052 = C556 * C46996;
    const double C15046 = C10839 * C46996;
    const double C45249 = C11738 * C46996;
    const double C46019 = C12668 * C46996;
    const double C114 =
        (((((0 - (C46939 * C46940) / C46941) * ce) / C46941 -
           (0 * de) / C46953 + (2 * C46942) / C46941) /
              C46947 -
          ((C46939 * C46976 + 0) * de) / C46941 + C46959 - C46969) /
             C46947 +
         ((C46939 * C46990 + 0) * ce) / C46941) /
            C46947 -
        ((C46939 * (C46990 / C46947 +
                    ((C46939 * C46996 + C47876) * ce) / C46941 + C46992) +
          C48280) *
         de) /
            C46941 +
        C46996 / C46947 + ((C46939 * C46992 + C47884) * ce) / C46941 +
        2 * (C46967 / C46947 - (0 * de) / C46941);
    const double C115 =
        (C46990 / C46947 + ((C46939 * C46996 + C47876) * ce) / C46941 +
         C46992) /
            C46947 -
        ((C46939 * (C46996 / C46947 +
                    ((C46939 * C46992 + C47884) * ce) / C46941 + 2 * C47002) +
          C48273) *
         de) /
            C46941 +
        2 * (C46992 / C46947 + ((C46939 * C47002 + C2901) * ce) / C46941);
    const double C116 =
        (C46996 / C46947 + ((C46939 * C46992 + C47884) * ce) / C46941 +
         2 * C47002) /
            C46947 -
        ((C46939 *
              (C46992 / C46947 + ((C46939 * C47002 + C2901) * ce) / C46941) +
          C48260) *
         de) /
            C46941 +
        3 * (C47002 / C46947 + (0 * ce) / C46941);
    const double C665 =
        C46990 / C46947 - ((C46939 * C46996 + C47876) * de) / C46941 + C46992;
    const double C666 = C46996 / C46947 -
                        ((C46939 * C46992 + C47884) * de) / C46941 + 2 * C47002;
    const double C2533 =
        C46990 / C46947 + ((C46939 * C46996 + C47876) * ce) / C46941 + C46992;
    const double C2534 = C46996 / C46947 +
                         ((C46939 * C46992 + C47884) * ce) / C46941 +
                         2 * C47002;
    const double C44082 = C44081 - C12409;
    const double C46016 = C15046 + C15045;
    const double C11112 = C550 * C665;
    const double C11104 = C10836 * C665;
    const double C43157 = C10839 * C665;
    const double C11114 = C552 * C666;
    const double C11106 = C550 * C666;
    const double C43159 = C556 * C666;
    const double C14364 = C550 * C2533;
    const double C14356 = C10836 * C2533;
    const double C45501 = C10839 * C2533;
    const double C14366 = C552 * C2534;
    const double C14358 = C550 * C2534;
    const double C45503 = C556 * C2534;
    const double C44083 = C44082 + C12410;
    const double C46023 = C46016 - C15044;
    const double C44084 = C44083 + C12411;
    const double C46024 = C46023 - C15047;
    const double C46025 = C46024 + C15048;
    const double C46026 = C46025 + C15049;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C119 + C48121 * C126) * C46996 +
                   (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
                   C169 * C47884 + C170 * C47002 + C171 * C2901) *
                      C48138 * C108 +
                  (C168 * C46996 + C169 * C47876 - C170 * C46992 -
                   C171 * C47884 + C172 * C47002 + C173 * C2901) *
                      C48138 * C109 +
                  (C170 * C46996 + C171 * C47876 - C172 * C46992 -
                   C173 * C47884 + C174 * C47002 + C175 * C2901) *
                      C48138 * C110) *
                     C47935 * C47978 +
                 ((C361 * C46992 -
                   ((C113 * C307 + C48121 * C326) * C47876 +
                    (C113 * C297 + C48121 * C308) * C46996) +
                   C362 * C47884 - C363 * C47002 - C364 * C2901) *
                      C48138 * C108 +
                  (C363 * C46992 - (C362 * C47876 + C361 * C46996) +
                   C364 * C47884 - C365 * C47002 - C366 * C2901) *
                      C48138 * C109 +
                  (C365 * C46992 - (C364 * C47876 + C363 * C46996) +
                   C366 * C47884 - C678 * C47002 - C679 * C2901) *
                      C48138 * C110) *
                     C47935 * C47985 +
                 (((C113 * C301 + C48121 * C316) * C46996 +
                   (C113 * C317 + C48121 * C331) * C47876 - C367 * C46992 -
                   C368 * C47884 + C369 * C47002 + C370 * C2901) *
                      C48138 * C108 +
                  (C367 * C46996 + C368 * C47876 - C369 * C46992 -
                   C370 * C47884 + C371 * C47002 + C372 * C2901) *
                      C48138 * C109 +
                  (C369 * C46996 + C370 * C47876 - C371 * C46992 -
                   C372 * C47884 + (C113 * C305 + C48121 * C324) * C47002 +
                   (C113 * C325 + C48121 * C335) * C2901) *
                      C48138 * C110) *
                     C47935 * C2904)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C48138 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C48138 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47881) *
                C48138 * C110) *
               C48204 +
           ((C550 * C2642 -
             ((C113 * C496 + C48121 * C515) * C2635 +
              (C113 * C486 + C48121 * C497) * C2641) +
             C551 * C47881) *
                C48138 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47881) *
                C48138 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47881) *
                C48138 * C110) *
               C48022) *
              C47978 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C48138 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                C48138 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47881) *
                C48138 * C110) *
               C48204 +
           (((C113 * C935 + C48121 * C940) * C2641 +
             (C113 * C941 + C48121 * C950) * C2635 - C968 * C2642 -
             C969 * C47881) *
                C48138 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C47881) *
                C48138 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C47881) *
                C48138 * C110) *
               C48022) *
              C47985 +
          ((((C113 * C301 + C48121 * C316) * C2641 +
             (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
             C368 * C47881) *
                C48138 * C108 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                C48138 * C109 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C47881) *
                C48138 * C110) *
               C48204 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C48121 * C1327) * C2635 +
              (C113 * C1300 + C48121 * C1315) * C2641) +
             C1613 * C47881) *
                C48138 * C108 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C47881) *
                C48138 * C109 +
            ((C113 * C1599 + C48121 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C48121 * C1602) * C47881) *
                C48138 * C110) *
               C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2641 +
            (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
            C169 * C47881) *
               C48138 * C108 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
               C48138 * C109 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47881) *
               C48138 * C110) *
              C47935 * C48281 +
          ((C361 * C2642 -
            ((C113 * C307 + C48121 * C326) * C2635 +
             (C113 * C297 + C48121 * C308) * C2641) +
            C362 * C47881) *
               C48138 * C108 +
           (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
               C48138 * C109 +
           (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47881) *
               C48138 * C110) *
              C47935 * C48277 +
          (((C113 * C301 + C48121 * C316) * C2641 +
            (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
            C368 * C47881) *
               C48138 * C108 +
           (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
               C48138 * C109 +
           (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C47881) *
               C48138 * C110) *
              C47935 * C48267 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C48121 * C1181) * C2635 +
             (C113 * C1163 + C48121 * C1172) * C2641) +
            C1451 * C47881) *
               C48138 * C108 +
           (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C47881) *
               C48138 * C109 +
           ((C113 * C1437 + C48121 * C1438) * C2642 -
            (C1453 * C2635 + C1452 * C2641) +
            (C113 * C1439 + C48121 * C1440) * C47881) *
               C48138 * C110) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2533 +
            (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
            C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
            C173 * C48239) *
               C48138 * C108 +
           (C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
            C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
               C48138 * C109 +
           (C170 * C2533 + C171 * C48280 - C172 * C2534 - C173 * C48273 +
            C174 * C2535 + C175 * C48260 - C176 * C2536 - C177 * C48239) *
               C48138 * C110) *
              C47935 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C48121 * C326) * C48280 +
             (C113 * C297 + C48121 * C308) * C2533) +
            C362 * C48273 - C363 * C2535 - C364 * C48260 + C365 * C2536 +
            C366 * C48239) *
               C48138 * C108 +
           (C363 * C2534 - (C362 * C48280 + C361 * C2533) + C364 * C48273 -
            C365 * C2535 - C366 * C48260 + C678 * C2536 + C679 * C48239) *
               C48138 * C109 +
           (C365 * C2534 - (C364 * C48280 + C363 * C2533) + C366 * C48273 -
            C678 * C2535 - C679 * C48260 +
            (C113 * C669 + C48121 * C670) * C2536 +
            (C113 * C671 + C48121 * C672) * C48239) *
               C48138 * C110) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C48138 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C48138 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47881) *
                C48138 * C110) *
               C48275 +
           ((C550 * C2642 -
             ((C113 * C496 + C48121 * C515) * C2635 +
              (C113 * C486 + C48121 * C497) * C2641) +
             C551 * C47881) *
                C48138 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47881) *
                C48138 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47881) *
                C48138 * C110) *
               C48264 +
           (((C113 * C490 + C48121 * C505) * C2641 +
             (C113 * C506 + C48121 * C520) * C2635 - C556 * C2642 -
             C557 * C47881) *
                C48138 * C108 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47881) *
                C48138 * C109 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C47881) *
                C48138 * C110) *
               C48238) *
              C2531 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C48138 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                C48138 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47881) *
                C48138 * C110) *
               C48275 +
           (((C113 * C935 + C48121 * C940) * C2641 +
             (C113 * C941 + C48121 * C950) * C2635 - C968 * C2642 -
             C969 * C47881) *
                C48138 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C47881) *
                C48138 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C47881) *
                C48138 * C110) *
               C48264 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C48121 * C1324) * C2635 +
              (C113 * C1297 + C48121 * C1309) * C2641) +
             C2199 * C47881) *
                C48138 * C108 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C47881) *
                C48138 * C109 +
            ((C113 * C2185 + C48121 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C48121 * C2188) * C47881) *
                C48138 * C110) *
               C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48121 * C126) * C46996 +
                    (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
                    C169 * C47884 + C170 * C47002 + C171 * C2901) *
                       C48138 * C108 +
                   (C168 * C46996 + C169 * C47876 - C170 * C46992 -
                    C171 * C47884 + C172 * C47002 + C173 * C2901) *
                       C48138 * C109 +
                   (C170 * C46996 + C171 * C47876 - C172 * C46992 -
                    C173 * C47884 + C174 * C47002 + C175 * C2901) *
                       C48138 * C110) *
                      C48204 +
                  ((C550 * C46992 -
                    ((C113 * C496 + C48121 * C515) * C47876 +
                     (C113 * C486 + C48121 * C497) * C46996) +
                    C551 * C47884 - C552 * C47002 - C553 * C2901) *
                       C48138 * C108 +
                   (C552 * C46992 - (C551 * C47876 + C550 * C46996) +
                    C553 * C47884 - C554 * C47002 - C555 * C2901) *
                       C48138 * C109 +
                   (C554 * C46992 - (C553 * C47876 + C552 * C46996) +
                    C555 * C47884 - C788 * C47002 - C789 * C2901) *
                       C48138 * C110) *
                      C48022) *
                     C2531 +
                 (((C361 * C46992 -
                    ((C113 * C307 + C48121 * C326) * C47876 +
                     (C113 * C297 + C48121 * C308) * C46996) +
                    C362 * C47884 - C363 * C47002 - C364 * C2901) *
                       C48138 * C108 +
                   (C363 * C46992 - (C362 * C47876 + C361 * C46996) +
                    C364 * C47884 - C365 * C47002 - C366 * C2901) *
                       C48138 * C109 +
                   (C365 * C46992 - (C364 * C47876 + C363 * C46996) +
                    C366 * C47884 - C678 * C47002 - C679 * C2901) *
                       C48138 * C110) *
                      C48204 +
                  (((C113 * C935 + C48121 * C940) * C46996 +
                    (C113 * C941 + C48121 * C950) * C47876 - C968 * C46992 -
                    C969 * C47884 + C970 * C47002 + C971 * C2901) *
                       C48138 * C108 +
                   (C968 * C46996 + C969 * C47876 - C970 * C46992 -
                    C971 * C47884 + C972 * C47002 + C973 * C2901) *
                       C48138 * C109 +
                   (C970 * C46996 + C971 * C47876 - C972 * C46992 -
                    C973 * C47884 + (C113 * C939 + C48121 * C948) * C47002 +
                    (C113 * C949 + C48121 * C954) * C2901) *
                       C48138 * C110) *
                      C48022) *
                     C47982)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2533 +
            (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
            C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
            C173 * C48239) *
               C48138 * C108 +
           (C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
            C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
               C48138 * C109 +
           (C170 * C2533 + C171 * C48280 - C172 * C2534 - C173 * C48273 +
            C174 * C2535 + C175 * C48260 - C176 * C2536 - C177 * C48239) *
               C48138 * C110) *
              C47935 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C48121 * C326) * C48280 +
             (C113 * C297 + C48121 * C308) * C2533) +
            C362 * C48273 - C363 * C2535 - C364 * C48260 + C365 * C2536 +
            C366 * C48239) *
               C48138 * C108 +
           (C363 * C2534 - (C362 * C48280 + C361 * C2533) + C364 * C48273 -
            C365 * C2535 - C366 * C48260 + C678 * C2536 + C679 * C48239) *
               C48138 * C109 +
           (C365 * C2534 - (C364 * C48280 + C363 * C2533) + C366 * C48273 -
            C678 * C2535 - C679 * C48260 +
            (C113 * C669 + C48121 * C670) * C2536 +
            (C113 * C671 + C48121 * C672) * C48239) *
               C48138 * C110) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2641 +
            (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
            C169 * C47881) *
               C48138 * C108 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
               C48138 * C109 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47881) *
               C48138 * C110) *
              C47935 * C48281 +
          ((C361 * C2642 -
            ((C113 * C307 + C48121 * C326) * C2635 +
             (C113 * C297 + C48121 * C308) * C2641) +
            C362 * C47881) *
               C48138 * C108 +
           (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
               C48138 * C109 +
           (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47881) *
               C48138 * C110) *
              C47935 * C48277 +
          (((C113 * C301 + C48121 * C316) * C2641 +
            (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
            C368 * C47881) *
               C48138 * C108 +
           (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
               C48138 * C109 +
           (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C47881) *
               C48138 * C110) *
              C47935 * C48267 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C48121 * C1181) * C2635 +
             (C113 * C1163 + C48121 * C1172) * C2641) +
            C1451 * C47881) *
               C48138 * C108 +
           (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C47881) *
               C48138 * C109 +
           ((C113 * C1437 + C48121 * C1438) * C2642 -
            (C1453 * C2635 + C1452 * C2641) +
            (C113 * C1439 + C48121 * C1440) * C47881) *
               C48138 * C110) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C48138 * C108 +
            (C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C48138 * C109 +
            (C170 * C46986 + C171 * C48186 - C172 * C46967 - C173 * C47881) *
                C48138 * C110) *
               C3298 +
           ((C550 * C46967 -
             ((C113 * C496 + C48121 * C515) * C48186 +
              (C113 * C486 + C48121 * C497) * C46986) +
             C551 * C47881) *
                C48138 * C108 +
            (C552 * C46967 - (C551 * C48186 + C550 * C46986) + C553 * C47881) *
                C48138 * C109 +
            (C554 * C46967 - (C553 * C48186 + C552 * C46986) + C555 * C47881) *
                C48138 * C110) *
               C48022) *
              C47978 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C48138 * C108 +
            (C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                C48138 * C109 +
            (C365 * C46967 - (C364 * C48186 + C363 * C46986) + C366 * C47881) *
                C48138 * C110) *
               C3298 +
           (((C113 * C935 + C48121 * C940) * C46986 +
             (C113 * C941 + C48121 * C950) * C48186 - C968 * C46967 -
             C969 * C47881) *
                C48138 * C108 +
            (C968 * C46986 + C969 * C48186 - C970 * C46967 - C971 * C47881) *
                C48138 * C109 +
            (C970 * C46986 + C971 * C48186 - C972 * C46967 - C973 * C47881) *
                C48138 * C110) *
               C48022) *
              C47985 +
          ((((C113 * C301 + C48121 * C316) * C46986 +
             (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
             C368 * C47881) *
                C48138 * C108 +
            (C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                C48138 * C109 +
            (C369 * C46986 + C370 * C48186 - C371 * C46967 - C372 * C47881) *
                C48138 * C110) *
               C3298 +
           ((C1612 * C46967 -
             ((C113 * C1314 + C48121 * C1327) * C48186 +
              (C113 * C1300 + C48121 * C1315) * C46986) +
             C1613 * C47881) *
                C48138 * C108 +
            (C1614 * C46967 - (C1613 * C48186 + C1612 * C46986) +
             C1615 * C47881) *
                C48138 * C109 +
            ((C113 * C1599 + C48121 * C1600) * C46967 -
             (C1615 * C48186 + C1614 * C46986) +
             (C113 * C1601 + C48121 * C1602) * C47881) *
                C48138 * C110) *
               C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48121 * C126) * C1160 +
                    (C113 * C127 + C48121 * C140) * C47871) *
                       C48138 * C108 +
                   (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                   (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                      C48018 -
                  ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                   (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                   ((C113 * C496 + C48121 * C515) * C47871 +
                    (C113 * C486 + C48121 * C497) * C1160) *
                       C48138 * C108) *
                      C48025 +
                  (((C113 * C490 + C48121 * C505) * C1160 +
                    (C113 * C506 + C48121 * C520) * C47871) *
                       C48138 * C108 +
                   (C556 * C1160 + C557 * C47871) * C48138 * C109 +
                   (C558 * C1160 + C559 * C47871) * C48138 * C110) *
                      C3806) *
                     C47978 +
                 ((((C113 * C935 + C48121 * C940) * C1160 +
                    (C113 * C941 + C48121 * C950) * C47871) *
                       C48138 * C108 +
                   (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                   (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                      C48025 -
                  ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                   (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                   ((C113 * C307 + C48121 * C326) * C47871 +
                    (C113 * C297 + C48121 * C308) * C1160) *
                       C48138 * C108) *
                      C48018 -
                  ((C2201 * C47871 + C2200 * C1160) * C48138 * C110 +
                   (C2199 * C47871 + C2198 * C1160) * C48138 * C109 +
                   ((C113 * C1308 + C48121 * C1324) * C47871 +
                    (C113 * C1297 + C48121 * C1309) * C1160) *
                       C48138 * C108) *
                      C3806) *
                     C47985 +
                 ((((C113 * C301 + C48121 * C316) * C1160 +
                    (C113 * C317 + C48121 * C331) * C47871) *
                       C48138 * C108 +
                   (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                   (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                      C48018 -
                  ((C1615 * C47871 + C1614 * C1160) * C48138 * C110 +
                   (C1613 * C47871 + C1612 * C1160) * C48138 * C109 +
                   ((C113 * C1314 + C48121 * C1327) * C47871 +
                    (C113 * C1300 + C48121 * C1315) * C1160) *
                       C48138 * C108) *
                      C48025 +
                  (((C113 * C1301 + C48121 * C1316) * C1160 +
                    (C113 * C1317 + C48121 * C1328) * C47871) *
                       C48138 * C108 +
                   ((C113 * C1302 + C48121 * C1318) * C1160 +
                    (C113 * C1319 + C48121 * C1329) * C47871) *
                       C48138 * C109 +
                   ((C113 * C1303 + C48121 * C1320) * C1160 +
                    (C113 * C1321 + C48121 * C1330) * C47871) *
                       C48138 * C110) *
                      C3806) *
                     C2904)) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48121 * C126) * C1160 +
                    (C113 * C127 + C48121 * C140) * C47871) *
                       C48138 * C108 +
                   (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                   (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                      C3298 -
                  ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                   (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                   ((C113 * C496 + C48121 * C515) * C47871 +
                    (C113 * C486 + C48121 * C497) * C1160) *
                       C48138 * C108) *
                      C48022) *
                     C48281 +
                 ((((C113 * C935 + C48121 * C940) * C1160 +
                    (C113 * C941 + C48121 * C950) * C47871) *
                       C48138 * C108 +
                   (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                   (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                      C48022 -
                  ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                   (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                   ((C113 * C307 + C48121 * C326) * C47871 +
                    (C113 * C297 + C48121 * C308) * C1160) *
                       C48138 * C108) *
                      C3298) *
                     C48277 +
                 ((((C113 * C301 + C48121 * C316) * C1160 +
                    (C113 * C317 + C48121 * C331) * C47871) *
                       C48138 * C108 +
                   (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                   (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                      C3298 -
                  ((C1615 * C47871 + C1614 * C1160) * C48138 * C110 +
                   (C1613 * C47871 + C1612 * C1160) * C48138 * C109 +
                   ((C113 * C1314 + C48121 * C1327) * C47871 +
                    (C113 * C1300 + C48121 * C1315) * C1160) *
                       C48138 * C108) *
                      C48022) *
                     C48267 +
                 ((((C113 * C1713 + C48121 * C1716) * C1160 +
                    (C113 * C1717 + C48121 * C1722) * C47871) *
                       C48138 * C108 +
                   ((C113 * C1714 + C48121 * C1718) * C1160 +
                    (C113 * C1719 + C48121 * C1723) * C47871) *
                       C48138 * C109 +
                   ((C113 * C1715 + C48121 * C1720) * C1160 +
                    (C113 * C1721 + C48121 * C1724) * C47871) *
                       C48138 * C110) *
                      C48022 -
                  ((C1453 * C47871 + C1452 * C1160) * C48138 * C110 +
                   (C1451 * C47871 + C1450 * C1160) * C48138 * C109 +
                   ((C113 * C1171 + C48121 * C1181) * C47871 +
                    (C113 * C1163 + C48121 * C1172) * C1160) *
                       C48138 * C108) *
                      C3298) *
                     C48245)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48121 * C126) * C1089 +
                    (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
                    C169 * C48258 + C170 * C1091 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C1089 + C169 * C48271 - C170 * C1090 -
                    C171 * C48258 + C172 * C1091 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C1089 + C171 * C48271 - C172 * C1090 -
                    C173 * C48258 + C174 * C1091 + C175 * C48227) *
                       C48138 * C110) *
                      C3298 +
                  ((C550 * C1090 -
                    ((C113 * C496 + C48121 * C515) * C48271 +
                     (C113 * C486 + C48121 * C497) * C1089) +
                    C551 * C48258 - C552 * C1091 - C553 * C48227) *
                       C48138 * C108 +
                   (C552 * C1090 - (C551 * C48271 + C550 * C1089) +
                    C553 * C48258 - C554 * C1091 - C555 * C48227) *
                       C48138 * C109 +
                   (C554 * C1090 - (C553 * C48271 + C552 * C1089) +
                    C555 * C48258 - C788 * C1091 - C789 * C48227) *
                       C48138 * C110) *
                      C48022) *
                     C2531 +
                 (((C361 * C1090 -
                    ((C113 * C307 + C48121 * C326) * C48271 +
                     (C113 * C297 + C48121 * C308) * C1089) +
                    C362 * C48258 - C363 * C1091 - C364 * C48227) *
                       C48138 * C108 +
                   (C363 * C1090 - (C362 * C48271 + C361 * C1089) +
                    C364 * C48258 - C365 * C1091 - C366 * C48227) *
                       C48138 * C109 +
                   (C365 * C1090 - (C364 * C48271 + C363 * C1089) +
                    C366 * C48258 - C678 * C1091 - C679 * C48227) *
                       C48138 * C110) *
                      C3298 +
                  (((C113 * C935 + C48121 * C940) * C1089 +
                    (C113 * C941 + C48121 * C950) * C48271 - C968 * C1090 -
                    C969 * C48258 + C970 * C1091 + C971 * C48227) *
                       C48138 * C108 +
                   (C968 * C1089 + C969 * C48271 - C970 * C1090 -
                    C971 * C48258 + C972 * C1091 + C973 * C48227) *
                       C48138 * C109 +
                   (C970 * C1089 + C971 * C48271 - C972 * C1090 -
                    C973 * C48258 + (C113 * C939 + C48121 * C948) * C1091 +
                    (C113 * C949 + C48121 * C954) * C48227) *
                       C48138 * C110) *
                      C48022) *
                     C47982)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48121 * C126) * C1160 +
                    (C113 * C127 + C48121 * C140) * C47871) *
                       C48138 * C108 +
                   (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                   (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                      C48282 -
                  ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                   (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                   ((C113 * C496 + C48121 * C515) * C47871 +
                    (C113 * C486 + C48121 * C497) * C1160) *
                       C48138 * C108) *
                      C48279 +
                  (((C113 * C490 + C48121 * C505) * C1160 +
                    (C113 * C506 + C48121 * C520) * C47871) *
                       C48138 * C108 +
                   (C556 * C1160 + C557 * C47871) * C48138 * C109 +
                   (C558 * C1160 + C559 * C47871) * C48138 * C110) *
                      C48270 -
                  ((C2319 * C47871 + C2318 * C1160) * C48138 * C110 +
                   (C2317 * C47871 + C2316 * C1160) * C48138 * C109 +
                   ((C113 * C2025 + C48121 * C2035) * C47871 +
                    (C113 * C2017 + C48121 * C2026) * C1160) *
                       C48138 * C108) *
                      C48251) *
                     C2531 +
                 ((((C113 * C935 + C48121 * C940) * C1160 +
                    (C113 * C941 + C48121 * C950) * C47871) *
                       C48138 * C108 +
                   (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                   (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                      C48279 -
                  ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                   (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                   ((C113 * C307 + C48121 * C326) * C47871 +
                    (C113 * C297 + C48121 * C308) * C1160) *
                       C48138 * C108) *
                      C48282 -
                  ((C2201 * C47871 + C2200 * C1160) * C48138 * C110 +
                   (C2199 * C47871 + C2198 * C1160) * C48138 * C109 +
                   ((C113 * C1308 + C48121 * C1324) * C47871 +
                    (C113 * C1297 + C48121 * C1309) * C1160) *
                       C48138 * C108) *
                      C48270 +
                  (((C113 * C2417 + C48121 * C2420) * C1160 +
                    (C113 * C2421 + C48121 * C2426) * C47871) *
                       C48138 * C108 +
                   ((C113 * C2418 + C48121 * C2422) * C1160 +
                    (C113 * C2423 + C48121 * C2427) * C47871) *
                       C48138 * C109 +
                   ((C113 * C2419 + C48121 * C2424) * C1160 +
                    (C113 * C2425 + C48121 * C2428) * C47871) *
                       C48138 * C110) *
                      C48251) *
                     C47982)) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C48138 * C108 +
            (C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C48138 * C109 +
            (C170 * C46986 + C171 * C48186 - C172 * C46967 - C173 * C47881) *
                C48138 * C110) *
               C48018 +
           ((C550 * C46967 -
             ((C113 * C496 + C48121 * C515) * C48186 +
              (C113 * C486 + C48121 * C497) * C46986) +
             C551 * C47881) *
                C48138 * C108 +
            (C552 * C46967 - (C551 * C48186 + C550 * C46986) + C553 * C47881) *
                C48138 * C109 +
            (C554 * C46967 - (C553 * C48186 + C552 * C46986) + C555 * C47881) *
                C48138 * C110) *
               C48025 +
           (((C113 * C490 + C48121 * C505) * C46986 +
             (C113 * C506 + C48121 * C520) * C48186 - C556 * C46967 -
             C557 * C47881) *
                C48138 * C108 +
            (C556 * C46986 + C557 * C48186 - C558 * C46967 - C559 * C47881) *
                C48138 * C109 +
            (C558 * C46986 + C559 * C48186 - C560 * C46967 - C561 * C47881) *
                C48138 * C110) *
               C3806) *
              C2531 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C48138 * C108 +
            (C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                C48138 * C109 +
            (C365 * C46967 - (C364 * C48186 + C363 * C46986) + C366 * C47881) *
                C48138 * C110) *
               C48018 +
           (((C113 * C935 + C48121 * C940) * C46986 +
             (C113 * C941 + C48121 * C950) * C48186 - C968 * C46967 -
             C969 * C47881) *
                C48138 * C108 +
            (C968 * C46986 + C969 * C48186 - C970 * C46967 - C971 * C47881) *
                C48138 * C109 +
            (C970 * C46986 + C971 * C48186 - C972 * C46967 - C973 * C47881) *
                C48138 * C110) *
               C48025 +
           ((C2198 * C46967 -
             ((C113 * C1308 + C48121 * C1324) * C48186 +
              (C113 * C1297 + C48121 * C1309) * C46986) +
             C2199 * C47881) *
                C48138 * C108 +
            (C2200 * C46967 - (C2199 * C48186 + C2198 * C46986) +
             C2201 * C47881) *
                C48138 * C109 +
            ((C113 * C2185 + C48121 * C2186) * C46967 -
             (C2201 * C48186 + C2200 * C46986) +
             (C113 * C2187 + C48121 * C2188) * C47881) *
                C48138 * C110) *
               C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48121 * C126) * C1089 +
                    (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
                    C169 * C48258 + C170 * C1091 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C1089 + C169 * C48271 - C170 * C1090 -
                    C171 * C48258 + C172 * C1091 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C1089 + C171 * C48271 - C172 * C1090 -
                    C173 * C48258 + C174 * C1091 + C175 * C48227) *
                       C48138 * C110) *
                      C3298 +
                  ((C550 * C1090 -
                    ((C113 * C496 + C48121 * C515) * C48271 +
                     (C113 * C486 + C48121 * C497) * C1089) +
                    C551 * C48258 - C552 * C1091 - C553 * C48227) *
                       C48138 * C108 +
                   (C552 * C1090 - (C551 * C48271 + C550 * C1089) +
                    C553 * C48258 - C554 * C1091 - C555 * C48227) *
                       C48138 * C109 +
                   (C554 * C1090 - (C553 * C48271 + C552 * C1089) +
                    C555 * C48258 - C788 * C1091 - C789 * C48227) *
                       C48138 * C110) *
                      C48022) *
                     C2531 +
                 (((C361 * C1090 -
                    ((C113 * C307 + C48121 * C326) * C48271 +
                     (C113 * C297 + C48121 * C308) * C1089) +
                    C362 * C48258 - C363 * C1091 - C364 * C48227) *
                       C48138 * C108 +
                   (C363 * C1090 - (C362 * C48271 + C361 * C1089) +
                    C364 * C48258 - C365 * C1091 - C366 * C48227) *
                       C48138 * C109 +
                   (C365 * C1090 - (C364 * C48271 + C363 * C1089) +
                    C366 * C48258 - C678 * C1091 - C679 * C48227) *
                       C48138 * C110) *
                      C3298 +
                  (((C113 * C935 + C48121 * C940) * C1089 +
                    (C113 * C941 + C48121 * C950) * C48271 - C968 * C1090 -
                    C969 * C48258 + C970 * C1091 + C971 * C48227) *
                       C48138 * C108 +
                   (C968 * C1089 + C969 * C48271 - C970 * C1090 -
                    C971 * C48258 + C972 * C1091 + C973 * C48227) *
                       C48138 * C109 +
                   (C970 * C1089 + C971 * C48271 - C972 * C1090 -
                    C973 * C48258 + (C113 * C939 + C48121 * C948) * C1091 +
                    (C113 * C949 + C48121 * C954) * C48227) *
                       C48138 * C110) *
                      C48022) *
                     C47982)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48121 * C126) * C1160 +
                    (C113 * C127 + C48121 * C140) * C47871) *
                       C48138 * C108 +
                   (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                   (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                      C3298 -
                  ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                   (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                   ((C113 * C496 + C48121 * C515) * C47871 +
                    (C113 * C486 + C48121 * C497) * C1160) *
                       C48138 * C108) *
                      C48022) *
                     C48281 +
                 ((((C113 * C935 + C48121 * C940) * C1160 +
                    (C113 * C941 + C48121 * C950) * C47871) *
                       C48138 * C108 +
                   (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                   (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                      C48022 -
                  ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                   (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                   ((C113 * C307 + C48121 * C326) * C47871 +
                    (C113 * C297 + C48121 * C308) * C1160) *
                       C48138 * C108) *
                      C3298) *
                     C48277 +
                 ((((C113 * C301 + C48121 * C316) * C1160 +
                    (C113 * C317 + C48121 * C331) * C47871) *
                       C48138 * C108 +
                   (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                   (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                      C3298 -
                  ((C1615 * C47871 + C1614 * C1160) * C48138 * C110 +
                   (C1613 * C47871 + C1612 * C1160) * C48138 * C109 +
                   ((C113 * C1314 + C48121 * C1327) * C47871 +
                    (C113 * C1300 + C48121 * C1315) * C1160) *
                       C48138 * C108) *
                      C48022) *
                     C48267 +
                 ((((C113 * C1713 + C48121 * C1716) * C1160 +
                    (C113 * C1717 + C48121 * C1722) * C47871) *
                       C48138 * C108 +
                   ((C113 * C1714 + C48121 * C1718) * C1160 +
                    (C113 * C1719 + C48121 * C1723) * C47871) *
                       C48138 * C109 +
                   ((C113 * C1715 + C48121 * C1720) * C1160 +
                    (C113 * C1721 + C48121 * C1724) * C47871) *
                       C48138 * C110) *
                      C48022 -
                  ((C1453 * C47871 + C1452 * C1160) * C48138 * C110 +
                   (C1451 * C47871 + C1450 * C1160) * C48138 * C109 +
                   ((C113 * C1171 + C48121 * C1181) * C47871 +
                    (C113 * C1163 + C48121 * C1172) * C1160) *
                       C48138 * C108) *
                      C3298) *
                     C48245)) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C46986 +
            (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
            C169 * C47881) *
               C48138 * C108 +
           (C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
               C48138 * C109 +
           (C170 * C46986 + C171 * C48186 - C172 * C46967 - C173 * C47881) *
               C48138 * C110) *
              C47935 * C1431 +
          ((C361 * C46967 -
            ((C113 * C307 + C48121 * C326) * C48186 +
             (C113 * C297 + C48121 * C308) * C46986) +
            C362 * C47881) *
               C48138 * C108 +
           (C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
               C48138 * C109 +
           (C365 * C46967 - (C364 * C48186 + C363 * C46986) + C366 * C47881) *
               C48138 * C110) *
              C47935 * C1432 +
          (((C113 * C301 + C48121 * C316) * C46986 +
            (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
            C368 * C47881) *
               C48138 * C108 +
           (C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
               C48138 * C109 +
           (C369 * C46986 + C370 * C48186 - C371 * C46967 - C372 * C47881) *
               C48138 * C110) *
              C47935 * C1433 +
          ((C1450 * C46967 -
            ((C113 * C1171 + C48121 * C1181) * C48186 +
             (C113 * C1163 + C48121 * C1172) * C46986) +
            C1451 * C47881) *
               C48138 * C108 +
           (C1452 * C46967 - (C1451 * C48186 + C1450 * C46986) +
            C1453 * C47881) *
               C48138 * C109 +
           ((C113 * C1437 + C48121 * C1438) * C46967 -
            (C1453 * C48186 + C1452 * C46986) +
            (C113 * C1439 + C48121 * C1440) * C47881) *
               C48138 * C110) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C665 +
            (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
               C48138 * C108 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
               C48138 * C109 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C48239) *
               C48138 * C110) *
              C47935 * C48203 +
          ((C361 * C666 -
            ((C113 * C307 + C48121 * C326) * C659 +
             (C113 * C297 + C48121 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C48239) *
               C48138 * C108 +
           (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
            C365 * C667 - C366 * C661 + C678 * C668 + C679 * C48239) *
               C48138 * C109 +
           (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
            C678 * C667 - C679 * C661 + (C113 * C669 + C48121 * C670) * C668 +
            (C113 * C671 + C48121 * C672) * C48239) *
               C48138 * C110) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C48138 * C108 +
            (C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C48138 * C109 +
            (C170 * C46986 + C171 * C48186 - C172 * C46967 - C173 * C47881) *
                C48138 * C110) *
               C1835 +
           ((C550 * C46967 -
             ((C113 * C496 + C48121 * C515) * C48186 +
              (C113 * C486 + C48121 * C497) * C46986) +
             C551 * C47881) *
                C48138 * C108 +
            (C552 * C46967 - (C551 * C48186 + C550 * C46986) + C553 * C47881) *
                C48138 * C109 +
            (C554 * C46967 - (C553 * C48186 + C552 * C46986) + C555 * C47881) *
                C48138 * C110) *
               C1836 +
           (((C113 * C490 + C48121 * C505) * C46986 +
             (C113 * C506 + C48121 * C520) * C48186 - C556 * C46967 -
             C557 * C47881) *
                C48138 * C108 +
            (C556 * C46986 + C557 * C48186 - C558 * C46967 - C559 * C47881) *
                C48138 * C109 +
            (C558 * C46986 + C559 * C48186 - C560 * C46967 - C561 * C47881) *
                C48138 * C110) *
               C48238) *
              C48203 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C48138 * C108 +
            (C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                C48138 * C109 +
            (C365 * C46967 - (C364 * C48186 + C363 * C46986) + C366 * C47881) *
                C48138 * C110) *
               C1835 +
           (((C113 * C935 + C48121 * C940) * C46986 +
             (C113 * C941 + C48121 * C950) * C48186 - C968 * C46967 -
             C969 * C47881) *
                C48138 * C108 +
            (C968 * C46986 + C969 * C48186 - C970 * C46967 - C971 * C47881) *
                C48138 * C109 +
            (C970 * C46986 + C971 * C48186 - C972 * C46967 - C973 * C47881) *
                C48138 * C110) *
               C1836 +
           ((C2198 * C46967 -
             ((C113 * C1308 + C48121 * C1324) * C48186 +
              (C113 * C1297 + C48121 * C1309) * C46986) +
             C2199 * C47881) *
                C48138 * C108 +
            (C2200 * C46967 - (C2199 * C48186 + C2198 * C46986) +
             C2201 * C47881) *
                C48138 * C109 +
            ((C113 * C2185 + C48121 * C2186) * C46967 -
             (C2201 * C48186 + C2200 * C46986) +
             (C113 * C2187 + C48121 * C2188) * C47881) *
                C48138 * C110) *
               C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C1160 +
                     (C113 * C127 + C48121 * C140) * C47871) *
                        C48138 * C108 +
                    (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                    (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                       C48204 -
                   ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                    (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                    ((C113 * C496 + C48121 * C515) * C47871 +
                     (C113 * C486 + C48121 * C497) * C1160) *
                        C48138 * C108) *
                       C48022) *
                      C1431 +
                  ((((C113 * C935 + C48121 * C940) * C1160 +
                     (C113 * C941 + C48121 * C950) * C47871) *
                        C48138 * C108 +
                    (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                    (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                       C48022 -
                   ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                    (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                    ((C113 * C307 + C48121 * C326) * C47871 +
                     (C113 * C297 + C48121 * C308) * C1160) *
                        C48138 * C108) *
                       C48204) *
                      C1432 +
                  ((((C113 * C301 + C48121 * C316) * C1160 +
                     (C113 * C317 + C48121 * C331) * C47871) *
                        C48138 * C108 +
                    (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                    (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                       C48204 -
                   ((C1615 * C47871 + C1614 * C1160) * C48138 * C110 +
                    (C1613 * C47871 + C1612 * C1160) * C48138 * C109 +
                    ((C113 * C1314 + C48121 * C1327) * C47871 +
                     (C113 * C1300 + C48121 * C1315) * C1160) *
                        C48138 * C108) *
                       C48022) *
                      C1433 +
                  ((((C113 * C1713 + C48121 * C1716) * C1160 +
                     (C113 * C1717 + C48121 * C1722) * C47871) *
                        C48138 * C108 +
                    ((C113 * C1714 + C48121 * C1718) * C1160 +
                     (C113 * C1719 + C48121 * C1723) * C47871) *
                        C48138 * C109 +
                    ((C113 * C1715 + C48121 * C1720) * C1160 +
                     (C113 * C1721 + C48121 * C1724) * C47871) *
                        C48138 * C110) *
                       C48022 -
                   ((C1453 * C47871 + C1452 * C1160) * C48138 * C110 +
                    (C1451 * C47871 + C1450 * C1160) * C48138 * C109 +
                    ((C113 * C1171 + C48121 * C1181) * C47871 +
                     (C113 * C1163 + C48121 * C1172) * C1160) *
                        C48138 * C108) *
                       C48204) *
                      C48245)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C293 +
                     (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C48227) *
                        C48138 * C108 +
                    (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C48227) *
                        C48138 * C109 +
                    (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                     C174 * C295 + C175 * C48227) *
                        C48138 * C110) *
                       C48204 +
                   ((C550 * C294 -
                     ((C113 * C496 + C48121 * C515) * C287 +
                      (C113 * C486 + C48121 * C497) * C293) +
                     C551 * C288 - C552 * C295 - C553 * C48227) *
                        C48138 * C108 +
                    (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                     C554 * C295 - C555 * C48227) *
                        C48138 * C109 +
                    (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                     C788 * C295 - C789 * C48227) *
                        C48138 * C110) *
                       C48022) *
                      C48203 +
                  (((C361 * C294 -
                     ((C113 * C307 + C48121 * C326) * C287 +
                      (C113 * C297 + C48121 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C48227) *
                        C48138 * C108 +
                    (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                     C365 * C295 - C366 * C48227) *
                        C48138 * C109 +
                    (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                     C678 * C295 - C679 * C48227) *
                        C48138 * C110) *
                       C48204 +
                   (((C113 * C935 + C48121 * C940) * C293 +
                     (C113 * C941 + C48121 * C950) * C287 - C968 * C294 -
                     C969 * C288 + C970 * C295 + C971 * C48227) *
                        C48138 * C108 +
                    (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
                     C972 * C295 + C973 * C48227) *
                        C48138 * C109 +
                    (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
                     (C113 * C939 + C48121 * C948) * C295 +
                     (C113 * C949 + C48121 * C954) * C48227) *
                        C48138 * C110) *
                       C48022) *
                      C47982)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C1160 +
                     (C113 * C127 + C48121 * C140) * C47871) *
                        C48138 * C108 +
                    (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                    (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                       C2299 -
                   ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                    (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                    ((C113 * C496 + C48121 * C515) * C47871 +
                     (C113 * C486 + C48121 * C497) * C1160) *
                        C48138 * C108) *
                       C2300 +
                   (((C113 * C490 + C48121 * C505) * C1160 +
                     (C113 * C506 + C48121 * C520) * C47871) *
                        C48138 * C108 +
                    (C556 * C1160 + C557 * C47871) * C48138 * C109 +
                    (C558 * C1160 + C559 * C47871) * C48138 * C110) *
                       C2301 -
                   ((C2319 * C47871 + C2318 * C1160) * C48138 * C110 +
                    (C2317 * C47871 + C2316 * C1160) * C48138 * C109 +
                    ((C113 * C2025 + C48121 * C2035) * C47871 +
                     (C113 * C2017 + C48121 * C2026) * C1160) *
                        C48138 * C108) *
                       C48251) *
                      C48203 +
                  ((((C113 * C935 + C48121 * C940) * C1160 +
                     (C113 * C941 + C48121 * C950) * C47871) *
                        C48138 * C108 +
                    (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                    (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                       C2300 -
                   ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                    (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                    ((C113 * C307 + C48121 * C326) * C47871 +
                     (C113 * C297 + C48121 * C308) * C1160) *
                        C48138 * C108) *
                       C2299 -
                   ((C2201 * C47871 + C2200 * C1160) * C48138 * C110 +
                    (C2199 * C47871 + C2198 * C1160) * C48138 * C109 +
                    ((C113 * C1308 + C48121 * C1324) * C47871 +
                     (C113 * C1297 + C48121 * C1309) * C1160) *
                        C48138 * C108) *
                       C2301 +
                   (((C113 * C2417 + C48121 * C2420) * C1160 +
                     (C113 * C2421 + C48121 * C2426) * C47871) *
                        C48138 * C108 +
                    ((C113 * C2418 + C48121 * C2422) * C1160 +
                     (C113 * C2423 + C48121 * C2427) * C47871) *
                        C48138 * C109 +
                    ((C113 * C2419 + C48121 * C2424) * C1160 +
                     (C113 * C2425 + C48121 * C2428) * C47871) *
                        C48138 * C110) *
                       C48251) *
                      C47982)) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] += (0.5 * std::pow(Pi, 2.5) *
                     (((C113 * C119 + C48121 * C126) * C114 +
                       (C113 * C127 + C48121 * C140) * C102 - C168 * C115 -
                       C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                       C173 * C105 + C174 * C118 + C175 * C106) *
                          C48138 * C108 +
                      (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                       C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                       C176 * C118 + C177 * C106) *
                          C48138 * C109 +
                      (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                       C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                       (C113 * C125 + C48121 * C138) * C118 +
                       (C113 * C139 + C48121 * C146) * C106) *
                          C48138 * C110) *
                     C47935 * C47923 +
                 0.5 * std::pow(Pi, 2.5) *
                     ((((C113 * C119 + C48121 * C126) * C293 +
                        (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                        C169 * C288 + C170 * C295 + C171 * C48227) *
                           C48138 * C108 +
                       (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                        C172 * C295 + C173 * C48227) *
                           C48138 * C109 +
                       (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                        C174 * C295 + C175 * C48227) *
                           C48138 * C110) *
                          C47935 * C48274 +
                      ((C361 * C294 -
                        ((C113 * C307 + C48121 * C326) * C287 +
                         (C113 * C297 + C48121 * C308) * C293) +
                        C362 * C288 - C363 * C295 - C364 * C48227) *
                           C48138 * C108 +
                       (C363 * C294 - (C362 * C287 + C361 * C293) +
                        C364 * C288 - C365 * C295 - C366 * C48227) *
                           C48138 * C109 +
                       (C365 * C294 - (C364 * C287 + C363 * C293) +
                        C366 * C288 - (C113 * C300 + C48121 * C314) * C295 -
                        (C113 * C315 + C48121 * C330) * C48227) *
                           C48138 * C110) *
                          C47935 * C48262 +
                      (((C113 * C301 + C48121 * C316) * C293 +
                        (C113 * C317 + C48121 * C331) * C287 - C367 * C294 -
                        C368 * C288 + C369 * C295 + C370 * C48227) *
                           C48138 * C108 +
                       (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                        C371 * C295 + C372 * C48227) *
                           C48138 * C109 +
                       (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                        (C113 * C305 + C48121 * C324) * C295 +
                        (C113 * C325 + C48121 * C335) * C48227) *
                           C48138 * C110) *
                          C47935 * C48235)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C293 +
                    (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C48227) *
                       C48138 * C110) *
                      C48275 +
                  ((C550 * C294 -
                    ((C113 * C496 + C48121 * C515) * C287 +
                     (C113 * C486 + C48121 * C497) * C293) +
                    C551 * C288 - C552 * C295 - C553 * C48227) *
                       C48138 * C108 +
                   (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                    C554 * C295 - C555 * C48227) *
                       C48138 * C109 +
                   (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                    (C113 * C489 + C48121 * C503) * C295 -
                    (C113 * C504 + C48121 * C519) * C48227) *
                       C48138 * C110) *
                      C48264 +
                  (((C113 * C490 + C48121 * C505) * C293 +
                    (C113 * C506 + C48121 * C520) * C287 - C556 * C294 -
                    C557 * C288 + C558 * C295 + C559 * C48227) *
                       C48138 * C108 +
                   (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
                    C560 * C295 + C561 * C48227) *
                       C48138 * C109 +
                   (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
                    (C113 * C494 + C48121 * C513) * C295 +
                    (C113 * C514 + C48121 * C524) * C48227) *
                       C48138 * C110) *
                      C48238) *
                 C47923) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1089 +
                    (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
                    C169 * C48258 + C170 * C1091 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C1089 + C169 * C48271 - C170 * C1090 -
                    C171 * C48258 + C172 * C1091 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C1089 + C171 * C48271 - C172 * C1090 -
                    C173 * C48258 + C174 * C1091 + C175 * C48227) *
                       C48138 * C110) *
                      C47935 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C48121 * C326) * C48271 +
                     (C113 * C297 + C48121 * C308) * C1089) +
                    C362 * C48258 - C363 * C1091 - C364 * C48227) *
                       C48138 * C108 +
                   (C363 * C1090 - (C362 * C48271 + C361 * C1089) +
                    C364 * C48258 - C365 * C1091 - C366 * C48227) *
                       C48138 * C109 +
                   (C365 * C1090 - (C364 * C48271 + C363 * C1089) +
                    C366 * C48258 - C678 * C1091 - C679 * C48227) *
                       C48138 * C110) *
                      C47935 * C1087 +
                  (((C113 * C301 + C48121 * C316) * C1089 +
                    (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
                    C368 * C48258 + C369 * C1091 + C370 * C48227) *
                       C48138 * C108 +
                   (C367 * C1089 + C368 * C48271 - C369 * C1090 -
                    C370 * C48258 + C371 * C1091 + C372 * C48227) *
                       C48138 * C109 +
                   (C369 * C1089 + C370 * C48271 - C371 * C1090 -
                    C372 * C48258 + (C113 * C305 + C48121 * C324) * C1091 +
                    (C113 * C325 + C48121 * C335) * C48227) *
                       C48138 * C110) *
                      C47935 * C48235)) /
                    (p * q * std::sqrt(p + q)) +
                (0.5 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1160 +
                    (C113 * C127 + C48121 * C140) * C47871) *
                       C48138 * C108 +
                   (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                   (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                      C47935 * C1155 -
                  ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                   (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                   ((C113 * C307 + C48121 * C326) * C47871 +
                    (C113 * C297 + C48121 * C308) * C1160) *
                       C48138 * C108) *
                      C47935 * C1156 +
                  (((C113 * C301 + C48121 * C316) * C1160 +
                    (C113 * C317 + C48121 * C331) * C47871) *
                       C48138 * C108 +
                   (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                   (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                      C47935 * C1157 -
                  (((C113 * C1167 + C48121 * C1179) * C47871 +
                    (C113 * C1161 + C48121 * C1168) * C1160) *
                       C48138 * C110 +
                   ((C113 * C1169 + C48121 * C1180) * C47871 +
                    (C113 * C1162 + C48121 * C1170) * C1160) *
                       C48138 * C109 +
                   ((C113 * C1171 + C48121 * C1181) * C47871 +
                    (C113 * C1163 + C48121 * C1172) * C1160) *
                       C48138 * C108) *
                      C47935 * C1158 +
                  (((C113 * C1164 + C48121 * C1173) * C1160 +
                    (C113 * C1174 + C48121 * C1182) * C47871) *
                       C48138 * C108 +
                   ((C113 * C1165 + C48121 * C1175) * C1160 +
                    (C113 * C1176 + C48121 * C1183) * C47871) *
                       C48138 * C109 +
                   ((C113 * C1166 + C48121 * C1177) * C1160 +
                    (C113 * C1178 + C48121 * C1184) * C47871) *
                       C48138 * C110) *
                      C47935 * C1159)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C1160 +
                     (C113 * C127 + C48121 * C140) * C47871) *
                        C48138 * C108 +
                    (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                    (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                       C48275 -
                   ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                    (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                    ((C113 * C496 + C48121 * C515) * C47871 +
                     (C113 * C486 + C48121 * C497) * C1160) *
                        C48138 * C108) *
                       C48264 +
                   (((C113 * C490 + C48121 * C505) * C1160 +
                     (C113 * C506 + C48121 * C520) * C47871) *
                        C48138 * C108 +
                    (C556 * C1160 + C557 * C47871) * C48138 * C109 +
                    (C558 * C1160 + C559 * C47871) * C48138 * C110) *
                       C48238) *
                      C1086 +
                  ((((C113 * C935 + C48121 * C940) * C1160 +
                     (C113 * C941 + C48121 * C950) * C47871) *
                        C48138 * C108 +
                    (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                    (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                       C48264 -
                   ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                    (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                    ((C113 * C307 + C48121 * C326) * C47871 +
                     (C113 * C297 + C48121 * C308) * C1160) *
                        C48138 * C108) *
                       C48275 -
                   (((C113 * C1304 + C48121 * C1322) * C47871 +
                     (C113 * C1295 + C48121 * C1305) * C1160) *
                        C48138 * C110 +
                    ((C113 * C1306 + C48121 * C1323) * C47871 +
                     (C113 * C1296 + C48121 * C1307) * C1160) *
                        C48138 * C109 +
                    ((C113 * C1308 + C48121 * C1324) * C47871 +
                     (C113 * C1297 + C48121 * C1309) * C1160) *
                        C48138 * C108) *
                       C48238) *
                      C1087 +
                  ((((C113 * C301 + C48121 * C316) * C1160 +
                     (C113 * C317 + C48121 * C331) * C47871) *
                        C48138 * C108 +
                    (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                    (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                       C48275 -
                   (((C113 * C1310 + C48121 * C1325) * C47871 +
                     (C113 * C1298 + C48121 * C1311) * C1160) *
                        C48138 * C110 +
                    ((C113 * C1312 + C48121 * C1326) * C47871 +
                     (C113 * C1299 + C48121 * C1313) * C1160) *
                        C48138 * C109 +
                    ((C113 * C1314 + C48121 * C1327) * C47871 +
                     (C113 * C1300 + C48121 * C1315) * C1160) *
                        C48138 * C108) *
                       C48264 +
                   (((C113 * C1301 + C48121 * C1316) * C1160 +
                     (C113 * C1317 + C48121 * C1328) * C47871) *
                        C48138 * C108 +
                    ((C113 * C1302 + C48121 * C1318) * C1160 +
                     (C113 * C1319 + C48121 * C1329) * C47871) *
                        C48138 * C109 +
                    ((C113 * C1303 + C48121 * C1320) * C1160 +
                     (C113 * C1321 + C48121 * C1330) * C47871) *
                        C48138 * C110) *
                       C48238) *
                      C48235)) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1089 +
                    (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
                    C169 * C48258 + C170 * C1091 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C1089 + C169 * C48271 - C170 * C1090 -
                    C171 * C48258 + C172 * C1091 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C1089 + C171 * C48271 - C172 * C1090 -
                    C173 * C48258 + C174 * C1091 + C175 * C48227) *
                       C48138 * C110) *
                      C1835 +
                  ((C550 * C1090 -
                    ((C113 * C496 + C48121 * C515) * C48271 +
                     (C113 * C486 + C48121 * C497) * C1089) +
                    C551 * C48258 - C552 * C1091 - C553 * C48227) *
                       C48138 * C108 +
                   (C552 * C1090 - (C551 * C48271 + C550 * C1089) +
                    C553 * C48258 - C554 * C1091 - C555 * C48227) *
                       C48138 * C109 +
                   (C554 * C1090 - (C553 * C48271 + C552 * C1089) +
                    C555 * C48258 - C788 * C1091 - C789 * C48227) *
                       C48138 * C110) *
                      C1836 +
                  (((C113 * C490 + C48121 * C505) * C1089 +
                    (C113 * C506 + C48121 * C520) * C48271 - C556 * C1090 -
                    C557 * C48258 + C558 * C1091 + C559 * C48227) *
                       C48138 * C108 +
                   (C556 * C1089 + C557 * C48271 - C558 * C1090 -
                    C559 * C48258 + C560 * C1091 + C561 * C48227) *
                       C48138 * C109 +
                   (C558 * C1089 + C559 * C48271 - C560 * C1090 -
                    C561 * C48258 + (C113 * C494 + C48121 * C513) * C1091 +
                    (C113 * C514 + C48121 * C524) * C48227) *
                       C48138 * C110) *
                      C48238) *
                 C47923) /
                    (p * q * std::sqrt(p + q)) -
                (std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C1160 +
                     (C113 * C127 + C48121 * C140) * C47871) *
                        C48138 * C108 +
                    (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                    (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                       C1835 -
                   ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                    (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                    ((C113 * C496 + C48121 * C515) * C47871 +
                     (C113 * C486 + C48121 * C497) * C1160) *
                        C48138 * C108) *
                       C1836 +
                   (((C113 * C490 + C48121 * C505) * C1160 +
                     (C113 * C506 + C48121 * C520) * C47871) *
                        C48138 * C108 +
                    (C556 * C1160 + C557 * C47871) * C48138 * C109 +
                    (C558 * C1160 + C559 * C47871) * C48138 * C110) *
                       C48238) *
                      C48274 +
                  ((((C113 * C935 + C48121 * C940) * C1160 +
                     (C113 * C941 + C48121 * C950) * C47871) *
                        C48138 * C108 +
                    (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                    (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                       C1836 -
                   ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                    (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                    ((C113 * C307 + C48121 * C326) * C47871 +
                     (C113 * C297 + C48121 * C308) * C1160) *
                        C48138 * C108) *
                       C1835 -
                   (((C113 * C1304 + C48121 * C1322) * C47871 +
                     (C113 * C1295 + C48121 * C1305) * C1160) *
                        C48138 * C110 +
                    ((C113 * C1306 + C48121 * C1323) * C47871 +
                     (C113 * C1296 + C48121 * C1307) * C1160) *
                        C48138 * C109 +
                    ((C113 * C1308 + C48121 * C1324) * C47871 +
                     (C113 * C1297 + C48121 * C1309) * C1160) *
                        C48138 * C108) *
                       C48238) *
                      C48262 +
                  ((((C113 * C301 + C48121 * C316) * C1160 +
                     (C113 * C317 + C48121 * C331) * C47871) *
                        C48138 * C108 +
                    (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                    (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                       C1835 -
                   ((C1615 * C47871 + C1614 * C1160) * C48138 * C110 +
                    (C1613 * C47871 + C1612 * C1160) * C48138 * C109 +
                    ((C113 * C1314 + C48121 * C1327) * C47871 +
                     (C113 * C1300 + C48121 * C1315) * C1160) *
                        C48138 * C108) *
                       C1836 +
                   (((C113 * C1301 + C48121 * C1316) * C1160 +
                     (C113 * C1317 + C48121 * C1328) * C47871) *
                        C48138 * C108 +
                    ((C113 * C1302 + C48121 * C1318) * C1160 +
                     (C113 * C1319 + C48121 * C1329) * C47871) *
                        C48138 * C109 +
                    ((C113 * C1303 + C48121 * C1320) * C1160 +
                     (C113 * C1321 + C48121 * C1330) * C47871) *
                        C48138 * C110) *
                       C48238) *
                      C48235)) /
                    (p * q * std::sqrt(p + q)) +
                (2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1160 +
                    (C113 * C127 + C48121 * C140) * C47871) *
                       C48138 * C108 +
                   (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                   (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                      C2010 -
                  ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                   (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                   ((C113 * C496 + C48121 * C515) * C47871 +
                    (C113 * C486 + C48121 * C497) * C1160) *
                       C48138 * C108) *
                      C2011 +
                  (((C113 * C490 + C48121 * C505) * C1160 +
                    (C113 * C506 + C48121 * C520) * C47871) *
                       C48138 * C108 +
                   (C556 * C1160 + C557 * C47871) * C48138 * C109 +
                   (C558 * C1160 + C559 * C47871) * C48138 * C110) *
                      C2012 -
                  (((C113 * C2021 + C48121 * C2033) * C47871 +
                    (C113 * C2015 + C48121 * C2022) * C1160) *
                       C48138 * C110 +
                   ((C113 * C2023 + C48121 * C2034) * C47871 +
                    (C113 * C2016 + C48121 * C2024) * C1160) *
                       C48138 * C109 +
                   ((C113 * C2025 + C48121 * C2035) * C47871 +
                    (C113 * C2017 + C48121 * C2026) * C1160) *
                       C48138 * C108) *
                      C2013 +
                  (((C113 * C2018 + C48121 * C2027) * C1160 +
                    (C113 * C2028 + C48121 * C2036) * C47871) *
                       C48138 * C108 +
                   ((C113 * C2019 + C48121 * C2029) * C1160 +
                    (C113 * C2030 + C48121 * C2037) * C47871) *
                       C48138 * C109 +
                   ((C113 * C2020 + C48121 * C2031) * C1160 +
                    (C113 * C2032 + C48121 * C2038) * C47871) *
                       C48138 * C110) *
                      C2014) *
                 C47923) /
                    (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C48138 * C108 +
            (C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C48138 * C109 +
            (C170 * C46986 + C171 * C48186 - C172 * C46967 - C173 * C47881) *
                C48138 * C110) *
               C48204 +
           ((C550 * C46967 -
             ((C113 * C496 + C48121 * C515) * C48186 +
              (C113 * C486 + C48121 * C497) * C46986) +
             C551 * C47881) *
                C48138 * C108 +
            (C552 * C46967 - (C551 * C48186 + C550 * C46986) + C553 * C47881) *
                C48138 * C109 +
            (C554 * C46967 - (C553 * C48186 + C552 * C46986) + C555 * C47881) *
                C48138 * C110) *
               C48022) *
              C1086 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C48138 * C108 +
            (C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                C48138 * C109 +
            (C365 * C46967 - (C364 * C48186 + C363 * C46986) + C366 * C47881) *
                C48138 * C110) *
               C48204 +
           (((C113 * C935 + C48121 * C940) * C46986 +
             (C113 * C941 + C48121 * C950) * C48186 - C968 * C46967 -
             C969 * C47881) *
                C48138 * C108 +
            (C968 * C46986 + C969 * C48186 - C970 * C46967 - C971 * C47881) *
                C48138 * C109 +
            (C970 * C46986 + C971 * C48186 - C972 * C46967 - C973 * C47881) *
                C48138 * C110) *
               C48022) *
              C1087 +
          ((((C113 * C301 + C48121 * C316) * C46986 +
             (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
             C368 * C47881) *
                C48138 * C108 +
            (C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                C48138 * C109 +
            (C369 * C46986 + C370 * C48186 - C371 * C46967 - C372 * C47881) *
                C48138 * C110) *
               C48204 +
           ((C1612 * C46967 -
             ((C113 * C1314 + C48121 * C1327) * C48186 +
              (C113 * C1300 + C48121 * C1315) * C46986) +
             C1613 * C47881) *
                C48138 * C108 +
            (C1614 * C46967 - (C1613 * C48186 + C1612 * C46986) +
             C1615 * C47881) *
                C48138 * C109 +
            ((C113 * C1599 + C48121 * C1600) * C46967 -
             (C1615 * C48186 + C1614 * C46986) +
             (C113 * C1601 + C48121 * C1602) * C47881) *
                C48138 * C110) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C665 +
            (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
               C48138 * C108 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
               C48138 * C109 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C48239) *
               C48138 * C110) *
              C48204 +
          ((C550 * C666 -
            ((C113 * C496 + C48121 * C515) * C659 +
             (C113 * C486 + C48121 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C48239) *
               C48138 * C108 +
           (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
            C554 * C667 - C555 * C661 + C788 * C668 + C789 * C48239) *
               C48138 * C109 +
           (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
            C788 * C667 - C789 * C661 + (C113 * C779 + C48121 * C780) * C668 +
            (C113 * C781 + C48121 * C782) * C48239) *
               C48138 * C110) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C46986 +
            (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
            C169 * C47881) *
               C48138 * C108 +
           (C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
               C48138 * C109 +
           (C170 * C46986 + C171 * C48186 - C172 * C46967 - C173 * C47881) *
               C48138 * C110) *
              C2299 +
          ((C550 * C46967 -
            ((C113 * C496 + C48121 * C515) * C48186 +
             (C113 * C486 + C48121 * C497) * C46986) +
            C551 * C47881) *
               C48138 * C108 +
           (C552 * C46967 - (C551 * C48186 + C550 * C46986) + C553 * C47881) *
               C48138 * C109 +
           (C554 * C46967 - (C553 * C48186 + C552 * C46986) + C555 * C47881) *
               C48138 * C110) *
              C2300 +
          (((C113 * C490 + C48121 * C505) * C46986 +
            (C113 * C506 + C48121 * C520) * C48186 - C556 * C46967 -
            C557 * C47881) *
               C48138 * C108 +
           (C556 * C46986 + C557 * C48186 - C558 * C46967 - C559 * C47881) *
               C48138 * C109 +
           (C558 * C46986 + C559 * C48186 - C560 * C46967 - C561 * C47881) *
               C48138 * C110) *
              C2301 +
          ((C2316 * C46967 -
            ((C113 * C2025 + C48121 * C2035) * C48186 +
             (C113 * C2017 + C48121 * C2026) * C46986) +
            C2317 * C47881) *
               C48138 * C108 +
           (C2318 * C46967 - (C2317 * C48186 + C2316 * C46986) +
            C2319 * C47881) *
               C48138 * C109 +
           ((C113 * C2303 + C48121 * C2304) * C46967 -
            (C2319 * C48186 + C2318 * C46986) +
            (C113 * C2305 + C48121 * C2306) * C47881) *
               C48138 * C110) *
              C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C293 +
                    (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C48227) *
                       C48138 * C110) *
                      C47935 * C48274 +
                  ((C361 * C294 -
                    ((C113 * C307 + C48121 * C326) * C287 +
                     (C113 * C297 + C48121 * C308) * C293) +
                    C362 * C288 - C363 * C295 - C364 * C48227) *
                       C48138 * C108 +
                   (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                    C365 * C295 - C366 * C48227) *
                       C48138 * C109 +
                   (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                    (C113 * C300 + C48121 * C314) * C295 -
                    (C113 * C315 + C48121 * C330) * C48227) *
                       C48138 * C110) *
                      C47935 * C48262 +
                  (((C113 * C301 + C48121 * C316) * C293 +
                    (C113 * C317 + C48121 * C331) * C287 - C367 * C294 -
                    C368 * C288 + C369 * C295 + C370 * C48227) *
                       C48138 * C108 +
                   (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                    C371 * C295 + C372 * C48227) *
                       C48138 * C109 +
                   (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                    (C113 * C305 + C48121 * C324) * C295 +
                    (C113 * C325 + C48121 * C335) * C48227) *
                       C48138 * C110) *
                      C47935 * C48235)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C119 + C48121 * C126) * C114 +
                   (C113 * C127 + C48121 * C140) * C102 - C168 * C115 -
                   C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                   C173 * C105 + C174 * C118 + C175 * C106) *
                      C48138 * C108 +
                  (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                   C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                   C176 * C118 + C177 * C106) *
                      C48138 * C109 +
                  (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                   C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                   (C113 * C125 + C48121 * C138) * C118 +
                   (C113 * C139 + C48121 * C146) * C106) *
                      C48138 * C110) *
                 C47935 * C47923) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1089 +
                    (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
                    C169 * C48258 + C170 * C1091 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C1089 + C169 * C48271 - C170 * C1090 -
                    C171 * C48258 + C172 * C1091 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C1089 + C171 * C48271 - C172 * C1090 -
                    C173 * C48258 + C174 * C1091 + C175 * C48227) *
                       C48138 * C110) *
                      C47935 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C48121 * C326) * C48271 +
                     (C113 * C297 + C48121 * C308) * C1089) +
                    C362 * C48258 - C363 * C1091 - C364 * C48227) *
                       C48138 * C108 +
                   (C363 * C1090 - (C362 * C48271 + C361 * C1089) +
                    C364 * C48258 - C365 * C1091 - C366 * C48227) *
                       C48138 * C109 +
                   (C365 * C1090 - (C364 * C48271 + C363 * C1089) +
                    C366 * C48258 - C678 * C1091 - C679 * C48227) *
                       C48138 * C110) *
                      C47935 * C1087 +
                  (((C113 * C301 + C48121 * C316) * C1089 +
                    (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
                    C368 * C48258 + C369 * C1091 + C370 * C48227) *
                       C48138 * C108 +
                   (C367 * C1089 + C368 * C48271 - C369 * C1090 -
                    C370 * C48258 + C371 * C1091 + C372 * C48227) *
                       C48138 * C109 +
                   (C369 * C1089 + C370 * C48271 - C371 * C1090 -
                    C372 * C48258 + (C113 * C305 + C48121 * C324) * C1091 +
                    (C113 * C325 + C48121 * C335) * C48227) *
                       C48138 * C110) *
                      C47935 * C48235)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1160 +
                    (C113 * C127 + C48121 * C140) * C47871) *
                       C48138 * C108 +
                   (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                   (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                      C47935 * C1155 -
                  ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                   (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                   ((C113 * C307 + C48121 * C326) * C47871 +
                    (C113 * C297 + C48121 * C308) * C1160) *
                       C48138 * C108) *
                      C47935 * C1156 +
                  (((C113 * C301 + C48121 * C316) * C1160 +
                    (C113 * C317 + C48121 * C331) * C47871) *
                       C48138 * C108 +
                   (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                   (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                      C47935 * C1157 -
                  (((C113 * C1167 + C48121 * C1179) * C47871 +
                    (C113 * C1161 + C48121 * C1168) * C1160) *
                       C48138 * C110 +
                   ((C113 * C1169 + C48121 * C1180) * C47871 +
                    (C113 * C1162 + C48121 * C1170) * C1160) *
                       C48138 * C109 +
                   ((C113 * C1171 + C48121 * C1181) * C47871 +
                    (C113 * C1163 + C48121 * C1172) * C1160) *
                       C48138 * C108) *
                      C47935 * C1158 +
                  (((C113 * C1164 + C48121 * C1173) * C1160 +
                    (C113 * C1174 + C48121 * C1182) * C47871) *
                       C48138 * C108 +
                   ((C113 * C1165 + C48121 * C1175) * C1160 +
                    (C113 * C1176 + C48121 * C1183) * C47871) *
                       C48138 * C109 +
                   ((C113 * C1166 + C48121 * C1177) * C1160 +
                    (C113 * C1178 + C48121 * C1184) * C47871) *
                       C48138 * C110) *
                      C47935 * C1159)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1089 +
                    (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
                    C169 * C48258 + C170 * C1091 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C1089 + C169 * C48271 - C170 * C1090 -
                    C171 * C48258 + C172 * C1091 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C1089 + C171 * C48271 - C172 * C1090 -
                    C173 * C48258 + C174 * C1091 + C175 * C48227) *
                       C48138 * C110) *
                      C1835 +
                  ((C550 * C1090 -
                    ((C113 * C496 + C48121 * C515) * C48271 +
                     (C113 * C486 + C48121 * C497) * C1089) +
                    C551 * C48258 - C552 * C1091 - C553 * C48227) *
                       C48138 * C108 +
                   (C552 * C1090 - (C551 * C48271 + C550 * C1089) +
                    C553 * C48258 - C554 * C1091 - C555 * C48227) *
                       C48138 * C109 +
                   (C554 * C1090 - (C553 * C48271 + C552 * C1089) +
                    C555 * C48258 - C788 * C1091 - C789 * C48227) *
                       C48138 * C110) *
                      C1836 +
                  (((C113 * C490 + C48121 * C505) * C1089 +
                    (C113 * C506 + C48121 * C520) * C48271 - C556 * C1090 -
                    C557 * C48258 + C558 * C1091 + C559 * C48227) *
                       C48138 * C108 +
                   (C556 * C1089 + C557 * C48271 - C558 * C1090 -
                    C559 * C48258 + C560 * C1091 + C561 * C48227) *
                       C48138 * C109 +
                   (C558 * C1089 + C559 * C48271 - C560 * C1090 -
                    C561 * C48258 + (C113 * C494 + C48121 * C513) * C1091 +
                    (C113 * C514 + C48121 * C524) * C48227) *
                       C48138 * C110) *
                      C48238) *
                 C47923) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C1160 +
                     (C113 * C127 + C48121 * C140) * C47871) *
                        C48138 * C108 +
                    (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                    (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                       C1835 -
                   ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                    (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                    ((C113 * C496 + C48121 * C515) * C47871 +
                     (C113 * C486 + C48121 * C497) * C1160) *
                        C48138 * C108) *
                       C1836 +
                   (((C113 * C490 + C48121 * C505) * C1160 +
                     (C113 * C506 + C48121 * C520) * C47871) *
                        C48138 * C108 +
                    (C556 * C1160 + C557 * C47871) * C48138 * C109 +
                    (C558 * C1160 + C559 * C47871) * C48138 * C110) *
                       C48238) *
                      C48274 +
                  ((((C113 * C935 + C48121 * C940) * C1160 +
                     (C113 * C941 + C48121 * C950) * C47871) *
                        C48138 * C108 +
                    (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                    (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                       C1836 -
                   ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                    (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                    ((C113 * C307 + C48121 * C326) * C47871 +
                     (C113 * C297 + C48121 * C308) * C1160) *
                        C48138 * C108) *
                       C1835 -
                   (((C113 * C1304 + C48121 * C1322) * C47871 +
                     (C113 * C1295 + C48121 * C1305) * C1160) *
                        C48138 * C110 +
                    ((C113 * C1306 + C48121 * C1323) * C47871 +
                     (C113 * C1296 + C48121 * C1307) * C1160) *
                        C48138 * C109 +
                    ((C113 * C1308 + C48121 * C1324) * C47871 +
                     (C113 * C1297 + C48121 * C1309) * C1160) *
                        C48138 * C108) *
                       C48238) *
                      C48262 +
                  ((((C113 * C301 + C48121 * C316) * C1160 +
                     (C113 * C317 + C48121 * C331) * C47871) *
                        C48138 * C108 +
                    (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                    (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                       C1835 -
                   ((C1615 * C47871 + C1614 * C1160) * C48138 * C110 +
                    (C1613 * C47871 + C1612 * C1160) * C48138 * C109 +
                    ((C113 * C1314 + C48121 * C1327) * C47871 +
                     (C113 * C1300 + C48121 * C1315) * C1160) *
                        C48138 * C108) *
                       C1836 +
                   (((C113 * C1301 + C48121 * C1316) * C1160 +
                     (C113 * C1317 + C48121 * C1328) * C47871) *
                        C48138 * C108 +
                    ((C113 * C1302 + C48121 * C1318) * C1160 +
                     (C113 * C1319 + C48121 * C1329) * C47871) *
                        C48138 * C109 +
                    ((C113 * C1303 + C48121 * C1320) * C1160 +
                     (C113 * C1321 + C48121 * C1330) * C47871) *
                        C48138 * C110) *
                       C48238) *
                      C48235)) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C46996 +
                     (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
                     C169 * C47884 + C170 * C47002 + C171 * C2901) *
                        C48138 * C108 +
                    (C168 * C46996 + C169 * C47876 - C170 * C46992 -
                     C171 * C47884 + C172 * C47002 + C173 * C2901) *
                        C48138 * C109 +
                    (C170 * C46996 + C171 * C47876 - C172 * C46992 -
                     C173 * C47884 + C174 * C47002 + C175 * C2901) *
                        C48138 * C110) *
                       C3298 +
                   ((C550 * C46992 -
                     ((C113 * C496 + C48121 * C515) * C47876 +
                      (C113 * C486 + C48121 * C497) * C46996) +
                     C551 * C47884 - C552 * C47002 - C553 * C2901) *
                        C48138 * C108 +
                    (C552 * C46992 - (C551 * C47876 + C550 * C46996) +
                     C553 * C47884 - C554 * C47002 - C555 * C2901) *
                        C48138 * C109 +
                    (C554 * C46992 - (C553 * C47876 + C552 * C46996) +
                     C555 * C47884 - C788 * C47002 - C789 * C2901) *
                        C48138 * C110) *
                       C48022) *
                      C48203 +
                  (((C361 * C46992 -
                     ((C113 * C307 + C48121 * C326) * C47876 +
                      (C113 * C297 + C48121 * C308) * C46996) +
                     C362 * C47884 - C363 * C47002 - C364 * C2901) *
                        C48138 * C108 +
                    (C363 * C46992 - (C362 * C47876 + C361 * C46996) +
                     C364 * C47884 - C365 * C47002 - C366 * C2901) *
                        C48138 * C109 +
                    (C365 * C46992 - (C364 * C47876 + C363 * C46996) +
                     C366 * C47884 - C678 * C47002 - C679 * C2901) *
                        C48138 * C110) *
                       C3298 +
                   (((C113 * C935 + C48121 * C940) * C46996 +
                     (C113 * C941 + C48121 * C950) * C47876 - C968 * C46992 -
                     C969 * C47884 + C970 * C47002 + C971 * C2901) *
                        C48138 * C108 +
                    (C968 * C46996 + C969 * C47876 - C970 * C46992 -
                     C971 * C47884 + C972 * C47002 + C973 * C2901) *
                        C48138 * C109 +
                    (C970 * C46996 + C971 * C47876 - C972 * C46992 -
                     C973 * C47884 + (C113 * C939 + C48121 * C948) * C47002 +
                     (C113 * C949 + C48121 * C954) * C2901) *
                        C48138 * C110) *
                       C48022) *
                      C47982)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C48138 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C48138 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47881) *
                C48138 * C110) *
               C48018 +
           ((C550 * C2642 -
             ((C113 * C496 + C48121 * C515) * C2635 +
              (C113 * C486 + C48121 * C497) * C2641) +
             C551 * C47881) *
                C48138 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47881) *
                C48138 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47881) *
                C48138 * C110) *
               C48025 +
           (((C113 * C490 + C48121 * C505) * C2641 +
             (C113 * C506 + C48121 * C520) * C2635 - C556 * C2642 -
             C557 * C47881) *
                C48138 * C108 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47881) *
                C48138 * C109 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C47881) *
                C48138 * C110) *
               C3806) *
              C48203 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C48138 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                C48138 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47881) *
                C48138 * C110) *
               C48018 +
           (((C113 * C935 + C48121 * C940) * C2641 +
             (C113 * C941 + C48121 * C950) * C2635 - C968 * C2642 -
             C969 * C47881) *
                C48138 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C47881) *
                C48138 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C47881) *
                C48138 * C110) *
               C48025 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C48121 * C1324) * C2635 +
              (C113 * C1297 + C48121 * C1309) * C2641) +
             C2199 * C47881) *
                C48138 * C108 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C47881) *
                C48138 * C109 +
            ((C113 * C2185 + C48121 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C48121 * C2188) * C47881) *
                C48138 * C110) *
               C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C48138 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C48138 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47881) *
                C48138 * C110) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C48121 * C515) * C2635 +
              (C113 * C486 + C48121 * C497) * C2641) +
             C551 * C47881) *
                C48138 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47881) *
                C48138 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47881) *
                C48138 * C110) *
               C48022) *
              C48274 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C48138 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                C48138 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47881) *
                C48138 * C110) *
               C3298 +
           (((C113 * C935 + C48121 * C940) * C2641 +
             (C113 * C941 + C48121 * C950) * C2635 - C968 * C2642 -
             C969 * C47881) *
                C48138 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C47881) *
                C48138 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C47881) *
                C48138 * C110) *
               C48022) *
              C48262 +
          ((((C113 * C301 + C48121 * C316) * C2641 +
             (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
             C368 * C47881) *
                C48138 * C108 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                C48138 * C109 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C47881) *
                C48138 * C110) *
               C3298 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C48121 * C1327) * C2635 +
              (C113 * C1300 + C48121 * C1315) * C2641) +
             C1613 * C47881) *
                C48138 * C108 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C47881) *
                C48138 * C109 +
            ((C113 * C1599 + C48121 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C48121 * C1602) * C47881) *
                C48138 * C110) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2533 +
            (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
            C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
            C173 * C48239) *
               C48138 * C108 +
           (C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
            C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
               C48138 * C109 +
           (C170 * C2533 + C171 * C48280 - C172 * C2534 - C173 * C48273 +
            C174 * C2535 + C175 * C48260 - C176 * C2536 - C177 * C48239) *
               C48138 * C110) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C48121 * C515) * C48280 +
             (C113 * C486 + C48121 * C497) * C2533) +
            C551 * C48273 - C552 * C2535 - C553 * C48260 + C554 * C2536 +
            C555 * C48239) *
               C48138 * C108 +
           (C552 * C2534 - (C551 * C48280 + C550 * C2533) + C553 * C48273 -
            C554 * C2535 - C555 * C48260 + C788 * C2536 + C789 * C48239) *
               C48138 * C109 +
           (C554 * C2534 - (C553 * C48280 + C552 * C2533) + C555 * C48273 -
            C788 * C2535 - C789 * C48260 +
            (C113 * C779 + C48121 * C780) * C2536 +
            (C113 * C781 + C48121 * C782) * C48239) *
               C48138 * C110) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2641 +
            (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
            C169 * C47881) *
               C48138 * C108 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
               C48138 * C109 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47881) *
               C48138 * C110) *
              C48282 +
          ((C550 * C2642 -
            ((C113 * C496 + C48121 * C515) * C2635 +
             (C113 * C486 + C48121 * C497) * C2641) +
            C551 * C47881) *
               C48138 * C108 +
           (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47881) *
               C48138 * C109 +
           (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47881) *
               C48138 * C110) *
              C48279 +
          (((C113 * C490 + C48121 * C505) * C2641 +
            (C113 * C506 + C48121 * C520) * C2635 - C556 * C2642 -
            C557 * C47881) *
               C48138 * C108 +
           (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47881) *
               C48138 * C109 +
           (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C47881) *
               C48138 * C110) *
              C48270 +
          ((C2316 * C2642 -
            ((C113 * C2025 + C48121 * C2035) * C2635 +
             (C113 * C2017 + C48121 * C2026) * C2641) +
            C2317 * C47881) *
               C48138 * C108 +
           (C2318 * C2642 - (C2317 * C2635 + C2316 * C2641) + C2319 * C47881) *
               C48138 * C109 +
           ((C113 * C2303 + C48121 * C2304) * C2642 -
            (C2319 * C2635 + C2318 * C2641) +
            (C113 * C2305 + C48121 * C2306) * C47881) *
               C48138 * C110) *
              C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C46996 +
                    (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
                    C169 * C47884 + C170 * C47002 + C171 * C2901) *
                       C48138 * C108 +
                   (C168 * C46996 + C169 * C47876 - C170 * C46992 -
                    C171 * C47884 + C172 * C47002 + C173 * C2901) *
                       C48138 * C109 +
                   (C170 * C46996 + C171 * C47876 - C172 * C46992 -
                    C173 * C47884 + C174 * C47002 + C175 * C2901) *
                       C48138 * C110) *
                      C48018 +
                  ((C550 * C46992 -
                    ((C113 * C496 + C48121 * C515) * C47876 +
                     (C113 * C486 + C48121 * C497) * C46996) +
                    C551 * C47884 - C552 * C47002 - C553 * C2901) *
                       C48138 * C108 +
                   (C552 * C46992 - (C551 * C47876 + C550 * C46996) +
                    C553 * C47884 - C554 * C47002 - C555 * C2901) *
                       C48138 * C109 +
                   (C554 * C46992 - (C553 * C47876 + C552 * C46996) +
                    C555 * C47884 - C788 * C47002 - C789 * C2901) *
                       C48138 * C110) *
                      C48025 +
                  (((C113 * C490 + C48121 * C505) * C46996 +
                    (C113 * C506 + C48121 * C520) * C47876 - C556 * C46992 -
                    C557 * C47884 + C558 * C47002 + C559 * C2901) *
                       C48138 * C108 +
                   (C556 * C46996 + C557 * C47876 - C558 * C46992 -
                    C559 * C47884 + C560 * C47002 + C561 * C2901) *
                       C48138 * C109 +
                   (C558 * C46996 + C559 * C47876 - C560 * C46992 -
                    C561 * C47884 + (C113 * C494 + C48121 * C513) * C47002 +
                    (C113 * C514 + C48121 * C524) * C2901) *
                       C48138 * C110) *
                      C3806) *
                 C47923) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2533 +
            (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
            C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
            C173 * C48239) *
               C48138 * C108 +
           (C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
            C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
               C48138 * C109 +
           (C170 * C2533 + C171 * C48280 - C172 * C2534 - C173 * C48273 +
            C174 * C2535 + C175 * C48260 - C176 * C2536 - C177 * C48239) *
               C48138 * C110) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C48121 * C515) * C48280 +
             (C113 * C486 + C48121 * C497) * C2533) +
            C551 * C48273 - C552 * C2535 - C553 * C48260 + C554 * C2536 +
            C555 * C48239) *
               C48138 * C108 +
           (C552 * C2534 - (C551 * C48280 + C550 * C2533) + C553 * C48273 -
            C554 * C2535 - C555 * C48260 + C788 * C2536 + C789 * C48239) *
               C48138 * C109 +
           (C554 * C2534 - (C553 * C48280 + C552 * C2533) + C555 * C48273 -
            C788 * C2535 - C789 * C48260 +
            (C113 * C779 + C48121 * C780) * C2536 +
            (C113 * C781 + C48121 * C782) * C48239) *
               C48138 * C110) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C48138 * C108 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C48138 * C109 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47881) *
                C48138 * C110) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C48121 * C515) * C2635 +
              (C113 * C486 + C48121 * C497) * C2641) +
             C551 * C47881) *
                C48138 * C108 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47881) *
                C48138 * C109 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47881) *
                C48138 * C110) *
               C48022) *
              C48274 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C48138 * C108 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                C48138 * C109 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47881) *
                C48138 * C110) *
               C3298 +
           (((C113 * C935 + C48121 * C940) * C2641 +
             (C113 * C941 + C48121 * C950) * C2635 - C968 * C2642 -
             C969 * C47881) *
                C48138 * C108 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C47881) *
                C48138 * C109 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C47881) *
                C48138 * C110) *
               C48022) *
              C48262 +
          ((((C113 * C301 + C48121 * C316) * C2641 +
             (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
             C368 * C47881) *
                C48138 * C108 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                C48138 * C109 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C47881) *
                C48138 * C110) *
               C3298 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C48121 * C1327) * C2635 +
              (C113 * C1300 + C48121 * C1315) * C2641) +
             C1613 * C47881) *
                C48138 * C108 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C47881) *
                C48138 * C109 +
            ((C113 * C1599 + C48121 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C48121 * C1602) * C47881) *
                C48138 * C110) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C665 +
            (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
               C48138 * C108 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
               C48138 * C109 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C48239) *
               C48138 * C110) *
              C47935 * C48203 +
          ((C361 * C666 -
            ((C113 * C307 + C48121 * C326) * C659 +
             (C113 * C297 + C48121 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C48239) *
               C48138 * C108 +
           (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
            C365 * C667 - C366 * C661 + C678 * C668 + C679 * C48239) *
               C48138 * C109 +
           (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
            C678 * C667 - C679 * C661 + (C113 * C669 + C48121 * C670) * C668 +
            (C113 * C671 + C48121 * C672) * C48239) *
               C48138 * C110) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C46986 +
            (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
            C169 * C47881) *
               C48138 * C108 +
           (C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
               C48138 * C109 +
           (C170 * C46986 + C171 * C48186 - C172 * C46967 - C173 * C47881) *
               C48138 * C110) *
              C47935 * C1431 +
          ((C361 * C46967 -
            ((C113 * C307 + C48121 * C326) * C48186 +
             (C113 * C297 + C48121 * C308) * C46986) +
            C362 * C47881) *
               C48138 * C108 +
           (C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
               C48138 * C109 +
           (C365 * C46967 - (C364 * C48186 + C363 * C46986) + C366 * C47881) *
               C48138 * C110) *
              C47935 * C1432 +
          (((C113 * C301 + C48121 * C316) * C46986 +
            (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
            C368 * C47881) *
               C48138 * C108 +
           (C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
               C48138 * C109 +
           (C369 * C46986 + C370 * C48186 - C371 * C46967 - C372 * C47881) *
               C48138 * C110) *
              C47935 * C1433 +
          ((C1450 * C46967 -
            ((C113 * C1171 + C48121 * C1181) * C48186 +
             (C113 * C1163 + C48121 * C1172) * C46986) +
            C1451 * C47881) *
               C48138 * C108 +
           (C1452 * C46967 - (C1451 * C48186 + C1450 * C46986) +
            C1453 * C47881) *
               C48138 * C109 +
           ((C113 * C1437 + C48121 * C1438) * C46967 -
            (C1453 * C48186 + C1452 * C46986) +
            (C113 * C1439 + C48121 * C1440) * C47881) *
               C48138 * C110) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C293 +
                     (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C48227) *
                        C48138 * C108 +
                    (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C48227) *
                        C48138 * C109 +
                    (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                     C174 * C295 + C175 * C48227) *
                        C48138 * C110) *
                       C48204 +
                   ((C550 * C294 -
                     ((C113 * C496 + C48121 * C515) * C287 +
                      (C113 * C486 + C48121 * C497) * C293) +
                     C551 * C288 - C552 * C295 - C553 * C48227) *
                        C48138 * C108 +
                    (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                     C554 * C295 - C555 * C48227) *
                        C48138 * C109 +
                    (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                     C788 * C295 - C789 * C48227) *
                        C48138 * C110) *
                       C48022) *
                      C48203 +
                  (((C361 * C294 -
                     ((C113 * C307 + C48121 * C326) * C287 +
                      (C113 * C297 + C48121 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C48227) *
                        C48138 * C108 +
                    (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                     C365 * C295 - C366 * C48227) *
                        C48138 * C109 +
                    (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                     C678 * C295 - C679 * C48227) *
                        C48138 * C110) *
                       C48204 +
                   (((C113 * C935 + C48121 * C940) * C293 +
                     (C113 * C941 + C48121 * C950) * C287 - C968 * C294 -
                     C969 * C288 + C970 * C295 + C971 * C48227) *
                        C48138 * C108 +
                    (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
                     C972 * C295 + C973 * C48227) *
                        C48138 * C109 +
                    (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
                     (C113 * C939 + C48121 * C948) * C295 +
                     (C113 * C949 + C48121 * C954) * C48227) *
                        C48138 * C110) *
                       C48022) *
                      C47982)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C1160 +
                     (C113 * C127 + C48121 * C140) * C47871) *
                        C48138 * C108 +
                    (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                    (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                       C48204 -
                   ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                    (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                    ((C113 * C496 + C48121 * C515) * C47871 +
                     (C113 * C486 + C48121 * C497) * C1160) *
                        C48138 * C108) *
                       C48022) *
                      C1431 +
                  ((((C113 * C935 + C48121 * C940) * C1160 +
                     (C113 * C941 + C48121 * C950) * C47871) *
                        C48138 * C108 +
                    (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                    (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                       C48022 -
                   ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                    (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                    ((C113 * C307 + C48121 * C326) * C47871 +
                     (C113 * C297 + C48121 * C308) * C1160) *
                        C48138 * C108) *
                       C48204) *
                      C1432 +
                  ((((C113 * C301 + C48121 * C316) * C1160 +
                     (C113 * C317 + C48121 * C331) * C47871) *
                        C48138 * C108 +
                    (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                    (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                       C48204 -
                   ((C1615 * C47871 + C1614 * C1160) * C48138 * C110 +
                    (C1613 * C47871 + C1612 * C1160) * C48138 * C109 +
                    ((C113 * C1314 + C48121 * C1327) * C47871 +
                     (C113 * C1300 + C48121 * C1315) * C1160) *
                        C48138 * C108) *
                       C48022) *
                      C1433 +
                  ((((C113 * C1713 + C48121 * C1716) * C1160 +
                     (C113 * C1717 + C48121 * C1722) * C47871) *
                        C48138 * C108 +
                    ((C113 * C1714 + C48121 * C1718) * C1160 +
                     (C113 * C1719 + C48121 * C1723) * C47871) *
                        C48138 * C109 +
                    ((C113 * C1715 + C48121 * C1720) * C1160 +
                     (C113 * C1721 + C48121 * C1724) * C47871) *
                        C48138 * C110) *
                       C48022 -
                   ((C1453 * C47871 + C1452 * C1160) * C48138 * C110 +
                    (C1451 * C47871 + C1450 * C1160) * C48138 * C109 +
                    ((C113 * C1171 + C48121 * C1181) * C47871 +
                     (C113 * C1163 + C48121 * C1172) * C1160) *
                        C48138 * C108) *
                       C48204) *
                      C48245)) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C293 +
                    (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C48227) *
                       C48138 * C110) *
                      C47935 * C48274 +
                  ((C361 * C294 -
                    ((C113 * C307 + C48121 * C326) * C287 +
                     (C113 * C297 + C48121 * C308) * C293) +
                    C362 * C288 - C363 * C295 - C364 * C48227) *
                       C48138 * C108 +
                   (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                    C365 * C295 - C366 * C48227) *
                       C48138 * C109 +
                   (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                    (C113 * C300 + C48121 * C314) * C295 -
                    (C113 * C315 + C48121 * C330) * C48227) *
                       C48138 * C110) *
                      C47935 * C48262 +
                  (((C113 * C301 + C48121 * C316) * C293 +
                    (C113 * C317 + C48121 * C331) * C287 - C367 * C294 -
                    C368 * C288 + C369 * C295 + C370 * C48227) *
                       C48138 * C108 +
                   (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                    C371 * C295 + C372 * C48227) *
                       C48138 * C109 +
                   (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                    (C113 * C305 + C48121 * C324) * C295 +
                    (C113 * C325 + C48121 * C335) * C48227) *
                       C48138 * C110) *
                      C47935 * C48235)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C119 + C48121 * C126) * C114 +
                   (C113 * C127 + C48121 * C140) * C102 - C168 * C115 -
                   C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                   C173 * C105 + C174 * C118 + C175 * C106) *
                      C48138 * C108 +
                  (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                   C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                   C176 * C118 + C177 * C106) *
                      C48138 * C109 +
                  (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                   C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                   (C113 * C125 + C48121 * C138) * C118 +
                   (C113 * C139 + C48121 * C146) * C106) *
                      C48138 * C110) *
                 C47935 * C47923) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C293 +
                    (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C48227) *
                       C48138 * C110) *
                      C48275 +
                  ((C550 * C294 -
                    ((C113 * C496 + C48121 * C515) * C287 +
                     (C113 * C486 + C48121 * C497) * C293) +
                    C551 * C288 - C552 * C295 - C553 * C48227) *
                       C48138 * C108 +
                   (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                    C554 * C295 - C555 * C48227) *
                       C48138 * C109 +
                   (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                    (C113 * C489 + C48121 * C503) * C295 -
                    (C113 * C504 + C48121 * C519) * C48227) *
                       C48138 * C110) *
                      C48264 +
                  (((C113 * C490 + C48121 * C505) * C293 +
                    (C113 * C506 + C48121 * C520) * C287 - C556 * C294 -
                    C557 * C288 + C558 * C295 + C559 * C48227) *
                       C48138 * C108 +
                   (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
                    C560 * C295 + C561 * C48227) *
                       C48138 * C109 +
                   (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
                    (C113 * C494 + C48121 * C513) * C295 +
                    (C113 * C514 + C48121 * C524) * C48227) *
                       C48138 * C110) *
                      C48238) *
                 C47923) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1089 +
                    (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
                    C169 * C48258 + C170 * C1091 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C1089 + C169 * C48271 - C170 * C1090 -
                    C171 * C48258 + C172 * C1091 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C1089 + C171 * C48271 - C172 * C1090 -
                    C173 * C48258 + C174 * C1091 + C175 * C48227) *
                       C48138 * C110) *
                      C47935 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C48121 * C326) * C48271 +
                     (C113 * C297 + C48121 * C308) * C1089) +
                    C362 * C48258 - C363 * C1091 - C364 * C48227) *
                       C48138 * C108 +
                   (C363 * C1090 - (C362 * C48271 + C361 * C1089) +
                    C364 * C48258 - C365 * C1091 - C366 * C48227) *
                       C48138 * C109 +
                   (C365 * C1090 - (C364 * C48271 + C363 * C1089) +
                    C366 * C48258 - C678 * C1091 - C679 * C48227) *
                       C48138 * C110) *
                      C47935 * C1087 +
                  (((C113 * C301 + C48121 * C316) * C1089 +
                    (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
                    C368 * C48258 + C369 * C1091 + C370 * C48227) *
                       C48138 * C108 +
                   (C367 * C1089 + C368 * C48271 - C369 * C1090 -
                    C370 * C48258 + C371 * C1091 + C372 * C48227) *
                       C48138 * C109 +
                   (C369 * C1089 + C370 * C48271 - C371 * C1090 -
                    C372 * C48258 + (C113 * C305 + C48121 * C324) * C1091 +
                    (C113 * C325 + C48121 * C335) * C48227) *
                       C48138 * C110) *
                      C47935 * C48235)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1160 +
                    (C113 * C127 + C48121 * C140) * C47871) *
                       C48138 * C108 +
                   (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                   (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                      C47935 * C1155 -
                  ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                   (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                   ((C113 * C307 + C48121 * C326) * C47871 +
                    (C113 * C297 + C48121 * C308) * C1160) *
                       C48138 * C108) *
                      C47935 * C1156 +
                  (((C113 * C301 + C48121 * C316) * C1160 +
                    (C113 * C317 + C48121 * C331) * C47871) *
                       C48138 * C108 +
                   (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                   (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                      C47935 * C1157 -
                  (((C113 * C1167 + C48121 * C1179) * C47871 +
                    (C113 * C1161 + C48121 * C1168) * C1160) *
                       C48138 * C110 +
                   ((C113 * C1169 + C48121 * C1180) * C47871 +
                    (C113 * C1162 + C48121 * C1170) * C1160) *
                       C48138 * C109 +
                   ((C113 * C1171 + C48121 * C1181) * C47871 +
                    (C113 * C1163 + C48121 * C1172) * C1160) *
                       C48138 * C108) *
                      C47935 * C1158 +
                  (((C113 * C1164 + C48121 * C1173) * C1160 +
                    (C113 * C1174 + C48121 * C1182) * C47871) *
                       C48138 * C108 +
                   ((C113 * C1165 + C48121 * C1175) * C1160 +
                    (C113 * C1176 + C48121 * C1183) * C47871) *
                       C48138 * C109 +
                   ((C113 * C1166 + C48121 * C1177) * C1160 +
                    (C113 * C1178 + C48121 * C1184) * C47871) *
                       C48138 * C110) *
                      C47935 * C1159)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C1160 +
                     (C113 * C127 + C48121 * C140) * C47871) *
                        C48138 * C108 +
                    (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                    (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                       C48275 -
                   ((C553 * C47871 + C552 * C1160) * C48138 * C110 +
                    (C551 * C47871 + C550 * C1160) * C48138 * C109 +
                    ((C113 * C496 + C48121 * C515) * C47871 +
                     (C113 * C486 + C48121 * C497) * C1160) *
                        C48138 * C108) *
                       C48264 +
                   (((C113 * C490 + C48121 * C505) * C1160 +
                     (C113 * C506 + C48121 * C520) * C47871) *
                        C48138 * C108 +
                    (C556 * C1160 + C557 * C47871) * C48138 * C109 +
                    (C558 * C1160 + C559 * C47871) * C48138 * C110) *
                       C48238) *
                      C1086 +
                  ((((C113 * C935 + C48121 * C940) * C1160 +
                     (C113 * C941 + C48121 * C950) * C47871) *
                        C48138 * C108 +
                    (C968 * C1160 + C969 * C47871) * C48138 * C109 +
                    (C970 * C1160 + C971 * C47871) * C48138 * C110) *
                       C48264 -
                   ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                    (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                    ((C113 * C307 + C48121 * C326) * C47871 +
                     (C113 * C297 + C48121 * C308) * C1160) *
                        C48138 * C108) *
                       C48275 -
                   (((C113 * C1304 + C48121 * C1322) * C47871 +
                     (C113 * C1295 + C48121 * C1305) * C1160) *
                        C48138 * C110 +
                    ((C113 * C1306 + C48121 * C1323) * C47871 +
                     (C113 * C1296 + C48121 * C1307) * C1160) *
                        C48138 * C109 +
                    ((C113 * C1308 + C48121 * C1324) * C47871 +
                     (C113 * C1297 + C48121 * C1309) * C1160) *
                        C48138 * C108) *
                       C48238) *
                      C1087 +
                  ((((C113 * C301 + C48121 * C316) * C1160 +
                     (C113 * C317 + C48121 * C331) * C47871) *
                        C48138 * C108 +
                    (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                    (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                       C48275 -
                   (((C113 * C1310 + C48121 * C1325) * C47871 +
                     (C113 * C1298 + C48121 * C1311) * C1160) *
                        C48138 * C110 +
                    ((C113 * C1312 + C48121 * C1326) * C47871 +
                     (C113 * C1299 + C48121 * C1313) * C1160) *
                        C48138 * C109 +
                    ((C113 * C1314 + C48121 * C1327) * C47871 +
                     (C113 * C1300 + C48121 * C1315) * C1160) *
                        C48138 * C108) *
                       C48264 +
                   (((C113 * C1301 + C48121 * C1316) * C1160 +
                     (C113 * C1317 + C48121 * C1328) * C47871) *
                        C48138 * C108 +
                    ((C113 * C1302 + C48121 * C1318) * C1160 +
                     (C113 * C1319 + C48121 * C1329) * C47871) *
                        C48138 * C109 +
                    ((C113 * C1303 + C48121 * C1320) * C1160 +
                     (C113 * C1321 + C48121 * C1330) * C47871) *
                        C48138 * C110) *
                       C48238) *
                      C48235)) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C665 +
            (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
               C48138 * C108 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
               C48138 * C109 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C48239) *
               C48138 * C110) *
              C48204 +
          ((C550 * C666 -
            ((C113 * C496 + C48121 * C515) * C659 +
             (C113 * C486 + C48121 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C48239) *
               C48138 * C108 +
           (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
            C554 * C667 - C555 * C661 + C788 * C668 + C789 * C48239) *
               C48138 * C109 +
           (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
            C788 * C667 - C789 * C661 + (C113 * C779 + C48121 * C780) * C668 +
            (C113 * C781 + C48121 * C782) * C48239) *
               C48138 * C110) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C48138 * C108 +
            (C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C48138 * C109 +
            (C170 * C46986 + C171 * C48186 - C172 * C46967 - C173 * C47881) *
                C48138 * C110) *
               C48204 +
           ((C550 * C46967 -
             ((C113 * C496 + C48121 * C515) * C48186 +
              (C113 * C486 + C48121 * C497) * C46986) +
             C551 * C47881) *
                C48138 * C108 +
            (C552 * C46967 - (C551 * C48186 + C550 * C46986) + C553 * C47881) *
                C48138 * C109 +
            (C554 * C46967 - (C553 * C48186 + C552 * C46986) + C555 * C47881) *
                C48138 * C110) *
               C48022) *
              C1086 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C48138 * C108 +
            (C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                C48138 * C109 +
            (C365 * C46967 - (C364 * C48186 + C363 * C46986) + C366 * C47881) *
                C48138 * C110) *
               C48204 +
           (((C113 * C935 + C48121 * C940) * C46986 +
             (C113 * C941 + C48121 * C950) * C48186 - C968 * C46967 -
             C969 * C47881) *
                C48138 * C108 +
            (C968 * C46986 + C969 * C48186 - C970 * C46967 - C971 * C47881) *
                C48138 * C109 +
            (C970 * C46986 + C971 * C48186 - C972 * C46967 - C973 * C47881) *
                C48138 * C110) *
               C48022) *
              C1087 +
          ((((C113 * C301 + C48121 * C316) * C46986 +
             (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
             C368 * C47881) *
                C48138 * C108 +
            (C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                C48138 * C109 +
            (C369 * C46986 + C370 * C48186 - C371 * C46967 - C372 * C47881) *
                C48138 * C110) *
               C48204 +
           ((C1612 * C46967 -
             ((C113 * C1314 + C48121 * C1327) * C48186 +
              (C113 * C1300 + C48121 * C1315) * C46986) +
             C1613 * C47881) *
                C48138 * C108 +
            (C1614 * C46967 - (C1613 * C48186 + C1612 * C46986) +
             C1615 * C47881) *
                C48138 * C109 +
            ((C113 * C1599 + C48121 * C1600) * C46967 -
             (C1615 * C48186 + C1614 * C46986) +
             (C113 * C1601 + C48121 * C1602) * C47881) *
                C48138 * C110) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C119 + C48121 * C126) * C114 +
                   (C113 * C127 + C48121 * C140) * C102 - C168 * C115 -
                   C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                   C173 * C105 + C174 * C118 + C175 * C106) *
                      C48138 * C108 +
                  (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                   C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                   C176 * C118 + C177 * C106) *
                      C48138 * C109 +
                  (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                   C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                   (C113 * C125 + C48121 * C138) * C118 +
                   (C113 * C139 + C48121 * C146) * C106) *
                      C48138 * C110) *
                 C47935 * C47923) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C293 +
                    (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C48227) *
                       C48138 * C110) *
                      C47935 * C48274 +
                  ((C361 * C294 -
                    ((C113 * C307 + C48121 * C326) * C287 +
                     (C113 * C297 + C48121 * C308) * C293) +
                    C362 * C288 - C363 * C295 - C364 * C48227) *
                       C48138 * C108 +
                   (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                    C365 * C295 - C366 * C48227) *
                       C48138 * C109 +
                   (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                    (C113 * C300 + C48121 * C314) * C295 -
                    (C113 * C315 + C48121 * C330) * C48227) *
                       C48138 * C110) *
                      C47935 * C48262 +
                  (((C113 * C301 + C48121 * C316) * C293 +
                    (C113 * C317 + C48121 * C331) * C287 - C367 * C294 -
                    C368 * C288 + C369 * C295 + C370 * C48227) *
                       C48138 * C108 +
                   (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                    C371 * C295 + C372 * C48227) *
                       C48138 * C109 +
                   (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                    (C113 * C305 + C48121 * C324) * C295 +
                    (C113 * C325 + C48121 * C335) * C48227) *
                       C48138 * C110) *
                      C47935 * C48235)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1089 +
                    (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
                    C169 * C48258 + C170 * C1091 + C171 * C48227) *
                       C48138 * C108 +
                   (C168 * C1089 + C169 * C48271 - C170 * C1090 -
                    C171 * C48258 + C172 * C1091 + C173 * C48227) *
                       C48138 * C109 +
                   (C170 * C1089 + C171 * C48271 - C172 * C1090 -
                    C173 * C48258 + C174 * C1091 + C175 * C48227) *
                       C48138 * C110) *
                      C47935 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C48121 * C326) * C48271 +
                     (C113 * C297 + C48121 * C308) * C1089) +
                    C362 * C48258 - C363 * C1091 - C364 * C48227) *
                       C48138 * C108 +
                   (C363 * C1090 - (C362 * C48271 + C361 * C1089) +
                    C364 * C48258 - C365 * C1091 - C366 * C48227) *
                       C48138 * C109 +
                   (C365 * C1090 - (C364 * C48271 + C363 * C1089) +
                    C366 * C48258 - C678 * C1091 - C679 * C48227) *
                       C48138 * C110) *
                      C47935 * C1087 +
                  (((C113 * C301 + C48121 * C316) * C1089 +
                    (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
                    C368 * C48258 + C369 * C1091 + C370 * C48227) *
                       C48138 * C108 +
                   (C367 * C1089 + C368 * C48271 - C369 * C1090 -
                    C370 * C48258 + C371 * C1091 + C372 * C48227) *
                       C48138 * C109 +
                   (C369 * C1089 + C370 * C48271 - C371 * C1090 -
                    C372 * C48258 + (C113 * C305 + C48121 * C324) * C1091 +
                    (C113 * C325 + C48121 * C335) * C48227) *
                       C48138 * C110) *
                      C47935 * C48235)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C1160 +
                    (C113 * C127 + C48121 * C140) * C47871) *
                       C48138 * C108 +
                   (C168 * C1160 + C169 * C47871) * C48138 * C109 +
                   (C170 * C1160 + C171 * C47871) * C48138 * C110) *
                      C47935 * C1155 -
                  ((C364 * C47871 + C363 * C1160) * C48138 * C110 +
                   (C362 * C47871 + C361 * C1160) * C48138 * C109 +
                   ((C113 * C307 + C48121 * C326) * C47871 +
                    (C113 * C297 + C48121 * C308) * C1160) *
                       C48138 * C108) *
                      C47935 * C1156 +
                  (((C113 * C301 + C48121 * C316) * C1160 +
                    (C113 * C317 + C48121 * C331) * C47871) *
                       C48138 * C108 +
                   (C367 * C1160 + C368 * C47871) * C48138 * C109 +
                   (C369 * C1160 + C370 * C47871) * C48138 * C110) *
                      C47935 * C1157 -
                  (((C113 * C1167 + C48121 * C1179) * C47871 +
                    (C113 * C1161 + C48121 * C1168) * C1160) *
                       C48138 * C110 +
                   ((C113 * C1169 + C48121 * C1180) * C47871 +
                    (C113 * C1162 + C48121 * C1170) * C1160) *
                       C48138 * C109 +
                   ((C113 * C1171 + C48121 * C1181) * C47871 +
                    (C113 * C1163 + C48121 * C1172) * C1160) *
                       C48138 * C108) *
                      C47935 * C1158 +
                  (((C113 * C1164 + C48121 * C1173) * C1160 +
                    (C113 * C1174 + C48121 * C1182) * C47871) *
                       C48138 * C108 +
                   ((C113 * C1165 + C48121 * C1175) * C1160 +
                    (C113 * C1176 + C48121 * C1183) * C47871) *
                       C48138 * C109 +
                   ((C113 * C1166 + C48121 * C1177) * C1160 +
                    (C113 * C1178 + C48121 * C1184) * C47871) *
                       C48138 * C110) *
                      C47935 * C1159)) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C46996 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47876 -
            (C4818 + C4819) * C46992 - (C4820 + C4821) * C47884 +
            (C4822 + C4823) * C47002 + (C4824 + C4825) * C2901) *
               C48138 * C4781 +
           ((C4819 + C4818) * C46996 + (C4821 + C4820) * C47876 -
            (C4823 + C4822) * C46992 - (C4825 + C4824) * C47884 +
            (C4827 + C4826) * C47002 + (C4829 + C4828) * C2901) *
               C48138 * C48232) *
              C47935 * C47978 +
          (((C5012 + C5013) * C46992 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47876 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C46996) +
            (C5014 + C5015) * C47884 - (C5016 + C5017) * C47002 -
            (C5018 + C5019) * C2901) *
               C48138 * C4781 +
           ((C5017 + C5016) * C46992 -
            ((C5015 + C5014) * C47876 + (C5013 + C5012) * C46996) +
            (C5019 + C5018) * C47884 - (C5361 + C5360) * C47002 -
            (C5363 + C5362) * C2901) *
               C48138 * C48232) *
              C47935 * C47985 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C46996 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C47876 -
            (C5020 + C5021) * C46992 - (C5022 + C5023) * C47884 +
            (C5024 + C5025) * C47002 + (C5026 + C5027) * C2901) *
               C48138 * C4781 +
           ((C5021 + C5020) * C46996 + (C5023 + C5022) * C47876 -
            (C5025 + C5024) * C46992 - (C5027 + C5026) * C47884 +
            (C4783 * C304 + C4779 * C322 + C4784 * C1437 + C48253 * C1438) *
                C47002 +
            (C4783 * C323 + C4779 * C334 + C4784 * C1439 + C48253 * C1440) *
                C2901) *
               C48138 * C48232) *
              C47935 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C2641 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C2635 -
             (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
                C48138 * C4781 +
            ((C4819 + C4818) * C2641 + (C4821 + C4820) * C2635 -
             (C4823 + C4822) * C2642 - (C4825 + C4824) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C5206 + C5207) * C2642 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C2635 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C2641) +
             (C5208 + C5209) * C47881) *
                C48138 * C4781 +
            ((C5211 + C5210) * C2642 -
             ((C5209 + C5208) * C2635 + (C5207 + C5206) * C2641) +
             (C5213 + C5212) * C47881) *
                C48138 * C48232) *
               C48022) *
              C47978 +
          ((((C5012 + C5013) * C2642 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C2635 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C2641) +
             (C5014 + C5015) * C47881) *
                C48138 * C4781 +
            ((C5017 + C5016) * C2642 -
             ((C5015 + C5014) * C2635 + (C5013 + C5012) * C2641) +
             (C5019 + C5018) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C2641 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C2635 -
             (C5716 + C5717) * C2642 - (C5718 + C5719) * C47881) *
                C48138 * C4781 +
            ((C5717 + C5716) * C2641 + (C5719 + C5718) * C2635 -
             (C5721 + C5720) * C2642 - (C5723 + C5722) * C47881) *
                C48138 * C48232) *
               C48022) *
              C47985 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C2641 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C2635 -
             (C5020 + C5021) * C2642 - (C5022 + C5023) * C47881) *
                C48138 * C4781 +
            ((C5021 + C5020) * C2641 + (C5023 + C5022) * C2635 -
             (C5025 + C5024) * C2642 - (C5027 + C5026) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C6458 + C6459) * C2642 -
             ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                  C2635 +
              (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                  C2641) +
             (C6460 + C6461) * C47881) *
                C48138 * C4781 +
            ((C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                 C2642 -
             ((C6461 + C6460) * C2635 + (C6459 + C6458) * C2641) +
             (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2641 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C2635 -
            (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
               C48138 * C4781 +
           ((C4819 + C4818) * C2641 + (C4821 + C4820) * C2635 -
            (C4823 + C4822) * C2642 - (C4825 + C4824) * C47881) *
               C48138 * C48232) *
              C47935 * C48281 +
          (((C5012 + C5013) * C2642 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C2635 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C2641) +
            (C5014 + C5015) * C47881) *
               C48138 * C4781 +
           ((C5017 + C5016) * C2642 -
            ((C5015 + C5014) * C2635 + (C5013 + C5012) * C2641) +
            (C5019 + C5018) * C47881) *
               C48138 * C48232) *
              C47935 * C48277 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C2641 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C2635 -
            (C5020 + C5021) * C2642 - (C5022 + C5023) * C47881) *
               C48138 * C4781 +
           ((C5021 + C5020) * C2641 + (C5023 + C5022) * C2635 -
            (C5025 + C5024) * C2642 - (C5027 + C5026) * C47881) *
               C48138 * C48232) *
              C47935 * C48267 +
          (((C6252 + C6253) * C2642 -
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C2635 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C2641) +
            (C6254 + C6255) * C47881) *
               C48138 * C4781 +
           ((C4783 * C1161 + C4779 * C1168 + C4784 * C1166 + C48253 * C1177) *
                C2642 -
            ((C6255 + C6254) * C2635 + (C6253 + C6252) * C2641) +
            (C4783 * C1167 + C4779 * C1179 + C4784 * C1178 + C48253 * C1184) *
                C47881) *
               C48138 * C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2533 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48280 -
            (C4818 + C4819) * C2534 - (C4820 + C4821) * C48273 +
            (C4822 + C4823) * C2535 + (C4824 + C4825) * C48260 -
            (C4826 + C4827) * C2536 - (C4828 + C4829) * C48239) *
               C48138 * C4781 +
           ((C4819 + C4818) * C2533 + (C4821 + C4820) * C48280 -
            (C4823 + C4822) * C2534 - (C4825 + C4824) * C48273 +
            (C4827 + C4826) * C2535 + (C4829 + C4828) * C48260 -
            (C4831 + C4830) * C2536 - (C4833 + C4832) * C48239) *
               C48138 * C48232) *
              C47935 * C2531 +
          (((C5012 + C5013) * C2534 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48280 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C2533) +
            (C5014 + C5015) * C48273 - (C5016 + C5017) * C2535 -
            (C5018 + C5019) * C48260 + (C5360 + C5361) * C2536 +
            (C5362 + C5363) * C48239) *
               C48138 * C4781 +
           ((C5017 + C5016) * C2534 -
            ((C5015 + C5014) * C48280 + (C5013 + C5012) * C2533) +
            (C5019 + C5018) * C48273 - (C5361 + C5360) * C2535 -
            (C5363 + C5362) * C48260 +
            (C4783 * C300 + C4779 * C314 + C4784 * C305 + C48253 * C324) *
                C2536 +
            (C4783 * C315 + C4779 * C330 + C4784 * C325 + C48253 * C335) *
                C48239) *
               C48138 * C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C2641 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C2635 -
             (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
                C48138 * C4781 +
            ((C4819 + C4818) * C2641 + (C4821 + C4820) * C2635 -
             (C4823 + C4822) * C2642 - (C4825 + C4824) * C47881) *
                C48138 * C48232) *
               C48275 +
           (((C5206 + C5207) * C2642 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C2635 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C2641) +
             (C5208 + C5209) * C47881) *
                C48138 * C4781 +
            ((C5211 + C5210) * C2642 -
             ((C5209 + C5208) * C2635 + (C5207 + C5206) * C2641) +
             (C5213 + C5212) * C47881) *
                C48138 * C48232) *
               C48264 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C2641 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C2635 -
             (C5214 + C5215) * C2642 - (C5216 + C5217) * C47881) *
                C48138 * C4781 +
            ((C5215 + C5214) * C2641 + (C5217 + C5216) * C2635 -
             (C5219 + C5218) * C2642 - (C5221 + C5220) * C47881) *
                C48138 * C48232) *
               C48238) *
              C2531 +
          ((((C5012 + C5013) * C2642 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C2635 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C2641) +
             (C5014 + C5015) * C47881) *
                C48138 * C4781 +
            ((C5017 + C5016) * C2642 -
             ((C5015 + C5014) * C2635 + (C5013 + C5012) * C2641) +
             (C5019 + C5018) * C47881) *
                C48138 * C48232) *
               C48275 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C2641 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C2635 -
             (C5716 + C5717) * C2642 - (C5718 + C5719) * C47881) *
                C48138 * C4781 +
            ((C5717 + C5716) * C2641 + (C5719 + C5718) * C2635 -
             (C5721 + C5720) * C2642 - (C5723 + C5722) * C47881) *
                C48138 * C48232) *
               C48264 +
           (((C7184 + C7185) * C2642 -
             ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                  C2635 +
              (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                  C2641) +
             (C7186 + C7187) * C47881) *
                C48138 * C4781 +
            ((C4783 * C1295 + C4779 * C1305 + C4784 * C1303 + C48253 * C1320) *
                 C2642 -
             ((C7187 + C7186) * C2635 + (C7185 + C7184) * C2641) +
             (C4783 * C1304 + C4779 * C1322 + C4784 * C1321 + C48253 * C1330) *
                 C47881) *
                C48138 * C48232) *
               C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46996 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47876 -
             (C4818 + C4819) * C46992 - (C4820 + C4821) * C47884 +
             (C4822 + C4823) * C47002 + (C4824 + C4825) * C2901) *
                C48138 * C4781 +
            ((C4819 + C4818) * C46996 + (C4821 + C4820) * C47876 -
             (C4823 + C4822) * C46992 - (C4825 + C4824) * C47884 +
             (C4827 + C4826) * C47002 + (C4829 + C4828) * C2901) *
                C48138 * C48232) *
               C48204 +
           (((C5206 + C5207) * C46992 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C47876 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C46996) +
             (C5208 + C5209) * C47884 - (C5210 + C5211) * C47002 -
             (C5212 + C5213) * C2901) *
                C48138 * C4781 +
            ((C5211 + C5210) * C46992 -
             ((C5209 + C5208) * C47876 + (C5207 + C5206) * C46996) +
             (C5213 + C5212) * C47884 - (C5503 + C5502) * C47002 -
             (C5505 + C5504) * C2901) *
                C48138 * C48232) *
               C48022) *
              C2531 +
          ((((C5012 + C5013) * C46992 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C47876 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46996) +
             (C5014 + C5015) * C47884 - (C5016 + C5017) * C47002 -
             (C5018 + C5019) * C2901) *
                C48138 * C4781 +
            ((C5017 + C5016) * C46992 -
             ((C5015 + C5014) * C47876 + (C5013 + C5012) * C46996) +
             (C5019 + C5018) * C47884 - (C5361 + C5360) * C47002 -
             (C5363 + C5362) * C2901) *
                C48138 * C48232) *
               C48204 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C46996 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47876 -
             (C5716 + C5717) * C46992 - (C5718 + C5719) * C47884 +
             (C5720 + C5721) * C47002 + (C5722 + C5723) * C2901) *
                C48138 * C4781 +
            ((C5717 + C5716) * C46996 + (C5719 + C5718) * C47876 -
             (C5721 + C5720) * C46992 - (C5723 + C5722) * C47884 +
             (C4783 * C938 + C4779 * C946 + C4784 * C1599 + C48253 * C1600) *
                 C47002 +
             (C4783 * C947 + C4779 * C953 + C4784 * C1601 + C48253 * C1602) *
                 C2901) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2533 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48280 -
            (C4818 + C4819) * C2534 - (C4820 + C4821) * C48273 +
            (C4822 + C4823) * C2535 + (C4824 + C4825) * C48260 -
            (C4826 + C4827) * C2536 - (C4828 + C4829) * C48239) *
               C48138 * C4781 +
           ((C4819 + C4818) * C2533 + (C4821 + C4820) * C48280 -
            (C4823 + C4822) * C2534 - (C4825 + C4824) * C48273 +
            (C4827 + C4826) * C2535 + (C4829 + C4828) * C48260 -
            (C4831 + C4830) * C2536 - (C4833 + C4832) * C48239) *
               C48138 * C48232) *
              C47935 * C2531 +
          (((C5012 + C5013) * C2534 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48280 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C2533) +
            (C5014 + C5015) * C48273 - (C5016 + C5017) * C2535 -
            (C5018 + C5019) * C48260 + (C5360 + C5361) * C2536 +
            (C5362 + C5363) * C48239) *
               C48138 * C4781 +
           ((C5017 + C5016) * C2534 -
            ((C5015 + C5014) * C48280 + (C5013 + C5012) * C2533) +
            (C5019 + C5018) * C48273 - (C5361 + C5360) * C2535 -
            (C5363 + C5362) * C48260 +
            (C4783 * C300 + C4779 * C314 + C4784 * C305 + C48253 * C324) *
                C2536 +
            (C4783 * C315 + C4779 * C330 + C4784 * C325 + C48253 * C335) *
                C48239) *
               C48138 * C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2641 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C2635 -
            (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
               C48138 * C4781 +
           ((C4819 + C4818) * C2641 + (C4821 + C4820) * C2635 -
            (C4823 + C4822) * C2642 - (C4825 + C4824) * C47881) *
               C48138 * C48232) *
              C47935 * C48281 +
          (((C5012 + C5013) * C2642 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C2635 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C2641) +
            (C5014 + C5015) * C47881) *
               C48138 * C4781 +
           ((C5017 + C5016) * C2642 -
            ((C5015 + C5014) * C2635 + (C5013 + C5012) * C2641) +
            (C5019 + C5018) * C47881) *
               C48138 * C48232) *
              C47935 * C48277 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C2641 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C2635 -
            (C5020 + C5021) * C2642 - (C5022 + C5023) * C47881) *
               C48138 * C4781 +
           ((C5021 + C5020) * C2641 + (C5023 + C5022) * C2635 -
            (C5025 + C5024) * C2642 - (C5027 + C5026) * C47881) *
               C48138 * C48232) *
              C47935 * C48267 +
          (((C6252 + C6253) * C2642 -
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C2635 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C2641) +
            (C6254 + C6255) * C47881) *
               C48138 * C4781 +
           ((C4783 * C1161 + C4779 * C1168 + C4784 * C1166 + C48253 * C1177) *
                C2642 -
            ((C6255 + C6254) * C2635 + (C6253 + C6252) * C2641) +
            (C4783 * C1167 + C4779 * C1179 + C4784 * C1178 + C48253 * C1184) *
                C47881) *
               C48138 * C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46986 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48186 -
             (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
                C48138 * C4781 +
            ((C4819 + C4818) * C46986 + (C4821 + C4820) * C48186 -
             (C4823 + C4822) * C46967 - (C4825 + C4824) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C5206 + C5207) * C46967 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C48186 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C46986) +
             (C5208 + C5209) * C47881) *
                C48138 * C4781 +
            ((C5211 + C5210) * C46967 -
             ((C5209 + C5208) * C48186 + (C5207 + C5206) * C46986) +
             (C5213 + C5212) * C47881) *
                C48138 * C48232) *
               C48022) *
              C47978 +
          ((((C5012 + C5013) * C46967 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48186 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46986) +
             (C5014 + C5015) * C47881) *
                C48138 * C4781 +
            ((C5017 + C5016) * C46967 -
             ((C5015 + C5014) * C48186 + (C5013 + C5012) * C46986) +
             (C5019 + C5018) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C46986 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C48186 -
             (C5716 + C5717) * C46967 - (C5718 + C5719) * C47881) *
                C48138 * C4781 +
            ((C5717 + C5716) * C46986 + (C5719 + C5718) * C48186 -
             (C5721 + C5720) * C46967 - (C5723 + C5722) * C47881) *
                C48138 * C48232) *
               C48022) *
              C47985 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C46986 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C48186 -
             (C5020 + C5021) * C46967 - (C5022 + C5023) * C47881) *
                C48138 * C4781 +
            ((C5021 + C5020) * C46986 + (C5023 + C5022) * C48186 -
             (C5025 + C5024) * C46967 - (C5027 + C5026) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C6458 + C6459) * C46967 -
             ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                  C48186 +
              (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                  C46986) +
             (C6460 + C6461) * C47881) *
                C48138 * C4781 +
            ((C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                 C46967 -
             ((C6461 + C6460) * C48186 + (C6459 + C6458) * C46986) +
             (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C48018 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C48025 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C1160 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C4781 +
            ((C5215 + C5214) * C1160 + (C5217 + C5216) * C47871) * C48138 *
                C48232) *
               C3806) *
              C47978 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C48025 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C48018 -
           (((C7187 + C7186) * C47871 + (C7185 + C7184) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                 C47871 +
             (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                 C1160) *
                C48138 * C4781) *
               C3806) *
              C47985 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C4781 +
            ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
                C48232) *
               C48018 -
           (((C6461 + C6460) * C47871 + (C6459 + C6458) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                 C47871 +
             (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                 C1160) *
                C48138 * C4781) *
               C48025 +
           (((C4783 * C1301 + C4779 * C1316 + C4784 * C6105 + C48253 * C6107) *
                 C1160 +
             (C4783 * C1317 + C4779 * C1328 + C4784 * C6108 + C48253 * C6111) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C1160 +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47871) *
                C48138 * C48232) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C3298 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C48022) *
              C48281 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C48022 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C3298) *
              C48277 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C4781 +
            ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
                C48232) *
               C3298 -
           (((C6461 + C6460) * C47871 + (C6459 + C6458) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                 C47871 +
             (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                 C1160) *
                C48138 * C4781) *
               C48022) *
              C48267 +
          ((((C4783 * C1713 + C4779 * C1716 + C4784 * C6591 + C48253 * C6593) *
                 C1160 +
             (C4783 * C1717 + C4779 * C1722 + C4784 * C6594 + C48253 * C6597) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C1714 + C4779 * C1718 + C4784 * C6592 + C48253 * C6595) *
                 C1160 +
             (C4783 * C1719 + C4779 * C1723 + C4784 * C6596 + C48253 * C6598) *
                 C47871) *
                C48138 * C48232) *
               C48022 -
           (((C6255 + C6254) * C47871 + (C6253 + C6252) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C47871 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C1160) *
                C48138 * C4781) *
               C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1089 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48271 -
             (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
             (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1089 + (C4821 + C4820) * C48271 -
             (C4823 + C4822) * C1090 - (C4825 + C4824) * C48258 +
             (C4827 + C4826) * C1091 + (C4829 + C4828) * C48227) *
                C48138 * C48232) *
               C3298 +
           (((C5206 + C5207) * C1090 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C48271 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C1089) +
             (C5208 + C5209) * C48258 - (C5210 + C5211) * C1091 -
             (C5212 + C5213) * C48227) *
                C48138 * C4781 +
            ((C5211 + C5210) * C1090 -
             ((C5209 + C5208) * C48271 + (C5207 + C5206) * C1089) +
             (C5213 + C5212) * C48258 - (C5503 + C5502) * C1091 -
             (C5505 + C5504) * C48227) *
                C48138 * C48232) *
               C48022) *
              C2531 +
          ((((C5012 + C5013) * C1090 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48271 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C1089) +
             (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
             (C5018 + C5019) * C48227) *
                C48138 * C4781 +
            ((C5017 + C5016) * C1090 -
             ((C5015 + C5014) * C48271 + (C5013 + C5012) * C1089) +
             (C5019 + C5018) * C48258 - (C5361 + C5360) * C1091 -
             (C5363 + C5362) * C48227) *
                C48138 * C48232) *
               C3298 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1089 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C48271 -
             (C5716 + C5717) * C1090 - (C5718 + C5719) * C48258 +
             (C5720 + C5721) * C1091 + (C5722 + C5723) * C48227) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1089 + (C5719 + C5718) * C48271 -
             (C5721 + C5720) * C1090 - (C5723 + C5722) * C48258 +
             (C4783 * C938 + C4779 * C946 + C4784 * C1599 + C48253 * C1600) *
                 C1091 +
             (C4783 * C947 + C4779 * C953 + C4784 * C1601 + C48253 * C1602) *
                 C48227) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C48282 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C48279 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C1160 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C4781 +
            ((C5215 + C5214) * C1160 + (C5217 + C5216) * C47871) * C48138 *
                C48232) *
               C48270 -
           (((C7329 + C7328) * C47871 + (C7327 + C7326) * C1160) * C48138 *
                C48232 +
            ((C4784 * C2421 + C48253 * C2426 + C4783 * C2025 + C4779 * C2035) *
                 C47871 +
             (C4784 * C2417 + C48253 * C2420 + C4783 * C2017 + C4779 * C2026) *
                 C1160) *
                C48138 * C4781) *
               C48251) *
              C2531 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C48279 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C48282 -
           (((C7187 + C7186) * C47871 + (C7185 + C7184) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                 C47871 +
             (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                 C1160) *
                C48138 * C4781) *
               C48270 +
           (((C4783 * C2417 + C4779 * C2420 + C4784 * C7459 + C48253 * C7461) *
                 C1160 +
             (C4783 * C2421 + C4779 * C2426 + C4784 * C7462 + C48253 * C7465) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C2418 + C4779 * C2422 + C4784 * C7460 + C48253 * C7463) *
                 C1160 +
             (C4783 * C2423 + C4779 * C2427 + C4784 * C7464 + C48253 * C7466) *
                 C47871) *
                C48138 * C48232) *
               C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46986 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48186 -
             (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
                C48138 * C4781 +
            ((C4819 + C4818) * C46986 + (C4821 + C4820) * C48186 -
             (C4823 + C4822) * C46967 - (C4825 + C4824) * C47881) *
                C48138 * C48232) *
               C48018 +
           (((C5206 + C5207) * C46967 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C48186 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C46986) +
             (C5208 + C5209) * C47881) *
                C48138 * C4781 +
            ((C5211 + C5210) * C46967 -
             ((C5209 + C5208) * C48186 + (C5207 + C5206) * C46986) +
             (C5213 + C5212) * C47881) *
                C48138 * C48232) *
               C48025 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C46986 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C48186 -
             (C5214 + C5215) * C46967 - (C5216 + C5217) * C47881) *
                C48138 * C4781 +
            ((C5215 + C5214) * C46986 + (C5217 + C5216) * C48186 -
             (C5219 + C5218) * C46967 - (C5221 + C5220) * C47881) *
                C48138 * C48232) *
               C3806) *
              C2531 +
          ((((C5012 + C5013) * C46967 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48186 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46986) +
             (C5014 + C5015) * C47881) *
                C48138 * C4781 +
            ((C5017 + C5016) * C46967 -
             ((C5015 + C5014) * C48186 + (C5013 + C5012) * C46986) +
             (C5019 + C5018) * C47881) *
                C48138 * C48232) *
               C48018 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C46986 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C48186 -
             (C5716 + C5717) * C46967 - (C5718 + C5719) * C47881) *
                C48138 * C4781 +
            ((C5717 + C5716) * C46986 + (C5719 + C5718) * C48186 -
             (C5721 + C5720) * C46967 - (C5723 + C5722) * C47881) *
                C48138 * C48232) *
               C48025 +
           (((C7184 + C7185) * C46967 -
             ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                  C48186 +
              (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                  C46986) +
             (C7186 + C7187) * C47881) *
                C48138 * C4781 +
            ((C4783 * C1295 + C4779 * C1305 + C4784 * C1303 + C48253 * C1320) *
                 C46967 -
             ((C7187 + C7186) * C48186 + (C7185 + C7184) * C46986) +
             (C4783 * C1304 + C4779 * C1322 + C4784 * C1321 + C48253 * C1330) *
                 C47881) *
                C48138 * C48232) *
               C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1089 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48271 -
             (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
             (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1089 + (C4821 + C4820) * C48271 -
             (C4823 + C4822) * C1090 - (C4825 + C4824) * C48258 +
             (C4827 + C4826) * C1091 + (C4829 + C4828) * C48227) *
                C48138 * C48232) *
               C3298 +
           (((C5206 + C5207) * C1090 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C48271 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C1089) +
             (C5208 + C5209) * C48258 - (C5210 + C5211) * C1091 -
             (C5212 + C5213) * C48227) *
                C48138 * C4781 +
            ((C5211 + C5210) * C1090 -
             ((C5209 + C5208) * C48271 + (C5207 + C5206) * C1089) +
             (C5213 + C5212) * C48258 - (C5503 + C5502) * C1091 -
             (C5505 + C5504) * C48227) *
                C48138 * C48232) *
               C48022) *
              C2531 +
          ((((C5012 + C5013) * C1090 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48271 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C1089) +
             (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
             (C5018 + C5019) * C48227) *
                C48138 * C4781 +
            ((C5017 + C5016) * C1090 -
             ((C5015 + C5014) * C48271 + (C5013 + C5012) * C1089) +
             (C5019 + C5018) * C48258 - (C5361 + C5360) * C1091 -
             (C5363 + C5362) * C48227) *
                C48138 * C48232) *
               C3298 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1089 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C48271 -
             (C5716 + C5717) * C1090 - (C5718 + C5719) * C48258 +
             (C5720 + C5721) * C1091 + (C5722 + C5723) * C48227) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1089 + (C5719 + C5718) * C48271 -
             (C5721 + C5720) * C1090 - (C5723 + C5722) * C48258 +
             (C4783 * C938 + C4779 * C946 + C4784 * C1599 + C48253 * C1600) *
                 C1091 +
             (C4783 * C947 + C4779 * C953 + C4784 * C1601 + C48253 * C1602) *
                 C48227) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C3298 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C48022) *
              C48281 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C48022 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C3298) *
              C48277 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C4781 +
            ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
                C48232) *
               C3298 -
           (((C6461 + C6460) * C47871 + (C6459 + C6458) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                 C47871 +
             (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                 C1160) *
                C48138 * C4781) *
               C48022) *
              C48267 +
          ((((C4783 * C1713 + C4779 * C1716 + C4784 * C6591 + C48253 * C6593) *
                 C1160 +
             (C4783 * C1717 + C4779 * C1722 + C4784 * C6594 + C48253 * C6597) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C1714 + C4779 * C1718 + C4784 * C6592 + C48253 * C6595) *
                 C1160 +
             (C4783 * C1719 + C4779 * C1723 + C4784 * C6596 + C48253 * C6598) *
                 C47871) *
                C48138 * C48232) *
               C48022 -
           (((C6255 + C6254) * C47871 + (C6253 + C6252) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C47871 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C1160) *
                C48138 * C4781) *
               C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C46986 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48186 -
            (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
               C48138 * C4781 +
           ((C4819 + C4818) * C46986 + (C4821 + C4820) * C48186 -
            (C4823 + C4822) * C46967 - (C4825 + C4824) * C47881) *
               C48138 * C48232) *
              C47935 * C1431 +
          (((C5012 + C5013) * C46967 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48186 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C46986) +
            (C5014 + C5015) * C47881) *
               C48138 * C4781 +
           ((C5017 + C5016) * C46967 -
            ((C5015 + C5014) * C48186 + (C5013 + C5012) * C46986) +
            (C5019 + C5018) * C47881) *
               C48138 * C48232) *
              C47935 * C1432 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C46986 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48186 -
            (C5020 + C5021) * C46967 - (C5022 + C5023) * C47881) *
               C48138 * C4781 +
           ((C5021 + C5020) * C46986 + (C5023 + C5022) * C48186 -
            (C5025 + C5024) * C46967 - (C5027 + C5026) * C47881) *
               C48138 * C48232) *
              C47935 * C1433 +
          (((C6252 + C6253) * C46967 -
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C48186 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C46986) +
            (C6254 + C6255) * C47881) *
               C48138 * C4781 +
           ((C4783 * C1161 + C4779 * C1168 + C4784 * C1166 + C48253 * C1177) *
                C46967 -
            ((C6255 + C6254) * C48186 + (C6253 + C6252) * C46986) +
            (C4783 * C1167 + C4779 * C1179 + C4784 * C1178 + C48253 * C1184) *
                C47881) *
               C48138 * C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C665 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C659 -
            (C4818 + C4819) * C666 - (C4820 + C4821) * C660 +
            (C4822 + C4823) * C667 + (C4824 + C4825) * C661 -
            (C4826 + C4827) * C668 - (C4828 + C4829) * C48239) *
               C48138 * C4781 +
           ((C4819 + C4818) * C665 + (C4821 + C4820) * C659 -
            (C4823 + C4822) * C666 - (C4825 + C4824) * C660 +
            (C4827 + C4826) * C667 + (C4829 + C4828) * C661 -
            (C4831 + C4830) * C668 - (C4833 + C4832) * C48239) *
               C48138 * C48232) *
              C47935 * C48203 +
          (((C5012 + C5013) * C666 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C659 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C665) +
            (C5014 + C5015) * C660 - (C5016 + C5017) * C667 -
            (C5018 + C5019) * C661 + (C5360 + C5361) * C668 +
            (C5362 + C5363) * C48239) *
               C48138 * C4781 +
           ((C5017 + C5016) * C666 -
            ((C5015 + C5014) * C659 + (C5013 + C5012) * C665) +
            (C5019 + C5018) * C660 - (C5361 + C5360) * C667 -
            (C5363 + C5362) * C661 +
            (C4783 * C300 + C4779 * C314 + C4784 * C305 + C48253 * C324) *
                C668 +
            (C4783 * C315 + C4779 * C330 + C4784 * C325 + C48253 * C335) *
                C48239) *
               C48138 * C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46986 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48186 -
             (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
                C48138 * C4781 +
            ((C4819 + C4818) * C46986 + (C4821 + C4820) * C48186 -
             (C4823 + C4822) * C46967 - (C4825 + C4824) * C47881) *
                C48138 * C48232) *
               C1835 +
           (((C5206 + C5207) * C46967 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C48186 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C46986) +
             (C5208 + C5209) * C47881) *
                C48138 * C4781 +
            ((C5211 + C5210) * C46967 -
             ((C5209 + C5208) * C48186 + (C5207 + C5206) * C46986) +
             (C5213 + C5212) * C47881) *
                C48138 * C48232) *
               C1836 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C46986 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C48186 -
             (C5214 + C5215) * C46967 - (C5216 + C5217) * C47881) *
                C48138 * C4781 +
            ((C5215 + C5214) * C46986 + (C5217 + C5216) * C48186 -
             (C5219 + C5218) * C46967 - (C5221 + C5220) * C47881) *
                C48138 * C48232) *
               C48238) *
              C48203 +
          ((((C5012 + C5013) * C46967 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48186 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46986) +
             (C5014 + C5015) * C47881) *
                C48138 * C4781 +
            ((C5017 + C5016) * C46967 -
             ((C5015 + C5014) * C48186 + (C5013 + C5012) * C46986) +
             (C5019 + C5018) * C47881) *
                C48138 * C48232) *
               C1835 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C46986 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C48186 -
             (C5716 + C5717) * C46967 - (C5718 + C5719) * C47881) *
                C48138 * C4781 +
            ((C5717 + C5716) * C46986 + (C5719 + C5718) * C48186 -
             (C5721 + C5720) * C46967 - (C5723 + C5722) * C47881) *
                C48138 * C48232) *
               C1836 +
           (((C7184 + C7185) * C46967 -
             ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                  C48186 +
              (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                  C46986) +
             (C7186 + C7187) * C47881) *
                C48138 * C4781 +
            ((C4783 * C1295 + C4779 * C1305 + C4784 * C1303 + C48253 * C1320) *
                 C46967 -
             ((C7187 + C7186) * C48186 + (C7185 + C7184) * C46986) +
             (C4783 * C1304 + C4779 * C1322 + C4784 * C1321 + C48253 * C1330) *
                 C47881) *
                C48138 * C48232) *
               C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C48204 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C48022) *
              C1431 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C48022 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C48204) *
              C1432 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C4781 +
            ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
                C48232) *
               C48204 -
           (((C6461 + C6460) * C47871 + (C6459 + C6458) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                 C47871 +
             (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                 C1160) *
                C48138 * C4781) *
               C48022) *
              C1433 +
          ((((C4783 * C1713 + C4779 * C1716 + C4784 * C6591 + C48253 * C6593) *
                 C1160 +
             (C4783 * C1717 + C4779 * C1722 + C4784 * C6594 + C48253 * C6597) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C1714 + C4779 * C1718 + C4784 * C6592 + C48253 * C6595) *
                 C1160 +
             (C4783 * C1719 + C4779 * C1723 + C4784 * C6596 + C48253 * C6598) *
                 C47871) *
                C48138 * C48232) *
               C48022 -
           (((C6255 + C6254) * C47871 + (C6253 + C6252) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C47871 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C1160) *
                C48138 * C4781) *
               C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C293 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C287 -
             (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
             (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
                C48138 * C4781 +
            ((C4819 + C4818) * C293 + (C4821 + C4820) * C287 -
             (C4823 + C4822) * C294 - (C4825 + C4824) * C288 +
             (C4827 + C4826) * C295 + (C4829 + C4828) * C48227) *
                C48138 * C48232) *
               C48204 +
           (((C5206 + C5207) * C294 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C287 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C293) +
             (C5208 + C5209) * C288 - (C5210 + C5211) * C295 -
             (C5212 + C5213) * C48227) *
                C48138 * C4781 +
            ((C5211 + C5210) * C294 -
             ((C5209 + C5208) * C287 + (C5207 + C5206) * C293) +
             (C5213 + C5212) * C288 - (C5503 + C5502) * C295 -
             (C5505 + C5504) * C48227) *
                C48138 * C48232) *
               C48022) *
              C48203 +
          ((((C5012 + C5013) * C294 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C287 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C293) +
             (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
             (C5018 + C5019) * C48227) *
                C48138 * C4781 +
            ((C5017 + C5016) * C294 -
             ((C5015 + C5014) * C287 + (C5013 + C5012) * C293) +
             (C5019 + C5018) * C288 - (C5361 + C5360) * C295 -
             (C5363 + C5362) * C48227) *
                C48138 * C48232) *
               C48204 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C293 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C287 -
             (C5716 + C5717) * C294 - (C5718 + C5719) * C288 +
             (C5720 + C5721) * C295 + (C5722 + C5723) * C48227) *
                C48138 * C4781 +
            ((C5717 + C5716) * C293 + (C5719 + C5718) * C287 -
             (C5721 + C5720) * C294 - (C5723 + C5722) * C288 +
             (C4783 * C938 + C4779 * C946 + C4784 * C1599 + C48253 * C1600) *
                 C295 +
             (C4783 * C947 + C4779 * C953 + C4784 * C1601 + C48253 * C1602) *
                 C48227) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C2299 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C2300 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C1160 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C4781 +
            ((C5215 + C5214) * C1160 + (C5217 + C5216) * C47871) * C48138 *
                C48232) *
               C2301 -
           (((C7329 + C7328) * C47871 + (C7327 + C7326) * C1160) * C48138 *
                C48232 +
            ((C4784 * C2421 + C48253 * C2426 + C4783 * C2025 + C4779 * C2035) *
                 C47871 +
             (C4784 * C2417 + C48253 * C2420 + C4783 * C2017 + C4779 * C2026) *
                 C1160) *
                C48138 * C4781) *
               C48251) *
              C48203 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C2300 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C2299 -
           (((C7187 + C7186) * C47871 + (C7185 + C7184) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                 C47871 +
             (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                 C1160) *
                C48138 * C4781) *
               C2301 +
           (((C4783 * C2417 + C4779 * C2420 + C4784 * C7459 + C48253 * C7461) *
                 C1160 +
             (C4783 * C2421 + C4779 * C2426 + C4784 * C7462 + C48253 * C7465) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C2418 + C4779 * C2422 + C4784 * C7460 + C48253 * C7463) *
                 C1160 +
             (C4783 * C2423 + C4779 * C2427 + C4784 * C7464 + C48253 * C7466) *
                 C47871) *
                C48138 * C48232) *
               C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                   C114 +
               (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                   C102 -
               (C4818 + C4819) * C115 - (C4820 + C4821) * C103 +
               (C4822 + C4823) * C116 + (C4824 + C4825) * C104 -
               (C4826 + C4827) * C117 - (C4828 + C4829) * C105 +
               (C4830 + C4831) * C118 + (C4832 + C4833) * C106) *
                  C48138 * C4781 +
              ((C4819 + C4818) * C114 + (C4821 + C4820) * C102 -
               (C4823 + C4822) * C115 - (C4825 + C4824) * C103 +
               (C4827 + C4826) * C116 + (C4829 + C4828) * C104 -
               (C4831 + C4830) * C117 - (C4833 + C4832) * C105 +
               (C4783 * C124 + C4779 * C136 + C4784 * C669 + C48253 * C670) *
                   C118 +
               (C4783 * C137 + C4779 * C145 + C4784 * C671 + C48253 * C672) *
                   C106) *
                  C48138 * C48232) *
             C47935 * C47923 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                    C293 +
                (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                    C287 -
                (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
                (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
                   C48138 * C4781 +
               ((C4819 + C4818) * C293 + (C4821 + C4820) * C287 -
                (C4823 + C4822) * C294 - (C4825 + C4824) * C288 +
                (C4827 + C4826) * C295 + (C4829 + C4828) * C48227) *
                   C48138 * C48232) *
                  C47935 * C48274 +
              (((C5012 + C5013) * C294 -
                ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                     C287 +
                 (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                     C293) +
                (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
                (C5018 + C5019) * C48227) *
                   C48138 * C4781 +
               ((C5017 + C5016) * C294 -
                ((C5015 + C5014) * C287 + (C5013 + C5012) * C293) +
                (C5019 + C5018) * C288 -
                (C4784 * C304 + C48253 * C322 + C4783 * C299 + C4779 * C312) *
                    C295 -
                (C4784 * C323 + C48253 * C334 + C4783 * C313 + C4779 * C329) *
                    C48227) *
                   C48138 * C48232) *
                  C47935 * C48262 +
              (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                    C293 +
                (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                    C287 -
                (C5020 + C5021) * C294 - (C5022 + C5023) * C288 +
                (C5024 + C5025) * C295 + (C5026 + C5027) * C48227) *
                   C48138 * C4781 +
               ((C5021 + C5020) * C293 + (C5023 + C5022) * C287 -
                (C5025 + C5024) * C294 - (C5027 + C5026) * C288 +
                (C4783 * C304 + C4779 * C322 + C4784 * C1437 + C48253 * C1438) *
                    C295 +
                (C4783 * C323 + C4779 * C334 + C4784 * C1439 + C48253 * C1440) *
                    C48227) *
                   C48138 * C48232) *
                  C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C293 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C287 -
            (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
            (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C293 + (C4821 + C4820) * C287 -
            (C4823 + C4822) * C294 - (C4825 + C4824) * C288 +
            (C4827 + C4826) * C295 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C48275 +
          (((C5206 + C5207) * C294 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C287 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C293) +
            (C5208 + C5209) * C288 - (C5210 + C5211) * C295 -
            (C5212 + C5213) * C48227) *
               C48138 * C4781 +
           ((C5211 + C5210) * C294 -
            ((C5209 + C5208) * C287 + (C5207 + C5206) * C293) +
            (C5213 + C5212) * C288 -
            (C4784 * C938 + C48253 * C946 + C4783 * C488 + C4779 * C501) *
                C295 -
            (C4784 * C947 + C48253 * C953 + C4783 * C502 + C4779 * C518) *
                C48227) *
               C48138 * C48232) *
              C48264 +
          (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                C293 +
            (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                C287 -
            (C5214 + C5215) * C294 - (C5216 + C5217) * C288 +
            (C5218 + C5219) * C295 + (C5220 + C5221) * C48227) *
               C48138 * C4781 +
           ((C5215 + C5214) * C293 + (C5217 + C5216) * C287 -
            (C5219 + C5218) * C294 - (C5221 + C5220) * C288 +
            (C4783 * C493 + C4779 * C511 + C4784 * C2185 + C48253 * C2186) *
                C295 +
            (C4783 * C512 + C4779 * C523 + C4784 * C2187 + C48253 * C2188) *
                C48227) *
               C48138 * C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1089 + (C4821 + C4820) * C48271 -
            (C4823 + C4822) * C1090 - (C4825 + C4824) * C48258 +
            (C4827 + C4826) * C1091 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C47935 * C1086 +
          (((C5012 + C5013) * C1090 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48271 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1089) +
            (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
            (C5018 + C5019) * C48227) *
               C48138 * C4781 +
           ((C5017 + C5016) * C1090 -
            ((C5015 + C5014) * C48271 + (C5013 + C5012) * C1089) +
            (C5019 + C5018) * C48258 - (C5361 + C5360) * C1091 -
            (C5363 + C5362) * C48227) *
               C48138 * C48232) *
              C47935 * C1087 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1089 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48271 -
            (C5020 + C5021) * C1090 - (C5022 + C5023) * C48258 +
            (C5024 + C5025) * C1091 + (C5026 + C5027) * C48227) *
               C48138 * C4781 +
           ((C5021 + C5020) * C1089 + (C5023 + C5022) * C48271 -
            (C5025 + C5024) * C1090 - (C5027 + C5026) * C48258 +
            (C4783 * C304 + C4779 * C322 + C4784 * C1437 + C48253 * C1438) *
                C1091 +
            (C4783 * C323 + C4779 * C334 + C4784 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1160 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47871) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
               C48232) *
              C47935 * C1155 -
          (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
               C48232 +
           ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                C47871 +
            (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                C1160) *
               C48138 * C4781) *
              C47935 * C1156 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1160 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C47871) *
               C48138 * C4781 +
           ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
               C48232) *
              C47935 * C1157 -
          (((C4784 * C1176 + C48253 * C1183 + C4783 * C1169 + C4779 * C1180) *
                C47871 +
            (C4784 * C1165 + C48253 * C1175 + C4783 * C1162 + C4779 * C1170) *
                C1160) *
               C48138 * C48232 +
           ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                C47871 +
            (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                C1160) *
               C48138 * C4781) *
              C47935 * C1158 +
          (((C4783 * C1164 + C4779 * C1173 + C4784 * C5951 + C48253 * C5953) *
                C1160 +
            (C4783 * C1174 + C4779 * C1182 + C4784 * C5954 + C48253 * C5957) *
                C47871) *
               C48138 * C4781 +
           ((C4783 * C1165 + C4779 * C1175 + C4784 * C5952 + C48253 * C5955) *
                C1160 +
            (C4783 * C1176 + C4779 * C1183 + C4784 * C5956 + C48253 * C5958) *
                C47871) *
               C48138 * C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C48275 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C48264 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C1160 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C4781 +
            ((C5215 + C5214) * C1160 + (C5217 + C5216) * C47871) * C48138 *
                C48232) *
               C48238) *
              C1086 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C48264 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C48275 -
           (((C4784 * C1319 + C48253 * C1329 + C4783 * C1306 + C4779 * C1323) *
                 C47871 +
             (C4784 * C1302 + C48253 * C1318 + C4783 * C1296 + C4779 * C1307) *
                 C1160) *
                C48138 * C48232 +
            ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                 C47871 +
             (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                 C1160) *
                C48138 * C4781) *
               C48238) *
              C1087 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C4781 +
            ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
                C48232) *
               C48275 -
           (((C4784 * C1719 + C48253 * C1723 + C4783 * C1312 + C4779 * C1326) *
                 C47871 +
             (C4784 * C1714 + C48253 * C1718 + C4783 * C1299 + C4779 * C1313) *
                 C1160) *
                C48138 * C48232 +
            ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                 C47871 +
             (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                 C1160) *
                C48138 * C4781) *
               C48264 +
           (((C4783 * C1301 + C4779 * C1316 + C4784 * C6105 + C48253 * C6107) *
                 C1160 +
             (C4783 * C1317 + C4779 * C1328 + C4784 * C6108 + C48253 * C6111) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C1160 +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47871) *
                C48138 * C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1089 + (C4821 + C4820) * C48271 -
            (C4823 + C4822) * C1090 - (C4825 + C4824) * C48258 +
            (C4827 + C4826) * C1091 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C1835 +
          (((C5206 + C5207) * C1090 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C48271 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1089) +
            (C5208 + C5209) * C48258 - (C5210 + C5211) * C1091 -
            (C5212 + C5213) * C48227) *
               C48138 * C4781 +
           ((C5211 + C5210) * C1090 -
            ((C5209 + C5208) * C48271 + (C5207 + C5206) * C1089) +
            (C5213 + C5212) * C48258 - (C5503 + C5502) * C1091 -
            (C5505 + C5504) * C48227) *
               C48138 * C48232) *
              C1836 +
          (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                C1089 +
            (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                C48271 -
            (C5214 + C5215) * C1090 - (C5216 + C5217) * C48258 +
            (C5218 + C5219) * C1091 + (C5220 + C5221) * C48227) *
               C48138 * C4781 +
           ((C5215 + C5214) * C1089 + (C5217 + C5216) * C48271 -
            (C5219 + C5218) * C1090 - (C5221 + C5220) * C48258 +
            (C4783 * C493 + C4779 * C511 + C4784 * C2185 + C48253 * C2186) *
                C1091 +
            (C4783 * C512 + C4779 * C523 + C4784 * C2187 + C48253 * C2188) *
                C48227) *
               C48138 * C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C1835 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C1836 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C1160 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C4781 +
            ((C5215 + C5214) * C1160 + (C5217 + C5216) * C47871) * C48138 *
                C48232) *
               C48238) *
              C48274 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C1836 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C1835 -
           (((C4784 * C1319 + C48253 * C1329 + C4783 * C1306 + C4779 * C1323) *
                 C47871 +
             (C4784 * C1302 + C48253 * C1318 + C4783 * C1296 + C4779 * C1307) *
                 C1160) *
                C48138 * C48232 +
            ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                 C47871 +
             (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                 C1160) *
                C48138 * C4781) *
               C48238) *
              C48262 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C4781 +
            ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
                C48232) *
               C1835 -
           (((C6461 + C6460) * C47871 + (C6459 + C6458) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                 C47871 +
             (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                 C1160) *
                C48138 * C4781) *
               C1836 +
           (((C4783 * C1301 + C4779 * C1316 + C4784 * C6105 + C48253 * C6107) *
                 C1160 +
             (C4783 * C1317 + C4779 * C1328 + C4784 * C6108 + C48253 * C6111) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C1160 +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47871) *
                C48138 * C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1160 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47871) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
               C48232) *
              C2010 -
          (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
               C48232 +
           ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                C47871 +
            (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                C1160) *
               C48138 * C4781) *
              C2011 +
          (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                C1160 +
            (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                C47871) *
               C48138 * C4781 +
           ((C5215 + C5214) * C1160 + (C5217 + C5216) * C47871) * C48138 *
               C48232) *
              C2012 -
          (((C4784 * C2423 + C48253 * C2427 + C4783 * C2023 + C4779 * C2034) *
                C47871 +
            (C4784 * C2418 + C48253 * C2422 + C4783 * C2016 + C4779 * C2024) *
                C1160) *
               C48138 * C48232 +
           ((C4784 * C2421 + C48253 * C2426 + C4783 * C2025 + C4779 * C2035) *
                C47871 +
            (C4784 * C2417 + C48253 * C2420 + C4783 * C2017 + C4779 * C2026) *
                C1160) *
               C48138 * C4781) *
              C2013 +
          (((C4783 * C2018 + C4779 * C2027 + C4784 * C6973 + C48253 * C6975) *
                C1160 +
            (C4783 * C2028 + C4779 * C2036 + C4784 * C6976 + C48253 * C6979) *
                C47871) *
               C48138 * C4781 +
           ((C4783 * C2019 + C4779 * C2029 + C4784 * C6974 + C48253 * C6977) *
                C1160 +
            (C4783 * C2030 + C4779 * C2037 + C4784 * C6978 + C48253 * C6980) *
                C47871) *
               C48138 * C48232) *
              C2014) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46986 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48186 -
             (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
                C48138 * C4781 +
            ((C4819 + C4818) * C46986 + (C4821 + C4820) * C48186 -
             (C4823 + C4822) * C46967 - (C4825 + C4824) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C5206 + C5207) * C46967 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C48186 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C46986) +
             (C5208 + C5209) * C47881) *
                C48138 * C4781 +
            ((C5211 + C5210) * C46967 -
             ((C5209 + C5208) * C48186 + (C5207 + C5206) * C46986) +
             (C5213 + C5212) * C47881) *
                C48138 * C48232) *
               C48022) *
              C1086 +
          ((((C5012 + C5013) * C46967 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48186 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46986) +
             (C5014 + C5015) * C47881) *
                C48138 * C4781 +
            ((C5017 + C5016) * C46967 -
             ((C5015 + C5014) * C48186 + (C5013 + C5012) * C46986) +
             (C5019 + C5018) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C46986 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C48186 -
             (C5716 + C5717) * C46967 - (C5718 + C5719) * C47881) *
                C48138 * C4781 +
            ((C5717 + C5716) * C46986 + (C5719 + C5718) * C48186 -
             (C5721 + C5720) * C46967 - (C5723 + C5722) * C47881) *
                C48138 * C48232) *
               C48022) *
              C1087 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C46986 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C48186 -
             (C5020 + C5021) * C46967 - (C5022 + C5023) * C47881) *
                C48138 * C4781 +
            ((C5021 + C5020) * C46986 + (C5023 + C5022) * C48186 -
             (C5025 + C5024) * C46967 - (C5027 + C5026) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C6458 + C6459) * C46967 -
             ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                  C48186 +
              (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                  C46986) +
             (C6460 + C6461) * C47881) *
                C48138 * C4781 +
            ((C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                 C46967 -
             ((C6461 + C6460) * C48186 + (C6459 + C6458) * C46986) +
             (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C665 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C659 -
            (C4818 + C4819) * C666 - (C4820 + C4821) * C660 +
            (C4822 + C4823) * C667 + (C4824 + C4825) * C661 -
            (C4826 + C4827) * C668 - (C4828 + C4829) * C48239) *
               C48138 * C4781 +
           ((C4819 + C4818) * C665 + (C4821 + C4820) * C659 -
            (C4823 + C4822) * C666 - (C4825 + C4824) * C660 +
            (C4827 + C4826) * C667 + (C4829 + C4828) * C661 -
            (C4831 + C4830) * C668 - (C4833 + C4832) * C48239) *
               C48138 * C48232) *
              C48204 +
          (((C5206 + C5207) * C666 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C659 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C665) +
            (C5208 + C5209) * C660 - (C5210 + C5211) * C667 -
            (C5212 + C5213) * C661 + (C5502 + C5503) * C668 +
            (C5504 + C5505) * C48239) *
               C48138 * C4781 +
           ((C5211 + C5210) * C666 -
            ((C5209 + C5208) * C659 + (C5207 + C5206) * C665) +
            (C5213 + C5212) * C660 - (C5503 + C5502) * C667 -
            (C5505 + C5504) * C661 +
            (C4783 * C489 + C4779 * C503 + C4784 * C939 + C48253 * C948) *
                C668 +
            (C4783 * C504 + C4779 * C519 + C4784 * C949 + C48253 * C954) *
                C48239) *
               C48138 * C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C46986 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48186 -
            (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
               C48138 * C4781 +
           ((C4819 + C4818) * C46986 + (C4821 + C4820) * C48186 -
            (C4823 + C4822) * C46967 - (C4825 + C4824) * C47881) *
               C48138 * C48232) *
              C2299 +
          (((C5206 + C5207) * C46967 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C48186 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C46986) +
            (C5208 + C5209) * C47881) *
               C48138 * C4781 +
           ((C5211 + C5210) * C46967 -
            ((C5209 + C5208) * C48186 + (C5207 + C5206) * C46986) +
            (C5213 + C5212) * C47881) *
               C48138 * C48232) *
              C2300 +
          (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                C46986 +
            (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                C48186 -
            (C5214 + C5215) * C46967 - (C5216 + C5217) * C47881) *
               C48138 * C4781 +
           ((C5215 + C5214) * C46986 + (C5217 + C5216) * C48186 -
            (C5219 + C5218) * C46967 - (C5221 + C5220) * C47881) *
               C48138 * C48232) *
              C2301 +
          (((C7326 + C7327) * C46967 -
            ((C4784 * C2421 + C48253 * C2426 + C4783 * C2025 + C4779 * C2035) *
                 C48186 +
             (C4784 * C2417 + C48253 * C2420 + C4783 * C2017 + C4779 * C2026) *
                 C46986) +
            (C7328 + C7329) * C47881) *
               C48138 * C4781 +
           ((C4783 * C2015 + C4779 * C2022 + C4784 * C2419 + C48253 * C2424) *
                C46967 -
            ((C7329 + C7328) * C48186 + (C7327 + C7326) * C46986) +
            (C4783 * C2021 + C4779 * C2033 + C4784 * C2425 + C48253 * C2428) *
                C47881) *
               C48138 * C48232) *
              C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C293 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C287 -
            (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
            (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C293 + (C4821 + C4820) * C287 -
            (C4823 + C4822) * C294 - (C4825 + C4824) * C288 +
            (C4827 + C4826) * C295 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C47935 * C48274 +
          (((C5012 + C5013) * C294 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C287 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C293) +
            (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
            (C5018 + C5019) * C48227) *
               C48138 * C4781 +
           ((C5017 + C5016) * C294 -
            ((C5015 + C5014) * C287 + (C5013 + C5012) * C293) +
            (C5019 + C5018) * C288 -
            (C4784 * C304 + C48253 * C322 + C4783 * C299 + C4779 * C312) *
                C295 -
            (C4784 * C323 + C48253 * C334 + C4783 * C313 + C4779 * C329) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48262 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C293 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C287 -
            (C5020 + C5021) * C294 - (C5022 + C5023) * C288 +
            (C5024 + C5025) * C295 + (C5026 + C5027) * C48227) *
               C48138 * C4781 +
           ((C5021 + C5020) * C293 + (C5023 + C5022) * C287 -
            (C5025 + C5024) * C294 - (C5027 + C5026) * C288 +
            (C4783 * C304 + C4779 * C322 + C4784 * C1437 + C48253 * C1438) *
                C295 +
            (C4783 * C323 + C4779 * C334 + C4784 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) * C114 +
           (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) * C102 -
           (C4818 + C4819) * C115 - (C4820 + C4821) * C103 +
           (C4822 + C4823) * C116 + (C4824 + C4825) * C104 -
           (C4826 + C4827) * C117 - (C4828 + C4829) * C105 +
           (C4830 + C4831) * C118 + (C4832 + C4833) * C106) *
              C48138 * C4781 +
          ((C4819 + C4818) * C114 + (C4821 + C4820) * C102 -
           (C4823 + C4822) * C115 - (C4825 + C4824) * C103 +
           (C4827 + C4826) * C116 + (C4829 + C4828) * C104 -
           (C4831 + C4830) * C117 - (C4833 + C4832) * C105 +
           (C4783 * C124 + C4779 * C136 + C4784 * C669 + C48253 * C670) * C118 +
           (C4783 * C137 + C4779 * C145 + C4784 * C671 + C48253 * C672) *
               C106) *
              C48138 * C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1089 + (C4821 + C4820) * C48271 -
            (C4823 + C4822) * C1090 - (C4825 + C4824) * C48258 +
            (C4827 + C4826) * C1091 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C47935 * C1086 +
          (((C5012 + C5013) * C1090 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48271 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1089) +
            (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
            (C5018 + C5019) * C48227) *
               C48138 * C4781 +
           ((C5017 + C5016) * C1090 -
            ((C5015 + C5014) * C48271 + (C5013 + C5012) * C1089) +
            (C5019 + C5018) * C48258 - (C5361 + C5360) * C1091 -
            (C5363 + C5362) * C48227) *
               C48138 * C48232) *
              C47935 * C1087 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1089 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48271 -
            (C5020 + C5021) * C1090 - (C5022 + C5023) * C48258 +
            (C5024 + C5025) * C1091 + (C5026 + C5027) * C48227) *
               C48138 * C4781 +
           ((C5021 + C5020) * C1089 + (C5023 + C5022) * C48271 -
            (C5025 + C5024) * C1090 - (C5027 + C5026) * C48258 +
            (C4783 * C304 + C4779 * C322 + C4784 * C1437 + C48253 * C1438) *
                C1091 +
            (C4783 * C323 + C4779 * C334 + C4784 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1160 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47871) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
               C48232) *
              C47935 * C1155 -
          (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
               C48232 +
           ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                C47871 +
            (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                C1160) *
               C48138 * C4781) *
              C47935 * C1156 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1160 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C47871) *
               C48138 * C4781 +
           ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
               C48232) *
              C47935 * C1157 -
          (((C4784 * C1176 + C48253 * C1183 + C4783 * C1169 + C4779 * C1180) *
                C47871 +
            (C4784 * C1165 + C48253 * C1175 + C4783 * C1162 + C4779 * C1170) *
                C1160) *
               C48138 * C48232 +
           ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                C47871 +
            (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                C1160) *
               C48138 * C4781) *
              C47935 * C1158 +
          (((C4783 * C1164 + C4779 * C1173 + C4784 * C5951 + C48253 * C5953) *
                C1160 +
            (C4783 * C1174 + C4779 * C1182 + C4784 * C5954 + C48253 * C5957) *
                C47871) *
               C48138 * C4781 +
           ((C4783 * C1165 + C4779 * C1175 + C4784 * C5952 + C48253 * C5955) *
                C1160 +
            (C4783 * C1176 + C4779 * C1183 + C4784 * C5956 + C48253 * C5958) *
                C47871) *
               C48138 * C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1089 + (C4821 + C4820) * C48271 -
            (C4823 + C4822) * C1090 - (C4825 + C4824) * C48258 +
            (C4827 + C4826) * C1091 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C1835 +
          (((C5206 + C5207) * C1090 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C48271 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1089) +
            (C5208 + C5209) * C48258 - (C5210 + C5211) * C1091 -
            (C5212 + C5213) * C48227) *
               C48138 * C4781 +
           ((C5211 + C5210) * C1090 -
            ((C5209 + C5208) * C48271 + (C5207 + C5206) * C1089) +
            (C5213 + C5212) * C48258 - (C5503 + C5502) * C1091 -
            (C5505 + C5504) * C48227) *
               C48138 * C48232) *
              C1836 +
          (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                C1089 +
            (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                C48271 -
            (C5214 + C5215) * C1090 - (C5216 + C5217) * C48258 +
            (C5218 + C5219) * C1091 + (C5220 + C5221) * C48227) *
               C48138 * C4781 +
           ((C5215 + C5214) * C1089 + (C5217 + C5216) * C48271 -
            (C5219 + C5218) * C1090 - (C5221 + C5220) * C48258 +
            (C4783 * C493 + C4779 * C511 + C4784 * C2185 + C48253 * C2186) *
                C1091 +
            (C4783 * C512 + C4779 * C523 + C4784 * C2187 + C48253 * C2188) *
                C48227) *
               C48138 * C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C1835 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C1836 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C1160 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C4781 +
            ((C5215 + C5214) * C1160 + (C5217 + C5216) * C47871) * C48138 *
                C48232) *
               C48238) *
              C48274 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C1836 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C1835 -
           (((C4784 * C1319 + C48253 * C1329 + C4783 * C1306 + C4779 * C1323) *
                 C47871 +
             (C4784 * C1302 + C48253 * C1318 + C4783 * C1296 + C4779 * C1307) *
                 C1160) *
                C48138 * C48232 +
            ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                 C47871 +
             (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                 C1160) *
                C48138 * C4781) *
               C48238) *
              C48262 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C4781 +
            ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
                C48232) *
               C1835 -
           (((C6461 + C6460) * C47871 + (C6459 + C6458) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                 C47871 +
             (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                 C1160) *
                C48138 * C4781) *
               C1836 +
           (((C4783 * C1301 + C4779 * C1316 + C4784 * C6105 + C48253 * C6107) *
                 C1160 +
             (C4783 * C1317 + C4779 * C1328 + C4784 * C6108 + C48253 * C6111) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C1160 +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47871) *
                C48138 * C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46996 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47876 -
             (C4818 + C4819) * C46992 - (C4820 + C4821) * C47884 +
             (C4822 + C4823) * C47002 + (C4824 + C4825) * C2901) *
                C48138 * C4781 +
            ((C4819 + C4818) * C46996 + (C4821 + C4820) * C47876 -
             (C4823 + C4822) * C46992 - (C4825 + C4824) * C47884 +
             (C4827 + C4826) * C47002 + (C4829 + C4828) * C2901) *
                C48138 * C48232) *
               C3298 +
           (((C5206 + C5207) * C46992 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C47876 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C46996) +
             (C5208 + C5209) * C47884 - (C5210 + C5211) * C47002 -
             (C5212 + C5213) * C2901) *
                C48138 * C4781 +
            ((C5211 + C5210) * C46992 -
             ((C5209 + C5208) * C47876 + (C5207 + C5206) * C46996) +
             (C5213 + C5212) * C47884 - (C5503 + C5502) * C47002 -
             (C5505 + C5504) * C2901) *
                C48138 * C48232) *
               C48022) *
              C48203 +
          ((((C5012 + C5013) * C46992 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C47876 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46996) +
             (C5014 + C5015) * C47884 - (C5016 + C5017) * C47002 -
             (C5018 + C5019) * C2901) *
                C48138 * C4781 +
            ((C5017 + C5016) * C46992 -
             ((C5015 + C5014) * C47876 + (C5013 + C5012) * C46996) +
             (C5019 + C5018) * C47884 - (C5361 + C5360) * C47002 -
             (C5363 + C5362) * C2901) *
                C48138 * C48232) *
               C3298 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C46996 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47876 -
             (C5716 + C5717) * C46992 - (C5718 + C5719) * C47884 +
             (C5720 + C5721) * C47002 + (C5722 + C5723) * C2901) *
                C48138 * C4781 +
            ((C5717 + C5716) * C46996 + (C5719 + C5718) * C47876 -
             (C5721 + C5720) * C46992 - (C5723 + C5722) * C47884 +
             (C4783 * C938 + C4779 * C946 + C4784 * C1599 + C48253 * C1600) *
                 C47002 +
             (C4783 * C947 + C4779 * C953 + C4784 * C1601 + C48253 * C1602) *
                 C2901) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C2641 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C2635 -
             (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
                C48138 * C4781 +
            ((C4819 + C4818) * C2641 + (C4821 + C4820) * C2635 -
             (C4823 + C4822) * C2642 - (C4825 + C4824) * C47881) *
                C48138 * C48232) *
               C48018 +
           (((C5206 + C5207) * C2642 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C2635 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C2641) +
             (C5208 + C5209) * C47881) *
                C48138 * C4781 +
            ((C5211 + C5210) * C2642 -
             ((C5209 + C5208) * C2635 + (C5207 + C5206) * C2641) +
             (C5213 + C5212) * C47881) *
                C48138 * C48232) *
               C48025 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C2641 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C2635 -
             (C5214 + C5215) * C2642 - (C5216 + C5217) * C47881) *
                C48138 * C4781 +
            ((C5215 + C5214) * C2641 + (C5217 + C5216) * C2635 -
             (C5219 + C5218) * C2642 - (C5221 + C5220) * C47881) *
                C48138 * C48232) *
               C3806) *
              C48203 +
          ((((C5012 + C5013) * C2642 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C2635 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C2641) +
             (C5014 + C5015) * C47881) *
                C48138 * C4781 +
            ((C5017 + C5016) * C2642 -
             ((C5015 + C5014) * C2635 + (C5013 + C5012) * C2641) +
             (C5019 + C5018) * C47881) *
                C48138 * C48232) *
               C48018 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C2641 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C2635 -
             (C5716 + C5717) * C2642 - (C5718 + C5719) * C47881) *
                C48138 * C4781 +
            ((C5717 + C5716) * C2641 + (C5719 + C5718) * C2635 -
             (C5721 + C5720) * C2642 - (C5723 + C5722) * C47881) *
                C48138 * C48232) *
               C48025 +
           (((C7184 + C7185) * C2642 -
             ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                  C2635 +
              (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                  C2641) +
             (C7186 + C7187) * C47881) *
                C48138 * C4781 +
            ((C4783 * C1295 + C4779 * C1305 + C4784 * C1303 + C48253 * C1320) *
                 C2642 -
             ((C7187 + C7186) * C2635 + (C7185 + C7184) * C2641) +
             (C4783 * C1304 + C4779 * C1322 + C4784 * C1321 + C48253 * C1330) *
                 C47881) *
                C48138 * C48232) *
               C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C2641 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C2635 -
             (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
                C48138 * C4781 +
            ((C4819 + C4818) * C2641 + (C4821 + C4820) * C2635 -
             (C4823 + C4822) * C2642 - (C4825 + C4824) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C5206 + C5207) * C2642 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C2635 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C2641) +
             (C5208 + C5209) * C47881) *
                C48138 * C4781 +
            ((C5211 + C5210) * C2642 -
             ((C5209 + C5208) * C2635 + (C5207 + C5206) * C2641) +
             (C5213 + C5212) * C47881) *
                C48138 * C48232) *
               C48022) *
              C48274 +
          ((((C5012 + C5013) * C2642 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C2635 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C2641) +
             (C5014 + C5015) * C47881) *
                C48138 * C4781 +
            ((C5017 + C5016) * C2642 -
             ((C5015 + C5014) * C2635 + (C5013 + C5012) * C2641) +
             (C5019 + C5018) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C2641 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C2635 -
             (C5716 + C5717) * C2642 - (C5718 + C5719) * C47881) *
                C48138 * C4781 +
            ((C5717 + C5716) * C2641 + (C5719 + C5718) * C2635 -
             (C5721 + C5720) * C2642 - (C5723 + C5722) * C47881) *
                C48138 * C48232) *
               C48022) *
              C48262 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C2641 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C2635 -
             (C5020 + C5021) * C2642 - (C5022 + C5023) * C47881) *
                C48138 * C4781 +
            ((C5021 + C5020) * C2641 + (C5023 + C5022) * C2635 -
             (C5025 + C5024) * C2642 - (C5027 + C5026) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C6458 + C6459) * C2642 -
             ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                  C2635 +
              (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                  C2641) +
             (C6460 + C6461) * C47881) *
                C48138 * C4781 +
            ((C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                 C2642 -
             ((C6461 + C6460) * C2635 + (C6459 + C6458) * C2641) +
             (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2533 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48280 -
            (C4818 + C4819) * C2534 - (C4820 + C4821) * C48273 +
            (C4822 + C4823) * C2535 + (C4824 + C4825) * C48260 -
            (C4826 + C4827) * C2536 - (C4828 + C4829) * C48239) *
               C48138 * C4781 +
           ((C4819 + C4818) * C2533 + (C4821 + C4820) * C48280 -
            (C4823 + C4822) * C2534 - (C4825 + C4824) * C48273 +
            (C4827 + C4826) * C2535 + (C4829 + C4828) * C48260 -
            (C4831 + C4830) * C2536 - (C4833 + C4832) * C48239) *
               C48138 * C48232) *
              C3298 +
          (((C5206 + C5207) * C2534 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C48280 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C2533) +
            (C5208 + C5209) * C48273 - (C5210 + C5211) * C2535 -
            (C5212 + C5213) * C48260 + (C5502 + C5503) * C2536 +
            (C5504 + C5505) * C48239) *
               C48138 * C4781 +
           ((C5211 + C5210) * C2534 -
            ((C5209 + C5208) * C48280 + (C5207 + C5206) * C2533) +
            (C5213 + C5212) * C48273 - (C5503 + C5502) * C2535 -
            (C5505 + C5504) * C48260 +
            (C4783 * C489 + C4779 * C503 + C4784 * C939 + C48253 * C948) *
                C2536 +
            (C4783 * C504 + C4779 * C519 + C4784 * C949 + C48253 * C954) *
                C48239) *
               C48138 * C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2641 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C2635 -
            (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
               C48138 * C4781 +
           ((C4819 + C4818) * C2641 + (C4821 + C4820) * C2635 -
            (C4823 + C4822) * C2642 - (C4825 + C4824) * C47881) *
               C48138 * C48232) *
              C48282 +
          (((C5206 + C5207) * C2642 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C2635 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C2641) +
            (C5208 + C5209) * C47881) *
               C48138 * C4781 +
           ((C5211 + C5210) * C2642 -
            ((C5209 + C5208) * C2635 + (C5207 + C5206) * C2641) +
            (C5213 + C5212) * C47881) *
               C48138 * C48232) *
              C48279 +
          (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                C2641 +
            (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                C2635 -
            (C5214 + C5215) * C2642 - (C5216 + C5217) * C47881) *
               C48138 * C4781 +
           ((C5215 + C5214) * C2641 + (C5217 + C5216) * C2635 -
            (C5219 + C5218) * C2642 - (C5221 + C5220) * C47881) *
               C48138 * C48232) *
              C48270 +
          (((C7326 + C7327) * C2642 -
            ((C4784 * C2421 + C48253 * C2426 + C4783 * C2025 + C4779 * C2035) *
                 C2635 +
             (C4784 * C2417 + C48253 * C2420 + C4783 * C2017 + C4779 * C2026) *
                 C2641) +
            (C7328 + C7329) * C47881) *
               C48138 * C4781 +
           ((C4783 * C2015 + C4779 * C2022 + C4784 * C2419 + C48253 * C2424) *
                C2642 -
            ((C7329 + C7328) * C2635 + (C7327 + C7326) * C2641) +
            (C4783 * C2021 + C4779 * C2033 + C4784 * C2425 + C48253 * C2428) *
                C47881) *
               C48138 * C48232) *
              C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C46996 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47876 -
            (C4818 + C4819) * C46992 - (C4820 + C4821) * C47884 +
            (C4822 + C4823) * C47002 + (C4824 + C4825) * C2901) *
               C48138 * C4781 +
           ((C4819 + C4818) * C46996 + (C4821 + C4820) * C47876 -
            (C4823 + C4822) * C46992 - (C4825 + C4824) * C47884 +
            (C4827 + C4826) * C47002 + (C4829 + C4828) * C2901) *
               C48138 * C48232) *
              C48018 +
          (((C5206 + C5207) * C46992 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47876 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C46996) +
            (C5208 + C5209) * C47884 - (C5210 + C5211) * C47002 -
            (C5212 + C5213) * C2901) *
               C48138 * C4781 +
           ((C5211 + C5210) * C46992 -
            ((C5209 + C5208) * C47876 + (C5207 + C5206) * C46996) +
            (C5213 + C5212) * C47884 - (C5503 + C5502) * C47002 -
            (C5505 + C5504) * C2901) *
               C48138 * C48232) *
              C48025 +
          (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                C46996 +
            (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                C47876 -
            (C5214 + C5215) * C46992 - (C5216 + C5217) * C47884 +
            (C5218 + C5219) * C47002 + (C5220 + C5221) * C2901) *
               C48138 * C4781 +
           ((C5215 + C5214) * C46996 + (C5217 + C5216) * C47876 -
            (C5219 + C5218) * C46992 - (C5221 + C5220) * C47884 +
            (C4783 * C493 + C4779 * C511 + C4784 * C2185 + C48253 * C2186) *
                C47002 +
            (C4783 * C512 + C4779 * C523 + C4784 * C2187 + C48253 * C2188) *
                C2901) *
               C48138 * C48232) *
              C3806) *
         C47923) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2533 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48280 -
            (C4818 + C4819) * C2534 - (C4820 + C4821) * C48273 +
            (C4822 + C4823) * C2535 + (C4824 + C4825) * C48260 -
            (C4826 + C4827) * C2536 - (C4828 + C4829) * C48239) *
               C48138 * C4781 +
           ((C4819 + C4818) * C2533 + (C4821 + C4820) * C48280 -
            (C4823 + C4822) * C2534 - (C4825 + C4824) * C48273 +
            (C4827 + C4826) * C2535 + (C4829 + C4828) * C48260 -
            (C4831 + C4830) * C2536 - (C4833 + C4832) * C48239) *
               C48138 * C48232) *
              C3298 +
          (((C5206 + C5207) * C2534 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C48280 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C2533) +
            (C5208 + C5209) * C48273 - (C5210 + C5211) * C2535 -
            (C5212 + C5213) * C48260 + (C5502 + C5503) * C2536 +
            (C5504 + C5505) * C48239) *
               C48138 * C4781 +
           ((C5211 + C5210) * C2534 -
            ((C5209 + C5208) * C48280 + (C5207 + C5206) * C2533) +
            (C5213 + C5212) * C48273 - (C5503 + C5502) * C2535 -
            (C5505 + C5504) * C48260 +
            (C4783 * C489 + C4779 * C503 + C4784 * C939 + C48253 * C948) *
                C2536 +
            (C4783 * C504 + C4779 * C519 + C4784 * C949 + C48253 * C954) *
                C48239) *
               C48138 * C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C2641 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C2635 -
             (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
                C48138 * C4781 +
            ((C4819 + C4818) * C2641 + (C4821 + C4820) * C2635 -
             (C4823 + C4822) * C2642 - (C4825 + C4824) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C5206 + C5207) * C2642 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C2635 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C2641) +
             (C5208 + C5209) * C47881) *
                C48138 * C4781 +
            ((C5211 + C5210) * C2642 -
             ((C5209 + C5208) * C2635 + (C5207 + C5206) * C2641) +
             (C5213 + C5212) * C47881) *
                C48138 * C48232) *
               C48022) *
              C48274 +
          ((((C5012 + C5013) * C2642 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C2635 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C2641) +
             (C5014 + C5015) * C47881) *
                C48138 * C4781 +
            ((C5017 + C5016) * C2642 -
             ((C5015 + C5014) * C2635 + (C5013 + C5012) * C2641) +
             (C5019 + C5018) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C2641 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C2635 -
             (C5716 + C5717) * C2642 - (C5718 + C5719) * C47881) *
                C48138 * C4781 +
            ((C5717 + C5716) * C2641 + (C5719 + C5718) * C2635 -
             (C5721 + C5720) * C2642 - (C5723 + C5722) * C47881) *
                C48138 * C48232) *
               C48022) *
              C48262 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C2641 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C2635 -
             (C5020 + C5021) * C2642 - (C5022 + C5023) * C47881) *
                C48138 * C4781 +
            ((C5021 + C5020) * C2641 + (C5023 + C5022) * C2635 -
             (C5025 + C5024) * C2642 - (C5027 + C5026) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C6458 + C6459) * C2642 -
             ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                  C2635 +
              (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                  C2641) +
             (C6460 + C6461) * C47881) *
                C48138 * C4781 +
            ((C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                 C2642 -
             ((C6461 + C6460) * C2635 + (C6459 + C6458) * C2641) +
             (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C665 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C659 -
            (C4818 + C4819) * C666 - (C4820 + C4821) * C660 +
            (C4822 + C4823) * C667 + (C4824 + C4825) * C661 -
            (C4826 + C4827) * C668 - (C4828 + C4829) * C48239) *
               C48138 * C4781 +
           ((C4819 + C4818) * C665 + (C4821 + C4820) * C659 -
            (C4823 + C4822) * C666 - (C4825 + C4824) * C660 +
            (C4827 + C4826) * C667 + (C4829 + C4828) * C661 -
            (C4831 + C4830) * C668 - (C4833 + C4832) * C48239) *
               C48138 * C48232) *
              C47935 * C48203 +
          (((C5012 + C5013) * C666 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C659 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C665) +
            (C5014 + C5015) * C660 - (C5016 + C5017) * C667 -
            (C5018 + C5019) * C661 + (C5360 + C5361) * C668 +
            (C5362 + C5363) * C48239) *
               C48138 * C4781 +
           ((C5017 + C5016) * C666 -
            ((C5015 + C5014) * C659 + (C5013 + C5012) * C665) +
            (C5019 + C5018) * C660 - (C5361 + C5360) * C667 -
            (C5363 + C5362) * C661 +
            (C4783 * C300 + C4779 * C314 + C4784 * C305 + C48253 * C324) *
                C668 +
            (C4783 * C315 + C4779 * C330 + C4784 * C325 + C48253 * C335) *
                C48239) *
               C48138 * C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C46986 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48186 -
            (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
               C48138 * C4781 +
           ((C4819 + C4818) * C46986 + (C4821 + C4820) * C48186 -
            (C4823 + C4822) * C46967 - (C4825 + C4824) * C47881) *
               C48138 * C48232) *
              C47935 * C1431 +
          (((C5012 + C5013) * C46967 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48186 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C46986) +
            (C5014 + C5015) * C47881) *
               C48138 * C4781 +
           ((C5017 + C5016) * C46967 -
            ((C5015 + C5014) * C48186 + (C5013 + C5012) * C46986) +
            (C5019 + C5018) * C47881) *
               C48138 * C48232) *
              C47935 * C1432 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C46986 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48186 -
            (C5020 + C5021) * C46967 - (C5022 + C5023) * C47881) *
               C48138 * C4781 +
           ((C5021 + C5020) * C46986 + (C5023 + C5022) * C48186 -
            (C5025 + C5024) * C46967 - (C5027 + C5026) * C47881) *
               C48138 * C48232) *
              C47935 * C1433 +
          (((C6252 + C6253) * C46967 -
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C48186 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C46986) +
            (C6254 + C6255) * C47881) *
               C48138 * C4781 +
           ((C4783 * C1161 + C4779 * C1168 + C4784 * C1166 + C48253 * C1177) *
                C46967 -
            ((C6255 + C6254) * C48186 + (C6253 + C6252) * C46986) +
            (C4783 * C1167 + C4779 * C1179 + C4784 * C1178 + C48253 * C1184) *
                C47881) *
               C48138 * C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C293 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C287 -
             (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
             (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
                C48138 * C4781 +
            ((C4819 + C4818) * C293 + (C4821 + C4820) * C287 -
             (C4823 + C4822) * C294 - (C4825 + C4824) * C288 +
             (C4827 + C4826) * C295 + (C4829 + C4828) * C48227) *
                C48138 * C48232) *
               C48204 +
           (((C5206 + C5207) * C294 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C287 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C293) +
             (C5208 + C5209) * C288 - (C5210 + C5211) * C295 -
             (C5212 + C5213) * C48227) *
                C48138 * C4781 +
            ((C5211 + C5210) * C294 -
             ((C5209 + C5208) * C287 + (C5207 + C5206) * C293) +
             (C5213 + C5212) * C288 - (C5503 + C5502) * C295 -
             (C5505 + C5504) * C48227) *
                C48138 * C48232) *
               C48022) *
              C48203 +
          ((((C5012 + C5013) * C294 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C287 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C293) +
             (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
             (C5018 + C5019) * C48227) *
                C48138 * C4781 +
            ((C5017 + C5016) * C294 -
             ((C5015 + C5014) * C287 + (C5013 + C5012) * C293) +
             (C5019 + C5018) * C288 - (C5361 + C5360) * C295 -
             (C5363 + C5362) * C48227) *
                C48138 * C48232) *
               C48204 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C293 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C287 -
             (C5716 + C5717) * C294 - (C5718 + C5719) * C288 +
             (C5720 + C5721) * C295 + (C5722 + C5723) * C48227) *
                C48138 * C4781 +
            ((C5717 + C5716) * C293 + (C5719 + C5718) * C287 -
             (C5721 + C5720) * C294 - (C5723 + C5722) * C288 +
             (C4783 * C938 + C4779 * C946 + C4784 * C1599 + C48253 * C1600) *
                 C295 +
             (C4783 * C947 + C4779 * C953 + C4784 * C1601 + C48253 * C1602) *
                 C48227) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C48204 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C48022) *
              C1431 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C48022 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C48204) *
              C1432 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C4781 +
            ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
                C48232) *
               C48204 -
           (((C6461 + C6460) * C47871 + (C6459 + C6458) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                 C47871 +
             (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                 C1160) *
                C48138 * C4781) *
               C48022) *
              C1433 +
          ((((C4783 * C1713 + C4779 * C1716 + C4784 * C6591 + C48253 * C6593) *
                 C1160 +
             (C4783 * C1717 + C4779 * C1722 + C4784 * C6594 + C48253 * C6597) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C1714 + C4779 * C1718 + C4784 * C6592 + C48253 * C6595) *
                 C1160 +
             (C4783 * C1719 + C4779 * C1723 + C4784 * C6596 + C48253 * C6598) *
                 C47871) *
                C48138 * C48232) *
               C48022 -
           (((C6255 + C6254) * C47871 + (C6253 + C6252) * C1160) * C48138 *
                C48232 +
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C47871 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C1160) *
                C48138 * C4781) *
               C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C293 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C287 -
            (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
            (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C293 + (C4821 + C4820) * C287 -
            (C4823 + C4822) * C294 - (C4825 + C4824) * C288 +
            (C4827 + C4826) * C295 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C47935 * C48274 +
          (((C5012 + C5013) * C294 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C287 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C293) +
            (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
            (C5018 + C5019) * C48227) *
               C48138 * C4781 +
           ((C5017 + C5016) * C294 -
            ((C5015 + C5014) * C287 + (C5013 + C5012) * C293) +
            (C5019 + C5018) * C288 -
            (C4784 * C304 + C48253 * C322 + C4783 * C299 + C4779 * C312) *
                C295 -
            (C4784 * C323 + C48253 * C334 + C4783 * C313 + C4779 * C329) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48262 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C293 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C287 -
            (C5020 + C5021) * C294 - (C5022 + C5023) * C288 +
            (C5024 + C5025) * C295 + (C5026 + C5027) * C48227) *
               C48138 * C4781 +
           ((C5021 + C5020) * C293 + (C5023 + C5022) * C287 -
            (C5025 + C5024) * C294 - (C5027 + C5026) * C288 +
            (C4783 * C304 + C4779 * C322 + C4784 * C1437 + C48253 * C1438) *
                C295 +
            (C4783 * C323 + C4779 * C334 + C4784 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) * C114 +
           (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) * C102 -
           (C4818 + C4819) * C115 - (C4820 + C4821) * C103 +
           (C4822 + C4823) * C116 + (C4824 + C4825) * C104 -
           (C4826 + C4827) * C117 - (C4828 + C4829) * C105 +
           (C4830 + C4831) * C118 + (C4832 + C4833) * C106) *
              C48138 * C4781 +
          ((C4819 + C4818) * C114 + (C4821 + C4820) * C102 -
           (C4823 + C4822) * C115 - (C4825 + C4824) * C103 +
           (C4827 + C4826) * C116 + (C4829 + C4828) * C104 -
           (C4831 + C4830) * C117 - (C4833 + C4832) * C105 +
           (C4783 * C124 + C4779 * C136 + C4784 * C669 + C48253 * C670) * C118 +
           (C4783 * C137 + C4779 * C145 + C4784 * C671 + C48253 * C672) *
               C106) *
              C48138 * C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C293 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C287 -
            (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
            (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C293 + (C4821 + C4820) * C287 -
            (C4823 + C4822) * C294 - (C4825 + C4824) * C288 +
            (C4827 + C4826) * C295 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C48275 +
          (((C5206 + C5207) * C294 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C287 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C293) +
            (C5208 + C5209) * C288 - (C5210 + C5211) * C295 -
            (C5212 + C5213) * C48227) *
               C48138 * C4781 +
           ((C5211 + C5210) * C294 -
            ((C5209 + C5208) * C287 + (C5207 + C5206) * C293) +
            (C5213 + C5212) * C288 -
            (C4784 * C938 + C48253 * C946 + C4783 * C488 + C4779 * C501) *
                C295 -
            (C4784 * C947 + C48253 * C953 + C4783 * C502 + C4779 * C518) *
                C48227) *
               C48138 * C48232) *
              C48264 +
          (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                C293 +
            (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                C287 -
            (C5214 + C5215) * C294 - (C5216 + C5217) * C288 +
            (C5218 + C5219) * C295 + (C5220 + C5221) * C48227) *
               C48138 * C4781 +
           ((C5215 + C5214) * C293 + (C5217 + C5216) * C287 -
            (C5219 + C5218) * C294 - (C5221 + C5220) * C288 +
            (C4783 * C493 + C4779 * C511 + C4784 * C2185 + C48253 * C2186) *
                C295 +
            (C4783 * C512 + C4779 * C523 + C4784 * C2187 + C48253 * C2188) *
                C48227) *
               C48138 * C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1089 + (C4821 + C4820) * C48271 -
            (C4823 + C4822) * C1090 - (C4825 + C4824) * C48258 +
            (C4827 + C4826) * C1091 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C47935 * C1086 +
          (((C5012 + C5013) * C1090 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48271 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1089) +
            (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
            (C5018 + C5019) * C48227) *
               C48138 * C4781 +
           ((C5017 + C5016) * C1090 -
            ((C5015 + C5014) * C48271 + (C5013 + C5012) * C1089) +
            (C5019 + C5018) * C48258 - (C5361 + C5360) * C1091 -
            (C5363 + C5362) * C48227) *
               C48138 * C48232) *
              C47935 * C1087 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1089 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48271 -
            (C5020 + C5021) * C1090 - (C5022 + C5023) * C48258 +
            (C5024 + C5025) * C1091 + (C5026 + C5027) * C48227) *
               C48138 * C4781 +
           ((C5021 + C5020) * C1089 + (C5023 + C5022) * C48271 -
            (C5025 + C5024) * C1090 - (C5027 + C5026) * C48258 +
            (C4783 * C304 + C4779 * C322 + C4784 * C1437 + C48253 * C1438) *
                C1091 +
            (C4783 * C323 + C4779 * C334 + C4784 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1160 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47871) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
               C48232) *
              C47935 * C1155 -
          (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
               C48232 +
           ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                C47871 +
            (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                C1160) *
               C48138 * C4781) *
              C47935 * C1156 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1160 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C47871) *
               C48138 * C4781 +
           ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
               C48232) *
              C47935 * C1157 -
          (((C4784 * C1176 + C48253 * C1183 + C4783 * C1169 + C4779 * C1180) *
                C47871 +
            (C4784 * C1165 + C48253 * C1175 + C4783 * C1162 + C4779 * C1170) *
                C1160) *
               C48138 * C48232 +
           ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                C47871 +
            (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                C1160) *
               C48138 * C4781) *
              C47935 * C1158 +
          (((C4783 * C1164 + C4779 * C1173 + C4784 * C5951 + C48253 * C5953) *
                C1160 +
            (C4783 * C1174 + C4779 * C1182 + C4784 * C5954 + C48253 * C5957) *
                C47871) *
               C48138 * C4781 +
           ((C4783 * C1165 + C4779 * C1175 + C4784 * C5952 + C48253 * C5955) *
                C1160 +
            (C4783 * C1176 + C4779 * C1183 + C4784 * C5956 + C48253 * C5958) *
                C47871) *
               C48138 * C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C4781 +
            ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
                C48232) *
               C48275 -
           (((C5209 + C5208) * C47871 + (C5207 + C5206) * C1160) * C48138 *
                C48232 +
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C47871 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C1160) *
                C48138 * C4781) *
               C48264 +
           (((C4783 * C490 + C4779 * C505 + C4784 * C1297 + C48253 * C1309) *
                 C1160 +
             (C4783 * C506 + C4779 * C520 + C4784 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C4781 +
            ((C5215 + C5214) * C1160 + (C5217 + C5216) * C47871) * C48138 *
                C48232) *
               C48238) *
              C1086 +
          ((((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C1160 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C4781 +
            ((C5717 + C5716) * C1160 + (C5719 + C5718) * C47871) * C48138 *
                C48232) *
               C48264 -
           (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
                C48232 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C48138 * C4781) *
               C48275 -
           (((C4784 * C1319 + C48253 * C1329 + C4783 * C1306 + C4779 * C1323) *
                 C47871 +
             (C4784 * C1302 + C48253 * C1318 + C4783 * C1296 + C4779 * C1307) *
                 C1160) *
                C48138 * C48232 +
            ((C4784 * C1317 + C48253 * C1328 + C4783 * C1308 + C4779 * C1324) *
                 C47871 +
             (C4784 * C1301 + C48253 * C1316 + C4783 * C1297 + C4779 * C1309) *
                 C1160) *
                C48138 * C4781) *
               C48238) *
              C1087 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C4781 +
            ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
                C48232) *
               C48275 -
           (((C4784 * C1719 + C48253 * C1723 + C4783 * C1312 + C4779 * C1326) *
                 C47871 +
             (C4784 * C1714 + C48253 * C1718 + C4783 * C1299 + C4779 * C1313) *
                 C1160) *
                C48138 * C48232 +
            ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                 C47871 +
             (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                 C1160) *
                C48138 * C4781) *
               C48264 +
           (((C4783 * C1301 + C4779 * C1316 + C4784 * C6105 + C48253 * C6107) *
                 C1160 +
             (C4783 * C1317 + C4779 * C1328 + C4784 * C6108 + C48253 * C6111) *
                 C47871) *
                C48138 * C4781 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C1160 +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47871) *
                C48138 * C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C665 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C659 -
            (C4818 + C4819) * C666 - (C4820 + C4821) * C660 +
            (C4822 + C4823) * C667 + (C4824 + C4825) * C661 -
            (C4826 + C4827) * C668 - (C4828 + C4829) * C48239) *
               C48138 * C4781 +
           ((C4819 + C4818) * C665 + (C4821 + C4820) * C659 -
            (C4823 + C4822) * C666 - (C4825 + C4824) * C660 +
            (C4827 + C4826) * C667 + (C4829 + C4828) * C661 -
            (C4831 + C4830) * C668 - (C4833 + C4832) * C48239) *
               C48138 * C48232) *
              C48204 +
          (((C5206 + C5207) * C666 -
            ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                 C659 +
             (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                 C665) +
            (C5208 + C5209) * C660 - (C5210 + C5211) * C667 -
            (C5212 + C5213) * C661 + (C5502 + C5503) * C668 +
            (C5504 + C5505) * C48239) *
               C48138 * C4781 +
           ((C5211 + C5210) * C666 -
            ((C5209 + C5208) * C659 + (C5207 + C5206) * C665) +
            (C5213 + C5212) * C660 - (C5503 + C5502) * C667 -
            (C5505 + C5504) * C661 +
            (C4783 * C489 + C4779 * C503 + C4784 * C939 + C48253 * C948) *
                C668 +
            (C4783 * C504 + C4779 * C519 + C4784 * C949 + C48253 * C954) *
                C48239) *
               C48138 * C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46986 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48186 -
             (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
                C48138 * C4781 +
            ((C4819 + C4818) * C46986 + (C4821 + C4820) * C48186 -
             (C4823 + C4822) * C46967 - (C4825 + C4824) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C5206 + C5207) * C46967 -
             ((C4784 * C941 + C48253 * C950 + C4783 * C496 + C4779 * C515) *
                  C48186 +
              (C4784 * C935 + C48253 * C940 + C4783 * C486 + C4779 * C497) *
                  C46986) +
             (C5208 + C5209) * C47881) *
                C48138 * C4781 +
            ((C5211 + C5210) * C46967 -
             ((C5209 + C5208) * C48186 + (C5207 + C5206) * C46986) +
             (C5213 + C5212) * C47881) *
                C48138 * C48232) *
               C48022) *
              C1086 +
          ((((C5012 + C5013) * C46967 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48186 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46986) +
             (C5014 + C5015) * C47881) *
                C48138 * C4781 +
            ((C5017 + C5016) * C46967 -
             ((C5015 + C5014) * C48186 + (C5013 + C5012) * C46986) +
             (C5019 + C5018) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C4783 * C935 + C4779 * C940 + C4784 * C1300 + C48253 * C1315) *
                 C46986 +
             (C4783 * C941 + C4779 * C950 + C4784 * C1314 + C48253 * C1327) *
                 C48186 -
             (C5716 + C5717) * C46967 - (C5718 + C5719) * C47881) *
                C48138 * C4781 +
            ((C5717 + C5716) * C46986 + (C5719 + C5718) * C48186 -
             (C5721 + C5720) * C46967 - (C5723 + C5722) * C47881) *
                C48138 * C48232) *
               C48022) *
              C1087 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C46986 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C48186 -
             (C5020 + C5021) * C46967 - (C5022 + C5023) * C47881) *
                C48138 * C4781 +
            ((C5021 + C5020) * C46986 + (C5023 + C5022) * C48186 -
             (C5025 + C5024) * C46967 - (C5027 + C5026) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C6458 + C6459) * C46967 -
             ((C4784 * C1717 + C48253 * C1722 + C4783 * C1314 + C4779 * C1327) *
                  C48186 +
              (C4784 * C1713 + C48253 * C1716 + C4783 * C1300 + C4779 * C1315) *
                  C46986) +
             (C6460 + C6461) * C47881) *
                C48138 * C4781 +
            ((C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                 C46967 -
             ((C6461 + C6460) * C48186 + (C6459 + C6458) * C46986) +
             (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) * C114 +
           (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) * C102 -
           (C4818 + C4819) * C115 - (C4820 + C4821) * C103 +
           (C4822 + C4823) * C116 + (C4824 + C4825) * C104 -
           (C4826 + C4827) * C117 - (C4828 + C4829) * C105 +
           (C4830 + C4831) * C118 + (C4832 + C4833) * C106) *
              C48138 * C4781 +
          ((C4819 + C4818) * C114 + (C4821 + C4820) * C102 -
           (C4823 + C4822) * C115 - (C4825 + C4824) * C103 +
           (C4827 + C4826) * C116 + (C4829 + C4828) * C104 -
           (C4831 + C4830) * C117 - (C4833 + C4832) * C105 +
           (C4783 * C124 + C4779 * C136 + C4784 * C669 + C48253 * C670) * C118 +
           (C4783 * C137 + C4779 * C145 + C4784 * C671 + C48253 * C672) *
               C106) *
              C48138 * C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C293 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C287 -
            (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
            (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C293 + (C4821 + C4820) * C287 -
            (C4823 + C4822) * C294 - (C4825 + C4824) * C288 +
            (C4827 + C4826) * C295 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C47935 * C48274 +
          (((C5012 + C5013) * C294 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C287 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C293) +
            (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
            (C5018 + C5019) * C48227) *
               C48138 * C4781 +
           ((C5017 + C5016) * C294 -
            ((C5015 + C5014) * C287 + (C5013 + C5012) * C293) +
            (C5019 + C5018) * C288 -
            (C4784 * C304 + C48253 * C322 + C4783 * C299 + C4779 * C312) *
                C295 -
            (C4784 * C323 + C48253 * C334 + C4783 * C313 + C4779 * C329) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48262 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C293 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C287 -
            (C5020 + C5021) * C294 - (C5022 + C5023) * C288 +
            (C5024 + C5025) * C295 + (C5026 + C5027) * C48227) *
               C48138 * C4781 +
           ((C5021 + C5020) * C293 + (C5023 + C5022) * C287 -
            (C5025 + C5024) * C294 - (C5027 + C5026) * C288 +
            (C4783 * C304 + C4779 * C322 + C4784 * C1437 + C48253 * C1438) *
                C295 +
            (C4783 * C323 + C4779 * C334 + C4784 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1089 + (C4821 + C4820) * C48271 -
            (C4823 + C4822) * C1090 - (C4825 + C4824) * C48258 +
            (C4827 + C4826) * C1091 + (C4829 + C4828) * C48227) *
               C48138 * C48232) *
              C47935 * C1086 +
          (((C5012 + C5013) * C1090 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48271 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1089) +
            (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
            (C5018 + C5019) * C48227) *
               C48138 * C4781 +
           ((C5017 + C5016) * C1090 -
            ((C5015 + C5014) * C48271 + (C5013 + C5012) * C1089) +
            (C5019 + C5018) * C48258 - (C5361 + C5360) * C1091 -
            (C5363 + C5362) * C48227) *
               C48138 * C48232) *
              C47935 * C1087 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1089 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48271 -
            (C5020 + C5021) * C1090 - (C5022 + C5023) * C48258 +
            (C5024 + C5025) * C1091 + (C5026 + C5027) * C48227) *
               C48138 * C4781 +
           ((C5021 + C5020) * C1089 + (C5023 + C5022) * C48271 -
            (C5025 + C5024) * C1090 - (C5027 + C5026) * C48258 +
            (C4783 * C304 + C4779 * C322 + C4784 * C1437 + C48253 * C1438) *
                C1091 +
            (C4783 * C323 + C4779 * C334 + C4784 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1160 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47871) *
               C48138 * C4781 +
           ((C4819 + C4818) * C1160 + (C4821 + C4820) * C47871) * C48138 *
               C48232) *
              C47935 * C1155 -
          (((C5015 + C5014) * C47871 + (C5013 + C5012) * C1160) * C48138 *
               C48232 +
           ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                C47871 +
            (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                C1160) *
               C48138 * C4781) *
              C47935 * C1156 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1160 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C47871) *
               C48138 * C4781 +
           ((C5021 + C5020) * C1160 + (C5023 + C5022) * C47871) * C48138 *
               C48232) *
              C47935 * C1157 -
          (((C4784 * C1176 + C48253 * C1183 + C4783 * C1169 + C4779 * C1180) *
                C47871 +
            (C4784 * C1165 + C48253 * C1175 + C4783 * C1162 + C4779 * C1170) *
                C1160) *
               C48138 * C48232 +
           ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                C47871 +
            (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                C1160) *
               C48138 * C4781) *
              C47935 * C1158 +
          (((C4783 * C1164 + C4779 * C1173 + C4784 * C5951 + C48253 * C5953) *
                C1160 +
            (C4783 * C1174 + C4779 * C1182 + C4784 * C5954 + C48253 * C5957) *
                C47871) *
               C48138 * C4781 +
           ((C4783 * C1165 + C4779 * C1175 + C4784 * C5952 + C48253 * C5955) *
                C1160 +
            (C4783 * C1176 + C4779 * C1183 + C4784 * C5956 + C48253 * C5958) *
                C47871) *
               C48138 * C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C46996 +
                     (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
                     C169 * C47884 + C170 * C47002 + C171 * C2901) *
                        C10513 +
                    (C10836 * C46996 + C10837 * C47876 - C550 * C46992 -
                     C551 * C47884 + C552 * C47002 + C553 * C2901) *
                        C48255) *
                       C4781 +
                   ((C168 * C46996 + C169 * C47876 - C170 * C46992 -
                     C171 * C47884 + C172 * C47002 + C173 * C2901) *
                        C10513 +
                    (C550 * C46996 + C551 * C47876 - C552 * C46992 -
                     C553 * C47884 + C554 * C47002 + C555 * C2901) *
                        C48255) *
                       C48232) *
                      C47935 * C47978 +
                  (((C361 * C46992 -
                     ((C113 * C307 + C48121 * C326) * C47876 +
                      (C113 * C297 + C48121 * C308) * C46996) +
                     C362 * C47884 - C363 * C47002 - C364 * C2901) *
                        C10513 +
                    (C968 * C46992 - (C11328 * C47876 + C11329 * C46996) +
                     C969 * C47884 - C970 * C47002 - C971 * C2901) *
                        C48255) *
                       C4781 +
                   ((C363 * C46992 - (C362 * C47876 + C361 * C46996) +
                     C364 * C47884 - C365 * C47002 - C366 * C2901) *
                        C10513 +
                    (C970 * C46992 - (C969 * C47876 + C968 * C46996) +
                     C971 * C47884 - C972 * C47002 - C973 * C2901) *
                        C48255) *
                       C48232) *
                      C47935 * C47985 +
                  ((((C113 * C301 + C48121 * C316) * C46996 +
                     (C113 * C317 + C48121 * C331) * C47876 - C367 * C46992 -
                     C368 * C47884 + C369 * C47002 + C370 * C2901) *
                        C10513 +
                    (C11740 * C46996 + C11741 * C47876 - C1612 * C46992 -
                     C1613 * C47884 + C1614 * C47002 + C1615 * C2901) *
                        C48255) *
                       C4781 +
                   ((C367 * C46996 + C368 * C47876 - C369 * C46992 -
                     C370 * C47884 + C371 * C47002 + C372 * C2901) *
                        C10513 +
                    (C1612 * C46996 + C1613 * C47876 - C1614 * C46992 -
                     C1615 * C47884 + (C113 * C1599 + C48121 * C1600) * C47002 +
                     (C113 * C1601 + C48121 * C1602) * C2901) *
                        C48255) *
                       C48232) *
                      C47935 * C2904)) /
                (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C2641 +
              (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
              C169 * C47881) *
                 C10513 +
             (C13628 + C13629 - C13630 - C13631) * C48255) *
                C4781 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                 C10513 +
             (C13632 + C13633 - C13634 - C13635) * C48255) *
                C48232) *
               C48204 +
           (((C13630 - (C13629 + C13628) + C13631) * C10513 +
             (C13636 - (C13637 + C13638) + C13639) * C48255) *
                C4781 +
            ((C13634 - (C13633 + C13632) + C13635) * C10513 +
             (C13640 - (C13641 + C13642) + C13643) * C48255) *
                C48232) *
               C48022) *
              C47978 +
          ((((C361 * C2642 -
              ((C113 * C307 + C48121 * C326) * C2635 +
               (C113 * C297 + C48121 * C308) * C2641) +
              C362 * C47881) *
                 C10513 +
             (C13644 - (C13645 + C13646) + C13647) * C48255) *
                C4781 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                 C10513 +
             (C13648 - (C13649 + C13650) + C13651) * C48255) *
                C48232) *
               C48204 +
           (((C13646 + C13645 - C13644 - C13647) * C10513 +
             (C13652 + C13653 - C13654 - C13655) * C48255) *
                C4781 +
            ((C13650 + C13649 - C13648 - C13651) * C10513 +
             (C13656 + C13657 - C13658 - C13659) * C48255) *
                C48232) *
               C48022) *
              C47985 +
          (((((C113 * C301 + C48121 * C316) * C2641 +
              (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
              C368 * C47881) *
                 C10513 +
             (C14218 + C14219 - C14220 - C14221) * C48255) *
                C4781 +
            ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                 C10513 +
             (C14222 + C14223 - C14224 - C14225) * C48255) *
                C48232) *
               C48204 +
           (((C14220 - (C14219 + C14218) + C14221) * C10513 +
             (C11743 * C2642 - (C11744 * C2635 + C11745 * C2641) +
              C11742 * C47881) *
                 C48255) *
                C4781 +
            ((C14224 - (C14223 + C14222) + C14225) * C10513 +
             ((C113 * C1303 + C48121 * C1320) * C2642 -
              (C11742 * C2635 + C11743 * C2641) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C10513 +
            (C10836 * C2641 + C10837 * C2635 - C550 * C2642 - C551 * C47881) *
                C48255) *
               C4781 +
           ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C10513 +
            (C550 * C2641 + C551 * C2635 - C552 * C2642 - C553 * C47881) *
                C48255) *
               C48232) *
              C47935 * C48281 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C10513 +
            (C968 * C2642 - (C11328 * C2635 + C11329 * C2641) + C969 * C47881) *
                C48255) *
               C4781 +
           ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                C10513 +
            (C970 * C2642 - (C969 * C2635 + C968 * C2641) + C971 * C47881) *
                C48255) *
               C48232) *
              C47935 * C48277 +
          ((((C113 * C301 + C48121 * C316) * C2641 +
             (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
             C368 * C47881) *
                C10513 +
            (C11740 * C2641 + C11741 * C2635 - C1612 * C2642 - C1613 * C47881) *
                C48255) *
               C4781 +
           ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                C10513 +
            (C1612 * C2641 + C1613 * C2635 - C1614 * C2642 - C1615 * C47881) *
                C48255) *
               C48232) *
              C47935 * C48267 +
          (((C1450 * C2642 -
             ((C113 * C1171 + C48121 * C1181) * C2635 +
              (C113 * C1163 + C48121 * C1172) * C2641) +
             C1451 * C47881) *
                C10513 +
            (C11888 * C2642 - (C12245 * C2635 + C12244 * C2641) +
             C11889 * C47881) *
                C48255) *
               C4781 +
           ((C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C47881) *
                C10513 +
            ((C113 * C1715 + C48121 * C1720) * C2642 -
             (C11889 * C2635 + C11888 * C2641) +
             (C113 * C1721 + C48121 * C1724) * C47881) *
                C48255) *
               C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2533 +
             (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
             C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
             C173 * C48239) *
                C10513 +
            (C10836 * C2533 + C10837 * C48280 - C550 * C2534 - C551 * C48273 +
             C552 * C2535 + C553 * C48260 - C554 * C2536 - C555 * C48239) *
                C48255) *
               C4781 +
           ((C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
             C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
                C10513 +
            (C550 * C2533 + C551 * C48280 - C552 * C2534 - C553 * C48273 +
             C554 * C2535 + C555 * C48260 - C788 * C2536 - C789 * C48239) *
                C48255) *
               C48232) *
              C47935 * C2531 +
          (((C361 * C2534 -
             ((C113 * C307 + C48121 * C326) * C48280 +
              (C113 * C297 + C48121 * C308) * C2533) +
             C362 * C48273 - C363 * C2535 - C364 * C48260 + C365 * C2536 +
             C366 * C48239) *
                C10513 +
            (C968 * C2534 - (C11328 * C48280 + C11329 * C2533) + C969 * C48273 -
             C970 * C2535 - C971 * C48260 + C972 * C2536 + C973 * C48239) *
                C48255) *
               C4781 +
           ((C363 * C2534 - (C362 * C48280 + C361 * C2533) + C364 * C48273 -
             C365 * C2535 - C366 * C48260 + C678 * C2536 + C679 * C48239) *
                C10513 +
            (C970 * C2534 - (C969 * C48280 + C968 * C2533) + C971 * C48273 -
             C972 * C2535 - C973 * C48260 +
             (C113 * C939 + C48121 * C948) * C2536 +
             (C113 * C949 + C48121 * C954) * C48239) *
                C48255) *
               C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C2641 +
              (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
              C169 * C47881) *
                 C10513 +
             (C13628 + C13629 - C13630 - C13631) * C48255) *
                C4781 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                 C10513 +
             (C13632 + C13633 - C13634 - C13635) * C48255) *
                C48232) *
               C48275 +
           (((C13630 - (C13629 + C13628) + C13631) * C10513 +
             (C13636 - (C13637 + C13638) + C13639) * C48255) *
                C4781 +
            ((C13634 - (C13633 + C13632) + C13635) * C10513 +
             (C13640 - (C13641 + C13642) + C13643) * C48255) *
                C48232) *
               C48264 +
           (((C13638 + C13637 - C13636 - C13639) * C10513 +
             (C12668 * C2641 + C12669 * C2635 - C2316 * C2642 -
              C2317 * C47881) *
                 C48255) *
                C4781 +
            ((C13642 + C13641 - C13640 - C13643) * C10513 +
             (C2316 * C2641 + C2317 * C2635 - C2318 * C2642 - C2319 * C47881) *
                 C48255) *
                C48232) *
               C48238) *
              C2531 +
          ((((C361 * C2642 -
              ((C113 * C307 + C48121 * C326) * C2635 +
               (C113 * C297 + C48121 * C308) * C2641) +
              C362 * C47881) *
                 C10513 +
             (C13644 - (C13645 + C13646) + C13647) * C48255) *
                C4781 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                 C10513 +
             (C13648 - (C13649 + C13650) + C13651) * C48255) *
                C48232) *
               C48275 +
           (((C13646 + C13645 - C13644 - C13647) * C10513 +
             (C13652 + C13653 - C13654 - C13655) * C48255) *
                C4781 +
            ((C13650 + C13649 - C13648 - C13651) * C10513 +
             (C13656 + C13657 - C13658 - C13659) * C48255) *
                C48232) *
               C48264 +
           (((C13654 - (C13653 + C13652) + C13655) * C10513 +
             (C12894 * C2642 - (C13170 * C2635 + C13171 * C2641) +
              C12895 * C47881) *
                 C48255) *
                C4781 +
            ((C13658 - (C13657 + C13656) + C13659) * C10513 +
             ((C113 * C2419 + C48121 * C2424) * C2642 -
              (C12895 * C2635 + C12894 * C2641) +
              (C113 * C2425 + C48121 * C2428) * C47881) *
                 C48255) *
                C48232) *
               C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46996 +
              (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
              C169 * C47884 + C170 * C47002 + C171 * C2901) *
                 C10513 +
             (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C48255) *
                C4781 +
            ((C168 * C46996 + C169 * C47876 - C170 * C46992 - C171 * C47884 +
              C172 * C47002 + C173 * C2901) *
                 C10513 +
             (C14006 + C14007 - C14008 - C14009 + C14010 + C14011) * C48255) *
                C48232) *
               C48204 +
           (((C14002 - (C14001 + C14000) + C14003 - C14004 - C14005) * C10513 +
             (C556 * C46992 - (C10838 * C47876 + C10839 * C46996) +
              C557 * C47884 - C558 * C47002 - C559 * C2901) *
                 C48255) *
                C4781 +
            ((C14008 - (C14007 + C14006) + C14009 - C14010 - C14011) * C10513 +
             (C558 * C46992 - (C557 * C47876 + C556 * C46996) + C559 * C47884 -
              C560 * C47002 - C561 * C2901) *
                 C48255) *
                C48232) *
               C48022) *
              C2531 +
          ((((C361 * C46992 -
              ((C113 * C307 + C48121 * C326) * C47876 +
               (C113 * C297 + C48121 * C308) * C46996) +
              C362 * C47884 - C363 * C47002 - C364 * C2901) *
                 C10513 +
             (C14012 - (C14013 + C14014) + C14015 - C14016 - C14017) * C48255) *
                C4781 +
            ((C363 * C46992 - (C362 * C47876 + C361 * C46996) + C364 * C47884 -
              C365 * C47002 - C366 * C2901) *
                 C10513 +
             (C14018 - (C14019 + C14020) + C14021 - C14022 - C14023) * C48255) *
                C48232) *
               C48204 +
           (((C14014 + C14013 - C14012 - C14015 + C14016 + C14017) * C10513 +
             (C11738 * C46996 + C11739 * C47876 - C2198 * C46992 -
              C2199 * C47884 + C2200 * C47002 + C2201 * C2901) *
                 C48255) *
                C4781 +
            ((C14020 + C14019 - C14018 - C14021 + C14022 + C14023) * C10513 +
             (C2198 * C46996 + C2199 * C47876 - C2200 * C46992 -
              C2201 * C47884 + (C113 * C2185 + C48121 * C2186) * C47002 +
              (C113 * C2187 + C48121 * C2188) * C2901) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2533 +
             (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
             C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
             C173 * C48239) *
                C10513 +
            (C10836 * C2533 + C10837 * C48280 - C550 * C2534 - C551 * C48273 +
             C552 * C2535 + C553 * C48260 - C554 * C2536 - C555 * C48239) *
                C48255) *
               C4781 +
           ((C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
             C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
                C10513 +
            (C550 * C2533 + C551 * C48280 - C552 * C2534 - C553 * C48273 +
             C554 * C2535 + C555 * C48260 - C788 * C2536 - C789 * C48239) *
                C48255) *
               C48232) *
              C47935 * C2531 +
          (((C361 * C2534 -
             ((C113 * C307 + C48121 * C326) * C48280 +
              (C113 * C297 + C48121 * C308) * C2533) +
             C362 * C48273 - C363 * C2535 - C364 * C48260 + C365 * C2536 +
             C366 * C48239) *
                C10513 +
            (C968 * C2534 - (C11328 * C48280 + C11329 * C2533) + C969 * C48273 -
             C970 * C2535 - C971 * C48260 + C972 * C2536 + C973 * C48239) *
                C48255) *
               C4781 +
           ((C363 * C2534 - (C362 * C48280 + C361 * C2533) + C364 * C48273 -
             C365 * C2535 - C366 * C48260 + C678 * C2536 + C679 * C48239) *
                C10513 +
            (C970 * C2534 - (C969 * C48280 + C968 * C2533) + C971 * C48273 -
             C972 * C2535 - C973 * C48260 +
             (C113 * C939 + C48121 * C948) * C2536 +
             (C113 * C949 + C48121 * C954) * C48239) *
                C48255) *
               C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C10513 +
            (C10836 * C2641 + C10837 * C2635 - C550 * C2642 - C551 * C47881) *
                C48255) *
               C4781 +
           ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C10513 +
            (C550 * C2641 + C551 * C2635 - C552 * C2642 - C553 * C47881) *
                C48255) *
               C48232) *
              C47935 * C48281 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C10513 +
            (C968 * C2642 - (C11328 * C2635 + C11329 * C2641) + C969 * C47881) *
                C48255) *
               C4781 +
           ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                C10513 +
            (C970 * C2642 - (C969 * C2635 + C968 * C2641) + C971 * C47881) *
                C48255) *
               C48232) *
              C47935 * C48277 +
          ((((C113 * C301 + C48121 * C316) * C2641 +
             (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
             C368 * C47881) *
                C10513 +
            (C11740 * C2641 + C11741 * C2635 - C1612 * C2642 - C1613 * C47881) *
                C48255) *
               C4781 +
           ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                C10513 +
            (C1612 * C2641 + C1613 * C2635 - C1614 * C2642 - C1615 * C47881) *
                C48255) *
               C48232) *
              C47935 * C48267 +
          (((C1450 * C2642 -
             ((C113 * C1171 + C48121 * C1181) * C2635 +
              (C113 * C1163 + C48121 * C1172) * C2641) +
             C1451 * C47881) *
                C10513 +
            (C11888 * C2642 - (C12245 * C2635 + C12244 * C2641) +
             C11889 * C47881) *
                C48255) *
               C4781 +
           ((C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C47881) *
                C10513 +
            ((C113 * C1715 + C48121 * C1720) * C2642 -
             (C11889 * C2635 + C11888 * C2641) +
             (C113 * C1721 + C48121 * C1724) * C47881) *
                C48255) *
               C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46986 +
              (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
              C169 * C47881) *
                 C10513 +
             (C12084 + C12085 - C12086 - C12087) * C48255) *
                C4781 +
            ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                 C10513 +
             (C12088 + C12089 - C12090 - C12091) * C48255) *
                C48232) *
               C3298 +
           (((C12086 - (C12085 + C12084) + C12087) * C10513 +
             (C12874 - (C12875 + C12876) + C12877) * C48255) *
                C4781 +
            ((C12090 - (C12089 + C12088) + C12091) * C10513 +
             (C12878 - (C12879 + C12880) + C12881) * C48255) *
                C48232) *
               C48022) *
              C47978 +
          ((((C361 * C46967 -
              ((C113 * C307 + C48121 * C326) * C48186 +
               (C113 * C297 + C48121 * C308) * C46986) +
              C362 * C47881) *
                 C10513 +
             (C12092 - (C12093 + C12094) + C12095) * C48255) *
                C4781 +
            ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                 C10513 +
             (C12096 - (C12097 + C12098) + C12099) * C48255) *
                C48232) *
               C3298 +
           (((C12094 + C12093 - C12092 - C12095) * C10513 +
             (C12882 + C12883 - C12884 - C12885) * C48255) *
                C4781 +
            ((C12098 + C12097 - C12096 - C12099) * C10513 +
             (C12886 + C12887 - C12888 - C12889) * C48255) *
                C48232) *
               C48022) *
              C47985 +
          (((((C113 * C301 + C48121 * C316) * C46986 +
              (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
              C368 * C47881) *
                 C10513 +
             (C12100 + C12101 - C12102 - C12103) * C48255) *
                C4781 +
            ((C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                 C10513 +
             (C12104 + C12105 - C12106 - C12107) * C48255) *
                C48232) *
               C3298 +
           (((C12102 - (C12101 + C12100) + C12103) * C10513 +
             (C11743 * C46967 - (C11744 * C48186 + C11745 * C46986) +
              C11742 * C47881) *
                 C48255) *
                C4781 +
            ((C12106 - (C12105 + C12104) + C12107) * C10513 +
             ((C113 * C1303 + C48121 * C1320) * C46967 -
              (C11742 * C48186 + C11743 * C46986) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48018 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C48025 +
           (((C11713 + C11712) * C10513 + (C12674 + C12675) * C48255) * C4781 +
            ((C11711 + C11710) * C10513 + (C12658 + C12659) * C48255) *
                C48232) *
               C3806) *
              C47978 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C48025 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C48018 -
           (((C13164 + C13165) * C48255 + (C11723 + C11722) * C10513) * C48232 +
            ((C13172 + C13173) * C48255 + (C11747 + C11746) * C10513) * C4781) *
               C3806) *
              C47985 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C10513 +
             (C11748 + C11749) * C48255) *
                C4781 +
            ((C367 * C1160 + C368 * C47871) * C10513 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C48018 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C10513) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C10513) * C4781) *
               C48025 +
           (((C11753 + C11752) * C10513 +
             ((C113 * C7459 + C48121 * C7461) * C1160 +
              (C113 * C7462 + C48121 * C7465) * C47871) *
                 C48255) *
                C4781 +
            ((C11751 + C11750) * C10513 +
             ((C113 * C7460 + C48121 * C7463) * C1160 +
              (C113 * C7464 + C48121 * C7466) * C47871) *
                 C48255) *
                C48232) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C3298 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C48022) *
              C48281 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C48022 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C3298) *
              C48277 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C10513 +
             (C11748 + C11749) * C48255) *
                C4781 +
            ((C367 * C1160 + C368 * C47871) * C10513 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C3298 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C10513) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C10513) * C4781) *
               C48022) *
              C48267 +
          ((((C12246 + C12247) * C10513 +
             ((C113 * C6105 + C48121 * C6107) * C1160 +
              (C113 * C6108 + C48121 * C6111) * C47871) *
                 C48255) *
                C4781 +
            ((C12242 + C12243) * C10513 +
             ((C113 * C6106 + C48121 * C6109) * C1160 +
              (C113 * C6110 + C48121 * C6112) * C47871) *
                 C48255) *
                C48232) *
               C48022 -
           (((C12243 + C12242) * C48255 +
             (C1451 * C47871 + C1450 * C1160) * C10513) *
                C48232 +
            ((C12247 + C12246) * C48255 +
             ((C113 * C1171 + C48121 * C1181) * C47871 +
              (C113 * C1163 + C48121 * C1172) * C1160) *
                 C10513) *
                C4781) *
               C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1089 +
              (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
              C169 * C48258 + C170 * C1091 + C171 * C48227) *
                 C10513 +
             (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
                C4781 +
            ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
              C172 * C1091 + C173 * C48227) *
                 C10513 +
             (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
                C48232) *
               C3298 +
           (((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C10513 +
             (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C48255) *
                C4781 +
            ((C12402 - (C12401 + C12400) + C12403 - C12404 - C12405) * C10513 +
             (C12412 - (C12413 + C12414) + C12415 - C12416 - C12417) * C48255) *
                C48232) *
               C48022) *
              C2531 +
          ((((C361 * C1090 -
              ((C113 * C307 + C48121 * C326) * C48271 +
               (C113 * C297 + C48121 * C308) * C1089) +
              C362 * C48258 - C363 * C1091 - C364 * C48227) *
                 C10513 +
             (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C48255) *
                C4781 +
            ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
              C365 * C1091 - C366 * C48227) *
                 C10513 +
             (C15450 - (C15451 + C15452) + C15453 - C15454 - C15455) * C48255) *
                C48232) *
               C3298 +
           (((C15446 + C15445 - C15444 - C15447 + C15448 + C15449) * C10513 +
             (C11738 * C1089 + C11739 * C48271 - C2198 * C1090 -
              C2199 * C48258 + C2200 * C1091 + C2201 * C48227) *
                 C48255) *
                C4781 +
            ((C15452 + C15451 - C15450 - C15453 + C15454 + C15455) * C10513 +
             (C2198 * C1089 + C2199 * C48271 - C2200 * C1090 - C2201 * C48258 +
              (C113 * C2185 + C48121 * C2186) * C1091 +
              (C113 * C2187 + C48121 * C2188) * C48227) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48282 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C48279 +
           (((C11713 + C11712) * C10513 + (C12674 + C12675) * C48255) * C4781 +
            ((C11711 + C11710) * C10513 + (C12658 + C12659) * C48255) *
                C48232) *
               C48270 -
           (((C12676 + C12677) * C48255 + (C12659 + C12658) * C10513) * C48232 +
            ((C12678 + C12679) * C48255 + (C12675 + C12674) * C10513) * C4781) *
               C48251) *
              C2531 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C48279 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C48282 -
           (((C13164 + C13165) * C48255 + (C11723 + C11722) * C10513) * C48232 +
            ((C13172 + C13173) * C48255 + (C11747 + C11746) * C10513) * C4781) *
               C48270 +
           (((C13173 + C13172) * C10513 +
             ((C113 * C6973 + C48121 * C6975) * C1160 +
              (C113 * C6976 + C48121 * C6979) * C47871) *
                 C48255) *
                C4781 +
            ((C13165 + C13164) * C10513 +
             ((C113 * C6974 + C48121 * C6977) * C1160 +
              (C113 * C6978 + C48121 * C6980) * C47871) *
                 C48255) *
                C48232) *
               C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46986 +
              (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
              C169 * C47881) *
                 C10513 +
             (C12084 + C12085 - C12086 - C12087) * C48255) *
                C4781 +
            ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                 C10513 +
             (C12088 + C12089 - C12090 - C12091) * C48255) *
                C48232) *
               C48018 +
           (((C12086 - (C12085 + C12084) + C12087) * C10513 +
             (C12874 - (C12875 + C12876) + C12877) * C48255) *
                C4781 +
            ((C12090 - (C12089 + C12088) + C12091) * C10513 +
             (C12878 - (C12879 + C12880) + C12881) * C48255) *
                C48232) *
               C48025 +
           (((C12876 + C12875 - C12874 - C12877) * C10513 +
             (C13026 + C13027 - C13028 - C13029) * C48255) *
                C4781 +
            ((C12880 + C12879 - C12878 - C12881) * C10513 +
             (C13030 + C13031 - C13032 - C13033) * C48255) *
                C48232) *
               C3806) *
              C2531 +
          ((((C361 * C46967 -
              ((C113 * C307 + C48121 * C326) * C48186 +
               (C113 * C297 + C48121 * C308) * C46986) +
              C362 * C47881) *
                 C10513 +
             (C12092 - (C12093 + C12094) + C12095) * C48255) *
                C4781 +
            ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                 C10513 +
             (C12096 - (C12097 + C12098) + C12099) * C48255) *
                C48232) *
               C48018 +
           (((C12094 + C12093 - C12092 - C12095) * C10513 +
             (C12882 + C12883 - C12884 - C12885) * C48255) *
                C4781 +
            ((C12098 + C12097 - C12096 - C12099) * C10513 +
             (C12886 + C12887 - C12888 - C12889) * C48255) *
                C48232) *
               C48025 +
           (((C12884 - (C12883 + C12882) + C12885) * C10513 +
             (C12894 * C46967 - (C13170 * C48186 + C13171 * C46986) +
              C12895 * C47881) *
                 C48255) *
                C4781 +
            ((C12888 - (C12887 + C12886) + C12889) * C10513 +
             ((C113 * C2419 + C48121 * C2424) * C46967 -
              (C12895 * C48186 + C12894 * C46986) +
              (C113 * C2425 + C48121 * C2428) * C47881) *
                 C48255) *
                C48232) *
               C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1089 +
              (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
              C169 * C48258 + C170 * C1091 + C171 * C48227) *
                 C10513 +
             (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
                C4781 +
            ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
              C172 * C1091 + C173 * C48227) *
                 C10513 +
             (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
                C48232) *
               C3298 +
           (((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C10513 +
             (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C48255) *
                C4781 +
            ((C12402 - (C12401 + C12400) + C12403 - C12404 - C12405) * C10513 +
             (C12412 - (C12413 + C12414) + C12415 - C12416 - C12417) * C48255) *
                C48232) *
               C48022) *
              C2531 +
          ((((C361 * C1090 -
              ((C113 * C307 + C48121 * C326) * C48271 +
               (C113 * C297 + C48121 * C308) * C1089) +
              C362 * C48258 - C363 * C1091 - C364 * C48227) *
                 C10513 +
             (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C48255) *
                C4781 +
            ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
              C365 * C1091 - C366 * C48227) *
                 C10513 +
             (C15450 - (C15451 + C15452) + C15453 - C15454 - C15455) * C48255) *
                C48232) *
               C3298 +
           (((C15446 + C15445 - C15444 - C15447 + C15448 + C15449) * C10513 +
             (C11738 * C1089 + C11739 * C48271 - C2198 * C1090 -
              C2199 * C48258 + C2200 * C1091 + C2201 * C48227) *
                 C48255) *
                C4781 +
            ((C15452 + C15451 - C15450 - C15453 + C15454 + C15455) * C10513 +
             (C2198 * C1089 + C2199 * C48271 - C2200 * C1090 - C2201 * C48258 +
              (C113 * C2185 + C48121 * C2186) * C1091 +
              (C113 * C2187 + C48121 * C2188) * C48227) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C3298 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C48022) *
              C48281 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C48022 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C3298) *
              C48277 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C10513 +
             (C11748 + C11749) * C48255) *
                C4781 +
            ((C367 * C1160 + C368 * C47871) * C10513 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C3298 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C10513) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C10513) * C4781) *
               C48022) *
              C48267 +
          ((((C12246 + C12247) * C10513 +
             ((C113 * C6105 + C48121 * C6107) * C1160 +
              (C113 * C6108 + C48121 * C6111) * C47871) *
                 C48255) *
                C4781 +
            ((C12242 + C12243) * C10513 +
             ((C113 * C6106 + C48121 * C6109) * C1160 +
              (C113 * C6110 + C48121 * C6112) * C47871) *
                 C48255) *
                C48232) *
               C48022 -
           (((C12243 + C12242) * C48255 +
             (C1451 * C47871 + C1450 * C1160) * C10513) *
                C48232 +
            ((C12247 + C12246) * C48255 +
             ((C113 * C1171 + C48121 * C1181) * C47871 +
              (C113 * C1163 + C48121 * C1172) * C1160) *
                 C10513) *
                C4781) *
               C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C10513 +
            (C10836 * C46986 + C10837 * C48186 - C550 * C46967 -
             C551 * C47881) *
                C48255) *
               C4781 +
           ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C10513 +
            (C550 * C46986 + C551 * C48186 - C552 * C46967 - C553 * C47881) *
                C48255) *
               C48232) *
              C47935 * C1431 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C10513 +
            (C968 * C46967 - (C11328 * C48186 + C11329 * C46986) +
             C969 * C47881) *
                C48255) *
               C4781 +
           ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                C10513 +
            (C970 * C46967 - (C969 * C48186 + C968 * C46986) + C971 * C47881) *
                C48255) *
               C48232) *
              C47935 * C1432 +
          ((((C113 * C301 + C48121 * C316) * C46986 +
             (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
             C368 * C47881) *
                C10513 +
            (C11740 * C46986 + C11741 * C48186 - C1612 * C46967 -
             C1613 * C47881) *
                C48255) *
               C4781 +
           ((C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                C10513 +
            (C1612 * C46986 + C1613 * C48186 - C1614 * C46967 -
             C1615 * C47881) *
                C48255) *
               C48232) *
              C47935 * C1433 +
          (((C1450 * C46967 -
             ((C113 * C1171 + C48121 * C1181) * C48186 +
              (C113 * C1163 + C48121 * C1172) * C46986) +
             C1451 * C47881) *
                C10513 +
            (C11888 * C46967 -
             ((C113 * C1717 + C48121 * C1722) * C48186 +
              (C113 * C1713 + C48121 * C1716) * C46986) +
             C11889 * C47881) *
                C48255) *
               C4781 +
           ((C1452 * C46967 - (C1451 * C48186 + C1450 * C46986) +
             C1453 * C47881) *
                C10513 +
            ((C113 * C1715 + C48121 * C1720) * C46967 -
             (C11889 * C48186 + C11888 * C46986) +
             (C113 * C1721 + C48121 * C1724) * C47881) *
                C48255) *
               C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C665 +
             (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
                C10513 +
            (C10836 * C665 + C10837 * C659 - C550 * C666 - C551 * C660 +
             C552 * C667 + C553 * C661 - C554 * C668 - C555 * C48239) *
                C48255) *
               C4781 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
                C10513 +
            (C550 * C665 + C551 * C659 - C552 * C666 - C553 * C660 +
             C554 * C667 + C555 * C661 - C788 * C668 - C789 * C48239) *
                C48255) *
               C48232) *
              C47935 * C48203 +
          (((C361 * C666 -
             ((C113 * C307 + C48121 * C326) * C659 +
              (C113 * C297 + C48121 * C308) * C665) +
             C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
             C366 * C48239) *
                C10513 +
            (C968 * C666 -
             ((C113 * C941 + C48121 * C950) * C659 +
              (C113 * C935 + C48121 * C940) * C665) +
             C969 * C660 - C970 * C667 - C971 * C661 + C972 * C668 +
             C973 * C48239) *
                C48255) *
               C4781 +
           ((C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
             C365 * C667 - C366 * C661 + C678 * C668 + C679 * C48239) *
                C10513 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C48121 * C948) * C668 +
             (C113 * C949 + C48121 * C954) * C48239) *
                C48255) *
               C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46986 +
              (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
              C169 * C47881) *
                 C10513 +
             (C12084 + C12085 - C12086 - C12087) * C48255) *
                C4781 +
            ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                 C10513 +
             (C12088 + C12089 - C12090 - C12091) * C48255) *
                C48232) *
               C1835 +
           (((C12086 - (C12085 + C12084) + C12087) * C10513 +
             (C12874 - (C12875 + C12876) + C12877) * C48255) *
                C4781 +
            ((C12090 - (C12089 + C12088) + C12091) * C10513 +
             (C12878 - (C12879 + C12880) + C12881) * C48255) *
                C48232) *
               C1836 +
           (((C12876 + C12875 - C12874 - C12877) * C10513 +
             (C12668 * C46986 + C12669 * C48186 - C2316 * C46967 -
              C2317 * C47881) *
                 C48255) *
                C4781 +
            ((C12880 + C12879 - C12878 - C12881) * C10513 +
             (C2316 * C46986 + C2317 * C48186 - C2318 * C46967 -
              C2319 * C47881) *
                 C48255) *
                C48232) *
               C48238) *
              C48203 +
          ((((C361 * C46967 -
              ((C113 * C307 + C48121 * C326) * C48186 +
               (C113 * C297 + C48121 * C308) * C46986) +
              C362 * C47881) *
                 C10513 +
             (C12092 - (C12093 + C12094) + C12095) * C48255) *
                C4781 +
            ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                 C10513 +
             (C12096 - (C12097 + C12098) + C12099) * C48255) *
                C48232) *
               C1835 +
           (((C12094 + C12093 - C12092 - C12095) * C10513 +
             (C12882 + C12883 - C12884 - C12885) * C48255) *
                C4781 +
            ((C12098 + C12097 - C12096 - C12099) * C10513 +
             (C12886 + C12887 - C12888 - C12889) * C48255) *
                C48232) *
               C1836 +
           (((C12884 - (C12883 + C12882) + C12885) * C10513 +
             (C12894 * C46967 -
              ((C113 * C2421 + C48121 * C2426) * C48186 +
               (C113 * C2417 + C48121 * C2420) * C46986) +
              C12895 * C47881) *
                 C48255) *
                C4781 +
            ((C12888 - (C12887 + C12886) + C12889) * C10513 +
             ((C113 * C2419 + C48121 * C2424) * C46967 -
              (C12895 * C48186 + C12894 * C46986) +
              (C113 * C2425 + C48121 * C2428) * C47881) *
                 C48255) *
                C48232) *
               C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48204 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C48022) *
              C1431 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C48022 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C48204) *
              C1432 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C10513 +
             (C11748 + C11749) * C48255) *
                C4781 +
            ((C367 * C1160 + C368 * C47871) * C10513 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C48204 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C10513) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C10513) * C4781) *
               C48022) *
              C1433 +
          ((((C12246 + C12247) * C10513 +
             ((C113 * C6105 + C48121 * C6107) * C1160 +
              (C113 * C6108 + C48121 * C6111) * C47871) *
                 C48255) *
                C4781 +
            ((C12242 + C12243) * C10513 +
             ((C113 * C6106 + C48121 * C6109) * C1160 +
              (C113 * C6110 + C48121 * C6112) * C47871) *
                 C48255) *
                C48232) *
               C48022 -
           (((C12243 + C12242) * C48255 +
             (C1451 * C47871 + C1450 * C1160) * C10513) *
                C48232 +
            ((C12247 + C12246) * C48255 +
             ((C113 * C1171 + C48121 * C1181) * C47871 +
              (C113 * C1163 + C48121 * C1172) * C1160) *
                 C10513) *
                C4781) *
               C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C293 +
              (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C48227) *
                 C10513 +
             (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
                C4781 +
            ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C48227) *
                 C10513 +
             (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
                C48232) *
               C48204 +
           (((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C10513 +
             (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C48255) *
                C4781 +
            ((C10818 - (C10817 + C10816) + C10819 - C10820 - C10821) * C10513 +
             (C10830 - (C10831 + C10832) + C10833 - C10834 - C10835) * C48255) *
                C48232) *
               C48022) *
              C48203 +
          ((((C361 * C294 -
              ((C113 * C307 + C48121 * C326) * C287 +
               (C113 * C297 + C48121 * C308) * C293) +
              C362 * C288 - C363 * C295 - C364 * C48227) *
                 C10513 +
             (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C48255) *
                C4781 +
            ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
              C365 * C295 - C366 * C48227) *
                 C10513 +
             (C11322 - (C11323 + C11324) + C11325 - C11326 - C11327) * C48255) *
                C48232) *
               C48204 +
           (((C11331 + C11330 - C11314 - C11319 + C11320 + C11321) * C10513 +
             ((C113 * C1297 + C48121 * C1309) * C293 +
              (C113 * C1308 + C48121 * C1324) * C287 - C2198 * C294 -
              C2199 * C288 + C2200 * C295 + C2201 * C48227) *
                 C48255) *
                C4781 +
            ((C11324 + C11323 - C11322 - C11325 + C11326 + C11327) * C10513 +
             (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
              (C113 * C2185 + C48121 * C2186) * C295 +
              (C113 * C2187 + C48121 * C2188) * C48227) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C2299 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C2300 +
           (((C11713 + C11712) * C10513 + (C12674 + C12675) * C48255) * C4781 +
            ((C11711 + C11710) * C10513 + (C12658 + C12659) * C48255) *
                C48232) *
               C2301 -
           (((C12676 + C12677) * C48255 + (C12659 + C12658) * C10513) * C48232 +
            ((C12678 + C12679) * C48255 + (C12675 + C12674) * C10513) * C4781) *
               C48251) *
              C48203 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C2300 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C2299 -
           (((C13164 + C13165) * C48255 + (C11723 + C11722) * C10513) * C48232 +
            ((C13172 + C13173) * C48255 + (C11747 + C11746) * C10513) * C4781) *
               C2301 +
           (((C13173 + C13172) * C10513 +
             ((C113 * C6973 + C48121 * C6975) * C1160 +
              (C113 * C6976 + C48121 * C6979) * C47871) *
                 C48255) *
                C4781 +
            ((C13165 + C13164) * C10513 +
             ((C113 * C6974 + C48121 * C6977) * C1160 +
              (C113 * C6978 + C48121 * C6980) * C47871) *
                 C48255) *
                C48232) *
               C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48121 * C126) * C114 +
                (C113 * C127 + C48121 * C140) * C102 - C168 * C115 -
                C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C10513 +
               ((C113 * C486 + C48121 * C497) * C114 +
                (C113 * C496 + C48121 * C515) * C102 - C550 * C115 -
                C551 * C103 + C552 * C116 + C553 * C104 - C554 * C117 -
                C555 * C105 + C788 * C118 + C789 * C106) *
                   C48255) *
                  C4781 +
              ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                C176 * C118 + C177 * C106) *
                   C10513 +
               (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
                C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
                (C113 * C779 + C48121 * C780) * C118 +
                (C113 * C781 + C48121 * C782) * C106) *
                   C48255) *
                  C48232) *
             C47935 * C47923 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C48121 * C126) * C293 +
                 (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                 C169 * C288 + C170 * C295 + C171 * C48227) *
                    C10513 +
                ((C113 * C486 + C48121 * C497) * C293 +
                 (C113 * C496 + C48121 * C515) * C287 - C550 * C294 -
                 C551 * C288 + C552 * C295 + C553 * C48227) *
                    C48255) *
                   C4781 +
               ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                 C172 * C295 + C173 * C48227) *
                    C10513 +
                (C550 * C293 + C551 * C287 - C552 * C294 - C553 * C288 +
                 C554 * C295 + C555 * C48227) *
                    C48255) *
                   C48232) *
                  C47935 * C48274 +
              (((C361 * C294 -
                 ((C113 * C307 + C48121 * C326) * C287 +
                  (C113 * C297 + C48121 * C308) * C293) +
                 C362 * C288 - C363 * C295 - C364 * C48227) *
                    C10513 +
                (C968 * C294 -
                 ((C113 * C941 + C48121 * C950) * C287 +
                  (C113 * C935 + C48121 * C940) * C293) +
                 C969 * C288 - C970 * C295 - C971 * C48227) *
                    C48255) *
                   C4781 +
               ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                 C365 * C295 - C366 * C48227) *
                    C10513 +
                (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
                 C972 * C295 - C973 * C48227) *
                    C48255) *
                   C48232) *
                  C47935 * C48262 +
              ((((C113 * C301 + C48121 * C316) * C293 +
                 (C113 * C317 + C48121 * C331) * C287 - C367 * C294 -
                 C368 * C288 + C369 * C295 + C370 * C48227) *
                    C10513 +
                ((C113 * C1300 + C48121 * C1315) * C293 +
                 (C113 * C1314 + C48121 * C1327) * C287 - C1612 * C294 -
                 C1613 * C288 + C1614 * C295 + C1615 * C48227) *
                    C48255) *
                   C4781 +
               ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                 C371 * C295 + C372 * C48227) *
                    C10513 +
                (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
                 (C113 * C1599 + C48121 * C1600) * C295 +
                 (C113 * C1601 + C48121 * C1602) * C48227) *
                    C48255) *
                   C48232) *
                  C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C10513 +
            (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
               C4781 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48227) *
                C10513 +
            (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
               C48232) *
              C48275 +
          (((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C10513 +
            (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C48255) *
               C4781 +
           ((C10818 - (C10817 + C10816) + C10819 - C10820 - C10821) * C10513 +
            (C10830 - (C10831 + C10832) + C10833 - C10834 - C10835) * C48255) *
               C48232) *
              C48264 +
          (((C10843 + C10842 - C10822 - C10827 + C10828 + C10829) * C10513 +
            ((C113 * C2017 + C48121 * C2026) * C293 +
             (C113 * C2025 + C48121 * C2035) * C287 - C2316 * C294 -
             C2317 * C288 + C2318 * C295 + C2319 * C48227) *
                C48255) *
               C4781 +
           ((C10832 + C10831 - C10830 - C10833 + C10834 + C10835) * C10513 +
            (C2316 * C293 + C2317 * C287 - C2318 * C294 - C2319 * C288 +
             (C113 * C2303 + C48121 * C2304) * C295 +
             (C113 * C2305 + C48121 * C2306) * C48227) *
                C48255) *
               C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C10513 +
            (C10836 * C1089 + C10837 * C48271 - C550 * C1090 - C551 * C48258 +
             C552 * C1091 + C553 * C48227) *
                C48255) *
               C4781 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C10513 +
            (C550 * C1089 + C551 * C48271 - C552 * C1090 - C553 * C48258 +
             C554 * C1091 + C555 * C48227) *
                C48255) *
               C48232) *
              C47935 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C48121 * C326) * C48271 +
              (C113 * C297 + C48121 * C308) * C1089) +
             C362 * C48258 - C363 * C1091 - C364 * C48227) *
                C10513 +
            (C968 * C1090 - (C11328 * C48271 + C11329 * C1089) + C969 * C48258 -
             C970 * C1091 - C971 * C48227) *
                C48255) *
               C4781 +
           ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
             C365 * C1091 - C366 * C48227) *
                C10513 +
            (C970 * C1090 - (C969 * C48271 + C968 * C1089) + C971 * C48258 -
             C972 * C1091 - C973 * C48227) *
                C48255) *
               C48232) *
              C47935 * C1087 +
          ((((C113 * C301 + C48121 * C316) * C1089 +
             (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
             C368 * C48258 + C369 * C1091 + C370 * C48227) *
                C10513 +
            ((C113 * C1300 + C48121 * C1315) * C1089 +
             (C113 * C1314 + C48121 * C1327) * C48271 - C1612 * C1090 -
             C1613 * C48258 + C1614 * C1091 + C1615 * C48227) *
                C48255) *
               C4781 +
           ((C367 * C1089 + C368 * C48271 - C369 * C1090 - C370 * C48258 +
             C371 * C1091 + C372 * C48227) *
                C10513 +
            (C1612 * C1089 + C1613 * C48271 - C1614 * C1090 - C1615 * C48258 +
             (C113 * C1599 + C48121 * C1600) * C1091 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C10513 +
            (C10836 * C1160 + C10837 * C47871) * C48255) *
               C4781 +
           ((C168 * C1160 + C169 * C47871) * C10513 +
            (C550 * C1160 + C551 * C47871) * C48255) *
               C48232) *
              C47935 * C1155 -
          (((C969 * C47871 + C968 * C1160) * C48255 +
            (C362 * C47871 + C361 * C1160) * C10513) *
               C48232 +
           ((C11328 * C47871 + C11329 * C1160) * C48255 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C10513) *
               C4781) *
              C47935 * C1156 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C10513 +
            ((C113 * C1300 + C48121 * C1315) * C1160 +
             (C113 * C1314 + C48121 * C1327) * C47871) *
                C48255) *
               C4781 +
           ((C367 * C1160 + C368 * C47871) * C10513 +
            (C1612 * C1160 + C1613 * C47871) * C48255) *
               C48232) *
              C47935 * C1157 -
          ((((C113 * C1719 + C48121 * C1723) * C47871 +
             (C113 * C1714 + C48121 * C1718) * C1160) *
                C48255 +
            (C1451 * C47871 + C1450 * C1160) * C10513) *
               C48232 +
           (((C113 * C1717 + C48121 * C1722) * C47871 +
             (C113 * C1713 + C48121 * C1716) * C1160) *
                C48255 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C10513) *
               C4781) *
              C47935 * C1158 +
          ((((C113 * C1164 + C48121 * C1173) * C1160 +
             (C113 * C1174 + C48121 * C1182) * C47871) *
                C10513 +
            ((C113 * C6591 + C48121 * C6593) * C1160 +
             (C113 * C6594 + C48121 * C6597) * C47871) *
                C48255) *
               C4781 +
           (((C113 * C1165 + C48121 * C1175) * C1160 +
             (C113 * C1176 + C48121 * C1183) * C47871) *
                C10513 +
            ((C113 * C6592 + C48121 * C6595) * C1160 +
             (C113 * C6596 + C48121 * C6598) * C47871) *
                C48255) *
               C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48275 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C48264 +
           (((C11713 + C11712) * C10513 +
             ((C113 * C2017 + C48121 * C2026) * C1160 +
              (C113 * C2025 + C48121 * C2035) * C47871) *
                 C48255) *
                C4781 +
            ((C11711 + C11710) * C10513 +
             (C2316 * C1160 + C2317 * C47871) * C48255) *
                C48232) *
               C48238) *
              C1086 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C48264 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C48275 -
           ((((C113 * C2423 + C48121 * C2427) * C47871 +
              (C113 * C2418 + C48121 * C2422) * C1160) *
                 C48255 +
             (C11723 + C11722) * C10513) *
                C48232 +
            (((C113 * C2421 + C48121 * C2426) * C47871 +
              (C113 * C2417 + C48121 * C2420) * C1160) *
                 C48255 +
             (C11747 + C11746) * C10513) *
                C4781) *
               C48238) *
              C1087 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C10513 +
             (C11748 + C11749) * C48255) *
                C4781 +
            ((C367 * C1160 + C368 * C47871) * C10513 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C48275 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C10513) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C10513) * C4781) *
               C48264 +
           (((C11753 + C11752) * C10513 +
             ((C113 * C7459 + C48121 * C7461) * C1160 +
              (C113 * C7462 + C48121 * C7465) * C47871) *
                 C48255) *
                C4781 +
            ((C11751 + C11750) * C10513 +
             ((C113 * C7460 + C48121 * C7463) * C1160 +
              (C113 * C7464 + C48121 * C7466) * C47871) *
                 C48255) *
                C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C10513 +
            (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
               C4781 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C10513 +
            (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
               C48232) *
              C1835 +
          (((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C10513 +
            (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C48255) *
               C4781 +
           ((C12402 - (C12401 + C12400) + C12403 - C12404 - C12405) * C10513 +
            (C12412 - (C12413 + C12414) + C12415 - C12416 - C12417) * C48255) *
               C48232) *
              C1836 +
          (((C12408 + C12407 - C12406 - C12409 + C12410 + C12411) * C10513 +
            ((C113 * C2017 + C48121 * C2026) * C1089 +
             (C113 * C2025 + C48121 * C2035) * C48271 - C2316 * C1090 -
             C2317 * C48258 + C2318 * C1091 + C2319 * C48227) *
                C48255) *
               C4781 +
           ((C12414 + C12413 - C12412 - C12415 + C12416 + C12417) * C10513 +
            (C2316 * C1089 + C2317 * C48271 - C2318 * C1090 - C2319 * C48258 +
             (C113 * C2303 + C48121 * C2304) * C1091 +
             (C113 * C2305 + C48121 * C2306) * C48227) *
                C48255) *
               C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C1835 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C1836 +
           (((C11713 + C11712) * C10513 +
             ((C113 * C2017 + C48121 * C2026) * C1160 +
              (C113 * C2025 + C48121 * C2035) * C47871) *
                 C48255) *
                C4781 +
            ((C11711 + C11710) * C10513 +
             (C2316 * C1160 + C2317 * C47871) * C48255) *
                C48232) *
               C48238) *
              C48274 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C1836 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C1835 -
           ((((C113 * C2423 + C48121 * C2427) * C47871 +
              (C113 * C2418 + C48121 * C2422) * C1160) *
                 C48255 +
             (C11723 + C11722) * C10513) *
                C48232 +
            (((C113 * C2421 + C48121 * C2426) * C47871 +
              (C113 * C2417 + C48121 * C2420) * C1160) *
                 C48255 +
             (C11747 + C11746) * C10513) *
                C4781) *
               C48238) *
              C48262 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C10513 +
             (C11748 + C11749) * C48255) *
                C4781 +
            ((C367 * C1160 + C368 * C47871) * C10513 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C1835 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C10513) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C10513) * C4781) *
               C1836 +
           (((C11753 + C11752) * C10513 +
             ((C113 * C7459 + C48121 * C7461) * C1160 +
              (C113 * C7462 + C48121 * C7465) * C47871) *
                 C48255) *
                C4781 +
            ((C11751 + C11750) * C10513 +
             ((C113 * C7460 + C48121 * C7463) * C1160 +
              (C113 * C7464 + C48121 * C7466) * C47871) *
                 C48255) *
                C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C10513 +
            (C11706 + C11707) * C48255) *
               C4781 +
           ((C168 * C1160 + C169 * C47871) * C10513 +
            (C11708 + C11709) * C48255) *
               C48232) *
              C2010 -
          (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
           ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
              C2011 +
          (((C11713 + C11712) * C10513 + (C12674 + C12675) * C48255) * C4781 +
           ((C11711 + C11710) * C10513 + (C12658 + C12659) * C48255) * C48232) *
              C2012 -
          (((C12676 + C12677) * C48255 + (C12659 + C12658) * C10513) * C48232 +
           ((C12678 + C12679) * C48255 + (C12675 + C12674) * C10513) * C4781) *
              C2013 +
          (((C12679 + C12678) * C10513 +
            ((C113 * C12645 + C48121 * C12647) * C1160 +
             (C113 * C12648 + C48121 * C12651) * C47871) *
                C48255) *
               C4781 +
           ((C12677 + C12676) * C10513 +
            ((C113 * C12646 + C48121 * C12649) * C1160 +
             (C113 * C12650 + C48121 * C12652) * C47871) *
                C48255) *
               C48232) *
              C2014) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46986 +
              (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
              C169 * C47881) *
                 C10513 +
             (C12084 + C12085 - C12086 - C12087) * C48255) *
                C4781 +
            ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                 C10513 +
             (C12088 + C12089 - C12090 - C12091) * C48255) *
                C48232) *
               C48204 +
           (((C12086 - (C12085 + C12084) + C12087) * C10513 +
             (C556 * C46967 - (C10838 * C48186 + C10839 * C46986) +
              C557 * C47881) *
                 C48255) *
                C4781 +
            ((C12090 - (C12089 + C12088) + C12091) * C10513 +
             (C558 * C46967 - (C557 * C48186 + C556 * C46986) + C559 * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C1086 +
          ((((C361 * C46967 -
              ((C113 * C307 + C48121 * C326) * C48186 +
               (C113 * C297 + C48121 * C308) * C46986) +
              C362 * C47881) *
                 C10513 +
             (C12092 - (C12093 + C12094) + C12095) * C48255) *
                C4781 +
            ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                 C10513 +
             (C12096 - (C12097 + C12098) + C12099) * C48255) *
                C48232) *
               C48204 +
           (((C12094 + C12093 - C12092 - C12095) * C10513 +
             (C11738 * C46986 + C11739 * C48186 - C2198 * C46967 -
              C2199 * C47881) *
                 C48255) *
                C4781 +
            ((C12098 + C12097 - C12096 - C12099) * C10513 +
             (C2198 * C46986 + C2199 * C48186 - C2200 * C46967 -
              C2201 * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C1087 +
          (((((C113 * C301 + C48121 * C316) * C46986 +
              (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
              C368 * C47881) *
                 C10513 +
             (C12100 + C12101 - C12102 - C12103) * C48255) *
                C4781 +
            ((C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                 C10513 +
             (C12104 + C12105 - C12106 - C12107) * C48255) *
                C48232) *
               C48204 +
           (((C12102 - (C12101 + C12100) + C12103) * C10513 +
             (C11743 * C46967 - (C11744 * C48186 + C11745 * C46986) +
              C11742 * C47881) *
                 C48255) *
                C4781 +
            ((C12106 - (C12105 + C12104) + C12107) * C10513 +
             ((C113 * C1303 + C48121 * C1320) * C46967 -
              (C11742 * C48186 + C11743 * C46986) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C665 +
             (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
                C10513 +
            (C11104 + C11105 - C11106 - C11107 + C11108 + C11109 - C11110 -
             C11111) *
                C48255) *
               C4781 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
                C10513 +
            (C11112 + C11113 - C11114 - C11115 + C11116 + C11117 - C11118 -
             C11119) *
                C48255) *
               C48232) *
              C48204 +
          (((C11106 - (C11105 + C11104) + C11107 - C11108 - C11109 + C11110 +
             C11111) *
                C10513 +
            (C556 * C666 - (C10838 * C659 + C10839 * C665) + C557 * C660 -
             C558 * C667 - C559 * C661 + C560 * C668 + C561 * C48239) *
                C48255) *
               C4781 +
           ((C11114 - (C11113 + C11112) + C11115 - C11116 - C11117 + C11118 +
             C11119) *
                C10513 +
            (C558 * C666 - (C557 * C659 + C556 * C665) + C559 * C660 -
             C560 * C667 - C561 * C661 + (C113 * C494 + C48121 * C513) * C668 +
             (C113 * C514 + C48121 * C524) * C48239) *
                C48255) *
               C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C10513 +
            (C12084 + C12085 - C12086 - C12087) * C48255) *
               C4781 +
           ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C10513 +
            (C12088 + C12089 - C12090 - C12091) * C48255) *
               C48232) *
              C2299 +
          (((C12086 - (C12085 + C12084) + C12087) * C10513 +
            (C12874 - (C12875 + C12876) + C12877) * C48255) *
               C4781 +
           ((C12090 - (C12089 + C12088) + C12091) * C10513 +
            (C12878 - (C12879 + C12880) + C12881) * C48255) *
               C48232) *
              C2300 +
          (((C12876 + C12875 - C12874 - C12877) * C10513 +
            (C13026 + C13027 - C13028 - C13029) * C48255) *
               C4781 +
           ((C12880 + C12879 - C12878 - C12881) * C10513 +
            (C13030 + C13031 - C13032 - C13033) * C48255) *
               C48232) *
              C2301 +
          (((C13028 - (C13027 + C13026) + C13029) * C10513 +
            (C12671 * C46967 - (C12672 * C48186 + C12673 * C46986) +
             C12670 * C47881) *
                C48255) *
               C4781 +
           ((C13032 - (C13031 + C13030) + C13033) * C10513 +
            ((C113 * C2020 + C48121 * C2031) * C46967 -
             (C12670 * C48186 + C12671 * C46986) +
             (C113 * C2032 + C48121 * C2038) * C47881) *
                C48255) *
               C48232) *
              C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C10513 +
            ((C113 * C486 + C48121 * C497) * C293 +
             (C113 * C496 + C48121 * C515) * C287 - C550 * C294 - C551 * C288 +
             C552 * C295 + C553 * C48227) *
                C48255) *
               C4781 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48227) *
                C10513 +
            (C550 * C293 + C551 * C287 - C552 * C294 - C553 * C288 +
             C554 * C295 + C555 * C48227) *
                C48255) *
               C48232) *
              C47935 * C48274 +
          (((C361 * C294 -
             ((C113 * C307 + C48121 * C326) * C287 +
              (C113 * C297 + C48121 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C48227) *
                C10513 +
            (C968 * C294 -
             ((C113 * C941 + C48121 * C950) * C287 +
              (C113 * C935 + C48121 * C940) * C293) +
             C969 * C288 - C970 * C295 - C971 * C48227) *
                C48255) *
               C4781 +
           ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C48227) *
                C10513 +
            (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
             C972 * C295 - C973 * C48227) *
                C48255) *
               C48232) *
              C47935 * C48262 +
          ((((C113 * C301 + C48121 * C316) * C293 +
             (C113 * C317 + C48121 * C331) * C287 - C367 * C294 - C368 * C288 +
             C369 * C295 + C370 * C48227) *
                C10513 +
            ((C113 * C1300 + C48121 * C1315) * C293 +
             (C113 * C1314 + C48121 * C1327) * C287 - C1612 * C294 -
             C1613 * C288 + C1614 * C295 + C1615 * C48227) *
                C48255) *
               C4781 +
           ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
             C371 * C295 + C372 * C48227) *
                C10513 +
            (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
             (C113 * C1599 + C48121 * C1600) * C295 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C114 +
            (C113 * C127 + C48121 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C10513 +
           ((C113 * C486 + C48121 * C497) * C114 +
            (C113 * C496 + C48121 * C515) * C102 - C550 * C115 - C551 * C103 +
            C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
            C788 * C118 + C789 * C106) *
               C48255) *
              C4781 +
          ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C10513 +
           (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
            C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
            (C113 * C779 + C48121 * C780) * C118 +
            (C113 * C781 + C48121 * C782) * C106) *
               C48255) *
              C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C10513 +
            (C10836 * C1089 + C10837 * C48271 - C550 * C1090 - C551 * C48258 +
             C552 * C1091 + C553 * C48227) *
                C48255) *
               C4781 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C10513 +
            (C550 * C1089 + C551 * C48271 - C552 * C1090 - C553 * C48258 +
             C554 * C1091 + C555 * C48227) *
                C48255) *
               C48232) *
              C47935 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C48121 * C326) * C48271 +
              (C113 * C297 + C48121 * C308) * C1089) +
             C362 * C48258 - C363 * C1091 - C364 * C48227) *
                C10513 +
            (C968 * C1090 - (C11328 * C48271 + C11329 * C1089) + C969 * C48258 -
             C970 * C1091 - C971 * C48227) *
                C48255) *
               C4781 +
           ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
             C365 * C1091 - C366 * C48227) *
                C10513 +
            (C970 * C1090 - (C969 * C48271 + C968 * C1089) + C971 * C48258 -
             C972 * C1091 - C973 * C48227) *
                C48255) *
               C48232) *
              C47935 * C1087 +
          ((((C113 * C301 + C48121 * C316) * C1089 +
             (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
             C368 * C48258 + C369 * C1091 + C370 * C48227) *
                C10513 +
            ((C113 * C1300 + C48121 * C1315) * C1089 +
             (C113 * C1314 + C48121 * C1327) * C48271 - C1612 * C1090 -
             C1613 * C48258 + C1614 * C1091 + C1615 * C48227) *
                C48255) *
               C4781 +
           ((C367 * C1089 + C368 * C48271 - C369 * C1090 - C370 * C48258 +
             C371 * C1091 + C372 * C48227) *
                C10513 +
            (C1612 * C1089 + C1613 * C48271 - C1614 * C1090 - C1615 * C48258 +
             (C113 * C1599 + C48121 * C1600) * C1091 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C10513 +
            (C10836 * C1160 + C10837 * C47871) * C48255) *
               C4781 +
           ((C168 * C1160 + C169 * C47871) * C10513 +
            (C550 * C1160 + C551 * C47871) * C48255) *
               C48232) *
              C47935 * C1155 -
          (((C969 * C47871 + C968 * C1160) * C48255 +
            (C362 * C47871 + C361 * C1160) * C10513) *
               C48232 +
           ((C11328 * C47871 + C11329 * C1160) * C48255 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C10513) *
               C4781) *
              C47935 * C1156 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C10513 +
            ((C113 * C1300 + C48121 * C1315) * C1160 +
             (C113 * C1314 + C48121 * C1327) * C47871) *
                C48255) *
               C4781 +
           ((C367 * C1160 + C368 * C47871) * C10513 +
            (C1612 * C1160 + C1613 * C47871) * C48255) *
               C48232) *
              C47935 * C1157 -
          ((((C113 * C1719 + C48121 * C1723) * C47871 +
             (C113 * C1714 + C48121 * C1718) * C1160) *
                C48255 +
            (C1451 * C47871 + C1450 * C1160) * C10513) *
               C48232 +
           (((C113 * C1717 + C48121 * C1722) * C47871 +
             (C113 * C1713 + C48121 * C1716) * C1160) *
                C48255 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C10513) *
               C4781) *
              C47935 * C1158 +
          ((((C113 * C1164 + C48121 * C1173) * C1160 +
             (C113 * C1174 + C48121 * C1182) * C47871) *
                C10513 +
            ((C113 * C6591 + C48121 * C6593) * C1160 +
             (C113 * C6594 + C48121 * C6597) * C47871) *
                C48255) *
               C4781 +
           (((C113 * C1165 + C48121 * C1175) * C1160 +
             (C113 * C1176 + C48121 * C1183) * C47871) *
                C10513 +
            ((C113 * C6592 + C48121 * C6595) * C1160 +
             (C113 * C6596 + C48121 * C6598) * C47871) *
                C48255) *
               C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C10513 +
            (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
               C4781 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C10513 +
            (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
               C48232) *
              C1835 +
          (((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C10513 +
            (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C48255) *
               C4781 +
           ((C12402 - (C12401 + C12400) + C12403 - C12404 - C12405) * C10513 +
            (C12412 - (C12413 + C12414) + C12415 - C12416 - C12417) * C48255) *
               C48232) *
              C1836 +
          (((C12408 + C12407 - C12406 - C12409 + C12410 + C12411) * C10513 +
            ((C113 * C2017 + C48121 * C2026) * C1089 +
             (C113 * C2025 + C48121 * C2035) * C48271 - C2316 * C1090 -
             C2317 * C48258 + C2318 * C1091 + C2319 * C48227) *
                C48255) *
               C4781 +
           ((C12414 + C12413 - C12412 - C12415 + C12416 + C12417) * C10513 +
            (C2316 * C1089 + C2317 * C48271 - C2318 * C1090 - C2319 * C48258 +
             (C113 * C2303 + C48121 * C2304) * C1091 +
             (C113 * C2305 + C48121 * C2306) * C48227) *
                C48255) *
               C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C1835 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C1836 +
           (((C11713 + C11712) * C10513 +
             ((C113 * C2017 + C48121 * C2026) * C1160 +
              (C113 * C2025 + C48121 * C2035) * C47871) *
                 C48255) *
                C4781 +
            ((C11711 + C11710) * C10513 +
             (C2316 * C1160 + C2317 * C47871) * C48255) *
                C48232) *
               C48238) *
              C48274 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C1836 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C1835 -
           ((((C113 * C2423 + C48121 * C2427) * C47871 +
              (C113 * C2418 + C48121 * C2422) * C1160) *
                 C48255 +
             (C11723 + C11722) * C10513) *
                C48232 +
            (((C113 * C2421 + C48121 * C2426) * C47871 +
              (C113 * C2417 + C48121 * C2420) * C1160) *
                 C48255 +
             (C11747 + C11746) * C10513) *
                C4781) *
               C48238) *
              C48262 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C10513 +
             (C11748 + C11749) * C48255) *
                C4781 +
            ((C367 * C1160 + C368 * C47871) * C10513 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C1835 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C10513) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C10513) * C4781) *
               C1836 +
           (((C11753 + C11752) * C10513 +
             ((C113 * C7459 + C48121 * C7461) * C1160 +
              (C113 * C7462 + C48121 * C7465) * C47871) *
                 C48255) *
                C4781 +
            ((C11751 + C11750) * C10513 +
             ((C113 * C7460 + C48121 * C7463) * C1160 +
              (C113 * C7464 + C48121 * C7466) * C47871) *
                 C48255) *
                C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46996 +
              (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
              C169 * C47884 + C170 * C47002 + C171 * C2901) *
                 C10513 +
             (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C48255) *
                C4781 +
            ((C168 * C46996 + C169 * C47876 - C170 * C46992 - C171 * C47884 +
              C172 * C47002 + C173 * C2901) *
                 C10513 +
             (C14006 + C14007 - C14008 - C14009 + C14010 + C14011) * C48255) *
                C48232) *
               C3298 +
           (((C14002 - (C14001 + C14000) + C14003 - C14004 - C14005) * C10513 +
             (C556 * C46992 - (C10838 * C47876 + C10839 * C46996) +
              C557 * C47884 - C558 * C47002 - C559 * C2901) *
                 C48255) *
                C4781 +
            ((C14008 - (C14007 + C14006) + C14009 - C14010 - C14011) * C10513 +
             (C558 * C46992 - (C557 * C47876 + C556 * C46996) + C559 * C47884 -
              C560 * C47002 - C561 * C2901) *
                 C48255) *
                C48232) *
               C48022) *
              C48203 +
          ((((C361 * C46992 -
              ((C113 * C307 + C48121 * C326) * C47876 +
               (C113 * C297 + C48121 * C308) * C46996) +
              C362 * C47884 - C363 * C47002 - C364 * C2901) *
                 C10513 +
             (C14012 - (C14013 + C14014) + C14015 - C14016 - C14017) * C48255) *
                C4781 +
            ((C363 * C46992 - (C362 * C47876 + C361 * C46996) + C364 * C47884 -
              C365 * C47002 - C366 * C2901) *
                 C10513 +
             (C14018 - (C14019 + C14020) + C14021 - C14022 - C14023) * C48255) *
                C48232) *
               C3298 +
           (((C14014 + C14013 - C14012 - C14015 + C14016 + C14017) * C10513 +
             (C11738 * C46996 + C11739 * C47876 - C2198 * C46992 -
              C2199 * C47884 + C2200 * C47002 + C2201 * C2901) *
                 C48255) *
                C4781 +
            ((C14020 + C14019 - C14018 - C14021 + C14022 + C14023) * C10513 +
             (C2198 * C46996 + C2199 * C47876 - C2200 * C46992 -
              C2201 * C47884 + (C113 * C2185 + C48121 * C2186) * C47002 +
              (C113 * C2187 + C48121 * C2188) * C2901) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C2641 +
              (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
              C169 * C47881) *
                 C10513 +
             (C13628 + C13629 - C13630 - C13631) * C48255) *
                C4781 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                 C10513 +
             (C13632 + C13633 - C13634 - C13635) * C48255) *
                C48232) *
               C48018 +
           (((C13630 - (C13629 + C13628) + C13631) * C10513 +
             (C13636 - (C13637 + C13638) + C13639) * C48255) *
                C4781 +
            ((C13634 - (C13633 + C13632) + C13635) * C10513 +
             (C13640 - (C13641 + C13642) + C13643) * C48255) *
                C48232) *
               C48025 +
           (((C13638 + C13637 - C13636 - C13639) * C10513 +
             (C14696 + C14697 - C14698 - C14699) * C48255) *
                C4781 +
            ((C13642 + C13641 - C13640 - C13643) * C10513 +
             (C14700 + C14701 - C14702 - C14703) * C48255) *
                C48232) *
               C3806) *
              C48203 +
          ((((C361 * C2642 -
              ((C113 * C307 + C48121 * C326) * C2635 +
               (C113 * C297 + C48121 * C308) * C2641) +
              C362 * C47881) *
                 C10513 +
             (C13644 - (C13645 + C13646) + C13647) * C48255) *
                C4781 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                 C10513 +
             (C13648 - (C13649 + C13650) + C13651) * C48255) *
                C48232) *
               C48018 +
           (((C13646 + C13645 - C13644 - C13647) * C10513 +
             (C13652 + C13653 - C13654 - C13655) * C48255) *
                C4781 +
            ((C13650 + C13649 - C13648 - C13651) * C10513 +
             (C13656 + C13657 - C13658 - C13659) * C48255) *
                C48232) *
               C48025 +
           (((C13654 - (C13653 + C13652) + C13655) * C10513 +
             (C12894 * C2642 - (C13170 * C2635 + C13171 * C2641) +
              C12895 * C47881) *
                 C48255) *
                C4781 +
            ((C13658 - (C13657 + C13656) + C13659) * C10513 +
             ((C113 * C2419 + C48121 * C2424) * C2642 -
              (C12895 * C2635 + C12894 * C2641) +
              (C113 * C2425 + C48121 * C2428) * C47881) *
                 C48255) *
                C48232) *
               C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C2641 +
              (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
              C169 * C47881) *
                 C10513 +
             (C13628 + C13629 - C13630 - C13631) * C48255) *
                C4781 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                 C10513 +
             (C13632 + C13633 - C13634 - C13635) * C48255) *
                C48232) *
               C3298 +
           (((C13630 - (C13629 + C13628) + C13631) * C10513 +
             (C13636 - (C13637 + C13638) + C13639) * C48255) *
                C4781 +
            ((C13634 - (C13633 + C13632) + C13635) * C10513 +
             (C13640 - (C13641 + C13642) + C13643) * C48255) *
                C48232) *
               C48022) *
              C48274 +
          ((((C361 * C2642 -
              ((C113 * C307 + C48121 * C326) * C2635 +
               (C113 * C297 + C48121 * C308) * C2641) +
              C362 * C47881) *
                 C10513 +
             (C13644 - (C13645 + C13646) + C13647) * C48255) *
                C4781 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                 C10513 +
             (C13648 - (C13649 + C13650) + C13651) * C48255) *
                C48232) *
               C3298 +
           (((C13646 + C13645 - C13644 - C13647) * C10513 +
             (C13652 + C13653 - C13654 - C13655) * C48255) *
                C4781 +
            ((C13650 + C13649 - C13648 - C13651) * C10513 +
             (C13656 + C13657 - C13658 - C13659) * C48255) *
                C48232) *
               C48022) *
              C48262 +
          (((((C113 * C301 + C48121 * C316) * C2641 +
              (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
              C368 * C47881) *
                 C10513 +
             (C14218 + C14219 - C14220 - C14221) * C48255) *
                C4781 +
            ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                 C10513 +
             (C14222 + C14223 - C14224 - C14225) * C48255) *
                C48232) *
               C3298 +
           (((C14220 - (C14219 + C14218) + C14221) * C10513 +
             (C11743 * C2642 - (C11744 * C2635 + C11745 * C2641) +
              C11742 * C47881) *
                 C48255) *
                C4781 +
            ((C14224 - (C14223 + C14222) + C14225) * C10513 +
             ((C113 * C1303 + C48121 * C1320) * C2642 -
              (C11742 * C2635 + C11743 * C2641) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2533 +
             (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
             C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
             C173 * C48239) *
                C10513 +
            (C14356 + C14357 - C14358 - C14359 + C14360 + C14361 - C14362 -
             C14363) *
                C48255) *
               C4781 +
           ((C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
             C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
                C10513 +
            (C14364 + C14365 - C14366 - C14367 + C14368 + C14369 - C14370 -
             C14371) *
                C48255) *
               C48232) *
              C3298 +
          (((C14358 - (C14357 + C14356) + C14359 - C14360 - C14361 + C14362 +
             C14363) *
                C10513 +
            (C556 * C2534 - (C10838 * C48280 + C10839 * C2533) + C557 * C48273 -
             C558 * C2535 - C559 * C48260 + C560 * C2536 + C561 * C48239) *
                C48255) *
               C4781 +
           ((C14366 - (C14365 + C14364) + C14367 - C14368 - C14369 + C14370 +
             C14371) *
                C10513 +
            (C558 * C2534 - (C557 * C48280 + C556 * C2533) + C559 * C48273 -
             C560 * C2535 - C561 * C48260 +
             (C113 * C494 + C48121 * C513) * C2536 +
             (C113 * C514 + C48121 * C524) * C48239) *
                C48255) *
               C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C10513 +
            (C13628 + C13629 - C13630 - C13631) * C48255) *
               C4781 +
           ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C10513 +
            (C13632 + C13633 - C13634 - C13635) * C48255) *
               C48232) *
              C48282 +
          (((C13630 - (C13629 + C13628) + C13631) * C10513 +
            (C13636 - (C13637 + C13638) + C13639) * C48255) *
               C4781 +
           ((C13634 - (C13633 + C13632) + C13635) * C10513 +
            (C13640 - (C13641 + C13642) + C13643) * C48255) *
               C48232) *
              C48279 +
          (((C13638 + C13637 - C13636 - C13639) * C10513 +
            (C14696 + C14697 - C14698 - C14699) * C48255) *
               C4781 +
           ((C13642 + C13641 - C13640 - C13643) * C10513 +
            (C14700 + C14701 - C14702 - C14703) * C48255) *
               C48232) *
              C48270 +
          (((C14698 - (C14697 + C14696) + C14699) * C10513 +
            (C12671 * C2642 - (C12672 * C2635 + C12673 * C2641) +
             C12670 * C47881) *
                C48255) *
               C4781 +
           ((C14702 - (C14701 + C14700) + C14703) * C10513 +
            ((C113 * C2020 + C48121 * C2031) * C2642 -
             (C12670 * C2635 + C12671 * C2641) +
             (C113 * C2032 + C48121 * C2038) * C47881) *
                C48255) *
               C48232) *
              C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46996 +
             (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
             C169 * C47884 + C170 * C47002 + C171 * C2901) *
                C10513 +
            (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C48255) *
               C4781 +
           ((C168 * C46996 + C169 * C47876 - C170 * C46992 - C171 * C47884 +
             C172 * C47002 + C173 * C2901) *
                C10513 +
            (C14006 + C14007 - C14008 - C14009 + C14010 + C14011) * C48255) *
               C48232) *
              C48018 +
          (((C14002 - (C14001 + C14000) + C14003 - C14004 - C14005) * C10513 +
            (C15044 - (C15045 + C15046) + C15047 - C15048 - C15049) * C48255) *
               C4781 +
           ((C14008 - (C14007 + C14006) + C14009 - C14010 - C14011) * C10513 +
            (C15050 - (C15051 + C15052) + C15053 - C15054 - C15055) * C48255) *
               C48232) *
              C48025 +
          (((C15046 + C15045 - C15044 - C15047 + C15048 + C15049) * C10513 +
            (C12668 * C46996 + C12669 * C47876 - C2316 * C46992 -
             C2317 * C47884 + C2318 * C47002 + C2319 * C2901) *
                C48255) *
               C4781 +
           ((C15052 + C15051 - C15050 - C15053 + C15054 + C15055) * C10513 +
            (C2316 * C46996 + C2317 * C47876 - C2318 * C46992 - C2319 * C47884 +
             (C113 * C2303 + C48121 * C2304) * C47002 +
             (C113 * C2305 + C48121 * C2306) * C2901) *
                C48255) *
               C48232) *
              C3806) *
         C47923) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2533 +
             (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
             C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
             C173 * C48239) *
                C10513 +
            (C14356 + C14357 - C14358 - C14359 + C14360 + C14361 - C14362 -
             C14363) *
                C48255) *
               C4781 +
           ((C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
             C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
                C10513 +
            (C14364 + C14365 - C14366 - C14367 + C14368 + C14369 - C14370 -
             C14371) *
                C48255) *
               C48232) *
              C3298 +
          (((C14358 - (C14357 + C14356) + C14359 - C14360 - C14361 + C14362 +
             C14363) *
                C10513 +
            (C556 * C2534 - (C10838 * C48280 + C10839 * C2533) + C557 * C48273 -
             C558 * C2535 - C559 * C48260 + C560 * C2536 + C561 * C48239) *
                C48255) *
               C4781 +
           ((C14366 - (C14365 + C14364) + C14367 - C14368 - C14369 + C14370 +
             C14371) *
                C10513 +
            (C558 * C2534 - (C557 * C48280 + C556 * C2533) + C559 * C48273 -
             C560 * C2535 - C561 * C48260 +
             (C113 * C494 + C48121 * C513) * C2536 +
             (C113 * C514 + C48121 * C524) * C48239) *
                C48255) *
               C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C2641 +
              (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
              C169 * C47881) *
                 C10513 +
             (C13628 + C13629 - C13630 - C13631) * C48255) *
                C4781 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                 C10513 +
             (C13632 + C13633 - C13634 - C13635) * C48255) *
                C48232) *
               C3298 +
           (((C13630 - (C13629 + C13628) + C13631) * C10513 +
             (C13636 - (C13637 + C13638) + C13639) * C48255) *
                C4781 +
            ((C13634 - (C13633 + C13632) + C13635) * C10513 +
             (C13640 - (C13641 + C13642) + C13643) * C48255) *
                C48232) *
               C48022) *
              C48274 +
          ((((C361 * C2642 -
              ((C113 * C307 + C48121 * C326) * C2635 +
               (C113 * C297 + C48121 * C308) * C2641) +
              C362 * C47881) *
                 C10513 +
             (C13644 - (C13645 + C13646) + C13647) * C48255) *
                C4781 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                 C10513 +
             (C13648 - (C13649 + C13650) + C13651) * C48255) *
                C48232) *
               C3298 +
           (((C13646 + C13645 - C13644 - C13647) * C10513 +
             (C13652 + C13653 - C13654 - C13655) * C48255) *
                C4781 +
            ((C13650 + C13649 - C13648 - C13651) * C10513 +
             (C13656 + C13657 - C13658 - C13659) * C48255) *
                C48232) *
               C48022) *
              C48262 +
          (((((C113 * C301 + C48121 * C316) * C2641 +
              (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
              C368 * C47881) *
                 C10513 +
             (C14218 + C14219 - C14220 - C14221) * C48255) *
                C4781 +
            ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                 C10513 +
             (C14222 + C14223 - C14224 - C14225) * C48255) *
                C48232) *
               C3298 +
           (((C14220 - (C14219 + C14218) + C14221) * C10513 +
             (C11743 * C2642 - (C11744 * C2635 + C11745 * C2641) +
              C11742 * C47881) *
                 C48255) *
                C4781 +
            ((C14224 - (C14223 + C14222) + C14225) * C10513 +
             ((C113 * C1303 + C48121 * C1320) * C2642 -
              (C11742 * C2635 + C11743 * C2641) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C665 +
             (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
                C10513 +
            (C10836 * C665 + C10837 * C659 - C550 * C666 - C551 * C660 +
             C552 * C667 + C553 * C661 - C554 * C668 - C555 * C48239) *
                C48255) *
               C4781 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
                C10513 +
            (C550 * C665 + C551 * C659 - C552 * C666 - C553 * C660 +
             C554 * C667 + C555 * C661 - C788 * C668 - C789 * C48239) *
                C48255) *
               C48232) *
              C47935 * C48203 +
          (((C361 * C666 -
             ((C113 * C307 + C48121 * C326) * C659 +
              (C113 * C297 + C48121 * C308) * C665) +
             C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
             C366 * C48239) *
                C10513 +
            (C968 * C666 -
             ((C113 * C941 + C48121 * C950) * C659 +
              (C113 * C935 + C48121 * C940) * C665) +
             C969 * C660 - C970 * C667 - C971 * C661 + C972 * C668 +
             C973 * C48239) *
                C48255) *
               C4781 +
           ((C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
             C365 * C667 - C366 * C661 + C678 * C668 + C679 * C48239) *
                C10513 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C48121 * C948) * C668 +
             (C113 * C949 + C48121 * C954) * C48239) *
                C48255) *
               C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C10513 +
            (C10836 * C46986 + C10837 * C48186 - C550 * C46967 -
             C551 * C47881) *
                C48255) *
               C4781 +
           ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C10513 +
            (C550 * C46986 + C551 * C48186 - C552 * C46967 - C553 * C47881) *
                C48255) *
               C48232) *
              C47935 * C1431 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C10513 +
            (C968 * C46967 - (C11328 * C48186 + C11329 * C46986) +
             C969 * C47881) *
                C48255) *
               C4781 +
           ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                C10513 +
            (C970 * C46967 - (C969 * C48186 + C968 * C46986) + C971 * C47881) *
                C48255) *
               C48232) *
              C47935 * C1432 +
          ((((C113 * C301 + C48121 * C316) * C46986 +
             (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
             C368 * C47881) *
                C10513 +
            (C11740 * C46986 + C11741 * C48186 - C1612 * C46967 -
             C1613 * C47881) *
                C48255) *
               C4781 +
           ((C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                C10513 +
            (C1612 * C46986 + C1613 * C48186 - C1614 * C46967 -
             C1615 * C47881) *
                C48255) *
               C48232) *
              C47935 * C1433 +
          (((C1450 * C46967 -
             ((C113 * C1171 + C48121 * C1181) * C48186 +
              (C113 * C1163 + C48121 * C1172) * C46986) +
             C1451 * C47881) *
                C10513 +
            (C11888 * C46967 -
             ((C113 * C1717 + C48121 * C1722) * C48186 +
              (C113 * C1713 + C48121 * C1716) * C46986) +
             C11889 * C47881) *
                C48255) *
               C4781 +
           ((C1452 * C46967 - (C1451 * C48186 + C1450 * C46986) +
             C1453 * C47881) *
                C10513 +
            ((C113 * C1715 + C48121 * C1720) * C46967 -
             (C11889 * C48186 + C11888 * C46986) +
             (C113 * C1721 + C48121 * C1724) * C47881) *
                C48255) *
               C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C293 +
              (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C48227) *
                 C10513 +
             (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
                C4781 +
            ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C48227) *
                 C10513 +
             (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
                C48232) *
               C48204 +
           (((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C10513 +
             (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C48255) *
                C4781 +
            ((C10818 - (C10817 + C10816) + C10819 - C10820 - C10821) * C10513 +
             (C10830 - (C10831 + C10832) + C10833 - C10834 - C10835) * C48255) *
                C48232) *
               C48022) *
              C48203 +
          ((((C361 * C294 -
              ((C113 * C307 + C48121 * C326) * C287 +
               (C113 * C297 + C48121 * C308) * C293) +
              C362 * C288 - C363 * C295 - C364 * C48227) *
                 C10513 +
             (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C48255) *
                C4781 +
            ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
              C365 * C295 - C366 * C48227) *
                 C10513 +
             (C11322 - (C11323 + C11324) + C11325 - C11326 - C11327) * C48255) *
                C48232) *
               C48204 +
           (((C11331 + C11330 - C11314 - C11319 + C11320 + C11321) * C10513 +
             ((C113 * C1297 + C48121 * C1309) * C293 +
              (C113 * C1308 + C48121 * C1324) * C287 - C2198 * C294 -
              C2199 * C288 + C2200 * C295 + C2201 * C48227) *
                 C48255) *
                C4781 +
            ((C11324 + C11323 - C11322 - C11325 + C11326 + C11327) * C10513 +
             (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
              (C113 * C2185 + C48121 * C2186) * C295 +
              (C113 * C2187 + C48121 * C2188) * C48227) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48204 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C48022) *
              C1431 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C48022 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C48204) *
              C1432 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C10513 +
             (C11748 + C11749) * C48255) *
                C4781 +
            ((C367 * C1160 + C368 * C47871) * C10513 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C48204 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C10513) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C10513) * C4781) *
               C48022) *
              C1433 +
          ((((C12246 + C12247) * C10513 +
             ((C113 * C6105 + C48121 * C6107) * C1160 +
              (C113 * C6108 + C48121 * C6111) * C47871) *
                 C48255) *
                C4781 +
            ((C12242 + C12243) * C10513 +
             ((C113 * C6106 + C48121 * C6109) * C1160 +
              (C113 * C6110 + C48121 * C6112) * C47871) *
                 C48255) *
                C48232) *
               C48022 -
           (((C12243 + C12242) * C48255 +
             (C1451 * C47871 + C1450 * C1160) * C10513) *
                C48232 +
            ((C12247 + C12246) * C48255 +
             ((C113 * C1171 + C48121 * C1181) * C47871 +
              (C113 * C1163 + C48121 * C1172) * C1160) *
                 C10513) *
                C4781) *
               C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C10513 +
            ((C113 * C486 + C48121 * C497) * C293 +
             (C113 * C496 + C48121 * C515) * C287 - C550 * C294 - C551 * C288 +
             C552 * C295 + C553 * C48227) *
                C48255) *
               C4781 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48227) *
                C10513 +
            (C550 * C293 + C551 * C287 - C552 * C294 - C553 * C288 +
             C554 * C295 + C555 * C48227) *
                C48255) *
               C48232) *
              C47935 * C48274 +
          (((C361 * C294 -
             ((C113 * C307 + C48121 * C326) * C287 +
              (C113 * C297 + C48121 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C48227) *
                C10513 +
            (C968 * C294 -
             ((C113 * C941 + C48121 * C950) * C287 +
              (C113 * C935 + C48121 * C940) * C293) +
             C969 * C288 - C970 * C295 - C971 * C48227) *
                C48255) *
               C4781 +
           ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C48227) *
                C10513 +
            (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
             C972 * C295 - C973 * C48227) *
                C48255) *
               C48232) *
              C47935 * C48262 +
          ((((C113 * C301 + C48121 * C316) * C293 +
             (C113 * C317 + C48121 * C331) * C287 - C367 * C294 - C368 * C288 +
             C369 * C295 + C370 * C48227) *
                C10513 +
            ((C113 * C1300 + C48121 * C1315) * C293 +
             (C113 * C1314 + C48121 * C1327) * C287 - C1612 * C294 -
             C1613 * C288 + C1614 * C295 + C1615 * C48227) *
                C48255) *
               C4781 +
           ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
             C371 * C295 + C372 * C48227) *
                C10513 +
            (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
             (C113 * C1599 + C48121 * C1600) * C295 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C114 +
            (C113 * C127 + C48121 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C10513 +
           ((C113 * C486 + C48121 * C497) * C114 +
            (C113 * C496 + C48121 * C515) * C102 - C550 * C115 - C551 * C103 +
            C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
            C788 * C118 + C789 * C106) *
               C48255) *
              C4781 +
          ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C10513 +
           (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
            C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
            (C113 * C779 + C48121 * C780) * C118 +
            (C113 * C781 + C48121 * C782) * C106) *
               C48255) *
              C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C10513 +
            (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
               C4781 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48227) *
                C10513 +
            (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
               C48232) *
              C48275 +
          (((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C10513 +
            (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C48255) *
               C4781 +
           ((C10818 - (C10817 + C10816) + C10819 - C10820 - C10821) * C10513 +
            (C10830 - (C10831 + C10832) + C10833 - C10834 - C10835) * C48255) *
               C48232) *
              C48264 +
          (((C10843 + C10842 - C10822 - C10827 + C10828 + C10829) * C10513 +
            ((C113 * C2017 + C48121 * C2026) * C293 +
             (C113 * C2025 + C48121 * C2035) * C287 - C2316 * C294 -
             C2317 * C288 + C2318 * C295 + C2319 * C48227) *
                C48255) *
               C4781 +
           ((C10832 + C10831 - C10830 - C10833 + C10834 + C10835) * C10513 +
            (C2316 * C293 + C2317 * C287 - C2318 * C294 - C2319 * C288 +
             (C113 * C2303 + C48121 * C2304) * C295 +
             (C113 * C2305 + C48121 * C2306) * C48227) *
                C48255) *
               C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C10513 +
            (C10836 * C1089 + C10837 * C48271 - C550 * C1090 - C551 * C48258 +
             C552 * C1091 + C553 * C48227) *
                C48255) *
               C4781 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C10513 +
            (C550 * C1089 + C551 * C48271 - C552 * C1090 - C553 * C48258 +
             C554 * C1091 + C555 * C48227) *
                C48255) *
               C48232) *
              C47935 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C48121 * C326) * C48271 +
              (C113 * C297 + C48121 * C308) * C1089) +
             C362 * C48258 - C363 * C1091 - C364 * C48227) *
                C10513 +
            (C968 * C1090 - (C11328 * C48271 + C11329 * C1089) + C969 * C48258 -
             C970 * C1091 - C971 * C48227) *
                C48255) *
               C4781 +
           ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
             C365 * C1091 - C366 * C48227) *
                C10513 +
            (C970 * C1090 - (C969 * C48271 + C968 * C1089) + C971 * C48258 -
             C972 * C1091 - C973 * C48227) *
                C48255) *
               C48232) *
              C47935 * C1087 +
          ((((C113 * C301 + C48121 * C316) * C1089 +
             (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
             C368 * C48258 + C369 * C1091 + C370 * C48227) *
                C10513 +
            ((C113 * C1300 + C48121 * C1315) * C1089 +
             (C113 * C1314 + C48121 * C1327) * C48271 - C1612 * C1090 -
             C1613 * C48258 + C1614 * C1091 + C1615 * C48227) *
                C48255) *
               C4781 +
           ((C367 * C1089 + C368 * C48271 - C369 * C1090 - C370 * C48258 +
             C371 * C1091 + C372 * C48227) *
                C10513 +
            (C1612 * C1089 + C1613 * C48271 - C1614 * C1090 - C1615 * C48258 +
             (C113 * C1599 + C48121 * C1600) * C1091 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C10513 +
            (C10836 * C1160 + C10837 * C47871) * C48255) *
               C4781 +
           ((C168 * C1160 + C169 * C47871) * C10513 +
            (C550 * C1160 + C551 * C47871) * C48255) *
               C48232) *
              C47935 * C1155 -
          (((C969 * C47871 + C968 * C1160) * C48255 +
            (C362 * C47871 + C361 * C1160) * C10513) *
               C48232 +
           ((C11328 * C47871 + C11329 * C1160) * C48255 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C10513) *
               C4781) *
              C47935 * C1156 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C10513 +
            ((C113 * C1300 + C48121 * C1315) * C1160 +
             (C113 * C1314 + C48121 * C1327) * C47871) *
                C48255) *
               C4781 +
           ((C367 * C1160 + C368 * C47871) * C10513 +
            (C1612 * C1160 + C1613 * C47871) * C48255) *
               C48232) *
              C47935 * C1157 -
          ((((C113 * C1719 + C48121 * C1723) * C47871 +
             (C113 * C1714 + C48121 * C1718) * C1160) *
                C48255 +
            (C1451 * C47871 + C1450 * C1160) * C10513) *
               C48232 +
           (((C113 * C1717 + C48121 * C1722) * C47871 +
             (C113 * C1713 + C48121 * C1716) * C1160) *
                C48255 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C10513) *
               C4781) *
              C47935 * C1158 +
          ((((C113 * C1164 + C48121 * C1173) * C1160 +
             (C113 * C1174 + C48121 * C1182) * C47871) *
                C10513 +
            ((C113 * C6591 + C48121 * C6593) * C1160 +
             (C113 * C6594 + C48121 * C6597) * C47871) *
                C48255) *
               C4781 +
           (((C113 * C1165 + C48121 * C1175) * C1160 +
             (C113 * C1176 + C48121 * C1183) * C47871) *
                C10513 +
            ((C113 * C6592 + C48121 * C6595) * C1160 +
             (C113 * C6596 + C48121 * C6598) * C47871) *
                C48255) *
               C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C10513 +
             (C11706 + C11707) * C48255) *
                C4781 +
            ((C168 * C1160 + C169 * C47871) * C10513 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48275 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C10513) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C10513) * C4781) *
               C48264 +
           (((C11713 + C11712) * C10513 +
             ((C113 * C2017 + C48121 * C2026) * C1160 +
              (C113 * C2025 + C48121 * C2035) * C47871) *
                 C48255) *
                C4781 +
            ((C11711 + C11710) * C10513 +
             (C2316 * C1160 + C2317 * C47871) * C48255) *
                C48232) *
               C48238) *
              C1086 +
          ((((C11714 + C11715) * C10513 + (C11746 + C11747) * C48255) * C4781 +
            ((C11720 + C11721) * C10513 + (C11722 + C11723) * C48255) *
                C48232) *
               C48264 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C10513) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C10513) *
                C4781) *
               C48275 -
           ((((C113 * C2423 + C48121 * C2427) * C47871 +
              (C113 * C2418 + C48121 * C2422) * C1160) *
                 C48255 +
             (C11723 + C11722) * C10513) *
                C48232 +
            (((C113 * C2421 + C48121 * C2426) * C47871 +
              (C113 * C2417 + C48121 * C2420) * C1160) *
                 C48255 +
             (C11747 + C11746) * C10513) *
                C4781) *
               C48238) *
              C1087 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C10513 +
             (C11748 + C11749) * C48255) *
                C4781 +
            ((C367 * C1160 + C368 * C47871) * C10513 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C48275 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C10513) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C10513) * C4781) *
               C48264 +
           (((C11753 + C11752) * C10513 +
             ((C113 * C7459 + C48121 * C7461) * C1160 +
              (C113 * C7462 + C48121 * C7465) * C47871) *
                 C48255) *
                C4781 +
            ((C11751 + C11750) * C10513 +
             ((C113 * C7460 + C48121 * C7463) * C1160 +
              (C113 * C7464 + C48121 * C7466) * C47871) *
                 C48255) *
                C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C665 +
             (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
                C10513 +
            (C11104 + C11105 - C11106 - C11107 + C11108 + C11109 - C11110 -
             C11111) *
                C48255) *
               C4781 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
                C10513 +
            (C11112 + C11113 - C11114 - C11115 + C11116 + C11117 - C11118 -
             C11119) *
                C48255) *
               C48232) *
              C48204 +
          (((C11106 - (C11105 + C11104) + C11107 - C11108 - C11109 + C11110 +
             C11111) *
                C10513 +
            (C556 * C666 - (C10838 * C659 + C10839 * C665) + C557 * C660 -
             C558 * C667 - C559 * C661 + C560 * C668 + C561 * C48239) *
                C48255) *
               C4781 +
           ((C11114 - (C11113 + C11112) + C11115 - C11116 - C11117 + C11118 +
             C11119) *
                C10513 +
            (C558 * C666 - (C557 * C659 + C556 * C665) + C559 * C660 -
             C560 * C667 - C561 * C661 + (C113 * C494 + C48121 * C513) * C668 +
             (C113 * C514 + C48121 * C524) * C48239) *
                C48255) *
               C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46986 +
              (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
              C169 * C47881) *
                 C10513 +
             (C12084 + C12085 - C12086 - C12087) * C48255) *
                C4781 +
            ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                 C10513 +
             (C12088 + C12089 - C12090 - C12091) * C48255) *
                C48232) *
               C48204 +
           (((C12086 - (C12085 + C12084) + C12087) * C10513 +
             (C556 * C46967 - (C10838 * C48186 + C10839 * C46986) +
              C557 * C47881) *
                 C48255) *
                C4781 +
            ((C12090 - (C12089 + C12088) + C12091) * C10513 +
             (C558 * C46967 - (C557 * C48186 + C556 * C46986) + C559 * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C1086 +
          ((((C361 * C46967 -
              ((C113 * C307 + C48121 * C326) * C48186 +
               (C113 * C297 + C48121 * C308) * C46986) +
              C362 * C47881) *
                 C10513 +
             (C12092 - (C12093 + C12094) + C12095) * C48255) *
                C4781 +
            ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                 C10513 +
             (C12096 - (C12097 + C12098) + C12099) * C48255) *
                C48232) *
               C48204 +
           (((C12094 + C12093 - C12092 - C12095) * C10513 +
             (C11738 * C46986 + C11739 * C48186 - C2198 * C46967 -
              C2199 * C47881) *
                 C48255) *
                C4781 +
            ((C12098 + C12097 - C12096 - C12099) * C10513 +
             (C2198 * C46986 + C2199 * C48186 - C2200 * C46967 -
              C2201 * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C1087 +
          (((((C113 * C301 + C48121 * C316) * C46986 +
              (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
              C368 * C47881) *
                 C10513 +
             (C12100 + C12101 - C12102 - C12103) * C48255) *
                C4781 +
            ((C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                 C10513 +
             (C12104 + C12105 - C12106 - C12107) * C48255) *
                C48232) *
               C48204 +
           (((C12102 - (C12101 + C12100) + C12103) * C10513 +
             (C11743 * C46967 - (C11744 * C48186 + C11745 * C46986) +
              C11742 * C47881) *
                 C48255) *
                C4781 +
            ((C12106 - (C12105 + C12104) + C12107) * C10513 +
             ((C113 * C1303 + C48121 * C1320) * C46967 -
              (C11742 * C48186 + C11743 * C46986) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48121 * C126) * C114 +
                    (C113 * C127 + C48121 * C140) * C102 - C168 * C115 -
                    C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                    C173 * C105 + C174 * C118 + C175 * C106) *
                       C10513 +
                   ((C113 * C486 + C48121 * C497) * C114 +
                    (C113 * C496 + C48121 * C515) * C102 - C550 * C115 -
                    C551 * C103 + C552 * C116 + C553 * C104 - C554 * C117 -
                    C555 * C105 + C788 * C118 + C789 * C106) *
                       C48255) *
                      C4781 +
                  ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                    C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                    C176 * C118 + C177 * C106) *
                       C10513 +
                   (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
                    C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
                    (C113 * C779 + C48121 * C780) * C118 +
                    (C113 * C781 + C48121 * C782) * C106) *
                       C48255) *
                      C48232) *
                 C47935 * C47923) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C293 +
                     (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C48227) *
                        C10513 +
                    ((C113 * C486 + C48121 * C497) * C293 +
                     (C113 * C496 + C48121 * C515) * C287 - C550 * C294 -
                     C551 * C288 + C552 * C295 + C553 * C48227) *
                        C48255) *
                       C4781 +
                   ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C48227) *
                        C10513 +
                    (C550 * C293 + C551 * C287 - C552 * C294 - C553 * C288 +
                     C554 * C295 + C555 * C48227) *
                        C48255) *
                       C48232) *
                      C47935 * C48274 +
                  (((C361 * C294 -
                     ((C113 * C307 + C48121 * C326) * C287 +
                      (C113 * C297 + C48121 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C48227) *
                        C10513 +
                    (C968 * C294 -
                     ((C113 * C941 + C48121 * C950) * C287 +
                      (C113 * C935 + C48121 * C940) * C293) +
                     C969 * C288 - C970 * C295 - C971 * C48227) *
                        C48255) *
                       C4781 +
                   ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                     C365 * C295 - C366 * C48227) *
                        C10513 +
                    (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
                     C972 * C295 - C973 * C48227) *
                        C48255) *
                       C48232) *
                      C47935 * C48262 +
                  ((((C113 * C301 + C48121 * C316) * C293 +
                     (C113 * C317 + C48121 * C331) * C287 - C367 * C294 -
                     C368 * C288 + C369 * C295 + C370 * C48227) *
                        C10513 +
                    ((C113 * C1300 + C48121 * C1315) * C293 +
                     (C113 * C1314 + C48121 * C1327) * C287 - C1612 * C294 -
                     C1613 * C288 + C1614 * C295 + C1615 * C48227) *
                        C48255) *
                       C4781 +
                   ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                     C371 * C295 + C372 * C48227) *
                        C10513 +
                    (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
                     (C113 * C1599 + C48121 * C1600) * C295 +
                     (C113 * C1601 + C48121 * C1602) * C48227) *
                        C48255) *
                       C48232) *
                      C47935 * C48235)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C1089 +
                     (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
                     C169 * C48258 + C170 * C1091 + C171 * C48227) *
                        C10513 +
                    (C10836 * C1089 + C10837 * C48271 - C550 * C1090 -
                     C551 * C48258 + C552 * C1091 + C553 * C48227) *
                        C48255) *
                       C4781 +
                   ((C168 * C1089 + C169 * C48271 - C170 * C1090 -
                     C171 * C48258 + C172 * C1091 + C173 * C48227) *
                        C10513 +
                    (C550 * C1089 + C551 * C48271 - C552 * C1090 -
                     C553 * C48258 + C554 * C1091 + C555 * C48227) *
                        C48255) *
                       C48232) *
                      C47935 * C1086 +
                  (((C361 * C1090 -
                     ((C113 * C307 + C48121 * C326) * C48271 +
                      (C113 * C297 + C48121 * C308) * C1089) +
                     C362 * C48258 - C363 * C1091 - C364 * C48227) *
                        C10513 +
                    (C968 * C1090 - (C11328 * C48271 + C11329 * C1089) +
                     C969 * C48258 - C970 * C1091 - C971 * C48227) *
                        C48255) *
                       C4781 +
                   ((C363 * C1090 - (C362 * C48271 + C361 * C1089) +
                     C364 * C48258 - C365 * C1091 - C366 * C48227) *
                        C10513 +
                    (C970 * C1090 - (C969 * C48271 + C968 * C1089) +
                     C971 * C48258 - C972 * C1091 - C973 * C48227) *
                        C48255) *
                       C48232) *
                      C47935 * C1087 +
                  ((((C113 * C301 + C48121 * C316) * C1089 +
                     (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
                     C368 * C48258 + C369 * C1091 + C370 * C48227) *
                        C10513 +
                    ((C113 * C1300 + C48121 * C1315) * C1089 +
                     (C113 * C1314 + C48121 * C1327) * C48271 - C1612 * C1090 -
                     C1613 * C48258 + C1614 * C1091 + C1615 * C48227) *
                        C48255) *
                       C4781 +
                   ((C367 * C1089 + C368 * C48271 - C369 * C1090 -
                     C370 * C48258 + C371 * C1091 + C372 * C48227) *
                        C10513 +
                    (C1612 * C1089 + C1613 * C48271 - C1614 * C1090 -
                     C1615 * C48258 + (C113 * C1599 + C48121 * C1600) * C1091 +
                     (C113 * C1601 + C48121 * C1602) * C48227) *
                        C48255) *
                       C48232) *
                      C47935 * C48235)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48121 * C126) * C1160 +
                     (C113 * C127 + C48121 * C140) * C47871) *
                        C10513 +
                    (C10836 * C1160 + C10837 * C47871) * C48255) *
                       C4781 +
                   ((C168 * C1160 + C169 * C47871) * C10513 +
                    (C550 * C1160 + C551 * C47871) * C48255) *
                       C48232) *
                      C47935 * C1155 -
                  (((C969 * C47871 + C968 * C1160) * C48255 +
                    (C362 * C47871 + C361 * C1160) * C10513) *
                       C48232 +
                   ((C11328 * C47871 + C11329 * C1160) * C48255 +
                    ((C113 * C307 + C48121 * C326) * C47871 +
                     (C113 * C297 + C48121 * C308) * C1160) *
                        C10513) *
                       C4781) *
                      C47935 * C1156 +
                  ((((C113 * C301 + C48121 * C316) * C1160 +
                     (C113 * C317 + C48121 * C331) * C47871) *
                        C10513 +
                    ((C113 * C1300 + C48121 * C1315) * C1160 +
                     (C113 * C1314 + C48121 * C1327) * C47871) *
                        C48255) *
                       C4781 +
                   ((C367 * C1160 + C368 * C47871) * C10513 +
                    (C1612 * C1160 + C1613 * C47871) * C48255) *
                       C48232) *
                      C47935 * C1157 -
                  ((((C113 * C1719 + C48121 * C1723) * C47871 +
                     (C113 * C1714 + C48121 * C1718) * C1160) *
                        C48255 +
                    (C1451 * C47871 + C1450 * C1160) * C10513) *
                       C48232 +
                   (((C113 * C1717 + C48121 * C1722) * C47871 +
                     (C113 * C1713 + C48121 * C1716) * C1160) *
                        C48255 +
                    ((C113 * C1171 + C48121 * C1181) * C47871 +
                     (C113 * C1163 + C48121 * C1172) * C1160) *
                        C10513) *
                       C4781) *
                      C47935 * C1158 +
                  ((((C113 * C1164 + C48121 * C1173) * C1160 +
                     (C113 * C1174 + C48121 * C1182) * C47871) *
                        C10513 +
                    ((C113 * C6591 + C48121 * C6593) * C1160 +
                     (C113 * C6594 + C48121 * C6597) * C47871) *
                        C48255) *
                       C4781 +
                   (((C113 * C1165 + C48121 * C1175) * C1160 +
                     (C113 * C1176 + C48121 * C1183) * C47871) *
                        C10513 +
                    ((C113 * C6592 + C48121 * C6595) * C1160 +
                     (C113 * C6596 + C48121 * C6598) * C47871) *
                        C48255) *
                       C48232) *
                      C47935 * C1159)) /
                    (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C46996 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47876 -
            (C16370 + C16371) * C46992 - (C16372 + C16373) * C47884 +
            (C16374 + C16375) * C47002 + (C16376 + C16377) * C2901) *
               C48138 * C16333 +
           ((C16371 + C16370) * C46996 + (C16373 + C16372) * C47876 -
            (C16375 + C16374) * C46992 - (C16377 + C16376) * C47884 +
            (C16379 + C16378) * C47002 + (C16381 + C16380) * C2901) *
               C48138 * C48232) *
              C47935 * C47978 +
          (((C16564 + C16565) * C46992 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47876 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C46996) +
            (C16566 + C16567) * C47884 - (C16568 + C16569) * C47002 -
            (C16570 + C16571) * C2901) *
               C48138 * C16333 +
           ((C16569 + C16568) * C46992 -
            ((C16567 + C16566) * C47876 + (C16565 + C16564) * C46996) +
            (C16571 + C16570) * C47884 - (C16913 + C16912) * C47002 -
            (C16915 + C16914) * C2901) *
               C48138 * C48232) *
              C47935 * C47985 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C46996 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C47876 -
            (C16572 + C16573) * C46992 - (C16574 + C16575) * C47884 +
            (C16576 + C16577) * C47002 + (C16578 + C16579) * C2901) *
               C48138 * C16333 +
           ((C16573 + C16572) * C46996 + (C16575 + C16574) * C47876 -
            (C16577 + C16576) * C46992 - (C16579 + C16578) * C47884 +
            (C16335 * C304 + C16331 * C322 + C16336 * C1437 + C48253 * C1438) *
                C47002 +
            (C16335 * C323 + C16331 * C334 + C16336 * C1439 + C48253 * C1440) *
                C2901) *
               C48138 * C48232) *
              C47935 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C2641 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C2635 -
             (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
                C48138 * C16333 +
            ((C16371 + C16370) * C2641 + (C16373 + C16372) * C2635 -
             (C16375 + C16374) * C2642 - (C16377 + C16376) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C16758 + C16759) * C2642 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C2635 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C2641) +
             (C16760 + C16761) * C47881) *
                C48138 * C16333 +
            ((C16763 + C16762) * C2642 -
             ((C16761 + C16760) * C2635 + (C16759 + C16758) * C2641) +
             (C16765 + C16764) * C47881) *
                C48138 * C48232) *
               C48022) *
              C47978 +
          ((((C16564 + C16565) * C2642 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C2635 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C2641) +
             (C16566 + C16567) * C47881) *
                C48138 * C16333 +
            ((C16569 + C16568) * C2642 -
             ((C16567 + C16566) * C2635 + (C16565 + C16564) * C2641) +
             (C16571 + C16570) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C2641 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C2635 -
             (C17268 + C17269) * C2642 - (C17270 + C17271) * C47881) *
                C48138 * C16333 +
            ((C17269 + C17268) * C2641 + (C17271 + C17270) * C2635 -
             (C17273 + C17272) * C2642 - (C17275 + C17274) * C47881) *
                C48138 * C48232) *
               C48022) *
              C47985 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C2641 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C2635 -
             (C16572 + C16573) * C2642 - (C16574 + C16575) * C47881) *
                C48138 * C16333 +
            ((C16573 + C16572) * C2641 + (C16575 + C16574) * C2635 -
             (C16577 + C16576) * C2642 - (C16579 + C16578) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C17994 + C17995) * C2642 -
             ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
               C16331 * C1327) *
                  C2635 +
              (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
               C16331 * C1315) *
                  C2641) +
             (C17996 + C17997) * C47881) *
                C48138 * C16333 +
            ((C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
              C48253 * C1720) *
                 C2642 -
             ((C17997 + C17996) * C2635 + (C17995 + C17994) * C2641) +
             (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
              C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2641 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C2635 -
            (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
               C48138 * C16333 +
           ((C16371 + C16370) * C2641 + (C16373 + C16372) * C2635 -
            (C16375 + C16374) * C2642 - (C16377 + C16376) * C47881) *
               C48138 * C48232) *
              C47935 * C48281 +
          (((C16564 + C16565) * C2642 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C2635 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C2641) +
            (C16566 + C16567) * C47881) *
               C48138 * C16333 +
           ((C16569 + C16568) * C2642 -
            ((C16567 + C16566) * C2635 + (C16565 + C16564) * C2641) +
            (C16571 + C16570) * C47881) *
               C48138 * C48232) *
              C47935 * C48277 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C2641 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C2635 -
            (C16572 + C16573) * C2642 - (C16574 + C16575) * C47881) *
               C48138 * C16333 +
           ((C16573 + C16572) * C2641 + (C16575 + C16574) * C2635 -
            (C16577 + C16576) * C2642 - (C16579 + C16578) * C47881) *
               C48138 * C48232) *
              C47935 * C48267 +
          (((C17788 + C17789) * C2642 -
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C2635 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C2641) +
            (C17790 + C17791) * C47881) *
               C48138 * C16333 +
           ((C16335 * C1161 + C16331 * C1168 + C16336 * C1166 +
             C48253 * C1177) *
                C2642 -
            ((C17791 + C17790) * C2635 + (C17789 + C17788) * C2641) +
            (C16335 * C1167 + C16331 * C1179 + C16336 * C1178 +
             C48253 * C1184) *
                C47881) *
               C48138 * C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2533 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48280 -
            (C16370 + C16371) * C2534 - (C16372 + C16373) * C48273 +
            (C16374 + C16375) * C2535 + (C16376 + C16377) * C48260 -
            (C16378 + C16379) * C2536 - (C16380 + C16381) * C48239) *
               C48138 * C16333 +
           ((C16371 + C16370) * C2533 + (C16373 + C16372) * C48280 -
            (C16375 + C16374) * C2534 - (C16377 + C16376) * C48273 +
            (C16379 + C16378) * C2535 + (C16381 + C16380) * C48260 -
            (C16383 + C16382) * C2536 - (C16385 + C16384) * C48239) *
               C48138 * C48232) *
              C47935 * C2531 +
          (((C16564 + C16565) * C2534 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48280 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C2533) +
            (C16566 + C16567) * C48273 - (C16568 + C16569) * C2535 -
            (C16570 + C16571) * C48260 + (C16912 + C16913) * C2536 +
            (C16914 + C16915) * C48239) *
               C48138 * C16333 +
           ((C16569 + C16568) * C2534 -
            ((C16567 + C16566) * C48280 + (C16565 + C16564) * C2533) +
            (C16571 + C16570) * C48273 - (C16913 + C16912) * C2535 -
            (C16915 + C16914) * C48260 +
            (C16335 * C300 + C16331 * C314 + C16336 * C305 + C48253 * C324) *
                C2536 +
            (C16335 * C315 + C16331 * C330 + C16336 * C325 + C48253 * C335) *
                C48239) *
               C48138 * C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C2641 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C2635 -
             (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
                C48138 * C16333 +
            ((C16371 + C16370) * C2641 + (C16373 + C16372) * C2635 -
             (C16375 + C16374) * C2642 - (C16377 + C16376) * C47881) *
                C48138 * C48232) *
               C48275 +
           (((C16758 + C16759) * C2642 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C2635 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C2641) +
             (C16760 + C16761) * C47881) *
                C48138 * C16333 +
            ((C16763 + C16762) * C2642 -
             ((C16761 + C16760) * C2635 + (C16759 + C16758) * C2641) +
             (C16765 + C16764) * C47881) *
                C48138 * C48232) *
               C48264 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C2641 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C2635 -
             (C16766 + C16767) * C2642 - (C16768 + C16769) * C47881) *
                C48138 * C16333 +
            ((C16767 + C16766) * C2641 + (C16769 + C16768) * C2635 -
             (C16771 + C16770) * C2642 - (C16773 + C16772) * C47881) *
                C48138 * C48232) *
               C48238) *
              C2531 +
          ((((C16564 + C16565) * C2642 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C2635 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C2641) +
             (C16566 + C16567) * C47881) *
                C48138 * C16333 +
            ((C16569 + C16568) * C2642 -
             ((C16567 + C16566) * C2635 + (C16565 + C16564) * C2641) +
             (C16571 + C16570) * C47881) *
                C48138 * C48232) *
               C48275 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C2641 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C2635 -
             (C17268 + C17269) * C2642 - (C17270 + C17271) * C47881) *
                C48138 * C16333 +
            ((C17269 + C17268) * C2641 + (C17271 + C17270) * C2635 -
             (C17273 + C17272) * C2642 - (C17275 + C17274) * C47881) *
                C48138 * C48232) *
               C48264 +
           (((C18704 + C18705) * C2642 -
             ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
               C16331 * C1324) *
                  C2635 +
              (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
               C16331 * C1309) *
                  C2641) +
             (C18706 + C18707) * C47881) *
                C48138 * C16333 +
            ((C16335 * C1295 + C16331 * C1305 + C16336 * C1303 +
              C48253 * C1320) *
                 C2642 -
             ((C18707 + C18706) * C2635 + (C18705 + C18704) * C2641) +
             (C16335 * C1304 + C16331 * C1322 + C16336 * C1321 +
              C48253 * C1330) *
                 C47881) *
                C48138 * C48232) *
               C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46996 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47876 -
             (C16370 + C16371) * C46992 - (C16372 + C16373) * C47884 +
             (C16374 + C16375) * C47002 + (C16376 + C16377) * C2901) *
                C48138 * C16333 +
            ((C16371 + C16370) * C46996 + (C16373 + C16372) * C47876 -
             (C16375 + C16374) * C46992 - (C16377 + C16376) * C47884 +
             (C16379 + C16378) * C47002 + (C16381 + C16380) * C2901) *
                C48138 * C48232) *
               C48204 +
           (((C16758 + C16759) * C46992 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C47876 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C46996) +
             (C16760 + C16761) * C47884 - (C16762 + C16763) * C47002 -
             (C16764 + C16765) * C2901) *
                C48138 * C16333 +
            ((C16763 + C16762) * C46992 -
             ((C16761 + C16760) * C47876 + (C16759 + C16758) * C46996) +
             (C16765 + C16764) * C47884 - (C17055 + C17054) * C47002 -
             (C17057 + C17056) * C2901) *
                C48138 * C48232) *
               C48022) *
              C2531 +
          ((((C16564 + C16565) * C46992 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C47876 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46996) +
             (C16566 + C16567) * C47884 - (C16568 + C16569) * C47002 -
             (C16570 + C16571) * C2901) *
                C48138 * C16333 +
            ((C16569 + C16568) * C46992 -
             ((C16567 + C16566) * C47876 + (C16565 + C16564) * C46996) +
             (C16571 + C16570) * C47884 - (C16913 + C16912) * C47002 -
             (C16915 + C16914) * C2901) *
                C48138 * C48232) *
               C48204 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C46996 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47876 -
             (C17268 + C17269) * C46992 - (C17270 + C17271) * C47884 +
             (C17272 + C17273) * C47002 + (C17274 + C17275) * C2901) *
                C48138 * C16333 +
            ((C17269 + C17268) * C46996 + (C17271 + C17270) * C47876 -
             (C17273 + C17272) * C46992 - (C17275 + C17274) * C47884 +
             (C16335 * C938 + C16331 * C946 + C16336 * C1599 + C48253 * C1600) *
                 C47002 +
             (C16335 * C947 + C16331 * C953 + C16336 * C1601 + C48253 * C1602) *
                 C2901) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2533 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48280 -
            (C16370 + C16371) * C2534 - (C16372 + C16373) * C48273 +
            (C16374 + C16375) * C2535 + (C16376 + C16377) * C48260 -
            (C16378 + C16379) * C2536 - (C16380 + C16381) * C48239) *
               C48138 * C16333 +
           ((C16371 + C16370) * C2533 + (C16373 + C16372) * C48280 -
            (C16375 + C16374) * C2534 - (C16377 + C16376) * C48273 +
            (C16379 + C16378) * C2535 + (C16381 + C16380) * C48260 -
            (C16383 + C16382) * C2536 - (C16385 + C16384) * C48239) *
               C48138 * C48232) *
              C47935 * C2531 +
          (((C16564 + C16565) * C2534 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48280 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C2533) +
            (C16566 + C16567) * C48273 - (C16568 + C16569) * C2535 -
            (C16570 + C16571) * C48260 + (C16912 + C16913) * C2536 +
            (C16914 + C16915) * C48239) *
               C48138 * C16333 +
           ((C16569 + C16568) * C2534 -
            ((C16567 + C16566) * C48280 + (C16565 + C16564) * C2533) +
            (C16571 + C16570) * C48273 - (C16913 + C16912) * C2535 -
            (C16915 + C16914) * C48260 +
            (C16335 * C300 + C16331 * C314 + C16336 * C305 + C48253 * C324) *
                C2536 +
            (C16335 * C315 + C16331 * C330 + C16336 * C325 + C48253 * C335) *
                C48239) *
               C48138 * C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2641 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C2635 -
            (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
               C48138 * C16333 +
           ((C16371 + C16370) * C2641 + (C16373 + C16372) * C2635 -
            (C16375 + C16374) * C2642 - (C16377 + C16376) * C47881) *
               C48138 * C48232) *
              C47935 * C48281 +
          (((C16564 + C16565) * C2642 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C2635 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C2641) +
            (C16566 + C16567) * C47881) *
               C48138 * C16333 +
           ((C16569 + C16568) * C2642 -
            ((C16567 + C16566) * C2635 + (C16565 + C16564) * C2641) +
            (C16571 + C16570) * C47881) *
               C48138 * C48232) *
              C47935 * C48277 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C2641 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C2635 -
            (C16572 + C16573) * C2642 - (C16574 + C16575) * C47881) *
               C48138 * C16333 +
           ((C16573 + C16572) * C2641 + (C16575 + C16574) * C2635 -
            (C16577 + C16576) * C2642 - (C16579 + C16578) * C47881) *
               C48138 * C48232) *
              C47935 * C48267 +
          (((C17788 + C17789) * C2642 -
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C2635 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C2641) +
            (C17790 + C17791) * C47881) *
               C48138 * C16333 +
           ((C16335 * C1161 + C16331 * C1168 + C16336 * C1166 +
             C48253 * C1177) *
                C2642 -
            ((C17791 + C17790) * C2635 + (C17789 + C17788) * C2641) +
            (C16335 * C1167 + C16331 * C1179 + C16336 * C1178 +
             C48253 * C1184) *
                C47881) *
               C48138 * C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46986 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48186 -
             (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
                C48138 * C16333 +
            ((C16371 + C16370) * C46986 + (C16373 + C16372) * C48186 -
             (C16375 + C16374) * C46967 - (C16377 + C16376) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C16758 + C16759) * C46967 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C48186 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C46986) +
             (C16760 + C16761) * C47881) *
                C48138 * C16333 +
            ((C16763 + C16762) * C46967 -
             ((C16761 + C16760) * C48186 + (C16759 + C16758) * C46986) +
             (C16765 + C16764) * C47881) *
                C48138 * C48232) *
               C48022) *
              C47978 +
          ((((C16564 + C16565) * C46967 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48186 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46986) +
             (C16566 + C16567) * C47881) *
                C48138 * C16333 +
            ((C16569 + C16568) * C46967 -
             ((C16567 + C16566) * C48186 + (C16565 + C16564) * C46986) +
             (C16571 + C16570) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C46986 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C48186 -
             (C17268 + C17269) * C46967 - (C17270 + C17271) * C47881) *
                C48138 * C16333 +
            ((C17269 + C17268) * C46986 + (C17271 + C17270) * C48186 -
             (C17273 + C17272) * C46967 - (C17275 + C17274) * C47881) *
                C48138 * C48232) *
               C48022) *
              C47985 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C46986 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C48186 -
             (C16572 + C16573) * C46967 - (C16574 + C16575) * C47881) *
                C48138 * C16333 +
            ((C16573 + C16572) * C46986 + (C16575 + C16574) * C48186 -
             (C16577 + C16576) * C46967 - (C16579 + C16578) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C17994 + C17995) * C46967 -
             ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
               C16331 * C1327) *
                  C48186 +
              (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
               C16331 * C1315) *
                  C46986) +
             (C17996 + C17997) * C47881) *
                C48138 * C16333 +
            ((C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
              C48253 * C1720) *
                 C46967 -
             ((C17997 + C17996) * C48186 + (C17995 + C17994) * C46986) +
             (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
              C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C48018 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C48025 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C1160 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C16333 +
            ((C16767 + C16766) * C1160 + (C16769 + C16768) * C47871) * C48138 *
                C48232) *
               C3806) *
              C47978 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C48025 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C48018 -
           (((C18707 + C18706) * C47871 + (C18705 + C18704) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
              C16331 * C1324) *
                 C47871 +
             (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
              C16331 * C1309) *
                 C1160) *
                C48138 * C16333) *
               C3806) *
              C47985 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C16333 +
            ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
                C48232) *
               C48018 -
           (((C17997 + C17996) * C47871 + (C17995 + C17994) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
              C16331 * C1327) *
                 C47871 +
             (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
              C16331 * C1315) *
                 C1160) *
                C48138 * C16333) *
               C48025 +
           (((C16335 * C1301 + C16331 * C1316 + C16336 * C6105 +
              C48253 * C6107) *
                 C1160 +
             (C16335 * C1317 + C16331 * C1328 + C16336 * C6108 +
              C48253 * C6111) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C1160 +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47871) *
                C48138 * C48232) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C3298 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C48022) *
              C48281 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C48022 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C3298) *
              C48277 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C16333 +
            ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
                C48232) *
               C3298 -
           (((C17997 + C17996) * C47871 + (C17995 + C17994) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
              C16331 * C1327) *
                 C47871 +
             (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
              C16331 * C1315) *
                 C1160) *
                C48138 * C16333) *
               C48022) *
              C48267 +
          ((((C16335 * C1713 + C16331 * C1716 + C16336 * C6591 +
              C48253 * C6593) *
                 C1160 +
             (C16335 * C1717 + C16331 * C1722 + C16336 * C6594 +
              C48253 * C6597) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C1714 + C16331 * C1718 + C16336 * C6592 +
              C48253 * C6595) *
                 C1160 +
             (C16335 * C1719 + C16331 * C1723 + C16336 * C6596 +
              C48253 * C6598) *
                 C47871) *
                C48138 * C48232) *
               C48022 -
           (((C17791 + C17790) * C47871 + (C17789 + C17788) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C47871 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C1160) *
                C48138 * C16333) *
               C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1089 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48271 -
             (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
             (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1089 + (C16373 + C16372) * C48271 -
             (C16375 + C16374) * C1090 - (C16377 + C16376) * C48258 +
             (C16379 + C16378) * C1091 + (C16381 + C16380) * C48227) *
                C48138 * C48232) *
               C3298 +
           (((C16758 + C16759) * C1090 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C48271 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C1089) +
             (C16760 + C16761) * C48258 - (C16762 + C16763) * C1091 -
             (C16764 + C16765) * C48227) *
                C48138 * C16333 +
            ((C16763 + C16762) * C1090 -
             ((C16761 + C16760) * C48271 + (C16759 + C16758) * C1089) +
             (C16765 + C16764) * C48258 - (C17055 + C17054) * C1091 -
             (C17057 + C17056) * C48227) *
                C48138 * C48232) *
               C48022) *
              C2531 +
          ((((C16564 + C16565) * C1090 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48271 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C1089) +
             (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
             (C16570 + C16571) * C48227) *
                C48138 * C16333 +
            ((C16569 + C16568) * C1090 -
             ((C16567 + C16566) * C48271 + (C16565 + C16564) * C1089) +
             (C16571 + C16570) * C48258 - (C16913 + C16912) * C1091 -
             (C16915 + C16914) * C48227) *
                C48138 * C48232) *
               C3298 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1089 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C48271 -
             (C17268 + C17269) * C1090 - (C17270 + C17271) * C48258 +
             (C17272 + C17273) * C1091 + (C17274 + C17275) * C48227) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1089 + (C17271 + C17270) * C48271 -
             (C17273 + C17272) * C1090 - (C17275 + C17274) * C48258 +
             (C16335 * C938 + C16331 * C946 + C16336 * C1599 + C48253 * C1600) *
                 C1091 +
             (C16335 * C947 + C16331 * C953 + C16336 * C1601 + C48253 * C1602) *
                 C48227) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C48282 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C48279 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C1160 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C16333 +
            ((C16767 + C16766) * C1160 + (C16769 + C16768) * C47871) * C48138 *
                C48232) *
               C48270 -
           (((C18849 + C18848) * C47871 + (C18847 + C18846) * C1160) * C48138 *
                C48232 +
            ((C16336 * C2421 + C48253 * C2426 + C16335 * C2025 +
              C16331 * C2035) *
                 C47871 +
             (C16336 * C2417 + C48253 * C2420 + C16335 * C2017 +
              C16331 * C2026) *
                 C1160) *
                C48138 * C16333) *
               C48251) *
              C2531 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C48279 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C48282 -
           (((C18707 + C18706) * C47871 + (C18705 + C18704) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
              C16331 * C1324) *
                 C47871 +
             (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
              C16331 * C1309) *
                 C1160) *
                C48138 * C16333) *
               C48270 +
           (((C16335 * C2417 + C16331 * C2420 + C16336 * C7459 +
              C48253 * C7461) *
                 C1160 +
             (C16335 * C2421 + C16331 * C2426 + C16336 * C7462 +
              C48253 * C7465) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C2418 + C16331 * C2422 + C16336 * C7460 +
              C48253 * C7463) *
                 C1160 +
             (C16335 * C2423 + C16331 * C2427 + C16336 * C7464 +
              C48253 * C7466) *
                 C47871) *
                C48138 * C48232) *
               C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46986 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48186 -
             (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
                C48138 * C16333 +
            ((C16371 + C16370) * C46986 + (C16373 + C16372) * C48186 -
             (C16375 + C16374) * C46967 - (C16377 + C16376) * C47881) *
                C48138 * C48232) *
               C48018 +
           (((C16758 + C16759) * C46967 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C48186 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C46986) +
             (C16760 + C16761) * C47881) *
                C48138 * C16333 +
            ((C16763 + C16762) * C46967 -
             ((C16761 + C16760) * C48186 + (C16759 + C16758) * C46986) +
             (C16765 + C16764) * C47881) *
                C48138 * C48232) *
               C48025 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C46986 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C48186 -
             (C16766 + C16767) * C46967 - (C16768 + C16769) * C47881) *
                C48138 * C16333 +
            ((C16767 + C16766) * C46986 + (C16769 + C16768) * C48186 -
             (C16771 + C16770) * C46967 - (C16773 + C16772) * C47881) *
                C48138 * C48232) *
               C3806) *
              C2531 +
          ((((C16564 + C16565) * C46967 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48186 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46986) +
             (C16566 + C16567) * C47881) *
                C48138 * C16333 +
            ((C16569 + C16568) * C46967 -
             ((C16567 + C16566) * C48186 + (C16565 + C16564) * C46986) +
             (C16571 + C16570) * C47881) *
                C48138 * C48232) *
               C48018 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C46986 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C48186 -
             (C17268 + C17269) * C46967 - (C17270 + C17271) * C47881) *
                C48138 * C16333 +
            ((C17269 + C17268) * C46986 + (C17271 + C17270) * C48186 -
             (C17273 + C17272) * C46967 - (C17275 + C17274) * C47881) *
                C48138 * C48232) *
               C48025 +
           (((C18704 + C18705) * C46967 -
             ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
               C16331 * C1324) *
                  C48186 +
              (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
               C16331 * C1309) *
                  C46986) +
             (C18706 + C18707) * C47881) *
                C48138 * C16333 +
            ((C16335 * C1295 + C16331 * C1305 + C16336 * C1303 +
              C48253 * C1320) *
                 C46967 -
             ((C18707 + C18706) * C48186 + (C18705 + C18704) * C46986) +
             (C16335 * C1304 + C16331 * C1322 + C16336 * C1321 +
              C48253 * C1330) *
                 C47881) *
                C48138 * C48232) *
               C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1089 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48271 -
             (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
             (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1089 + (C16373 + C16372) * C48271 -
             (C16375 + C16374) * C1090 - (C16377 + C16376) * C48258 +
             (C16379 + C16378) * C1091 + (C16381 + C16380) * C48227) *
                C48138 * C48232) *
               C3298 +
           (((C16758 + C16759) * C1090 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C48271 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C1089) +
             (C16760 + C16761) * C48258 - (C16762 + C16763) * C1091 -
             (C16764 + C16765) * C48227) *
                C48138 * C16333 +
            ((C16763 + C16762) * C1090 -
             ((C16761 + C16760) * C48271 + (C16759 + C16758) * C1089) +
             (C16765 + C16764) * C48258 - (C17055 + C17054) * C1091 -
             (C17057 + C17056) * C48227) *
                C48138 * C48232) *
               C48022) *
              C2531 +
          ((((C16564 + C16565) * C1090 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48271 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C1089) +
             (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
             (C16570 + C16571) * C48227) *
                C48138 * C16333 +
            ((C16569 + C16568) * C1090 -
             ((C16567 + C16566) * C48271 + (C16565 + C16564) * C1089) +
             (C16571 + C16570) * C48258 - (C16913 + C16912) * C1091 -
             (C16915 + C16914) * C48227) *
                C48138 * C48232) *
               C3298 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1089 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C48271 -
             (C17268 + C17269) * C1090 - (C17270 + C17271) * C48258 +
             (C17272 + C17273) * C1091 + (C17274 + C17275) * C48227) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1089 + (C17271 + C17270) * C48271 -
             (C17273 + C17272) * C1090 - (C17275 + C17274) * C48258 +
             (C16335 * C938 + C16331 * C946 + C16336 * C1599 + C48253 * C1600) *
                 C1091 +
             (C16335 * C947 + C16331 * C953 + C16336 * C1601 + C48253 * C1602) *
                 C48227) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C3298 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C48022) *
              C48281 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C48022 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C3298) *
              C48277 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C16333 +
            ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
                C48232) *
               C3298 -
           (((C17997 + C17996) * C47871 + (C17995 + C17994) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
              C16331 * C1327) *
                 C47871 +
             (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
              C16331 * C1315) *
                 C1160) *
                C48138 * C16333) *
               C48022) *
              C48267 +
          ((((C16335 * C1713 + C16331 * C1716 + C16336 * C6591 +
              C48253 * C6593) *
                 C1160 +
             (C16335 * C1717 + C16331 * C1722 + C16336 * C6594 +
              C48253 * C6597) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C1714 + C16331 * C1718 + C16336 * C6592 +
              C48253 * C6595) *
                 C1160 +
             (C16335 * C1719 + C16331 * C1723 + C16336 * C6596 +
              C48253 * C6598) *
                 C47871) *
                C48138 * C48232) *
               C48022 -
           (((C17791 + C17790) * C47871 + (C17789 + C17788) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C47871 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C1160) *
                C48138 * C16333) *
               C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C46986 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48186 -
            (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
               C48138 * C16333 +
           ((C16371 + C16370) * C46986 + (C16373 + C16372) * C48186 -
            (C16375 + C16374) * C46967 - (C16377 + C16376) * C47881) *
               C48138 * C48232) *
              C47935 * C1431 +
          (((C16564 + C16565) * C46967 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48186 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C46986) +
            (C16566 + C16567) * C47881) *
               C48138 * C16333 +
           ((C16569 + C16568) * C46967 -
            ((C16567 + C16566) * C48186 + (C16565 + C16564) * C46986) +
            (C16571 + C16570) * C47881) *
               C48138 * C48232) *
              C47935 * C1432 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C46986 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48186 -
            (C16572 + C16573) * C46967 - (C16574 + C16575) * C47881) *
               C48138 * C16333 +
           ((C16573 + C16572) * C46986 + (C16575 + C16574) * C48186 -
            (C16577 + C16576) * C46967 - (C16579 + C16578) * C47881) *
               C48138 * C48232) *
              C47935 * C1433 +
          (((C17788 + C17789) * C46967 -
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C48186 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C46986) +
            (C17790 + C17791) * C47881) *
               C48138 * C16333 +
           ((C16335 * C1161 + C16331 * C1168 + C16336 * C1166 +
             C48253 * C1177) *
                C46967 -
            ((C17791 + C17790) * C48186 + (C17789 + C17788) * C46986) +
            (C16335 * C1167 + C16331 * C1179 + C16336 * C1178 +
             C48253 * C1184) *
                C47881) *
               C48138 * C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C665 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C659 -
            (C16370 + C16371) * C666 - (C16372 + C16373) * C660 +
            (C16374 + C16375) * C667 + (C16376 + C16377) * C661 -
            (C16378 + C16379) * C668 - (C16380 + C16381) * C48239) *
               C48138 * C16333 +
           ((C16371 + C16370) * C665 + (C16373 + C16372) * C659 -
            (C16375 + C16374) * C666 - (C16377 + C16376) * C660 +
            (C16379 + C16378) * C667 + (C16381 + C16380) * C661 -
            (C16383 + C16382) * C668 - (C16385 + C16384) * C48239) *
               C48138 * C48232) *
              C47935 * C48203 +
          (((C16564 + C16565) * C666 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C659 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C665) +
            (C16566 + C16567) * C660 - (C16568 + C16569) * C667 -
            (C16570 + C16571) * C661 + (C16912 + C16913) * C668 +
            (C16914 + C16915) * C48239) *
               C48138 * C16333 +
           ((C16569 + C16568) * C666 -
            ((C16567 + C16566) * C659 + (C16565 + C16564) * C665) +
            (C16571 + C16570) * C660 - (C16913 + C16912) * C667 -
            (C16915 + C16914) * C661 +
            (C16335 * C300 + C16331 * C314 + C16336 * C305 + C48253 * C324) *
                C668 +
            (C16335 * C315 + C16331 * C330 + C16336 * C325 + C48253 * C335) *
                C48239) *
               C48138 * C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46986 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48186 -
             (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
                C48138 * C16333 +
            ((C16371 + C16370) * C46986 + (C16373 + C16372) * C48186 -
             (C16375 + C16374) * C46967 - (C16377 + C16376) * C47881) *
                C48138 * C48232) *
               C1835 +
           (((C16758 + C16759) * C46967 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C48186 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C46986) +
             (C16760 + C16761) * C47881) *
                C48138 * C16333 +
            ((C16763 + C16762) * C46967 -
             ((C16761 + C16760) * C48186 + (C16759 + C16758) * C46986) +
             (C16765 + C16764) * C47881) *
                C48138 * C48232) *
               C1836 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C46986 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C48186 -
             (C16766 + C16767) * C46967 - (C16768 + C16769) * C47881) *
                C48138 * C16333 +
            ((C16767 + C16766) * C46986 + (C16769 + C16768) * C48186 -
             (C16771 + C16770) * C46967 - (C16773 + C16772) * C47881) *
                C48138 * C48232) *
               C48238) *
              C48203 +
          ((((C16564 + C16565) * C46967 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48186 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46986) +
             (C16566 + C16567) * C47881) *
                C48138 * C16333 +
            ((C16569 + C16568) * C46967 -
             ((C16567 + C16566) * C48186 + (C16565 + C16564) * C46986) +
             (C16571 + C16570) * C47881) *
                C48138 * C48232) *
               C1835 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C46986 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C48186 -
             (C17268 + C17269) * C46967 - (C17270 + C17271) * C47881) *
                C48138 * C16333 +
            ((C17269 + C17268) * C46986 + (C17271 + C17270) * C48186 -
             (C17273 + C17272) * C46967 - (C17275 + C17274) * C47881) *
                C48138 * C48232) *
               C1836 +
           (((C18704 + C18705) * C46967 -
             ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
               C16331 * C1324) *
                  C48186 +
              (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
               C16331 * C1309) *
                  C46986) +
             (C18706 + C18707) * C47881) *
                C48138 * C16333 +
            ((C16335 * C1295 + C16331 * C1305 + C16336 * C1303 +
              C48253 * C1320) *
                 C46967 -
             ((C18707 + C18706) * C48186 + (C18705 + C18704) * C46986) +
             (C16335 * C1304 + C16331 * C1322 + C16336 * C1321 +
              C48253 * C1330) *
                 C47881) *
                C48138 * C48232) *
               C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C48204 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C48022) *
              C1431 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C48022 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C48204) *
              C1432 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C16333 +
            ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
                C48232) *
               C48204 -
           (((C17997 + C17996) * C47871 + (C17995 + C17994) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
              C16331 * C1327) *
                 C47871 +
             (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
              C16331 * C1315) *
                 C1160) *
                C48138 * C16333) *
               C48022) *
              C1433 +
          ((((C16335 * C1713 + C16331 * C1716 + C16336 * C6591 +
              C48253 * C6593) *
                 C1160 +
             (C16335 * C1717 + C16331 * C1722 + C16336 * C6594 +
              C48253 * C6597) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C1714 + C16331 * C1718 + C16336 * C6592 +
              C48253 * C6595) *
                 C1160 +
             (C16335 * C1719 + C16331 * C1723 + C16336 * C6596 +
              C48253 * C6598) *
                 C47871) *
                C48138 * C48232) *
               C48022 -
           (((C17791 + C17790) * C47871 + (C17789 + C17788) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C47871 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C1160) *
                C48138 * C16333) *
               C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C293 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C287 -
             (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
             (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
                C48138 * C16333 +
            ((C16371 + C16370) * C293 + (C16373 + C16372) * C287 -
             (C16375 + C16374) * C294 - (C16377 + C16376) * C288 +
             (C16379 + C16378) * C295 + (C16381 + C16380) * C48227) *
                C48138 * C48232) *
               C48204 +
           (((C16758 + C16759) * C294 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C287 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C293) +
             (C16760 + C16761) * C288 - (C16762 + C16763) * C295 -
             (C16764 + C16765) * C48227) *
                C48138 * C16333 +
            ((C16763 + C16762) * C294 -
             ((C16761 + C16760) * C287 + (C16759 + C16758) * C293) +
             (C16765 + C16764) * C288 - (C17055 + C17054) * C295 -
             (C17057 + C17056) * C48227) *
                C48138 * C48232) *
               C48022) *
              C48203 +
          ((((C16564 + C16565) * C294 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C287 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C293) +
             (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
             (C16570 + C16571) * C48227) *
                C48138 * C16333 +
            ((C16569 + C16568) * C294 -
             ((C16567 + C16566) * C287 + (C16565 + C16564) * C293) +
             (C16571 + C16570) * C288 - (C16913 + C16912) * C295 -
             (C16915 + C16914) * C48227) *
                C48138 * C48232) *
               C48204 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C293 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C287 -
             (C17268 + C17269) * C294 - (C17270 + C17271) * C288 +
             (C17272 + C17273) * C295 + (C17274 + C17275) * C48227) *
                C48138 * C16333 +
            ((C17269 + C17268) * C293 + (C17271 + C17270) * C287 -
             (C17273 + C17272) * C294 - (C17275 + C17274) * C288 +
             (C16335 * C938 + C16331 * C946 + C16336 * C1599 + C48253 * C1600) *
                 C295 +
             (C16335 * C947 + C16331 * C953 + C16336 * C1601 + C48253 * C1602) *
                 C48227) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C2299 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C2300 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C1160 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C16333 +
            ((C16767 + C16766) * C1160 + (C16769 + C16768) * C47871) * C48138 *
                C48232) *
               C2301 -
           (((C18849 + C18848) * C47871 + (C18847 + C18846) * C1160) * C48138 *
                C48232 +
            ((C16336 * C2421 + C48253 * C2426 + C16335 * C2025 +
              C16331 * C2035) *
                 C47871 +
             (C16336 * C2417 + C48253 * C2420 + C16335 * C2017 +
              C16331 * C2026) *
                 C1160) *
                C48138 * C16333) *
               C48251) *
              C48203 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C2300 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C2299 -
           (((C18707 + C18706) * C47871 + (C18705 + C18704) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
              C16331 * C1324) *
                 C47871 +
             (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
              C16331 * C1309) *
                 C1160) *
                C48138 * C16333) *
               C2301 +
           (((C16335 * C2417 + C16331 * C2420 + C16336 * C7459 +
              C48253 * C7461) *
                 C1160 +
             (C16335 * C2421 + C16331 * C2426 + C16336 * C7462 +
              C48253 * C7465) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C2418 + C16331 * C2422 + C16336 * C7460 +
              C48253 * C7463) *
                 C1160 +
             (C16335 * C2423 + C16331 * C2427 + C16336 * C7464 +
              C48253 * C7466) *
                 C47871) *
                C48138 * C48232) *
               C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                   C114 +
               (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                   C102 -
               (C16370 + C16371) * C115 - (C16372 + C16373) * C103 +
               (C16374 + C16375) * C116 + (C16376 + C16377) * C104 -
               (C16378 + C16379) * C117 - (C16380 + C16381) * C105 +
               (C16382 + C16383) * C118 + (C16384 + C16385) * C106) *
                  C48138 * C16333 +
              ((C16371 + C16370) * C114 + (C16373 + C16372) * C102 -
               (C16375 + C16374) * C115 - (C16377 + C16376) * C103 +
               (C16379 + C16378) * C116 + (C16381 + C16380) * C104 -
               (C16383 + C16382) * C117 - (C16385 + C16384) * C105 +
               (C16335 * C124 + C16331 * C136 + C16336 * C669 + C48253 * C670) *
                   C118 +
               (C16335 * C137 + C16331 * C145 + C16336 * C671 + C48253 * C672) *
                   C106) *
                  C48138 * C48232) *
             C47935 * C47923 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16335 * C119 + C16331 * C126 + C16336 * C297 +
                 C48253 * C308) *
                    C293 +
                (C16335 * C127 + C16331 * C140 + C16336 * C307 +
                 C48253 * C326) *
                    C287 -
                (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
                (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
                   C48138 * C16333 +
               ((C16371 + C16370) * C293 + (C16373 + C16372) * C287 -
                (C16375 + C16374) * C294 - (C16377 + C16376) * C288 +
                (C16379 + C16378) * C295 + (C16381 + C16380) * C48227) *
                   C48138 * C48232) *
                  C47935 * C48274 +
              (((C16564 + C16565) * C294 -
                ((C16336 * C317 + C48253 * C331 + C16335 * C307 +
                  C16331 * C326) *
                     C287 +
                 (C16336 * C301 + C48253 * C316 + C16335 * C297 +
                  C16331 * C308) *
                     C293) +
                (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
                (C16570 + C16571) * C48227) *
                   C48138 * C16333 +
               ((C16569 + C16568) * C294 -
                ((C16567 + C16566) * C287 + (C16565 + C16564) * C293) +
                (C16571 + C16570) * C288 -
                (C16336 * C304 + C48253 * C322 + C16335 * C299 +
                 C16331 * C312) *
                    C295 -
                (C16336 * C323 + C48253 * C334 + C16335 * C313 +
                 C16331 * C329) *
                    C48227) *
                   C48138 * C48232) *
                  C47935 * C48262 +
              (((C16335 * C301 + C16331 * C316 + C16336 * C1163 +
                 C48253 * C1172) *
                    C293 +
                (C16335 * C317 + C16331 * C331 + C16336 * C1171 +
                 C48253 * C1181) *
                    C287 -
                (C16572 + C16573) * C294 - (C16574 + C16575) * C288 +
                (C16576 + C16577) * C295 + (C16578 + C16579) * C48227) *
                   C48138 * C16333 +
               ((C16573 + C16572) * C293 + (C16575 + C16574) * C287 -
                (C16577 + C16576) * C294 - (C16579 + C16578) * C288 +
                (C16335 * C304 + C16331 * C322 + C16336 * C1437 +
                 C48253 * C1438) *
                    C295 +
                (C16335 * C323 + C16331 * C334 + C16336 * C1439 +
                 C48253 * C1440) *
                    C48227) *
                   C48138 * C48232) *
                  C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C293 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C287 -
            (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
            (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C293 + (C16373 + C16372) * C287 -
            (C16375 + C16374) * C294 - (C16377 + C16376) * C288 +
            (C16379 + C16378) * C295 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C48275 +
          (((C16758 + C16759) * C294 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C287 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C293) +
            (C16760 + C16761) * C288 - (C16762 + C16763) * C295 -
            (C16764 + C16765) * C48227) *
               C48138 * C16333 +
           ((C16763 + C16762) * C294 -
            ((C16761 + C16760) * C287 + (C16759 + C16758) * C293) +
            (C16765 + C16764) * C288 -
            (C16336 * C938 + C48253 * C946 + C16335 * C488 + C16331 * C501) *
                C295 -
            (C16336 * C947 + C48253 * C953 + C16335 * C502 + C16331 * C518) *
                C48227) *
               C48138 * C48232) *
              C48264 +
          (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                C293 +
            (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                C287 -
            (C16766 + C16767) * C294 - (C16768 + C16769) * C288 +
            (C16770 + C16771) * C295 + (C16772 + C16773) * C48227) *
               C48138 * C16333 +
           ((C16767 + C16766) * C293 + (C16769 + C16768) * C287 -
            (C16771 + C16770) * C294 - (C16773 + C16772) * C288 +
            (C16335 * C493 + C16331 * C511 + C16336 * C2185 + C48253 * C2186) *
                C295 +
            (C16335 * C512 + C16331 * C523 + C16336 * C2187 + C48253 * C2188) *
                C48227) *
               C48138 * C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1089 + (C16373 + C16372) * C48271 -
            (C16375 + C16374) * C1090 - (C16377 + C16376) * C48258 +
            (C16379 + C16378) * C1091 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C47935 * C1086 +
          (((C16564 + C16565) * C1090 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48271 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1089) +
            (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
            (C16570 + C16571) * C48227) *
               C48138 * C16333 +
           ((C16569 + C16568) * C1090 -
            ((C16567 + C16566) * C48271 + (C16565 + C16564) * C1089) +
            (C16571 + C16570) * C48258 - (C16913 + C16912) * C1091 -
            (C16915 + C16914) * C48227) *
               C48138 * C48232) *
              C47935 * C1087 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1089 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48271 -
            (C16572 + C16573) * C1090 - (C16574 + C16575) * C48258 +
            (C16576 + C16577) * C1091 + (C16578 + C16579) * C48227) *
               C48138 * C16333 +
           ((C16573 + C16572) * C1089 + (C16575 + C16574) * C48271 -
            (C16577 + C16576) * C1090 - (C16579 + C16578) * C48258 +
            (C16335 * C304 + C16331 * C322 + C16336 * C1437 + C48253 * C1438) *
                C1091 +
            (C16335 * C323 + C16331 * C334 + C16336 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1160 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47871) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
               C48232) *
              C47935 * C1155 -
          (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
               C48232 +
           ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                C47871 +
            (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                C1160) *
               C48138 * C16333) *
              C47935 * C1156 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1160 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C47871) *
               C48138 * C16333 +
           ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
               C48232) *
              C47935 * C1157 -
          (((C16336 * C1176 + C48253 * C1183 + C16335 * C1169 +
             C16331 * C1180) *
                C47871 +
            (C16336 * C1165 + C48253 * C1175 + C16335 * C1162 +
             C16331 * C1170) *
                C1160) *
               C48138 * C48232 +
           ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
             C16331 * C1181) *
                C47871 +
            (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
             C16331 * C1172) *
                C1160) *
               C48138 * C16333) *
              C47935 * C1158 +
          (((C16335 * C1164 + C16331 * C1173 + C16336 * C5951 +
             C48253 * C5953) *
                C1160 +
            (C16335 * C1174 + C16331 * C1182 + C16336 * C5954 +
             C48253 * C5957) *
                C47871) *
               C48138 * C16333 +
           ((C16335 * C1165 + C16331 * C1175 + C16336 * C5952 +
             C48253 * C5955) *
                C1160 +
            (C16335 * C1176 + C16331 * C1183 + C16336 * C5956 +
             C48253 * C5958) *
                C47871) *
               C48138 * C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C48275 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C48264 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C1160 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C16333 +
            ((C16767 + C16766) * C1160 + (C16769 + C16768) * C47871) * C48138 *
                C48232) *
               C48238) *
              C1086 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C48264 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C48275 -
           (((C16336 * C1319 + C48253 * C1329 + C16335 * C1306 +
              C16331 * C1323) *
                 C47871 +
             (C16336 * C1302 + C48253 * C1318 + C16335 * C1296 +
              C16331 * C1307) *
                 C1160) *
                C48138 * C48232 +
            ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
              C16331 * C1324) *
                 C47871 +
             (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
              C16331 * C1309) *
                 C1160) *
                C48138 * C16333) *
               C48238) *
              C1087 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C16333 +
            ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
                C48232) *
               C48275 -
           (((C16336 * C1719 + C48253 * C1723 + C16335 * C1312 +
              C16331 * C1326) *
                 C47871 +
             (C16336 * C1714 + C48253 * C1718 + C16335 * C1299 +
              C16331 * C1313) *
                 C1160) *
                C48138 * C48232 +
            ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
              C16331 * C1327) *
                 C47871 +
             (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
              C16331 * C1315) *
                 C1160) *
                C48138 * C16333) *
               C48264 +
           (((C16335 * C1301 + C16331 * C1316 + C16336 * C6105 +
              C48253 * C6107) *
                 C1160 +
             (C16335 * C1317 + C16331 * C1328 + C16336 * C6108 +
              C48253 * C6111) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C1160 +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47871) *
                C48138 * C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1089 + (C16373 + C16372) * C48271 -
            (C16375 + C16374) * C1090 - (C16377 + C16376) * C48258 +
            (C16379 + C16378) * C1091 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C1835 +
          (((C16758 + C16759) * C1090 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C48271 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1089) +
            (C16760 + C16761) * C48258 - (C16762 + C16763) * C1091 -
            (C16764 + C16765) * C48227) *
               C48138 * C16333 +
           ((C16763 + C16762) * C1090 -
            ((C16761 + C16760) * C48271 + (C16759 + C16758) * C1089) +
            (C16765 + C16764) * C48258 - (C17055 + C17054) * C1091 -
            (C17057 + C17056) * C48227) *
               C48138 * C48232) *
              C1836 +
          (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                C1089 +
            (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                C48271 -
            (C16766 + C16767) * C1090 - (C16768 + C16769) * C48258 +
            (C16770 + C16771) * C1091 + (C16772 + C16773) * C48227) *
               C48138 * C16333 +
           ((C16767 + C16766) * C1089 + (C16769 + C16768) * C48271 -
            (C16771 + C16770) * C1090 - (C16773 + C16772) * C48258 +
            (C16335 * C493 + C16331 * C511 + C16336 * C2185 + C48253 * C2186) *
                C1091 +
            (C16335 * C512 + C16331 * C523 + C16336 * C2187 + C48253 * C2188) *
                C48227) *
               C48138 * C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C1835 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C1836 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C1160 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C16333 +
            ((C16767 + C16766) * C1160 + (C16769 + C16768) * C47871) * C48138 *
                C48232) *
               C48238) *
              C48274 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C1836 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C1835 -
           (((C16336 * C1319 + C48253 * C1329 + C16335 * C1306 +
              C16331 * C1323) *
                 C47871 +
             (C16336 * C1302 + C48253 * C1318 + C16335 * C1296 +
              C16331 * C1307) *
                 C1160) *
                C48138 * C48232 +
            ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
              C16331 * C1324) *
                 C47871 +
             (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
              C16331 * C1309) *
                 C1160) *
                C48138 * C16333) *
               C48238) *
              C48262 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C16333 +
            ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
                C48232) *
               C1835 -
           (((C17997 + C17996) * C47871 + (C17995 + C17994) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
              C16331 * C1327) *
                 C47871 +
             (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
              C16331 * C1315) *
                 C1160) *
                C48138 * C16333) *
               C1836 +
           (((C16335 * C1301 + C16331 * C1316 + C16336 * C6105 +
              C48253 * C6107) *
                 C1160 +
             (C16335 * C1317 + C16331 * C1328 + C16336 * C6108 +
              C48253 * C6111) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C1160 +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47871) *
                C48138 * C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1160 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47871) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
               C48232) *
              C2010 -
          (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
               C48232 +
           ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                C47871 +
            (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                C1160) *
               C48138 * C16333) *
              C2011 +
          (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                C1160 +
            (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                C47871) *
               C48138 * C16333 +
           ((C16767 + C16766) * C1160 + (C16769 + C16768) * C47871) * C48138 *
               C48232) *
              C2012 -
          (((C16336 * C2423 + C48253 * C2427 + C16335 * C2023 +
             C16331 * C2034) *
                C47871 +
            (C16336 * C2418 + C48253 * C2422 + C16335 * C2016 +
             C16331 * C2024) *
                C1160) *
               C48138 * C48232 +
           ((C16336 * C2421 + C48253 * C2426 + C16335 * C2025 +
             C16331 * C2035) *
                C47871 +
            (C16336 * C2417 + C48253 * C2420 + C16335 * C2017 +
             C16331 * C2026) *
                C1160) *
               C48138 * C16333) *
              C2013 +
          (((C16335 * C2018 + C16331 * C2027 + C16336 * C6973 +
             C48253 * C6975) *
                C1160 +
            (C16335 * C2028 + C16331 * C2036 + C16336 * C6976 +
             C48253 * C6979) *
                C47871) *
               C48138 * C16333 +
           ((C16335 * C2019 + C16331 * C2029 + C16336 * C6974 +
             C48253 * C6977) *
                C1160 +
            (C16335 * C2030 + C16331 * C2037 + C16336 * C6978 +
             C48253 * C6980) *
                C47871) *
               C48138 * C48232) *
              C2014) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46986 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48186 -
             (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
                C48138 * C16333 +
            ((C16371 + C16370) * C46986 + (C16373 + C16372) * C48186 -
             (C16375 + C16374) * C46967 - (C16377 + C16376) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C16758 + C16759) * C46967 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C48186 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C46986) +
             (C16760 + C16761) * C47881) *
                C48138 * C16333 +
            ((C16763 + C16762) * C46967 -
             ((C16761 + C16760) * C48186 + (C16759 + C16758) * C46986) +
             (C16765 + C16764) * C47881) *
                C48138 * C48232) *
               C48022) *
              C1086 +
          ((((C16564 + C16565) * C46967 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48186 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46986) +
             (C16566 + C16567) * C47881) *
                C48138 * C16333 +
            ((C16569 + C16568) * C46967 -
             ((C16567 + C16566) * C48186 + (C16565 + C16564) * C46986) +
             (C16571 + C16570) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C46986 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C48186 -
             (C17268 + C17269) * C46967 - (C17270 + C17271) * C47881) *
                C48138 * C16333 +
            ((C17269 + C17268) * C46986 + (C17271 + C17270) * C48186 -
             (C17273 + C17272) * C46967 - (C17275 + C17274) * C47881) *
                C48138 * C48232) *
               C48022) *
              C1087 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C46986 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C48186 -
             (C16572 + C16573) * C46967 - (C16574 + C16575) * C47881) *
                C48138 * C16333 +
            ((C16573 + C16572) * C46986 + (C16575 + C16574) * C48186 -
             (C16577 + C16576) * C46967 - (C16579 + C16578) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C17994 + C17995) * C46967 -
             ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
               C16331 * C1327) *
                  C48186 +
              (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
               C16331 * C1315) *
                  C46986) +
             (C17996 + C17997) * C47881) *
                C48138 * C16333 +
            ((C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
              C48253 * C1720) *
                 C46967 -
             ((C17997 + C17996) * C48186 + (C17995 + C17994) * C46986) +
             (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
              C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C665 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C659 -
            (C16370 + C16371) * C666 - (C16372 + C16373) * C660 +
            (C16374 + C16375) * C667 + (C16376 + C16377) * C661 -
            (C16378 + C16379) * C668 - (C16380 + C16381) * C48239) *
               C48138 * C16333 +
           ((C16371 + C16370) * C665 + (C16373 + C16372) * C659 -
            (C16375 + C16374) * C666 - (C16377 + C16376) * C660 +
            (C16379 + C16378) * C667 + (C16381 + C16380) * C661 -
            (C16383 + C16382) * C668 - (C16385 + C16384) * C48239) *
               C48138 * C48232) *
              C48204 +
          (((C16758 + C16759) * C666 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C659 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C665) +
            (C16760 + C16761) * C660 - (C16762 + C16763) * C667 -
            (C16764 + C16765) * C661 + (C17054 + C17055) * C668 +
            (C17056 + C17057) * C48239) *
               C48138 * C16333 +
           ((C16763 + C16762) * C666 -
            ((C16761 + C16760) * C659 + (C16759 + C16758) * C665) +
            (C16765 + C16764) * C660 - (C17055 + C17054) * C667 -
            (C17057 + C17056) * C661 +
            (C16335 * C489 + C16331 * C503 + C16336 * C939 + C48253 * C948) *
                C668 +
            (C16335 * C504 + C16331 * C519 + C16336 * C949 + C48253 * C954) *
                C48239) *
               C48138 * C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C46986 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48186 -
            (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
               C48138 * C16333 +
           ((C16371 + C16370) * C46986 + (C16373 + C16372) * C48186 -
            (C16375 + C16374) * C46967 - (C16377 + C16376) * C47881) *
               C48138 * C48232) *
              C2299 +
          (((C16758 + C16759) * C46967 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C48186 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C46986) +
            (C16760 + C16761) * C47881) *
               C48138 * C16333 +
           ((C16763 + C16762) * C46967 -
            ((C16761 + C16760) * C48186 + (C16759 + C16758) * C46986) +
            (C16765 + C16764) * C47881) *
               C48138 * C48232) *
              C2300 +
          (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                C46986 +
            (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                C48186 -
            (C16766 + C16767) * C46967 - (C16768 + C16769) * C47881) *
               C48138 * C16333 +
           ((C16767 + C16766) * C46986 + (C16769 + C16768) * C48186 -
            (C16771 + C16770) * C46967 - (C16773 + C16772) * C47881) *
               C48138 * C48232) *
              C2301 +
          (((C18846 + C18847) * C46967 -
            ((C16336 * C2421 + C48253 * C2426 + C16335 * C2025 +
              C16331 * C2035) *
                 C48186 +
             (C16336 * C2417 + C48253 * C2420 + C16335 * C2017 +
              C16331 * C2026) *
                 C46986) +
            (C18848 + C18849) * C47881) *
               C48138 * C16333 +
           ((C16335 * C2015 + C16331 * C2022 + C16336 * C2419 +
             C48253 * C2424) *
                C46967 -
            ((C18849 + C18848) * C48186 + (C18847 + C18846) * C46986) +
            (C16335 * C2021 + C16331 * C2033 + C16336 * C2425 +
             C48253 * C2428) *
                C47881) *
               C48138 * C48232) *
              C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C293 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C287 -
            (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
            (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C293 + (C16373 + C16372) * C287 -
            (C16375 + C16374) * C294 - (C16377 + C16376) * C288 +
            (C16379 + C16378) * C295 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C47935 * C48274 +
          (((C16564 + C16565) * C294 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C287 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C293) +
            (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
            (C16570 + C16571) * C48227) *
               C48138 * C16333 +
           ((C16569 + C16568) * C294 -
            ((C16567 + C16566) * C287 + (C16565 + C16564) * C293) +
            (C16571 + C16570) * C288 -
            (C16336 * C304 + C48253 * C322 + C16335 * C299 + C16331 * C312) *
                C295 -
            (C16336 * C323 + C48253 * C334 + C16335 * C313 + C16331 * C329) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48262 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C293 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C287 -
            (C16572 + C16573) * C294 - (C16574 + C16575) * C288 +
            (C16576 + C16577) * C295 + (C16578 + C16579) * C48227) *
               C48138 * C16333 +
           ((C16573 + C16572) * C293 + (C16575 + C16574) * C287 -
            (C16577 + C16576) * C294 - (C16579 + C16578) * C288 +
            (C16335 * C304 + C16331 * C322 + C16336 * C1437 + C48253 * C1438) *
                C295 +
            (C16335 * C323 + C16331 * C334 + C16336 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
               C114 +
           (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
               C102 -
           (C16370 + C16371) * C115 - (C16372 + C16373) * C103 +
           (C16374 + C16375) * C116 + (C16376 + C16377) * C104 -
           (C16378 + C16379) * C117 - (C16380 + C16381) * C105 +
           (C16382 + C16383) * C118 + (C16384 + C16385) * C106) *
              C48138 * C16333 +
          ((C16371 + C16370) * C114 + (C16373 + C16372) * C102 -
           (C16375 + C16374) * C115 - (C16377 + C16376) * C103 +
           (C16379 + C16378) * C116 + (C16381 + C16380) * C104 -
           (C16383 + C16382) * C117 - (C16385 + C16384) * C105 +
           (C16335 * C124 + C16331 * C136 + C16336 * C669 + C48253 * C670) *
               C118 +
           (C16335 * C137 + C16331 * C145 + C16336 * C671 + C48253 * C672) *
               C106) *
              C48138 * C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1089 + (C16373 + C16372) * C48271 -
            (C16375 + C16374) * C1090 - (C16377 + C16376) * C48258 +
            (C16379 + C16378) * C1091 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C47935 * C1086 +
          (((C16564 + C16565) * C1090 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48271 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1089) +
            (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
            (C16570 + C16571) * C48227) *
               C48138 * C16333 +
           ((C16569 + C16568) * C1090 -
            ((C16567 + C16566) * C48271 + (C16565 + C16564) * C1089) +
            (C16571 + C16570) * C48258 - (C16913 + C16912) * C1091 -
            (C16915 + C16914) * C48227) *
               C48138 * C48232) *
              C47935 * C1087 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1089 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48271 -
            (C16572 + C16573) * C1090 - (C16574 + C16575) * C48258 +
            (C16576 + C16577) * C1091 + (C16578 + C16579) * C48227) *
               C48138 * C16333 +
           ((C16573 + C16572) * C1089 + (C16575 + C16574) * C48271 -
            (C16577 + C16576) * C1090 - (C16579 + C16578) * C48258 +
            (C16335 * C304 + C16331 * C322 + C16336 * C1437 + C48253 * C1438) *
                C1091 +
            (C16335 * C323 + C16331 * C334 + C16336 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1160 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47871) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
               C48232) *
              C47935 * C1155 -
          (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
               C48232 +
           ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                C47871 +
            (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                C1160) *
               C48138 * C16333) *
              C47935 * C1156 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1160 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C47871) *
               C48138 * C16333 +
           ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
               C48232) *
              C47935 * C1157 -
          (((C16336 * C1176 + C48253 * C1183 + C16335 * C1169 +
             C16331 * C1180) *
                C47871 +
            (C16336 * C1165 + C48253 * C1175 + C16335 * C1162 +
             C16331 * C1170) *
                C1160) *
               C48138 * C48232 +
           ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
             C16331 * C1181) *
                C47871 +
            (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
             C16331 * C1172) *
                C1160) *
               C48138 * C16333) *
              C47935 * C1158 +
          (((C16335 * C1164 + C16331 * C1173 + C16336 * C5951 +
             C48253 * C5953) *
                C1160 +
            (C16335 * C1174 + C16331 * C1182 + C16336 * C5954 +
             C48253 * C5957) *
                C47871) *
               C48138 * C16333 +
           ((C16335 * C1165 + C16331 * C1175 + C16336 * C5952 +
             C48253 * C5955) *
                C1160 +
            (C16335 * C1176 + C16331 * C1183 + C16336 * C5956 +
             C48253 * C5958) *
                C47871) *
               C48138 * C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1089 + (C16373 + C16372) * C48271 -
            (C16375 + C16374) * C1090 - (C16377 + C16376) * C48258 +
            (C16379 + C16378) * C1091 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C1835 +
          (((C16758 + C16759) * C1090 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C48271 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1089) +
            (C16760 + C16761) * C48258 - (C16762 + C16763) * C1091 -
            (C16764 + C16765) * C48227) *
               C48138 * C16333 +
           ((C16763 + C16762) * C1090 -
            ((C16761 + C16760) * C48271 + (C16759 + C16758) * C1089) +
            (C16765 + C16764) * C48258 - (C17055 + C17054) * C1091 -
            (C17057 + C17056) * C48227) *
               C48138 * C48232) *
              C1836 +
          (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                C1089 +
            (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                C48271 -
            (C16766 + C16767) * C1090 - (C16768 + C16769) * C48258 +
            (C16770 + C16771) * C1091 + (C16772 + C16773) * C48227) *
               C48138 * C16333 +
           ((C16767 + C16766) * C1089 + (C16769 + C16768) * C48271 -
            (C16771 + C16770) * C1090 - (C16773 + C16772) * C48258 +
            (C16335 * C493 + C16331 * C511 + C16336 * C2185 + C48253 * C2186) *
                C1091 +
            (C16335 * C512 + C16331 * C523 + C16336 * C2187 + C48253 * C2188) *
                C48227) *
               C48138 * C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C1835 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C1836 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C1160 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C16333 +
            ((C16767 + C16766) * C1160 + (C16769 + C16768) * C47871) * C48138 *
                C48232) *
               C48238) *
              C48274 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C1836 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C1835 -
           (((C16336 * C1319 + C48253 * C1329 + C16335 * C1306 +
              C16331 * C1323) *
                 C47871 +
             (C16336 * C1302 + C48253 * C1318 + C16335 * C1296 +
              C16331 * C1307) *
                 C1160) *
                C48138 * C48232 +
            ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
              C16331 * C1324) *
                 C47871 +
             (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
              C16331 * C1309) *
                 C1160) *
                C48138 * C16333) *
               C48238) *
              C48262 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C16333 +
            ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
                C48232) *
               C1835 -
           (((C17997 + C17996) * C47871 + (C17995 + C17994) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
              C16331 * C1327) *
                 C47871 +
             (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
              C16331 * C1315) *
                 C1160) *
                C48138 * C16333) *
               C1836 +
           (((C16335 * C1301 + C16331 * C1316 + C16336 * C6105 +
              C48253 * C6107) *
                 C1160 +
             (C16335 * C1317 + C16331 * C1328 + C16336 * C6108 +
              C48253 * C6111) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C1160 +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47871) *
                C48138 * C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46996 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47876 -
             (C16370 + C16371) * C46992 - (C16372 + C16373) * C47884 +
             (C16374 + C16375) * C47002 + (C16376 + C16377) * C2901) *
                C48138 * C16333 +
            ((C16371 + C16370) * C46996 + (C16373 + C16372) * C47876 -
             (C16375 + C16374) * C46992 - (C16377 + C16376) * C47884 +
             (C16379 + C16378) * C47002 + (C16381 + C16380) * C2901) *
                C48138 * C48232) *
               C3298 +
           (((C16758 + C16759) * C46992 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C47876 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C46996) +
             (C16760 + C16761) * C47884 - (C16762 + C16763) * C47002 -
             (C16764 + C16765) * C2901) *
                C48138 * C16333 +
            ((C16763 + C16762) * C46992 -
             ((C16761 + C16760) * C47876 + (C16759 + C16758) * C46996) +
             (C16765 + C16764) * C47884 - (C17055 + C17054) * C47002 -
             (C17057 + C17056) * C2901) *
                C48138 * C48232) *
               C48022) *
              C48203 +
          ((((C16564 + C16565) * C46992 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C47876 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46996) +
             (C16566 + C16567) * C47884 - (C16568 + C16569) * C47002 -
             (C16570 + C16571) * C2901) *
                C48138 * C16333 +
            ((C16569 + C16568) * C46992 -
             ((C16567 + C16566) * C47876 + (C16565 + C16564) * C46996) +
             (C16571 + C16570) * C47884 - (C16913 + C16912) * C47002 -
             (C16915 + C16914) * C2901) *
                C48138 * C48232) *
               C3298 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C46996 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47876 -
             (C17268 + C17269) * C46992 - (C17270 + C17271) * C47884 +
             (C17272 + C17273) * C47002 + (C17274 + C17275) * C2901) *
                C48138 * C16333 +
            ((C17269 + C17268) * C46996 + (C17271 + C17270) * C47876 -
             (C17273 + C17272) * C46992 - (C17275 + C17274) * C47884 +
             (C16335 * C938 + C16331 * C946 + C16336 * C1599 + C48253 * C1600) *
                 C47002 +
             (C16335 * C947 + C16331 * C953 + C16336 * C1601 + C48253 * C1602) *
                 C2901) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C2641 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C2635 -
             (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
                C48138 * C16333 +
            ((C16371 + C16370) * C2641 + (C16373 + C16372) * C2635 -
             (C16375 + C16374) * C2642 - (C16377 + C16376) * C47881) *
                C48138 * C48232) *
               C48018 +
           (((C16758 + C16759) * C2642 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C2635 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C2641) +
             (C16760 + C16761) * C47881) *
                C48138 * C16333 +
            ((C16763 + C16762) * C2642 -
             ((C16761 + C16760) * C2635 + (C16759 + C16758) * C2641) +
             (C16765 + C16764) * C47881) *
                C48138 * C48232) *
               C48025 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C2641 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C2635 -
             (C16766 + C16767) * C2642 - (C16768 + C16769) * C47881) *
                C48138 * C16333 +
            ((C16767 + C16766) * C2641 + (C16769 + C16768) * C2635 -
             (C16771 + C16770) * C2642 - (C16773 + C16772) * C47881) *
                C48138 * C48232) *
               C3806) *
              C48203 +
          ((((C16564 + C16565) * C2642 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C2635 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C2641) +
             (C16566 + C16567) * C47881) *
                C48138 * C16333 +
            ((C16569 + C16568) * C2642 -
             ((C16567 + C16566) * C2635 + (C16565 + C16564) * C2641) +
             (C16571 + C16570) * C47881) *
                C48138 * C48232) *
               C48018 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C2641 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C2635 -
             (C17268 + C17269) * C2642 - (C17270 + C17271) * C47881) *
                C48138 * C16333 +
            ((C17269 + C17268) * C2641 + (C17271 + C17270) * C2635 -
             (C17273 + C17272) * C2642 - (C17275 + C17274) * C47881) *
                C48138 * C48232) *
               C48025 +
           (((C18704 + C18705) * C2642 -
             ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
               C16331 * C1324) *
                  C2635 +
              (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
               C16331 * C1309) *
                  C2641) +
             (C18706 + C18707) * C47881) *
                C48138 * C16333 +
            ((C16335 * C1295 + C16331 * C1305 + C16336 * C1303 +
              C48253 * C1320) *
                 C2642 -
             ((C18707 + C18706) * C2635 + (C18705 + C18704) * C2641) +
             (C16335 * C1304 + C16331 * C1322 + C16336 * C1321 +
              C48253 * C1330) *
                 C47881) *
                C48138 * C48232) *
               C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C2641 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C2635 -
             (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
                C48138 * C16333 +
            ((C16371 + C16370) * C2641 + (C16373 + C16372) * C2635 -
             (C16375 + C16374) * C2642 - (C16377 + C16376) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C16758 + C16759) * C2642 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C2635 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C2641) +
             (C16760 + C16761) * C47881) *
                C48138 * C16333 +
            ((C16763 + C16762) * C2642 -
             ((C16761 + C16760) * C2635 + (C16759 + C16758) * C2641) +
             (C16765 + C16764) * C47881) *
                C48138 * C48232) *
               C48022) *
              C48274 +
          ((((C16564 + C16565) * C2642 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C2635 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C2641) +
             (C16566 + C16567) * C47881) *
                C48138 * C16333 +
            ((C16569 + C16568) * C2642 -
             ((C16567 + C16566) * C2635 + (C16565 + C16564) * C2641) +
             (C16571 + C16570) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C2641 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C2635 -
             (C17268 + C17269) * C2642 - (C17270 + C17271) * C47881) *
                C48138 * C16333 +
            ((C17269 + C17268) * C2641 + (C17271 + C17270) * C2635 -
             (C17273 + C17272) * C2642 - (C17275 + C17274) * C47881) *
                C48138 * C48232) *
               C48022) *
              C48262 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C2641 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C2635 -
             (C16572 + C16573) * C2642 - (C16574 + C16575) * C47881) *
                C48138 * C16333 +
            ((C16573 + C16572) * C2641 + (C16575 + C16574) * C2635 -
             (C16577 + C16576) * C2642 - (C16579 + C16578) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C17994 + C17995) * C2642 -
             ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
               C16331 * C1327) *
                  C2635 +
              (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
               C16331 * C1315) *
                  C2641) +
             (C17996 + C17997) * C47881) *
                C48138 * C16333 +
            ((C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
              C48253 * C1720) *
                 C2642 -
             ((C17997 + C17996) * C2635 + (C17995 + C17994) * C2641) +
             (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
              C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2533 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48280 -
            (C16370 + C16371) * C2534 - (C16372 + C16373) * C48273 +
            (C16374 + C16375) * C2535 + (C16376 + C16377) * C48260 -
            (C16378 + C16379) * C2536 - (C16380 + C16381) * C48239) *
               C48138 * C16333 +
           ((C16371 + C16370) * C2533 + (C16373 + C16372) * C48280 -
            (C16375 + C16374) * C2534 - (C16377 + C16376) * C48273 +
            (C16379 + C16378) * C2535 + (C16381 + C16380) * C48260 -
            (C16383 + C16382) * C2536 - (C16385 + C16384) * C48239) *
               C48138 * C48232) *
              C3298 +
          (((C16758 + C16759) * C2534 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C48280 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C2533) +
            (C16760 + C16761) * C48273 - (C16762 + C16763) * C2535 -
            (C16764 + C16765) * C48260 + (C17054 + C17055) * C2536 +
            (C17056 + C17057) * C48239) *
               C48138 * C16333 +
           ((C16763 + C16762) * C2534 -
            ((C16761 + C16760) * C48280 + (C16759 + C16758) * C2533) +
            (C16765 + C16764) * C48273 - (C17055 + C17054) * C2535 -
            (C17057 + C17056) * C48260 +
            (C16335 * C489 + C16331 * C503 + C16336 * C939 + C48253 * C948) *
                C2536 +
            (C16335 * C504 + C16331 * C519 + C16336 * C949 + C48253 * C954) *
                C48239) *
               C48138 * C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2641 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C2635 -
            (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
               C48138 * C16333 +
           ((C16371 + C16370) * C2641 + (C16373 + C16372) * C2635 -
            (C16375 + C16374) * C2642 - (C16377 + C16376) * C47881) *
               C48138 * C48232) *
              C48282 +
          (((C16758 + C16759) * C2642 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C2635 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C2641) +
            (C16760 + C16761) * C47881) *
               C48138 * C16333 +
           ((C16763 + C16762) * C2642 -
            ((C16761 + C16760) * C2635 + (C16759 + C16758) * C2641) +
            (C16765 + C16764) * C47881) *
               C48138 * C48232) *
              C48279 +
          (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                C2641 +
            (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                C2635 -
            (C16766 + C16767) * C2642 - (C16768 + C16769) * C47881) *
               C48138 * C16333 +
           ((C16767 + C16766) * C2641 + (C16769 + C16768) * C2635 -
            (C16771 + C16770) * C2642 - (C16773 + C16772) * C47881) *
               C48138 * C48232) *
              C48270 +
          (((C18846 + C18847) * C2642 -
            ((C16336 * C2421 + C48253 * C2426 + C16335 * C2025 +
              C16331 * C2035) *
                 C2635 +
             (C16336 * C2417 + C48253 * C2420 + C16335 * C2017 +
              C16331 * C2026) *
                 C2641) +
            (C18848 + C18849) * C47881) *
               C48138 * C16333 +
           ((C16335 * C2015 + C16331 * C2022 + C16336 * C2419 +
             C48253 * C2424) *
                C2642 -
            ((C18849 + C18848) * C2635 + (C18847 + C18846) * C2641) +
            (C16335 * C2021 + C16331 * C2033 + C16336 * C2425 +
             C48253 * C2428) *
                C47881) *
               C48138 * C48232) *
              C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C46996 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47876 -
            (C16370 + C16371) * C46992 - (C16372 + C16373) * C47884 +
            (C16374 + C16375) * C47002 + (C16376 + C16377) * C2901) *
               C48138 * C16333 +
           ((C16371 + C16370) * C46996 + (C16373 + C16372) * C47876 -
            (C16375 + C16374) * C46992 - (C16377 + C16376) * C47884 +
            (C16379 + C16378) * C47002 + (C16381 + C16380) * C2901) *
               C48138 * C48232) *
              C48018 +
          (((C16758 + C16759) * C46992 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47876 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C46996) +
            (C16760 + C16761) * C47884 - (C16762 + C16763) * C47002 -
            (C16764 + C16765) * C2901) *
               C48138 * C16333 +
           ((C16763 + C16762) * C46992 -
            ((C16761 + C16760) * C47876 + (C16759 + C16758) * C46996) +
            (C16765 + C16764) * C47884 - (C17055 + C17054) * C47002 -
            (C17057 + C17056) * C2901) *
               C48138 * C48232) *
              C48025 +
          (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                C46996 +
            (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                C47876 -
            (C16766 + C16767) * C46992 - (C16768 + C16769) * C47884 +
            (C16770 + C16771) * C47002 + (C16772 + C16773) * C2901) *
               C48138 * C16333 +
           ((C16767 + C16766) * C46996 + (C16769 + C16768) * C47876 -
            (C16771 + C16770) * C46992 - (C16773 + C16772) * C47884 +
            (C16335 * C493 + C16331 * C511 + C16336 * C2185 + C48253 * C2186) *
                C47002 +
            (C16335 * C512 + C16331 * C523 + C16336 * C2187 + C48253 * C2188) *
                C2901) *
               C48138 * C48232) *
              C3806) *
         C47923) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2533 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48280 -
            (C16370 + C16371) * C2534 - (C16372 + C16373) * C48273 +
            (C16374 + C16375) * C2535 + (C16376 + C16377) * C48260 -
            (C16378 + C16379) * C2536 - (C16380 + C16381) * C48239) *
               C48138 * C16333 +
           ((C16371 + C16370) * C2533 + (C16373 + C16372) * C48280 -
            (C16375 + C16374) * C2534 - (C16377 + C16376) * C48273 +
            (C16379 + C16378) * C2535 + (C16381 + C16380) * C48260 -
            (C16383 + C16382) * C2536 - (C16385 + C16384) * C48239) *
               C48138 * C48232) *
              C3298 +
          (((C16758 + C16759) * C2534 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C48280 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C2533) +
            (C16760 + C16761) * C48273 - (C16762 + C16763) * C2535 -
            (C16764 + C16765) * C48260 + (C17054 + C17055) * C2536 +
            (C17056 + C17057) * C48239) *
               C48138 * C16333 +
           ((C16763 + C16762) * C2534 -
            ((C16761 + C16760) * C48280 + (C16759 + C16758) * C2533) +
            (C16765 + C16764) * C48273 - (C17055 + C17054) * C2535 -
            (C17057 + C17056) * C48260 +
            (C16335 * C489 + C16331 * C503 + C16336 * C939 + C48253 * C948) *
                C2536 +
            (C16335 * C504 + C16331 * C519 + C16336 * C949 + C48253 * C954) *
                C48239) *
               C48138 * C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C2641 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C2635 -
             (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
                C48138 * C16333 +
            ((C16371 + C16370) * C2641 + (C16373 + C16372) * C2635 -
             (C16375 + C16374) * C2642 - (C16377 + C16376) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C16758 + C16759) * C2642 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C2635 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C2641) +
             (C16760 + C16761) * C47881) *
                C48138 * C16333 +
            ((C16763 + C16762) * C2642 -
             ((C16761 + C16760) * C2635 + (C16759 + C16758) * C2641) +
             (C16765 + C16764) * C47881) *
                C48138 * C48232) *
               C48022) *
              C48274 +
          ((((C16564 + C16565) * C2642 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C2635 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C2641) +
             (C16566 + C16567) * C47881) *
                C48138 * C16333 +
            ((C16569 + C16568) * C2642 -
             ((C16567 + C16566) * C2635 + (C16565 + C16564) * C2641) +
             (C16571 + C16570) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C2641 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C2635 -
             (C17268 + C17269) * C2642 - (C17270 + C17271) * C47881) *
                C48138 * C16333 +
            ((C17269 + C17268) * C2641 + (C17271 + C17270) * C2635 -
             (C17273 + C17272) * C2642 - (C17275 + C17274) * C47881) *
                C48138 * C48232) *
               C48022) *
              C48262 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C2641 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C2635 -
             (C16572 + C16573) * C2642 - (C16574 + C16575) * C47881) *
                C48138 * C16333 +
            ((C16573 + C16572) * C2641 + (C16575 + C16574) * C2635 -
             (C16577 + C16576) * C2642 - (C16579 + C16578) * C47881) *
                C48138 * C48232) *
               C3298 +
           (((C17994 + C17995) * C2642 -
             ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
               C16331 * C1327) *
                  C2635 +
              (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
               C16331 * C1315) *
                  C2641) +
             (C17996 + C17997) * C47881) *
                C48138 * C16333 +
            ((C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
              C48253 * C1720) *
                 C2642 -
             ((C17997 + C17996) * C2635 + (C17995 + C17994) * C2641) +
             (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
              C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C665 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C659 -
            (C16370 + C16371) * C666 - (C16372 + C16373) * C660 +
            (C16374 + C16375) * C667 + (C16376 + C16377) * C661 -
            (C16378 + C16379) * C668 - (C16380 + C16381) * C48239) *
               C48138 * C16333 +
           ((C16371 + C16370) * C665 + (C16373 + C16372) * C659 -
            (C16375 + C16374) * C666 - (C16377 + C16376) * C660 +
            (C16379 + C16378) * C667 + (C16381 + C16380) * C661 -
            (C16383 + C16382) * C668 - (C16385 + C16384) * C48239) *
               C48138 * C48232) *
              C47935 * C48203 +
          (((C16564 + C16565) * C666 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C659 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C665) +
            (C16566 + C16567) * C660 - (C16568 + C16569) * C667 -
            (C16570 + C16571) * C661 + (C16912 + C16913) * C668 +
            (C16914 + C16915) * C48239) *
               C48138 * C16333 +
           ((C16569 + C16568) * C666 -
            ((C16567 + C16566) * C659 + (C16565 + C16564) * C665) +
            (C16571 + C16570) * C660 - (C16913 + C16912) * C667 -
            (C16915 + C16914) * C661 +
            (C16335 * C300 + C16331 * C314 + C16336 * C305 + C48253 * C324) *
                C668 +
            (C16335 * C315 + C16331 * C330 + C16336 * C325 + C48253 * C335) *
                C48239) *
               C48138 * C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C46986 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48186 -
            (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
               C48138 * C16333 +
           ((C16371 + C16370) * C46986 + (C16373 + C16372) * C48186 -
            (C16375 + C16374) * C46967 - (C16377 + C16376) * C47881) *
               C48138 * C48232) *
              C47935 * C1431 +
          (((C16564 + C16565) * C46967 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48186 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C46986) +
            (C16566 + C16567) * C47881) *
               C48138 * C16333 +
           ((C16569 + C16568) * C46967 -
            ((C16567 + C16566) * C48186 + (C16565 + C16564) * C46986) +
            (C16571 + C16570) * C47881) *
               C48138 * C48232) *
              C47935 * C1432 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C46986 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48186 -
            (C16572 + C16573) * C46967 - (C16574 + C16575) * C47881) *
               C48138 * C16333 +
           ((C16573 + C16572) * C46986 + (C16575 + C16574) * C48186 -
            (C16577 + C16576) * C46967 - (C16579 + C16578) * C47881) *
               C48138 * C48232) *
              C47935 * C1433 +
          (((C17788 + C17789) * C46967 -
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C48186 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C46986) +
            (C17790 + C17791) * C47881) *
               C48138 * C16333 +
           ((C16335 * C1161 + C16331 * C1168 + C16336 * C1166 +
             C48253 * C1177) *
                C46967 -
            ((C17791 + C17790) * C48186 + (C17789 + C17788) * C46986) +
            (C16335 * C1167 + C16331 * C1179 + C16336 * C1178 +
             C48253 * C1184) *
                C47881) *
               C48138 * C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C293 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C287 -
             (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
             (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
                C48138 * C16333 +
            ((C16371 + C16370) * C293 + (C16373 + C16372) * C287 -
             (C16375 + C16374) * C294 - (C16377 + C16376) * C288 +
             (C16379 + C16378) * C295 + (C16381 + C16380) * C48227) *
                C48138 * C48232) *
               C48204 +
           (((C16758 + C16759) * C294 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C287 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C293) +
             (C16760 + C16761) * C288 - (C16762 + C16763) * C295 -
             (C16764 + C16765) * C48227) *
                C48138 * C16333 +
            ((C16763 + C16762) * C294 -
             ((C16761 + C16760) * C287 + (C16759 + C16758) * C293) +
             (C16765 + C16764) * C288 - (C17055 + C17054) * C295 -
             (C17057 + C17056) * C48227) *
                C48138 * C48232) *
               C48022) *
              C48203 +
          ((((C16564 + C16565) * C294 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C287 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C293) +
             (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
             (C16570 + C16571) * C48227) *
                C48138 * C16333 +
            ((C16569 + C16568) * C294 -
             ((C16567 + C16566) * C287 + (C16565 + C16564) * C293) +
             (C16571 + C16570) * C288 - (C16913 + C16912) * C295 -
             (C16915 + C16914) * C48227) *
                C48138 * C48232) *
               C48204 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C293 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C287 -
             (C17268 + C17269) * C294 - (C17270 + C17271) * C288 +
             (C17272 + C17273) * C295 + (C17274 + C17275) * C48227) *
                C48138 * C16333 +
            ((C17269 + C17268) * C293 + (C17271 + C17270) * C287 -
             (C17273 + C17272) * C294 - (C17275 + C17274) * C288 +
             (C16335 * C938 + C16331 * C946 + C16336 * C1599 + C48253 * C1600) *
                 C295 +
             (C16335 * C947 + C16331 * C953 + C16336 * C1601 + C48253 * C1602) *
                 C48227) *
                C48138 * C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C48204 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C48022) *
              C1431 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C48022 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C48204) *
              C1432 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C16333 +
            ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
                C48232) *
               C48204 -
           (((C17997 + C17996) * C47871 + (C17995 + C17994) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
              C16331 * C1327) *
                 C47871 +
             (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
              C16331 * C1315) *
                 C1160) *
                C48138 * C16333) *
               C48022) *
              C1433 +
          ((((C16335 * C1713 + C16331 * C1716 + C16336 * C6591 +
              C48253 * C6593) *
                 C1160 +
             (C16335 * C1717 + C16331 * C1722 + C16336 * C6594 +
              C48253 * C6597) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C1714 + C16331 * C1718 + C16336 * C6592 +
              C48253 * C6595) *
                 C1160 +
             (C16335 * C1719 + C16331 * C1723 + C16336 * C6596 +
              C48253 * C6598) *
                 C47871) *
                C48138 * C48232) *
               C48022 -
           (((C17791 + C17790) * C47871 + (C17789 + C17788) * C1160) * C48138 *
                C48232 +
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C47871 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C1160) *
                C48138 * C16333) *
               C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C293 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C287 -
            (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
            (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C293 + (C16373 + C16372) * C287 -
            (C16375 + C16374) * C294 - (C16377 + C16376) * C288 +
            (C16379 + C16378) * C295 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C47935 * C48274 +
          (((C16564 + C16565) * C294 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C287 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C293) +
            (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
            (C16570 + C16571) * C48227) *
               C48138 * C16333 +
           ((C16569 + C16568) * C294 -
            ((C16567 + C16566) * C287 + (C16565 + C16564) * C293) +
            (C16571 + C16570) * C288 -
            (C16336 * C304 + C48253 * C322 + C16335 * C299 + C16331 * C312) *
                C295 -
            (C16336 * C323 + C48253 * C334 + C16335 * C313 + C16331 * C329) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48262 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C293 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C287 -
            (C16572 + C16573) * C294 - (C16574 + C16575) * C288 +
            (C16576 + C16577) * C295 + (C16578 + C16579) * C48227) *
               C48138 * C16333 +
           ((C16573 + C16572) * C293 + (C16575 + C16574) * C287 -
            (C16577 + C16576) * C294 - (C16579 + C16578) * C288 +
            (C16335 * C304 + C16331 * C322 + C16336 * C1437 + C48253 * C1438) *
                C295 +
            (C16335 * C323 + C16331 * C334 + C16336 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
               C114 +
           (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
               C102 -
           (C16370 + C16371) * C115 - (C16372 + C16373) * C103 +
           (C16374 + C16375) * C116 + (C16376 + C16377) * C104 -
           (C16378 + C16379) * C117 - (C16380 + C16381) * C105 +
           (C16382 + C16383) * C118 + (C16384 + C16385) * C106) *
              C48138 * C16333 +
          ((C16371 + C16370) * C114 + (C16373 + C16372) * C102 -
           (C16375 + C16374) * C115 - (C16377 + C16376) * C103 +
           (C16379 + C16378) * C116 + (C16381 + C16380) * C104 -
           (C16383 + C16382) * C117 - (C16385 + C16384) * C105 +
           (C16335 * C124 + C16331 * C136 + C16336 * C669 + C48253 * C670) *
               C118 +
           (C16335 * C137 + C16331 * C145 + C16336 * C671 + C48253 * C672) *
               C106) *
              C48138 * C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C293 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C287 -
            (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
            (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C293 + (C16373 + C16372) * C287 -
            (C16375 + C16374) * C294 - (C16377 + C16376) * C288 +
            (C16379 + C16378) * C295 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C48275 +
          (((C16758 + C16759) * C294 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C287 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C293) +
            (C16760 + C16761) * C288 - (C16762 + C16763) * C295 -
            (C16764 + C16765) * C48227) *
               C48138 * C16333 +
           ((C16763 + C16762) * C294 -
            ((C16761 + C16760) * C287 + (C16759 + C16758) * C293) +
            (C16765 + C16764) * C288 -
            (C16336 * C938 + C48253 * C946 + C16335 * C488 + C16331 * C501) *
                C295 -
            (C16336 * C947 + C48253 * C953 + C16335 * C502 + C16331 * C518) *
                C48227) *
               C48138 * C48232) *
              C48264 +
          (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                C293 +
            (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                C287 -
            (C16766 + C16767) * C294 - (C16768 + C16769) * C288 +
            (C16770 + C16771) * C295 + (C16772 + C16773) * C48227) *
               C48138 * C16333 +
           ((C16767 + C16766) * C293 + (C16769 + C16768) * C287 -
            (C16771 + C16770) * C294 - (C16773 + C16772) * C288 +
            (C16335 * C493 + C16331 * C511 + C16336 * C2185 + C48253 * C2186) *
                C295 +
            (C16335 * C512 + C16331 * C523 + C16336 * C2187 + C48253 * C2188) *
                C48227) *
               C48138 * C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1089 + (C16373 + C16372) * C48271 -
            (C16375 + C16374) * C1090 - (C16377 + C16376) * C48258 +
            (C16379 + C16378) * C1091 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C47935 * C1086 +
          (((C16564 + C16565) * C1090 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48271 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1089) +
            (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
            (C16570 + C16571) * C48227) *
               C48138 * C16333 +
           ((C16569 + C16568) * C1090 -
            ((C16567 + C16566) * C48271 + (C16565 + C16564) * C1089) +
            (C16571 + C16570) * C48258 - (C16913 + C16912) * C1091 -
            (C16915 + C16914) * C48227) *
               C48138 * C48232) *
              C47935 * C1087 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1089 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48271 -
            (C16572 + C16573) * C1090 - (C16574 + C16575) * C48258 +
            (C16576 + C16577) * C1091 + (C16578 + C16579) * C48227) *
               C48138 * C16333 +
           ((C16573 + C16572) * C1089 + (C16575 + C16574) * C48271 -
            (C16577 + C16576) * C1090 - (C16579 + C16578) * C48258 +
            (C16335 * C304 + C16331 * C322 + C16336 * C1437 + C48253 * C1438) *
                C1091 +
            (C16335 * C323 + C16331 * C334 + C16336 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1160 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47871) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
               C48232) *
              C47935 * C1155 -
          (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
               C48232 +
           ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                C47871 +
            (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                C1160) *
               C48138 * C16333) *
              C47935 * C1156 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1160 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C47871) *
               C48138 * C16333 +
           ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
               C48232) *
              C47935 * C1157 -
          (((C16336 * C1176 + C48253 * C1183 + C16335 * C1169 +
             C16331 * C1180) *
                C47871 +
            (C16336 * C1165 + C48253 * C1175 + C16335 * C1162 +
             C16331 * C1170) *
                C1160) *
               C48138 * C48232 +
           ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
             C16331 * C1181) *
                C47871 +
            (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
             C16331 * C1172) *
                C1160) *
               C48138 * C16333) *
              C47935 * C1158 +
          (((C16335 * C1164 + C16331 * C1173 + C16336 * C5951 +
             C48253 * C5953) *
                C1160 +
            (C16335 * C1174 + C16331 * C1182 + C16336 * C5954 +
             C48253 * C5957) *
                C47871) *
               C48138 * C16333 +
           ((C16335 * C1165 + C16331 * C1175 + C16336 * C5952 +
             C48253 * C5955) *
                C1160 +
            (C16335 * C1176 + C16331 * C1183 + C16336 * C5956 +
             C48253 * C5958) *
                C47871) *
               C48138 * C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C48138 * C16333 +
            ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
                C48232) *
               C48275 -
           (((C16761 + C16760) * C47871 + (C16759 + C16758) * C1160) * C48138 *
                C48232 +
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C47871 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C1160) *
                C48138 * C16333) *
               C48264 +
           (((C16335 * C490 + C16331 * C505 + C16336 * C1297 + C48253 * C1309) *
                 C1160 +
             (C16335 * C506 + C16331 * C520 + C16336 * C1308 + C48253 * C1324) *
                 C47871) *
                C48138 * C16333 +
            ((C16767 + C16766) * C1160 + (C16769 + C16768) * C47871) * C48138 *
                C48232) *
               C48238) *
              C1086 +
          ((((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C1160 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C47871) *
                C48138 * C16333 +
            ((C17269 + C17268) * C1160 + (C17271 + C17270) * C47871) * C48138 *
                C48232) *
               C48264 -
           (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
                C48232 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C48138 * C16333) *
               C48275 -
           (((C16336 * C1319 + C48253 * C1329 + C16335 * C1306 +
              C16331 * C1323) *
                 C47871 +
             (C16336 * C1302 + C48253 * C1318 + C16335 * C1296 +
              C16331 * C1307) *
                 C1160) *
                C48138 * C48232 +
            ((C16336 * C1317 + C48253 * C1328 + C16335 * C1308 +
              C16331 * C1324) *
                 C47871 +
             (C16336 * C1301 + C48253 * C1316 + C16335 * C1297 +
              C16331 * C1309) *
                 C1160) *
                C48138 * C16333) *
               C48238) *
              C1087 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C48138 * C16333 +
            ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
                C48232) *
               C48275 -
           (((C16336 * C1719 + C48253 * C1723 + C16335 * C1312 +
              C16331 * C1326) *
                 C47871 +
             (C16336 * C1714 + C48253 * C1718 + C16335 * C1299 +
              C16331 * C1313) *
                 C1160) *
                C48138 * C48232 +
            ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
              C16331 * C1327) *
                 C47871 +
             (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
              C16331 * C1315) *
                 C1160) *
                C48138 * C16333) *
               C48264 +
           (((C16335 * C1301 + C16331 * C1316 + C16336 * C6105 +
              C48253 * C6107) *
                 C1160 +
             (C16335 * C1317 + C16331 * C1328 + C16336 * C6108 +
              C48253 * C6111) *
                 C47871) *
                C48138 * C16333 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C1160 +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47871) *
                C48138 * C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C665 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C659 -
            (C16370 + C16371) * C666 - (C16372 + C16373) * C660 +
            (C16374 + C16375) * C667 + (C16376 + C16377) * C661 -
            (C16378 + C16379) * C668 - (C16380 + C16381) * C48239) *
               C48138 * C16333 +
           ((C16371 + C16370) * C665 + (C16373 + C16372) * C659 -
            (C16375 + C16374) * C666 - (C16377 + C16376) * C660 +
            (C16379 + C16378) * C667 + (C16381 + C16380) * C661 -
            (C16383 + C16382) * C668 - (C16385 + C16384) * C48239) *
               C48138 * C48232) *
              C48204 +
          (((C16758 + C16759) * C666 -
            ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                 C659 +
             (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                 C665) +
            (C16760 + C16761) * C660 - (C16762 + C16763) * C667 -
            (C16764 + C16765) * C661 + (C17054 + C17055) * C668 +
            (C17056 + C17057) * C48239) *
               C48138 * C16333 +
           ((C16763 + C16762) * C666 -
            ((C16761 + C16760) * C659 + (C16759 + C16758) * C665) +
            (C16765 + C16764) * C660 - (C17055 + C17054) * C667 -
            (C17057 + C17056) * C661 +
            (C16335 * C489 + C16331 * C503 + C16336 * C939 + C48253 * C948) *
                C668 +
            (C16335 * C504 + C16331 * C519 + C16336 * C949 + C48253 * C954) *
                C48239) *
               C48138 * C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46986 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48186 -
             (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
                C48138 * C16333 +
            ((C16371 + C16370) * C46986 + (C16373 + C16372) * C48186 -
             (C16375 + C16374) * C46967 - (C16377 + C16376) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C16758 + C16759) * C46967 -
             ((C16336 * C941 + C48253 * C950 + C16335 * C496 + C16331 * C515) *
                  C48186 +
              (C16336 * C935 + C48253 * C940 + C16335 * C486 + C16331 * C497) *
                  C46986) +
             (C16760 + C16761) * C47881) *
                C48138 * C16333 +
            ((C16763 + C16762) * C46967 -
             ((C16761 + C16760) * C48186 + (C16759 + C16758) * C46986) +
             (C16765 + C16764) * C47881) *
                C48138 * C48232) *
               C48022) *
              C1086 +
          ((((C16564 + C16565) * C46967 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48186 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46986) +
             (C16566 + C16567) * C47881) *
                C48138 * C16333 +
            ((C16569 + C16568) * C46967 -
             ((C16567 + C16566) * C48186 + (C16565 + C16564) * C46986) +
             (C16571 + C16570) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C16335 * C935 + C16331 * C940 + C16336 * C1300 + C48253 * C1315) *
                 C46986 +
             (C16335 * C941 + C16331 * C950 + C16336 * C1314 + C48253 * C1327) *
                 C48186 -
             (C17268 + C17269) * C46967 - (C17270 + C17271) * C47881) *
                C48138 * C16333 +
            ((C17269 + C17268) * C46986 + (C17271 + C17270) * C48186 -
             (C17273 + C17272) * C46967 - (C17275 + C17274) * C47881) *
                C48138 * C48232) *
               C48022) *
              C1087 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C46986 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C48186 -
             (C16572 + C16573) * C46967 - (C16574 + C16575) * C47881) *
                C48138 * C16333 +
            ((C16573 + C16572) * C46986 + (C16575 + C16574) * C48186 -
             (C16577 + C16576) * C46967 - (C16579 + C16578) * C47881) *
                C48138 * C48232) *
               C48204 +
           (((C17994 + C17995) * C46967 -
             ((C16336 * C1717 + C48253 * C1722 + C16335 * C1314 +
               C16331 * C1327) *
                  C48186 +
              (C16336 * C1713 + C48253 * C1716 + C16335 * C1300 +
               C16331 * C1315) *
                  C46986) +
             (C17996 + C17997) * C47881) *
                C48138 * C16333 +
            ((C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
              C48253 * C1720) *
                 C46967 -
             ((C17997 + C17996) * C48186 + (C17995 + C17994) * C46986) +
             (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
              C48253 * C1724) *
                 C47881) *
                C48138 * C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
               C114 +
           (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
               C102 -
           (C16370 + C16371) * C115 - (C16372 + C16373) * C103 +
           (C16374 + C16375) * C116 + (C16376 + C16377) * C104 -
           (C16378 + C16379) * C117 - (C16380 + C16381) * C105 +
           (C16382 + C16383) * C118 + (C16384 + C16385) * C106) *
              C48138 * C16333 +
          ((C16371 + C16370) * C114 + (C16373 + C16372) * C102 -
           (C16375 + C16374) * C115 - (C16377 + C16376) * C103 +
           (C16379 + C16378) * C116 + (C16381 + C16380) * C104 -
           (C16383 + C16382) * C117 - (C16385 + C16384) * C105 +
           (C16335 * C124 + C16331 * C136 + C16336 * C669 + C48253 * C670) *
               C118 +
           (C16335 * C137 + C16331 * C145 + C16336 * C671 + C48253 * C672) *
               C106) *
              C48138 * C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C293 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C287 -
            (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
            (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C293 + (C16373 + C16372) * C287 -
            (C16375 + C16374) * C294 - (C16377 + C16376) * C288 +
            (C16379 + C16378) * C295 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C47935 * C48274 +
          (((C16564 + C16565) * C294 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C287 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C293) +
            (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
            (C16570 + C16571) * C48227) *
               C48138 * C16333 +
           ((C16569 + C16568) * C294 -
            ((C16567 + C16566) * C287 + (C16565 + C16564) * C293) +
            (C16571 + C16570) * C288 -
            (C16336 * C304 + C48253 * C322 + C16335 * C299 + C16331 * C312) *
                C295 -
            (C16336 * C323 + C48253 * C334 + C16335 * C313 + C16331 * C329) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48262 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C293 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C287 -
            (C16572 + C16573) * C294 - (C16574 + C16575) * C288 +
            (C16576 + C16577) * C295 + (C16578 + C16579) * C48227) *
               C48138 * C16333 +
           ((C16573 + C16572) * C293 + (C16575 + C16574) * C287 -
            (C16577 + C16576) * C294 - (C16579 + C16578) * C288 +
            (C16335 * C304 + C16331 * C322 + C16336 * C1437 + C48253 * C1438) *
                C295 +
            (C16335 * C323 + C16331 * C334 + C16336 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1089 + (C16373 + C16372) * C48271 -
            (C16375 + C16374) * C1090 - (C16377 + C16376) * C48258 +
            (C16379 + C16378) * C1091 + (C16381 + C16380) * C48227) *
               C48138 * C48232) *
              C47935 * C1086 +
          (((C16564 + C16565) * C1090 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48271 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1089) +
            (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
            (C16570 + C16571) * C48227) *
               C48138 * C16333 +
           ((C16569 + C16568) * C1090 -
            ((C16567 + C16566) * C48271 + (C16565 + C16564) * C1089) +
            (C16571 + C16570) * C48258 - (C16913 + C16912) * C1091 -
            (C16915 + C16914) * C48227) *
               C48138 * C48232) *
              C47935 * C1087 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1089 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48271 -
            (C16572 + C16573) * C1090 - (C16574 + C16575) * C48258 +
            (C16576 + C16577) * C1091 + (C16578 + C16579) * C48227) *
               C48138 * C16333 +
           ((C16573 + C16572) * C1089 + (C16575 + C16574) * C48271 -
            (C16577 + C16576) * C1090 - (C16579 + C16578) * C48258 +
            (C16335 * C304 + C16331 * C322 + C16336 * C1437 + C48253 * C1438) *
                C1091 +
            (C16335 * C323 + C16331 * C334 + C16336 * C1439 + C48253 * C1440) *
                C48227) *
               C48138 * C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1160 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47871) *
               C48138 * C16333 +
           ((C16371 + C16370) * C1160 + (C16373 + C16372) * C47871) * C48138 *
               C48232) *
              C47935 * C1155 -
          (((C16567 + C16566) * C47871 + (C16565 + C16564) * C1160) * C48138 *
               C48232 +
           ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                C47871 +
            (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                C1160) *
               C48138 * C16333) *
              C47935 * C1156 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1160 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C47871) *
               C48138 * C16333 +
           ((C16573 + C16572) * C1160 + (C16575 + C16574) * C47871) * C48138 *
               C48232) *
              C47935 * C1157 -
          (((C16336 * C1176 + C48253 * C1183 + C16335 * C1169 +
             C16331 * C1180) *
                C47871 +
            (C16336 * C1165 + C48253 * C1175 + C16335 * C1162 +
             C16331 * C1170) *
                C1160) *
               C48138 * C48232 +
           ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
             C16331 * C1181) *
                C47871 +
            (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
             C16331 * C1172) *
                C1160) *
               C48138 * C16333) *
              C47935 * C1158 +
          (((C16335 * C1164 + C16331 * C1173 + C16336 * C5951 +
             C48253 * C5953) *
                C1160 +
            (C16335 * C1174 + C16331 * C1182 + C16336 * C5954 +
             C48253 * C5957) *
                C47871) *
               C48138 * C16333 +
           ((C16335 * C1165 + C16331 * C1175 + C16336 * C5952 +
             C48253 * C5955) *
                C1160 +
            (C16335 * C1176 + C16331 * C1183 + C16336 * C5956 +
             C48253 * C5958) *
                C47871) *
               C48138 * C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C46996 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C47876 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C46992 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C47884 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C47002 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C2901) *
                       C48138 * C47900 * C47935 * C47978 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C46992 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47876 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C46996) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C47884 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C47002 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C2901) *
                       C48138 * C47900 * C47935 * C47985 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C46996 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C47876 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C46992 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C47884 +
                    (C22009 * C303 + C22005 * C320 + C22010 * C1161 +
                     C22006 * C1168 + C22011 * C1166 + C22007 * C1177) *
                        C47002 +
                    (C22009 * C321 + C22005 * C333 + C22010 * C1167 +
                     C22006 * C1179 + C22011 * C1178 + C22007 * C1184) *
                        C2901) *
                       C48138 * C47900 * C47935 * C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C2641 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C2635 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C2642 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47881) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C2642 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C2635 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C2641) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C47978 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C2642 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C2635 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C2641) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47881) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C2641 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C2635 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C2642 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C47985 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C2641 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C2635 -
                     (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                      C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                         C2642 -
                     (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                      C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                         C47881) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C1299 + C22005 * C1313 + C22010 * C1714 +
                      C22006 * C1718 + C22011 * C6592 + C22007 * C6595) *
                         C2642 -
                     ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                       C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                          C2635 +
                      (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                       C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                          C2641) +
                     (C22009 * C1312 + C22005 * C1326 + C22010 * C1719 +
                      C22006 * C1723 + C22011 * C6596 + C22007 * C6598) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C2641 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C2635 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C2642 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C47881) *
                       C48138 * C47900 * C47935 * C48281 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C2642 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C2635 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C2641) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C47881) *
                       C48138 * C47900 * C47935 * C48277 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C2641 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C2635 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C2642 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C47881) *
                       C48138 * C47900 * C47935 * C48267 +
                   ((C22009 * C1162 + C22005 * C1170 + C22010 * C1165 +
                     C22006 * C1175 + C22011 * C5952 + C22007 * C5955) *
                        C2642 -
                    ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                      C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                         C2635 +
                     (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                      C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                         C2641) +
                    (C22009 * C1169 + C22005 * C1180 + C22010 * C1176 +
                     C22006 * C1183 + C22011 * C5956 + C22007 * C5958) *
                        C47881) *
                       C48138 * C47900 * C47935 * C48245)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C2533 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48280 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C2534 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C48273 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C2535 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48260 -
                    (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                     C22006 * C312 + C22009 * C122 + C22005 * C132) *
                        C2536 -
                    (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                     C22006 * C329 + C22009 * C133 + C22005 * C143) *
                        C48239) *
                       C48138 * C47900 * C47935 * C2531 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C2534 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C48280 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C2533) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C48273 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C2535 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C48260 +
                    (C22009 * C299 + C22005 * C312 + C22010 * C304 +
                     C22006 * C322 + C22011 * C1437 + C22007 * C1438) *
                        C2536 +
                    (C22009 * C313 + C22005 * C329 + C22010 * C323 +
                     C22006 * C334 + C22011 * C1439 + C22007 * C1440) *
                        C48239) *
                       C48138 * C47900 * C47935 * C47982)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C2641 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C2635 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C2642 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47881) *
                        C48138 * C47900 * C48275 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C2642 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C2635 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C2641) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47881) *
                        C48138 * C47900 * C48264 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C2641 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C2635 -
                     (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                      C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                         C2642 -
                     (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                      C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                         C47881) *
                        C48138 * C47900 * C48238) *
                       C2531 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C2642 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C2635 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C2641) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47881) *
                        C48138 * C47900 * C48275 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C2641 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C2635 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C2642 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47881) *
                        C48138 * C47900 * C48264 +
                    ((C22009 * C1296 + C22005 * C1307 + C22010 * C1302 +
                      C22006 * C1318 + C22011 * C6106 + C22007 * C6109) *
                         C2642 -
                     ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                       C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                          C2635 +
                      (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                       C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                          C2641) +
                     (C22009 * C1306 + C22005 * C1323 + C22010 * C1319 +
                      C22006 * C1329 + C22011 * C6110 + C22007 * C6112) *
                         C47881) *
                        C48138 * C47900 * C48238) *
                       C47982)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C46996 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47876 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C46992 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47884 +
                     (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                      C22006 * C310 + C22011 * C303 + C22007 * C320) *
                         C47002 +
                     (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                      C22006 * C328 + C22011 * C321 + C22007 * C333) *
                         C2901) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C46992 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C47876 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C46996) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47884 -
                     (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                      C22006 * C944 + C22009 * C487 + C22005 * C499) *
                         C47002 -
                     (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                      C22006 * C952 + C22009 * C500 + C22005 * C517) *
                         C2901) *
                        C48138 * C47900 * C48022) *
                       C2531 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C46992 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C47876 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C46996) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47884 -
                     (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                      C22006 * C320 + C22009 * C298 + C22005 * C310) *
                         C47002 -
                     (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                      C22006 * C333 + C22009 * C311 + C22005 * C328) *
                         C2901) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C46996 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47876 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C46992 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47884 +
                     (C22009 * C937 + C22005 * C944 + C22010 * C1298 +
                      C22006 * C1311 + C22011 * C1715 + C22007 * C1720) *
                         C47002 +
                     (C22009 * C945 + C22005 * C952 + C22010 * C1310 +
                      C22006 * C1325 + C22011 * C1721 + C22007 * C1724) *
                         C2901) *
                        C48138 * C47900 * C48022) *
                       C47982)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C2533 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48280 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C2534 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C48273 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C2535 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48260 -
                    (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                     C22006 * C312 + C22009 * C122 + C22005 * C132) *
                        C2536 -
                    (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                     C22006 * C329 + C22009 * C133 + C22005 * C143) *
                        C48239) *
                       C48138 * C47900 * C47935 * C2531 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C2534 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C48280 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C2533) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C48273 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C2535 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C48260 +
                    (C22009 * C299 + C22005 * C312 + C22010 * C304 +
                     C22006 * C322 + C22011 * C1437 + C22007 * C1438) *
                        C2536 +
                    (C22009 * C313 + C22005 * C329 + C22010 * C323 +
                     C22006 * C334 + C22011 * C1439 + C22007 * C1440) *
                        C48239) *
                       C48138 * C47900 * C47935 * C47982)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C2641 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C2635 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C2642 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C47881) *
                       C48138 * C47900 * C47935 * C48281 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C2642 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C2635 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C2641) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C47881) *
                       C48138 * C47900 * C47935 * C48277 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C2641 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C2635 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C2642 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C47881) *
                       C48138 * C47900 * C47935 * C48267 +
                   ((C22009 * C1162 + C22005 * C1170 + C22010 * C1165 +
                     C22006 * C1175 + C22011 * C5952 + C22007 * C5955) *
                        C2642 -
                    ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                      C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                         C2635 +
                     (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                      C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                         C2641) +
                    (C22009 * C1169 + C22005 * C1180 + C22010 * C1176 +
                     C22006 * C1183 + C22011 * C5956 + C22007 * C5958) *
                        C47881) *
                       C48138 * C47900 * C47935 * C48245)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C46986 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C48186 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C46967 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47881) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C46967 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C48186 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C46986) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C47978 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C46967 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C48186 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C46986) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47881) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C46986 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C48186 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C46967 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C47985 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C46986 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C48186 -
                     (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                      C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                         C46967 -
                     (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                      C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                         C47881) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C1299 + C22005 * C1313 + C22010 * C1714 +
                      C22006 * C1718 + C22011 * C6592 + C22007 * C6595) *
                         C46967 -
                     ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                       C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                          C48186 +
                      (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                       C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                          C46986) +
                     (C22009 * C1312 + C22005 * C1326 + C22010 * C1719 +
                      C22006 * C1723 + C22011 * C6596 + C22007 * C6598) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C48018 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C48025 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C1160 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C47871) *
                        C48138 * C47900 * C3806) *
                       C47978 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C48025 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C48018 -
                    ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                      C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                         C47871 +
                     (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                      C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                         C1160) *
                        C48138 * C47900 * C3806) *
                       C47985 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C1160 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C47871) *
                        C48138 * C47900 * C48018 -
                    ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                      C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                         C47871 +
                     (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                      C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                         C1160) *
                        C48138 * C47900 * C48025 +
                    ((C22009 * C1301 + C22005 * C1316 + C22010 * C6105 +
                      C22006 * C6107 + C22011 * C22860 + C22007 * C22861) *
                         C1160 +
                     (C22009 * C1317 + C22005 * C1328 + C22010 * C6108 +
                      C22006 * C6111 + C22011 * C22862 + C22007 * C22863) *
                         C47871) *
                        C48138 * C47900 * C3806) *
                       C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C3298 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C48022) *
                       C48281 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C48022 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C3298) *
                       C48277 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C1160 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C47871) *
                        C48138 * C47900 * C3298 -
                    ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                      C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                         C47871 +
                     (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                      C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                         C1160) *
                        C48138 * C47900 * C48022) *
                       C48267 +
                   (((C22009 * C1713 + C22005 * C1716 + C22010 * C6591 +
                      C22006 * C6593 + C22011 * C23206 + C22007 * C23207) *
                         C1160 +
                     (C22009 * C1717 + C22005 * C1722 + C22010 * C6594 +
                      C22006 * C6597 + C22011 * C23208 + C22007 * C23209) *
                         C47871) *
                        C48138 * C47900 * C48022 -
                    ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                      C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                         C47871 +
                     (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                      C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                         C1160) *
                        C48138 * C47900 * C3298) *
                       C48245)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1089 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C48271 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C1090 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C48258 +
                     (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                      C22006 * C310 + C22011 * C303 + C22007 * C320) *
                         C1091 +
                     (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                      C22006 * C328 + C22011 * C321 + C22007 * C333) *
                         C48227) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C1090 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C48271 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C1089) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C48258 -
                     (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                      C22006 * C944 + C22009 * C487 + C22005 * C499) *
                         C1091 -
                     (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                      C22006 * C952 + C22009 * C500 + C22005 * C517) *
                         C48227) *
                        C48138 * C47900 * C48022) *
                       C2531 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C1090 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C48271 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C1089) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C48258 -
                     (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                      C22006 * C320 + C22009 * C298 + C22005 * C310) *
                         C1091 -
                     (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                      C22006 * C333 + C22009 * C311 + C22005 * C328) *
                         C48227) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1089 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C48271 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C1090 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C48258 +
                     (C22009 * C937 + C22005 * C944 + C22010 * C1298 +
                      C22006 * C1311 + C22011 * C1715 + C22007 * C1720) *
                         C1091 +
                     (C22009 * C945 + C22005 * C952 + C22010 * C1310 +
                      C22006 * C1325 + C22011 * C1721 + C22007 * C1724) *
                         C48227) *
                        C48138 * C47900 * C48022) *
                       C47982)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C48282 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C48279 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C1160 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C47871) *
                        C48138 * C47900 * C48270 -
                    ((C22011 * C7462 + C22007 * C7465 + C22010 * C2421 +
                      C22006 * C2426 + C22009 * C2025 + C22005 * C2035) *
                         C47871 +
                     (C22011 * C7459 + C22007 * C7461 + C22010 * C2417 +
                      C22006 * C2420 + C22009 * C2017 + C22005 * C2026) *
                         C1160) *
                        C48138 * C47900 * C48251) *
                       C2531 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C48279 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C48282 -
                    ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                      C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                         C47871 +
                     (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                      C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                         C1160) *
                        C48138 * C47900 * C48270 +
                    ((C22009 * C2417 + C22005 * C2420 + C22010 * C7459 +
                      C22006 * C7461 + C22011 * C23838 + C22007 * C23839) *
                         C1160 +
                     (C22009 * C2421 + C22005 * C2426 + C22010 * C7462 +
                      C22006 * C7465 + C22011 * C23840 + C22007 * C23841) *
                         C47871) *
                        C48138 * C47900 * C48251) *
                       C47982)) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C46986 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C48186 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C46967 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47881) *
                        C48138 * C47900 * C48018 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C46967 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C48186 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C46986) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47881) *
                        C48138 * C47900 * C48025 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C46986 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C48186 -
                     (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                      C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                         C46967 -
                     (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                      C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                         C47881) *
                        C48138 * C47900 * C3806) *
                       C2531 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C46967 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C48186 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C46986) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47881) *
                        C48138 * C47900 * C48018 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C46986 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C48186 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C46967 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47881) *
                        C48138 * C47900 * C48025 +
                    ((C22009 * C1296 + C22005 * C1307 + C22010 * C1302 +
                      C22006 * C1318 + C22011 * C6106 + C22007 * C6109) *
                         C46967 -
                     ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                       C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                          C48186 +
                      (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                       C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                          C46986) +
                     (C22009 * C1306 + C22005 * C1323 + C22010 * C1319 +
                      C22006 * C1329 + C22011 * C6110 + C22007 * C6112) *
                         C47881) *
                        C48138 * C47900 * C3806) *
                       C47982)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1089 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C48271 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C1090 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C48258 +
                     (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                      C22006 * C310 + C22011 * C303 + C22007 * C320) *
                         C1091 +
                     (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                      C22006 * C328 + C22011 * C321 + C22007 * C333) *
                         C48227) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C1090 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C48271 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C1089) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C48258 -
                     (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                      C22006 * C944 + C22009 * C487 + C22005 * C499) *
                         C1091 -
                     (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                      C22006 * C952 + C22009 * C500 + C22005 * C517) *
                         C48227) *
                        C48138 * C47900 * C48022) *
                       C2531 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C1090 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C48271 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C1089) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C48258 -
                     (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                      C22006 * C320 + C22009 * C298 + C22005 * C310) *
                         C1091 -
                     (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                      C22006 * C333 + C22009 * C311 + C22005 * C328) *
                         C48227) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1089 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C48271 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C1090 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C48258 +
                     (C22009 * C937 + C22005 * C944 + C22010 * C1298 +
                      C22006 * C1311 + C22011 * C1715 + C22007 * C1720) *
                         C1091 +
                     (C22009 * C945 + C22005 * C952 + C22010 * C1310 +
                      C22006 * C1325 + C22011 * C1721 + C22007 * C1724) *
                         C48227) *
                        C48138 * C47900 * C48022) *
                       C47982)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C3298 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C48022) *
                       C48281 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C48022 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C3298) *
                       C48277 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C1160 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C47871) *
                        C48138 * C47900 * C3298 -
                    ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                      C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                         C47871 +
                     (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                      C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                         C1160) *
                        C48138 * C47900 * C48022) *
                       C48267 +
                   (((C22009 * C1713 + C22005 * C1716 + C22010 * C6591 +
                      C22006 * C6593 + C22011 * C23206 + C22007 * C23207) *
                         C1160 +
                     (C22009 * C1717 + C22005 * C1722 + C22010 * C6594 +
                      C22006 * C6597 + C22011 * C23208 + C22007 * C23209) *
                         C47871) *
                        C48138 * C47900 * C48022 -
                    ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                      C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                         C47871 +
                     (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                      C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                         C1160) *
                        C48138 * C47900 * C3298) *
                       C48245)) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C46986 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48186 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C46967 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C47881) *
                       C48138 * C47900 * C47935 * C1431 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C46967 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C48186 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C46986) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C47881) *
                       C48138 * C47900 * C47935 * C1432 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C46986 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C48186 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C46967 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C47881) *
                       C48138 * C47900 * C47935 * C1433 +
                   ((C22009 * C1162 + C22005 * C1170 + C22010 * C1165 +
                     C22006 * C1175 + C22011 * C5952 + C22007 * C5955) *
                        C46967 -
                    ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                      C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                         C48186 +
                     (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                      C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                         C46986) +
                    (C22009 * C1169 + C22005 * C1180 + C22010 * C1176 +
                     C22006 * C1183 + C22011 * C5956 + C22007 * C5958) *
                        C47881) *
                       C48138 * C47900 * C47935 * C48245)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C665 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C659 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C666 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C660 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C667 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C661 -
                    (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                     C22006 * C312 + C22009 * C122 + C22005 * C132) *
                        C668 -
                    (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                     C22006 * C329 + C22009 * C133 + C22005 * C143) *
                        C48239) *
                       C48138 * C47900 * C47935 * C48203 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C666 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C659 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C665) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C660 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C667 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C661 +
                    (C22009 * C299 + C22005 * C312 + C22010 * C304 +
                     C22006 * C322 + C22011 * C1437 + C22007 * C1438) *
                        C668 +
                    (C22009 * C313 + C22005 * C329 + C22010 * C323 +
                     C22006 * C334 + C22011 * C1439 + C22007 * C1440) *
                        C48239) *
                       C48138 * C47900 * C47935 * C47982)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C46986 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C48186 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C46967 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47881) *
                        C48138 * C47900 * C1835 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C46967 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C48186 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C46986) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47881) *
                        C48138 * C47900 * C1836 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C46986 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C48186 -
                     (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                      C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                         C46967 -
                     (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                      C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                         C47881) *
                        C48138 * C47900 * C48238) *
                       C48203 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C46967 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C48186 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C46986) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47881) *
                        C48138 * C47900 * C1835 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C46986 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C48186 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C46967 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47881) *
                        C48138 * C47900 * C1836 +
                    ((C22009 * C1296 + C22005 * C1307 + C22010 * C1302 +
                      C22006 * C1318 + C22011 * C6106 + C22007 * C6109) *
                         C46967 -
                     ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                       C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                          C48186 +
                      (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                       C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                          C46986) +
                     (C22009 * C1306 + C22005 * C1323 + C22010 * C1319 +
                      C22006 * C1329 + C22011 * C6110 + C22007 * C6112) *
                         C47881) *
                        C48138 * C47900 * C48238) *
                       C47982)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C48204 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C48022) *
                       C1431 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C48022 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C48204) *
                       C1432 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C1160 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C47871) *
                        C48138 * C47900 * C48204 -
                    ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                      C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                         C47871 +
                     (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                      C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                         C1160) *
                        C48138 * C47900 * C48022) *
                       C1433 +
                   (((C22009 * C1713 + C22005 * C1716 + C22010 * C6591 +
                      C22006 * C6593 + C22011 * C23206 + C22007 * C23207) *
                         C1160 +
                     (C22009 * C1717 + C22005 * C1722 + C22010 * C6594 +
                      C22006 * C6597 + C22011 * C23208 + C22007 * C23209) *
                         C47871) *
                        C48138 * C47900 * C48022 -
                    ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                      C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                         C47871 +
                     (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                      C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                         C1160) *
                        C48138 * C47900 * C48204) *
                       C48245)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C293 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C287 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C294 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C288 +
                     (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                      C22006 * C310 + C22011 * C303 + C22007 * C320) *
                         C295 +
                     (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                      C22006 * C328 + C22011 * C321 + C22007 * C333) *
                         C48227) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C294 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C287 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C293) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C288 -
                     (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                      C22006 * C944 + C22009 * C487 + C22005 * C499) *
                         C295 -
                     (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                      C22006 * C952 + C22009 * C500 + C22005 * C517) *
                         C48227) *
                        C48138 * C47900 * C48022) *
                       C48203 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C294 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C287 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C293) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C288 -
                     (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                      C22006 * C320 + C22009 * C298 + C22005 * C310) *
                         C295 -
                     (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                      C22006 * C333 + C22009 * C311 + C22005 * C328) *
                         C48227) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C293 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C287 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C294 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C288 +
                     (C22009 * C937 + C22005 * C944 + C22010 * C1298 +
                      C22006 * C1311 + C22011 * C1715 + C22007 * C1720) *
                         C295 +
                     (C22009 * C945 + C22005 * C952 + C22010 * C1310 +
                      C22006 * C1325 + C22011 * C1721 + C22007 * C1724) *
                         C48227) *
                        C48138 * C47900 * C48022) *
                       C47982)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C2299 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C2300 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C1160 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C47871) *
                        C48138 * C47900 * C2301 -
                    ((C22011 * C7462 + C22007 * C7465 + C22010 * C2421 +
                      C22006 * C2426 + C22009 * C2025 + C22005 * C2035) *
                         C47871 +
                     (C22011 * C7459 + C22007 * C7461 + C22010 * C2417 +
                      C22006 * C2420 + C22009 * C2017 + C22005 * C2026) *
                         C1160) *
                        C48138 * C47900 * C48251) *
                       C48203 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C2300 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C2299 -
                    ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                      C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                         C47871 +
                     (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                      C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                         C1160) *
                        C48138 * C47900 * C2301 +
                    ((C22009 * C2417 + C22005 * C2420 + C22010 * C7459 +
                      C22006 * C7461 + C22011 * C23838 + C22007 * C23839) *
                         C1160 +
                     (C22009 * C2421 + C22005 * C2426 + C22010 * C7462 +
                      C22006 * C7465 + C22011 * C23840 + C22007 * C23841) *
                         C47871) *
                        C48138 * C47900 * C48251) *
                       C47982)) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (0.5 * std::pow(Pi, 2.5) *
                      ((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                        C22006 * C308 + C22011 * C301 + C22007 * C316) *
                           C114 +
                       (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                        C22006 * C326 + C22011 * C317 + C22007 * C331) *
                           C102 -
                       (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                        C22006 * C306 + C22009 * C120 + C22005 * C128) *
                           C115 -
                       (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                        C22006 * C327 + C22009 * C129 + C22005 * C141) *
                           C103 +
                       (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                        C22006 * C310 + C22011 * C303 + C22007 * C320) *
                           C116 +
                       (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                        C22006 * C328 + C22011 * C321 + C22007 * C333) *
                           C104 -
                       (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                        C22006 * C312 + C22009 * C122 + C22005 * C132) *
                           C117 -
                       (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                        C22006 * C329 + C22009 * C133 + C22005 * C143) *
                           C105 +
                       (C22009 * C123 + C22005 * C134 + C22010 * C300 +
                        C22006 * C314 + C22011 * C305 + C22007 * C324) *
                           C118 +
                       (C22009 * C135 + C22005 * C144 + C22010 * C315 +
                        C22006 * C330 + C22011 * C325 + C22007 * C335) *
                           C106) *
                      C48138 * C47900 * C47935 * C47923 +
                  0.5 * std::pow(Pi, 2.5) *
                      (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                         C22006 * C308 + C22011 * C301 + C22007 * C316) *
                            C293 +
                        (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                         C22006 * C326 + C22011 * C317 + C22007 * C331) *
                            C287 -
                        (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                         C22006 * C306 + C22009 * C120 + C22005 * C128) *
                            C294 -
                        (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                         C22006 * C327 + C22009 * C129 + C22005 * C141) *
                            C288 +
                        (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                         C22006 * C310 + C22011 * C303 + C22007 * C320) *
                            C295 +
                        (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                         C22006 * C328 + C22011 * C321 + C22007 * C333) *
                            C48227) *
                           C48138 * C47900 * C47935 * C48274 +
                       ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                         C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                            C294 -
                        ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                          C22006 * C331 + C22009 * C307 + C22005 * C326) *
                             C287 +
                         (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                          C22006 * C316 + C22009 * C297 + C22005 * C308) *
                             C293) +
                        (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                         C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                            C288 -
                        (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                         C22006 * C320 + C22009 * C298 + C22005 * C310) *
                            C295 -
                        (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                         C22006 * C333 + C22009 * C311 + C22005 * C328) *
                            C48227) *
                           C48138 * C47900 * C47935 * C48262 +
                       ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                         C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                            C293 +
                        (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                         C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                            C287 -
                        (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                         C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                            C294 -
                        (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                         C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                            C288 +
                        (C22009 * C303 + C22005 * C320 + C22010 * C1161 +
                         C22006 * C1168 + C22011 * C1166 + C22007 * C1177) *
                            C295 +
                        (C22009 * C321 + C22005 * C333 + C22010 * C1167 +
                         C22006 * C1179 + C22011 * C1178 + C22007 * C1184) *
                            C48227) *
                           C48138 * C47900 * C47935 * C48235)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C293 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C287 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C294 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C288 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C295 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C48275 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C294 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C287 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C293) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C288 -
                    (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                     C22006 * C944 + C22009 * C487 + C22005 * C499) *
                        C295 -
                    (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                     C22006 * C952 + C22009 * C500 + C22005 * C517) *
                        C48227) *
                       C48138 * C47900 * C48264 +
                   ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                     C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                        C293 +
                    (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                     C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                        C287 -
                    (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                     C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                        C294 -
                    (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                     C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                        C288 +
                    (C22009 * C492 + C22005 * C509 + C22010 * C1295 +
                     C22006 * C1305 + C22011 * C1303 + C22007 * C1320) *
                        C295 +
                    (C22009 * C510 + C22005 * C522 + C22010 * C1304 +
                     C22006 * C1322 + C22011 * C1321 + C22007 * C1330) *
                        C48227) *
                       C48138 * C47900 * C48238) *
                  C47923) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1089 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48271 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C1090 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C48258 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C1091 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C47935 * C1086 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C1090 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C48271 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1089) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C48258 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C1091 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C48227) *
                       C48138 * C47900 * C47935 * C1087 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C1089 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C48271 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C1090 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C48258 +
                    (C22009 * C303 + C22005 * C320 + C22010 * C1161 +
                     C22006 * C1168 + C22011 * C1166 + C22007 * C1177) *
                        C1091 +
                    (C22009 * C321 + C22005 * C333 + C22010 * C1167 +
                     C22006 * C1179 + C22011 * C1178 + C22007 * C1184) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48235)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1160 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1155 -
                   ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                     C22006 * C331 + C22009 * C307 + C22005 * C326) *
                        C47871 +
                    (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                     C22006 * C316 + C22009 * C297 + C22005 * C308) *
                        C1160) *
                       C48138 * C47900 * C47935 * C1156 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C1160 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1157 -
                   ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                     C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                        C47871 +
                    (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                     C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                        C1160) *
                       C48138 * C47900 * C47935 * C1158 +
                   ((C22009 * C1164 + C22005 * C1173 + C22010 * C5951 +
                     C22006 * C5953 + C22011 * C22746 + C22007 * C22747) *
                        C1160 +
                    (C22009 * C1174 + C22005 * C1182 + C22010 * C5954 +
                     C22006 * C5957 + C22011 * C22748 + C22007 * C22749) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1159)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C48275 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C48264 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C1160 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C47871) *
                        C48138 * C47900 * C48238) *
                       C1086 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C48264 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C48275 -
                    ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                      C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                         C47871 +
                     (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                      C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                         C1160) *
                        C48138 * C47900 * C48238) *
                       C1087 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C1160 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C47871) *
                        C48138 * C47900 * C48275 -
                    ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                      C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                         C47871 +
                     (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                      C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                         C1160) *
                        C48138 * C47900 * C48264 +
                    ((C22009 * C1301 + C22005 * C1316 + C22010 * C6105 +
                      C22006 * C6107 + C22011 * C22860 + C22007 * C22861) *
                         C1160 +
                     (C22009 * C1317 + C22005 * C1328 + C22010 * C6108 +
                      C22006 * C6111 + C22011 * C22862 + C22007 * C22863) *
                         C47871) *
                        C48138 * C47900 * C48238) *
                       C48235)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1089 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48271 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C1090 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C48258 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C1091 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C1835 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C1090 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C48271 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1089) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C48258 -
                    (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                     C22006 * C944 + C22009 * C487 + C22005 * C499) *
                        C1091 -
                    (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                     C22006 * C952 + C22009 * C500 + C22005 * C517) *
                        C48227) *
                       C48138 * C47900 * C1836 +
                   ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                     C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                        C1089 +
                    (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                     C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                        C48271 -
                    (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                     C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                        C1090 -
                    (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                     C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                        C48258 +
                    (C22009 * C492 + C22005 * C509 + C22010 * C1295 +
                     C22006 * C1305 + C22011 * C1303 + C22007 * C1320) *
                        C1091 +
                    (C22009 * C510 + C22005 * C522 + C22010 * C1304 +
                     C22006 * C1322 + C22011 * C1321 + C22007 * C1330) *
                        C48227) *
                       C48138 * C47900 * C48238) *
                  C47923) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C1835 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C1836 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C1160 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C47871) *
                        C48138 * C47900 * C48238) *
                       C48274 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C1836 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C1835 -
                    ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                      C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                         C47871 +
                     (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                      C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                         C1160) *
                        C48138 * C47900 * C48238) *
                       C48262 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C1160 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C47871) *
                        C48138 * C47900 * C1835 -
                    ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                      C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                         C47871 +
                     (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                      C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                         C1160) *
                        C48138 * C47900 * C1836 +
                    ((C22009 * C1301 + C22005 * C1316 + C22010 * C6105 +
                      C22006 * C6107 + C22011 * C22860 + C22007 * C22861) *
                         C1160 +
                     (C22009 * C1317 + C22005 * C1328 + C22010 * C6108 +
                      C22006 * C6111 + C22011 * C22862 + C22007 * C22863) *
                         C47871) *
                        C48138 * C47900 * C48238) *
                       C48235)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1160 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C47871) *
                       C48138 * C47900 * C2010 -
                   ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                     C22006 * C950 + C22009 * C496 + C22005 * C515) *
                        C47871 +
                    (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                     C22006 * C940 + C22009 * C486 + C22005 * C497) *
                        C1160) *
                       C48138 * C47900 * C2011 +
                   ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                     C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                        C1160 +
                    (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                     C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                        C47871) *
                       C48138 * C47900 * C2012 -
                   ((C22011 * C7462 + C22007 * C7465 + C22010 * C2421 +
                     C22006 * C2426 + C22009 * C2025 + C22005 * C2035) *
                        C47871 +
                    (C22011 * C7459 + C22007 * C7461 + C22010 * C2417 +
                     C22006 * C2420 + C22009 * C2017 + C22005 * C2026) *
                        C1160) *
                       C48138 * C47900 * C2013 +
                   ((C22009 * C2018 + C22005 * C2027 + C22010 * C6973 +
                     C22006 * C6975 + C22011 * C23492 + C22007 * C23493) *
                        C1160 +
                    (C22009 * C2028 + C22005 * C2036 + C22010 * C6976 +
                     C22006 * C6979 + C22011 * C23494 + C22007 * C23495) *
                        C47871) *
                       C48138 * C47900 * C2014) *
                  C47923) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C46986 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C48186 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C46967 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47881) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C46967 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C48186 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C46986) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C1086 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C46967 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C48186 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C46986) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47881) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C46986 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C48186 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C46967 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C1087 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C46986 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C48186 -
                     (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                      C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                         C46967 -
                     (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                      C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                         C47881) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C1299 + C22005 * C1313 + C22010 * C1714 +
                      C22006 * C1718 + C22011 * C6592 + C22007 * C6595) *
                         C46967 -
                     ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                       C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                          C48186 +
                      (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                       C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                          C46986) +
                     (C22009 * C1312 + C22005 * C1326 + C22010 * C1719 +
                      C22006 * C1723 + C22011 * C6596 + C22007 * C6598) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C48235)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C665 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C659 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C666 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C660 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C667 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C661 -
                    (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                     C22006 * C312 + C22009 * C122 + C22005 * C132) *
                        C668 -
                    (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                     C22006 * C329 + C22009 * C133 + C22005 * C143) *
                        C48239) *
                       C48138 * C47900 * C48204 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C666 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C659 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C665) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C660 -
                    (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                     C22006 * C944 + C22009 * C487 + C22005 * C499) *
                        C667 -
                    (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                     C22006 * C952 + C22009 * C500 + C22005 * C517) *
                        C661 +
                    (C22009 * C488 + C22005 * C501 + C22010 * C938 +
                     C22006 * C946 + C22011 * C1599 + C22007 * C1600) *
                        C668 +
                    (C22009 * C502 + C22005 * C518 + C22010 * C947 +
                     C22006 * C953 + C22011 * C1601 + C22007 * C1602) *
                        C48239) *
                       C48138 * C47900 * C48022) *
                  C47923) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C46986 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48186 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C46967 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C47881) *
                       C48138 * C47900 * C2299 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C46967 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C48186 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C46986) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C47881) *
                       C48138 * C47900 * C2300 +
                   ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                     C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                        C46986 +
                    (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                     C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                        C48186 -
                    (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                     C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                        C46967 -
                    (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                     C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                        C47881) *
                       C48138 * C47900 * C2301 +
                   ((C22009 * C2016 + C22005 * C2024 + C22010 * C2418 +
                     C22006 * C2422 + C22011 * C7460 + C22007 * C7463) *
                        C46967 -
                    ((C22011 * C7462 + C22007 * C7465 + C22010 * C2421 +
                      C22006 * C2426 + C22009 * C2025 + C22005 * C2035) *
                         C48186 +
                     (C22011 * C7459 + C22007 * C7461 + C22010 * C2417 +
                      C22006 * C2420 + C22009 * C2017 + C22005 * C2026) *
                         C46986) +
                    (C22009 * C2023 + C22005 * C2034 + C22010 * C2423 +
                     C22006 * C2427 + C22011 * C7464 + C22007 * C7466) *
                        C47881) *
                       C48138 * C47900 * C48251) *
                  C47923) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C293 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C287 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C294 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C288 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C295 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48274 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C294 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C287 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C293) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C288 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C295 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48262 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C293 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C287 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C294 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C288 +
                    (C22009 * C303 + C22005 * C320 + C22010 * C1161 +
                     C22006 * C1168 + C22011 * C1166 + C22007 * C1177) *
                        C295 +
                    (C22009 * C321 + C22005 * C333 + C22010 * C1167 +
                     C22006 * C1179 + C22011 * C1178 + C22007 * C1184) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48235)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                    C22006 * C308 + C22011 * C301 + C22007 * C316) *
                       C114 +
                   (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                    C22006 * C326 + C22011 * C317 + C22007 * C331) *
                       C102 -
                   (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                    C22006 * C306 + C22009 * C120 + C22005 * C128) *
                       C115 -
                   (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                    C22006 * C327 + C22009 * C129 + C22005 * C141) *
                       C103 +
                   (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                    C22006 * C310 + C22011 * C303 + C22007 * C320) *
                       C116 +
                   (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                    C22006 * C328 + C22011 * C321 + C22007 * C333) *
                       C104 -
                   (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                    C22006 * C312 + C22009 * C122 + C22005 * C132) *
                       C117 -
                   (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                    C22006 * C329 + C22009 * C133 + C22005 * C143) *
                       C105 +
                   (C22009 * C123 + C22005 * C134 + C22010 * C300 +
                    C22006 * C314 + C22011 * C305 + C22007 * C324) *
                       C118 +
                   (C22009 * C135 + C22005 * C144 + C22010 * C315 +
                    C22006 * C330 + C22011 * C325 + C22007 * C335) *
                       C106) *
                  C48138 * C47900 * C47935 * C47923) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1089 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48271 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C1090 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C48258 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C1091 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C47935 * C1086 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C1090 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C48271 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1089) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C48258 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C1091 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C48227) *
                       C48138 * C47900 * C47935 * C1087 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C1089 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C48271 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C1090 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C48258 +
                    (C22009 * C303 + C22005 * C320 + C22010 * C1161 +
                     C22006 * C1168 + C22011 * C1166 + C22007 * C1177) *
                        C1091 +
                    (C22009 * C321 + C22005 * C333 + C22010 * C1167 +
                     C22006 * C1179 + C22011 * C1178 + C22007 * C1184) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48235)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1160 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1155 -
                   ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                     C22006 * C331 + C22009 * C307 + C22005 * C326) *
                        C47871 +
                    (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                     C22006 * C316 + C22009 * C297 + C22005 * C308) *
                        C1160) *
                       C48138 * C47900 * C47935 * C1156 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C1160 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1157 -
                   ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                     C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                        C47871 +
                    (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                     C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                        C1160) *
                       C48138 * C47900 * C47935 * C1158 +
                   ((C22009 * C1164 + C22005 * C1173 + C22010 * C5951 +
                     C22006 * C5953 + C22011 * C22746 + C22007 * C22747) *
                        C1160 +
                    (C22009 * C1174 + C22005 * C1182 + C22010 * C5954 +
                     C22006 * C5957 + C22011 * C22748 + C22007 * C22749) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1159)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1089 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48271 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C1090 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C48258 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C1091 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C1835 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C1090 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C48271 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1089) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C48258 -
                    (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                     C22006 * C944 + C22009 * C487 + C22005 * C499) *
                        C1091 -
                    (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                     C22006 * C952 + C22009 * C500 + C22005 * C517) *
                        C48227) *
                       C48138 * C47900 * C1836 +
                   ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                     C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                        C1089 +
                    (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                     C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                        C48271 -
                    (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                     C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                        C1090 -
                    (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                     C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                        C48258 +
                    (C22009 * C492 + C22005 * C509 + C22010 * C1295 +
                     C22006 * C1305 + C22011 * C1303 + C22007 * C1320) *
                        C1091 +
                    (C22009 * C510 + C22005 * C522 + C22010 * C1304 +
                     C22006 * C1322 + C22011 * C1321 + C22007 * C1330) *
                        C48227) *
                       C48138 * C47900 * C48238) *
                  C47923) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C1835 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C1836 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C1160 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C47871) *
                        C48138 * C47900 * C48238) *
                       C48274 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C1836 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C1835 -
                    ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                      C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                         C47871 +
                     (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                      C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                         C1160) *
                        C48138 * C47900 * C48238) *
                       C48262 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C1160 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C47871) *
                        C48138 * C47900 * C1835 -
                    ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                      C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                         C47871 +
                     (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                      C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                         C1160) *
                        C48138 * C47900 * C1836 +
                    ((C22009 * C1301 + C22005 * C1316 + C22010 * C6105 +
                      C22006 * C6107 + C22011 * C22860 + C22007 * C22861) *
                         C1160 +
                     (C22009 * C1317 + C22005 * C1328 + C22010 * C6108 +
                      C22006 * C6111 + C22011 * C22862 + C22007 * C22863) *
                         C47871) *
                        C48138 * C47900 * C48238) *
                       C48235)) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C46996 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47876 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C46992 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47884 +
                     (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                      C22006 * C310 + C22011 * C303 + C22007 * C320) *
                         C47002 +
                     (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                      C22006 * C328 + C22011 * C321 + C22007 * C333) *
                         C2901) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C46992 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C47876 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C46996) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47884 -
                     (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                      C22006 * C944 + C22009 * C487 + C22005 * C499) *
                         C47002 -
                     (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                      C22006 * C952 + C22009 * C500 + C22005 * C517) *
                         C2901) *
                        C48138 * C47900 * C48022) *
                       C48203 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C46992 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C47876 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C46996) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47884 -
                     (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                      C22006 * C320 + C22009 * C298 + C22005 * C310) *
                         C47002 -
                     (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                      C22006 * C333 + C22009 * C311 + C22005 * C328) *
                         C2901) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C46996 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47876 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C46992 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47884 +
                     (C22009 * C937 + C22005 * C944 + C22010 * C1298 +
                      C22006 * C1311 + C22011 * C1715 + C22007 * C1720) *
                         C47002 +
                     (C22009 * C945 + C22005 * C952 + C22010 * C1310 +
                      C22006 * C1325 + C22011 * C1721 + C22007 * C1724) *
                         C2901) *
                        C48138 * C47900 * C48022) *
                       C47982)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C2641 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C2635 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C2642 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47881) *
                        C48138 * C47900 * C48018 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C2642 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C2635 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C2641) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47881) *
                        C48138 * C47900 * C48025 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C2641 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C2635 -
                     (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                      C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                         C2642 -
                     (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                      C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                         C47881) *
                        C48138 * C47900 * C3806) *
                       C48203 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C2642 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C2635 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C2641) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47881) *
                        C48138 * C47900 * C48018 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C2641 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C2635 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C2642 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47881) *
                        C48138 * C47900 * C48025 +
                    ((C22009 * C1296 + C22005 * C1307 + C22010 * C1302 +
                      C22006 * C1318 + C22011 * C6106 + C22007 * C6109) *
                         C2642 -
                     ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                       C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                          C2635 +
                      (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                       C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                          C2641) +
                     (C22009 * C1306 + C22005 * C1323 + C22010 * C1319 +
                      C22006 * C1329 + C22011 * C6110 + C22007 * C6112) *
                         C47881) *
                        C48138 * C47900 * C3806) *
                       C47982)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C2641 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C2635 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C2642 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47881) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C2642 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C2635 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C2641) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C48274 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C2642 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C2635 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C2641) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47881) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C2641 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C2635 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C2642 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C48262 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C2641 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C2635 -
                     (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                      C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                         C2642 -
                     (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                      C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                         C47881) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C1299 + C22005 * C1313 + C22010 * C1714 +
                      C22006 * C1718 + C22011 * C6592 + C22007 * C6595) *
                         C2642 -
                     ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                       C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                          C2635 +
                      (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                       C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                          C2641) +
                     (C22009 * C1312 + C22005 * C1326 + C22010 * C1719 +
                      C22006 * C1723 + C22011 * C6596 + C22007 * C6598) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C48235)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C2533 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48280 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C2534 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C48273 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C2535 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48260 -
                    (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                     C22006 * C312 + C22009 * C122 + C22005 * C132) *
                        C2536 -
                    (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                     C22006 * C329 + C22009 * C133 + C22005 * C143) *
                        C48239) *
                       C48138 * C47900 * C3298 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C2534 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C48280 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C2533) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C48273 -
                    (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                     C22006 * C944 + C22009 * C487 + C22005 * C499) *
                        C2535 -
                    (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                     C22006 * C952 + C22009 * C500 + C22005 * C517) *
                        C48260 +
                    (C22009 * C488 + C22005 * C501 + C22010 * C938 +
                     C22006 * C946 + C22011 * C1599 + C22007 * C1600) *
                        C2536 +
                    (C22009 * C502 + C22005 * C518 + C22010 * C947 +
                     C22006 * C953 + C22011 * C1601 + C22007 * C1602) *
                        C48239) *
                       C48138 * C47900 * C48022) *
                  C47923) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C2641 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C2635 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C2642 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C47881) *
                       C48138 * C47900 * C48282 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C2642 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C2635 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C2641) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C47881) *
                       C48138 * C47900 * C48279 +
                   ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                     C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                        C2641 +
                    (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                     C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                        C2635 -
                    (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                     C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                        C2642 -
                    (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                     C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                        C47881) *
                       C48138 * C47900 * C48270 +
                   ((C22009 * C2016 + C22005 * C2024 + C22010 * C2418 +
                     C22006 * C2422 + C22011 * C7460 + C22007 * C7463) *
                        C2642 -
                    ((C22011 * C7462 + C22007 * C7465 + C22010 * C2421 +
                      C22006 * C2426 + C22009 * C2025 + C22005 * C2035) *
                         C2635 +
                     (C22011 * C7459 + C22007 * C7461 + C22010 * C2417 +
                      C22006 * C2420 + C22009 * C2017 + C22005 * C2026) *
                         C2641) +
                    (C22009 * C2023 + C22005 * C2034 + C22010 * C2423 +
                     C22006 * C2427 + C22011 * C7464 + C22007 * C7466) *
                        C47881) *
                       C48138 * C47900 * C48251) *
                  C47923) /
                     (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C46996 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C47876 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C46992 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C47884 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C47002 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C2901) *
                       C48138 * C47900 * C48018 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C46992 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47876 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C46996) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C47884 -
                    (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                     C22006 * C944 + C22009 * C487 + C22005 * C499) *
                        C47002 -
                    (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                     C22006 * C952 + C22009 * C500 + C22005 * C517) *
                        C2901) *
                       C48138 * C47900 * C48025 +
                   ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                     C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                        C46996 +
                    (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                     C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                        C47876 -
                    (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                     C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                        C46992 -
                    (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                     C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                        C47884 +
                    (C22009 * C492 + C22005 * C509 + C22010 * C1295 +
                     C22006 * C1305 + C22011 * C1303 + C22007 * C1320) *
                        C47002 +
                    (C22009 * C510 + C22005 * C522 + C22010 * C1304 +
                     C22006 * C1322 + C22011 * C1321 + C22007 * C1330) *
                        C2901) *
                       C48138 * C47900 * C3806) *
                  C47923) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C2533 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48280 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C2534 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C48273 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C2535 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48260 -
                    (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                     C22006 * C312 + C22009 * C122 + C22005 * C132) *
                        C2536 -
                    (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                     C22006 * C329 + C22009 * C133 + C22005 * C143) *
                        C48239) *
                       C48138 * C47900 * C3298 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C2534 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C48280 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C2533) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C48273 -
                    (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                     C22006 * C944 + C22009 * C487 + C22005 * C499) *
                        C2535 -
                    (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                     C22006 * C952 + C22009 * C500 + C22005 * C517) *
                        C48260 +
                    (C22009 * C488 + C22005 * C501 + C22010 * C938 +
                     C22006 * C946 + C22011 * C1599 + C22007 * C1600) *
                        C2536 +
                    (C22009 * C502 + C22005 * C518 + C22010 * C947 +
                     C22006 * C953 + C22011 * C1601 + C22007 * C1602) *
                        C48239) *
                       C48138 * C47900 * C48022) *
                  C47923) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C2641 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C2635 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C2642 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47881) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C2642 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C2635 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C2641) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C48274 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C2642 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C2635 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C2641) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47881) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C2641 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C2635 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C2642 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C48262 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C2641 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C2635 -
                     (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                      C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                         C2642 -
                     (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                      C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                         C47881) *
                        C48138 * C47900 * C3298 +
                    ((C22009 * C1299 + C22005 * C1313 + C22010 * C1714 +
                      C22006 * C1718 + C22011 * C6592 + C22007 * C6595) *
                         C2642 -
                     ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                       C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                          C2635 +
                      (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                       C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                          C2641) +
                     (C22009 * C1312 + C22005 * C1326 + C22010 * C1719 +
                      C22006 * C1723 + C22011 * C6596 + C22007 * C6598) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C48235)) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C665 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C659 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C666 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C660 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C667 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C661 -
                    (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                     C22006 * C312 + C22009 * C122 + C22005 * C132) *
                        C668 -
                    (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                     C22006 * C329 + C22009 * C133 + C22005 * C143) *
                        C48239) *
                       C48138 * C47900 * C47935 * C48203 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C666 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C659 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C665) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C660 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C667 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C661 +
                    (C22009 * C299 + C22005 * C312 + C22010 * C304 +
                     C22006 * C322 + C22011 * C1437 + C22007 * C1438) *
                        C668 +
                    (C22009 * C313 + C22005 * C329 + C22010 * C323 +
                     C22006 * C334 + C22011 * C1439 + C22007 * C1440) *
                        C48239) *
                       C48138 * C47900 * C47935 * C47982)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C46986 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48186 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C46967 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C47881) *
                       C48138 * C47900 * C47935 * C1431 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C46967 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C48186 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C46986) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C47881) *
                       C48138 * C47900 * C47935 * C1432 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C46986 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C48186 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C46967 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C47881) *
                       C48138 * C47900 * C47935 * C1433 +
                   ((C22009 * C1162 + C22005 * C1170 + C22010 * C1165 +
                     C22006 * C1175 + C22011 * C5952 + C22007 * C5955) *
                        C46967 -
                    ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                      C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                         C48186 +
                     (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                      C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                         C46986) +
                    (C22009 * C1169 + C22005 * C1180 + C22010 * C1176 +
                     C22006 * C1183 + C22011 * C5956 + C22007 * C5958) *
                        C47881) *
                       C48138 * C47900 * C47935 * C48245)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C293 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C287 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C294 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C288 +
                     (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                      C22006 * C310 + C22011 * C303 + C22007 * C320) *
                         C295 +
                     (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                      C22006 * C328 + C22011 * C321 + C22007 * C333) *
                         C48227) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C294 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C287 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C293) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C288 -
                     (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                      C22006 * C944 + C22009 * C487 + C22005 * C499) *
                         C295 -
                     (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                      C22006 * C952 + C22009 * C500 + C22005 * C517) *
                         C48227) *
                        C48138 * C47900 * C48022) *
                       C48203 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C294 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C287 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C293) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C288 -
                     (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                      C22006 * C320 + C22009 * C298 + C22005 * C310) *
                         C295 -
                     (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                      C22006 * C333 + C22009 * C311 + C22005 * C328) *
                         C48227) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C293 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C287 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C294 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C288 +
                     (C22009 * C937 + C22005 * C944 + C22010 * C1298 +
                      C22006 * C1311 + C22011 * C1715 + C22007 * C1720) *
                         C295 +
                     (C22009 * C945 + C22005 * C952 + C22010 * C1310 +
                      C22006 * C1325 + C22011 * C1721 + C22007 * C1724) *
                         C48227) *
                        C48138 * C47900 * C48022) *
                       C47982)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C48204 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C48022) *
                       C1431 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C48022 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C48204) *
                       C1432 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C1160 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C47871) *
                        C48138 * C47900 * C48204 -
                    ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                      C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                         C47871 +
                     (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                      C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                         C1160) *
                        C48138 * C47900 * C48022) *
                       C1433 +
                   (((C22009 * C1713 + C22005 * C1716 + C22010 * C6591 +
                      C22006 * C6593 + C22011 * C23206 + C22007 * C23207) *
                         C1160 +
                     (C22009 * C1717 + C22005 * C1722 + C22010 * C6594 +
                      C22006 * C6597 + C22011 * C23208 + C22007 * C23209) *
                         C47871) *
                        C48138 * C47900 * C48022 -
                    ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                      C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                         C47871 +
                     (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                      C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                         C1160) *
                        C48138 * C47900 * C48204) *
                       C48245)) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C293 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C287 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C294 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C288 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C295 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48274 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C294 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C287 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C293) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C288 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C295 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48262 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C293 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C287 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C294 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C288 +
                    (C22009 * C303 + C22005 * C320 + C22010 * C1161 +
                     C22006 * C1168 + C22011 * C1166 + C22007 * C1177) *
                        C295 +
                    (C22009 * C321 + C22005 * C333 + C22010 * C1167 +
                     C22006 * C1179 + C22011 * C1178 + C22007 * C1184) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48235)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                    C22006 * C308 + C22011 * C301 + C22007 * C316) *
                       C114 +
                   (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                    C22006 * C326 + C22011 * C317 + C22007 * C331) *
                       C102 -
                   (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                    C22006 * C306 + C22009 * C120 + C22005 * C128) *
                       C115 -
                   (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                    C22006 * C327 + C22009 * C129 + C22005 * C141) *
                       C103 +
                   (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                    C22006 * C310 + C22011 * C303 + C22007 * C320) *
                       C116 +
                   (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                    C22006 * C328 + C22011 * C321 + C22007 * C333) *
                       C104 -
                   (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                    C22006 * C312 + C22009 * C122 + C22005 * C132) *
                       C117 -
                   (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                    C22006 * C329 + C22009 * C133 + C22005 * C143) *
                       C105 +
                   (C22009 * C123 + C22005 * C134 + C22010 * C300 +
                    C22006 * C314 + C22011 * C305 + C22007 * C324) *
                       C118 +
                   (C22009 * C135 + C22005 * C144 + C22010 * C315 +
                    C22006 * C330 + C22011 * C325 + C22007 * C335) *
                       C106) *
                  C48138 * C47900 * C47935 * C47923) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C293 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C287 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C294 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C288 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C295 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C48275 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C294 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C287 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C293) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C288 -
                    (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                     C22006 * C944 + C22009 * C487 + C22005 * C499) *
                        C295 -
                    (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                     C22006 * C952 + C22009 * C500 + C22005 * C517) *
                        C48227) *
                       C48138 * C47900 * C48264 +
                   ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                     C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                        C293 +
                    (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                     C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                        C287 -
                    (C22011 * C1302 + C22007 * C1318 + C22010 * C1296 +
                     C22006 * C1307 + C22009 * C491 + C22005 * C507) *
                        C294 -
                    (C22011 * C1319 + C22007 * C1329 + C22010 * C1306 +
                     C22006 * C1323 + C22009 * C508 + C22005 * C521) *
                        C288 +
                    (C22009 * C492 + C22005 * C509 + C22010 * C1295 +
                     C22006 * C1305 + C22011 * C1303 + C22007 * C1320) *
                        C295 +
                    (C22009 * C510 + C22005 * C522 + C22010 * C1304 +
                     C22006 * C1322 + C22011 * C1321 + C22007 * C1330) *
                        C48227) *
                       C48138 * C47900 * C48238) *
                  C47923) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1089 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48271 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C1090 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C48258 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C1091 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C47935 * C1086 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C1090 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C48271 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1089) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C48258 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C1091 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C48227) *
                       C48138 * C47900 * C47935 * C1087 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C1089 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C48271 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C1090 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C48258 +
                    (C22009 * C303 + C22005 * C320 + C22010 * C1161 +
                     C22006 * C1168 + C22011 * C1166 + C22007 * C1177) *
                        C1091 +
                    (C22009 * C321 + C22005 * C333 + C22010 * C1167 +
                     C22006 * C1179 + C22011 * C1178 + C22007 * C1184) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48235)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1160 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1155 -
                   ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                     C22006 * C331 + C22009 * C307 + C22005 * C326) *
                        C47871 +
                    (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                     C22006 * C316 + C22009 * C297 + C22005 * C308) *
                        C1160) *
                       C48138 * C47900 * C47935 * C1156 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C1160 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1157 -
                   ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                     C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                        C47871 +
                    (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                     C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                        C1160) *
                       C48138 * C47900 * C47935 * C1158 +
                   ((C22009 * C1164 + C22005 * C1173 + C22010 * C5951 +
                     C22006 * C5953 + C22011 * C22746 + C22007 * C22747) *
                        C1160 +
                    (C22009 * C1174 + C22005 * C1182 + C22010 * C5954 +
                     C22006 * C5957 + C22011 * C22748 + C22007 * C22749) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1159)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C1160 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C47871) *
                        C48138 * C47900 * C48275 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C47871 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C1160) *
                        C48138 * C47900 * C48264 +
                    ((C22009 * C490 + C22005 * C505 + C22010 * C1297 +
                      C22006 * C1309 + C22011 * C1301 + C22007 * C1316) *
                         C1160 +
                     (C22009 * C506 + C22005 * C520 + C22010 * C1308 +
                      C22006 * C1324 + C22011 * C1317 + C22007 * C1328) *
                         C47871) *
                        C48138 * C47900 * C48238) *
                       C1086 +
                   (((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C1160 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C47871) *
                        C48138 * C47900 * C48264 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C47871 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1160) *
                        C48138 * C47900 * C48275 -
                    ((C22011 * C6108 + C22007 * C6111 + C22010 * C1317 +
                      C22006 * C1328 + C22009 * C1308 + C22005 * C1324) *
                         C47871 +
                     (C22011 * C6105 + C22007 * C6107 + C22010 * C1301 +
                      C22006 * C1316 + C22009 * C1297 + C22005 * C1309) *
                         C1160) *
                        C48138 * C47900 * C48238) *
                       C1087 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C1160 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C47871) *
                        C48138 * C47900 * C48275 -
                    ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                      C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                         C47871 +
                     (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                      C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                         C1160) *
                        C48138 * C47900 * C48264 +
                    ((C22009 * C1301 + C22005 * C1316 + C22010 * C6105 +
                      C22006 * C6107 + C22011 * C22860 + C22007 * C22861) *
                         C1160 +
                     (C22009 * C1317 + C22005 * C1328 + C22010 * C6108 +
                      C22006 * C6111 + C22011 * C22862 + C22007 * C22863) *
                         C47871) *
                        C48138 * C47900 * C48238) *
                       C48235)) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C665 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C659 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C666 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C660 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C667 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C661 -
                    (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                     C22006 * C312 + C22009 * C122 + C22005 * C132) *
                        C668 -
                    (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                     C22006 * C329 + C22009 * C133 + C22005 * C143) *
                        C48239) *
                       C48138 * C47900 * C48204 +
                   ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                     C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                        C666 -
                    ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                      C22006 * C950 + C22009 * C496 + C22005 * C515) *
                         C659 +
                     (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                      C22006 * C940 + C22009 * C486 + C22005 * C497) *
                         C665) +
                    (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                     C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                        C660 -
                    (C22011 * C1298 + C22007 * C1311 + C22010 * C937 +
                     C22006 * C944 + C22009 * C487 + C22005 * C499) *
                        C667 -
                    (C22011 * C1310 + C22007 * C1325 + C22010 * C945 +
                     C22006 * C952 + C22009 * C500 + C22005 * C517) *
                        C661 +
                    (C22009 * C488 + C22005 * C501 + C22010 * C938 +
                     C22006 * C946 + C22011 * C1599 + C22007 * C1600) *
                        C668 +
                    (C22009 * C502 + C22005 * C518 + C22010 * C947 +
                     C22006 * C953 + C22011 * C1601 + C22007 * C1602) *
                        C48239) *
                       C48138 * C47900 * C48022) *
                  C47923) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                      C22006 * C308 + C22011 * C301 + C22007 * C316) *
                         C46986 +
                     (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                      C22006 * C326 + C22011 * C317 + C22007 * C331) *
                         C48186 -
                     (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                      C22006 * C306 + C22009 * C120 + C22005 * C128) *
                         C46967 -
                     (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                      C22006 * C327 + C22009 * C129 + C22005 * C141) *
                         C47881) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C485 + C22005 * C495 + C22010 * C936 +
                      C22006 * C942 + C22011 * C1299 + C22007 * C1313) *
                         C46967 -
                     ((C22011 * C1314 + C22007 * C1327 + C22010 * C941 +
                       C22006 * C950 + C22009 * C496 + C22005 * C515) *
                          C48186 +
                      (C22011 * C1300 + C22007 * C1315 + C22010 * C935 +
                       C22006 * C940 + C22009 * C486 + C22005 * C497) *
                          C46986) +
                     (C22009 * C498 + C22005 * C516 + C22010 * C943 +
                      C22006 * C951 + C22011 * C1312 + C22007 * C1326) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C1086 +
                   (((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                      C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                         C46967 -
                     ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                       C22006 * C331 + C22009 * C307 + C22005 * C326) *
                          C48186 +
                      (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                       C22006 * C316 + C22009 * C297 + C22005 * C308) *
                          C46986) +
                     (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                      C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                         C47881) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C935 + C22005 * C940 + C22010 * C1300 +
                      C22006 * C1315 + C22011 * C1713 + C22007 * C1716) *
                         C46986 +
                     (C22009 * C941 + C22005 * C950 + C22010 * C1314 +
                      C22006 * C1327 + C22011 * C1717 + C22007 * C1722) *
                         C48186 -
                     (C22011 * C1714 + C22007 * C1718 + C22010 * C1299 +
                      C22006 * C1313 + C22009 * C936 + C22005 * C942) *
                         C46967 -
                     (C22011 * C1719 + C22007 * C1723 + C22010 * C1312 +
                      C22006 * C1326 + C22009 * C943 + C22005 * C951) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C1087 +
                   (((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                      C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                         C46986 +
                     (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                      C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                         C48186 -
                     (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                      C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                         C46967 -
                     (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                      C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                         C47881) *
                        C48138 * C47900 * C48204 +
                    ((C22009 * C1299 + C22005 * C1313 + C22010 * C1714 +
                      C22006 * C1718 + C22011 * C6592 + C22007 * C6595) *
                         C46967 -
                     ((C22011 * C6594 + C22007 * C6597 + C22010 * C1717 +
                       C22006 * C1722 + C22009 * C1314 + C22005 * C1327) *
                          C48186 +
                      (C22011 * C6591 + C22007 * C6593 + C22010 * C1713 +
                       C22006 * C1716 + C22009 * C1300 + C22005 * C1315) *
                          C46986) +
                     (C22009 * C1312 + C22005 * C1326 + C22010 * C1719 +
                      C22006 * C1723 + C22011 * C6596 + C22007 * C6598) *
                         C47881) *
                        C48138 * C47900 * C48022) *
                       C48235)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                    C22006 * C308 + C22011 * C301 + C22007 * C316) *
                       C114 +
                   (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                    C22006 * C326 + C22011 * C317 + C22007 * C331) *
                       C102 -
                   (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                    C22006 * C306 + C22009 * C120 + C22005 * C128) *
                       C115 -
                   (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                    C22006 * C327 + C22009 * C129 + C22005 * C141) *
                       C103 +
                   (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                    C22006 * C310 + C22011 * C303 + C22007 * C320) *
                       C116 +
                   (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                    C22006 * C328 + C22011 * C321 + C22007 * C333) *
                       C104 -
                   (C22011 * C304 + C22007 * C322 + C22010 * C299 +
                    C22006 * C312 + C22009 * C122 + C22005 * C132) *
                       C117 -
                   (C22011 * C323 + C22007 * C334 + C22010 * C313 +
                    C22006 * C329 + C22009 * C133 + C22005 * C143) *
                       C105 +
                   (C22009 * C123 + C22005 * C134 + C22010 * C300 +
                    C22006 * C314 + C22011 * C305 + C22007 * C324) *
                       C118 +
                   (C22009 * C135 + C22005 * C144 + C22010 * C315 +
                    C22006 * C330 + C22011 * C325 + C22007 * C335) *
                       C106) *
                  C48138 * C47900 * C47935 * C47923) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C293 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C287 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C294 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C288 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C295 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48274 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C294 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C287 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C293) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C288 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C295 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48262 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C293 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C287 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C294 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C288 +
                    (C22009 * C303 + C22005 * C320 + C22010 * C1161 +
                     C22006 * C1168 + C22011 * C1166 + C22007 * C1177) *
                        C295 +
                    (C22009 * C321 + C22005 * C333 + C22010 * C1167 +
                     C22006 * C1179 + C22011 * C1178 + C22007 * C1184) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48235)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1089 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C48271 -
                    (C22011 * C302 + C22007 * C318 + C22010 * C296 +
                     C22006 * C306 + C22009 * C120 + C22005 * C128) *
                        C1090 -
                    (C22011 * C319 + C22007 * C332 + C22010 * C309 +
                     C22006 * C327 + C22009 * C129 + C22005 * C141) *
                        C48258 +
                    (C22009 * C121 + C22005 * C130 + C22010 * C298 +
                     C22006 * C310 + C22011 * C303 + C22007 * C320) *
                        C1091 +
                    (C22009 * C131 + C22005 * C142 + C22010 * C311 +
                     C22006 * C328 + C22011 * C321 + C22007 * C333) *
                        C48227) *
                       C48138 * C47900 * C47935 * C1086 +
                   ((C22009 * C296 + C22005 * C306 + C22010 * C302 +
                     C22006 * C318 + C22011 * C1162 + C22007 * C1170) *
                        C1090 -
                    ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                      C22006 * C331 + C22009 * C307 + C22005 * C326) *
                         C48271 +
                     (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                      C22006 * C316 + C22009 * C297 + C22005 * C308) *
                         C1089) +
                    (C22009 * C309 + C22005 * C327 + C22010 * C319 +
                     C22006 * C332 + C22011 * C1169 + C22007 * C1180) *
                        C48258 -
                    (C22011 * C1161 + C22007 * C1168 + C22010 * C303 +
                     C22006 * C320 + C22009 * C298 + C22005 * C310) *
                        C1091 -
                    (C22011 * C1167 + C22007 * C1179 + C22010 * C321 +
                     C22006 * C333 + C22009 * C311 + C22005 * C328) *
                        C48227) *
                       C48138 * C47900 * C47935 * C1087 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C1089 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C48271 -
                    (C22011 * C1165 + C22007 * C1175 + C22010 * C1162 +
                     C22006 * C1170 + C22009 * C302 + C22005 * C318) *
                        C1090 -
                    (C22011 * C1176 + C22007 * C1183 + C22010 * C1169 +
                     C22006 * C1180 + C22009 * C319 + C22005 * C332) *
                        C48258 +
                    (C22009 * C303 + C22005 * C320 + C22010 * C1161 +
                     C22006 * C1168 + C22011 * C1166 + C22007 * C1177) *
                        C1091 +
                    (C22009 * C321 + C22005 * C333 + C22010 * C1167 +
                     C22006 * C1179 + C22011 * C1178 + C22007 * C1184) *
                        C48227) *
                       C48138 * C47900 * C47935 * C48235)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C22009 * C119 + C22005 * C126 + C22010 * C297 +
                     C22006 * C308 + C22011 * C301 + C22007 * C316) *
                        C1160 +
                    (C22009 * C127 + C22005 * C140 + C22010 * C307 +
                     C22006 * C326 + C22011 * C317 + C22007 * C331) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1155 -
                   ((C22011 * C1171 + C22007 * C1181 + C22010 * C317 +
                     C22006 * C331 + C22009 * C307 + C22005 * C326) *
                        C47871 +
                    (C22011 * C1163 + C22007 * C1172 + C22010 * C301 +
                     C22006 * C316 + C22009 * C297 + C22005 * C308) *
                        C1160) *
                       C48138 * C47900 * C47935 * C1156 +
                   ((C22009 * C301 + C22005 * C316 + C22010 * C1163 +
                     C22006 * C1172 + C22011 * C1164 + C22007 * C1173) *
                        C1160 +
                    (C22009 * C317 + C22005 * C331 + C22010 * C1171 +
                     C22006 * C1181 + C22011 * C1174 + C22007 * C1182) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1157 -
                   ((C22011 * C5954 + C22007 * C5957 + C22010 * C1174 +
                     C22006 * C1182 + C22009 * C1171 + C22005 * C1181) *
                        C47871 +
                    (C22011 * C5951 + C22007 * C5953 + C22010 * C1164 +
                     C22006 * C1173 + C22009 * C1163 + C22005 * C1172) *
                        C1160) *
                       C48138 * C47900 * C47935 * C1158 +
                   ((C22009 * C1164 + C22005 * C1173 + C22010 * C5951 +
                     C22006 * C5953 + C22011 * C22746 + C22007 * C22747) *
                        C1160 +
                    (C22009 * C1174 + C22005 * C1182 + C22010 * C5954 +
                     C22006 * C5957 + C22011 * C22748 + C22007 * C22749) *
                        C47871) *
                       C48138 * C47900 * C47935 * C1159)) /
                     (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C46996 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47876 -
            (C16370 + C16371) * C46992 - (C16372 + C16373) * C47884 +
            (C16374 + C16375) * C47002 + (C16376 + C16377) * C2901) *
               C10513 +
           ((C26465 + C26466) * C46996 + (C26467 + C26468) * C47876 -
            (C16759 + C16758) * C46992 - (C16761 + C16760) * C47884 +
            (C16763 + C16762) * C47002 + (C16765 + C16764) * C2901) *
               C48255) *
              C47900 * C47935 * C47978 +
          (((C16564 + C16565) * C46992 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47876 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C46996) +
            (C16566 + C16567) * C47884 - (C16568 + C16569) * C47002 -
            (C16570 + C16571) * C2901) *
               C10513 +
           ((C17269 + C17268) * C46992 -
            ((C26935 + C26936) * C47876 + (C26937 + C26938) * C46996) +
            (C17271 + C17270) * C47884 - (C17273 + C17272) * C47002 -
            (C17275 + C17274) * C2901) *
               C48255) *
              C47900 * C47935 * C47985 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C46996 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C47876 -
            (C16572 + C16573) * C46992 - (C16574 + C16575) * C47884 +
            (C16576 + C16577) * C47002 + (C16578 + C16579) * C2901) *
               C10513 +
           ((C27341 + C27342) * C46996 + (C27343 + C27344) * C47876 -
            (C17995 + C17994) * C46992 - (C17997 + C17996) * C47884 +
            (C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
             C48253 * C1720) *
                C47002 +
            (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
             C48253 * C1724) *
                C2901) *
               C48255) *
              C47900 * C47935 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C2641 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C2635 -
             (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
                C10513 +
            ((C26465 + C26466) * C2641 + (C26467 + C26468) * C2635 -
             (C16759 + C16758) * C2642 - (C16761 + C16760) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C16758 + C16759) * C2642 -
             ((C26468 + C26467) * C2635 + (C26466 + C26465) * C2641) +
             (C16760 + C16761) * C47881) *
                C10513 +
            ((C16767 + C16766) * C2642 -
             ((C26469 + C26470) * C2635 + (C26471 + C26472) * C2641) +
             (C16769 + C16768) * C47881) *
                C48255) *
               C47900 * C48022) *
              C47978 +
          ((((C16564 + C16565) * C2642 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C2635 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C2641) +
             (C16566 + C16567) * C47881) *
                C10513 +
            ((C17269 + C17268) * C2642 -
             ((C26935 + C26936) * C2635 + (C26937 + C26938) * C2641) +
             (C17271 + C17270) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C26938 + C26937) * C2641 + (C26936 + C26935) * C2635 -
             (C17268 + C17269) * C2642 - (C17270 + C17271) * C47881) *
                C10513 +
            ((C27337 + C27338) * C2641 + (C27339 + C27340) * C2635 -
             (C18705 + C18704) * C2642 - (C18707 + C18706) * C47881) *
                C48255) *
               C47900 * C48022) *
              C47985 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C2641 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C2635 -
             (C16572 + C16573) * C2642 - (C16574 + C16575) * C47881) *
                C10513 +
            ((C27341 + C27342) * C2641 + (C27343 + C27344) * C2635 -
             (C17995 + C17994) * C2642 - (C17997 + C17996) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C17994 + C17995) * C2642 -
             ((C27344 + C27343) * C2635 + (C27342 + C27341) * C2641) +
             (C17996 + C17997) * C47881) *
                C10513 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C2642 -
             ((C27345 + C27346) * C2635 + (C27347 + C27348) * C2641) +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2641 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C2635 -
            (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
               C10513 +
           ((C26465 + C26466) * C2641 + (C26467 + C26468) * C2635 -
            (C16759 + C16758) * C2642 - (C16761 + C16760) * C47881) *
               C48255) *
              C47900 * C47935 * C48281 +
          (((C16564 + C16565) * C2642 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C2635 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C2641) +
            (C16566 + C16567) * C47881) *
               C10513 +
           ((C17269 + C17268) * C2642 -
            ((C26935 + C26936) * C2635 + (C26937 + C26938) * C2641) +
            (C17271 + C17270) * C47881) *
               C48255) *
              C47900 * C47935 * C48277 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C2641 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C2635 -
            (C16572 + C16573) * C2642 - (C16574 + C16575) * C47881) *
               C10513 +
           ((C27341 + C27342) * C2641 + (C27343 + C27344) * C2635 -
            (C17995 + C17994) * C2642 - (C17997 + C17996) * C47881) *
               C48255) *
              C47900 * C47935 * C48267 +
          (((C17788 + C17789) * C2642 -
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C2635 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C2641) +
            (C17790 + C17791) * C47881) *
               C10513 +
           ((C16335 * C1714 + C16331 * C1718 + C16336 * C6592 +
             C48253 * C6595) *
                C2642 -
            ((C27814 + C27813) * C2635 + (C27812 + C27811) * C2641) +
            (C16335 * C1719 + C16331 * C1723 + C16336 * C6596 +
             C48253 * C6598) *
                C47881) *
               C48255) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2533 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48280 -
            (C16370 + C16371) * C2534 - (C16372 + C16373) * C48273 +
            (C16374 + C16375) * C2535 + (C16376 + C16377) * C48260 -
            (C16378 + C16379) * C2536 - (C16380 + C16381) * C48239) *
               C10513 +
           ((C26465 + C26466) * C2533 + (C26467 + C26468) * C48280 -
            (C16759 + C16758) * C2534 - (C16761 + C16760) * C48273 +
            (C16763 + C16762) * C2535 + (C16765 + C16764) * C48260 -
            (C17055 + C17054) * C2536 - (C17057 + C17056) * C48239) *
               C48255) *
              C47900 * C47935 * C2531 +
          (((C16564 + C16565) * C2534 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48280 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C2533) +
            (C16566 + C16567) * C48273 - (C16568 + C16569) * C2535 -
            (C16570 + C16571) * C48260 + (C16912 + C16913) * C2536 +
            (C16914 + C16915) * C48239) *
               C10513 +
           ((C17269 + C17268) * C2534 -
            ((C26935 + C26936) * C48280 + (C26937 + C26938) * C2533) +
            (C17271 + C17270) * C48273 - (C17273 + C17272) * C2535 -
            (C17275 + C17274) * C48260 +
            (C16335 * C938 + C16331 * C946 + C16336 * C1599 + C48253 * C1600) *
                C2536 +
            (C16335 * C947 + C16331 * C953 + C16336 * C1601 + C48253 * C1602) *
                C48239) *
               C48255) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C2641 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C2635 -
             (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
                C10513 +
            ((C26465 + C26466) * C2641 + (C26467 + C26468) * C2635 -
             (C16759 + C16758) * C2642 - (C16761 + C16760) * C47881) *
                C48255) *
               C47900 * C48275 +
           (((C16758 + C16759) * C2642 -
             ((C26468 + C26467) * C2635 + (C26466 + C26465) * C2641) +
             (C16760 + C16761) * C47881) *
                C10513 +
            ((C16767 + C16766) * C2642 -
             ((C26469 + C26470) * C2635 + (C26471 + C26472) * C2641) +
             (C16769 + C16768) * C47881) *
                C48255) *
               C47900 * C48264 +
           (((C26472 + C26471) * C2641 + (C26470 + C26469) * C2635 -
             (C16766 + C16767) * C2642 - (C16768 + C16769) * C47881) *
                C10513 +
            ((C28209 + C28210) * C2641 + (C28211 + C28212) * C2635 -
             (C18847 + C18846) * C2642 - (C18849 + C18848) * C47881) *
                C48255) *
               C47900 * C48238) *
              C2531 +
          ((((C16564 + C16565) * C2642 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C2635 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C2641) +
             (C16566 + C16567) * C47881) *
                C10513 +
            ((C17269 + C17268) * C2642 -
             ((C26935 + C26936) * C2635 + (C26937 + C26938) * C2641) +
             (C17271 + C17270) * C47881) *
                C48255) *
               C47900 * C48275 +
           (((C26938 + C26937) * C2641 + (C26936 + C26935) * C2635 -
             (C17268 + C17269) * C2642 - (C17270 + C17271) * C47881) *
                C10513 +
            ((C27337 + C27338) * C2641 + (C27339 + C27340) * C2635 -
             (C18705 + C18704) * C2642 - (C18707 + C18706) * C47881) *
                C48255) *
               C47900 * C48264 +
           (((C18704 + C18705) * C2642 -
             ((C27340 + C27339) * C2635 + (C27338 + C27337) * C2641) +
             (C18706 + C18707) * C47881) *
                C10513 +
            ((C16335 * C2418 + C16331 * C2422 + C16336 * C7460 +
              C48253 * C7463) *
                 C2642 -
             ((C28679 + C28680) * C2635 + (C28681 + C28682) * C2641) +
             (C16335 * C2423 + C16331 * C2427 + C16336 * C7464 +
              C48253 * C7466) *
                 C47881) *
                C48255) *
               C47900 * C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46996 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47876 -
             (C16370 + C16371) * C46992 - (C16372 + C16373) * C47884 +
             (C16374 + C16375) * C47002 + (C16376 + C16377) * C2901) *
                C10513 +
            ((C26465 + C26466) * C46996 + (C26467 + C26468) * C47876 -
             (C16759 + C16758) * C46992 - (C16761 + C16760) * C47884 +
             (C16763 + C16762) * C47002 + (C16765 + C16764) * C2901) *
                C48255) *
               C47900 * C48204 +
           (((C16758 + C16759) * C46992 -
             ((C26468 + C26467) * C47876 + (C26466 + C26465) * C46996) +
             (C16760 + C16761) * C47884 - (C16762 + C16763) * C47002 -
             (C16764 + C16765) * C2901) *
                C10513 +
            ((C16767 + C16766) * C46992 -
             ((C26469 + C26470) * C47876 + (C26471 + C26472) * C46996) +
             (C16769 + C16768) * C47884 - (C16771 + C16770) * C47002 -
             (C16773 + C16772) * C2901) *
                C48255) *
               C47900 * C48022) *
              C2531 +
          ((((C16564 + C16565) * C46992 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C47876 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46996) +
             (C16566 + C16567) * C47884 - (C16568 + C16569) * C47002 -
             (C16570 + C16571) * C2901) *
                C10513 +
            ((C17269 + C17268) * C46992 -
             ((C26935 + C26936) * C47876 + (C26937 + C26938) * C46996) +
             (C17271 + C17270) * C47884 - (C17273 + C17272) * C47002 -
             (C17275 + C17274) * C2901) *
                C48255) *
               C47900 * C48204 +
           (((C26938 + C26937) * C46996 + (C26936 + C26935) * C47876 -
             (C17268 + C17269) * C46992 - (C17270 + C17271) * C47884 +
             (C17272 + C17273) * C47002 + (C17274 + C17275) * C2901) *
                C10513 +
            ((C27337 + C27338) * C46996 + (C27339 + C27340) * C47876 -
             (C18705 + C18704) * C46992 - (C18707 + C18706) * C47884 +
             (C16335 * C1295 + C16331 * C1305 + C16336 * C1303 +
              C48253 * C1320) *
                 C47002 +
             (C16335 * C1304 + C16331 * C1322 + C16336 * C1321 +
              C48253 * C1330) *
                 C2901) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2533 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48280 -
            (C16370 + C16371) * C2534 - (C16372 + C16373) * C48273 +
            (C16374 + C16375) * C2535 + (C16376 + C16377) * C48260 -
            (C16378 + C16379) * C2536 - (C16380 + C16381) * C48239) *
               C10513 +
           ((C26465 + C26466) * C2533 + (C26467 + C26468) * C48280 -
            (C16759 + C16758) * C2534 - (C16761 + C16760) * C48273 +
            (C16763 + C16762) * C2535 + (C16765 + C16764) * C48260 -
            (C17055 + C17054) * C2536 - (C17057 + C17056) * C48239) *
               C48255) *
              C47900 * C47935 * C2531 +
          (((C16564 + C16565) * C2534 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48280 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C2533) +
            (C16566 + C16567) * C48273 - (C16568 + C16569) * C2535 -
            (C16570 + C16571) * C48260 + (C16912 + C16913) * C2536 +
            (C16914 + C16915) * C48239) *
               C10513 +
           ((C17269 + C17268) * C2534 -
            ((C26935 + C26936) * C48280 + (C26937 + C26938) * C2533) +
            (C17271 + C17270) * C48273 - (C17273 + C17272) * C2535 -
            (C17275 + C17274) * C48260 +
            (C16335 * C938 + C16331 * C946 + C16336 * C1599 + C48253 * C1600) *
                C2536 +
            (C16335 * C947 + C16331 * C953 + C16336 * C1601 + C48253 * C1602) *
                C48239) *
               C48255) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2641 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C2635 -
            (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
               C10513 +
           ((C26465 + C26466) * C2641 + (C26467 + C26468) * C2635 -
            (C16759 + C16758) * C2642 - (C16761 + C16760) * C47881) *
               C48255) *
              C47900 * C47935 * C48281 +
          (((C16564 + C16565) * C2642 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C2635 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C2641) +
            (C16566 + C16567) * C47881) *
               C10513 +
           ((C17269 + C17268) * C2642 -
            ((C26935 + C26936) * C2635 + (C26937 + C26938) * C2641) +
            (C17271 + C17270) * C47881) *
               C48255) *
              C47900 * C47935 * C48277 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C2641 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C2635 -
            (C16572 + C16573) * C2642 - (C16574 + C16575) * C47881) *
               C10513 +
           ((C27341 + C27342) * C2641 + (C27343 + C27344) * C2635 -
            (C17995 + C17994) * C2642 - (C17997 + C17996) * C47881) *
               C48255) *
              C47900 * C47935 * C48267 +
          (((C17788 + C17789) * C2642 -
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C2635 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C2641) +
            (C17790 + C17791) * C47881) *
               C10513 +
           ((C16335 * C1714 + C16331 * C1718 + C16336 * C6592 +
             C48253 * C6595) *
                C2642 -
            ((C27814 + C27813) * C2635 + (C27812 + C27811) * C2641) +
            (C16335 * C1719 + C16331 * C1723 + C16336 * C6596 +
             C48253 * C6598) *
                C47881) *
               C48255) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46986 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48186 -
             (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
                C10513 +
            ((C26465 + C26466) * C46986 + (C26467 + C26468) * C48186 -
             (C16759 + C16758) * C46967 - (C16761 + C16760) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C16758 + C16759) * C46967 -
             ((C26468 + C26467) * C48186 + (C26466 + C26465) * C46986) +
             (C16760 + C16761) * C47881) *
                C10513 +
            ((C16767 + C16766) * C46967 -
             ((C26469 + C26470) * C48186 + (C26471 + C26472) * C46986) +
             (C16769 + C16768) * C47881) *
                C48255) *
               C47900 * C48022) *
              C47978 +
          ((((C16564 + C16565) * C46967 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48186 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46986) +
             (C16566 + C16567) * C47881) *
                C10513 +
            ((C17269 + C17268) * C46967 -
             ((C26935 + C26936) * C48186 + (C26937 + C26938) * C46986) +
             (C17271 + C17270) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C26938 + C26937) * C46986 + (C26936 + C26935) * C48186 -
             (C17268 + C17269) * C46967 - (C17270 + C17271) * C47881) *
                C10513 +
            ((C27337 + C27338) * C46986 + (C27339 + C27340) * C48186 -
             (C18705 + C18704) * C46967 - (C18707 + C18706) * C47881) *
                C48255) *
               C47900 * C48022) *
              C47985 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C46986 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C48186 -
             (C16572 + C16573) * C46967 - (C16574 + C16575) * C47881) *
                C10513 +
            ((C27341 + C27342) * C46986 + (C27343 + C27344) * C48186 -
             (C17995 + C17994) * C46967 - (C17997 + C17996) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C17994 + C17995) * C46967 -
             ((C27344 + C27343) * C48186 + (C27342 + C27341) * C46986) +
             (C17996 + C17997) * C47881) *
                C10513 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C46967 -
             ((C27345 + C27346) * C48186 + (C27347 + C27348) * C46986) +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C48018 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C48025 +
           (((C26472 + C26471) * C1160 + (C26470 + C26469) * C47871) * C10513 +
            ((C28209 + C28210) * C1160 + (C28211 + C28212) * C47871) * C48255) *
               C47900 * C3806) *
              C47978 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C48025 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C48018 -
           (((C28679 + C28680) * C47871 + (C28681 + C28682) * C1160) * C48255 +
            ((C27340 + C27339) * C47871 + (C27338 + C27337) * C1160) * C10513) *
               C47900 * C3806) *
              C47985 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C10513 +
            ((C27341 + C27342) * C1160 + (C27343 + C27344) * C47871) * C48255) *
               C47900 * C48018 -
           (((C27345 + C27346) * C47871 + (C27347 + C27348) * C1160) * C48255 +
            ((C27344 + C27343) * C47871 + (C27342 + C27341) * C1160) * C10513) *
               C47900 * C48025 +
           (((C27348 + C27347) * C1160 + (C27346 + C27345) * C47871) * C10513 +
            ((C16335 * C7459 + C16331 * C7461 + C16336 * C23838 +
              C48253 * C23839) *
                 C1160 +
             (C16335 * C7462 + C16331 * C7465 + C16336 * C23840 +
              C48253 * C23841) *
                 C47871) *
                C48255) *
               C47900 * C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C3298 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C48022) *
              C48281 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C48022 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C3298) *
              C48277 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C10513 +
            ((C27341 + C27342) * C1160 + (C27343 + C27344) * C47871) * C48255) *
               C47900 * C3298 -
           (((C27345 + C27346) * C47871 + (C27347 + C27348) * C1160) * C48255 +
            ((C27344 + C27343) * C47871 + (C27342 + C27341) * C1160) * C10513) *
               C47900 * C48022) *
              C48267 +
          ((((C27811 + C27812) * C1160 + (C27813 + C27814) * C47871) * C10513 +
            ((C16335 * C6105 + C16331 * C6107 + C16336 * C22860 +
              C48253 * C22861) *
                 C1160 +
             (C16335 * C6108 + C16331 * C6111 + C16336 * C22862 +
              C48253 * C22863) *
                 C47871) *
                C48255) *
               C47900 * C48022 -
           (((C27814 + C27813) * C47871 + (C27812 + C27811) * C1160) * C48255 +
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C47871 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C1160) *
                C10513) *
               C47900 * C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1089 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48271 -
             (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
             (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
                C10513 +
            ((C26465 + C26466) * C1089 + (C26467 + C26468) * C48271 -
             (C16759 + C16758) * C1090 - (C16761 + C16760) * C48258 +
             (C16763 + C16762) * C1091 + (C16765 + C16764) * C48227) *
                C48255) *
               C47900 * C3298 +
           (((C16758 + C16759) * C1090 -
             ((C26468 + C26467) * C48271 + (C26466 + C26465) * C1089) +
             (C16760 + C16761) * C48258 - (C16762 + C16763) * C1091 -
             (C16764 + C16765) * C48227) *
                C10513 +
            ((C16767 + C16766) * C1090 -
             ((C26469 + C26470) * C48271 + (C26471 + C26472) * C1089) +
             (C16769 + C16768) * C48258 - (C16771 + C16770) * C1091 -
             (C16773 + C16772) * C48227) *
                C48255) *
               C47900 * C48022) *
              C2531 +
          ((((C16564 + C16565) * C1090 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48271 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C1089) +
             (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
             (C16570 + C16571) * C48227) *
                C10513 +
            ((C17269 + C17268) * C1090 -
             ((C26935 + C26936) * C48271 + (C26937 + C26938) * C1089) +
             (C17271 + C17270) * C48258 - (C17273 + C17272) * C1091 -
             (C17275 + C17274) * C48227) *
                C48255) *
               C47900 * C3298 +
           (((C26938 + C26937) * C1089 + (C26936 + C26935) * C48271 -
             (C17268 + C17269) * C1090 - (C17270 + C17271) * C48258 +
             (C17272 + C17273) * C1091 + (C17274 + C17275) * C48227) *
                C10513 +
            ((C27337 + C27338) * C1089 + (C27339 + C27340) * C48271 -
             (C18705 + C18704) * C1090 - (C18707 + C18706) * C48258 +
             (C16335 * C1295 + C16331 * C1305 + C16336 * C1303 +
              C48253 * C1320) *
                 C1091 +
             (C16335 * C1304 + C16331 * C1322 + C16336 * C1321 +
              C48253 * C1330) *
                 C48227) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C48282 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C48279 +
           (((C26472 + C26471) * C1160 + (C26470 + C26469) * C47871) * C10513 +
            ((C28209 + C28210) * C1160 + (C28211 + C28212) * C47871) * C48255) *
               C47900 * C48270 -
           (((C28213 + C28214) * C47871 + (C28215 + C28216) * C1160) * C48255 +
            ((C28212 + C28211) * C47871 + (C28210 + C28209) * C1160) * C10513) *
               C47900 * C48251) *
              C2531 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C48279 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C48282 -
           (((C28679 + C28680) * C47871 + (C28681 + C28682) * C1160) * C48255 +
            ((C27340 + C27339) * C47871 + (C27338 + C27337) * C1160) * C10513) *
               C47900 * C48270 +
           (((C28682 + C28681) * C1160 + (C28680 + C28679) * C47871) * C10513 +
            ((C16335 * C6973 + C16331 * C6975 + C16336 * C23492 +
              C48253 * C23493) *
                 C1160 +
             (C16335 * C6976 + C16331 * C6979 + C16336 * C23494 +
              C48253 * C23495) *
                 C47871) *
                C48255) *
               C47900 * C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46986 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48186 -
             (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
                C10513 +
            ((C26465 + C26466) * C46986 + (C26467 + C26468) * C48186 -
             (C16759 + C16758) * C46967 - (C16761 + C16760) * C47881) *
                C48255) *
               C47900 * C48018 +
           (((C16758 + C16759) * C46967 -
             ((C26468 + C26467) * C48186 + (C26466 + C26465) * C46986) +
             (C16760 + C16761) * C47881) *
                C10513 +
            ((C16767 + C16766) * C46967 -
             ((C26469 + C26470) * C48186 + (C26471 + C26472) * C46986) +
             (C16769 + C16768) * C47881) *
                C48255) *
               C47900 * C48025 +
           (((C26472 + C26471) * C46986 + (C26470 + C26469) * C48186 -
             (C16766 + C16767) * C46967 - (C16768 + C16769) * C47881) *
                C10513 +
            ((C28209 + C28210) * C46986 + (C28211 + C28212) * C48186 -
             (C18847 + C18846) * C46967 - (C18849 + C18848) * C47881) *
                C48255) *
               C47900 * C3806) *
              C2531 +
          ((((C16564 + C16565) * C46967 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48186 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46986) +
             (C16566 + C16567) * C47881) *
                C10513 +
            ((C17269 + C17268) * C46967 -
             ((C26935 + C26936) * C48186 + (C26937 + C26938) * C46986) +
             (C17271 + C17270) * C47881) *
                C48255) *
               C47900 * C48018 +
           (((C26938 + C26937) * C46986 + (C26936 + C26935) * C48186 -
             (C17268 + C17269) * C46967 - (C17270 + C17271) * C47881) *
                C10513 +
            ((C27337 + C27338) * C46986 + (C27339 + C27340) * C48186 -
             (C18705 + C18704) * C46967 - (C18707 + C18706) * C47881) *
                C48255) *
               C47900 * C48025 +
           (((C18704 + C18705) * C46967 -
             ((C27340 + C27339) * C48186 + (C27338 + C27337) * C46986) +
             (C18706 + C18707) * C47881) *
                C10513 +
            ((C16335 * C2418 + C16331 * C2422 + C16336 * C7460 +
              C48253 * C7463) *
                 C46967 -
             ((C28679 + C28680) * C48186 + (C28681 + C28682) * C46986) +
             (C16335 * C2423 + C16331 * C2427 + C16336 * C7464 +
              C48253 * C7466) *
                 C47881) *
                C48255) *
               C47900 * C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1089 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48271 -
             (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
             (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
                C10513 +
            ((C26465 + C26466) * C1089 + (C26467 + C26468) * C48271 -
             (C16759 + C16758) * C1090 - (C16761 + C16760) * C48258 +
             (C16763 + C16762) * C1091 + (C16765 + C16764) * C48227) *
                C48255) *
               C47900 * C3298 +
           (((C16758 + C16759) * C1090 -
             ((C26468 + C26467) * C48271 + (C26466 + C26465) * C1089) +
             (C16760 + C16761) * C48258 - (C16762 + C16763) * C1091 -
             (C16764 + C16765) * C48227) *
                C10513 +
            ((C16767 + C16766) * C1090 -
             ((C26469 + C26470) * C48271 + (C26471 + C26472) * C1089) +
             (C16769 + C16768) * C48258 - (C16771 + C16770) * C1091 -
             (C16773 + C16772) * C48227) *
                C48255) *
               C47900 * C48022) *
              C2531 +
          ((((C16564 + C16565) * C1090 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48271 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C1089) +
             (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
             (C16570 + C16571) * C48227) *
                C10513 +
            ((C17269 + C17268) * C1090 -
             ((C26935 + C26936) * C48271 + (C26937 + C26938) * C1089) +
             (C17271 + C17270) * C48258 - (C17273 + C17272) * C1091 -
             (C17275 + C17274) * C48227) *
                C48255) *
               C47900 * C3298 +
           (((C26938 + C26937) * C1089 + (C26936 + C26935) * C48271 -
             (C17268 + C17269) * C1090 - (C17270 + C17271) * C48258 +
             (C17272 + C17273) * C1091 + (C17274 + C17275) * C48227) *
                C10513 +
            ((C27337 + C27338) * C1089 + (C27339 + C27340) * C48271 -
             (C18705 + C18704) * C1090 - (C18707 + C18706) * C48258 +
             (C16335 * C1295 + C16331 * C1305 + C16336 * C1303 +
              C48253 * C1320) *
                 C1091 +
             (C16335 * C1304 + C16331 * C1322 + C16336 * C1321 +
              C48253 * C1330) *
                 C48227) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C3298 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C48022) *
              C48281 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C48022 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C3298) *
              C48277 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C10513 +
            ((C27341 + C27342) * C1160 + (C27343 + C27344) * C47871) * C48255) *
               C47900 * C3298 -
           (((C27345 + C27346) * C47871 + (C27347 + C27348) * C1160) * C48255 +
            ((C27344 + C27343) * C47871 + (C27342 + C27341) * C1160) * C10513) *
               C47900 * C48022) *
              C48267 +
          ((((C27811 + C27812) * C1160 + (C27813 + C27814) * C47871) * C10513 +
            ((C16335 * C6105 + C16331 * C6107 + C16336 * C22860 +
              C48253 * C22861) *
                 C1160 +
             (C16335 * C6108 + C16331 * C6111 + C16336 * C22862 +
              C48253 * C22863) *
                 C47871) *
                C48255) *
               C47900 * C48022 -
           (((C27814 + C27813) * C47871 + (C27812 + C27811) * C1160) * C48255 +
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C47871 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C1160) *
                C10513) *
               C47900 * C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C46986 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48186 -
            (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
               C10513 +
           ((C26465 + C26466) * C46986 + (C26467 + C26468) * C48186 -
            (C16759 + C16758) * C46967 - (C16761 + C16760) * C47881) *
               C48255) *
              C47900 * C47935 * C1431 +
          (((C16564 + C16565) * C46967 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48186 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C46986) +
            (C16566 + C16567) * C47881) *
               C10513 +
           ((C17269 + C17268) * C46967 -
            ((C26935 + C26936) * C48186 + (C26937 + C26938) * C46986) +
            (C17271 + C17270) * C47881) *
               C48255) *
              C47900 * C47935 * C1432 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C46986 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48186 -
            (C16572 + C16573) * C46967 - (C16574 + C16575) * C47881) *
               C10513 +
           ((C27341 + C27342) * C46986 + (C27343 + C27344) * C48186 -
            (C17995 + C17994) * C46967 - (C17997 + C17996) * C47881) *
               C48255) *
              C47900 * C47935 * C1433 +
          (((C17788 + C17789) * C46967 -
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C48186 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C46986) +
            (C17790 + C17791) * C47881) *
               C10513 +
           ((C16335 * C1714 + C16331 * C1718 + C16336 * C6592 +
             C48253 * C6595) *
                C46967 -
            ((C16336 * C6594 + C48253 * C6597 + C16335 * C1717 +
              C16331 * C1722) *
                 C48186 +
             (C16336 * C6591 + C48253 * C6593 + C16335 * C1713 +
              C16331 * C1716) *
                 C46986) +
            (C16335 * C1719 + C16331 * C1723 + C16336 * C6596 +
             C48253 * C6598) *
                C47881) *
               C48255) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C665 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C659 -
            (C16370 + C16371) * C666 - (C16372 + C16373) * C660 +
            (C16374 + C16375) * C667 + (C16376 + C16377) * C661 -
            (C16378 + C16379) * C668 - (C16380 + C16381) * C48239) *
               C10513 +
           ((C26465 + C26466) * C665 + (C26467 + C26468) * C659 -
            (C16759 + C16758) * C666 - (C16761 + C16760) * C660 +
            (C16763 + C16762) * C667 + (C16765 + C16764) * C661 -
            (C17055 + C17054) * C668 - (C17057 + C17056) * C48239) *
               C48255) *
              C47900 * C47935 * C48203 +
          (((C16564 + C16565) * C666 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C659 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C665) +
            (C16566 + C16567) * C660 - (C16568 + C16569) * C667 -
            (C16570 + C16571) * C661 + (C16912 + C16913) * C668 +
            (C16914 + C16915) * C48239) *
               C10513 +
           ((C17269 + C17268) * C666 -
            ((C16336 * C1314 + C48253 * C1327 + C16335 * C941 + C16331 * C950) *
                 C659 +
             (C16336 * C1300 + C48253 * C1315 + C16335 * C935 + C16331 * C940) *
                 C665) +
            (C17271 + C17270) * C660 - (C17273 + C17272) * C667 -
            (C17275 + C17274) * C661 +
            (C16335 * C938 + C16331 * C946 + C16336 * C1599 + C48253 * C1600) *
                C668 +
            (C16335 * C947 + C16331 * C953 + C16336 * C1601 + C48253 * C1602) *
                C48239) *
               C48255) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46986 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48186 -
             (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
                C10513 +
            ((C26465 + C26466) * C46986 + (C26467 + C26468) * C48186 -
             (C16759 + C16758) * C46967 - (C16761 + C16760) * C47881) *
                C48255) *
               C47900 * C1835 +
           (((C16758 + C16759) * C46967 -
             ((C26468 + C26467) * C48186 + (C26466 + C26465) * C46986) +
             (C16760 + C16761) * C47881) *
                C10513 +
            ((C16767 + C16766) * C46967 -
             ((C26469 + C26470) * C48186 + (C26471 + C26472) * C46986) +
             (C16769 + C16768) * C47881) *
                C48255) *
               C47900 * C1836 +
           (((C26472 + C26471) * C46986 + (C26470 + C26469) * C48186 -
             (C16766 + C16767) * C46967 - (C16768 + C16769) * C47881) *
                C10513 +
            ((C28209 + C28210) * C46986 + (C28211 + C28212) * C48186 -
             (C18847 + C18846) * C46967 - (C18849 + C18848) * C47881) *
                C48255) *
               C47900 * C48238) *
              C48203 +
          ((((C16564 + C16565) * C46967 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48186 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46986) +
             (C16566 + C16567) * C47881) *
                C10513 +
            ((C17269 + C17268) * C46967 -
             ((C26935 + C26936) * C48186 + (C26937 + C26938) * C46986) +
             (C17271 + C17270) * C47881) *
                C48255) *
               C47900 * C1835 +
           (((C26938 + C26937) * C46986 + (C26936 + C26935) * C48186 -
             (C17268 + C17269) * C46967 - (C17270 + C17271) * C47881) *
                C10513 +
            ((C27337 + C27338) * C46986 + (C27339 + C27340) * C48186 -
             (C18705 + C18704) * C46967 - (C18707 + C18706) * C47881) *
                C48255) *
               C47900 * C1836 +
           (((C18704 + C18705) * C46967 -
             ((C27340 + C27339) * C48186 + (C27338 + C27337) * C46986) +
             (C18706 + C18707) * C47881) *
                C10513 +
            ((C16335 * C2418 + C16331 * C2422 + C16336 * C7460 +
              C48253 * C7463) *
                 C46967 -
             ((C16336 * C7462 + C48253 * C7465 + C16335 * C2421 +
               C16331 * C2426) *
                  C48186 +
              (C16336 * C7459 + C48253 * C7461 + C16335 * C2417 +
               C16331 * C2420) *
                  C46986) +
             (C16335 * C2423 + C16331 * C2427 + C16336 * C7464 +
              C48253 * C7466) *
                 C47881) *
                C48255) *
               C47900 * C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C48204 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C48022) *
              C1431 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C48022 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C48204) *
              C1432 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C10513 +
            ((C27341 + C27342) * C1160 + (C27343 + C27344) * C47871) * C48255) *
               C47900 * C48204 -
           (((C27345 + C27346) * C47871 + (C27347 + C27348) * C1160) * C48255 +
            ((C27344 + C27343) * C47871 + (C27342 + C27341) * C1160) * C10513) *
               C47900 * C48022) *
              C1433 +
          ((((C27811 + C27812) * C1160 + (C27813 + C27814) * C47871) * C10513 +
            ((C16335 * C6105 + C16331 * C6107 + C16336 * C22860 +
              C48253 * C22861) *
                 C1160 +
             (C16335 * C6108 + C16331 * C6111 + C16336 * C22862 +
              C48253 * C22863) *
                 C47871) *
                C48255) *
               C47900 * C48022 -
           (((C27814 + C27813) * C47871 + (C27812 + C27811) * C1160) * C48255 +
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C47871 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C1160) *
                C10513) *
               C47900 * C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C293 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C287 -
             (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
             (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
                C10513 +
            ((C26465 + C26466) * C293 + (C26467 + C26468) * C287 -
             (C16759 + C16758) * C294 - (C16761 + C16760) * C288 +
             (C16763 + C16762) * C295 + (C16765 + C16764) * C48227) *
                C48255) *
               C47900 * C48204 +
           (((C16758 + C16759) * C294 -
             ((C26468 + C26467) * C287 + (C26466 + C26465) * C293) +
             (C16760 + C16761) * C288 - (C16762 + C16763) * C295 -
             (C16764 + C16765) * C48227) *
                C10513 +
            ((C16767 + C16766) * C294 -
             ((C26469 + C26470) * C287 + (C26471 + C26472) * C293) +
             (C16769 + C16768) * C288 - (C16771 + C16770) * C295 -
             (C16773 + C16772) * C48227) *
                C48255) *
               C47900 * C48022) *
              C48203 +
          ((((C16564 + C16565) * C294 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C287 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C293) +
             (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
             (C16570 + C16571) * C48227) *
                C10513 +
            ((C17269 + C17268) * C294 -
             ((C26935 + C26936) * C287 + (C26937 + C26938) * C293) +
             (C17271 + C17270) * C288 - (C17273 + C17272) * C295 -
             (C17275 + C17274) * C48227) *
                C48255) *
               C47900 * C48204 +
           (((C26938 + C26937) * C293 + (C26936 + C26935) * C287 -
             (C17268 + C17269) * C294 - (C17270 + C17271) * C288 +
             (C17272 + C17273) * C295 + (C17274 + C17275) * C48227) *
                C10513 +
            ((C16335 * C1297 + C16331 * C1309 + C16336 * C1301 +
              C48253 * C1316) *
                 C293 +
             (C16335 * C1308 + C16331 * C1324 + C16336 * C1317 +
              C48253 * C1328) *
                 C287 -
             (C18705 + C18704) * C294 - (C18707 + C18706) * C288 +
             (C16335 * C1295 + C16331 * C1305 + C16336 * C1303 +
              C48253 * C1320) *
                 C295 +
             (C16335 * C1304 + C16331 * C1322 + C16336 * C1321 +
              C48253 * C1330) *
                 C48227) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C2299 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C2300 +
           (((C26472 + C26471) * C1160 + (C26470 + C26469) * C47871) * C10513 +
            ((C28209 + C28210) * C1160 + (C28211 + C28212) * C47871) * C48255) *
               C47900 * C2301 -
           (((C28213 + C28214) * C47871 + (C28215 + C28216) * C1160) * C48255 +
            ((C28212 + C28211) * C47871 + (C28210 + C28209) * C1160) * C10513) *
               C47900 * C48251) *
              C48203 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C2300 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C2299 -
           (((C28679 + C28680) * C47871 + (C28681 + C28682) * C1160) * C48255 +
            ((C27340 + C27339) * C47871 + (C27338 + C27337) * C1160) * C10513) *
               C47900 * C2301 +
           (((C28682 + C28681) * C1160 + (C28680 + C28679) * C47871) * C10513 +
            ((C16335 * C6973 + C16331 * C6975 + C16336 * C23492 +
              C48253 * C23493) *
                 C1160 +
             (C16335 * C6976 + C16331 * C6979 + C16336 * C23494 +
              C48253 * C23495) *
                 C47871) *
                C48255) *
               C47900 * C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                   C114 +
               (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                   C102 -
               (C16370 + C16371) * C115 - (C16372 + C16373) * C103 +
               (C16374 + C16375) * C116 + (C16376 + C16377) * C104 -
               (C16378 + C16379) * C117 - (C16380 + C16381) * C105 +
               (C16382 + C16383) * C118 + (C16384 + C16385) * C106) *
                  C10513 +
              ((C16335 * C486 + C16331 * C497 + C16336 * C935 + C48253 * C940) *
                   C114 +
               (C16335 * C496 + C16331 * C515 + C16336 * C941 + C48253 * C950) *
                   C102 -
               (C16759 + C16758) * C115 - (C16761 + C16760) * C103 +
               (C16763 + C16762) * C116 + (C16765 + C16764) * C104 -
               (C17055 + C17054) * C117 - (C17057 + C17056) * C105 +
               (C16335 * C489 + C16331 * C503 + C16336 * C939 + C48253 * C948) *
                   C118 +
               (C16335 * C504 + C16331 * C519 + C16336 * C949 + C48253 * C954) *
                   C106) *
                  C48255) *
             C47900 * C47935 * C47923 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16335 * C119 + C16331 * C126 + C16336 * C297 +
                 C48253 * C308) *
                    C293 +
                (C16335 * C127 + C16331 * C140 + C16336 * C307 +
                 C48253 * C326) *
                    C287 -
                (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
                (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
                   C10513 +
               ((C16335 * C486 + C16331 * C497 + C16336 * C935 +
                 C48253 * C940) *
                    C293 +
                (C16335 * C496 + C16331 * C515 + C16336 * C941 +
                 C48253 * C950) *
                    C287 -
                (C16759 + C16758) * C294 - (C16761 + C16760) * C288 +
                (C16763 + C16762) * C295 + (C16765 + C16764) * C48227) *
                   C48255) *
                  C47900 * C47935 * C48274 +
              (((C16564 + C16565) * C294 -
                ((C16336 * C317 + C48253 * C331 + C16335 * C307 +
                  C16331 * C326) *
                     C287 +
                 (C16336 * C301 + C48253 * C316 + C16335 * C297 +
                  C16331 * C308) *
                     C293) +
                (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
                (C16570 + C16571) * C48227) *
                   C10513 +
               ((C17269 + C17268) * C294 -
                ((C16336 * C1314 + C48253 * C1327 + C16335 * C941 +
                  C16331 * C950) *
                     C287 +
                 (C16336 * C1300 + C48253 * C1315 + C16335 * C935 +
                  C16331 * C940) *
                     C293) +
                (C17271 + C17270) * C288 - (C17273 + C17272) * C295 -
                (C17275 + C17274) * C48227) *
                   C48255) *
                  C47900 * C47935 * C48262 +
              (((C16335 * C301 + C16331 * C316 + C16336 * C1163 +
                 C48253 * C1172) *
                    C293 +
                (C16335 * C317 + C16331 * C331 + C16336 * C1171 +
                 C48253 * C1181) *
                    C287 -
                (C16572 + C16573) * C294 - (C16574 + C16575) * C288 +
                (C16576 + C16577) * C295 + (C16578 + C16579) * C48227) *
                   C10513 +
               ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
                 C48253 * C1716) *
                    C293 +
                (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
                 C48253 * C1722) *
                    C287 -
                (C17995 + C17994) * C294 - (C17997 + C17996) * C288 +
                (C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
                 C48253 * C1720) *
                    C295 +
                (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
                 C48253 * C1724) *
                    C48227) *
                   C48255) *
                  C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C293 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C287 -
            (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
            (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C26465 + C26466) * C293 + (C26467 + C26468) * C287 -
            (C16759 + C16758) * C294 - (C16761 + C16760) * C288 +
            (C16763 + C16762) * C295 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C48275 +
          (((C16758 + C16759) * C294 -
            ((C26468 + C26467) * C287 + (C26466 + C26465) * C293) +
            (C16760 + C16761) * C288 - (C16762 + C16763) * C295 -
            (C16764 + C16765) * C48227) *
               C10513 +
           ((C16767 + C16766) * C294 -
            ((C26469 + C26470) * C287 + (C26471 + C26472) * C293) +
            (C16769 + C16768) * C288 - (C16771 + C16770) * C295 -
            (C16773 + C16772) * C48227) *
               C48255) *
              C47900 * C48264 +
          (((C26472 + C26471) * C293 + (C26470 + C26469) * C287 -
            (C16766 + C16767) * C294 - (C16768 + C16769) * C288 +
            (C16770 + C16771) * C295 + (C16772 + C16773) * C48227) *
               C10513 +
           ((C16335 * C2017 + C16331 * C2026 + C16336 * C2417 +
             C48253 * C2420) *
                C293 +
            (C16335 * C2025 + C16331 * C2035 + C16336 * C2421 +
             C48253 * C2426) *
                C287 -
            (C18847 + C18846) * C294 - (C18849 + C18848) * C288 +
            (C16335 * C2015 + C16331 * C2022 + C16336 * C2419 +
             C48253 * C2424) *
                C295 +
            (C16335 * C2021 + C16331 * C2033 + C16336 * C2425 +
             C48253 * C2428) *
                C48227) *
               C48255) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C26465 + C26466) * C1089 + (C26467 + C26468) * C48271 -
            (C16759 + C16758) * C1090 - (C16761 + C16760) * C48258 +
            (C16763 + C16762) * C1091 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C47935 * C1086 +
          (((C16564 + C16565) * C1090 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48271 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1089) +
            (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
            (C16570 + C16571) * C48227) *
               C10513 +
           ((C17269 + C17268) * C1090 -
            ((C26935 + C26936) * C48271 + (C26937 + C26938) * C1089) +
            (C17271 + C17270) * C48258 - (C17273 + C17272) * C1091 -
            (C17275 + C17274) * C48227) *
               C48255) *
              C47900 * C47935 * C1087 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1089 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48271 -
            (C16572 + C16573) * C1090 - (C16574 + C16575) * C48258 +
            (C16576 + C16577) * C1091 + (C16578 + C16579) * C48227) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C1089 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C48271 -
            (C17995 + C17994) * C1090 - (C17997 + C17996) * C48258 +
            (C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
             C48253 * C1720) *
                C1091 +
            (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
             C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1160 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47871) *
               C10513 +
           ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
              C47900 * C47935 * C1155 -
          (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
           ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                C47871 +
            (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                C1160) *
               C10513) *
              C47900 * C47935 * C1156 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1160 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C47871) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C1160 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1157 -
          (((C16336 * C6594 + C48253 * C6597 + C16335 * C1717 +
             C16331 * C1722) *
                C47871 +
            (C16336 * C6591 + C48253 * C6593 + C16335 * C1713 +
             C16331 * C1716) *
                C1160) *
               C48255 +
           ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
             C16331 * C1181) *
                C47871 +
            (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
             C16331 * C1172) *
                C1160) *
               C10513) *
              C47900 * C47935 * C1158 +
          (((C16335 * C1164 + C16331 * C1173 + C16336 * C5951 +
             C48253 * C5953) *
                C1160 +
            (C16335 * C1174 + C16331 * C1182 + C16336 * C5954 +
             C48253 * C5957) *
                C47871) *
               C10513 +
           ((C16335 * C6591 + C16331 * C6593 + C16336 * C23206 +
             C48253 * C23207) *
                C1160 +
            (C16335 * C6594 + C16331 * C6597 + C16336 * C23208 +
             C48253 * C23209) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C48275 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C48264 +
           (((C26472 + C26471) * C1160 + (C26470 + C26469) * C47871) * C10513 +
            ((C16335 * C2017 + C16331 * C2026 + C16336 * C2417 +
              C48253 * C2420) *
                 C1160 +
             (C16335 * C2025 + C16331 * C2035 + C16336 * C2421 +
              C48253 * C2426) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C1086 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C48264 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C48275 -
           (((C16336 * C7462 + C48253 * C7465 + C16335 * C2421 +
              C16331 * C2426) *
                 C47871 +
             (C16336 * C7459 + C48253 * C7461 + C16335 * C2417 +
              C16331 * C2420) *
                 C1160) *
                C48255 +
            ((C27340 + C27339) * C47871 + (C27338 + C27337) * C1160) * C10513) *
               C47900 * C48238) *
              C1087 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C10513 +
            ((C27341 + C27342) * C1160 + (C27343 + C27344) * C47871) * C48255) *
               C47900 * C48275 -
           (((C27345 + C27346) * C47871 + (C27347 + C27348) * C1160) * C48255 +
            ((C27344 + C27343) * C47871 + (C27342 + C27341) * C1160) * C10513) *
               C47900 * C48264 +
           (((C27348 + C27347) * C1160 + (C27346 + C27345) * C47871) * C10513 +
            ((C16335 * C7459 + C16331 * C7461 + C16336 * C23838 +
              C48253 * C23839) *
                 C1160 +
             (C16335 * C7462 + C16331 * C7465 + C16336 * C23840 +
              C48253 * C23841) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C26465 + C26466) * C1089 + (C26467 + C26468) * C48271 -
            (C16759 + C16758) * C1090 - (C16761 + C16760) * C48258 +
            (C16763 + C16762) * C1091 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C1835 +
          (((C16758 + C16759) * C1090 -
            ((C26468 + C26467) * C48271 + (C26466 + C26465) * C1089) +
            (C16760 + C16761) * C48258 - (C16762 + C16763) * C1091 -
            (C16764 + C16765) * C48227) *
               C10513 +
           ((C16767 + C16766) * C1090 -
            ((C26469 + C26470) * C48271 + (C26471 + C26472) * C1089) +
            (C16769 + C16768) * C48258 - (C16771 + C16770) * C1091 -
            (C16773 + C16772) * C48227) *
               C48255) *
              C47900 * C1836 +
          (((C26472 + C26471) * C1089 + (C26470 + C26469) * C48271 -
            (C16766 + C16767) * C1090 - (C16768 + C16769) * C48258 +
            (C16770 + C16771) * C1091 + (C16772 + C16773) * C48227) *
               C10513 +
           ((C16335 * C2017 + C16331 * C2026 + C16336 * C2417 +
             C48253 * C2420) *
                C1089 +
            (C16335 * C2025 + C16331 * C2035 + C16336 * C2421 +
             C48253 * C2426) *
                C48271 -
            (C18847 + C18846) * C1090 - (C18849 + C18848) * C48258 +
            (C16335 * C2015 + C16331 * C2022 + C16336 * C2419 +
             C48253 * C2424) *
                C1091 +
            (C16335 * C2021 + C16331 * C2033 + C16336 * C2425 +
             C48253 * C2428) *
                C48227) *
               C48255) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C1835 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C1836 +
           (((C26472 + C26471) * C1160 + (C26470 + C26469) * C47871) * C10513 +
            ((C16335 * C2017 + C16331 * C2026 + C16336 * C2417 +
              C48253 * C2420) *
                 C1160 +
             (C16335 * C2025 + C16331 * C2035 + C16336 * C2421 +
              C48253 * C2426) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48274 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C1836 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C1835 -
           (((C16336 * C7462 + C48253 * C7465 + C16335 * C2421 +
              C16331 * C2426) *
                 C47871 +
             (C16336 * C7459 + C48253 * C7461 + C16335 * C2417 +
              C16331 * C2420) *
                 C1160) *
                C48255 +
            ((C27340 + C27339) * C47871 + (C27338 + C27337) * C1160) * C10513) *
               C47900 * C48238) *
              C48262 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C10513 +
            ((C27341 + C27342) * C1160 + (C27343 + C27344) * C47871) * C48255) *
               C47900 * C1835 -
           (((C27345 + C27346) * C47871 + (C27347 + C27348) * C1160) * C48255 +
            ((C27344 + C27343) * C47871 + (C27342 + C27341) * C1160) * C10513) *
               C47900 * C1836 +
           (((C27348 + C27347) * C1160 + (C27346 + C27345) * C47871) * C10513 +
            ((C16335 * C7459 + C16331 * C7461 + C16336 * C23838 +
              C48253 * C23839) *
                 C1160 +
             (C16335 * C7462 + C16331 * C7465 + C16336 * C23840 +
              C48253 * C23841) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1160 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47871) *
               C10513 +
           ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
              C47900 * C2010 -
          (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
           ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
              C47900 * C2011 +
          (((C26472 + C26471) * C1160 + (C26470 + C26469) * C47871) * C10513 +
           ((C28209 + C28210) * C1160 + (C28211 + C28212) * C47871) * C48255) *
              C47900 * C2012 -
          (((C28213 + C28214) * C47871 + (C28215 + C28216) * C1160) * C48255 +
           ((C28212 + C28211) * C47871 + (C28210 + C28209) * C1160) * C10513) *
              C47900 * C2013 +
          (((C28216 + C28215) * C1160 + (C28214 + C28213) * C47871) * C10513 +
           ((C16335 * C12645 + C16331 * C12647 + C16336 * C28188 +
             C48253 * C28189) *
                C1160 +
            (C16335 * C12648 + C16331 * C12651 + C16336 * C28190 +
             C48253 * C28191) *
                C47871) *
               C48255) *
              C47900 * C2014) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46986 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48186 -
             (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
                C10513 +
            ((C26465 + C26466) * C46986 + (C26467 + C26468) * C48186 -
             (C16759 + C16758) * C46967 - (C16761 + C16760) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C16758 + C16759) * C46967 -
             ((C26468 + C26467) * C48186 + (C26466 + C26465) * C46986) +
             (C16760 + C16761) * C47881) *
                C10513 +
            ((C16767 + C16766) * C46967 -
             ((C26469 + C26470) * C48186 + (C26471 + C26472) * C46986) +
             (C16769 + C16768) * C47881) *
                C48255) *
               C47900 * C48022) *
              C1086 +
          ((((C16564 + C16565) * C46967 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48186 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46986) +
             (C16566 + C16567) * C47881) *
                C10513 +
            ((C17269 + C17268) * C46967 -
             ((C26935 + C26936) * C48186 + (C26937 + C26938) * C46986) +
             (C17271 + C17270) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C26938 + C26937) * C46986 + (C26936 + C26935) * C48186 -
             (C17268 + C17269) * C46967 - (C17270 + C17271) * C47881) *
                C10513 +
            ((C27337 + C27338) * C46986 + (C27339 + C27340) * C48186 -
             (C18705 + C18704) * C46967 - (C18707 + C18706) * C47881) *
                C48255) *
               C47900 * C48022) *
              C1087 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C46986 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C48186 -
             (C16572 + C16573) * C46967 - (C16574 + C16575) * C47881) *
                C10513 +
            ((C27341 + C27342) * C46986 + (C27343 + C27344) * C48186 -
             (C17995 + C17994) * C46967 - (C17997 + C17996) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C17994 + C17995) * C46967 -
             ((C27344 + C27343) * C48186 + (C27342 + C27341) * C46986) +
             (C17996 + C17997) * C47881) *
                C10513 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C46967 -
             ((C27345 + C27346) * C48186 + (C27347 + C27348) * C46986) +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C665 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C659 -
            (C16370 + C16371) * C666 - (C16372 + C16373) * C660 +
            (C16374 + C16375) * C667 + (C16376 + C16377) * C661 -
            (C16378 + C16379) * C668 - (C16380 + C16381) * C48239) *
               C10513 +
           ((C26465 + C26466) * C665 + (C26467 + C26468) * C659 -
            (C16759 + C16758) * C666 - (C16761 + C16760) * C660 +
            (C16763 + C16762) * C667 + (C16765 + C16764) * C661 -
            (C17055 + C17054) * C668 - (C17057 + C17056) * C48239) *
               C48255) *
              C47900 * C48204 +
          (((C16758 + C16759) * C666 -
            ((C26468 + C26467) * C659 + (C26466 + C26465) * C665) +
            (C16760 + C16761) * C660 - (C16762 + C16763) * C667 -
            (C16764 + C16765) * C661 + (C17054 + C17055) * C668 +
            (C17056 + C17057) * C48239) *
               C10513 +
           ((C16767 + C16766) * C666 -
            ((C26469 + C26470) * C659 + (C26471 + C26472) * C665) +
            (C16769 + C16768) * C660 - (C16771 + C16770) * C667 -
            (C16773 + C16772) * C661 +
            (C16335 * C493 + C16331 * C511 + C16336 * C2185 + C48253 * C2186) *
                C668 +
            (C16335 * C512 + C16331 * C523 + C16336 * C2187 + C48253 * C2188) *
                C48239) *
               C48255) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C46986 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48186 -
            (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
               C10513 +
           ((C26465 + C26466) * C46986 + (C26467 + C26468) * C48186 -
            (C16759 + C16758) * C46967 - (C16761 + C16760) * C47881) *
               C48255) *
              C47900 * C2299 +
          (((C16758 + C16759) * C46967 -
            ((C26468 + C26467) * C48186 + (C26466 + C26465) * C46986) +
            (C16760 + C16761) * C47881) *
               C10513 +
           ((C16767 + C16766) * C46967 -
            ((C26469 + C26470) * C48186 + (C26471 + C26472) * C46986) +
            (C16769 + C16768) * C47881) *
               C48255) *
              C47900 * C2300 +
          (((C26472 + C26471) * C46986 + (C26470 + C26469) * C48186 -
            (C16766 + C16767) * C46967 - (C16768 + C16769) * C47881) *
               C10513 +
           ((C28209 + C28210) * C46986 + (C28211 + C28212) * C48186 -
            (C18847 + C18846) * C46967 - (C18849 + C18848) * C47881) *
               C48255) *
              C47900 * C2301 +
          (((C18846 + C18847) * C46967 -
            ((C28212 + C28211) * C48186 + (C28210 + C28209) * C46986) +
            (C18848 + C18849) * C47881) *
               C10513 +
           ((C16335 * C2019 + C16331 * C2029 + C16336 * C6974 +
             C48253 * C6977) *
                C46967 -
            ((C28213 + C28214) * C48186 + (C28215 + C28216) * C46986) +
            (C16335 * C2030 + C16331 * C2037 + C16336 * C6978 +
             C48253 * C6980) *
                C47881) *
               C48255) *
              C47900 * C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C293 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C287 -
            (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
            (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C16335 * C486 + C16331 * C497 + C16336 * C935 + C48253 * C940) *
                C293 +
            (C16335 * C496 + C16331 * C515 + C16336 * C941 + C48253 * C950) *
                C287 -
            (C16759 + C16758) * C294 - (C16761 + C16760) * C288 +
            (C16763 + C16762) * C295 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C47935 * C48274 +
          (((C16564 + C16565) * C294 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C287 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C293) +
            (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
            (C16570 + C16571) * C48227) *
               C10513 +
           ((C17269 + C17268) * C294 -
            ((C16336 * C1314 + C48253 * C1327 + C16335 * C941 + C16331 * C950) *
                 C287 +
             (C16336 * C1300 + C48253 * C1315 + C16335 * C935 + C16331 * C940) *
                 C293) +
            (C17271 + C17270) * C288 - (C17273 + C17272) * C295 -
            (C17275 + C17274) * C48227) *
               C48255) *
              C47900 * C47935 * C48262 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C293 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C287 -
            (C16572 + C16573) * C294 - (C16574 + C16575) * C288 +
            (C16576 + C16577) * C295 + (C16578 + C16579) * C48227) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C293 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C287 -
            (C17995 + C17994) * C294 - (C17997 + C17996) * C288 +
            (C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
             C48253 * C1720) *
                C295 +
            (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
             C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
               C114 +
           (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
               C102 -
           (C16370 + C16371) * C115 - (C16372 + C16373) * C103 +
           (C16374 + C16375) * C116 + (C16376 + C16377) * C104 -
           (C16378 + C16379) * C117 - (C16380 + C16381) * C105 +
           (C16382 + C16383) * C118 + (C16384 + C16385) * C106) *
              C10513 +
          ((C16335 * C486 + C16331 * C497 + C16336 * C935 + C48253 * C940) *
               C114 +
           (C16335 * C496 + C16331 * C515 + C16336 * C941 + C48253 * C950) *
               C102 -
           (C16759 + C16758) * C115 - (C16761 + C16760) * C103 +
           (C16763 + C16762) * C116 + (C16765 + C16764) * C104 -
           (C17055 + C17054) * C117 - (C17057 + C17056) * C105 +
           (C16335 * C489 + C16331 * C503 + C16336 * C939 + C48253 * C948) *
               C118 +
           (C16335 * C504 + C16331 * C519 + C16336 * C949 + C48253 * C954) *
               C106) *
              C48255) *
         C47900 * C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C26465 + C26466) * C1089 + (C26467 + C26468) * C48271 -
            (C16759 + C16758) * C1090 - (C16761 + C16760) * C48258 +
            (C16763 + C16762) * C1091 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C47935 * C1086 +
          (((C16564 + C16565) * C1090 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48271 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1089) +
            (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
            (C16570 + C16571) * C48227) *
               C10513 +
           ((C17269 + C17268) * C1090 -
            ((C26935 + C26936) * C48271 + (C26937 + C26938) * C1089) +
            (C17271 + C17270) * C48258 - (C17273 + C17272) * C1091 -
            (C17275 + C17274) * C48227) *
               C48255) *
              C47900 * C47935 * C1087 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1089 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48271 -
            (C16572 + C16573) * C1090 - (C16574 + C16575) * C48258 +
            (C16576 + C16577) * C1091 + (C16578 + C16579) * C48227) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C1089 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C48271 -
            (C17995 + C17994) * C1090 - (C17997 + C17996) * C48258 +
            (C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
             C48253 * C1720) *
                C1091 +
            (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
             C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1160 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47871) *
               C10513 +
           ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
              C47900 * C47935 * C1155 -
          (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
           ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                C47871 +
            (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                C1160) *
               C10513) *
              C47900 * C47935 * C1156 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1160 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C47871) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C1160 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1157 -
          (((C16336 * C6594 + C48253 * C6597 + C16335 * C1717 +
             C16331 * C1722) *
                C47871 +
            (C16336 * C6591 + C48253 * C6593 + C16335 * C1713 +
             C16331 * C1716) *
                C1160) *
               C48255 +
           ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
             C16331 * C1181) *
                C47871 +
            (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
             C16331 * C1172) *
                C1160) *
               C10513) *
              C47900 * C47935 * C1158 +
          (((C16335 * C1164 + C16331 * C1173 + C16336 * C5951 +
             C48253 * C5953) *
                C1160 +
            (C16335 * C1174 + C16331 * C1182 + C16336 * C5954 +
             C48253 * C5957) *
                C47871) *
               C10513 +
           ((C16335 * C6591 + C16331 * C6593 + C16336 * C23206 +
             C48253 * C23207) *
                C1160 +
            (C16335 * C6594 + C16331 * C6597 + C16336 * C23208 +
             C48253 * C23209) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C26465 + C26466) * C1089 + (C26467 + C26468) * C48271 -
            (C16759 + C16758) * C1090 - (C16761 + C16760) * C48258 +
            (C16763 + C16762) * C1091 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C1835 +
          (((C16758 + C16759) * C1090 -
            ((C26468 + C26467) * C48271 + (C26466 + C26465) * C1089) +
            (C16760 + C16761) * C48258 - (C16762 + C16763) * C1091 -
            (C16764 + C16765) * C48227) *
               C10513 +
           ((C16767 + C16766) * C1090 -
            ((C26469 + C26470) * C48271 + (C26471 + C26472) * C1089) +
            (C16769 + C16768) * C48258 - (C16771 + C16770) * C1091 -
            (C16773 + C16772) * C48227) *
               C48255) *
              C47900 * C1836 +
          (((C26472 + C26471) * C1089 + (C26470 + C26469) * C48271 -
            (C16766 + C16767) * C1090 - (C16768 + C16769) * C48258 +
            (C16770 + C16771) * C1091 + (C16772 + C16773) * C48227) *
               C10513 +
           ((C16335 * C2017 + C16331 * C2026 + C16336 * C2417 +
             C48253 * C2420) *
                C1089 +
            (C16335 * C2025 + C16331 * C2035 + C16336 * C2421 +
             C48253 * C2426) *
                C48271 -
            (C18847 + C18846) * C1090 - (C18849 + C18848) * C48258 +
            (C16335 * C2015 + C16331 * C2022 + C16336 * C2419 +
             C48253 * C2424) *
                C1091 +
            (C16335 * C2021 + C16331 * C2033 + C16336 * C2425 +
             C48253 * C2428) *
                C48227) *
               C48255) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C1835 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C1836 +
           (((C26472 + C26471) * C1160 + (C26470 + C26469) * C47871) * C10513 +
            ((C16335 * C2017 + C16331 * C2026 + C16336 * C2417 +
              C48253 * C2420) *
                 C1160 +
             (C16335 * C2025 + C16331 * C2035 + C16336 * C2421 +
              C48253 * C2426) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48274 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C1836 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C1835 -
           (((C16336 * C7462 + C48253 * C7465 + C16335 * C2421 +
              C16331 * C2426) *
                 C47871 +
             (C16336 * C7459 + C48253 * C7461 + C16335 * C2417 +
              C16331 * C2420) *
                 C1160) *
                C48255 +
            ((C27340 + C27339) * C47871 + (C27338 + C27337) * C1160) * C10513) *
               C47900 * C48238) *
              C48262 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C10513 +
            ((C27341 + C27342) * C1160 + (C27343 + C27344) * C47871) * C48255) *
               C47900 * C1835 -
           (((C27345 + C27346) * C47871 + (C27347 + C27348) * C1160) * C48255 +
            ((C27344 + C27343) * C47871 + (C27342 + C27341) * C1160) * C10513) *
               C47900 * C1836 +
           (((C27348 + C27347) * C1160 + (C27346 + C27345) * C47871) * C10513 +
            ((C16335 * C7459 + C16331 * C7461 + C16336 * C23838 +
              C48253 * C23839) *
                 C1160 +
             (C16335 * C7462 + C16331 * C7465 + C16336 * C23840 +
              C48253 * C23841) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46996 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47876 -
             (C16370 + C16371) * C46992 - (C16372 + C16373) * C47884 +
             (C16374 + C16375) * C47002 + (C16376 + C16377) * C2901) *
                C10513 +
            ((C26465 + C26466) * C46996 + (C26467 + C26468) * C47876 -
             (C16759 + C16758) * C46992 - (C16761 + C16760) * C47884 +
             (C16763 + C16762) * C47002 + (C16765 + C16764) * C2901) *
                C48255) *
               C47900 * C3298 +
           (((C16758 + C16759) * C46992 -
             ((C26468 + C26467) * C47876 + (C26466 + C26465) * C46996) +
             (C16760 + C16761) * C47884 - (C16762 + C16763) * C47002 -
             (C16764 + C16765) * C2901) *
                C10513 +
            ((C16767 + C16766) * C46992 -
             ((C26469 + C26470) * C47876 + (C26471 + C26472) * C46996) +
             (C16769 + C16768) * C47884 - (C16771 + C16770) * C47002 -
             (C16773 + C16772) * C2901) *
                C48255) *
               C47900 * C48022) *
              C48203 +
          ((((C16564 + C16565) * C46992 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C47876 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46996) +
             (C16566 + C16567) * C47884 - (C16568 + C16569) * C47002 -
             (C16570 + C16571) * C2901) *
                C10513 +
            ((C17269 + C17268) * C46992 -
             ((C26935 + C26936) * C47876 + (C26937 + C26938) * C46996) +
             (C17271 + C17270) * C47884 - (C17273 + C17272) * C47002 -
             (C17275 + C17274) * C2901) *
                C48255) *
               C47900 * C3298 +
           (((C26938 + C26937) * C46996 + (C26936 + C26935) * C47876 -
             (C17268 + C17269) * C46992 - (C17270 + C17271) * C47884 +
             (C17272 + C17273) * C47002 + (C17274 + C17275) * C2901) *
                C10513 +
            ((C27337 + C27338) * C46996 + (C27339 + C27340) * C47876 -
             (C18705 + C18704) * C46992 - (C18707 + C18706) * C47884 +
             (C16335 * C1295 + C16331 * C1305 + C16336 * C1303 +
              C48253 * C1320) *
                 C47002 +
             (C16335 * C1304 + C16331 * C1322 + C16336 * C1321 +
              C48253 * C1330) *
                 C2901) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C2641 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C2635 -
             (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
                C10513 +
            ((C26465 + C26466) * C2641 + (C26467 + C26468) * C2635 -
             (C16759 + C16758) * C2642 - (C16761 + C16760) * C47881) *
                C48255) *
               C47900 * C48018 +
           (((C16758 + C16759) * C2642 -
             ((C26468 + C26467) * C2635 + (C26466 + C26465) * C2641) +
             (C16760 + C16761) * C47881) *
                C10513 +
            ((C16767 + C16766) * C2642 -
             ((C26469 + C26470) * C2635 + (C26471 + C26472) * C2641) +
             (C16769 + C16768) * C47881) *
                C48255) *
               C47900 * C48025 +
           (((C26472 + C26471) * C2641 + (C26470 + C26469) * C2635 -
             (C16766 + C16767) * C2642 - (C16768 + C16769) * C47881) *
                C10513 +
            ((C28209 + C28210) * C2641 + (C28211 + C28212) * C2635 -
             (C18847 + C18846) * C2642 - (C18849 + C18848) * C47881) *
                C48255) *
               C47900 * C3806) *
              C48203 +
          ((((C16564 + C16565) * C2642 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C2635 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C2641) +
             (C16566 + C16567) * C47881) *
                C10513 +
            ((C17269 + C17268) * C2642 -
             ((C26935 + C26936) * C2635 + (C26937 + C26938) * C2641) +
             (C17271 + C17270) * C47881) *
                C48255) *
               C47900 * C48018 +
           (((C26938 + C26937) * C2641 + (C26936 + C26935) * C2635 -
             (C17268 + C17269) * C2642 - (C17270 + C17271) * C47881) *
                C10513 +
            ((C27337 + C27338) * C2641 + (C27339 + C27340) * C2635 -
             (C18705 + C18704) * C2642 - (C18707 + C18706) * C47881) *
                C48255) *
               C47900 * C48025 +
           (((C18704 + C18705) * C2642 -
             ((C27340 + C27339) * C2635 + (C27338 + C27337) * C2641) +
             (C18706 + C18707) * C47881) *
                C10513 +
            ((C16335 * C2418 + C16331 * C2422 + C16336 * C7460 +
              C48253 * C7463) *
                 C2642 -
             ((C28679 + C28680) * C2635 + (C28681 + C28682) * C2641) +
             (C16335 * C2423 + C16331 * C2427 + C16336 * C7464 +
              C48253 * C7466) *
                 C47881) *
                C48255) *
               C47900 * C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C2641 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C2635 -
             (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
                C10513 +
            ((C26465 + C26466) * C2641 + (C26467 + C26468) * C2635 -
             (C16759 + C16758) * C2642 - (C16761 + C16760) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C16758 + C16759) * C2642 -
             ((C26468 + C26467) * C2635 + (C26466 + C26465) * C2641) +
             (C16760 + C16761) * C47881) *
                C10513 +
            ((C16767 + C16766) * C2642 -
             ((C26469 + C26470) * C2635 + (C26471 + C26472) * C2641) +
             (C16769 + C16768) * C47881) *
                C48255) *
               C47900 * C48022) *
              C48274 +
          ((((C16564 + C16565) * C2642 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C2635 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C2641) +
             (C16566 + C16567) * C47881) *
                C10513 +
            ((C17269 + C17268) * C2642 -
             ((C26935 + C26936) * C2635 + (C26937 + C26938) * C2641) +
             (C17271 + C17270) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C26938 + C26937) * C2641 + (C26936 + C26935) * C2635 -
             (C17268 + C17269) * C2642 - (C17270 + C17271) * C47881) *
                C10513 +
            ((C27337 + C27338) * C2641 + (C27339 + C27340) * C2635 -
             (C18705 + C18704) * C2642 - (C18707 + C18706) * C47881) *
                C48255) *
               C47900 * C48022) *
              C48262 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C2641 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C2635 -
             (C16572 + C16573) * C2642 - (C16574 + C16575) * C47881) *
                C10513 +
            ((C27341 + C27342) * C2641 + (C27343 + C27344) * C2635 -
             (C17995 + C17994) * C2642 - (C17997 + C17996) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C17994 + C17995) * C2642 -
             ((C27344 + C27343) * C2635 + (C27342 + C27341) * C2641) +
             (C17996 + C17997) * C47881) *
                C10513 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C2642 -
             ((C27345 + C27346) * C2635 + (C27347 + C27348) * C2641) +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2533 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48280 -
            (C16370 + C16371) * C2534 - (C16372 + C16373) * C48273 +
            (C16374 + C16375) * C2535 + (C16376 + C16377) * C48260 -
            (C16378 + C16379) * C2536 - (C16380 + C16381) * C48239) *
               C10513 +
           ((C26465 + C26466) * C2533 + (C26467 + C26468) * C48280 -
            (C16759 + C16758) * C2534 - (C16761 + C16760) * C48273 +
            (C16763 + C16762) * C2535 + (C16765 + C16764) * C48260 -
            (C17055 + C17054) * C2536 - (C17057 + C17056) * C48239) *
               C48255) *
              C47900 * C3298 +
          (((C16758 + C16759) * C2534 -
            ((C26468 + C26467) * C48280 + (C26466 + C26465) * C2533) +
            (C16760 + C16761) * C48273 - (C16762 + C16763) * C2535 -
            (C16764 + C16765) * C48260 + (C17054 + C17055) * C2536 +
            (C17056 + C17057) * C48239) *
               C10513 +
           ((C16767 + C16766) * C2534 -
            ((C26469 + C26470) * C48280 + (C26471 + C26472) * C2533) +
            (C16769 + C16768) * C48273 - (C16771 + C16770) * C2535 -
            (C16773 + C16772) * C48260 +
            (C16335 * C493 + C16331 * C511 + C16336 * C2185 + C48253 * C2186) *
                C2536 +
            (C16335 * C512 + C16331 * C523 + C16336 * C2187 + C48253 * C2188) *
                C48239) *
               C48255) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2641 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C2635 -
            (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
               C10513 +
           ((C26465 + C26466) * C2641 + (C26467 + C26468) * C2635 -
            (C16759 + C16758) * C2642 - (C16761 + C16760) * C47881) *
               C48255) *
              C47900 * C48282 +
          (((C16758 + C16759) * C2642 -
            ((C26468 + C26467) * C2635 + (C26466 + C26465) * C2641) +
            (C16760 + C16761) * C47881) *
               C10513 +
           ((C16767 + C16766) * C2642 -
            ((C26469 + C26470) * C2635 + (C26471 + C26472) * C2641) +
            (C16769 + C16768) * C47881) *
               C48255) *
              C47900 * C48279 +
          (((C26472 + C26471) * C2641 + (C26470 + C26469) * C2635 -
            (C16766 + C16767) * C2642 - (C16768 + C16769) * C47881) *
               C10513 +
           ((C28209 + C28210) * C2641 + (C28211 + C28212) * C2635 -
            (C18847 + C18846) * C2642 - (C18849 + C18848) * C47881) *
               C48255) *
              C47900 * C48270 +
          (((C18846 + C18847) * C2642 -
            ((C28212 + C28211) * C2635 + (C28210 + C28209) * C2641) +
            (C18848 + C18849) * C47881) *
               C10513 +
           ((C16335 * C2019 + C16331 * C2029 + C16336 * C6974 +
             C48253 * C6977) *
                C2642 -
            ((C28213 + C28214) * C2635 + (C28215 + C28216) * C2641) +
            (C16335 * C2030 + C16331 * C2037 + C16336 * C6978 +
             C48253 * C6980) *
                C47881) *
               C48255) *
              C47900 * C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C46996 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47876 -
            (C16370 + C16371) * C46992 - (C16372 + C16373) * C47884 +
            (C16374 + C16375) * C47002 + (C16376 + C16377) * C2901) *
               C10513 +
           ((C26465 + C26466) * C46996 + (C26467 + C26468) * C47876 -
            (C16759 + C16758) * C46992 - (C16761 + C16760) * C47884 +
            (C16763 + C16762) * C47002 + (C16765 + C16764) * C2901) *
               C48255) *
              C47900 * C48018 +
          (((C16758 + C16759) * C46992 -
            ((C26468 + C26467) * C47876 + (C26466 + C26465) * C46996) +
            (C16760 + C16761) * C47884 - (C16762 + C16763) * C47002 -
            (C16764 + C16765) * C2901) *
               C10513 +
           ((C16767 + C16766) * C46992 -
            ((C26469 + C26470) * C47876 + (C26471 + C26472) * C46996) +
            (C16769 + C16768) * C47884 - (C16771 + C16770) * C47002 -
            (C16773 + C16772) * C2901) *
               C48255) *
              C47900 * C48025 +
          (((C26472 + C26471) * C46996 + (C26470 + C26469) * C47876 -
            (C16766 + C16767) * C46992 - (C16768 + C16769) * C47884 +
            (C16770 + C16771) * C47002 + (C16772 + C16773) * C2901) *
               C10513 +
           ((C28209 + C28210) * C46996 + (C28211 + C28212) * C47876 -
            (C18847 + C18846) * C46992 - (C18849 + C18848) * C47884 +
            (C16335 * C2015 + C16331 * C2022 + C16336 * C2419 +
             C48253 * C2424) *
                C47002 +
            (C16335 * C2021 + C16331 * C2033 + C16336 * C2425 +
             C48253 * C2428) *
                C2901) *
               C48255) *
              C47900 * C3806) *
         C47923) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C2533 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48280 -
            (C16370 + C16371) * C2534 - (C16372 + C16373) * C48273 +
            (C16374 + C16375) * C2535 + (C16376 + C16377) * C48260 -
            (C16378 + C16379) * C2536 - (C16380 + C16381) * C48239) *
               C10513 +
           ((C26465 + C26466) * C2533 + (C26467 + C26468) * C48280 -
            (C16759 + C16758) * C2534 - (C16761 + C16760) * C48273 +
            (C16763 + C16762) * C2535 + (C16765 + C16764) * C48260 -
            (C17055 + C17054) * C2536 - (C17057 + C17056) * C48239) *
               C48255) *
              C47900 * C3298 +
          (((C16758 + C16759) * C2534 -
            ((C26468 + C26467) * C48280 + (C26466 + C26465) * C2533) +
            (C16760 + C16761) * C48273 - (C16762 + C16763) * C2535 -
            (C16764 + C16765) * C48260 + (C17054 + C17055) * C2536 +
            (C17056 + C17057) * C48239) *
               C10513 +
           ((C16767 + C16766) * C2534 -
            ((C26469 + C26470) * C48280 + (C26471 + C26472) * C2533) +
            (C16769 + C16768) * C48273 - (C16771 + C16770) * C2535 -
            (C16773 + C16772) * C48260 +
            (C16335 * C493 + C16331 * C511 + C16336 * C2185 + C48253 * C2186) *
                C2536 +
            (C16335 * C512 + C16331 * C523 + C16336 * C2187 + C48253 * C2188) *
                C48239) *
               C48255) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C2641 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C2635 -
             (C16370 + C16371) * C2642 - (C16372 + C16373) * C47881) *
                C10513 +
            ((C26465 + C26466) * C2641 + (C26467 + C26468) * C2635 -
             (C16759 + C16758) * C2642 - (C16761 + C16760) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C16758 + C16759) * C2642 -
             ((C26468 + C26467) * C2635 + (C26466 + C26465) * C2641) +
             (C16760 + C16761) * C47881) *
                C10513 +
            ((C16767 + C16766) * C2642 -
             ((C26469 + C26470) * C2635 + (C26471 + C26472) * C2641) +
             (C16769 + C16768) * C47881) *
                C48255) *
               C47900 * C48022) *
              C48274 +
          ((((C16564 + C16565) * C2642 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C2635 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C2641) +
             (C16566 + C16567) * C47881) *
                C10513 +
            ((C17269 + C17268) * C2642 -
             ((C26935 + C26936) * C2635 + (C26937 + C26938) * C2641) +
             (C17271 + C17270) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C26938 + C26937) * C2641 + (C26936 + C26935) * C2635 -
             (C17268 + C17269) * C2642 - (C17270 + C17271) * C47881) *
                C10513 +
            ((C27337 + C27338) * C2641 + (C27339 + C27340) * C2635 -
             (C18705 + C18704) * C2642 - (C18707 + C18706) * C47881) *
                C48255) *
               C47900 * C48022) *
              C48262 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C2641 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C2635 -
             (C16572 + C16573) * C2642 - (C16574 + C16575) * C47881) *
                C10513 +
            ((C27341 + C27342) * C2641 + (C27343 + C27344) * C2635 -
             (C17995 + C17994) * C2642 - (C17997 + C17996) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C17994 + C17995) * C2642 -
             ((C27344 + C27343) * C2635 + (C27342 + C27341) * C2641) +
             (C17996 + C17997) * C47881) *
                C10513 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C2642 -
             ((C27345 + C27346) * C2635 + (C27347 + C27348) * C2641) +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C665 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C659 -
            (C16370 + C16371) * C666 - (C16372 + C16373) * C660 +
            (C16374 + C16375) * C667 + (C16376 + C16377) * C661 -
            (C16378 + C16379) * C668 - (C16380 + C16381) * C48239) *
               C10513 +
           ((C26465 + C26466) * C665 + (C26467 + C26468) * C659 -
            (C16759 + C16758) * C666 - (C16761 + C16760) * C660 +
            (C16763 + C16762) * C667 + (C16765 + C16764) * C661 -
            (C17055 + C17054) * C668 - (C17057 + C17056) * C48239) *
               C48255) *
              C47900 * C47935 * C48203 +
          (((C16564 + C16565) * C666 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C659 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C665) +
            (C16566 + C16567) * C660 - (C16568 + C16569) * C667 -
            (C16570 + C16571) * C661 + (C16912 + C16913) * C668 +
            (C16914 + C16915) * C48239) *
               C10513 +
           ((C17269 + C17268) * C666 -
            ((C16336 * C1314 + C48253 * C1327 + C16335 * C941 + C16331 * C950) *
                 C659 +
             (C16336 * C1300 + C48253 * C1315 + C16335 * C935 + C16331 * C940) *
                 C665) +
            (C17271 + C17270) * C660 - (C17273 + C17272) * C667 -
            (C17275 + C17274) * C661 +
            (C16335 * C938 + C16331 * C946 + C16336 * C1599 + C48253 * C1600) *
                C668 +
            (C16335 * C947 + C16331 * C953 + C16336 * C1601 + C48253 * C1602) *
                C48239) *
               C48255) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C46986 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48186 -
            (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
               C10513 +
           ((C26465 + C26466) * C46986 + (C26467 + C26468) * C48186 -
            (C16759 + C16758) * C46967 - (C16761 + C16760) * C47881) *
               C48255) *
              C47900 * C47935 * C1431 +
          (((C16564 + C16565) * C46967 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48186 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C46986) +
            (C16566 + C16567) * C47881) *
               C10513 +
           ((C17269 + C17268) * C46967 -
            ((C26935 + C26936) * C48186 + (C26937 + C26938) * C46986) +
            (C17271 + C17270) * C47881) *
               C48255) *
              C47900 * C47935 * C1432 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C46986 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48186 -
            (C16572 + C16573) * C46967 - (C16574 + C16575) * C47881) *
               C10513 +
           ((C27341 + C27342) * C46986 + (C27343 + C27344) * C48186 -
            (C17995 + C17994) * C46967 - (C17997 + C17996) * C47881) *
               C48255) *
              C47900 * C47935 * C1433 +
          (((C17788 + C17789) * C46967 -
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C48186 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C46986) +
            (C17790 + C17791) * C47881) *
               C10513 +
           ((C16335 * C1714 + C16331 * C1718 + C16336 * C6592 +
             C48253 * C6595) *
                C46967 -
            ((C16336 * C6594 + C48253 * C6597 + C16335 * C1717 +
              C16331 * C1722) *
                 C48186 +
             (C16336 * C6591 + C48253 * C6593 + C16335 * C1713 +
              C16331 * C1716) *
                 C46986) +
            (C16335 * C1719 + C16331 * C1723 + C16336 * C6596 +
             C48253 * C6598) *
                C47881) *
               C48255) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C293 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C287 -
             (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
             (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
                C10513 +
            ((C26465 + C26466) * C293 + (C26467 + C26468) * C287 -
             (C16759 + C16758) * C294 - (C16761 + C16760) * C288 +
             (C16763 + C16762) * C295 + (C16765 + C16764) * C48227) *
                C48255) *
               C47900 * C48204 +
           (((C16758 + C16759) * C294 -
             ((C26468 + C26467) * C287 + (C26466 + C26465) * C293) +
             (C16760 + C16761) * C288 - (C16762 + C16763) * C295 -
             (C16764 + C16765) * C48227) *
                C10513 +
            ((C16767 + C16766) * C294 -
             ((C26469 + C26470) * C287 + (C26471 + C26472) * C293) +
             (C16769 + C16768) * C288 - (C16771 + C16770) * C295 -
             (C16773 + C16772) * C48227) *
                C48255) *
               C47900 * C48022) *
              C48203 +
          ((((C16564 + C16565) * C294 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C287 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C293) +
             (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
             (C16570 + C16571) * C48227) *
                C10513 +
            ((C17269 + C17268) * C294 -
             ((C26935 + C26936) * C287 + (C26937 + C26938) * C293) +
             (C17271 + C17270) * C288 - (C17273 + C17272) * C295 -
             (C17275 + C17274) * C48227) *
                C48255) *
               C47900 * C48204 +
           (((C26938 + C26937) * C293 + (C26936 + C26935) * C287 -
             (C17268 + C17269) * C294 - (C17270 + C17271) * C288 +
             (C17272 + C17273) * C295 + (C17274 + C17275) * C48227) *
                C10513 +
            ((C16335 * C1297 + C16331 * C1309 + C16336 * C1301 +
              C48253 * C1316) *
                 C293 +
             (C16335 * C1308 + C16331 * C1324 + C16336 * C1317 +
              C48253 * C1328) *
                 C287 -
             (C18705 + C18704) * C294 - (C18707 + C18706) * C288 +
             (C16335 * C1295 + C16331 * C1305 + C16336 * C1303 +
              C48253 * C1320) *
                 C295 +
             (C16335 * C1304 + C16331 * C1322 + C16336 * C1321 +
              C48253 * C1330) *
                 C48227) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C48204 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C48022) *
              C1431 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C48022 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C48204) *
              C1432 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C10513 +
            ((C27341 + C27342) * C1160 + (C27343 + C27344) * C47871) * C48255) *
               C47900 * C48204 -
           (((C27345 + C27346) * C47871 + (C27347 + C27348) * C1160) * C48255 +
            ((C27344 + C27343) * C47871 + (C27342 + C27341) * C1160) * C10513) *
               C47900 * C48022) *
              C1433 +
          ((((C27811 + C27812) * C1160 + (C27813 + C27814) * C47871) * C10513 +
            ((C16335 * C6105 + C16331 * C6107 + C16336 * C22860 +
              C48253 * C22861) *
                 C1160 +
             (C16335 * C6108 + C16331 * C6111 + C16336 * C22862 +
              C48253 * C22863) *
                 C47871) *
                C48255) *
               C47900 * C48022 -
           (((C27814 + C27813) * C47871 + (C27812 + C27811) * C1160) * C48255 +
            ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
              C16331 * C1181) *
                 C47871 +
             (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
              C16331 * C1172) *
                 C1160) *
                C10513) *
               C47900 * C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C293 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C287 -
            (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
            (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C16335 * C486 + C16331 * C497 + C16336 * C935 + C48253 * C940) *
                C293 +
            (C16335 * C496 + C16331 * C515 + C16336 * C941 + C48253 * C950) *
                C287 -
            (C16759 + C16758) * C294 - (C16761 + C16760) * C288 +
            (C16763 + C16762) * C295 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C47935 * C48274 +
          (((C16564 + C16565) * C294 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C287 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C293) +
            (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
            (C16570 + C16571) * C48227) *
               C10513 +
           ((C17269 + C17268) * C294 -
            ((C16336 * C1314 + C48253 * C1327 + C16335 * C941 + C16331 * C950) *
                 C287 +
             (C16336 * C1300 + C48253 * C1315 + C16335 * C935 + C16331 * C940) *
                 C293) +
            (C17271 + C17270) * C288 - (C17273 + C17272) * C295 -
            (C17275 + C17274) * C48227) *
               C48255) *
              C47900 * C47935 * C48262 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C293 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C287 -
            (C16572 + C16573) * C294 - (C16574 + C16575) * C288 +
            (C16576 + C16577) * C295 + (C16578 + C16579) * C48227) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C293 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C287 -
            (C17995 + C17994) * C294 - (C17997 + C17996) * C288 +
            (C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
             C48253 * C1720) *
                C295 +
            (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
             C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
               C114 +
           (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
               C102 -
           (C16370 + C16371) * C115 - (C16372 + C16373) * C103 +
           (C16374 + C16375) * C116 + (C16376 + C16377) * C104 -
           (C16378 + C16379) * C117 - (C16380 + C16381) * C105 +
           (C16382 + C16383) * C118 + (C16384 + C16385) * C106) *
              C10513 +
          ((C16335 * C486 + C16331 * C497 + C16336 * C935 + C48253 * C940) *
               C114 +
           (C16335 * C496 + C16331 * C515 + C16336 * C941 + C48253 * C950) *
               C102 -
           (C16759 + C16758) * C115 - (C16761 + C16760) * C103 +
           (C16763 + C16762) * C116 + (C16765 + C16764) * C104 -
           (C17055 + C17054) * C117 - (C17057 + C17056) * C105 +
           (C16335 * C489 + C16331 * C503 + C16336 * C939 + C48253 * C948) *
               C118 +
           (C16335 * C504 + C16331 * C519 + C16336 * C949 + C48253 * C954) *
               C106) *
              C48255) *
         C47900 * C47935 * C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C293 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C287 -
            (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
            (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C26465 + C26466) * C293 + (C26467 + C26468) * C287 -
            (C16759 + C16758) * C294 - (C16761 + C16760) * C288 +
            (C16763 + C16762) * C295 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C48275 +
          (((C16758 + C16759) * C294 -
            ((C26468 + C26467) * C287 + (C26466 + C26465) * C293) +
            (C16760 + C16761) * C288 - (C16762 + C16763) * C295 -
            (C16764 + C16765) * C48227) *
               C10513 +
           ((C16767 + C16766) * C294 -
            ((C26469 + C26470) * C287 + (C26471 + C26472) * C293) +
            (C16769 + C16768) * C288 - (C16771 + C16770) * C295 -
            (C16773 + C16772) * C48227) *
               C48255) *
              C47900 * C48264 +
          (((C26472 + C26471) * C293 + (C26470 + C26469) * C287 -
            (C16766 + C16767) * C294 - (C16768 + C16769) * C288 +
            (C16770 + C16771) * C295 + (C16772 + C16773) * C48227) *
               C10513 +
           ((C16335 * C2017 + C16331 * C2026 + C16336 * C2417 +
             C48253 * C2420) *
                C293 +
            (C16335 * C2025 + C16331 * C2035 + C16336 * C2421 +
             C48253 * C2426) *
                C287 -
            (C18847 + C18846) * C294 - (C18849 + C18848) * C288 +
            (C16335 * C2015 + C16331 * C2022 + C16336 * C2419 +
             C48253 * C2424) *
                C295 +
            (C16335 * C2021 + C16331 * C2033 + C16336 * C2425 +
             C48253 * C2428) *
                C48227) *
               C48255) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C26465 + C26466) * C1089 + (C26467 + C26468) * C48271 -
            (C16759 + C16758) * C1090 - (C16761 + C16760) * C48258 +
            (C16763 + C16762) * C1091 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C47935 * C1086 +
          (((C16564 + C16565) * C1090 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48271 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1089) +
            (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
            (C16570 + C16571) * C48227) *
               C10513 +
           ((C17269 + C17268) * C1090 -
            ((C26935 + C26936) * C48271 + (C26937 + C26938) * C1089) +
            (C17271 + C17270) * C48258 - (C17273 + C17272) * C1091 -
            (C17275 + C17274) * C48227) *
               C48255) *
              C47900 * C47935 * C1087 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1089 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48271 -
            (C16572 + C16573) * C1090 - (C16574 + C16575) * C48258 +
            (C16576 + C16577) * C1091 + (C16578 + C16579) * C48227) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C1089 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C48271 -
            (C17995 + C17994) * C1090 - (C17997 + C17996) * C48258 +
            (C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
             C48253 * C1720) *
                C1091 +
            (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
             C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1160 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47871) *
               C10513 +
           ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
              C47900 * C47935 * C1155 -
          (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
           ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                C47871 +
            (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                C1160) *
               C10513) *
              C47900 * C47935 * C1156 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1160 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C47871) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C1160 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1157 -
          (((C16336 * C6594 + C48253 * C6597 + C16335 * C1717 +
             C16331 * C1722) *
                C47871 +
            (C16336 * C6591 + C48253 * C6593 + C16335 * C1713 +
             C16331 * C1716) *
                C1160) *
               C48255 +
           ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
             C16331 * C1181) *
                C47871 +
            (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
             C16331 * C1172) *
                C1160) *
               C10513) *
              C47900 * C47935 * C1158 +
          (((C16335 * C1164 + C16331 * C1173 + C16336 * C5951 +
             C48253 * C5953) *
                C1160 +
            (C16335 * C1174 + C16331 * C1182 + C16336 * C5954 +
             C48253 * C5957) *
                C47871) *
               C10513 +
           ((C16335 * C6591 + C16331 * C6593 + C16336 * C23206 +
             C48253 * C23207) *
                C1160 +
            (C16335 * C6594 + C16331 * C6597 + C16336 * C23208 +
             C48253 * C23209) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C1160 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C47871) *
                C10513 +
            ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
               C47900 * C48275 -
           (((C26469 + C26470) * C47871 + (C26471 + C26472) * C1160) * C48255 +
            ((C26468 + C26467) * C47871 + (C26466 + C26465) * C1160) * C10513) *
               C47900 * C48264 +
           (((C26472 + C26471) * C1160 + (C26470 + C26469) * C47871) * C10513 +
            ((C16335 * C2017 + C16331 * C2026 + C16336 * C2417 +
              C48253 * C2420) *
                 C1160 +
             (C16335 * C2025 + C16331 * C2035 + C16336 * C2421 +
              C48253 * C2426) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C1086 +
          ((((C26938 + C26937) * C1160 + (C26936 + C26935) * C47871) * C10513 +
            ((C27337 + C27338) * C1160 + (C27339 + C27340) * C47871) * C48255) *
               C47900 * C48264 -
           (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C47871 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1160) *
                C10513) *
               C47900 * C48275 -
           (((C16336 * C7462 + C48253 * C7465 + C16335 * C2421 +
              C16331 * C2426) *
                 C47871 +
             (C16336 * C7459 + C48253 * C7461 + C16335 * C2417 +
              C16331 * C2420) *
                 C1160) *
                C48255 +
            ((C27340 + C27339) * C47871 + (C27338 + C27337) * C1160) * C10513) *
               C47900 * C48238) *
              C1087 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C1160 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C47871) *
                C10513 +
            ((C27341 + C27342) * C1160 + (C27343 + C27344) * C47871) * C48255) *
               C47900 * C48275 -
           (((C27345 + C27346) * C47871 + (C27347 + C27348) * C1160) * C48255 +
            ((C27344 + C27343) * C47871 + (C27342 + C27341) * C1160) * C10513) *
               C47900 * C48264 +
           (((C27348 + C27347) * C1160 + (C27346 + C27345) * C47871) * C10513 +
            ((C16335 * C7459 + C16331 * C7461 + C16336 * C23838 +
              C48253 * C23839) *
                 C1160 +
             (C16335 * C7462 + C16331 * C7465 + C16336 * C23840 +
              C48253 * C23841) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C665 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C659 -
            (C16370 + C16371) * C666 - (C16372 + C16373) * C660 +
            (C16374 + C16375) * C667 + (C16376 + C16377) * C661 -
            (C16378 + C16379) * C668 - (C16380 + C16381) * C48239) *
               C10513 +
           ((C26465 + C26466) * C665 + (C26467 + C26468) * C659 -
            (C16759 + C16758) * C666 - (C16761 + C16760) * C660 +
            (C16763 + C16762) * C667 + (C16765 + C16764) * C661 -
            (C17055 + C17054) * C668 - (C17057 + C17056) * C48239) *
               C48255) *
              C47900 * C48204 +
          (((C16758 + C16759) * C666 -
            ((C26468 + C26467) * C659 + (C26466 + C26465) * C665) +
            (C16760 + C16761) * C660 - (C16762 + C16763) * C667 -
            (C16764 + C16765) * C661 + (C17054 + C17055) * C668 +
            (C17056 + C17057) * C48239) *
               C10513 +
           ((C16767 + C16766) * C666 -
            ((C26469 + C26470) * C659 + (C26471 + C26472) * C665) +
            (C16769 + C16768) * C660 - (C16771 + C16770) * C667 -
            (C16773 + C16772) * C661 +
            (C16335 * C493 + C16331 * C511 + C16336 * C2185 + C48253 * C2186) *
                C668 +
            (C16335 * C512 + C16331 * C523 + C16336 * C2187 + C48253 * C2188) *
                C48239) *
               C48255) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                 C46986 +
             (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                 C48186 -
             (C16370 + C16371) * C46967 - (C16372 + C16373) * C47881) *
                C10513 +
            ((C26465 + C26466) * C46986 + (C26467 + C26468) * C48186 -
             (C16759 + C16758) * C46967 - (C16761 + C16760) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C16758 + C16759) * C46967 -
             ((C26468 + C26467) * C48186 + (C26466 + C26465) * C46986) +
             (C16760 + C16761) * C47881) *
                C10513 +
            ((C16767 + C16766) * C46967 -
             ((C26469 + C26470) * C48186 + (C26471 + C26472) * C46986) +
             (C16769 + C16768) * C47881) *
                C48255) *
               C47900 * C48022) *
              C1086 +
          ((((C16564 + C16565) * C46967 -
             ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                  C48186 +
              (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                  C46986) +
             (C16566 + C16567) * C47881) *
                C10513 +
            ((C17269 + C17268) * C46967 -
             ((C26935 + C26936) * C48186 + (C26937 + C26938) * C46986) +
             (C17271 + C17270) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C26938 + C26937) * C46986 + (C26936 + C26935) * C48186 -
             (C17268 + C17269) * C46967 - (C17270 + C17271) * C47881) *
                C10513 +
            ((C27337 + C27338) * C46986 + (C27339 + C27340) * C48186 -
             (C18705 + C18704) * C46967 - (C18707 + C18706) * C47881) *
                C48255) *
               C47900 * C48022) *
              C1087 +
          ((((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                 C46986 +
             (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                 C48186 -
             (C16572 + C16573) * C46967 - (C16574 + C16575) * C47881) *
                C10513 +
            ((C27341 + C27342) * C46986 + (C27343 + C27344) * C48186 -
             (C17995 + C17994) * C46967 - (C17997 + C17996) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C17994 + C17995) * C46967 -
             ((C27344 + C27343) * C48186 + (C27342 + C27341) * C46986) +
             (C17996 + C17997) * C47881) *
                C10513 +
            ((C16335 * C1302 + C16331 * C1318 + C16336 * C6106 +
              C48253 * C6109) *
                 C46967 -
             ((C27345 + C27346) * C48186 + (C27347 + C27348) * C46986) +
             (C16335 * C1319 + C16331 * C1329 + C16336 * C6110 +
              C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
               C114 +
           (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
               C102 -
           (C16370 + C16371) * C115 - (C16372 + C16373) * C103 +
           (C16374 + C16375) * C116 + (C16376 + C16377) * C104 -
           (C16378 + C16379) * C117 - (C16380 + C16381) * C105 +
           (C16382 + C16383) * C118 + (C16384 + C16385) * C106) *
              C10513 +
          ((C16335 * C486 + C16331 * C497 + C16336 * C935 + C48253 * C940) *
               C114 +
           (C16335 * C496 + C16331 * C515 + C16336 * C941 + C48253 * C950) *
               C102 -
           (C16759 + C16758) * C115 - (C16761 + C16760) * C103 +
           (C16763 + C16762) * C116 + (C16765 + C16764) * C104 -
           (C17055 + C17054) * C117 - (C17057 + C17056) * C105 +
           (C16335 * C489 + C16331 * C503 + C16336 * C939 + C48253 * C948) *
               C118 +
           (C16335 * C504 + C16331 * C519 + C16336 * C949 + C48253 * C954) *
               C106) *
              C48255) *
         C47900 * C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C293 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C287 -
            (C16370 + C16371) * C294 - (C16372 + C16373) * C288 +
            (C16374 + C16375) * C295 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C16335 * C486 + C16331 * C497 + C16336 * C935 + C48253 * C940) *
                C293 +
            (C16335 * C496 + C16331 * C515 + C16336 * C941 + C48253 * C950) *
                C287 -
            (C16759 + C16758) * C294 - (C16761 + C16760) * C288 +
            (C16763 + C16762) * C295 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C47935 * C48274 +
          (((C16564 + C16565) * C294 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C287 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C293) +
            (C16566 + C16567) * C288 - (C16568 + C16569) * C295 -
            (C16570 + C16571) * C48227) *
               C10513 +
           ((C17269 + C17268) * C294 -
            ((C16336 * C1314 + C48253 * C1327 + C16335 * C941 + C16331 * C950) *
                 C287 +
             (C16336 * C1300 + C48253 * C1315 + C16335 * C935 + C16331 * C940) *
                 C293) +
            (C17271 + C17270) * C288 - (C17273 + C17272) * C295 -
            (C17275 + C17274) * C48227) *
               C48255) *
              C47900 * C47935 * C48262 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C293 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C287 -
            (C16572 + C16573) * C294 - (C16574 + C16575) * C288 +
            (C16576 + C16577) * C295 + (C16578 + C16579) * C48227) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C293 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C287 -
            (C17995 + C17994) * C294 - (C17997 + C17996) * C288 +
            (C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
             C48253 * C1720) *
                C295 +
            (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
             C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1089 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C48271 -
            (C16370 + C16371) * C1090 - (C16372 + C16373) * C48258 +
            (C16374 + C16375) * C1091 + (C16376 + C16377) * C48227) *
               C10513 +
           ((C26465 + C26466) * C1089 + (C26467 + C26468) * C48271 -
            (C16759 + C16758) * C1090 - (C16761 + C16760) * C48258 +
            (C16763 + C16762) * C1091 + (C16765 + C16764) * C48227) *
               C48255) *
              C47900 * C47935 * C1086 +
          (((C16564 + C16565) * C1090 -
            ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                 C48271 +
             (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                 C1089) +
            (C16566 + C16567) * C48258 - (C16568 + C16569) * C1091 -
            (C16570 + C16571) * C48227) *
               C10513 +
           ((C17269 + C17268) * C1090 -
            ((C26935 + C26936) * C48271 + (C26937 + C26938) * C1089) +
            (C17271 + C17270) * C48258 - (C17273 + C17272) * C1091 -
            (C17275 + C17274) * C48227) *
               C48255) *
              C47900 * C47935 * C1087 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1089 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C48271 -
            (C16572 + C16573) * C1090 - (C16574 + C16575) * C48258 +
            (C16576 + C16577) * C1091 + (C16578 + C16579) * C48227) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C1089 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C48271 -
            (C17995 + C17994) * C1090 - (C17997 + C17996) * C48258 +
            (C16335 * C1298 + C16331 * C1311 + C16336 * C1715 +
             C48253 * C1720) *
                C1091 +
            (C16335 * C1310 + C16331 * C1325 + C16336 * C1721 +
             C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16335 * C119 + C16331 * C126 + C16336 * C297 + C48253 * C308) *
                C1160 +
            (C16335 * C127 + C16331 * C140 + C16336 * C307 + C48253 * C326) *
                C47871) *
               C10513 +
           ((C26465 + C26466) * C1160 + (C26467 + C26468) * C47871) * C48255) *
              C47900 * C47935 * C1155 -
          (((C26935 + C26936) * C47871 + (C26937 + C26938) * C1160) * C48255 +
           ((C16336 * C317 + C48253 * C331 + C16335 * C307 + C16331 * C326) *
                C47871 +
            (C16336 * C301 + C48253 * C316 + C16335 * C297 + C16331 * C308) *
                C1160) *
               C10513) *
              C47900 * C47935 * C1156 +
          (((C16335 * C301 + C16331 * C316 + C16336 * C1163 + C48253 * C1172) *
                C1160 +
            (C16335 * C317 + C16331 * C331 + C16336 * C1171 + C48253 * C1181) *
                C47871) *
               C10513 +
           ((C16335 * C1300 + C16331 * C1315 + C16336 * C1713 +
             C48253 * C1716) *
                C1160 +
            (C16335 * C1314 + C16331 * C1327 + C16336 * C1717 +
             C48253 * C1722) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1157 -
          (((C16336 * C6594 + C48253 * C6597 + C16335 * C1717 +
             C16331 * C1722) *
                C47871 +
            (C16336 * C6591 + C48253 * C6593 + C16335 * C1713 +
             C16331 * C1716) *
                C1160) *
               C48255 +
           ((C16336 * C1174 + C48253 * C1182 + C16335 * C1171 +
             C16331 * C1181) *
                C47871 +
            (C16336 * C1164 + C48253 * C1173 + C16335 * C1163 +
             C16331 * C1172) *
                C1160) *
               C10513) *
              C47900 * C47935 * C1158 +
          (((C16335 * C1164 + C16331 * C1173 + C16336 * C5951 +
             C48253 * C5953) *
                C1160 +
            (C16335 * C1174 + C16331 * C1182 + C16336 * C5954 +
             C48253 * C5957) *
                C47871) *
               C10513 +
           ((C16335 * C6591 + C16331 * C6593 + C16336 * C23206 +
             C48253 * C23207) *
                C1160 +
            (C16335 * C6594 + C16331 * C6597 + C16336 * C23208 +
             C48253 * C23209) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46996 +
             (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
             C169 * C47884 + C170 * C47002 + C171 * C2901) *
                C31728 +
            (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C48255) *
               C16333 +
           ((C168 * C46996 + C169 * C47876 - C170 * C46992 - C171 * C47884 +
             C172 * C47002 + C173 * C2901) *
                C31728 +
            (C14006 + C14007 - C14008 - C14009 + C14010 + C14011) * C48255) *
               C48232) *
              C47935 * C47978 +
          (((C361 * C46992 -
             ((C113 * C307 + C48121 * C326) * C47876 +
              (C113 * C297 + C48121 * C308) * C46996) +
             C362 * C47884 - C363 * C47002 - C364 * C2901) *
                C31728 +
            (C14012 - (C14013 + C14014) + C14015 - C14016 - C14017) * C48255) *
               C16333 +
           ((C363 * C46992 - (C362 * C47876 + C361 * C46996) + C364 * C47884 -
             C365 * C47002 - C366 * C2901) *
                C31728 +
            (C14018 - (C14019 + C14020) + C14021 - C14022 - C14023) * C48255) *
               C48232) *
              C47935 * C47985 +
          ((((C113 * C301 + C48121 * C316) * C46996 +
             (C113 * C317 + C48121 * C331) * C47876 - C367 * C46992 -
             C368 * C47884 + C369 * C47002 + C370 * C2901) *
                C31728 +
            (C11740 * C46996 + C11741 * C47876 - C1612 * C46992 -
             C1613 * C47884 + C1614 * C47002 + C1615 * C2901) *
                C48255) *
               C16333 +
           ((C367 * C46996 + C368 * C47876 - C369 * C46992 - C370 * C47884 +
             C371 * C47002 + C372 * C2901) *
                C31728 +
            (C1612 * C46996 + C1613 * C47876 - C1614 * C46992 - C1615 * C47884 +
             (C113 * C1599 + C48121 * C1600) * C47002 +
             (C113 * C1601 + C48121 * C1602) * C2901) *
                C48255) *
               C48232) *
              C47935 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C2641 +
              (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
              C169 * C47881) *
                 C31728 +
             (C13628 + C13629 - C13630 - C13631) * C48255) *
                C16333 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                 C31728 +
             (C13632 + C13633 - C13634 - C13635) * C48255) *
                C48232) *
               C48204 +
           (((C13630 - (C13629 + C13628) + C13631) * C31728 +
             (C13636 - (C13637 + C13638) + C13639) * C48255) *
                C16333 +
            ((C13634 - (C13633 + C13632) + C13635) * C31728 +
             (C13640 - (C13641 + C13642) + C13643) * C48255) *
                C48232) *
               C48022) *
              C47978 +
          ((((C361 * C2642 -
              ((C113 * C307 + C48121 * C326) * C2635 +
               (C113 * C297 + C48121 * C308) * C2641) +
              C362 * C47881) *
                 C31728 +
             (C13644 - (C13645 + C13646) + C13647) * C48255) *
                C16333 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                 C31728 +
             (C13648 - (C13649 + C13650) + C13651) * C48255) *
                C48232) *
               C48204 +
           (((C13646 + C13645 - C13644 - C13647) * C31728 +
             (C13652 + C13653 - C13654 - C13655) * C48255) *
                C16333 +
            ((C13650 + C13649 - C13648 - C13651) * C31728 +
             (C13656 + C13657 - C13658 - C13659) * C48255) *
                C48232) *
               C48022) *
              C47985 +
          (((((C113 * C301 + C48121 * C316) * C2641 +
              (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
              C368 * C47881) *
                 C31728 +
             (C14218 + C14219 - C14220 - C14221) * C48255) *
                C16333 +
            ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                 C31728 +
             (C14222 + C14223 - C14224 - C14225) * C48255) *
                C48232) *
               C48204 +
           (((C14220 - (C14219 + C14218) + C14221) * C31728 +
             (C11743 * C2642 - (C11744 * C2635 + C11745 * C2641) +
              C11742 * C47881) *
                 C48255) *
                C16333 +
            ((C14224 - (C14223 + C14222) + C14225) * C31728 +
             ((C113 * C1303 + C48121 * C1320) * C2642 -
              (C11742 * C2635 + C11743 * C2641) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C31728 +
            (C13628 + C13629 - C13630 - C13631) * C48255) *
               C16333 +
           ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C31728 +
            (C13632 + C13633 - C13634 - C13635) * C48255) *
               C48232) *
              C47935 * C48281 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C31728 +
            (C13644 - (C13645 + C13646) + C13647) * C48255) *
               C16333 +
           ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                C31728 +
            (C13648 - (C13649 + C13650) + C13651) * C48255) *
               C48232) *
              C47935 * C48277 +
          ((((C113 * C301 + C48121 * C316) * C2641 +
             (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
             C368 * C47881) *
                C31728 +
            (C14218 + C14219 - C14220 - C14221) * C48255) *
               C16333 +
           ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                C31728 +
            (C14222 + C14223 - C14224 - C14225) * C48255) *
               C48232) *
              C47935 * C48267 +
          (((C1450 * C2642 -
             ((C113 * C1171 + C48121 * C1181) * C2635 +
              (C113 * C1163 + C48121 * C1172) * C2641) +
             C1451 * C47881) *
                C31728 +
            (C11888 * C2642 - (C12245 * C2635 + C12244 * C2641) +
             C11889 * C47881) *
                C48255) *
               C16333 +
           ((C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C47881) *
                C31728 +
            ((C113 * C1715 + C48121 * C1720) * C2642 -
             (C11889 * C2635 + C11888 * C2641) +
             (C113 * C1721 + C48121 * C1724) * C47881) *
                C48255) *
               C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2533 +
             (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
             C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
             C173 * C48239) *
                C31728 +
            (C14356 + C14357 - C14358 - C14359 + C14360 + C14361 - C14362 -
             C14363) *
                C48255) *
               C16333 +
           ((C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
             C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
                C31728 +
            (C14364 + C14365 - C14366 - C14367 + C14368 + C14369 - C14370 -
             C14371) *
                C48255) *
               C48232) *
              C47935 * C2531 +
          (((C361 * C2534 -
             ((C113 * C307 + C48121 * C326) * C48280 +
              (C113 * C297 + C48121 * C308) * C2533) +
             C362 * C48273 - C363 * C2535 - C364 * C48260 + C365 * C2536 +
             C366 * C48239) *
                C31728 +
            (C968 * C2534 - (C11328 * C48280 + C11329 * C2533) + C969 * C48273 -
             C970 * C2535 - C971 * C48260 + C972 * C2536 + C973 * C48239) *
                C48255) *
               C16333 +
           ((C363 * C2534 - (C362 * C48280 + C361 * C2533) + C364 * C48273 -
             C365 * C2535 - C366 * C48260 + C678 * C2536 + C679 * C48239) *
                C31728 +
            (C970 * C2534 - (C969 * C48280 + C968 * C2533) + C971 * C48273 -
             C972 * C2535 - C973 * C48260 +
             (C113 * C939 + C48121 * C948) * C2536 +
             (C113 * C949 + C48121 * C954) * C48239) *
                C48255) *
               C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C2641 +
              (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
              C169 * C47881) *
                 C31728 +
             (C13628 + C13629 - C13630 - C13631) * C48255) *
                C16333 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                 C31728 +
             (C13632 + C13633 - C13634 - C13635) * C48255) *
                C48232) *
               C48275 +
           (((C13630 - (C13629 + C13628) + C13631) * C31728 +
             (C13636 - (C13637 + C13638) + C13639) * C48255) *
                C16333 +
            ((C13634 - (C13633 + C13632) + C13635) * C31728 +
             (C13640 - (C13641 + C13642) + C13643) * C48255) *
                C48232) *
               C48264 +
           (((C13638 + C13637 - C13636 - C13639) * C31728 +
             (C14696 + C14697 - C14698 - C14699) * C48255) *
                C16333 +
            ((C13642 + C13641 - C13640 - C13643) * C31728 +
             (C14700 + C14701 - C14702 - C14703) * C48255) *
                C48232) *
               C48238) *
              C2531 +
          ((((C361 * C2642 -
              ((C113 * C307 + C48121 * C326) * C2635 +
               (C113 * C297 + C48121 * C308) * C2641) +
              C362 * C47881) *
                 C31728 +
             (C13644 - (C13645 + C13646) + C13647) * C48255) *
                C16333 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                 C31728 +
             (C13648 - (C13649 + C13650) + C13651) * C48255) *
                C48232) *
               C48275 +
           (((C13646 + C13645 - C13644 - C13647) * C31728 +
             (C13652 + C13653 - C13654 - C13655) * C48255) *
                C16333 +
            ((C13650 + C13649 - C13648 - C13651) * C31728 +
             (C13656 + C13657 - C13658 - C13659) * C48255) *
                C48232) *
               C48264 +
           (((C13654 - (C13653 + C13652) + C13655) * C31728 +
             (C12894 * C2642 - (C13170 * C2635 + C13171 * C2641) +
              C12895 * C47881) *
                 C48255) *
                C16333 +
            ((C13658 - (C13657 + C13656) + C13659) * C31728 +
             ((C113 * C2419 + C48121 * C2424) * C2642 -
              (C12895 * C2635 + C12894 * C2641) +
              (C113 * C2425 + C48121 * C2428) * C47881) *
                 C48255) *
                C48232) *
               C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46996 +
              (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
              C169 * C47884 + C170 * C47002 + C171 * C2901) *
                 C31728 +
             (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C48255) *
                C16333 +
            ((C168 * C46996 + C169 * C47876 - C170 * C46992 - C171 * C47884 +
              C172 * C47002 + C173 * C2901) *
                 C31728 +
             (C14006 + C14007 - C14008 - C14009 + C14010 + C14011) * C48255) *
                C48232) *
               C48204 +
           (((C14002 - (C14001 + C14000) + C14003 - C14004 - C14005) * C31728 +
             (C15044 - (C15045 + C15046) + C15047 - C15048 - C15049) * C48255) *
                C16333 +
            ((C14008 - (C14007 + C14006) + C14009 - C14010 - C14011) * C31728 +
             (C15050 - (C15051 + C15052) + C15053 - C15054 - C15055) * C48255) *
                C48232) *
               C48022) *
              C2531 +
          ((((C361 * C46992 -
              ((C113 * C307 + C48121 * C326) * C47876 +
               (C113 * C297 + C48121 * C308) * C46996) +
              C362 * C47884 - C363 * C47002 - C364 * C2901) *
                 C31728 +
             (C14012 - (C14013 + C14014) + C14015 - C14016 - C14017) * C48255) *
                C16333 +
            ((C363 * C46992 - (C362 * C47876 + C361 * C46996) + C364 * C47884 -
              C365 * C47002 - C366 * C2901) *
                 C31728 +
             (C14018 - (C14019 + C14020) + C14021 - C14022 - C14023) * C48255) *
                C48232) *
               C48204 +
           (((C14014 + C14013 - C14012 - C14015 + C14016 + C14017) * C31728 +
             (C11738 * C46996 + C11739 * C47876 - C2198 * C46992 -
              C2199 * C47884 + C2200 * C47002 + C2201 * C2901) *
                 C48255) *
                C16333 +
            ((C14020 + C14019 - C14018 - C14021 + C14022 + C14023) * C31728 +
             (C2198 * C46996 + C2199 * C47876 - C2200 * C46992 -
              C2201 * C47884 + (C113 * C2185 + C48121 * C2186) * C47002 +
              (C113 * C2187 + C48121 * C2188) * C2901) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2533 +
             (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
             C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
             C173 * C48239) *
                C31728 +
            (C14356 + C14357 - C14358 - C14359 + C14360 + C14361 - C14362 -
             C14363) *
                C48255) *
               C16333 +
           ((C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
             C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
                C31728 +
            (C14364 + C14365 - C14366 - C14367 + C14368 + C14369 - C14370 -
             C14371) *
                C48255) *
               C48232) *
              C47935 * C2531 +
          (((C361 * C2534 -
             ((C113 * C307 + C48121 * C326) * C48280 +
              (C113 * C297 + C48121 * C308) * C2533) +
             C362 * C48273 - C363 * C2535 - C364 * C48260 + C365 * C2536 +
             C366 * C48239) *
                C31728 +
            (C968 * C2534 - (C11328 * C48280 + C11329 * C2533) + C969 * C48273 -
             C970 * C2535 - C971 * C48260 + C972 * C2536 + C973 * C48239) *
                C48255) *
               C16333 +
           ((C363 * C2534 - (C362 * C48280 + C361 * C2533) + C364 * C48273 -
             C365 * C2535 - C366 * C48260 + C678 * C2536 + C679 * C48239) *
                C31728 +
            (C970 * C2534 - (C969 * C48280 + C968 * C2533) + C971 * C48273 -
             C972 * C2535 - C973 * C48260 +
             (C113 * C939 + C48121 * C948) * C2536 +
             (C113 * C949 + C48121 * C954) * C48239) *
                C48255) *
               C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C31728 +
            (C13628 + C13629 - C13630 - C13631) * C48255) *
               C16333 +
           ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C31728 +
            (C13632 + C13633 - C13634 - C13635) * C48255) *
               C48232) *
              C47935 * C48281 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C31728 +
            (C13644 - (C13645 + C13646) + C13647) * C48255) *
               C16333 +
           ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                C31728 +
            (C13648 - (C13649 + C13650) + C13651) * C48255) *
               C48232) *
              C47935 * C48277 +
          ((((C113 * C301 + C48121 * C316) * C2641 +
             (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
             C368 * C47881) *
                C31728 +
            (C14218 + C14219 - C14220 - C14221) * C48255) *
               C16333 +
           ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                C31728 +
            (C14222 + C14223 - C14224 - C14225) * C48255) *
               C48232) *
              C47935 * C48267 +
          (((C1450 * C2642 -
             ((C113 * C1171 + C48121 * C1181) * C2635 +
              (C113 * C1163 + C48121 * C1172) * C2641) +
             C1451 * C47881) *
                C31728 +
            (C11888 * C2642 - (C12245 * C2635 + C12244 * C2641) +
             C11889 * C47881) *
                C48255) *
               C16333 +
           ((C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C47881) *
                C31728 +
            ((C113 * C1715 + C48121 * C1720) * C2642 -
             (C11889 * C2635 + C11888 * C2641) +
             (C113 * C1721 + C48121 * C1724) * C47881) *
                C48255) *
               C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46986 +
              (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
              C169 * C47881) *
                 C31728 +
             (C12084 + C12085 - C12086 - C12087) * C48255) *
                C16333 +
            ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                 C31728 +
             (C12088 + C12089 - C12090 - C12091) * C48255) *
                C48232) *
               C3298 +
           (((C12086 - (C12085 + C12084) + C12087) * C31728 +
             (C12874 - (C12875 + C12876) + C12877) * C48255) *
                C16333 +
            ((C12090 - (C12089 + C12088) + C12091) * C31728 +
             (C12878 - (C12879 + C12880) + C12881) * C48255) *
                C48232) *
               C48022) *
              C47978 +
          ((((C361 * C46967 -
              ((C113 * C307 + C48121 * C326) * C48186 +
               (C113 * C297 + C48121 * C308) * C46986) +
              C362 * C47881) *
                 C31728 +
             (C12092 - (C12093 + C12094) + C12095) * C48255) *
                C16333 +
            ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                 C31728 +
             (C12096 - (C12097 + C12098) + C12099) * C48255) *
                C48232) *
               C3298 +
           (((C12094 + C12093 - C12092 - C12095) * C31728 +
             (C12882 + C12883 - C12884 - C12885) * C48255) *
                C16333 +
            ((C12098 + C12097 - C12096 - C12099) * C31728 +
             (C12886 + C12887 - C12888 - C12889) * C48255) *
                C48232) *
               C48022) *
              C47985 +
          (((((C113 * C301 + C48121 * C316) * C46986 +
              (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
              C368 * C47881) *
                 C31728 +
             (C12100 + C12101 - C12102 - C12103) * C48255) *
                C16333 +
            ((C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                 C31728 +
             (C12104 + C12105 - C12106 - C12107) * C48255) *
                C48232) *
               C3298 +
           (((C12102 - (C12101 + C12100) + C12103) * C31728 +
             (C11743 * C46967 - (C11744 * C48186 + C11745 * C46986) +
              C11742 * C47881) *
                 C48255) *
                C16333 +
            ((C12106 - (C12105 + C12104) + C12107) * C31728 +
             ((C113 * C1303 + C48121 * C1320) * C46967 -
              (C11742 * C48186 + C11743 * C46986) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48018 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C48025 +
           (((C11713 + C11712) * C31728 + (C12674 + C12675) * C48255) * C16333 +
            ((C11711 + C11710) * C31728 + (C12658 + C12659) * C48255) *
                C48232) *
               C3806) *
              C47978 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C48025 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C48018 -
           (((C13164 + C13165) * C48255 + (C11723 + C11722) * C31728) * C48232 +
            ((C13172 + C13173) * C48255 + (C11747 + C11746) * C31728) *
                C16333) *
               C3806) *
              C47985 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C31728 +
             (C11748 + C11749) * C48255) *
                C16333 +
            ((C367 * C1160 + C368 * C47871) * C31728 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C48018 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C31728) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C31728) *
                C16333) *
               C48025 +
           (((C11753 + C11752) * C31728 +
             ((C113 * C7459 + C48121 * C7461) * C1160 +
              (C113 * C7462 + C48121 * C7465) * C47871) *
                 C48255) *
                C16333 +
            ((C11751 + C11750) * C31728 +
             ((C113 * C7460 + C48121 * C7463) * C1160 +
              (C113 * C7464 + C48121 * C7466) * C47871) *
                 C48255) *
                C48232) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C3298 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C48022) *
              C48281 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C48022 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C3298) *
              C48277 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C31728 +
             (C11748 + C11749) * C48255) *
                C16333 +
            ((C367 * C1160 + C368 * C47871) * C31728 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C3298 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C31728) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C31728) *
                C16333) *
               C48022) *
              C48267 +
          ((((C12246 + C12247) * C31728 +
             ((C113 * C6105 + C48121 * C6107) * C1160 +
              (C113 * C6108 + C48121 * C6111) * C47871) *
                 C48255) *
                C16333 +
            ((C12242 + C12243) * C31728 +
             ((C113 * C6106 + C48121 * C6109) * C1160 +
              (C113 * C6110 + C48121 * C6112) * C47871) *
                 C48255) *
                C48232) *
               C48022 -
           (((C12243 + C12242) * C48255 +
             (C1451 * C47871 + C1450 * C1160) * C31728) *
                C48232 +
            ((C12247 + C12246) * C48255 +
             ((C113 * C1171 + C48121 * C1181) * C47871 +
              (C113 * C1163 + C48121 * C1172) * C1160) *
                 C31728) *
                C16333) *
               C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1089 +
              (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
              C169 * C48258 + C170 * C1091 + C171 * C48227) *
                 C31728 +
             (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
                C16333 +
            ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
              C172 * C1091 + C173 * C48227) *
                 C31728 +
             (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
                C48232) *
               C3298 +
           (((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C31728 +
             (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C48255) *
                C16333 +
            ((C12402 - (C12401 + C12400) + C12403 - C12404 - C12405) * C31728 +
             (C12412 - (C12413 + C12414) + C12415 - C12416 - C12417) * C48255) *
                C48232) *
               C48022) *
              C2531 +
          ((((C361 * C1090 -
              ((C113 * C307 + C48121 * C326) * C48271 +
               (C113 * C297 + C48121 * C308) * C1089) +
              C362 * C48258 - C363 * C1091 - C364 * C48227) *
                 C31728 +
             (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C48255) *
                C16333 +
            ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
              C365 * C1091 - C366 * C48227) *
                 C31728 +
             (C15450 - (C15451 + C15452) + C15453 - C15454 - C15455) * C48255) *
                C48232) *
               C3298 +
           (((C15446 + C15445 - C15444 - C15447 + C15448 + C15449) * C31728 +
             (C11738 * C1089 + C11739 * C48271 - C2198 * C1090 -
              C2199 * C48258 + C2200 * C1091 + C2201 * C48227) *
                 C48255) *
                C16333 +
            ((C15452 + C15451 - C15450 - C15453 + C15454 + C15455) * C31728 +
             (C2198 * C1089 + C2199 * C48271 - C2200 * C1090 - C2201 * C48258 +
              (C113 * C2185 + C48121 * C2186) * C1091 +
              (C113 * C2187 + C48121 * C2188) * C48227) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48282 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C48279 +
           (((C11713 + C11712) * C31728 + (C12674 + C12675) * C48255) * C16333 +
            ((C11711 + C11710) * C31728 + (C12658 + C12659) * C48255) *
                C48232) *
               C48270 -
           (((C12676 + C12677) * C48255 + (C12659 + C12658) * C31728) * C48232 +
            ((C12678 + C12679) * C48255 + (C12675 + C12674) * C31728) *
                C16333) *
               C48251) *
              C2531 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C48279 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C48282 -
           (((C13164 + C13165) * C48255 + (C11723 + C11722) * C31728) * C48232 +
            ((C13172 + C13173) * C48255 + (C11747 + C11746) * C31728) *
                C16333) *
               C48270 +
           (((C13173 + C13172) * C31728 +
             ((C113 * C6973 + C48121 * C6975) * C1160 +
              (C113 * C6976 + C48121 * C6979) * C47871) *
                 C48255) *
                C16333 +
            ((C13165 + C13164) * C31728 +
             ((C113 * C6974 + C48121 * C6977) * C1160 +
              (C113 * C6978 + C48121 * C6980) * C47871) *
                 C48255) *
                C48232) *
               C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46986 +
              (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
              C169 * C47881) *
                 C31728 +
             (C12084 + C12085 - C12086 - C12087) * C48255) *
                C16333 +
            ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                 C31728 +
             (C12088 + C12089 - C12090 - C12091) * C48255) *
                C48232) *
               C48018 +
           (((C12086 - (C12085 + C12084) + C12087) * C31728 +
             (C12874 - (C12875 + C12876) + C12877) * C48255) *
                C16333 +
            ((C12090 - (C12089 + C12088) + C12091) * C31728 +
             (C12878 - (C12879 + C12880) + C12881) * C48255) *
                C48232) *
               C48025 +
           (((C12876 + C12875 - C12874 - C12877) * C31728 +
             (C13026 + C13027 - C13028 - C13029) * C48255) *
                C16333 +
            ((C12880 + C12879 - C12878 - C12881) * C31728 +
             (C13030 + C13031 - C13032 - C13033) * C48255) *
                C48232) *
               C3806) *
              C2531 +
          ((((C361 * C46967 -
              ((C113 * C307 + C48121 * C326) * C48186 +
               (C113 * C297 + C48121 * C308) * C46986) +
              C362 * C47881) *
                 C31728 +
             (C12092 - (C12093 + C12094) + C12095) * C48255) *
                C16333 +
            ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                 C31728 +
             (C12096 - (C12097 + C12098) + C12099) * C48255) *
                C48232) *
               C48018 +
           (((C12094 + C12093 - C12092 - C12095) * C31728 +
             (C12882 + C12883 - C12884 - C12885) * C48255) *
                C16333 +
            ((C12098 + C12097 - C12096 - C12099) * C31728 +
             (C12886 + C12887 - C12888 - C12889) * C48255) *
                C48232) *
               C48025 +
           (((C12884 - (C12883 + C12882) + C12885) * C31728 +
             (C12894 * C46967 - (C13170 * C48186 + C13171 * C46986) +
              C12895 * C47881) *
                 C48255) *
                C16333 +
            ((C12888 - (C12887 + C12886) + C12889) * C31728 +
             ((C113 * C2419 + C48121 * C2424) * C46967 -
              (C12895 * C48186 + C12894 * C46986) +
              (C113 * C2425 + C48121 * C2428) * C47881) *
                 C48255) *
                C48232) *
               C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1089 +
              (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
              C169 * C48258 + C170 * C1091 + C171 * C48227) *
                 C31728 +
             (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
                C16333 +
            ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
              C172 * C1091 + C173 * C48227) *
                 C31728 +
             (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
                C48232) *
               C3298 +
           (((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C31728 +
             (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C48255) *
                C16333 +
            ((C12402 - (C12401 + C12400) + C12403 - C12404 - C12405) * C31728 +
             (C12412 - (C12413 + C12414) + C12415 - C12416 - C12417) * C48255) *
                C48232) *
               C48022) *
              C2531 +
          ((((C361 * C1090 -
              ((C113 * C307 + C48121 * C326) * C48271 +
               (C113 * C297 + C48121 * C308) * C1089) +
              C362 * C48258 - C363 * C1091 - C364 * C48227) *
                 C31728 +
             (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C48255) *
                C16333 +
            ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
              C365 * C1091 - C366 * C48227) *
                 C31728 +
             (C15450 - (C15451 + C15452) + C15453 - C15454 - C15455) * C48255) *
                C48232) *
               C3298 +
           (((C15446 + C15445 - C15444 - C15447 + C15448 + C15449) * C31728 +
             (C11738 * C1089 + C11739 * C48271 - C2198 * C1090 -
              C2199 * C48258 + C2200 * C1091 + C2201 * C48227) *
                 C48255) *
                C16333 +
            ((C15452 + C15451 - C15450 - C15453 + C15454 + C15455) * C31728 +
             (C2198 * C1089 + C2199 * C48271 - C2200 * C1090 - C2201 * C48258 +
              (C113 * C2185 + C48121 * C2186) * C1091 +
              (C113 * C2187 + C48121 * C2188) * C48227) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C3298 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C48022) *
              C48281 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C48022 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C3298) *
              C48277 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C31728 +
             (C11748 + C11749) * C48255) *
                C16333 +
            ((C367 * C1160 + C368 * C47871) * C31728 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C3298 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C31728) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C31728) *
                C16333) *
               C48022) *
              C48267 +
          ((((C12246 + C12247) * C31728 +
             ((C113 * C6105 + C48121 * C6107) * C1160 +
              (C113 * C6108 + C48121 * C6111) * C47871) *
                 C48255) *
                C16333 +
            ((C12242 + C12243) * C31728 +
             ((C113 * C6106 + C48121 * C6109) * C1160 +
              (C113 * C6110 + C48121 * C6112) * C47871) *
                 C48255) *
                C48232) *
               C48022 -
           (((C12243 + C12242) * C48255 +
             (C1451 * C47871 + C1450 * C1160) * C31728) *
                C48232 +
            ((C12247 + C12246) * C48255 +
             ((C113 * C1171 + C48121 * C1181) * C47871 +
              (C113 * C1163 + C48121 * C1172) * C1160) *
                 C31728) *
                C16333) *
               C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C31728 +
            (C12084 + C12085 - C12086 - C12087) * C48255) *
               C16333 +
           ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C31728 +
            (C12088 + C12089 - C12090 - C12091) * C48255) *
               C48232) *
              C47935 * C1431 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C31728 +
            (C12092 - (C12093 + C12094) + C12095) * C48255) *
               C16333 +
           ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                C31728 +
            (C12096 - (C12097 + C12098) + C12099) * C48255) *
               C48232) *
              C47935 * C1432 +
          ((((C113 * C301 + C48121 * C316) * C46986 +
             (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
             C368 * C47881) *
                C31728 +
            (C12100 + C12101 - C12102 - C12103) * C48255) *
               C16333 +
           ((C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                C31728 +
            (C12104 + C12105 - C12106 - C12107) * C48255) *
               C48232) *
              C47935 * C1433 +
          (((C1450 * C46967 -
             ((C113 * C1171 + C48121 * C1181) * C48186 +
              (C113 * C1163 + C48121 * C1172) * C46986) +
             C1451 * C47881) *
                C31728 +
            (C11888 * C46967 - (C12245 * C48186 + C12244 * C46986) +
             C11889 * C47881) *
                C48255) *
               C16333 +
           ((C1452 * C46967 - (C1451 * C48186 + C1450 * C46986) +
             C1453 * C47881) *
                C31728 +
            ((C113 * C1715 + C48121 * C1720) * C46967 -
             (C11889 * C48186 + C11888 * C46986) +
             (C113 * C1721 + C48121 * C1724) * C47881) *
                C48255) *
               C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C665 +
             (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
                C31728 +
            (C11104 + C11105 - C11106 - C11107 + C11108 + C11109 - C11110 -
             C11111) *
                C48255) *
               C16333 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
                C31728 +
            (C11112 + C11113 - C11114 - C11115 + C11116 + C11117 - C11118 -
             C11119) *
                C48255) *
               C48232) *
              C47935 * C48203 +
          (((C361 * C666 -
             ((C113 * C307 + C48121 * C326) * C659 +
              (C113 * C297 + C48121 * C308) * C665) +
             C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
             C366 * C48239) *
                C31728 +
            (C968 * C666 - (C11328 * C659 + C11329 * C665) + C969 * C660 -
             C970 * C667 - C971 * C661 + C972 * C668 + C973 * C48239) *
                C48255) *
               C16333 +
           ((C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
             C365 * C667 - C366 * C661 + C678 * C668 + C679 * C48239) *
                C31728 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C48121 * C948) * C668 +
             (C113 * C949 + C48121 * C954) * C48239) *
                C48255) *
               C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46986 +
              (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
              C169 * C47881) *
                 C31728 +
             (C12084 + C12085 - C12086 - C12087) * C48255) *
                C16333 +
            ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                 C31728 +
             (C12088 + C12089 - C12090 - C12091) * C48255) *
                C48232) *
               C1835 +
           (((C12086 - (C12085 + C12084) + C12087) * C31728 +
             (C12874 - (C12875 + C12876) + C12877) * C48255) *
                C16333 +
            ((C12090 - (C12089 + C12088) + C12091) * C31728 +
             (C12878 - (C12879 + C12880) + C12881) * C48255) *
                C48232) *
               C1836 +
           (((C12876 + C12875 - C12874 - C12877) * C31728 +
             (C13026 + C13027 - C13028 - C13029) * C48255) *
                C16333 +
            ((C12880 + C12879 - C12878 - C12881) * C31728 +
             (C13030 + C13031 - C13032 - C13033) * C48255) *
                C48232) *
               C48238) *
              C48203 +
          ((((C361 * C46967 -
              ((C113 * C307 + C48121 * C326) * C48186 +
               (C113 * C297 + C48121 * C308) * C46986) +
              C362 * C47881) *
                 C31728 +
             (C12092 - (C12093 + C12094) + C12095) * C48255) *
                C16333 +
            ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                 C31728 +
             (C12096 - (C12097 + C12098) + C12099) * C48255) *
                C48232) *
               C1835 +
           (((C12094 + C12093 - C12092 - C12095) * C31728 +
             (C12882 + C12883 - C12884 - C12885) * C48255) *
                C16333 +
            ((C12098 + C12097 - C12096 - C12099) * C31728 +
             (C12886 + C12887 - C12888 - C12889) * C48255) *
                C48232) *
               C1836 +
           (((C12884 - (C12883 + C12882) + C12885) * C31728 +
             (C12894 * C46967 - (C13170 * C48186 + C13171 * C46986) +
              C12895 * C47881) *
                 C48255) *
                C16333 +
            ((C12888 - (C12887 + C12886) + C12889) * C31728 +
             ((C113 * C2419 + C48121 * C2424) * C46967 -
              (C12895 * C48186 + C12894 * C46986) +
              (C113 * C2425 + C48121 * C2428) * C47881) *
                 C48255) *
                C48232) *
               C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48204 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C48022) *
              C1431 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C48022 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C48204) *
              C1432 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C31728 +
             (C11748 + C11749) * C48255) *
                C16333 +
            ((C367 * C1160 + C368 * C47871) * C31728 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C48204 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C31728) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C31728) *
                C16333) *
               C48022) *
              C1433 +
          ((((C12246 + C12247) * C31728 +
             ((C113 * C6105 + C48121 * C6107) * C1160 +
              (C113 * C6108 + C48121 * C6111) * C47871) *
                 C48255) *
                C16333 +
            ((C12242 + C12243) * C31728 +
             ((C113 * C6106 + C48121 * C6109) * C1160 +
              (C113 * C6110 + C48121 * C6112) * C47871) *
                 C48255) *
                C48232) *
               C48022 -
           (((C12243 + C12242) * C48255 +
             (C1451 * C47871 + C1450 * C1160) * C31728) *
                C48232 +
            ((C12247 + C12246) * C48255 +
             ((C113 * C1171 + C48121 * C1181) * C47871 +
              (C113 * C1163 + C48121 * C1172) * C1160) *
                 C31728) *
                C16333) *
               C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C293 +
              (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C48227) *
                 C31728 +
             (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
                C16333 +
            ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C48227) *
                 C31728 +
             (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
                C48232) *
               C48204 +
           (((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C31728 +
             (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C48255) *
                C16333 +
            ((C10818 - (C10817 + C10816) + C10819 - C10820 - C10821) * C31728 +
             (C10830 - (C10831 + C10832) + C10833 - C10834 - C10835) * C48255) *
                C48232) *
               C48022) *
              C48203 +
          ((((C361 * C294 -
              ((C113 * C307 + C48121 * C326) * C287 +
               (C113 * C297 + C48121 * C308) * C293) +
              C362 * C288 - C363 * C295 - C364 * C48227) *
                 C31728 +
             (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C48255) *
                C16333 +
            ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
              C365 * C295 - C366 * C48227) *
                 C31728 +
             (C11322 - (C11323 + C11324) + C11325 - C11326 - C11327) * C48255) *
                C48232) *
               C48204 +
           (((C11331 + C11330 - C11314 - C11319 + C11320 + C11321) * C31728 +
             (C11738 * C293 + C11739 * C287 - C2198 * C294 - C2199 * C288 +
              C2200 * C295 + C2201 * C48227) *
                 C48255) *
                C16333 +
            ((C11324 + C11323 - C11322 - C11325 + C11326 + C11327) * C31728 +
             (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
              (C113 * C2185 + C48121 * C2186) * C295 +
              (C113 * C2187 + C48121 * C2188) * C48227) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C2299 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C2300 +
           (((C11713 + C11712) * C31728 + (C12674 + C12675) * C48255) * C16333 +
            ((C11711 + C11710) * C31728 + (C12658 + C12659) * C48255) *
                C48232) *
               C2301 -
           (((C12676 + C12677) * C48255 + (C12659 + C12658) * C31728) * C48232 +
            ((C12678 + C12679) * C48255 + (C12675 + C12674) * C31728) *
                C16333) *
               C48251) *
              C48203 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C2300 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C2299 -
           (((C13164 + C13165) * C48255 + (C11723 + C11722) * C31728) * C48232 +
            ((C13172 + C13173) * C48255 + (C11747 + C11746) * C31728) *
                C16333) *
               C2301 +
           (((C13173 + C13172) * C31728 +
             ((C113 * C6973 + C48121 * C6975) * C1160 +
              (C113 * C6976 + C48121 * C6979) * C47871) *
                 C48255) *
                C16333 +
            ((C13165 + C13164) * C31728 +
             ((C113 * C6974 + C48121 * C6977) * C1160 +
              (C113 * C6978 + C48121 * C6980) * C47871) *
                 C48255) *
                C48232) *
               C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48121 * C126) * C114 +
                (C113 * C127 + C48121 * C140) * C102 - C168 * C115 -
                C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C31728 +
               (C10836 * C114 + C10837 * C102 - C550 * C115 - C551 * C103 +
                C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
                C788 * C118 + C789 * C106) *
                   C48255) *
                  C16333 +
              ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                C176 * C118 + C177 * C106) *
                   C31728 +
               (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
                C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
                (C113 * C779 + C48121 * C780) * C118 +
                (C113 * C781 + C48121 * C782) * C106) *
                   C48255) *
                  C48232) *
             C47935 * C47923 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C48121 * C126) * C293 +
                 (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                 C169 * C288 + C170 * C295 + C171 * C48227) *
                    C31728 +
                (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) *
                    C48255) *
                   C16333 +
               ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                 C172 * C295 + C173 * C48227) *
                    C31728 +
                (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) *
                    C48255) *
                   C48232) *
                  C47935 * C48274 +
              (((C361 * C294 -
                 ((C113 * C307 + C48121 * C326) * C287 +
                  (C113 * C297 + C48121 * C308) * C293) +
                 C362 * C288 - C363 * C295 - C364 * C48227) *
                    C31728 +
                (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) *
                    C48255) *
                   C16333 +
               ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                 C365 * C295 - C366 * C48227) *
                    C31728 +
                (C11322 - (C11323 + C11324) + C11325 - C11326 - C11327) *
                    C48255) *
                   C48232) *
                  C47935 * C48262 +
              ((((C113 * C301 + C48121 * C316) * C293 +
                 (C113 * C317 + C48121 * C331) * C287 - C367 * C294 -
                 C368 * C288 + C369 * C295 + C370 * C48227) *
                    C31728 +
                (C11740 * C293 + C11741 * C287 - C1612 * C294 - C1613 * C288 +
                 C1614 * C295 + C1615 * C48227) *
                    C48255) *
                   C16333 +
               ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                 C371 * C295 + C372 * C48227) *
                    C31728 +
                (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
                 (C113 * C1599 + C48121 * C1600) * C295 +
                 (C113 * C1601 + C48121 * C1602) * C48227) *
                    C48255) *
                   C48232) *
                  C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C31728 +
            (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
               C16333 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48227) *
                C31728 +
            (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
               C48232) *
              C48275 +
          (((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C31728 +
            (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C48255) *
               C16333 +
           ((C10818 - (C10817 + C10816) + C10819 - C10820 - C10821) * C31728 +
            (C10830 - (C10831 + C10832) + C10833 - C10834 - C10835) * C48255) *
               C48232) *
              C48264 +
          (((C10843 + C10842 - C10822 - C10827 + C10828 + C10829) * C31728 +
            (C12668 * C293 + C12669 * C287 - C2316 * C294 - C2317 * C288 +
             C2318 * C295 + C2319 * C48227) *
                C48255) *
               C16333 +
           ((C10832 + C10831 - C10830 - C10833 + C10834 + C10835) * C31728 +
            (C2316 * C293 + C2317 * C287 - C2318 * C294 - C2319 * C288 +
             (C113 * C2303 + C48121 * C2304) * C295 +
             (C113 * C2305 + C48121 * C2306) * C48227) *
                C48255) *
               C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C31728 +
            (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
               C16333 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C31728 +
            (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
               C48232) *
              C47935 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C48121 * C326) * C48271 +
              (C113 * C297 + C48121 * C308) * C1089) +
             C362 * C48258 - C363 * C1091 - C364 * C48227) *
                C31728 +
            (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C48255) *
               C16333 +
           ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
             C365 * C1091 - C366 * C48227) *
                C31728 +
            (C15450 - (C15451 + C15452) + C15453 - C15454 - C15455) * C48255) *
               C48232) *
              C47935 * C1087 +
          ((((C113 * C301 + C48121 * C316) * C1089 +
             (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
             C368 * C48258 + C369 * C1091 + C370 * C48227) *
                C31728 +
            (C11740 * C1089 + C11741 * C48271 - C1612 * C1090 - C1613 * C48258 +
             C1614 * C1091 + C1615 * C48227) *
                C48255) *
               C16333 +
           ((C367 * C1089 + C368 * C48271 - C369 * C1090 - C370 * C48258 +
             C371 * C1091 + C372 * C48227) *
                C31728 +
            (C1612 * C1089 + C1613 * C48271 - C1614 * C1090 - C1615 * C48258 +
             (C113 * C1599 + C48121 * C1600) * C1091 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C31728 +
            (C11706 + C11707) * C48255) *
               C16333 +
           ((C168 * C1160 + C169 * C47871) * C31728 +
            (C11708 + C11709) * C48255) *
               C48232) *
              C47935 * C1155 -
          (((C11721 + C11720) * C48255 +
            (C362 * C47871 + C361 * C1160) * C31728) *
               C48232 +
           ((C11715 + C11714) * C48255 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C31728) *
               C16333) *
              C47935 * C1156 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C31728 +
            (C11748 + C11749) * C48255) *
               C16333 +
           ((C367 * C1160 + C368 * C47871) * C31728 +
            (C11728 + C11729) * C48255) *
               C48232) *
              C47935 * C1157 -
          (((C12243 + C12242) * C48255 +
            (C1451 * C47871 + C1450 * C1160) * C31728) *
               C48232 +
           ((C12247 + C12246) * C48255 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C31728) *
               C16333) *
              C47935 * C1158 +
          ((((C113 * C1164 + C48121 * C1173) * C1160 +
             (C113 * C1174 + C48121 * C1182) * C47871) *
                C31728 +
            ((C113 * C6591 + C48121 * C6593) * C1160 +
             (C113 * C6594 + C48121 * C6597) * C47871) *
                C48255) *
               C16333 +
           (((C113 * C1165 + C48121 * C1175) * C1160 +
             (C113 * C1176 + C48121 * C1183) * C47871) *
                C31728 +
            ((C113 * C6592 + C48121 * C6595) * C1160 +
             (C113 * C6596 + C48121 * C6598) * C47871) *
                C48255) *
               C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48275 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C48264 +
           (((C11713 + C11712) * C31728 + (C12674 + C12675) * C48255) * C16333 +
            ((C11711 + C11710) * C31728 + (C12658 + C12659) * C48255) *
                C48232) *
               C48238) *
              C1086 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C48264 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C48275 -
           (((C13164 + C13165) * C48255 + (C11723 + C11722) * C31728) * C48232 +
            ((C13172 + C13173) * C48255 + (C11747 + C11746) * C31728) *
                C16333) *
               C48238) *
              C1087 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C31728 +
             (C11748 + C11749) * C48255) *
                C16333 +
            ((C367 * C1160 + C368 * C47871) * C31728 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C48275 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C31728) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C31728) *
                C16333) *
               C48264 +
           (((C11753 + C11752) * C31728 +
             ((C113 * C7459 + C48121 * C7461) * C1160 +
              (C113 * C7462 + C48121 * C7465) * C47871) *
                 C48255) *
                C16333 +
            ((C11751 + C11750) * C31728 +
             ((C113 * C7460 + C48121 * C7463) * C1160 +
              (C113 * C7464 + C48121 * C7466) * C47871) *
                 C48255) *
                C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C31728 +
            (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
               C16333 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C31728 +
            (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
               C48232) *
              C1835 +
          (((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C31728 +
            (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C48255) *
               C16333 +
           ((C12402 - (C12401 + C12400) + C12403 - C12404 - C12405) * C31728 +
            (C12412 - (C12413 + C12414) + C12415 - C12416 - C12417) * C48255) *
               C48232) *
              C1836 +
          (((C12408 + C12407 - C12406 - C12409 + C12410 + C12411) * C31728 +
            (C12668 * C1089 + C12669 * C48271 - C2316 * C1090 - C2317 * C48258 +
             C2318 * C1091 + C2319 * C48227) *
                C48255) *
               C16333 +
           ((C12414 + C12413 - C12412 - C12415 + C12416 + C12417) * C31728 +
            (C2316 * C1089 + C2317 * C48271 - C2318 * C1090 - C2319 * C48258 +
             (C113 * C2303 + C48121 * C2304) * C1091 +
             (C113 * C2305 + C48121 * C2306) * C48227) *
                C48255) *
               C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C1835 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C1836 +
           (((C11713 + C11712) * C31728 + (C12674 + C12675) * C48255) * C16333 +
            ((C11711 + C11710) * C31728 + (C12658 + C12659) * C48255) *
                C48232) *
               C48238) *
              C48274 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C1836 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C1835 -
           (((C13164 + C13165) * C48255 + (C11723 + C11722) * C31728) * C48232 +
            ((C13172 + C13173) * C48255 + (C11747 + C11746) * C31728) *
                C16333) *
               C48238) *
              C48262 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C31728 +
             (C11748 + C11749) * C48255) *
                C16333 +
            ((C367 * C1160 + C368 * C47871) * C31728 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C1835 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C31728) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C31728) *
                C16333) *
               C1836 +
           (((C11753 + C11752) * C31728 +
             ((C113 * C7459 + C48121 * C7461) * C1160 +
              (C113 * C7462 + C48121 * C7465) * C47871) *
                 C48255) *
                C16333 +
            ((C11751 + C11750) * C31728 +
             ((C113 * C7460 + C48121 * C7463) * C1160 +
              (C113 * C7464 + C48121 * C7466) * C47871) *
                 C48255) *
                C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C31728 +
            (C11706 + C11707) * C48255) *
               C16333 +
           ((C168 * C1160 + C169 * C47871) * C31728 +
            (C11708 + C11709) * C48255) *
               C48232) *
              C2010 -
          (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
           ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) * C16333) *
              C2011 +
          (((C11713 + C11712) * C31728 + (C12674 + C12675) * C48255) * C16333 +
           ((C11711 + C11710) * C31728 + (C12658 + C12659) * C48255) * C48232) *
              C2012 -
          (((C12676 + C12677) * C48255 + (C12659 + C12658) * C31728) * C48232 +
           ((C12678 + C12679) * C48255 + (C12675 + C12674) * C31728) * C16333) *
              C2013 +
          (((C12679 + C12678) * C31728 +
            ((C113 * C12645 + C48121 * C12647) * C1160 +
             (C113 * C12648 + C48121 * C12651) * C47871) *
                C48255) *
               C16333 +
           ((C12677 + C12676) * C31728 +
            ((C113 * C12646 + C48121 * C12649) * C1160 +
             (C113 * C12650 + C48121 * C12652) * C47871) *
                C48255) *
               C48232) *
              C2014) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46986 +
              (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
              C169 * C47881) *
                 C31728 +
             (C12084 + C12085 - C12086 - C12087) * C48255) *
                C16333 +
            ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                 C31728 +
             (C12088 + C12089 - C12090 - C12091) * C48255) *
                C48232) *
               C48204 +
           (((C12086 - (C12085 + C12084) + C12087) * C31728 +
             (C12874 - (C12875 + C12876) + C12877) * C48255) *
                C16333 +
            ((C12090 - (C12089 + C12088) + C12091) * C31728 +
             (C12878 - (C12879 + C12880) + C12881) * C48255) *
                C48232) *
               C48022) *
              C1086 +
          ((((C361 * C46967 -
              ((C113 * C307 + C48121 * C326) * C48186 +
               (C113 * C297 + C48121 * C308) * C46986) +
              C362 * C47881) *
                 C31728 +
             (C12092 - (C12093 + C12094) + C12095) * C48255) *
                C16333 +
            ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                 C31728 +
             (C12096 - (C12097 + C12098) + C12099) * C48255) *
                C48232) *
               C48204 +
           (((C12094 + C12093 - C12092 - C12095) * C31728 +
             (C12882 + C12883 - C12884 - C12885) * C48255) *
                C16333 +
            ((C12098 + C12097 - C12096 - C12099) * C31728 +
             (C12886 + C12887 - C12888 - C12889) * C48255) *
                C48232) *
               C48022) *
              C1087 +
          (((((C113 * C301 + C48121 * C316) * C46986 +
              (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
              C368 * C47881) *
                 C31728 +
             (C12100 + C12101 - C12102 - C12103) * C48255) *
                C16333 +
            ((C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                 C31728 +
             (C12104 + C12105 - C12106 - C12107) * C48255) *
                C48232) *
               C48204 +
           (((C12102 - (C12101 + C12100) + C12103) * C31728 +
             (C11743 * C46967 - (C11744 * C48186 + C11745 * C46986) +
              C11742 * C47881) *
                 C48255) *
                C16333 +
            ((C12106 - (C12105 + C12104) + C12107) * C31728 +
             ((C113 * C1303 + C48121 * C1320) * C46967 -
              (C11742 * C48186 + C11743 * C46986) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C665 +
             (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
                C31728 +
            (C11104 + C11105 - C11106 - C11107 + C11108 + C11109 - C11110 -
             C11111) *
                C48255) *
               C16333 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
                C31728 +
            (C11112 + C11113 - C11114 - C11115 + C11116 + C11117 - C11118 -
             C11119) *
                C48255) *
               C48232) *
              C48204 +
          (((C11106 - (C11105 + C11104) + C11107 - C11108 - C11109 + C11110 +
             C11111) *
                C31728 +
            (C556 * C666 - (C10838 * C659 + C10839 * C665) + C557 * C660 -
             C558 * C667 - C559 * C661 + C560 * C668 + C561 * C48239) *
                C48255) *
               C16333 +
           ((C11114 - (C11113 + C11112) + C11115 - C11116 - C11117 + C11118 +
             C11119) *
                C31728 +
            (C558 * C666 - (C557 * C659 + C556 * C665) + C559 * C660 -
             C560 * C667 - C561 * C661 + (C113 * C494 + C48121 * C513) * C668 +
             (C113 * C514 + C48121 * C524) * C48239) *
                C48255) *
               C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C31728 +
            (C12084 + C12085 - C12086 - C12087) * C48255) *
               C16333 +
           ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C31728 +
            (C12088 + C12089 - C12090 - C12091) * C48255) *
               C48232) *
              C2299 +
          (((C12086 - (C12085 + C12084) + C12087) * C31728 +
            (C12874 - (C12875 + C12876) + C12877) * C48255) *
               C16333 +
           ((C12090 - (C12089 + C12088) + C12091) * C31728 +
            (C12878 - (C12879 + C12880) + C12881) * C48255) *
               C48232) *
              C2300 +
          (((C12876 + C12875 - C12874 - C12877) * C31728 +
            (C13026 + C13027 - C13028 - C13029) * C48255) *
               C16333 +
           ((C12880 + C12879 - C12878 - C12881) * C31728 +
            (C13030 + C13031 - C13032 - C13033) * C48255) *
               C48232) *
              C2301 +
          (((C13028 - (C13027 + C13026) + C13029) * C31728 +
            (C12671 * C46967 - (C12672 * C48186 + C12673 * C46986) +
             C12670 * C47881) *
                C48255) *
               C16333 +
           ((C13032 - (C13031 + C13030) + C13033) * C31728 +
            ((C113 * C2020 + C48121 * C2031) * C46967 -
             (C12670 * C48186 + C12671 * C46986) +
             (C113 * C2032 + C48121 * C2038) * C47881) *
                C48255) *
               C48232) *
              C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C31728 +
            (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
               C16333 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48227) *
                C31728 +
            (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
               C48232) *
              C47935 * C48274 +
          (((C361 * C294 -
             ((C113 * C307 + C48121 * C326) * C287 +
              (C113 * C297 + C48121 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C48227) *
                C31728 +
            (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C48255) *
               C16333 +
           ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C48227) *
                C31728 +
            (C11322 - (C11323 + C11324) + C11325 - C11326 - C11327) * C48255) *
               C48232) *
              C47935 * C48262 +
          ((((C113 * C301 + C48121 * C316) * C293 +
             (C113 * C317 + C48121 * C331) * C287 - C367 * C294 - C368 * C288 +
             C369 * C295 + C370 * C48227) *
                C31728 +
            (C11740 * C293 + C11741 * C287 - C1612 * C294 - C1613 * C288 +
             C1614 * C295 + C1615 * C48227) *
                C48255) *
               C16333 +
           ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
             C371 * C295 + C372 * C48227) *
                C31728 +
            (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
             (C113 * C1599 + C48121 * C1600) * C295 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C114 +
            (C113 * C127 + C48121 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C31728 +
           (C10836 * C114 + C10837 * C102 - C550 * C115 - C551 * C103 +
            C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
            C788 * C118 + C789 * C106) *
               C48255) *
              C16333 +
          ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C31728 +
           (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
            C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
            (C113 * C779 + C48121 * C780) * C118 +
            (C113 * C781 + C48121 * C782) * C106) *
               C48255) *
              C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C31728 +
            (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
               C16333 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C31728 +
            (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
               C48232) *
              C47935 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C48121 * C326) * C48271 +
              (C113 * C297 + C48121 * C308) * C1089) +
             C362 * C48258 - C363 * C1091 - C364 * C48227) *
                C31728 +
            (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C48255) *
               C16333 +
           ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
             C365 * C1091 - C366 * C48227) *
                C31728 +
            (C15450 - (C15451 + C15452) + C15453 - C15454 - C15455) * C48255) *
               C48232) *
              C47935 * C1087 +
          ((((C113 * C301 + C48121 * C316) * C1089 +
             (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
             C368 * C48258 + C369 * C1091 + C370 * C48227) *
                C31728 +
            (C11740 * C1089 + C11741 * C48271 - C1612 * C1090 - C1613 * C48258 +
             C1614 * C1091 + C1615 * C48227) *
                C48255) *
               C16333 +
           ((C367 * C1089 + C368 * C48271 - C369 * C1090 - C370 * C48258 +
             C371 * C1091 + C372 * C48227) *
                C31728 +
            (C1612 * C1089 + C1613 * C48271 - C1614 * C1090 - C1615 * C48258 +
             (C113 * C1599 + C48121 * C1600) * C1091 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C31728 +
            (C11706 + C11707) * C48255) *
               C16333 +
           ((C168 * C1160 + C169 * C47871) * C31728 +
            (C11708 + C11709) * C48255) *
               C48232) *
              C47935 * C1155 -
          (((C11721 + C11720) * C48255 +
            (C362 * C47871 + C361 * C1160) * C31728) *
               C48232 +
           ((C11715 + C11714) * C48255 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C31728) *
               C16333) *
              C47935 * C1156 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C31728 +
            (C11748 + C11749) * C48255) *
               C16333 +
           ((C367 * C1160 + C368 * C47871) * C31728 +
            (C11728 + C11729) * C48255) *
               C48232) *
              C47935 * C1157 -
          (((C12243 + C12242) * C48255 +
            (C1451 * C47871 + C1450 * C1160) * C31728) *
               C48232 +
           ((C12247 + C12246) * C48255 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C31728) *
               C16333) *
              C47935 * C1158 +
          ((((C113 * C1164 + C48121 * C1173) * C1160 +
             (C113 * C1174 + C48121 * C1182) * C47871) *
                C31728 +
            ((C113 * C6591 + C48121 * C6593) * C1160 +
             (C113 * C6594 + C48121 * C6597) * C47871) *
                C48255) *
               C16333 +
           (((C113 * C1165 + C48121 * C1175) * C1160 +
             (C113 * C1176 + C48121 * C1183) * C47871) *
                C31728 +
            ((C113 * C6592 + C48121 * C6595) * C1160 +
             (C113 * C6596 + C48121 * C6598) * C47871) *
                C48255) *
               C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C31728 +
            (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
               C16333 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C31728 +
            (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
               C48232) *
              C1835 +
          (((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C31728 +
            (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C48255) *
               C16333 +
           ((C12402 - (C12401 + C12400) + C12403 - C12404 - C12405) * C31728 +
            (C12412 - (C12413 + C12414) + C12415 - C12416 - C12417) * C48255) *
               C48232) *
              C1836 +
          (((C12408 + C12407 - C12406 - C12409 + C12410 + C12411) * C31728 +
            (C12668 * C1089 + C12669 * C48271 - C2316 * C1090 - C2317 * C48258 +
             C2318 * C1091 + C2319 * C48227) *
                C48255) *
               C16333 +
           ((C12414 + C12413 - C12412 - C12415 + C12416 + C12417) * C31728 +
            (C2316 * C1089 + C2317 * C48271 - C2318 * C1090 - C2319 * C48258 +
             (C113 * C2303 + C48121 * C2304) * C1091 +
             (C113 * C2305 + C48121 * C2306) * C48227) *
                C48255) *
               C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C1835 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C1836 +
           (((C11713 + C11712) * C31728 + (C12674 + C12675) * C48255) * C16333 +
            ((C11711 + C11710) * C31728 + (C12658 + C12659) * C48255) *
                C48232) *
               C48238) *
              C48274 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C1836 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C1835 -
           (((C13164 + C13165) * C48255 + (C11723 + C11722) * C31728) * C48232 +
            ((C13172 + C13173) * C48255 + (C11747 + C11746) * C31728) *
                C16333) *
               C48238) *
              C48262 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C31728 +
             (C11748 + C11749) * C48255) *
                C16333 +
            ((C367 * C1160 + C368 * C47871) * C31728 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C1835 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C31728) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C31728) *
                C16333) *
               C1836 +
           (((C11753 + C11752) * C31728 +
             ((C113 * C7459 + C48121 * C7461) * C1160 +
              (C113 * C7462 + C48121 * C7465) * C47871) *
                 C48255) *
                C16333 +
            ((C11751 + C11750) * C31728 +
             ((C113 * C7460 + C48121 * C7463) * C1160 +
              (C113 * C7464 + C48121 * C7466) * C47871) *
                 C48255) *
                C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46996 +
              (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
              C169 * C47884 + C170 * C47002 + C171 * C2901) *
                 C31728 +
             (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C48255) *
                C16333 +
            ((C168 * C46996 + C169 * C47876 - C170 * C46992 - C171 * C47884 +
              C172 * C47002 + C173 * C2901) *
                 C31728 +
             (C14006 + C14007 - C14008 - C14009 + C14010 + C14011) * C48255) *
                C48232) *
               C3298 +
           (((C14002 - (C14001 + C14000) + C14003 - C14004 - C14005) * C31728 +
             (C15044 - (C15045 + C15046) + C15047 - C15048 - C15049) * C48255) *
                C16333 +
            ((C14008 - (C14007 + C14006) + C14009 - C14010 - C14011) * C31728 +
             (C15050 - (C15051 + C15052) + C15053 - C15054 - C15055) * C48255) *
                C48232) *
               C48022) *
              C48203 +
          ((((C361 * C46992 -
              ((C113 * C307 + C48121 * C326) * C47876 +
               (C113 * C297 + C48121 * C308) * C46996) +
              C362 * C47884 - C363 * C47002 - C364 * C2901) *
                 C31728 +
             (C14012 - (C14013 + C14014) + C14015 - C14016 - C14017) * C48255) *
                C16333 +
            ((C363 * C46992 - (C362 * C47876 + C361 * C46996) + C364 * C47884 -
              C365 * C47002 - C366 * C2901) *
                 C31728 +
             (C14018 - (C14019 + C14020) + C14021 - C14022 - C14023) * C48255) *
                C48232) *
               C3298 +
           (((C14014 + C14013 - C14012 - C14015 + C14016 + C14017) * C31728 +
             (C11738 * C46996 + C11739 * C47876 - C2198 * C46992 -
              C2199 * C47884 + C2200 * C47002 + C2201 * C2901) *
                 C48255) *
                C16333 +
            ((C14020 + C14019 - C14018 - C14021 + C14022 + C14023) * C31728 +
             (C2198 * C46996 + C2199 * C47876 - C2200 * C46992 -
              C2201 * C47884 + (C113 * C2185 + C48121 * C2186) * C47002 +
              (C113 * C2187 + C48121 * C2188) * C2901) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C2641 +
              (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
              C169 * C47881) *
                 C31728 +
             (C13628 + C13629 - C13630 - C13631) * C48255) *
                C16333 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                 C31728 +
             (C13632 + C13633 - C13634 - C13635) * C48255) *
                C48232) *
               C48018 +
           (((C13630 - (C13629 + C13628) + C13631) * C31728 +
             (C13636 - (C13637 + C13638) + C13639) * C48255) *
                C16333 +
            ((C13634 - (C13633 + C13632) + C13635) * C31728 +
             (C13640 - (C13641 + C13642) + C13643) * C48255) *
                C48232) *
               C48025 +
           (((C13638 + C13637 - C13636 - C13639) * C31728 +
             (C14696 + C14697 - C14698 - C14699) * C48255) *
                C16333 +
            ((C13642 + C13641 - C13640 - C13643) * C31728 +
             (C14700 + C14701 - C14702 - C14703) * C48255) *
                C48232) *
               C3806) *
              C48203 +
          ((((C361 * C2642 -
              ((C113 * C307 + C48121 * C326) * C2635 +
               (C113 * C297 + C48121 * C308) * C2641) +
              C362 * C47881) *
                 C31728 +
             (C13644 - (C13645 + C13646) + C13647) * C48255) *
                C16333 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                 C31728 +
             (C13648 - (C13649 + C13650) + C13651) * C48255) *
                C48232) *
               C48018 +
           (((C13646 + C13645 - C13644 - C13647) * C31728 +
             (C13652 + C13653 - C13654 - C13655) * C48255) *
                C16333 +
            ((C13650 + C13649 - C13648 - C13651) * C31728 +
             (C13656 + C13657 - C13658 - C13659) * C48255) *
                C48232) *
               C48025 +
           (((C13654 - (C13653 + C13652) + C13655) * C31728 +
             (C12894 * C2642 - (C13170 * C2635 + C13171 * C2641) +
              C12895 * C47881) *
                 C48255) *
                C16333 +
            ((C13658 - (C13657 + C13656) + C13659) * C31728 +
             ((C113 * C2419 + C48121 * C2424) * C2642 -
              (C12895 * C2635 + C12894 * C2641) +
              (C113 * C2425 + C48121 * C2428) * C47881) *
                 C48255) *
                C48232) *
               C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C2641 +
              (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
              C169 * C47881) *
                 C31728 +
             (C13628 + C13629 - C13630 - C13631) * C48255) *
                C16333 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                 C31728 +
             (C13632 + C13633 - C13634 - C13635) * C48255) *
                C48232) *
               C3298 +
           (((C13630 - (C13629 + C13628) + C13631) * C31728 +
             (C13636 - (C13637 + C13638) + C13639) * C48255) *
                C16333 +
            ((C13634 - (C13633 + C13632) + C13635) * C31728 +
             (C13640 - (C13641 + C13642) + C13643) * C48255) *
                C48232) *
               C48022) *
              C48274 +
          ((((C361 * C2642 -
              ((C113 * C307 + C48121 * C326) * C2635 +
               (C113 * C297 + C48121 * C308) * C2641) +
              C362 * C47881) *
                 C31728 +
             (C13644 - (C13645 + C13646) + C13647) * C48255) *
                C16333 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                 C31728 +
             (C13648 - (C13649 + C13650) + C13651) * C48255) *
                C48232) *
               C3298 +
           (((C13646 + C13645 - C13644 - C13647) * C31728 +
             (C13652 + C13653 - C13654 - C13655) * C48255) *
                C16333 +
            ((C13650 + C13649 - C13648 - C13651) * C31728 +
             (C13656 + C13657 - C13658 - C13659) * C48255) *
                C48232) *
               C48022) *
              C48262 +
          (((((C113 * C301 + C48121 * C316) * C2641 +
              (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
              C368 * C47881) *
                 C31728 +
             (C14218 + C14219 - C14220 - C14221) * C48255) *
                C16333 +
            ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                 C31728 +
             (C14222 + C14223 - C14224 - C14225) * C48255) *
                C48232) *
               C3298 +
           (((C14220 - (C14219 + C14218) + C14221) * C31728 +
             (C11743 * C2642 - (C11744 * C2635 + C11745 * C2641) +
              C11742 * C47881) *
                 C48255) *
                C16333 +
            ((C14224 - (C14223 + C14222) + C14225) * C31728 +
             ((C113 * C1303 + C48121 * C1320) * C2642 -
              (C11742 * C2635 + C11743 * C2641) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2533 +
             (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
             C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
             C173 * C48239) *
                C31728 +
            (C14356 + C14357 - C14358 - C14359 + C14360 + C14361 - C14362 -
             C14363) *
                C48255) *
               C16333 +
           ((C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
             C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
                C31728 +
            (C14364 + C14365 - C14366 - C14367 + C14368 + C14369 - C14370 -
             C14371) *
                C48255) *
               C48232) *
              C3298 +
          (((C14358 - (C14357 + C14356) + C14359 - C14360 - C14361 + C14362 +
             C14363) *
                C31728 +
            (C556 * C2534 - (C10838 * C48280 + C10839 * C2533) + C557 * C48273 -
             C558 * C2535 - C559 * C48260 + C560 * C2536 + C561 * C48239) *
                C48255) *
               C16333 +
           ((C14366 - (C14365 + C14364) + C14367 - C14368 - C14369 + C14370 +
             C14371) *
                C31728 +
            (C558 * C2534 - (C557 * C48280 + C556 * C2533) + C559 * C48273 -
             C560 * C2535 - C561 * C48260 +
             (C113 * C494 + C48121 * C513) * C2536 +
             (C113 * C514 + C48121 * C524) * C48239) *
                C48255) *
               C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C31728 +
            (C13628 + C13629 - C13630 - C13631) * C48255) *
               C16333 +
           ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                C31728 +
            (C13632 + C13633 - C13634 - C13635) * C48255) *
               C48232) *
              C48282 +
          (((C13630 - (C13629 + C13628) + C13631) * C31728 +
            (C13636 - (C13637 + C13638) + C13639) * C48255) *
               C16333 +
           ((C13634 - (C13633 + C13632) + C13635) * C31728 +
            (C13640 - (C13641 + C13642) + C13643) * C48255) *
               C48232) *
              C48279 +
          (((C13638 + C13637 - C13636 - C13639) * C31728 +
            (C14696 + C14697 - C14698 - C14699) * C48255) *
               C16333 +
           ((C13642 + C13641 - C13640 - C13643) * C31728 +
            (C14700 + C14701 - C14702 - C14703) * C48255) *
               C48232) *
              C48270 +
          (((C14698 - (C14697 + C14696) + C14699) * C31728 +
            (C12671 * C2642 - (C12672 * C2635 + C12673 * C2641) +
             C12670 * C47881) *
                C48255) *
               C16333 +
           ((C14702 - (C14701 + C14700) + C14703) * C31728 +
            ((C113 * C2020 + C48121 * C2031) * C2642 -
             (C12670 * C2635 + C12671 * C2641) +
             (C113 * C2032 + C48121 * C2038) * C47881) *
                C48255) *
               C48232) *
              C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46996 +
             (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
             C169 * C47884 + C170 * C47002 + C171 * C2901) *
                C31728 +
            (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C48255) *
               C16333 +
           ((C168 * C46996 + C169 * C47876 - C170 * C46992 - C171 * C47884 +
             C172 * C47002 + C173 * C2901) *
                C31728 +
            (C14006 + C14007 - C14008 - C14009 + C14010 + C14011) * C48255) *
               C48232) *
              C48018 +
          (((C14002 - (C14001 + C14000) + C14003 - C14004 - C14005) * C31728 +
            (C15044 - (C15045 + C15046) + C15047 - C15048 - C15049) * C48255) *
               C16333 +
           ((C14008 - (C14007 + C14006) + C14009 - C14010 - C14011) * C31728 +
            (C15050 - (C15051 + C15052) + C15053 - C15054 - C15055) * C48255) *
               C48232) *
              C48025 +
          (((C15046 + C15045 - C15044 - C15047 + C15048 + C15049) * C31728 +
            (C12668 * C46996 + C12669 * C47876 - C2316 * C46992 -
             C2317 * C47884 + C2318 * C47002 + C2319 * C2901) *
                C48255) *
               C16333 +
           ((C15052 + C15051 - C15050 - C15053 + C15054 + C15055) * C31728 +
            (C2316 * C46996 + C2317 * C47876 - C2318 * C46992 - C2319 * C47884 +
             (C113 * C2303 + C48121 * C2304) * C47002 +
             (C113 * C2305 + C48121 * C2306) * C2901) *
                C48255) *
               C48232) *
              C3806) *
         C47923) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2533 +
             (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
             C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
             C173 * C48239) *
                C31728 +
            (C14356 + C14357 - C14358 - C14359 + C14360 + C14361 - C14362 -
             C14363) *
                C48255) *
               C16333 +
           ((C168 * C2533 + C169 * C48280 - C170 * C2534 - C171 * C48273 +
             C172 * C2535 + C173 * C48260 - C174 * C2536 - C175 * C48239) *
                C31728 +
            (C14364 + C14365 - C14366 - C14367 + C14368 + C14369 - C14370 -
             C14371) *
                C48255) *
               C48232) *
              C3298 +
          (((C14358 - (C14357 + C14356) + C14359 - C14360 - C14361 + C14362 +
             C14363) *
                C31728 +
            (C556 * C2534 - (C10838 * C48280 + C10839 * C2533) + C557 * C48273 -
             C558 * C2535 - C559 * C48260 + C560 * C2536 + C561 * C48239) *
                C48255) *
               C16333 +
           ((C14366 - (C14365 + C14364) + C14367 - C14368 - C14369 + C14370 +
             C14371) *
                C31728 +
            (C558 * C2534 - (C557 * C48280 + C556 * C2533) + C559 * C48273 -
             C560 * C2535 - C561 * C48260 +
             (C113 * C494 + C48121 * C513) * C2536 +
             (C113 * C514 + C48121 * C524) * C48239) *
                C48255) *
               C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C2641 +
              (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
              C169 * C47881) *
                 C31728 +
             (C13628 + C13629 - C13630 - C13631) * C48255) *
                C16333 +
            ((C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47881) *
                 C31728 +
             (C13632 + C13633 - C13634 - C13635) * C48255) *
                C48232) *
               C3298 +
           (((C13630 - (C13629 + C13628) + C13631) * C31728 +
             (C13636 - (C13637 + C13638) + C13639) * C48255) *
                C16333 +
            ((C13634 - (C13633 + C13632) + C13635) * C31728 +
             (C13640 - (C13641 + C13642) + C13643) * C48255) *
                C48232) *
               C48022) *
              C48274 +
          ((((C361 * C2642 -
              ((C113 * C307 + C48121 * C326) * C2635 +
               (C113 * C297 + C48121 * C308) * C2641) +
              C362 * C47881) *
                 C31728 +
             (C13644 - (C13645 + C13646) + C13647) * C48255) *
                C16333 +
            ((C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47881) *
                 C31728 +
             (C13648 - (C13649 + C13650) + C13651) * C48255) *
                C48232) *
               C3298 +
           (((C13646 + C13645 - C13644 - C13647) * C31728 +
             (C13652 + C13653 - C13654 - C13655) * C48255) *
                C16333 +
            ((C13650 + C13649 - C13648 - C13651) * C31728 +
             (C13656 + C13657 - C13658 - C13659) * C48255) *
                C48232) *
               C48022) *
              C48262 +
          (((((C113 * C301 + C48121 * C316) * C2641 +
              (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
              C368 * C47881) *
                 C31728 +
             (C14218 + C14219 - C14220 - C14221) * C48255) *
                C16333 +
            ((C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47881) *
                 C31728 +
             (C14222 + C14223 - C14224 - C14225) * C48255) *
                C48232) *
               C3298 +
           (((C14220 - (C14219 + C14218) + C14221) * C31728 +
             (C11743 * C2642 - (C11744 * C2635 + C11745 * C2641) +
              C11742 * C47881) *
                 C48255) *
                C16333 +
            ((C14224 - (C14223 + C14222) + C14225) * C31728 +
             ((C113 * C1303 + C48121 * C1320) * C2642 -
              (C11742 * C2635 + C11743 * C2641) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C665 +
             (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
                C31728 +
            (C11104 + C11105 - C11106 - C11107 + C11108 + C11109 - C11110 -
             C11111) *
                C48255) *
               C16333 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
                C31728 +
            (C11112 + C11113 - C11114 - C11115 + C11116 + C11117 - C11118 -
             C11119) *
                C48255) *
               C48232) *
              C47935 * C48203 +
          (((C361 * C666 -
             ((C113 * C307 + C48121 * C326) * C659 +
              (C113 * C297 + C48121 * C308) * C665) +
             C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
             C366 * C48239) *
                C31728 +
            (C968 * C666 - (C11328 * C659 + C11329 * C665) + C969 * C660 -
             C970 * C667 - C971 * C661 + C972 * C668 + C973 * C48239) *
                C48255) *
               C16333 +
           ((C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
             C365 * C667 - C366 * C661 + C678 * C668 + C679 * C48239) *
                C31728 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C48121 * C948) * C668 +
             (C113 * C949 + C48121 * C954) * C48239) *
                C48255) *
               C48232) *
              C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C31728 +
            (C12084 + C12085 - C12086 - C12087) * C48255) *
               C16333 +
           ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                C31728 +
            (C12088 + C12089 - C12090 - C12091) * C48255) *
               C48232) *
              C47935 * C1431 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C31728 +
            (C12092 - (C12093 + C12094) + C12095) * C48255) *
               C16333 +
           ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                C31728 +
            (C12096 - (C12097 + C12098) + C12099) * C48255) *
               C48232) *
              C47935 * C1432 +
          ((((C113 * C301 + C48121 * C316) * C46986 +
             (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
             C368 * C47881) *
                C31728 +
            (C12100 + C12101 - C12102 - C12103) * C48255) *
               C16333 +
           ((C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                C31728 +
            (C12104 + C12105 - C12106 - C12107) * C48255) *
               C48232) *
              C47935 * C1433 +
          (((C1450 * C46967 -
             ((C113 * C1171 + C48121 * C1181) * C48186 +
              (C113 * C1163 + C48121 * C1172) * C46986) +
             C1451 * C47881) *
                C31728 +
            (C11888 * C46967 - (C12245 * C48186 + C12244 * C46986) +
             C11889 * C47881) *
                C48255) *
               C16333 +
           ((C1452 * C46967 - (C1451 * C48186 + C1450 * C46986) +
             C1453 * C47881) *
                C31728 +
            ((C113 * C1715 + C48121 * C1720) * C46967 -
             (C11889 * C48186 + C11888 * C46986) +
             (C113 * C1721 + C48121 * C1724) * C47881) *
                C48255) *
               C48232) *
              C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C293 +
              (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C48227) *
                 C31728 +
             (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
                C16333 +
            ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C48227) *
                 C31728 +
             (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
                C48232) *
               C48204 +
           (((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C31728 +
             (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C48255) *
                C16333 +
            ((C10818 - (C10817 + C10816) + C10819 - C10820 - C10821) * C31728 +
             (C10830 - (C10831 + C10832) + C10833 - C10834 - C10835) * C48255) *
                C48232) *
               C48022) *
              C48203 +
          ((((C361 * C294 -
              ((C113 * C307 + C48121 * C326) * C287 +
               (C113 * C297 + C48121 * C308) * C293) +
              C362 * C288 - C363 * C295 - C364 * C48227) *
                 C31728 +
             (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C48255) *
                C16333 +
            ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
              C365 * C295 - C366 * C48227) *
                 C31728 +
             (C11322 - (C11323 + C11324) + C11325 - C11326 - C11327) * C48255) *
                C48232) *
               C48204 +
           (((C11331 + C11330 - C11314 - C11319 + C11320 + C11321) * C31728 +
             (C11738 * C293 + C11739 * C287 - C2198 * C294 - C2199 * C288 +
              C2200 * C295 + C2201 * C48227) *
                 C48255) *
                C16333 +
            ((C11324 + C11323 - C11322 - C11325 + C11326 + C11327) * C31728 +
             (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
              (C113 * C2185 + C48121 * C2186) * C295 +
              (C113 * C2187 + C48121 * C2188) * C48227) *
                 C48255) *
                C48232) *
               C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48204 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C48022) *
              C1431 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C48022 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C48204) *
              C1432 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C31728 +
             (C11748 + C11749) * C48255) *
                C16333 +
            ((C367 * C1160 + C368 * C47871) * C31728 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C48204 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C31728) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C31728) *
                C16333) *
               C48022) *
              C1433 +
          ((((C12246 + C12247) * C31728 +
             ((C113 * C6105 + C48121 * C6107) * C1160 +
              (C113 * C6108 + C48121 * C6111) * C47871) *
                 C48255) *
                C16333 +
            ((C12242 + C12243) * C31728 +
             ((C113 * C6106 + C48121 * C6109) * C1160 +
              (C113 * C6110 + C48121 * C6112) * C47871) *
                 C48255) *
                C48232) *
               C48022 -
           (((C12243 + C12242) * C48255 +
             (C1451 * C47871 + C1450 * C1160) * C31728) *
                C48232 +
            ((C12247 + C12246) * C48255 +
             ((C113 * C1171 + C48121 * C1181) * C47871 +
              (C113 * C1163 + C48121 * C1172) * C1160) *
                 C31728) *
                C16333) *
               C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C31728 +
            (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
               C16333 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48227) *
                C31728 +
            (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
               C48232) *
              C47935 * C48274 +
          (((C361 * C294 -
             ((C113 * C307 + C48121 * C326) * C287 +
              (C113 * C297 + C48121 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C48227) *
                C31728 +
            (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C48255) *
               C16333 +
           ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C48227) *
                C31728 +
            (C11322 - (C11323 + C11324) + C11325 - C11326 - C11327) * C48255) *
               C48232) *
              C47935 * C48262 +
          ((((C113 * C301 + C48121 * C316) * C293 +
             (C113 * C317 + C48121 * C331) * C287 - C367 * C294 - C368 * C288 +
             C369 * C295 + C370 * C48227) *
                C31728 +
            (C11740 * C293 + C11741 * C287 - C1612 * C294 - C1613 * C288 +
             C1614 * C295 + C1615 * C48227) *
                C48255) *
               C16333 +
           ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
             C371 * C295 + C372 * C48227) *
                C31728 +
            (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
             (C113 * C1599 + C48121 * C1600) * C295 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C114 +
            (C113 * C127 + C48121 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C31728 +
           (C10836 * C114 + C10837 * C102 - C550 * C115 - C551 * C103 +
            C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
            C788 * C118 + C789 * C106) *
               C48255) *
              C16333 +
          ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C31728 +
           (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
            C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
            (C113 * C779 + C48121 * C780) * C118 +
            (C113 * C781 + C48121 * C782) * C106) *
               C48255) *
              C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C31728 +
            (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
               C16333 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48227) *
                C31728 +
            (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
               C48232) *
              C48275 +
          (((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C31728 +
            (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C48255) *
               C16333 +
           ((C10818 - (C10817 + C10816) + C10819 - C10820 - C10821) * C31728 +
            (C10830 - (C10831 + C10832) + C10833 - C10834 - C10835) * C48255) *
               C48232) *
              C48264 +
          (((C10843 + C10842 - C10822 - C10827 + C10828 + C10829) * C31728 +
            (C12668 * C293 + C12669 * C287 - C2316 * C294 - C2317 * C288 +
             C2318 * C295 + C2319 * C48227) *
                C48255) *
               C16333 +
           ((C10832 + C10831 - C10830 - C10833 + C10834 + C10835) * C31728 +
            (C2316 * C293 + C2317 * C287 - C2318 * C294 - C2319 * C288 +
             (C113 * C2303 + C48121 * C2304) * C295 +
             (C113 * C2305 + C48121 * C2306) * C48227) *
                C48255) *
               C48232) *
              C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C31728 +
            (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
               C16333 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C31728 +
            (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
               C48232) *
              C47935 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C48121 * C326) * C48271 +
              (C113 * C297 + C48121 * C308) * C1089) +
             C362 * C48258 - C363 * C1091 - C364 * C48227) *
                C31728 +
            (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C48255) *
               C16333 +
           ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
             C365 * C1091 - C366 * C48227) *
                C31728 +
            (C15450 - (C15451 + C15452) + C15453 - C15454 - C15455) * C48255) *
               C48232) *
              C47935 * C1087 +
          ((((C113 * C301 + C48121 * C316) * C1089 +
             (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
             C368 * C48258 + C369 * C1091 + C370 * C48227) *
                C31728 +
            (C11740 * C1089 + C11741 * C48271 - C1612 * C1090 - C1613 * C48258 +
             C1614 * C1091 + C1615 * C48227) *
                C48255) *
               C16333 +
           ((C367 * C1089 + C368 * C48271 - C369 * C1090 - C370 * C48258 +
             C371 * C1091 + C372 * C48227) *
                C31728 +
            (C1612 * C1089 + C1613 * C48271 - C1614 * C1090 - C1615 * C48258 +
             (C113 * C1599 + C48121 * C1600) * C1091 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C31728 +
            (C11706 + C11707) * C48255) *
               C16333 +
           ((C168 * C1160 + C169 * C47871) * C31728 +
            (C11708 + C11709) * C48255) *
               C48232) *
              C47935 * C1155 -
          (((C11721 + C11720) * C48255 +
            (C362 * C47871 + C361 * C1160) * C31728) *
               C48232 +
           ((C11715 + C11714) * C48255 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C31728) *
               C16333) *
              C47935 * C1156 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C31728 +
            (C11748 + C11749) * C48255) *
               C16333 +
           ((C367 * C1160 + C368 * C47871) * C31728 +
            (C11728 + C11729) * C48255) *
               C48232) *
              C47935 * C1157 -
          (((C12243 + C12242) * C48255 +
            (C1451 * C47871 + C1450 * C1160) * C31728) *
               C48232 +
           ((C12247 + C12246) * C48255 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C31728) *
               C16333) *
              C47935 * C1158 +
          ((((C113 * C1164 + C48121 * C1173) * C1160 +
             (C113 * C1174 + C48121 * C1182) * C47871) *
                C31728 +
            ((C113 * C6591 + C48121 * C6593) * C1160 +
             (C113 * C6594 + C48121 * C6597) * C47871) *
                C48255) *
               C16333 +
           (((C113 * C1165 + C48121 * C1175) * C1160 +
             (C113 * C1176 + C48121 * C1183) * C47871) *
                C31728 +
            ((C113 * C6592 + C48121 * C6595) * C1160 +
             (C113 * C6596 + C48121 * C6598) * C47871) *
                C48255) *
               C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C1160 +
              (C113 * C127 + C48121 * C140) * C47871) *
                 C31728 +
             (C11706 + C11707) * C48255) *
                C16333 +
            ((C168 * C1160 + C169 * C47871) * C31728 +
             (C11708 + C11709) * C48255) *
                C48232) *
               C48275 -
           (((C11710 + C11711) * C48255 + (C11709 + C11708) * C31728) * C48232 +
            ((C11712 + C11713) * C48255 + (C11707 + C11706) * C31728) *
                C16333) *
               C48264 +
           (((C11713 + C11712) * C31728 + (C12674 + C12675) * C48255) * C16333 +
            ((C11711 + C11710) * C31728 + (C12658 + C12659) * C48255) *
                C48232) *
               C48238) *
              C1086 +
          ((((C11714 + C11715) * C31728 + (C11746 + C11747) * C48255) * C16333 +
            ((C11720 + C11721) * C31728 + (C11722 + C11723) * C48255) *
                C48232) *
               C48264 -
           (((C11721 + C11720) * C48255 +
             (C362 * C47871 + C361 * C1160) * C31728) *
                C48232 +
            ((C11715 + C11714) * C48255 +
             ((C113 * C307 + C48121 * C326) * C47871 +
              (C113 * C297 + C48121 * C308) * C1160) *
                 C31728) *
                C16333) *
               C48275 -
           (((C13164 + C13165) * C48255 + (C11723 + C11722) * C31728) * C48232 +
            ((C13172 + C13173) * C48255 + (C11747 + C11746) * C31728) *
                C16333) *
               C48238) *
              C1087 +
          (((((C113 * C301 + C48121 * C316) * C1160 +
              (C113 * C317 + C48121 * C331) * C47871) *
                 C31728 +
             (C11748 + C11749) * C48255) *
                C16333 +
            ((C367 * C1160 + C368 * C47871) * C31728 +
             (C11728 + C11729) * C48255) *
                C48232) *
               C48275 -
           (((C11750 + C11751) * C48255 + (C11729 + C11728) * C31728) * C48232 +
            ((C11752 + C11753) * C48255 + (C11749 + C11748) * C31728) *
                C16333) *
               C48264 +
           (((C11753 + C11752) * C31728 +
             ((C113 * C7459 + C48121 * C7461) * C1160 +
              (C113 * C7462 + C48121 * C7465) * C47871) *
                 C48255) *
                C16333 +
            ((C11751 + C11750) * C31728 +
             ((C113 * C7460 + C48121 * C7463) * C1160 +
              (C113 * C7464 + C48121 * C7466) * C47871) *
                 C48255) *
                C48232) *
               C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C665 +
             (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
                C31728 +
            (C11104 + C11105 - C11106 - C11107 + C11108 + C11109 - C11110 -
             C11111) *
                C48255) *
               C16333 +
           ((C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48239) *
                C31728 +
            (C11112 + C11113 - C11114 - C11115 + C11116 + C11117 - C11118 -
             C11119) *
                C48255) *
               C48232) *
              C48204 +
          (((C11106 - (C11105 + C11104) + C11107 - C11108 - C11109 + C11110 +
             C11111) *
                C31728 +
            (C556 * C666 - (C10838 * C659 + C10839 * C665) + C557 * C660 -
             C558 * C667 - C559 * C661 + C560 * C668 + C561 * C48239) *
                C48255) *
               C16333 +
           ((C11114 - (C11113 + C11112) + C11115 - C11116 - C11117 + C11118 +
             C11119) *
                C31728 +
            (C558 * C666 - (C557 * C659 + C556 * C665) + C559 * C660 -
             C560 * C667 - C561 * C661 + (C113 * C494 + C48121 * C513) * C668 +
             (C113 * C514 + C48121 * C524) * C48239) *
                C48255) *
               C48232) *
              C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48121 * C126) * C46986 +
              (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
              C169 * C47881) *
                 C31728 +
             (C12084 + C12085 - C12086 - C12087) * C48255) *
                C16333 +
            ((C168 * C46986 + C169 * C48186 - C170 * C46967 - C171 * C47881) *
                 C31728 +
             (C12088 + C12089 - C12090 - C12091) * C48255) *
                C48232) *
               C48204 +
           (((C12086 - (C12085 + C12084) + C12087) * C31728 +
             (C12874 - (C12875 + C12876) + C12877) * C48255) *
                C16333 +
            ((C12090 - (C12089 + C12088) + C12091) * C31728 +
             (C12878 - (C12879 + C12880) + C12881) * C48255) *
                C48232) *
               C48022) *
              C1086 +
          ((((C361 * C46967 -
              ((C113 * C307 + C48121 * C326) * C48186 +
               (C113 * C297 + C48121 * C308) * C46986) +
              C362 * C47881) *
                 C31728 +
             (C12092 - (C12093 + C12094) + C12095) * C48255) *
                C16333 +
            ((C363 * C46967 - (C362 * C48186 + C361 * C46986) + C364 * C47881) *
                 C31728 +
             (C12096 - (C12097 + C12098) + C12099) * C48255) *
                C48232) *
               C48204 +
           (((C12094 + C12093 - C12092 - C12095) * C31728 +
             (C12882 + C12883 - C12884 - C12885) * C48255) *
                C16333 +
            ((C12098 + C12097 - C12096 - C12099) * C31728 +
             (C12886 + C12887 - C12888 - C12889) * C48255) *
                C48232) *
               C48022) *
              C1087 +
          (((((C113 * C301 + C48121 * C316) * C46986 +
              (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
              C368 * C47881) *
                 C31728 +
             (C12100 + C12101 - C12102 - C12103) * C48255) *
                C16333 +
            ((C367 * C46986 + C368 * C48186 - C369 * C46967 - C370 * C47881) *
                 C31728 +
             (C12104 + C12105 - C12106 - C12107) * C48255) *
                C48232) *
               C48204 +
           (((C12102 - (C12101 + C12100) + C12103) * C31728 +
             (C11743 * C46967 - (C11744 * C48186 + C11745 * C46986) +
              C11742 * C47881) *
                 C48255) *
                C16333 +
            ((C12106 - (C12105 + C12104) + C12107) * C31728 +
             ((C113 * C1303 + C48121 * C1320) * C46967 -
              (C11742 * C48186 + C11743 * C46986) +
              (C113 * C1321 + C48121 * C1330) * C47881) *
                 C48255) *
                C48232) *
               C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C114 +
            (C113 * C127 + C48121 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C31728 +
           (C10836 * C114 + C10837 * C102 - C550 * C115 - C551 * C103 +
            C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
            C788 * C118 + C789 * C106) *
               C48255) *
              C16333 +
          ((C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C31728 +
           (C550 * C114 + C551 * C102 - C552 * C115 - C553 * C103 +
            C554 * C116 + C555 * C104 - C788 * C117 - C789 * C105 +
            (C113 * C779 + C48121 * C780) * C118 +
            (C113 * C781 + C48121 * C782) * C106) *
               C48255) *
              C48232) *
         C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C31728 +
            (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C48255) *
               C16333 +
           ((C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48227) *
                C31728 +
            (C10816 + C10817 - C10818 - C10819 + C10820 + C10821) * C48255) *
               C48232) *
              C47935 * C48274 +
          (((C361 * C294 -
             ((C113 * C307 + C48121 * C326) * C287 +
              (C113 * C297 + C48121 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C48227) *
                C31728 +
            (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C48255) *
               C16333 +
           ((C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
             C365 * C295 - C366 * C48227) *
                C31728 +
            (C11322 - (C11323 + C11324) + C11325 - C11326 - C11327) * C48255) *
               C48232) *
              C47935 * C48262 +
          ((((C113 * C301 + C48121 * C316) * C293 +
             (C113 * C317 + C48121 * C331) * C287 - C367 * C294 - C368 * C288 +
             C369 * C295 + C370 * C48227) *
                C31728 +
            (C11740 * C293 + C11741 * C287 - C1612 * C294 - C1613 * C288 +
             C1614 * C295 + C1615 * C48227) *
                C48255) *
               C16333 +
           ((C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
             C371 * C295 + C372 * C48227) *
                C31728 +
            (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
             (C113 * C1599 + C48121 * C1600) * C295 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C31728 +
            (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C48255) *
               C16333 +
           ((C168 * C1089 + C169 * C48271 - C170 * C1090 - C171 * C48258 +
             C172 * C1091 + C173 * C48227) *
                C31728 +
            (C12400 + C12401 - C12402 - C12403 + C12404 + C12405) * C48255) *
               C48232) *
              C47935 * C1086 +
          (((C361 * C1090 -
             ((C113 * C307 + C48121 * C326) * C48271 +
              (C113 * C297 + C48121 * C308) * C1089) +
             C362 * C48258 - C363 * C1091 - C364 * C48227) *
                C31728 +
            (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C48255) *
               C16333 +
           ((C363 * C1090 - (C362 * C48271 + C361 * C1089) + C364 * C48258 -
             C365 * C1091 - C366 * C48227) *
                C31728 +
            (C15450 - (C15451 + C15452) + C15453 - C15454 - C15455) * C48255) *
               C48232) *
              C47935 * C1087 +
          ((((C113 * C301 + C48121 * C316) * C1089 +
             (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
             C368 * C48258 + C369 * C1091 + C370 * C48227) *
                C31728 +
            (C11740 * C1089 + C11741 * C48271 - C1612 * C1090 - C1613 * C48258 +
             C1614 * C1091 + C1615 * C48227) *
                C48255) *
               C16333 +
           ((C367 * C1089 + C368 * C48271 - C369 * C1090 - C370 * C48258 +
             C371 * C1091 + C372 * C48227) *
                C31728 +
            (C1612 * C1089 + C1613 * C48271 - C1614 * C1090 - C1615 * C48258 +
             (C113 * C1599 + C48121 * C1600) * C1091 +
             (C113 * C1601 + C48121 * C1602) * C48227) *
                C48255) *
               C48232) *
              C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C31728 +
            (C11706 + C11707) * C48255) *
               C16333 +
           ((C168 * C1160 + C169 * C47871) * C31728 +
            (C11708 + C11709) * C48255) *
               C48232) *
              C47935 * C1155 -
          (((C11721 + C11720) * C48255 +
            (C362 * C47871 + C361 * C1160) * C31728) *
               C48232 +
           ((C11715 + C11714) * C48255 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C31728) *
               C16333) *
              C47935 * C1156 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C31728 +
            (C11748 + C11749) * C48255) *
               C16333 +
           ((C367 * C1160 + C368 * C47871) * C31728 +
            (C11728 + C11729) * C48255) *
               C48232) *
              C47935 * C1157 -
          (((C12243 + C12242) * C48255 +
            (C1451 * C47871 + C1450 * C1160) * C31728) *
               C48232 +
           ((C12247 + C12246) * C48255 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C31728) *
               C16333) *
              C47935 * C1158 +
          ((((C113 * C1164 + C48121 * C1173) * C1160 +
             (C113 * C1174 + C48121 * C1182) * C47871) *
                C31728 +
            ((C113 * C6591 + C48121 * C6593) * C1160 +
             (C113 * C6594 + C48121 * C6597) * C47871) *
                C48255) *
               C16333 +
           (((C113 * C1165 + C48121 * C1175) * C1160 +
             (C113 * C1176 + C48121 * C1183) * C47871) *
                C31728 +
            ((C113 * C6592 + C48121 * C6595) * C1160 +
             (C113 * C6596 + C48121 * C6598) * C47871) *
                C48255) *
               C48232) *
              C47935 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C46996 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47876 -
            (C4818 + C4819) * C46992 - (C4820 + C4821) * C47884 +
            (C4822 + C4823) * C47002 + (C4824 + C4825) * C2901) *
               C31728 +
           ((C37487 + C37488) * C46996 + (C37489 + C37490) * C47876 -
            (C5207 + C5206) * C46992 - (C5209 + C5208) * C47884 +
            (C5211 + C5210) * C47002 + (C5213 + C5212) * C2901) *
               C48255) *
              C47900 * C47935 * C47978 +
          (((C5012 + C5013) * C46992 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47876 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C46996) +
            (C5014 + C5015) * C47884 - (C5016 + C5017) * C47002 -
            (C5018 + C5019) * C2901) *
               C31728 +
           ((C5717 + C5716) * C46992 -
            ((C37957 + C37958) * C47876 + (C37959 + C37960) * C46996) +
            (C5719 + C5718) * C47884 - (C5721 + C5720) * C47002 -
            (C5723 + C5722) * C2901) *
               C48255) *
              C47900 * C47935 * C47985 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C46996 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C47876 -
            (C5020 + C5021) * C46992 - (C5022 + C5023) * C47884 +
            (C5024 + C5025) * C47002 + (C5026 + C5027) * C2901) *
               C31728 +
           ((C38363 + C38364) * C46996 + (C38365 + C38366) * C47876 -
            (C6459 + C6458) * C46992 - (C6461 + C6460) * C47884 +
            (C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                C47002 +
            (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                C2901) *
               C48255) *
              C47900 * C47935 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C2641 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C2635 -
             (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
                C31728 +
            ((C37487 + C37488) * C2641 + (C37489 + C37490) * C2635 -
             (C5207 + C5206) * C2642 - (C5209 + C5208) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C5206 + C5207) * C2642 -
             ((C37490 + C37489) * C2635 + (C37488 + C37487) * C2641) +
             (C5208 + C5209) * C47881) *
                C31728 +
            ((C5215 + C5214) * C2642 -
             ((C37491 + C37492) * C2635 + (C37493 + C37494) * C2641) +
             (C5217 + C5216) * C47881) *
                C48255) *
               C47900 * C48022) *
              C47978 +
          ((((C5012 + C5013) * C2642 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C2635 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C2641) +
             (C5014 + C5015) * C47881) *
                C31728 +
            ((C5717 + C5716) * C2642 -
             ((C37957 + C37958) * C2635 + (C37959 + C37960) * C2641) +
             (C5719 + C5718) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C37960 + C37959) * C2641 + (C37958 + C37957) * C2635 -
             (C5716 + C5717) * C2642 - (C5718 + C5719) * C47881) *
                C31728 +
            ((C38359 + C38360) * C2641 + (C38361 + C38362) * C2635 -
             (C7185 + C7184) * C2642 - (C7187 + C7186) * C47881) *
                C48255) *
               C47900 * C48022) *
              C47985 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C2641 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C2635 -
             (C5020 + C5021) * C2642 - (C5022 + C5023) * C47881) *
                C31728 +
            ((C38363 + C38364) * C2641 + (C38365 + C38366) * C2635 -
             (C6459 + C6458) * C2642 - (C6461 + C6460) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C6458 + C6459) * C2642 -
             ((C38366 + C38365) * C2635 + (C38364 + C38363) * C2641) +
             (C6460 + C6461) * C47881) *
                C31728 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C2642 -
             ((C38367 + C38368) * C2635 + (C38369 + C38370) * C2641) +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2641 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C2635 -
            (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
               C31728 +
           ((C37487 + C37488) * C2641 + (C37489 + C37490) * C2635 -
            (C5207 + C5206) * C2642 - (C5209 + C5208) * C47881) *
               C48255) *
              C47900 * C47935 * C48281 +
          (((C5012 + C5013) * C2642 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C2635 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C2641) +
            (C5014 + C5015) * C47881) *
               C31728 +
           ((C5717 + C5716) * C2642 -
            ((C37957 + C37958) * C2635 + (C37959 + C37960) * C2641) +
            (C5719 + C5718) * C47881) *
               C48255) *
              C47900 * C47935 * C48277 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C2641 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C2635 -
            (C5020 + C5021) * C2642 - (C5022 + C5023) * C47881) *
               C31728 +
           ((C38363 + C38364) * C2641 + (C38365 + C38366) * C2635 -
            (C6459 + C6458) * C2642 - (C6461 + C6460) * C47881) *
               C48255) *
              C47900 * C47935 * C48267 +
          (((C6252 + C6253) * C2642 -
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C2635 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C2641) +
            (C6254 + C6255) * C47881) *
               C31728 +
           ((C4783 * C1714 + C4779 * C1718 + C4784 * C6592 + C48253 * C6595) *
                C2642 -
            ((C38836 + C38835) * C2635 + (C38834 + C38833) * C2641) +
            (C4783 * C1719 + C4779 * C1723 + C4784 * C6596 + C48253 * C6598) *
                C47881) *
               C48255) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2533 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48280 -
            (C4818 + C4819) * C2534 - (C4820 + C4821) * C48273 +
            (C4822 + C4823) * C2535 + (C4824 + C4825) * C48260 -
            (C4826 + C4827) * C2536 - (C4828 + C4829) * C48239) *
               C31728 +
           ((C37487 + C37488) * C2533 + (C37489 + C37490) * C48280 -
            (C5207 + C5206) * C2534 - (C5209 + C5208) * C48273 +
            (C5211 + C5210) * C2535 + (C5213 + C5212) * C48260 -
            (C5503 + C5502) * C2536 - (C5505 + C5504) * C48239) *
               C48255) *
              C47900 * C47935 * C2531 +
          (((C5012 + C5013) * C2534 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48280 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C2533) +
            (C5014 + C5015) * C48273 - (C5016 + C5017) * C2535 -
            (C5018 + C5019) * C48260 + (C5360 + C5361) * C2536 +
            (C5362 + C5363) * C48239) *
               C31728 +
           ((C5717 + C5716) * C2534 -
            ((C37957 + C37958) * C48280 + (C37959 + C37960) * C2533) +
            (C5719 + C5718) * C48273 - (C5721 + C5720) * C2535 -
            (C5723 + C5722) * C48260 +
            (C4783 * C938 + C4779 * C946 + C4784 * C1599 + C48253 * C1600) *
                C2536 +
            (C4783 * C947 + C4779 * C953 + C4784 * C1601 + C48253 * C1602) *
                C48239) *
               C48255) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C2641 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C2635 -
             (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
                C31728 +
            ((C37487 + C37488) * C2641 + (C37489 + C37490) * C2635 -
             (C5207 + C5206) * C2642 - (C5209 + C5208) * C47881) *
                C48255) *
               C47900 * C48275 +
           (((C5206 + C5207) * C2642 -
             ((C37490 + C37489) * C2635 + (C37488 + C37487) * C2641) +
             (C5208 + C5209) * C47881) *
                C31728 +
            ((C5215 + C5214) * C2642 -
             ((C37491 + C37492) * C2635 + (C37493 + C37494) * C2641) +
             (C5217 + C5216) * C47881) *
                C48255) *
               C47900 * C48264 +
           (((C37494 + C37493) * C2641 + (C37492 + C37491) * C2635 -
             (C5214 + C5215) * C2642 - (C5216 + C5217) * C47881) *
                C31728 +
            ((C39227 + C39228) * C2641 + (C39229 + C39230) * C2635 -
             (C7327 + C7326) * C2642 - (C7329 + C7328) * C47881) *
                C48255) *
               C47900 * C48238) *
              C2531 +
          ((((C5012 + C5013) * C2642 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C2635 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C2641) +
             (C5014 + C5015) * C47881) *
                C31728 +
            ((C5717 + C5716) * C2642 -
             ((C37957 + C37958) * C2635 + (C37959 + C37960) * C2641) +
             (C5719 + C5718) * C47881) *
                C48255) *
               C47900 * C48275 +
           (((C37960 + C37959) * C2641 + (C37958 + C37957) * C2635 -
             (C5716 + C5717) * C2642 - (C5718 + C5719) * C47881) *
                C31728 +
            ((C38359 + C38360) * C2641 + (C38361 + C38362) * C2635 -
             (C7185 + C7184) * C2642 - (C7187 + C7186) * C47881) *
                C48255) *
               C47900 * C48264 +
           (((C7184 + C7185) * C2642 -
             ((C38362 + C38361) * C2635 + (C38360 + C38359) * C2641) +
             (C7186 + C7187) * C47881) *
                C31728 +
            ((C4783 * C2418 + C4779 * C2422 + C4784 * C7460 + C48253 * C7463) *
                 C2642 -
             ((C39697 + C39698) * C2635 + (C39699 + C39700) * C2641) +
             (C4783 * C2423 + C4779 * C2427 + C4784 * C7464 + C48253 * C7466) *
                 C47881) *
                C48255) *
               C47900 * C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46996 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47876 -
             (C4818 + C4819) * C46992 - (C4820 + C4821) * C47884 +
             (C4822 + C4823) * C47002 + (C4824 + C4825) * C2901) *
                C31728 +
            ((C37487 + C37488) * C46996 + (C37489 + C37490) * C47876 -
             (C5207 + C5206) * C46992 - (C5209 + C5208) * C47884 +
             (C5211 + C5210) * C47002 + (C5213 + C5212) * C2901) *
                C48255) *
               C47900 * C48204 +
           (((C5206 + C5207) * C46992 -
             ((C37490 + C37489) * C47876 + (C37488 + C37487) * C46996) +
             (C5208 + C5209) * C47884 - (C5210 + C5211) * C47002 -
             (C5212 + C5213) * C2901) *
                C31728 +
            ((C5215 + C5214) * C46992 -
             ((C37491 + C37492) * C47876 + (C37493 + C37494) * C46996) +
             (C5217 + C5216) * C47884 - (C5219 + C5218) * C47002 -
             (C5221 + C5220) * C2901) *
                C48255) *
               C47900 * C48022) *
              C2531 +
          ((((C5012 + C5013) * C46992 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C47876 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46996) +
             (C5014 + C5015) * C47884 - (C5016 + C5017) * C47002 -
             (C5018 + C5019) * C2901) *
                C31728 +
            ((C5717 + C5716) * C46992 -
             ((C37957 + C37958) * C47876 + (C37959 + C37960) * C46996) +
             (C5719 + C5718) * C47884 - (C5721 + C5720) * C47002 -
             (C5723 + C5722) * C2901) *
                C48255) *
               C47900 * C48204 +
           (((C37960 + C37959) * C46996 + (C37958 + C37957) * C47876 -
             (C5716 + C5717) * C46992 - (C5718 + C5719) * C47884 +
             (C5720 + C5721) * C47002 + (C5722 + C5723) * C2901) *
                C31728 +
            ((C38359 + C38360) * C46996 + (C38361 + C38362) * C47876 -
             (C7185 + C7184) * C46992 - (C7187 + C7186) * C47884 +
             (C4783 * C1295 + C4779 * C1305 + C4784 * C1303 + C48253 * C1320) *
                 C47002 +
             (C4783 * C1304 + C4779 * C1322 + C4784 * C1321 + C48253 * C1330) *
                 C2901) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2533 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48280 -
            (C4818 + C4819) * C2534 - (C4820 + C4821) * C48273 +
            (C4822 + C4823) * C2535 + (C4824 + C4825) * C48260 -
            (C4826 + C4827) * C2536 - (C4828 + C4829) * C48239) *
               C31728 +
           ((C37487 + C37488) * C2533 + (C37489 + C37490) * C48280 -
            (C5207 + C5206) * C2534 - (C5209 + C5208) * C48273 +
            (C5211 + C5210) * C2535 + (C5213 + C5212) * C48260 -
            (C5503 + C5502) * C2536 - (C5505 + C5504) * C48239) *
               C48255) *
              C47900 * C47935 * C2531 +
          (((C5012 + C5013) * C2534 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48280 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C2533) +
            (C5014 + C5015) * C48273 - (C5016 + C5017) * C2535 -
            (C5018 + C5019) * C48260 + (C5360 + C5361) * C2536 +
            (C5362 + C5363) * C48239) *
               C31728 +
           ((C5717 + C5716) * C2534 -
            ((C37957 + C37958) * C48280 + (C37959 + C37960) * C2533) +
            (C5719 + C5718) * C48273 - (C5721 + C5720) * C2535 -
            (C5723 + C5722) * C48260 +
            (C4783 * C938 + C4779 * C946 + C4784 * C1599 + C48253 * C1600) *
                C2536 +
            (C4783 * C947 + C4779 * C953 + C4784 * C1601 + C48253 * C1602) *
                C48239) *
               C48255) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2641 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C2635 -
            (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
               C31728 +
           ((C37487 + C37488) * C2641 + (C37489 + C37490) * C2635 -
            (C5207 + C5206) * C2642 - (C5209 + C5208) * C47881) *
               C48255) *
              C47900 * C47935 * C48281 +
          (((C5012 + C5013) * C2642 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C2635 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C2641) +
            (C5014 + C5015) * C47881) *
               C31728 +
           ((C5717 + C5716) * C2642 -
            ((C37957 + C37958) * C2635 + (C37959 + C37960) * C2641) +
            (C5719 + C5718) * C47881) *
               C48255) *
              C47900 * C47935 * C48277 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C2641 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C2635 -
            (C5020 + C5021) * C2642 - (C5022 + C5023) * C47881) *
               C31728 +
           ((C38363 + C38364) * C2641 + (C38365 + C38366) * C2635 -
            (C6459 + C6458) * C2642 - (C6461 + C6460) * C47881) *
               C48255) *
              C47900 * C47935 * C48267 +
          (((C6252 + C6253) * C2642 -
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C2635 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C2641) +
            (C6254 + C6255) * C47881) *
               C31728 +
           ((C4783 * C1714 + C4779 * C1718 + C4784 * C6592 + C48253 * C6595) *
                C2642 -
            ((C38836 + C38835) * C2635 + (C38834 + C38833) * C2641) +
            (C4783 * C1719 + C4779 * C1723 + C4784 * C6596 + C48253 * C6598) *
                C47881) *
               C48255) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46986 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48186 -
             (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
                C31728 +
            ((C37487 + C37488) * C46986 + (C37489 + C37490) * C48186 -
             (C5207 + C5206) * C46967 - (C5209 + C5208) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C5206 + C5207) * C46967 -
             ((C37490 + C37489) * C48186 + (C37488 + C37487) * C46986) +
             (C5208 + C5209) * C47881) *
                C31728 +
            ((C5215 + C5214) * C46967 -
             ((C37491 + C37492) * C48186 + (C37493 + C37494) * C46986) +
             (C5217 + C5216) * C47881) *
                C48255) *
               C47900 * C48022) *
              C47978 +
          ((((C5012 + C5013) * C46967 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48186 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46986) +
             (C5014 + C5015) * C47881) *
                C31728 +
            ((C5717 + C5716) * C46967 -
             ((C37957 + C37958) * C48186 + (C37959 + C37960) * C46986) +
             (C5719 + C5718) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C37960 + C37959) * C46986 + (C37958 + C37957) * C48186 -
             (C5716 + C5717) * C46967 - (C5718 + C5719) * C47881) *
                C31728 +
            ((C38359 + C38360) * C46986 + (C38361 + C38362) * C48186 -
             (C7185 + C7184) * C46967 - (C7187 + C7186) * C47881) *
                C48255) *
               C47900 * C48022) *
              C47985 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C46986 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C48186 -
             (C5020 + C5021) * C46967 - (C5022 + C5023) * C47881) *
                C31728 +
            ((C38363 + C38364) * C46986 + (C38365 + C38366) * C48186 -
             (C6459 + C6458) * C46967 - (C6461 + C6460) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C6458 + C6459) * C46967 -
             ((C38366 + C38365) * C48186 + (C38364 + C38363) * C46986) +
             (C6460 + C6461) * C47881) *
                C31728 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C46967 -
             ((C38367 + C38368) * C48186 + (C38369 + C38370) * C46986) +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C48018 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C48025 +
           (((C37494 + C37493) * C1160 + (C37492 + C37491) * C47871) * C31728 +
            ((C39227 + C39228) * C1160 + (C39229 + C39230) * C47871) * C48255) *
               C47900 * C3806) *
              C47978 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C48025 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C48018 -
           (((C39697 + C39698) * C47871 + (C39699 + C39700) * C1160) * C48255 +
            ((C38362 + C38361) * C47871 + (C38360 + C38359) * C1160) * C31728) *
               C47900 * C3806) *
              C47985 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C31728 +
            ((C38363 + C38364) * C1160 + (C38365 + C38366) * C47871) * C48255) *
               C47900 * C48018 -
           (((C38367 + C38368) * C47871 + (C38369 + C38370) * C1160) * C48255 +
            ((C38366 + C38365) * C47871 + (C38364 + C38363) * C1160) * C31728) *
               C47900 * C48025 +
           (((C38370 + C38369) * C1160 + (C38368 + C38367) * C47871) * C31728 +
            ((C4783 * C7459 + C4779 * C7461 + C4784 * C23838 +
              C48253 * C23839) *
                 C1160 +
             (C4783 * C7462 + C4779 * C7465 + C4784 * C23840 +
              C48253 * C23841) *
                 C47871) *
                C48255) *
               C47900 * C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C3298 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C48022) *
              C48281 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C48022 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C3298) *
              C48277 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C31728 +
            ((C38363 + C38364) * C1160 + (C38365 + C38366) * C47871) * C48255) *
               C47900 * C3298 -
           (((C38367 + C38368) * C47871 + (C38369 + C38370) * C1160) * C48255 +
            ((C38366 + C38365) * C47871 + (C38364 + C38363) * C1160) * C31728) *
               C47900 * C48022) *
              C48267 +
          ((((C38833 + C38834) * C1160 + (C38835 + C38836) * C47871) * C31728 +
            ((C4783 * C6105 + C4779 * C6107 + C4784 * C22860 +
              C48253 * C22861) *
                 C1160 +
             (C4783 * C6108 + C4779 * C6111 + C4784 * C22862 +
              C48253 * C22863) *
                 C47871) *
                C48255) *
               C47900 * C48022 -
           (((C38836 + C38835) * C47871 + (C38834 + C38833) * C1160) * C48255 +
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C47871 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C1160) *
                C31728) *
               C47900 * C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1089 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48271 -
             (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
             (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
                C31728 +
            ((C37487 + C37488) * C1089 + (C37489 + C37490) * C48271 -
             (C5207 + C5206) * C1090 - (C5209 + C5208) * C48258 +
             (C5211 + C5210) * C1091 + (C5213 + C5212) * C48227) *
                C48255) *
               C47900 * C3298 +
           (((C5206 + C5207) * C1090 -
             ((C37490 + C37489) * C48271 + (C37488 + C37487) * C1089) +
             (C5208 + C5209) * C48258 - (C5210 + C5211) * C1091 -
             (C5212 + C5213) * C48227) *
                C31728 +
            ((C5215 + C5214) * C1090 -
             ((C37491 + C37492) * C48271 + (C37493 + C37494) * C1089) +
             (C5217 + C5216) * C48258 - (C5219 + C5218) * C1091 -
             (C5221 + C5220) * C48227) *
                C48255) *
               C47900 * C48022) *
              C2531 +
          ((((C5012 + C5013) * C1090 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48271 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C1089) +
             (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
             (C5018 + C5019) * C48227) *
                C31728 +
            ((C5717 + C5716) * C1090 -
             ((C37957 + C37958) * C48271 + (C37959 + C37960) * C1089) +
             (C5719 + C5718) * C48258 - (C5721 + C5720) * C1091 -
             (C5723 + C5722) * C48227) *
                C48255) *
               C47900 * C3298 +
           (((C37960 + C37959) * C1089 + (C37958 + C37957) * C48271 -
             (C5716 + C5717) * C1090 - (C5718 + C5719) * C48258 +
             (C5720 + C5721) * C1091 + (C5722 + C5723) * C48227) *
                C31728 +
            ((C38359 + C38360) * C1089 + (C38361 + C38362) * C48271 -
             (C7185 + C7184) * C1090 - (C7187 + C7186) * C48258 +
             (C4783 * C1295 + C4779 * C1305 + C4784 * C1303 + C48253 * C1320) *
                 C1091 +
             (C4783 * C1304 + C4779 * C1322 + C4784 * C1321 + C48253 * C1330) *
                 C48227) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C48282 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C48279 +
           (((C37494 + C37493) * C1160 + (C37492 + C37491) * C47871) * C31728 +
            ((C39227 + C39228) * C1160 + (C39229 + C39230) * C47871) * C48255) *
               C47900 * C48270 -
           (((C39231 + C39232) * C47871 + (C39233 + C39234) * C1160) * C48255 +
            ((C39230 + C39229) * C47871 + (C39228 + C39227) * C1160) * C31728) *
               C47900 * C48251) *
              C2531 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C48279 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C48282 -
           (((C39697 + C39698) * C47871 + (C39699 + C39700) * C1160) * C48255 +
            ((C38362 + C38361) * C47871 + (C38360 + C38359) * C1160) * C31728) *
               C47900 * C48270 +
           (((C39700 + C39699) * C1160 + (C39698 + C39697) * C47871) * C31728 +
            ((C4783 * C6973 + C4779 * C6975 + C4784 * C23492 +
              C48253 * C23493) *
                 C1160 +
             (C4783 * C6976 + C4779 * C6979 + C4784 * C23494 +
              C48253 * C23495) *
                 C47871) *
                C48255) *
               C47900 * C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46986 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48186 -
             (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
                C31728 +
            ((C37487 + C37488) * C46986 + (C37489 + C37490) * C48186 -
             (C5207 + C5206) * C46967 - (C5209 + C5208) * C47881) *
                C48255) *
               C47900 * C48018 +
           (((C5206 + C5207) * C46967 -
             ((C37490 + C37489) * C48186 + (C37488 + C37487) * C46986) +
             (C5208 + C5209) * C47881) *
                C31728 +
            ((C5215 + C5214) * C46967 -
             ((C37491 + C37492) * C48186 + (C37493 + C37494) * C46986) +
             (C5217 + C5216) * C47881) *
                C48255) *
               C47900 * C48025 +
           (((C37494 + C37493) * C46986 + (C37492 + C37491) * C48186 -
             (C5214 + C5215) * C46967 - (C5216 + C5217) * C47881) *
                C31728 +
            ((C39227 + C39228) * C46986 + (C39229 + C39230) * C48186 -
             (C7327 + C7326) * C46967 - (C7329 + C7328) * C47881) *
                C48255) *
               C47900 * C3806) *
              C2531 +
          ((((C5012 + C5013) * C46967 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48186 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46986) +
             (C5014 + C5015) * C47881) *
                C31728 +
            ((C5717 + C5716) * C46967 -
             ((C37957 + C37958) * C48186 + (C37959 + C37960) * C46986) +
             (C5719 + C5718) * C47881) *
                C48255) *
               C47900 * C48018 +
           (((C37960 + C37959) * C46986 + (C37958 + C37957) * C48186 -
             (C5716 + C5717) * C46967 - (C5718 + C5719) * C47881) *
                C31728 +
            ((C38359 + C38360) * C46986 + (C38361 + C38362) * C48186 -
             (C7185 + C7184) * C46967 - (C7187 + C7186) * C47881) *
                C48255) *
               C47900 * C48025 +
           (((C7184 + C7185) * C46967 -
             ((C38362 + C38361) * C48186 + (C38360 + C38359) * C46986) +
             (C7186 + C7187) * C47881) *
                C31728 +
            ((C4783 * C2418 + C4779 * C2422 + C4784 * C7460 + C48253 * C7463) *
                 C46967 -
             ((C39697 + C39698) * C48186 + (C39699 + C39700) * C46986) +
             (C4783 * C2423 + C4779 * C2427 + C4784 * C7464 + C48253 * C7466) *
                 C47881) *
                C48255) *
               C47900 * C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1089 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48271 -
             (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
             (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
                C31728 +
            ((C37487 + C37488) * C1089 + (C37489 + C37490) * C48271 -
             (C5207 + C5206) * C1090 - (C5209 + C5208) * C48258 +
             (C5211 + C5210) * C1091 + (C5213 + C5212) * C48227) *
                C48255) *
               C47900 * C3298 +
           (((C5206 + C5207) * C1090 -
             ((C37490 + C37489) * C48271 + (C37488 + C37487) * C1089) +
             (C5208 + C5209) * C48258 - (C5210 + C5211) * C1091 -
             (C5212 + C5213) * C48227) *
                C31728 +
            ((C5215 + C5214) * C1090 -
             ((C37491 + C37492) * C48271 + (C37493 + C37494) * C1089) +
             (C5217 + C5216) * C48258 - (C5219 + C5218) * C1091 -
             (C5221 + C5220) * C48227) *
                C48255) *
               C47900 * C48022) *
              C2531 +
          ((((C5012 + C5013) * C1090 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48271 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C1089) +
             (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
             (C5018 + C5019) * C48227) *
                C31728 +
            ((C5717 + C5716) * C1090 -
             ((C37957 + C37958) * C48271 + (C37959 + C37960) * C1089) +
             (C5719 + C5718) * C48258 - (C5721 + C5720) * C1091 -
             (C5723 + C5722) * C48227) *
                C48255) *
               C47900 * C3298 +
           (((C37960 + C37959) * C1089 + (C37958 + C37957) * C48271 -
             (C5716 + C5717) * C1090 - (C5718 + C5719) * C48258 +
             (C5720 + C5721) * C1091 + (C5722 + C5723) * C48227) *
                C31728 +
            ((C38359 + C38360) * C1089 + (C38361 + C38362) * C48271 -
             (C7185 + C7184) * C1090 - (C7187 + C7186) * C48258 +
             (C4783 * C1295 + C4779 * C1305 + C4784 * C1303 + C48253 * C1320) *
                 C1091 +
             (C4783 * C1304 + C4779 * C1322 + C4784 * C1321 + C48253 * C1330) *
                 C48227) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C3298 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C48022) *
              C48281 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C48022 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C3298) *
              C48277 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C31728 +
            ((C38363 + C38364) * C1160 + (C38365 + C38366) * C47871) * C48255) *
               C47900 * C3298 -
           (((C38367 + C38368) * C47871 + (C38369 + C38370) * C1160) * C48255 +
            ((C38366 + C38365) * C47871 + (C38364 + C38363) * C1160) * C31728) *
               C47900 * C48022) *
              C48267 +
          ((((C38833 + C38834) * C1160 + (C38835 + C38836) * C47871) * C31728 +
            ((C4783 * C6105 + C4779 * C6107 + C4784 * C22860 +
              C48253 * C22861) *
                 C1160 +
             (C4783 * C6108 + C4779 * C6111 + C4784 * C22862 +
              C48253 * C22863) *
                 C47871) *
                C48255) *
               C47900 * C48022 -
           (((C38836 + C38835) * C47871 + (C38834 + C38833) * C1160) * C48255 +
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C47871 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C1160) *
                C31728) *
               C47900 * C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C46986 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48186 -
            (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
               C31728 +
           ((C37487 + C37488) * C46986 + (C37489 + C37490) * C48186 -
            (C5207 + C5206) * C46967 - (C5209 + C5208) * C47881) *
               C48255) *
              C47900 * C47935 * C1431 +
          (((C5012 + C5013) * C46967 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48186 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C46986) +
            (C5014 + C5015) * C47881) *
               C31728 +
           ((C5717 + C5716) * C46967 -
            ((C37957 + C37958) * C48186 + (C37959 + C37960) * C46986) +
            (C5719 + C5718) * C47881) *
               C48255) *
              C47900 * C47935 * C1432 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C46986 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48186 -
            (C5020 + C5021) * C46967 - (C5022 + C5023) * C47881) *
               C31728 +
           ((C38363 + C38364) * C46986 + (C38365 + C38366) * C48186 -
            (C6459 + C6458) * C46967 - (C6461 + C6460) * C47881) *
               C48255) *
              C47900 * C47935 * C1433 +
          (((C6252 + C6253) * C46967 -
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C48186 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C46986) +
            (C6254 + C6255) * C47881) *
               C31728 +
           ((C4783 * C1714 + C4779 * C1718 + C4784 * C6592 + C48253 * C6595) *
                C46967 -
            ((C4784 * C6594 + C48253 * C6597 + C4783 * C1717 + C4779 * C1722) *
                 C48186 +
             (C4784 * C6591 + C48253 * C6593 + C4783 * C1713 + C4779 * C1716) *
                 C46986) +
            (C4783 * C1719 + C4779 * C1723 + C4784 * C6596 + C48253 * C6598) *
                C47881) *
               C48255) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C665 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C659 -
            (C4818 + C4819) * C666 - (C4820 + C4821) * C660 +
            (C4822 + C4823) * C667 + (C4824 + C4825) * C661 -
            (C4826 + C4827) * C668 - (C4828 + C4829) * C48239) *
               C31728 +
           ((C37487 + C37488) * C665 + (C37489 + C37490) * C659 -
            (C5207 + C5206) * C666 - (C5209 + C5208) * C660 +
            (C5211 + C5210) * C667 + (C5213 + C5212) * C661 -
            (C5503 + C5502) * C668 - (C5505 + C5504) * C48239) *
               C48255) *
              C47900 * C47935 * C48203 +
          (((C5012 + C5013) * C666 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C659 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C665) +
            (C5014 + C5015) * C660 - (C5016 + C5017) * C667 -
            (C5018 + C5019) * C661 + (C5360 + C5361) * C668 +
            (C5362 + C5363) * C48239) *
               C31728 +
           ((C5717 + C5716) * C666 -
            ((C4784 * C1314 + C48253 * C1327 + C4783 * C941 + C4779 * C950) *
                 C659 +
             (C4784 * C1300 + C48253 * C1315 + C4783 * C935 + C4779 * C940) *
                 C665) +
            (C5719 + C5718) * C660 - (C5721 + C5720) * C667 -
            (C5723 + C5722) * C661 +
            (C4783 * C938 + C4779 * C946 + C4784 * C1599 + C48253 * C1600) *
                C668 +
            (C4783 * C947 + C4779 * C953 + C4784 * C1601 + C48253 * C1602) *
                C48239) *
               C48255) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46986 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48186 -
             (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
                C31728 +
            ((C37487 + C37488) * C46986 + (C37489 + C37490) * C48186 -
             (C5207 + C5206) * C46967 - (C5209 + C5208) * C47881) *
                C48255) *
               C47900 * C1835 +
           (((C5206 + C5207) * C46967 -
             ((C37490 + C37489) * C48186 + (C37488 + C37487) * C46986) +
             (C5208 + C5209) * C47881) *
                C31728 +
            ((C5215 + C5214) * C46967 -
             ((C37491 + C37492) * C48186 + (C37493 + C37494) * C46986) +
             (C5217 + C5216) * C47881) *
                C48255) *
               C47900 * C1836 +
           (((C37494 + C37493) * C46986 + (C37492 + C37491) * C48186 -
             (C5214 + C5215) * C46967 - (C5216 + C5217) * C47881) *
                C31728 +
            ((C39227 + C39228) * C46986 + (C39229 + C39230) * C48186 -
             (C7327 + C7326) * C46967 - (C7329 + C7328) * C47881) *
                C48255) *
               C47900 * C48238) *
              C48203 +
          ((((C5012 + C5013) * C46967 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48186 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46986) +
             (C5014 + C5015) * C47881) *
                C31728 +
            ((C5717 + C5716) * C46967 -
             ((C37957 + C37958) * C48186 + (C37959 + C37960) * C46986) +
             (C5719 + C5718) * C47881) *
                C48255) *
               C47900 * C1835 +
           (((C37960 + C37959) * C46986 + (C37958 + C37957) * C48186 -
             (C5716 + C5717) * C46967 - (C5718 + C5719) * C47881) *
                C31728 +
            ((C38359 + C38360) * C46986 + (C38361 + C38362) * C48186 -
             (C7185 + C7184) * C46967 - (C7187 + C7186) * C47881) *
                C48255) *
               C47900 * C1836 +
           (((C7184 + C7185) * C46967 -
             ((C38362 + C38361) * C48186 + (C38360 + C38359) * C46986) +
             (C7186 + C7187) * C47881) *
                C31728 +
            ((C4783 * C2418 + C4779 * C2422 + C4784 * C7460 + C48253 * C7463) *
                 C46967 -
             ((C4784 * C7462 + C48253 * C7465 + C4783 * C2421 + C4779 * C2426) *
                  C48186 +
              (C4784 * C7459 + C48253 * C7461 + C4783 * C2417 + C4779 * C2420) *
                  C46986) +
             (C4783 * C2423 + C4779 * C2427 + C4784 * C7464 + C48253 * C7466) *
                 C47881) *
                C48255) *
               C47900 * C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C48204 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C48022) *
              C1431 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C48022 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C48204) *
              C1432 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C31728 +
            ((C38363 + C38364) * C1160 + (C38365 + C38366) * C47871) * C48255) *
               C47900 * C48204 -
           (((C38367 + C38368) * C47871 + (C38369 + C38370) * C1160) * C48255 +
            ((C38366 + C38365) * C47871 + (C38364 + C38363) * C1160) * C31728) *
               C47900 * C48022) *
              C1433 +
          ((((C38833 + C38834) * C1160 + (C38835 + C38836) * C47871) * C31728 +
            ((C4783 * C6105 + C4779 * C6107 + C4784 * C22860 +
              C48253 * C22861) *
                 C1160 +
             (C4783 * C6108 + C4779 * C6111 + C4784 * C22862 +
              C48253 * C22863) *
                 C47871) *
                C48255) *
               C47900 * C48022 -
           (((C38836 + C38835) * C47871 + (C38834 + C38833) * C1160) * C48255 +
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C47871 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C1160) *
                C31728) *
               C47900 * C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C293 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C287 -
             (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
             (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
                C31728 +
            ((C37487 + C37488) * C293 + (C37489 + C37490) * C287 -
             (C5207 + C5206) * C294 - (C5209 + C5208) * C288 +
             (C5211 + C5210) * C295 + (C5213 + C5212) * C48227) *
                C48255) *
               C47900 * C48204 +
           (((C5206 + C5207) * C294 -
             ((C37490 + C37489) * C287 + (C37488 + C37487) * C293) +
             (C5208 + C5209) * C288 - (C5210 + C5211) * C295 -
             (C5212 + C5213) * C48227) *
                C31728 +
            ((C5215 + C5214) * C294 -
             ((C37491 + C37492) * C287 + (C37493 + C37494) * C293) +
             (C5217 + C5216) * C288 - (C5219 + C5218) * C295 -
             (C5221 + C5220) * C48227) *
                C48255) *
               C47900 * C48022) *
              C48203 +
          ((((C5012 + C5013) * C294 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C287 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C293) +
             (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
             (C5018 + C5019) * C48227) *
                C31728 +
            ((C5717 + C5716) * C294 -
             ((C37957 + C37958) * C287 + (C37959 + C37960) * C293) +
             (C5719 + C5718) * C288 - (C5721 + C5720) * C295 -
             (C5723 + C5722) * C48227) *
                C48255) *
               C47900 * C48204 +
           (((C37960 + C37959) * C293 + (C37958 + C37957) * C287 -
             (C5716 + C5717) * C294 - (C5718 + C5719) * C288 +
             (C5720 + C5721) * C295 + (C5722 + C5723) * C48227) *
                C31728 +
            ((C4783 * C1297 + C4779 * C1309 + C4784 * C1301 + C48253 * C1316) *
                 C293 +
             (C4783 * C1308 + C4779 * C1324 + C4784 * C1317 + C48253 * C1328) *
                 C287 -
             (C7185 + C7184) * C294 - (C7187 + C7186) * C288 +
             (C4783 * C1295 + C4779 * C1305 + C4784 * C1303 + C48253 * C1320) *
                 C295 +
             (C4783 * C1304 + C4779 * C1322 + C4784 * C1321 + C48253 * C1330) *
                 C48227) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C2299 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C2300 +
           (((C37494 + C37493) * C1160 + (C37492 + C37491) * C47871) * C31728 +
            ((C39227 + C39228) * C1160 + (C39229 + C39230) * C47871) * C48255) *
               C47900 * C2301 -
           (((C39231 + C39232) * C47871 + (C39233 + C39234) * C1160) * C48255 +
            ((C39230 + C39229) * C47871 + (C39228 + C39227) * C1160) * C31728) *
               C47900 * C48251) *
              C48203 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C2300 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C2299 -
           (((C39697 + C39698) * C47871 + (C39699 + C39700) * C1160) * C48255 +
            ((C38362 + C38361) * C47871 + (C38360 + C38359) * C1160) * C31728) *
               C47900 * C2301 +
           (((C39700 + C39699) * C1160 + (C39698 + C39697) * C47871) * C31728 +
            ((C4783 * C6973 + C4779 * C6975 + C4784 * C23492 +
              C48253 * C23493) *
                 C1160 +
             (C4783 * C6976 + C4779 * C6979 + C4784 * C23494 +
              C48253 * C23495) *
                 C47871) *
                C48255) *
               C47900 * C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                   C114 +
               (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                   C102 -
               (C4818 + C4819) * C115 - (C4820 + C4821) * C103 +
               (C4822 + C4823) * C116 + (C4824 + C4825) * C104 -
               (C4826 + C4827) * C117 - (C4828 + C4829) * C105 +
               (C4830 + C4831) * C118 + (C4832 + C4833) * C106) *
                  C31728 +
              ((C4783 * C486 + C4779 * C497 + C4784 * C935 + C48253 * C940) *
                   C114 +
               (C4783 * C496 + C4779 * C515 + C4784 * C941 + C48253 * C950) *
                   C102 -
               (C5207 + C5206) * C115 - (C5209 + C5208) * C103 +
               (C5211 + C5210) * C116 + (C5213 + C5212) * C104 -
               (C5503 + C5502) * C117 - (C5505 + C5504) * C105 +
               (C4783 * C489 + C4779 * C503 + C4784 * C939 + C48253 * C948) *
                   C118 +
               (C4783 * C504 + C4779 * C519 + C4784 * C949 + C48253 * C954) *
                   C106) *
                  C48255) *
             C47900 * C47935 * C47923 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                    C293 +
                (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                    C287 -
                (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
                (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
                   C31728 +
               ((C4783 * C486 + C4779 * C497 + C4784 * C935 + C48253 * C940) *
                    C293 +
                (C4783 * C496 + C4779 * C515 + C4784 * C941 + C48253 * C950) *
                    C287 -
                (C5207 + C5206) * C294 - (C5209 + C5208) * C288 +
                (C5211 + C5210) * C295 + (C5213 + C5212) * C48227) *
                   C48255) *
                  C47900 * C47935 * C48274 +
              (((C5012 + C5013) * C294 -
                ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                     C287 +
                 (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                     C293) +
                (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
                (C5018 + C5019) * C48227) *
                   C31728 +
               ((C5717 + C5716) * C294 -
                ((C4784 * C1314 + C48253 * C1327 + C4783 * C941 +
                  C4779 * C950) *
                     C287 +
                 (C4784 * C1300 + C48253 * C1315 + C4783 * C935 +
                  C4779 * C940) *
                     C293) +
                (C5719 + C5718) * C288 - (C5721 + C5720) * C295 -
                (C5723 + C5722) * C48227) *
                   C48255) *
                  C47900 * C47935 * C48262 +
              (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                    C293 +
                (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                    C287 -
                (C5020 + C5021) * C294 - (C5022 + C5023) * C288 +
                (C5024 + C5025) * C295 + (C5026 + C5027) * C48227) *
                   C31728 +
               ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 +
                 C48253 * C1716) *
                    C293 +
                (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 +
                 C48253 * C1722) *
                    C287 -
                (C6459 + C6458) * C294 - (C6461 + C6460) * C288 +
                (C4783 * C1298 + C4779 * C1311 + C4784 * C1715 +
                 C48253 * C1720) *
                    C295 +
                (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 +
                 C48253 * C1724) *
                    C48227) *
                   C48255) *
                  C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C293 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C287 -
            (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
            (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C37487 + C37488) * C293 + (C37489 + C37490) * C287 -
            (C5207 + C5206) * C294 - (C5209 + C5208) * C288 +
            (C5211 + C5210) * C295 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C48275 +
          (((C5206 + C5207) * C294 -
            ((C37490 + C37489) * C287 + (C37488 + C37487) * C293) +
            (C5208 + C5209) * C288 - (C5210 + C5211) * C295 -
            (C5212 + C5213) * C48227) *
               C31728 +
           ((C5215 + C5214) * C294 -
            ((C37491 + C37492) * C287 + (C37493 + C37494) * C293) +
            (C5217 + C5216) * C288 - (C5219 + C5218) * C295 -
            (C5221 + C5220) * C48227) *
               C48255) *
              C47900 * C48264 +
          (((C37494 + C37493) * C293 + (C37492 + C37491) * C287 -
            (C5214 + C5215) * C294 - (C5216 + C5217) * C288 +
            (C5218 + C5219) * C295 + (C5220 + C5221) * C48227) *
               C31728 +
           ((C4783 * C2017 + C4779 * C2026 + C4784 * C2417 + C48253 * C2420) *
                C293 +
            (C4783 * C2025 + C4779 * C2035 + C4784 * C2421 + C48253 * C2426) *
                C287 -
            (C7327 + C7326) * C294 - (C7329 + C7328) * C288 +
            (C4783 * C2015 + C4779 * C2022 + C4784 * C2419 + C48253 * C2424) *
                C295 +
            (C4783 * C2021 + C4779 * C2033 + C4784 * C2425 + C48253 * C2428) *
                C48227) *
               C48255) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C37487 + C37488) * C1089 + (C37489 + C37490) * C48271 -
            (C5207 + C5206) * C1090 - (C5209 + C5208) * C48258 +
            (C5211 + C5210) * C1091 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C47935 * C1086 +
          (((C5012 + C5013) * C1090 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48271 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1089) +
            (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
            (C5018 + C5019) * C48227) *
               C31728 +
           ((C5717 + C5716) * C1090 -
            ((C37957 + C37958) * C48271 + (C37959 + C37960) * C1089) +
            (C5719 + C5718) * C48258 - (C5721 + C5720) * C1091 -
            (C5723 + C5722) * C48227) *
               C48255) *
              C47900 * C47935 * C1087 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1089 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48271 -
            (C5020 + C5021) * C1090 - (C5022 + C5023) * C48258 +
            (C5024 + C5025) * C1091 + (C5026 + C5027) * C48227) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C1089 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C48271 -
            (C6459 + C6458) * C1090 - (C6461 + C6460) * C48258 +
            (C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                C1091 +
            (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1160 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47871) *
               C31728 +
           ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
              C47900 * C47935 * C1155 -
          (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
           ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                C47871 +
            (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                C1160) *
               C31728) *
              C47900 * C47935 * C1156 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1160 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C47871) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C1160 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1157 -
          (((C4784 * C6594 + C48253 * C6597 + C4783 * C1717 + C4779 * C1722) *
                C47871 +
            (C4784 * C6591 + C48253 * C6593 + C4783 * C1713 + C4779 * C1716) *
                C1160) *
               C48255 +
           ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                C47871 +
            (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                C1160) *
               C31728) *
              C47900 * C47935 * C1158 +
          (((C4783 * C1164 + C4779 * C1173 + C4784 * C5951 + C48253 * C5953) *
                C1160 +
            (C4783 * C1174 + C4779 * C1182 + C4784 * C5954 + C48253 * C5957) *
                C47871) *
               C31728 +
           ((C4783 * C6591 + C4779 * C6593 + C4784 * C23206 + C48253 * C23207) *
                C1160 +
            (C4783 * C6594 + C4779 * C6597 + C4784 * C23208 + C48253 * C23209) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C48275 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C48264 +
           (((C37494 + C37493) * C1160 + (C37492 + C37491) * C47871) * C31728 +
            ((C4783 * C2017 + C4779 * C2026 + C4784 * C2417 + C48253 * C2420) *
                 C1160 +
             (C4783 * C2025 + C4779 * C2035 + C4784 * C2421 + C48253 * C2426) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C1086 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C48264 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C48275 -
           (((C4784 * C7462 + C48253 * C7465 + C4783 * C2421 + C4779 * C2426) *
                 C47871 +
             (C4784 * C7459 + C48253 * C7461 + C4783 * C2417 + C4779 * C2420) *
                 C1160) *
                C48255 +
            ((C38362 + C38361) * C47871 + (C38360 + C38359) * C1160) * C31728) *
               C47900 * C48238) *
              C1087 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C31728 +
            ((C38363 + C38364) * C1160 + (C38365 + C38366) * C47871) * C48255) *
               C47900 * C48275 -
           (((C38367 + C38368) * C47871 + (C38369 + C38370) * C1160) * C48255 +
            ((C38366 + C38365) * C47871 + (C38364 + C38363) * C1160) * C31728) *
               C47900 * C48264 +
           (((C38370 + C38369) * C1160 + (C38368 + C38367) * C47871) * C31728 +
            ((C4783 * C7459 + C4779 * C7461 + C4784 * C23838 +
              C48253 * C23839) *
                 C1160 +
             (C4783 * C7462 + C4779 * C7465 + C4784 * C23840 +
              C48253 * C23841) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C37487 + C37488) * C1089 + (C37489 + C37490) * C48271 -
            (C5207 + C5206) * C1090 - (C5209 + C5208) * C48258 +
            (C5211 + C5210) * C1091 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C1835 +
          (((C5206 + C5207) * C1090 -
            ((C37490 + C37489) * C48271 + (C37488 + C37487) * C1089) +
            (C5208 + C5209) * C48258 - (C5210 + C5211) * C1091 -
            (C5212 + C5213) * C48227) *
               C31728 +
           ((C5215 + C5214) * C1090 -
            ((C37491 + C37492) * C48271 + (C37493 + C37494) * C1089) +
            (C5217 + C5216) * C48258 - (C5219 + C5218) * C1091 -
            (C5221 + C5220) * C48227) *
               C48255) *
              C47900 * C1836 +
          (((C37494 + C37493) * C1089 + (C37492 + C37491) * C48271 -
            (C5214 + C5215) * C1090 - (C5216 + C5217) * C48258 +
            (C5218 + C5219) * C1091 + (C5220 + C5221) * C48227) *
               C31728 +
           ((C4783 * C2017 + C4779 * C2026 + C4784 * C2417 + C48253 * C2420) *
                C1089 +
            (C4783 * C2025 + C4779 * C2035 + C4784 * C2421 + C48253 * C2426) *
                C48271 -
            (C7327 + C7326) * C1090 - (C7329 + C7328) * C48258 +
            (C4783 * C2015 + C4779 * C2022 + C4784 * C2419 + C48253 * C2424) *
                C1091 +
            (C4783 * C2021 + C4779 * C2033 + C4784 * C2425 + C48253 * C2428) *
                C48227) *
               C48255) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C1835 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C1836 +
           (((C37494 + C37493) * C1160 + (C37492 + C37491) * C47871) * C31728 +
            ((C4783 * C2017 + C4779 * C2026 + C4784 * C2417 + C48253 * C2420) *
                 C1160 +
             (C4783 * C2025 + C4779 * C2035 + C4784 * C2421 + C48253 * C2426) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48274 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C1836 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C1835 -
           (((C4784 * C7462 + C48253 * C7465 + C4783 * C2421 + C4779 * C2426) *
                 C47871 +
             (C4784 * C7459 + C48253 * C7461 + C4783 * C2417 + C4779 * C2420) *
                 C1160) *
                C48255 +
            ((C38362 + C38361) * C47871 + (C38360 + C38359) * C1160) * C31728) *
               C47900 * C48238) *
              C48262 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C31728 +
            ((C38363 + C38364) * C1160 + (C38365 + C38366) * C47871) * C48255) *
               C47900 * C1835 -
           (((C38367 + C38368) * C47871 + (C38369 + C38370) * C1160) * C48255 +
            ((C38366 + C38365) * C47871 + (C38364 + C38363) * C1160) * C31728) *
               C47900 * C1836 +
           (((C38370 + C38369) * C1160 + (C38368 + C38367) * C47871) * C31728 +
            ((C4783 * C7459 + C4779 * C7461 + C4784 * C23838 +
              C48253 * C23839) *
                 C1160 +
             (C4783 * C7462 + C4779 * C7465 + C4784 * C23840 +
              C48253 * C23841) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1160 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47871) *
               C31728 +
           ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
              C47900 * C2010 -
          (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
           ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
              C47900 * C2011 +
          (((C37494 + C37493) * C1160 + (C37492 + C37491) * C47871) * C31728 +
           ((C39227 + C39228) * C1160 + (C39229 + C39230) * C47871) * C48255) *
              C47900 * C2012 -
          (((C39231 + C39232) * C47871 + (C39233 + C39234) * C1160) * C48255 +
           ((C39230 + C39229) * C47871 + (C39228 + C39227) * C1160) * C31728) *
              C47900 * C2013 +
          (((C39234 + C39233) * C1160 + (C39232 + C39231) * C47871) * C31728 +
           ((C4783 * C12645 + C4779 * C12647 + C4784 * C28188 +
             C48253 * C28189) *
                C1160 +
            (C4783 * C12648 + C4779 * C12651 + C4784 * C28190 +
             C48253 * C28191) *
                C47871) *
               C48255) *
              C47900 * C2014) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46986 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48186 -
             (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
                C31728 +
            ((C37487 + C37488) * C46986 + (C37489 + C37490) * C48186 -
             (C5207 + C5206) * C46967 - (C5209 + C5208) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C5206 + C5207) * C46967 -
             ((C37490 + C37489) * C48186 + (C37488 + C37487) * C46986) +
             (C5208 + C5209) * C47881) *
                C31728 +
            ((C5215 + C5214) * C46967 -
             ((C37491 + C37492) * C48186 + (C37493 + C37494) * C46986) +
             (C5217 + C5216) * C47881) *
                C48255) *
               C47900 * C48022) *
              C1086 +
          ((((C5012 + C5013) * C46967 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48186 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46986) +
             (C5014 + C5015) * C47881) *
                C31728 +
            ((C5717 + C5716) * C46967 -
             ((C37957 + C37958) * C48186 + (C37959 + C37960) * C46986) +
             (C5719 + C5718) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C37960 + C37959) * C46986 + (C37958 + C37957) * C48186 -
             (C5716 + C5717) * C46967 - (C5718 + C5719) * C47881) *
                C31728 +
            ((C38359 + C38360) * C46986 + (C38361 + C38362) * C48186 -
             (C7185 + C7184) * C46967 - (C7187 + C7186) * C47881) *
                C48255) *
               C47900 * C48022) *
              C1087 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C46986 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C48186 -
             (C5020 + C5021) * C46967 - (C5022 + C5023) * C47881) *
                C31728 +
            ((C38363 + C38364) * C46986 + (C38365 + C38366) * C48186 -
             (C6459 + C6458) * C46967 - (C6461 + C6460) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C6458 + C6459) * C46967 -
             ((C38366 + C38365) * C48186 + (C38364 + C38363) * C46986) +
             (C6460 + C6461) * C47881) *
                C31728 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C46967 -
             ((C38367 + C38368) * C48186 + (C38369 + C38370) * C46986) +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C665 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C659 -
            (C4818 + C4819) * C666 - (C4820 + C4821) * C660 +
            (C4822 + C4823) * C667 + (C4824 + C4825) * C661 -
            (C4826 + C4827) * C668 - (C4828 + C4829) * C48239) *
               C31728 +
           ((C37487 + C37488) * C665 + (C37489 + C37490) * C659 -
            (C5207 + C5206) * C666 - (C5209 + C5208) * C660 +
            (C5211 + C5210) * C667 + (C5213 + C5212) * C661 -
            (C5503 + C5502) * C668 - (C5505 + C5504) * C48239) *
               C48255) *
              C47900 * C48204 +
          (((C5206 + C5207) * C666 -
            ((C37490 + C37489) * C659 + (C37488 + C37487) * C665) +
            (C5208 + C5209) * C660 - (C5210 + C5211) * C667 -
            (C5212 + C5213) * C661 + (C5502 + C5503) * C668 +
            (C5504 + C5505) * C48239) *
               C31728 +
           ((C5215 + C5214) * C666 -
            ((C37491 + C37492) * C659 + (C37493 + C37494) * C665) +
            (C5217 + C5216) * C660 - (C5219 + C5218) * C667 -
            (C5221 + C5220) * C661 +
            (C4783 * C493 + C4779 * C511 + C4784 * C2185 + C48253 * C2186) *
                C668 +
            (C4783 * C512 + C4779 * C523 + C4784 * C2187 + C48253 * C2188) *
                C48239) *
               C48255) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C46986 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48186 -
            (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
               C31728 +
           ((C37487 + C37488) * C46986 + (C37489 + C37490) * C48186 -
            (C5207 + C5206) * C46967 - (C5209 + C5208) * C47881) *
               C48255) *
              C47900 * C2299 +
          (((C5206 + C5207) * C46967 -
            ((C37490 + C37489) * C48186 + (C37488 + C37487) * C46986) +
            (C5208 + C5209) * C47881) *
               C31728 +
           ((C5215 + C5214) * C46967 -
            ((C37491 + C37492) * C48186 + (C37493 + C37494) * C46986) +
            (C5217 + C5216) * C47881) *
               C48255) *
              C47900 * C2300 +
          (((C37494 + C37493) * C46986 + (C37492 + C37491) * C48186 -
            (C5214 + C5215) * C46967 - (C5216 + C5217) * C47881) *
               C31728 +
           ((C39227 + C39228) * C46986 + (C39229 + C39230) * C48186 -
            (C7327 + C7326) * C46967 - (C7329 + C7328) * C47881) *
               C48255) *
              C47900 * C2301 +
          (((C7326 + C7327) * C46967 -
            ((C39230 + C39229) * C48186 + (C39228 + C39227) * C46986) +
            (C7328 + C7329) * C47881) *
               C31728 +
           ((C4783 * C2019 + C4779 * C2029 + C4784 * C6974 + C48253 * C6977) *
                C46967 -
            ((C39231 + C39232) * C48186 + (C39233 + C39234) * C46986) +
            (C4783 * C2030 + C4779 * C2037 + C4784 * C6978 + C48253 * C6980) *
                C47881) *
               C48255) *
              C47900 * C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C293 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C287 -
            (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
            (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C4783 * C486 + C4779 * C497 + C4784 * C935 + C48253 * C940) *
                C293 +
            (C4783 * C496 + C4779 * C515 + C4784 * C941 + C48253 * C950) *
                C287 -
            (C5207 + C5206) * C294 - (C5209 + C5208) * C288 +
            (C5211 + C5210) * C295 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C47935 * C48274 +
          (((C5012 + C5013) * C294 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C287 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C293) +
            (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
            (C5018 + C5019) * C48227) *
               C31728 +
           ((C5717 + C5716) * C294 -
            ((C4784 * C1314 + C48253 * C1327 + C4783 * C941 + C4779 * C950) *
                 C287 +
             (C4784 * C1300 + C48253 * C1315 + C4783 * C935 + C4779 * C940) *
                 C293) +
            (C5719 + C5718) * C288 - (C5721 + C5720) * C295 -
            (C5723 + C5722) * C48227) *
               C48255) *
              C47900 * C47935 * C48262 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C293 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C287 -
            (C5020 + C5021) * C294 - (C5022 + C5023) * C288 +
            (C5024 + C5025) * C295 + (C5026 + C5027) * C48227) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C293 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C287 -
            (C6459 + C6458) * C294 - (C6461 + C6460) * C288 +
            (C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                C295 +
            (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) * C114 +
           (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) * C102 -
           (C4818 + C4819) * C115 - (C4820 + C4821) * C103 +
           (C4822 + C4823) * C116 + (C4824 + C4825) * C104 -
           (C4826 + C4827) * C117 - (C4828 + C4829) * C105 +
           (C4830 + C4831) * C118 + (C4832 + C4833) * C106) *
              C31728 +
          ((C4783 * C486 + C4779 * C497 + C4784 * C935 + C48253 * C940) * C114 +
           (C4783 * C496 + C4779 * C515 + C4784 * C941 + C48253 * C950) * C102 -
           (C5207 + C5206) * C115 - (C5209 + C5208) * C103 +
           (C5211 + C5210) * C116 + (C5213 + C5212) * C104 -
           (C5503 + C5502) * C117 - (C5505 + C5504) * C105 +
           (C4783 * C489 + C4779 * C503 + C4784 * C939 + C48253 * C948) * C118 +
           (C4783 * C504 + C4779 * C519 + C4784 * C949 + C48253 * C954) *
               C106) *
              C48255) *
         C47900 * C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C37487 + C37488) * C1089 + (C37489 + C37490) * C48271 -
            (C5207 + C5206) * C1090 - (C5209 + C5208) * C48258 +
            (C5211 + C5210) * C1091 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C47935 * C1086 +
          (((C5012 + C5013) * C1090 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48271 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1089) +
            (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
            (C5018 + C5019) * C48227) *
               C31728 +
           ((C5717 + C5716) * C1090 -
            ((C37957 + C37958) * C48271 + (C37959 + C37960) * C1089) +
            (C5719 + C5718) * C48258 - (C5721 + C5720) * C1091 -
            (C5723 + C5722) * C48227) *
               C48255) *
              C47900 * C47935 * C1087 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1089 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48271 -
            (C5020 + C5021) * C1090 - (C5022 + C5023) * C48258 +
            (C5024 + C5025) * C1091 + (C5026 + C5027) * C48227) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C1089 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C48271 -
            (C6459 + C6458) * C1090 - (C6461 + C6460) * C48258 +
            (C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                C1091 +
            (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1160 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47871) *
               C31728 +
           ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
              C47900 * C47935 * C1155 -
          (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
           ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                C47871 +
            (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                C1160) *
               C31728) *
              C47900 * C47935 * C1156 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1160 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C47871) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C1160 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1157 -
          (((C4784 * C6594 + C48253 * C6597 + C4783 * C1717 + C4779 * C1722) *
                C47871 +
            (C4784 * C6591 + C48253 * C6593 + C4783 * C1713 + C4779 * C1716) *
                C1160) *
               C48255 +
           ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                C47871 +
            (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                C1160) *
               C31728) *
              C47900 * C47935 * C1158 +
          (((C4783 * C1164 + C4779 * C1173 + C4784 * C5951 + C48253 * C5953) *
                C1160 +
            (C4783 * C1174 + C4779 * C1182 + C4784 * C5954 + C48253 * C5957) *
                C47871) *
               C31728 +
           ((C4783 * C6591 + C4779 * C6593 + C4784 * C23206 + C48253 * C23207) *
                C1160 +
            (C4783 * C6594 + C4779 * C6597 + C4784 * C23208 + C48253 * C23209) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C37487 + C37488) * C1089 + (C37489 + C37490) * C48271 -
            (C5207 + C5206) * C1090 - (C5209 + C5208) * C48258 +
            (C5211 + C5210) * C1091 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C1835 +
          (((C5206 + C5207) * C1090 -
            ((C37490 + C37489) * C48271 + (C37488 + C37487) * C1089) +
            (C5208 + C5209) * C48258 - (C5210 + C5211) * C1091 -
            (C5212 + C5213) * C48227) *
               C31728 +
           ((C5215 + C5214) * C1090 -
            ((C37491 + C37492) * C48271 + (C37493 + C37494) * C1089) +
            (C5217 + C5216) * C48258 - (C5219 + C5218) * C1091 -
            (C5221 + C5220) * C48227) *
               C48255) *
              C47900 * C1836 +
          (((C37494 + C37493) * C1089 + (C37492 + C37491) * C48271 -
            (C5214 + C5215) * C1090 - (C5216 + C5217) * C48258 +
            (C5218 + C5219) * C1091 + (C5220 + C5221) * C48227) *
               C31728 +
           ((C4783 * C2017 + C4779 * C2026 + C4784 * C2417 + C48253 * C2420) *
                C1089 +
            (C4783 * C2025 + C4779 * C2035 + C4784 * C2421 + C48253 * C2426) *
                C48271 -
            (C7327 + C7326) * C1090 - (C7329 + C7328) * C48258 +
            (C4783 * C2015 + C4779 * C2022 + C4784 * C2419 + C48253 * C2424) *
                C1091 +
            (C4783 * C2021 + C4779 * C2033 + C4784 * C2425 + C48253 * C2428) *
                C48227) *
               C48255) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C1835 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C1836 +
           (((C37494 + C37493) * C1160 + (C37492 + C37491) * C47871) * C31728 +
            ((C4783 * C2017 + C4779 * C2026 + C4784 * C2417 + C48253 * C2420) *
                 C1160 +
             (C4783 * C2025 + C4779 * C2035 + C4784 * C2421 + C48253 * C2426) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48274 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C1836 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C1835 -
           (((C4784 * C7462 + C48253 * C7465 + C4783 * C2421 + C4779 * C2426) *
                 C47871 +
             (C4784 * C7459 + C48253 * C7461 + C4783 * C2417 + C4779 * C2420) *
                 C1160) *
                C48255 +
            ((C38362 + C38361) * C47871 + (C38360 + C38359) * C1160) * C31728) *
               C47900 * C48238) *
              C48262 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C31728 +
            ((C38363 + C38364) * C1160 + (C38365 + C38366) * C47871) * C48255) *
               C47900 * C1835 -
           (((C38367 + C38368) * C47871 + (C38369 + C38370) * C1160) * C48255 +
            ((C38366 + C38365) * C47871 + (C38364 + C38363) * C1160) * C31728) *
               C47900 * C1836 +
           (((C38370 + C38369) * C1160 + (C38368 + C38367) * C47871) * C31728 +
            ((C4783 * C7459 + C4779 * C7461 + C4784 * C23838 +
              C48253 * C23839) *
                 C1160 +
             (C4783 * C7462 + C4779 * C7465 + C4784 * C23840 +
              C48253 * C23841) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46996 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47876 -
             (C4818 + C4819) * C46992 - (C4820 + C4821) * C47884 +
             (C4822 + C4823) * C47002 + (C4824 + C4825) * C2901) *
                C31728 +
            ((C37487 + C37488) * C46996 + (C37489 + C37490) * C47876 -
             (C5207 + C5206) * C46992 - (C5209 + C5208) * C47884 +
             (C5211 + C5210) * C47002 + (C5213 + C5212) * C2901) *
                C48255) *
               C47900 * C3298 +
           (((C5206 + C5207) * C46992 -
             ((C37490 + C37489) * C47876 + (C37488 + C37487) * C46996) +
             (C5208 + C5209) * C47884 - (C5210 + C5211) * C47002 -
             (C5212 + C5213) * C2901) *
                C31728 +
            ((C5215 + C5214) * C46992 -
             ((C37491 + C37492) * C47876 + (C37493 + C37494) * C46996) +
             (C5217 + C5216) * C47884 - (C5219 + C5218) * C47002 -
             (C5221 + C5220) * C2901) *
                C48255) *
               C47900 * C48022) *
              C48203 +
          ((((C5012 + C5013) * C46992 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C47876 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46996) +
             (C5014 + C5015) * C47884 - (C5016 + C5017) * C47002 -
             (C5018 + C5019) * C2901) *
                C31728 +
            ((C5717 + C5716) * C46992 -
             ((C37957 + C37958) * C47876 + (C37959 + C37960) * C46996) +
             (C5719 + C5718) * C47884 - (C5721 + C5720) * C47002 -
             (C5723 + C5722) * C2901) *
                C48255) *
               C47900 * C3298 +
           (((C37960 + C37959) * C46996 + (C37958 + C37957) * C47876 -
             (C5716 + C5717) * C46992 - (C5718 + C5719) * C47884 +
             (C5720 + C5721) * C47002 + (C5722 + C5723) * C2901) *
                C31728 +
            ((C38359 + C38360) * C46996 + (C38361 + C38362) * C47876 -
             (C7185 + C7184) * C46992 - (C7187 + C7186) * C47884 +
             (C4783 * C1295 + C4779 * C1305 + C4784 * C1303 + C48253 * C1320) *
                 C47002 +
             (C4783 * C1304 + C4779 * C1322 + C4784 * C1321 + C48253 * C1330) *
                 C2901) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C2641 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C2635 -
             (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
                C31728 +
            ((C37487 + C37488) * C2641 + (C37489 + C37490) * C2635 -
             (C5207 + C5206) * C2642 - (C5209 + C5208) * C47881) *
                C48255) *
               C47900 * C48018 +
           (((C5206 + C5207) * C2642 -
             ((C37490 + C37489) * C2635 + (C37488 + C37487) * C2641) +
             (C5208 + C5209) * C47881) *
                C31728 +
            ((C5215 + C5214) * C2642 -
             ((C37491 + C37492) * C2635 + (C37493 + C37494) * C2641) +
             (C5217 + C5216) * C47881) *
                C48255) *
               C47900 * C48025 +
           (((C37494 + C37493) * C2641 + (C37492 + C37491) * C2635 -
             (C5214 + C5215) * C2642 - (C5216 + C5217) * C47881) *
                C31728 +
            ((C39227 + C39228) * C2641 + (C39229 + C39230) * C2635 -
             (C7327 + C7326) * C2642 - (C7329 + C7328) * C47881) *
                C48255) *
               C47900 * C3806) *
              C48203 +
          ((((C5012 + C5013) * C2642 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C2635 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C2641) +
             (C5014 + C5015) * C47881) *
                C31728 +
            ((C5717 + C5716) * C2642 -
             ((C37957 + C37958) * C2635 + (C37959 + C37960) * C2641) +
             (C5719 + C5718) * C47881) *
                C48255) *
               C47900 * C48018 +
           (((C37960 + C37959) * C2641 + (C37958 + C37957) * C2635 -
             (C5716 + C5717) * C2642 - (C5718 + C5719) * C47881) *
                C31728 +
            ((C38359 + C38360) * C2641 + (C38361 + C38362) * C2635 -
             (C7185 + C7184) * C2642 - (C7187 + C7186) * C47881) *
                C48255) *
               C47900 * C48025 +
           (((C7184 + C7185) * C2642 -
             ((C38362 + C38361) * C2635 + (C38360 + C38359) * C2641) +
             (C7186 + C7187) * C47881) *
                C31728 +
            ((C4783 * C2418 + C4779 * C2422 + C4784 * C7460 + C48253 * C7463) *
                 C2642 -
             ((C39697 + C39698) * C2635 + (C39699 + C39700) * C2641) +
             (C4783 * C2423 + C4779 * C2427 + C4784 * C7464 + C48253 * C7466) *
                 C47881) *
                C48255) *
               C47900 * C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C2641 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C2635 -
             (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
                C31728 +
            ((C37487 + C37488) * C2641 + (C37489 + C37490) * C2635 -
             (C5207 + C5206) * C2642 - (C5209 + C5208) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C5206 + C5207) * C2642 -
             ((C37490 + C37489) * C2635 + (C37488 + C37487) * C2641) +
             (C5208 + C5209) * C47881) *
                C31728 +
            ((C5215 + C5214) * C2642 -
             ((C37491 + C37492) * C2635 + (C37493 + C37494) * C2641) +
             (C5217 + C5216) * C47881) *
                C48255) *
               C47900 * C48022) *
              C48274 +
          ((((C5012 + C5013) * C2642 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C2635 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C2641) +
             (C5014 + C5015) * C47881) *
                C31728 +
            ((C5717 + C5716) * C2642 -
             ((C37957 + C37958) * C2635 + (C37959 + C37960) * C2641) +
             (C5719 + C5718) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C37960 + C37959) * C2641 + (C37958 + C37957) * C2635 -
             (C5716 + C5717) * C2642 - (C5718 + C5719) * C47881) *
                C31728 +
            ((C38359 + C38360) * C2641 + (C38361 + C38362) * C2635 -
             (C7185 + C7184) * C2642 - (C7187 + C7186) * C47881) *
                C48255) *
               C47900 * C48022) *
              C48262 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C2641 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C2635 -
             (C5020 + C5021) * C2642 - (C5022 + C5023) * C47881) *
                C31728 +
            ((C38363 + C38364) * C2641 + (C38365 + C38366) * C2635 -
             (C6459 + C6458) * C2642 - (C6461 + C6460) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C6458 + C6459) * C2642 -
             ((C38366 + C38365) * C2635 + (C38364 + C38363) * C2641) +
             (C6460 + C6461) * C47881) *
                C31728 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C2642 -
             ((C38367 + C38368) * C2635 + (C38369 + C38370) * C2641) +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2533 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48280 -
            (C4818 + C4819) * C2534 - (C4820 + C4821) * C48273 +
            (C4822 + C4823) * C2535 + (C4824 + C4825) * C48260 -
            (C4826 + C4827) * C2536 - (C4828 + C4829) * C48239) *
               C31728 +
           ((C37487 + C37488) * C2533 + (C37489 + C37490) * C48280 -
            (C5207 + C5206) * C2534 - (C5209 + C5208) * C48273 +
            (C5211 + C5210) * C2535 + (C5213 + C5212) * C48260 -
            (C5503 + C5502) * C2536 - (C5505 + C5504) * C48239) *
               C48255) *
              C47900 * C3298 +
          (((C5206 + C5207) * C2534 -
            ((C37490 + C37489) * C48280 + (C37488 + C37487) * C2533) +
            (C5208 + C5209) * C48273 - (C5210 + C5211) * C2535 -
            (C5212 + C5213) * C48260 + (C5502 + C5503) * C2536 +
            (C5504 + C5505) * C48239) *
               C31728 +
           ((C5215 + C5214) * C2534 -
            ((C37491 + C37492) * C48280 + (C37493 + C37494) * C2533) +
            (C5217 + C5216) * C48273 - (C5219 + C5218) * C2535 -
            (C5221 + C5220) * C48260 +
            (C4783 * C493 + C4779 * C511 + C4784 * C2185 + C48253 * C2186) *
                C2536 +
            (C4783 * C512 + C4779 * C523 + C4784 * C2187 + C48253 * C2188) *
                C48239) *
               C48255) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2641 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C2635 -
            (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
               C31728 +
           ((C37487 + C37488) * C2641 + (C37489 + C37490) * C2635 -
            (C5207 + C5206) * C2642 - (C5209 + C5208) * C47881) *
               C48255) *
              C47900 * C48282 +
          (((C5206 + C5207) * C2642 -
            ((C37490 + C37489) * C2635 + (C37488 + C37487) * C2641) +
            (C5208 + C5209) * C47881) *
               C31728 +
           ((C5215 + C5214) * C2642 -
            ((C37491 + C37492) * C2635 + (C37493 + C37494) * C2641) +
            (C5217 + C5216) * C47881) *
               C48255) *
              C47900 * C48279 +
          (((C37494 + C37493) * C2641 + (C37492 + C37491) * C2635 -
            (C5214 + C5215) * C2642 - (C5216 + C5217) * C47881) *
               C31728 +
           ((C39227 + C39228) * C2641 + (C39229 + C39230) * C2635 -
            (C7327 + C7326) * C2642 - (C7329 + C7328) * C47881) *
               C48255) *
              C47900 * C48270 +
          (((C7326 + C7327) * C2642 -
            ((C39230 + C39229) * C2635 + (C39228 + C39227) * C2641) +
            (C7328 + C7329) * C47881) *
               C31728 +
           ((C4783 * C2019 + C4779 * C2029 + C4784 * C6974 + C48253 * C6977) *
                C2642 -
            ((C39231 + C39232) * C2635 + (C39233 + C39234) * C2641) +
            (C4783 * C2030 + C4779 * C2037 + C4784 * C6978 + C48253 * C6980) *
                C47881) *
               C48255) *
              C47900 * C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C46996 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47876 -
            (C4818 + C4819) * C46992 - (C4820 + C4821) * C47884 +
            (C4822 + C4823) * C47002 + (C4824 + C4825) * C2901) *
               C31728 +
           ((C37487 + C37488) * C46996 + (C37489 + C37490) * C47876 -
            (C5207 + C5206) * C46992 - (C5209 + C5208) * C47884 +
            (C5211 + C5210) * C47002 + (C5213 + C5212) * C2901) *
               C48255) *
              C47900 * C48018 +
          (((C5206 + C5207) * C46992 -
            ((C37490 + C37489) * C47876 + (C37488 + C37487) * C46996) +
            (C5208 + C5209) * C47884 - (C5210 + C5211) * C47002 -
            (C5212 + C5213) * C2901) *
               C31728 +
           ((C5215 + C5214) * C46992 -
            ((C37491 + C37492) * C47876 + (C37493 + C37494) * C46996) +
            (C5217 + C5216) * C47884 - (C5219 + C5218) * C47002 -
            (C5221 + C5220) * C2901) *
               C48255) *
              C47900 * C48025 +
          (((C37494 + C37493) * C46996 + (C37492 + C37491) * C47876 -
            (C5214 + C5215) * C46992 - (C5216 + C5217) * C47884 +
            (C5218 + C5219) * C47002 + (C5220 + C5221) * C2901) *
               C31728 +
           ((C39227 + C39228) * C46996 + (C39229 + C39230) * C47876 -
            (C7327 + C7326) * C46992 - (C7329 + C7328) * C47884 +
            (C4783 * C2015 + C4779 * C2022 + C4784 * C2419 + C48253 * C2424) *
                C47002 +
            (C4783 * C2021 + C4779 * C2033 + C4784 * C2425 + C48253 * C2428) *
                C2901) *
               C48255) *
              C47900 * C3806) *
         C47923) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C2533 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48280 -
            (C4818 + C4819) * C2534 - (C4820 + C4821) * C48273 +
            (C4822 + C4823) * C2535 + (C4824 + C4825) * C48260 -
            (C4826 + C4827) * C2536 - (C4828 + C4829) * C48239) *
               C31728 +
           ((C37487 + C37488) * C2533 + (C37489 + C37490) * C48280 -
            (C5207 + C5206) * C2534 - (C5209 + C5208) * C48273 +
            (C5211 + C5210) * C2535 + (C5213 + C5212) * C48260 -
            (C5503 + C5502) * C2536 - (C5505 + C5504) * C48239) *
               C48255) *
              C47900 * C3298 +
          (((C5206 + C5207) * C2534 -
            ((C37490 + C37489) * C48280 + (C37488 + C37487) * C2533) +
            (C5208 + C5209) * C48273 - (C5210 + C5211) * C2535 -
            (C5212 + C5213) * C48260 + (C5502 + C5503) * C2536 +
            (C5504 + C5505) * C48239) *
               C31728 +
           ((C5215 + C5214) * C2534 -
            ((C37491 + C37492) * C48280 + (C37493 + C37494) * C2533) +
            (C5217 + C5216) * C48273 - (C5219 + C5218) * C2535 -
            (C5221 + C5220) * C48260 +
            (C4783 * C493 + C4779 * C511 + C4784 * C2185 + C48253 * C2186) *
                C2536 +
            (C4783 * C512 + C4779 * C523 + C4784 * C2187 + C48253 * C2188) *
                C48239) *
               C48255) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C2641 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C2635 -
             (C4818 + C4819) * C2642 - (C4820 + C4821) * C47881) *
                C31728 +
            ((C37487 + C37488) * C2641 + (C37489 + C37490) * C2635 -
             (C5207 + C5206) * C2642 - (C5209 + C5208) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C5206 + C5207) * C2642 -
             ((C37490 + C37489) * C2635 + (C37488 + C37487) * C2641) +
             (C5208 + C5209) * C47881) *
                C31728 +
            ((C5215 + C5214) * C2642 -
             ((C37491 + C37492) * C2635 + (C37493 + C37494) * C2641) +
             (C5217 + C5216) * C47881) *
                C48255) *
               C47900 * C48022) *
              C48274 +
          ((((C5012 + C5013) * C2642 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C2635 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C2641) +
             (C5014 + C5015) * C47881) *
                C31728 +
            ((C5717 + C5716) * C2642 -
             ((C37957 + C37958) * C2635 + (C37959 + C37960) * C2641) +
             (C5719 + C5718) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C37960 + C37959) * C2641 + (C37958 + C37957) * C2635 -
             (C5716 + C5717) * C2642 - (C5718 + C5719) * C47881) *
                C31728 +
            ((C38359 + C38360) * C2641 + (C38361 + C38362) * C2635 -
             (C7185 + C7184) * C2642 - (C7187 + C7186) * C47881) *
                C48255) *
               C47900 * C48022) *
              C48262 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C2641 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C2635 -
             (C5020 + C5021) * C2642 - (C5022 + C5023) * C47881) *
                C31728 +
            ((C38363 + C38364) * C2641 + (C38365 + C38366) * C2635 -
             (C6459 + C6458) * C2642 - (C6461 + C6460) * C47881) *
                C48255) *
               C47900 * C3298 +
           (((C6458 + C6459) * C2642 -
             ((C38366 + C38365) * C2635 + (C38364 + C38363) * C2641) +
             (C6460 + C6461) * C47881) *
                C31728 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C2642 -
             ((C38367 + C38368) * C2635 + (C38369 + C38370) * C2641) +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C665 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C659 -
            (C4818 + C4819) * C666 - (C4820 + C4821) * C660 +
            (C4822 + C4823) * C667 + (C4824 + C4825) * C661 -
            (C4826 + C4827) * C668 - (C4828 + C4829) * C48239) *
               C31728 +
           ((C37487 + C37488) * C665 + (C37489 + C37490) * C659 -
            (C5207 + C5206) * C666 - (C5209 + C5208) * C660 +
            (C5211 + C5210) * C667 + (C5213 + C5212) * C661 -
            (C5503 + C5502) * C668 - (C5505 + C5504) * C48239) *
               C48255) *
              C47900 * C47935 * C48203 +
          (((C5012 + C5013) * C666 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C659 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C665) +
            (C5014 + C5015) * C660 - (C5016 + C5017) * C667 -
            (C5018 + C5019) * C661 + (C5360 + C5361) * C668 +
            (C5362 + C5363) * C48239) *
               C31728 +
           ((C5717 + C5716) * C666 -
            ((C4784 * C1314 + C48253 * C1327 + C4783 * C941 + C4779 * C950) *
                 C659 +
             (C4784 * C1300 + C48253 * C1315 + C4783 * C935 + C4779 * C940) *
                 C665) +
            (C5719 + C5718) * C660 - (C5721 + C5720) * C667 -
            (C5723 + C5722) * C661 +
            (C4783 * C938 + C4779 * C946 + C4784 * C1599 + C48253 * C1600) *
                C668 +
            (C4783 * C947 + C4779 * C953 + C4784 * C1601 + C48253 * C1602) *
                C48239) *
               C48255) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C46986 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48186 -
            (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
               C31728 +
           ((C37487 + C37488) * C46986 + (C37489 + C37490) * C48186 -
            (C5207 + C5206) * C46967 - (C5209 + C5208) * C47881) *
               C48255) *
              C47900 * C47935 * C1431 +
          (((C5012 + C5013) * C46967 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48186 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C46986) +
            (C5014 + C5015) * C47881) *
               C31728 +
           ((C5717 + C5716) * C46967 -
            ((C37957 + C37958) * C48186 + (C37959 + C37960) * C46986) +
            (C5719 + C5718) * C47881) *
               C48255) *
              C47900 * C47935 * C1432 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C46986 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48186 -
            (C5020 + C5021) * C46967 - (C5022 + C5023) * C47881) *
               C31728 +
           ((C38363 + C38364) * C46986 + (C38365 + C38366) * C48186 -
            (C6459 + C6458) * C46967 - (C6461 + C6460) * C47881) *
               C48255) *
              C47900 * C47935 * C1433 +
          (((C6252 + C6253) * C46967 -
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C48186 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C46986) +
            (C6254 + C6255) * C47881) *
               C31728 +
           ((C4783 * C1714 + C4779 * C1718 + C4784 * C6592 + C48253 * C6595) *
                C46967 -
            ((C4784 * C6594 + C48253 * C6597 + C4783 * C1717 + C4779 * C1722) *
                 C48186 +
             (C4784 * C6591 + C48253 * C6593 + C4783 * C1713 + C4779 * C1716) *
                 C46986) +
            (C4783 * C1719 + C4779 * C1723 + C4784 * C6596 + C48253 * C6598) *
                C47881) *
               C48255) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C293 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C287 -
             (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
             (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
                C31728 +
            ((C37487 + C37488) * C293 + (C37489 + C37490) * C287 -
             (C5207 + C5206) * C294 - (C5209 + C5208) * C288 +
             (C5211 + C5210) * C295 + (C5213 + C5212) * C48227) *
                C48255) *
               C47900 * C48204 +
           (((C5206 + C5207) * C294 -
             ((C37490 + C37489) * C287 + (C37488 + C37487) * C293) +
             (C5208 + C5209) * C288 - (C5210 + C5211) * C295 -
             (C5212 + C5213) * C48227) *
                C31728 +
            ((C5215 + C5214) * C294 -
             ((C37491 + C37492) * C287 + (C37493 + C37494) * C293) +
             (C5217 + C5216) * C288 - (C5219 + C5218) * C295 -
             (C5221 + C5220) * C48227) *
                C48255) *
               C47900 * C48022) *
              C48203 +
          ((((C5012 + C5013) * C294 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C287 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C293) +
             (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
             (C5018 + C5019) * C48227) *
                C31728 +
            ((C5717 + C5716) * C294 -
             ((C37957 + C37958) * C287 + (C37959 + C37960) * C293) +
             (C5719 + C5718) * C288 - (C5721 + C5720) * C295 -
             (C5723 + C5722) * C48227) *
                C48255) *
               C47900 * C48204 +
           (((C37960 + C37959) * C293 + (C37958 + C37957) * C287 -
             (C5716 + C5717) * C294 - (C5718 + C5719) * C288 +
             (C5720 + C5721) * C295 + (C5722 + C5723) * C48227) *
                C31728 +
            ((C4783 * C1297 + C4779 * C1309 + C4784 * C1301 + C48253 * C1316) *
                 C293 +
             (C4783 * C1308 + C4779 * C1324 + C4784 * C1317 + C48253 * C1328) *
                 C287 -
             (C7185 + C7184) * C294 - (C7187 + C7186) * C288 +
             (C4783 * C1295 + C4779 * C1305 + C4784 * C1303 + C48253 * C1320) *
                 C295 +
             (C4783 * C1304 + C4779 * C1322 + C4784 * C1321 + C48253 * C1330) *
                 C48227) *
                C48255) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C48204 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C48022) *
              C1431 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C48022 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C48204) *
              C1432 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C31728 +
            ((C38363 + C38364) * C1160 + (C38365 + C38366) * C47871) * C48255) *
               C47900 * C48204 -
           (((C38367 + C38368) * C47871 + (C38369 + C38370) * C1160) * C48255 +
            ((C38366 + C38365) * C47871 + (C38364 + C38363) * C1160) * C31728) *
               C47900 * C48022) *
              C1433 +
          ((((C38833 + C38834) * C1160 + (C38835 + C38836) * C47871) * C31728 +
            ((C4783 * C6105 + C4779 * C6107 + C4784 * C22860 +
              C48253 * C22861) *
                 C1160 +
             (C4783 * C6108 + C4779 * C6111 + C4784 * C22862 +
              C48253 * C22863) *
                 C47871) *
                C48255) *
               C47900 * C48022 -
           (((C38836 + C38835) * C47871 + (C38834 + C38833) * C1160) * C48255 +
            ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                 C47871 +
             (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                 C1160) *
                C31728) *
               C47900 * C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C293 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C287 -
            (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
            (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C4783 * C486 + C4779 * C497 + C4784 * C935 + C48253 * C940) *
                C293 +
            (C4783 * C496 + C4779 * C515 + C4784 * C941 + C48253 * C950) *
                C287 -
            (C5207 + C5206) * C294 - (C5209 + C5208) * C288 +
            (C5211 + C5210) * C295 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C47935 * C48274 +
          (((C5012 + C5013) * C294 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C287 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C293) +
            (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
            (C5018 + C5019) * C48227) *
               C31728 +
           ((C5717 + C5716) * C294 -
            ((C4784 * C1314 + C48253 * C1327 + C4783 * C941 + C4779 * C950) *
                 C287 +
             (C4784 * C1300 + C48253 * C1315 + C4783 * C935 + C4779 * C940) *
                 C293) +
            (C5719 + C5718) * C288 - (C5721 + C5720) * C295 -
            (C5723 + C5722) * C48227) *
               C48255) *
              C47900 * C47935 * C48262 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C293 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C287 -
            (C5020 + C5021) * C294 - (C5022 + C5023) * C288 +
            (C5024 + C5025) * C295 + (C5026 + C5027) * C48227) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C293 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C287 -
            (C6459 + C6458) * C294 - (C6461 + C6460) * C288 +
            (C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                C295 +
            (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) * C114 +
           (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) * C102 -
           (C4818 + C4819) * C115 - (C4820 + C4821) * C103 +
           (C4822 + C4823) * C116 + (C4824 + C4825) * C104 -
           (C4826 + C4827) * C117 - (C4828 + C4829) * C105 +
           (C4830 + C4831) * C118 + (C4832 + C4833) * C106) *
              C31728 +
          ((C4783 * C486 + C4779 * C497 + C4784 * C935 + C48253 * C940) * C114 +
           (C4783 * C496 + C4779 * C515 + C4784 * C941 + C48253 * C950) * C102 -
           (C5207 + C5206) * C115 - (C5209 + C5208) * C103 +
           (C5211 + C5210) * C116 + (C5213 + C5212) * C104 -
           (C5503 + C5502) * C117 - (C5505 + C5504) * C105 +
           (C4783 * C489 + C4779 * C503 + C4784 * C939 + C48253 * C948) * C118 +
           (C4783 * C504 + C4779 * C519 + C4784 * C949 + C48253 * C954) *
               C106) *
              C48255) *
         C47900 * C47935 * C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C293 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C287 -
            (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
            (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C37487 + C37488) * C293 + (C37489 + C37490) * C287 -
            (C5207 + C5206) * C294 - (C5209 + C5208) * C288 +
            (C5211 + C5210) * C295 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C48275 +
          (((C5206 + C5207) * C294 -
            ((C37490 + C37489) * C287 + (C37488 + C37487) * C293) +
            (C5208 + C5209) * C288 - (C5210 + C5211) * C295 -
            (C5212 + C5213) * C48227) *
               C31728 +
           ((C5215 + C5214) * C294 -
            ((C37491 + C37492) * C287 + (C37493 + C37494) * C293) +
            (C5217 + C5216) * C288 - (C5219 + C5218) * C295 -
            (C5221 + C5220) * C48227) *
               C48255) *
              C47900 * C48264 +
          (((C37494 + C37493) * C293 + (C37492 + C37491) * C287 -
            (C5214 + C5215) * C294 - (C5216 + C5217) * C288 +
            (C5218 + C5219) * C295 + (C5220 + C5221) * C48227) *
               C31728 +
           ((C4783 * C2017 + C4779 * C2026 + C4784 * C2417 + C48253 * C2420) *
                C293 +
            (C4783 * C2025 + C4779 * C2035 + C4784 * C2421 + C48253 * C2426) *
                C287 -
            (C7327 + C7326) * C294 - (C7329 + C7328) * C288 +
            (C4783 * C2015 + C4779 * C2022 + C4784 * C2419 + C48253 * C2424) *
                C295 +
            (C4783 * C2021 + C4779 * C2033 + C4784 * C2425 + C48253 * C2428) *
                C48227) *
               C48255) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C37487 + C37488) * C1089 + (C37489 + C37490) * C48271 -
            (C5207 + C5206) * C1090 - (C5209 + C5208) * C48258 +
            (C5211 + C5210) * C1091 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C47935 * C1086 +
          (((C5012 + C5013) * C1090 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48271 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1089) +
            (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
            (C5018 + C5019) * C48227) *
               C31728 +
           ((C5717 + C5716) * C1090 -
            ((C37957 + C37958) * C48271 + (C37959 + C37960) * C1089) +
            (C5719 + C5718) * C48258 - (C5721 + C5720) * C1091 -
            (C5723 + C5722) * C48227) *
               C48255) *
              C47900 * C47935 * C1087 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1089 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48271 -
            (C5020 + C5021) * C1090 - (C5022 + C5023) * C48258 +
            (C5024 + C5025) * C1091 + (C5026 + C5027) * C48227) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C1089 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C48271 -
            (C6459 + C6458) * C1090 - (C6461 + C6460) * C48258 +
            (C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                C1091 +
            (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1160 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47871) *
               C31728 +
           ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
              C47900 * C47935 * C1155 -
          (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
           ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                C47871 +
            (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                C1160) *
               C31728) *
              C47900 * C47935 * C1156 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1160 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C47871) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C1160 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1157 -
          (((C4784 * C6594 + C48253 * C6597 + C4783 * C1717 + C4779 * C1722) *
                C47871 +
            (C4784 * C6591 + C48253 * C6593 + C4783 * C1713 + C4779 * C1716) *
                C1160) *
               C48255 +
           ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                C47871 +
            (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                C1160) *
               C31728) *
              C47900 * C47935 * C1158 +
          (((C4783 * C1164 + C4779 * C1173 + C4784 * C5951 + C48253 * C5953) *
                C1160 +
            (C4783 * C1174 + C4779 * C1182 + C4784 * C5954 + C48253 * C5957) *
                C47871) *
               C31728 +
           ((C4783 * C6591 + C4779 * C6593 + C4784 * C23206 + C48253 * C23207) *
                C1160 +
            (C4783 * C6594 + C4779 * C6597 + C4784 * C23208 + C48253 * C23209) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C1160 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C47871) *
                C31728 +
            ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
               C47900 * C48275 -
           (((C37491 + C37492) * C47871 + (C37493 + C37494) * C1160) * C48255 +
            ((C37490 + C37489) * C47871 + (C37488 + C37487) * C1160) * C31728) *
               C47900 * C48264 +
           (((C37494 + C37493) * C1160 + (C37492 + C37491) * C47871) * C31728 +
            ((C4783 * C2017 + C4779 * C2026 + C4784 * C2417 + C48253 * C2420) *
                 C1160 +
             (C4783 * C2025 + C4779 * C2035 + C4784 * C2421 + C48253 * C2426) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C1086 +
          ((((C37960 + C37959) * C1160 + (C37958 + C37957) * C47871) * C31728 +
            ((C38359 + C38360) * C1160 + (C38361 + C38362) * C47871) * C48255) *
               C47900 * C48264 -
           (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C47871 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1160) *
                C31728) *
               C47900 * C48275 -
           (((C4784 * C7462 + C48253 * C7465 + C4783 * C2421 + C4779 * C2426) *
                 C47871 +
             (C4784 * C7459 + C48253 * C7461 + C4783 * C2417 + C4779 * C2420) *
                 C1160) *
                C48255 +
            ((C38362 + C38361) * C47871 + (C38360 + C38359) * C1160) * C31728) *
               C47900 * C48238) *
              C1087 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C1160 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C47871) *
                C31728 +
            ((C38363 + C38364) * C1160 + (C38365 + C38366) * C47871) * C48255) *
               C47900 * C48275 -
           (((C38367 + C38368) * C47871 + (C38369 + C38370) * C1160) * C48255 +
            ((C38366 + C38365) * C47871 + (C38364 + C38363) * C1160) * C31728) *
               C47900 * C48264 +
           (((C38370 + C38369) * C1160 + (C38368 + C38367) * C47871) * C31728 +
            ((C4783 * C7459 + C4779 * C7461 + C4784 * C23838 +
              C48253 * C23839) *
                 C1160 +
             (C4783 * C7462 + C4779 * C7465 + C4784 * C23840 +
              C48253 * C23841) *
                 C47871) *
                C48255) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C665 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C659 -
            (C4818 + C4819) * C666 - (C4820 + C4821) * C660 +
            (C4822 + C4823) * C667 + (C4824 + C4825) * C661 -
            (C4826 + C4827) * C668 - (C4828 + C4829) * C48239) *
               C31728 +
           ((C37487 + C37488) * C665 + (C37489 + C37490) * C659 -
            (C5207 + C5206) * C666 - (C5209 + C5208) * C660 +
            (C5211 + C5210) * C667 + (C5213 + C5212) * C661 -
            (C5503 + C5502) * C668 - (C5505 + C5504) * C48239) *
               C48255) *
              C47900 * C48204 +
          (((C5206 + C5207) * C666 -
            ((C37490 + C37489) * C659 + (C37488 + C37487) * C665) +
            (C5208 + C5209) * C660 - (C5210 + C5211) * C667 -
            (C5212 + C5213) * C661 + (C5502 + C5503) * C668 +
            (C5504 + C5505) * C48239) *
               C31728 +
           ((C5215 + C5214) * C666 -
            ((C37491 + C37492) * C659 + (C37493 + C37494) * C665) +
            (C5217 + C5216) * C660 - (C5219 + C5218) * C667 -
            (C5221 + C5220) * C661 +
            (C4783 * C493 + C4779 * C511 + C4784 * C2185 + C48253 * C2186) *
                C668 +
            (C4783 * C512 + C4779 * C523 + C4784 * C2187 + C48253 * C2188) *
                C48239) *
               C48255) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                 C46986 +
             (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                 C48186 -
             (C4818 + C4819) * C46967 - (C4820 + C4821) * C47881) *
                C31728 +
            ((C37487 + C37488) * C46986 + (C37489 + C37490) * C48186 -
             (C5207 + C5206) * C46967 - (C5209 + C5208) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C5206 + C5207) * C46967 -
             ((C37490 + C37489) * C48186 + (C37488 + C37487) * C46986) +
             (C5208 + C5209) * C47881) *
                C31728 +
            ((C5215 + C5214) * C46967 -
             ((C37491 + C37492) * C48186 + (C37493 + C37494) * C46986) +
             (C5217 + C5216) * C47881) *
                C48255) *
               C47900 * C48022) *
              C1086 +
          ((((C5012 + C5013) * C46967 -
             ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                  C48186 +
              (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                  C46986) +
             (C5014 + C5015) * C47881) *
                C31728 +
            ((C5717 + C5716) * C46967 -
             ((C37957 + C37958) * C48186 + (C37959 + C37960) * C46986) +
             (C5719 + C5718) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C37960 + C37959) * C46986 + (C37958 + C37957) * C48186 -
             (C5716 + C5717) * C46967 - (C5718 + C5719) * C47881) *
                C31728 +
            ((C38359 + C38360) * C46986 + (C38361 + C38362) * C48186 -
             (C7185 + C7184) * C46967 - (C7187 + C7186) * C47881) *
                C48255) *
               C47900 * C48022) *
              C1087 +
          ((((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                 C46986 +
             (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                 C48186 -
             (C5020 + C5021) * C46967 - (C5022 + C5023) * C47881) *
                C31728 +
            ((C38363 + C38364) * C46986 + (C38365 + C38366) * C48186 -
             (C6459 + C6458) * C46967 - (C6461 + C6460) * C47881) *
                C48255) *
               C47900 * C48204 +
           (((C6458 + C6459) * C46967 -
             ((C38366 + C38365) * C48186 + (C38364 + C38363) * C46986) +
             (C6460 + C6461) * C47881) *
                C31728 +
            ((C4783 * C1302 + C4779 * C1318 + C4784 * C6106 + C48253 * C6109) *
                 C46967 -
             ((C38367 + C38368) * C48186 + (C38369 + C38370) * C46986) +
             (C4783 * C1319 + C4779 * C1329 + C4784 * C6110 + C48253 * C6112) *
                 C47881) *
                C48255) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) * C114 +
           (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) * C102 -
           (C4818 + C4819) * C115 - (C4820 + C4821) * C103 +
           (C4822 + C4823) * C116 + (C4824 + C4825) * C104 -
           (C4826 + C4827) * C117 - (C4828 + C4829) * C105 +
           (C4830 + C4831) * C118 + (C4832 + C4833) * C106) *
              C31728 +
          ((C4783 * C486 + C4779 * C497 + C4784 * C935 + C48253 * C940) * C114 +
           (C4783 * C496 + C4779 * C515 + C4784 * C941 + C48253 * C950) * C102 -
           (C5207 + C5206) * C115 - (C5209 + C5208) * C103 +
           (C5211 + C5210) * C116 + (C5213 + C5212) * C104 -
           (C5503 + C5502) * C117 - (C5505 + C5504) * C105 +
           (C4783 * C489 + C4779 * C503 + C4784 * C939 + C48253 * C948) * C118 +
           (C4783 * C504 + C4779 * C519 + C4784 * C949 + C48253 * C954) *
               C106) *
              C48255) *
         C47900 * C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C293 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C287 -
            (C4818 + C4819) * C294 - (C4820 + C4821) * C288 +
            (C4822 + C4823) * C295 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C4783 * C486 + C4779 * C497 + C4784 * C935 + C48253 * C940) *
                C293 +
            (C4783 * C496 + C4779 * C515 + C4784 * C941 + C48253 * C950) *
                C287 -
            (C5207 + C5206) * C294 - (C5209 + C5208) * C288 +
            (C5211 + C5210) * C295 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C47935 * C48274 +
          (((C5012 + C5013) * C294 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C287 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C293) +
            (C5014 + C5015) * C288 - (C5016 + C5017) * C295 -
            (C5018 + C5019) * C48227) *
               C31728 +
           ((C5717 + C5716) * C294 -
            ((C4784 * C1314 + C48253 * C1327 + C4783 * C941 + C4779 * C950) *
                 C287 +
             (C4784 * C1300 + C48253 * C1315 + C4783 * C935 + C4779 * C940) *
                 C293) +
            (C5719 + C5718) * C288 - (C5721 + C5720) * C295 -
            (C5723 + C5722) * C48227) *
               C48255) *
              C47900 * C47935 * C48262 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C293 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C287 -
            (C5020 + C5021) * C294 - (C5022 + C5023) * C288 +
            (C5024 + C5025) * C295 + (C5026 + C5027) * C48227) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C293 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C287 -
            (C6459 + C6458) * C294 - (C6461 + C6460) * C288 +
            (C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                C295 +
            (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1089 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C48271 -
            (C4818 + C4819) * C1090 - (C4820 + C4821) * C48258 +
            (C4822 + C4823) * C1091 + (C4824 + C4825) * C48227) *
               C31728 +
           ((C37487 + C37488) * C1089 + (C37489 + C37490) * C48271 -
            (C5207 + C5206) * C1090 - (C5209 + C5208) * C48258 +
            (C5211 + C5210) * C1091 + (C5213 + C5212) * C48227) *
               C48255) *
              C47900 * C47935 * C1086 +
          (((C5012 + C5013) * C1090 -
            ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                 C48271 +
             (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                 C1089) +
            (C5014 + C5015) * C48258 - (C5016 + C5017) * C1091 -
            (C5018 + C5019) * C48227) *
               C31728 +
           ((C5717 + C5716) * C1090 -
            ((C37957 + C37958) * C48271 + (C37959 + C37960) * C1089) +
            (C5719 + C5718) * C48258 - (C5721 + C5720) * C1091 -
            (C5723 + C5722) * C48227) *
               C48255) *
              C47900 * C47935 * C1087 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1089 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C48271 -
            (C5020 + C5021) * C1090 - (C5022 + C5023) * C48258 +
            (C5024 + C5025) * C1091 + (C5026 + C5027) * C48227) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C1089 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C48271 -
            (C6459 + C6458) * C1090 - (C6461 + C6460) * C48258 +
            (C4783 * C1298 + C4779 * C1311 + C4784 * C1715 + C48253 * C1720) *
                C1091 +
            (C4783 * C1310 + C4779 * C1325 + C4784 * C1721 + C48253 * C1724) *
                C48227) *
               C48255) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4783 * C119 + C4779 * C126 + C4784 * C297 + C48253 * C308) *
                C1160 +
            (C4783 * C127 + C4779 * C140 + C4784 * C307 + C48253 * C326) *
                C47871) *
               C31728 +
           ((C37487 + C37488) * C1160 + (C37489 + C37490) * C47871) * C48255) *
              C47900 * C47935 * C1155 -
          (((C37957 + C37958) * C47871 + (C37959 + C37960) * C1160) * C48255 +
           ((C4784 * C317 + C48253 * C331 + C4783 * C307 + C4779 * C326) *
                C47871 +
            (C4784 * C301 + C48253 * C316 + C4783 * C297 + C4779 * C308) *
                C1160) *
               C31728) *
              C47900 * C47935 * C1156 +
          (((C4783 * C301 + C4779 * C316 + C4784 * C1163 + C48253 * C1172) *
                C1160 +
            (C4783 * C317 + C4779 * C331 + C4784 * C1171 + C48253 * C1181) *
                C47871) *
               C31728 +
           ((C4783 * C1300 + C4779 * C1315 + C4784 * C1713 + C48253 * C1716) *
                C1160 +
            (C4783 * C1314 + C4779 * C1327 + C4784 * C1717 + C48253 * C1722) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1157 -
          (((C4784 * C6594 + C48253 * C6597 + C4783 * C1717 + C4779 * C1722) *
                C47871 +
            (C4784 * C6591 + C48253 * C6593 + C4783 * C1713 + C4779 * C1716) *
                C1160) *
               C48255 +
           ((C4784 * C1174 + C48253 * C1182 + C4783 * C1171 + C4779 * C1181) *
                C47871 +
            (C4784 * C1164 + C48253 * C1173 + C4783 * C1163 + C4779 * C1172) *
                C1160) *
               C31728) *
              C47900 * C47935 * C1158 +
          (((C4783 * C1164 + C4779 * C1173 + C4784 * C5951 + C48253 * C5953) *
                C1160 +
            (C4783 * C1174 + C4779 * C1182 + C4784 * C5954 + C48253 * C5957) *
                C47871) *
               C31728 +
           ((C4783 * C6591 + C4779 * C6593 + C4784 * C23206 + C48253 * C23207) *
                C1160 +
            (C4783 * C6594 + C4779 * C6597 + C4784 * C23208 + C48253 * C23209) *
                C47871) *
               C48255) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C46996 +
            (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
            C169 * C47884 + C170 * C47002 + C171 * C2901) *
               C42726 +
           (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C42727 +
           (C15046 + C15045 - C15044 - C15047 + C15048 + C15049) * C42728) *
              C47900 * C47935 * C47978 +
          ((C361 * C46992 -
            ((C113 * C307 + C48121 * C326) * C47876 +
             (C113 * C297 + C48121 * C308) * C46996) +
            C362 * C47884 - C363 * C47002 - C364 * C2901) *
               C42726 +
           (C14012 - (C14013 + C14014) + C14015 - C14016 - C14017) * C42727 +
           (C2198 * C46992 - (C11739 * C47876 + C11738 * C46996) +
            C2199 * C47884 - C2200 * C47002 - C2201 * C2901) *
               C42728) *
              C47900 * C47935 * C47985 +
          (((C113 * C301 + C48121 * C316) * C46996 +
            (C113 * C317 + C48121 * C331) * C47876 - C367 * C46992 -
            C368 * C47884 + C369 * C47002 + C370 * C2901) *
               C42726 +
           (C11740 * C46996 + C11741 * C47876 - C1612 * C46992 -
            C1613 * C47884 + C1614 * C47002 + C1615 * C2901) *
               C42727 +
           (C11745 * C46996 + C11744 * C47876 - C11743 * C46992 -
            C11742 * C47884 + (C113 * C1303 + C48121 * C1320) * C47002 +
            (C113 * C1321 + C48121 * C1330) * C2901) *
               C42728) *
              C47900 * C47935 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C42726 +
            (C13628 + C13629 - C13630 - C13631) * C42727 + C44989 * C42728) *
               C47900 * C48204 +
           ((C13630 - (C13629 + C13628) + C13631) * C42726 +
            (C13636 - (C13637 + C13638) + C13639) * C42727 +
            (C14698 - (C14697 + C14696) + C14699) * C42728) *
               C47900 * C48022) *
              C47978 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C42726 +
            (C13644 - (C13645 + C13646) + C13647) * C42727 + C44990 * C42728) *
               C47900 * C48204 +
           ((C13646 + C13645 - C13644 - C13647) * C42726 +
            (C13652 + C13653 - C13654 - C13655) * C42727 +
            (C44983 + C44984 - C44985 - C44986) * C42728) *
               C47900 * C48022) *
              C47985 +
          ((((C113 * C301 + C48121 * C316) * C2641 +
             (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
             C368 * C47881) *
                C42726 +
            (C14218 + C14219 - C14220 - C14221) * C42727 +
            (C45399 + C45400 - C45401 - C45402) * C42728) *
               C47900 * C48204 +
           ((C14220 - (C14219 + C14218) + C14221) * C42726 +
            (C45401 - (C45400 + C45399) + C45402) * C42727 +
            ((C113 * C7460 + C48121 * C7463) * C2642 -
             (C43606 * C2635 + C43607 * C2641) +
             (C113 * C7464 + C48121 * C7466) * C47881) *
                C42728) *
               C47900 * C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2641 +
            (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
            C169 * C47881) *
               C42726 +
           (C13628 + C13629 - C13630 - C13631) * C42727 +
           (C13638 + C13637 - C13636 - C13639) * C42728) *
              C47900 * C47935 * C48281 +
          ((C361 * C2642 -
            ((C113 * C307 + C48121 * C326) * C2635 +
             (C113 * C297 + C48121 * C308) * C2641) +
            C362 * C47881) *
               C42726 +
           (C13644 - (C13645 + C13646) + C13647) * C42727 +
           (C13654 - (C13653 + C13652) + C13655) * C42728) *
              C47900 * C47935 * C48277 +
          (((C113 * C301 + C48121 * C316) * C2641 +
            (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
            C368 * C47881) *
               C42726 +
           (C14218 + C14219 - C14220 - C14221) * C42727 +
           (C11745 * C2641 + C11744 * C2635 - C11743 * C2642 -
            C11742 * C47881) *
               C42728) *
              C47900 * C47935 * C48267 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C48121 * C1181) * C2635 +
             (C113 * C1163 + C48121 * C1172) * C2641) +
            C1451 * C47881) *
               C42726 +
           (C11888 * C2642 - (C12245 * C2635 + C12244 * C2641) +
            C11889 * C47881) *
               C42727 +
           ((C113 * C6106 + C48121 * C6109) * C2642 -
            (C43961 * C2635 + C43960 * C2641) +
            (C113 * C6110 + C48121 * C6112) * C47881) *
               C42728) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2533 +
            (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
            C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
            C173 * C48239) *
               C42726 +
           (C14356 + C14357 - C14358 - C14359 + C14360 + C14361 - C14362 -
            C14363) *
               C42727 +
           (C10839 * C2533 + C10838 * C48280 - C556 * C2534 - C557 * C48273 +
            C558 * C2535 + C559 * C48260 - C560 * C2536 - C561 * C48239) *
               C42728) *
              C47900 * C47935 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C48121 * C326) * C48280 +
             (C113 * C297 + C48121 * C308) * C2533) +
            C362 * C48273 - C363 * C2535 - C364 * C48260 + C365 * C2536 +
            C366 * C48239) *
               C42726 +
           (C968 * C2534 - (C11328 * C48280 + C11329 * C2533) + C969 * C48273 -
            C970 * C2535 - C971 * C48260 + C972 * C2536 + C973 * C48239) *
               C42727 +
           (C2198 * C2534 - (C11739 * C48280 + C11738 * C2533) +
            C2199 * C48273 - C2200 * C2535 - C2201 * C48260 +
            (C113 * C2185 + C48121 * C2186) * C2536 +
            (C113 * C2187 + C48121 * C2188) * C48239) *
               C42728) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C42726 +
            (C13628 + C13629 - C13630 - C13631) * C42727 + C44989 * C42728) *
               C47900 * C48275 +
           ((C13630 - (C13629 + C13628) + C13631) * C42726 +
            (C13636 - (C13637 + C13638) + C13639) * C42727 +
            (C14698 - (C14697 + C14696) + C14699) * C42728) *
               C47900 * C48264 +
           (C44989 * C42726 + (C14696 + C14697 - C14698 - C14699) * C42727 +
            (C12673 * C2641 + C12672 * C2635 - C12671 * C2642 -
             C12670 * C47881) *
                C42728) *
               C47900 * C48238) *
              C2531 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C42726 +
            (C13644 - (C13645 + C13646) + C13647) * C42727 + C44990 * C42728) *
               C47900 * C48275 +
           ((C13646 + C13645 - C13644 - C13647) * C42726 +
            (C13652 + C13653 - C13654 - C13655) * C42727 +
            (C44983 + C44984 - C44985 - C44986) * C42728) *
               C47900 * C48264 +
           (C44990 * C42726 + (C44985 - (C44984 + C44983) + C44986) * C42727 +
            ((C113 * C6974 + C48121 * C6977) * C2642 -
             (C44635 * C2635 + C44636 * C2641) +
             (C113 * C6978 + C48121 * C6980) * C47881) *
                C42728) *
               C47900 * C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46996 +
             (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
             C169 * C47884 + C170 * C47002 + C171 * C2901) *
                C42726 +
            (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C42727 +
            (C15046 + C15045 - C15044 - C15047 + C15048 + C15049) * C42728) *
               C47900 * C48204 +
           ((C14002 - (C14001 + C14000) + C14003 - C14004 - C14005) * C42726 +
            (C15044 - (C15045 + C15046) + C15047 - C15048 - C15049) * C42727 +
            (C2316 * C46992 - (C12669 * C47876 + C12668 * C46996) +
             C2317 * C47884 - C2318 * C47002 - C2319 * C2901) *
                C42728) *
               C47900 * C48022) *
              C2531 +
          (((C361 * C46992 -
             ((C113 * C307 + C48121 * C326) * C47876 +
              (C113 * C297 + C48121 * C308) * C46996) +
             C362 * C47884 - C363 * C47002 - C364 * C2901) *
                C42726 +
            (C14012 - (C14013 + C14014) + C14015 - C14016 - C14017) * C42727 +
            (C45247 - (C45248 + C45249) + C45250 - C45251 - C45252) * C42728) *
               C47900 * C48204 +
           ((C14014 + C14013 - C14012 - C14015 + C14016 + C14017) * C42726 +
            (C45249 + C45248 - C45247 - C45250 + C45251 + C45252) * C42727 +
            (C13171 * C46996 + C13170 * C47876 - C12894 * C46992 -
             C12895 * C47884 + (C113 * C2419 + C48121 * C2424) * C47002 +
             (C113 * C2425 + C48121 * C2428) * C2901) *
                C42728) *
               C47900 * C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2533 +
            (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
            C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
            C173 * C48239) *
               C42726 +
           (C14356 + C14357 - C14358 - C14359 + C14360 + C14361 - C14362 -
            C14363) *
               C42727 +
           (C10839 * C2533 + C10838 * C48280 - C556 * C2534 - C557 * C48273 +
            C558 * C2535 + C559 * C48260 - C560 * C2536 - C561 * C48239) *
               C42728) *
              C47900 * C47935 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C48121 * C326) * C48280 +
             (C113 * C297 + C48121 * C308) * C2533) +
            C362 * C48273 - C363 * C2535 - C364 * C48260 + C365 * C2536 +
            C366 * C48239) *
               C42726 +
           (C968 * C2534 - (C11328 * C48280 + C11329 * C2533) + C969 * C48273 -
            C970 * C2535 - C971 * C48260 + C972 * C2536 + C973 * C48239) *
               C42727 +
           (C2198 * C2534 - (C11739 * C48280 + C11738 * C2533) +
            C2199 * C48273 - C2200 * C2535 - C2201 * C48260 +
            (C113 * C2185 + C48121 * C2186) * C2536 +
            (C113 * C2187 + C48121 * C2188) * C48239) *
               C42728) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2641 +
            (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
            C169 * C47881) *
               C42726 +
           (C13628 + C13629 - C13630 - C13631) * C42727 +
           (C13638 + C13637 - C13636 - C13639) * C42728) *
              C47900 * C47935 * C48281 +
          ((C361 * C2642 -
            ((C113 * C307 + C48121 * C326) * C2635 +
             (C113 * C297 + C48121 * C308) * C2641) +
            C362 * C47881) *
               C42726 +
           (C13644 - (C13645 + C13646) + C13647) * C42727 +
           (C13654 - (C13653 + C13652) + C13655) * C42728) *
              C47900 * C47935 * C48277 +
          (((C113 * C301 + C48121 * C316) * C2641 +
            (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
            C368 * C47881) *
               C42726 +
           (C14218 + C14219 - C14220 - C14221) * C42727 +
           (C11745 * C2641 + C11744 * C2635 - C11743 * C2642 -
            C11742 * C47881) *
               C42728) *
              C47900 * C47935 * C48267 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C48121 * C1181) * C2635 +
             (C113 * C1163 + C48121 * C1172) * C2641) +
            C1451 * C47881) *
               C42726 +
           (C11888 * C2642 - (C12245 * C2635 + C12244 * C2641) +
            C11889 * C47881) *
               C42727 +
           ((C113 * C6106 + C48121 * C6109) * C2642 -
            (C43961 * C2635 + C43960 * C2641) +
            (C113 * C6110 + C48121 * C6112) * C47881) *
               C42728) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C42726 +
            (C12084 + C12085 - C12086 - C12087) * C42727 + C44425 * C42728) *
               C47900 * C3298 +
           ((C12086 - (C12085 + C12084) + C12087) * C42726 +
            (C12874 - (C12875 + C12876) + C12877) * C42727 + C44531 * C42728) *
               C47900 * C48022) *
              C47978 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C42726 +
            (C12092 - (C12093 + C12094) + C12095) * C42727 + C44426 * C42728) *
               C47900 * C3298 +
           ((C12094 + C12093 - C12092 - C12095) * C42726 +
            (C12882 + C12883 - C12884 - C12885) * C42727 +
            (C44419 + C44420 - C44421 - C44422) * C42728) *
               C47900 * C48022) *
              C47985 +
          ((((C113 * C301 + C48121 * C316) * C46986 +
             (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
             C368 * C47881) *
                C42726 +
            (C12100 + C12101 - C12102 - C12103) * C42727 +
            (C43854 + C43855 - C43856 - C43857) * C42728) *
               C47900 * C3298 +
           ((C12102 - (C12101 + C12100) + C12103) * C42726 +
            (C43856 - (C43855 + C43854) + C43857) * C42727 +
            ((C113 * C7460 + C48121 * C7463) * C46967 -
             (C43606 * C48186 + C43607 * C46986) +
             (C113 * C7464 + C48121 * C7466) * C47881) *
                C42728) *
               C47900 * C48022) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C48018 -
           (C44261 * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C48025 +
           (C43599 * C42726 + (C12674 + C12675) * C42727 + C44262 * C42728) *
               C47900 * C3806) *
              C47978 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            C44630 * C42728) *
               C47900 * C48025 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C48018 -
           ((C44637 + C44638) * C42728 + (C13172 + C13173) * C42727 +
            C43600 * C42726) *
               C47900 * C3806) *
              C47985 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C42726 +
            (C11748 + C11749) * C42727 + C43601 * C42728) *
               C47900 * C48018 -
           ((C43608 + C43609) * C42728 + (C11752 + C11753) * C42727 +
            (C11749 + C11748) * C42726) *
               C47900 * C48025 +
           (C43601 * C42726 + (C43609 + C43608) * C42727 +
            ((C113 * C23492 + C48121 * C23493) * C1160 +
             (C113 * C23494 + C48121 * C23495) * C47871) *
                C42728) *
               C47900 * C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C3298 -
           (C44261 * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C48022) *
              C48281 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            C44630 * C42728) *
               C47900 * C48022 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C3298) *
              C48277 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C42726 +
            (C11748 + C11749) * C42727 + C43601 * C42728) *
               C47900 * C3298 -
           ((C43608 + C43609) * C42728 + (C11752 + C11753) * C42727 +
            (C11749 + C11748) * C42726) *
               C47900 * C48022) *
              C48267 +
          (((C12246 + C12247) * C42726 + (C43962 + C43963) * C42727 +
            ((C113 * C23838 + C48121 * C23839) * C1160 +
             (C113 * C23840 + C48121 * C23841) * C47871) *
                C42728) *
               C47900 * C48022 -
           ((C43963 + C43962) * C42728 + (C12247 + C12246) * C42727 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C42726) *
               C47900 * C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C42726 +
            (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C42727 +
            C44084 * C42728) *
               C47900 * C3298 +
           ((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C42726 +
            (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C42727 +
            (C44075 - (C44076 + C44077) + C44078 - C44079 - C44080) * C42728) *
               C47900 * C48022) *
              C2531 +
          (((C361 * C1090 -
             ((C113 * C307 + C48121 * C326) * C48271 +
              (C113 * C297 + C48121 * C308) * C1089) +
             C362 * C48258 - C363 * C1091 - C364 * C48227) *
                C42726 +
            (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C42727 +
            (C46319 - (C46320 + C46321) + C46322 - C46323 - C46324) * C42728) *
               C47900 * C3298 +
           ((C15446 + C15445 - C15444 - C15447 + C15448 + C15449) * C42726 +
            (C46321 + C46320 - C46319 - C46322 + C46323 + C46324) * C42727 +
            (C13171 * C1089 + C13170 * C48271 - C12894 * C1090 -
             C12895 * C48258 + (C113 * C2419 + C48121 * C2424) * C1091 +
             (C113 * C2425 + C48121 * C2428) * C48227) *
                C42728) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C48282 -
           (C44261 * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C48279 +
           (C43599 * C42726 + (C12674 + C12675) * C42727 + C44262 * C42728) *
               C47900 * C48270 -
           ((C44269 + C44270) * C42728 + (C12678 + C12679) * C42727 +
            C44261 * C42726) *
               C47900 * C48251) *
              C2531 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            C44630 * C42728) *
               C47900 * C48279 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C48282 -
           ((C44637 + C44638) * C42728 + (C13172 + C13173) * C42727 +
            C43600 * C42726) *
               C47900 * C48270 +
           (C44630 * C42726 + (C44638 + C44637) * C42727 +
            ((C113 * C28188 + C48121 * C28189) * C1160 +
             (C113 * C28190 + C48121 * C28191) * C47871) *
                C42728) *
               C47900 * C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C42726 +
            (C12084 + C12085 - C12086 - C12087) * C42727 + C44425 * C42728) *
               C47900 * C48018 +
           ((C12086 - (C12085 + C12084) + C12087) * C42726 +
            (C12874 - (C12875 + C12876) + C12877) * C42727 + C44531 * C42728) *
               C47900 * C48025 +
           (C44425 * C42726 + (C13026 + C13027 - C13028 - C13029) * C42727 +
            (C44526 + C44527 - C44528 - C44529) * C42728) *
               C47900 * C3806) *
              C2531 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C42726 +
            (C12092 - (C12093 + C12094) + C12095) * C42727 + C44426 * C42728) *
               C47900 * C48018 +
           ((C12094 + C12093 - C12092 - C12095) * C42726 +
            (C12882 + C12883 - C12884 - C12885) * C42727 +
            (C44419 + C44420 - C44421 - C44422) * C42728) *
               C47900 * C48025 +
           (C44426 * C42726 + (C44421 - (C44420 + C44419) + C44422) * C42727 +
            ((C113 * C6974 + C48121 * C6977) * C46967 -
             (C44635 * C48186 + C44636 * C46986) +
             (C113 * C6978 + C48121 * C6980) * C47881) *
                C42728) *
               C47900 * C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1089 +
             (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
             C169 * C48258 + C170 * C1091 + C171 * C48227) *
                C42726 +
            (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C42727 +
            C44084 * C42728) *
               C47900 * C3298 +
           ((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C42726 +
            (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C42727 +
            (C44075 - (C44076 + C44077) + C44078 - C44079 - C44080) * C42728) *
               C47900 * C48022) *
              C2531 +
          (((C361 * C1090 -
             ((C113 * C307 + C48121 * C326) * C48271 +
              (C113 * C297 + C48121 * C308) * C1089) +
             C362 * C48258 - C363 * C1091 - C364 * C48227) *
                C42726 +
            (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C42727 +
            (C46319 - (C46320 + C46321) + C46322 - C46323 - C46324) * C42728) *
               C47900 * C3298 +
           ((C15446 + C15445 - C15444 - C15447 + C15448 + C15449) * C42726 +
            (C46321 + C46320 - C46319 - C46322 + C46323 + C46324) * C42727 +
            (C13171 * C1089 + C13170 * C48271 - C12894 * C1090 -
             C12895 * C48258 + (C113 * C2419 + C48121 * C2424) * C1091 +
             (C113 * C2425 + C48121 * C2428) * C48227) *
                C42728) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C3298 -
           (C44261 * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C48022) *
              C48281 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            C44630 * C42728) *
               C47900 * C48022 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C3298) *
              C48277 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C42726 +
            (C11748 + C11749) * C42727 + C43601 * C42728) *
               C47900 * C3298 -
           ((C43608 + C43609) * C42728 + (C11752 + C11753) * C42727 +
            (C11749 + C11748) * C42726) *
               C47900 * C48022) *
              C48267 +
          (((C12246 + C12247) * C42726 + (C43962 + C43963) * C42727 +
            ((C113 * C23838 + C48121 * C23839) * C1160 +
             (C113 * C23840 + C48121 * C23841) * C47871) *
                C42728) *
               C47900 * C48022 -
           ((C43963 + C43962) * C42728 + (C12247 + C12246) * C42727 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C42726) *
               C47900 * C3298) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C46986 +
            (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
            C169 * C47881) *
               C42726 +
           (C12084 + C12085 - C12086 - C12087) * C42727 +
           (C12876 + C12875 - C12874 - C12877) * C42728) *
              C47900 * C47935 * C1431 +
          ((C361 * C46967 -
            ((C113 * C307 + C48121 * C326) * C48186 +
             (C113 * C297 + C48121 * C308) * C46986) +
            C362 * C47881) *
               C42726 +
           (C12092 - (C12093 + C12094) + C12095) * C42727 +
           (C12884 - (C12883 + C12882) + C12885) * C42728) *
              C47900 * C47935 * C1432 +
          (((C113 * C301 + C48121 * C316) * C46986 +
            (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
            C368 * C47881) *
               C42726 +
           (C12100 + C12101 - C12102 - C12103) * C42727 +
           (C11745 * C46986 + C11744 * C48186 - C11743 * C46967 -
            C11742 * C47881) *
               C42728) *
              C47900 * C47935 * C1433 +
          ((C1450 * C46967 -
            ((C113 * C1171 + C48121 * C1181) * C48186 +
             (C113 * C1163 + C48121 * C1172) * C46986) +
            C1451 * C47881) *
               C42726 +
           (C11888 * C46967 - (C12245 * C48186 + C12244 * C46986) +
            C11889 * C47881) *
               C42727 +
           ((C113 * C6106 + C48121 * C6109) * C46967 -
            ((C113 * C6108 + C48121 * C6111) * C48186 +
             (C113 * C6105 + C48121 * C6107) * C46986) +
            (C113 * C6110 + C48121 * C6112) * C47881) *
               C42728) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C665 +
            (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
               C42726 +
           (C11104 + C11105 - C11106 - C11107 + C11108 + C11109 - C11110 -
            C11111) *
               C42727 +
           (C10839 * C665 + C10838 * C659 - C556 * C666 - C557 * C660 +
            C558 * C667 + C559 * C661 - C560 * C668 - C561 * C48239) *
               C42728) *
              C47900 * C47935 * C48203 +
          ((C361 * C666 -
            ((C113 * C307 + C48121 * C326) * C659 +
             (C113 * C297 + C48121 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C48239) *
               C42726 +
           (C968 * C666 - (C11328 * C659 + C11329 * C665) + C969 * C660 -
            C970 * C667 - C971 * C661 + C972 * C668 + C973 * C48239) *
               C42727 +
           (C2198 * C666 - (C11739 * C659 + C11738 * C665) + C2199 * C660 -
            C2200 * C667 - C2201 * C661 +
            (C113 * C2185 + C48121 * C2186) * C668 +
            (C113 * C2187 + C48121 * C2188) * C48239) *
               C42728) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C42726 +
            (C12084 + C12085 - C12086 - C12087) * C42727 + C44425 * C42728) *
               C47900 * C1835 +
           ((C12086 - (C12085 + C12084) + C12087) * C42726 +
            (C12874 - (C12875 + C12876) + C12877) * C42727 +
            (C13028 - (C13027 + C13026) + C13029) * C42728) *
               C47900 * C1836 +
           (C44425 * C42726 + (C13026 + C13027 - C13028 - C13029) * C42727 +
            (C12673 * C46986 + C12672 * C48186 - C12671 * C46967 -
             C12670 * C47881) *
                C42728) *
               C47900 * C48238) *
              C48203 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C42726 +
            (C12092 - (C12093 + C12094) + C12095) * C42727 + C44426 * C42728) *
               C47900 * C1835 +
           ((C12094 + C12093 - C12092 - C12095) * C42726 +
            (C12882 + C12883 - C12884 - C12885) * C42727 +
            (C44419 + C44420 - C44421 - C44422) * C42728) *
               C47900 * C1836 +
           (C44426 * C42726 + (C44421 - (C44420 + C44419) + C44422) * C42727 +
            ((C113 * C6974 + C48121 * C6977) * C46967 -
             ((C113 * C6976 + C48121 * C6979) * C48186 +
              (C113 * C6973 + C48121 * C6975) * C46986) +
             (C113 * C6978 + C48121 * C6980) * C47881) *
                C42728) *
               C47900 * C48238) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C48204 -
           ((C12675 + C12674) * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C48022) *
              C1431 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            (C13173 + C13172) * C42728) *
               C47900 * C48022 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C48204) *
              C1432 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C42726 +
            (C11748 + C11749) * C42727 + C43601 * C42728) *
               C47900 * C48204 -
           ((C43608 + C43609) * C42728 + (C11752 + C11753) * C42727 +
            (C11749 + C11748) * C42726) *
               C47900 * C48022) *
              C1433 +
          (((C12246 + C12247) * C42726 + (C43962 + C43963) * C42727 +
            ((C113 * C23838 + C48121 * C23839) * C1160 +
             (C113 * C23840 + C48121 * C23841) * C47871) *
                C42728) *
               C47900 * C48022 -
           ((C43963 + C43962) * C42728 + (C12247 + C12246) * C42727 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C42726) *
               C47900 * C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C42726 +
            (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C42727 +
            C42960 * C42728) *
               C47900 * C48204 +
           ((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C42726 +
            (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C42727 +
            (C42951 - (C42952 + C42953) + C42954 - C42955 - C42956) * C42728) *
               C47900 * C48022) *
              C48203 +
          (((C361 * C294 -
             ((C113 * C307 + C48121 * C326) * C287 +
              (C113 * C297 + C48121 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C48227) *
                C42726 +
            (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C42727 +
            (C43311 - (C43312 + C43313) + C43314 - C43315 - C43316) * C42728) *
               C47900 * C48204 +
           ((C11331 + C11330 - C11314 - C11319 + C11320 + C11321) * C42726 +
            (C43313 + C43312 - C43311 - C43314 + C43315 + C43316) * C42727 +
            (C13171 * C293 + C13170 * C287 - C12894 * C294 - C12895 * C288 +
             (C113 * C2419 + C48121 * C2424) * C295 +
             (C113 * C2425 + C48121 * C2428) * C48227) *
                C42728) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C2299 -
           (C44261 * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C2300 +
           (C43599 * C42726 + (C12674 + C12675) * C42727 + C44262 * C42728) *
               C47900 * C2301 -
           ((C44269 + C44270) * C42728 + (C12678 + C12679) * C42727 +
            C44261 * C42726) *
               C47900 * C48251) *
              C48203 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            C44630 * C42728) *
               C47900 * C2300 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C2299 -
           ((C44637 + C44638) * C42728 + (C13172 + C13173) * C42727 +
            C43600 * C42726) *
               C47900 * C2301 +
           (C44630 * C42726 + (C44638 + C44637) * C42727 +
            ((C113 * C28188 + C48121 * C28189) * C1160 +
             (C113 * C28190 + C48121 * C28191) * C47871) *
                C42728) *
               C47900 * C48251) *
              C47982)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C48121 * C126) * C114 +
               (C113 * C127 + C48121 * C140) * C102 - C168 * C115 -
               C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C42726 +
              (C10836 * C114 + C10837 * C102 - C550 * C115 - C551 * C103 +
               C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 +
               C788 * C118 + C789 * C106) *
                  C42727 +
              (C10839 * C114 + C10838 * C102 - C556 * C115 - C557 * C103 +
               C558 * C116 + C559 * C104 - C560 * C117 - C561 * C105 +
               (C113 * C494 + C48121 * C513) * C118 +
               (C113 * C514 + C48121 * C524) * C106) *
                  C42728) *
             C47900 * C47935 * C47923 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48121 * C126) * C293 +
                (C113 * C127 + C48121 * C140) * C287 - C168 * C294 -
                C169 * C288 + C170 * C295 + C171 * C48227) *
                   C42726 +
               (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C42727 +
               (C10843 + C10842 - C10822 - C10827 + C10828 + C10829) * C42728) *
                  C47900 * C47935 * C48274 +
              ((C361 * C294 -
                ((C113 * C307 + C48121 * C326) * C287 +
                 (C113 * C297 + C48121 * C308) * C293) +
                C362 * C288 - C363 * C295 - C364 * C48227) *
                   C42726 +
               (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) *
                   C42727 +
               (C2198 * C294 - (C11739 * C287 + C11738 * C293) + C2199 * C288 -
                C2200 * C295 - C2201 * C48227) *
                   C42728) *
                  C47900 * C47935 * C48262 +
              (((C113 * C301 + C48121 * C316) * C293 +
                (C113 * C317 + C48121 * C331) * C287 - C367 * C294 -
                C368 * C288 + C369 * C295 + C370 * C48227) *
                   C42726 +
               (C11740 * C293 + C11741 * C287 - C1612 * C294 - C1613 * C288 +
                C1614 * C295 + C1615 * C48227) *
                   C42727 +
               (C11745 * C293 + C11744 * C287 - C11743 * C294 - C11742 * C288 +
                (C113 * C1303 + C48121 * C1320) * C295 +
                (C113 * C1321 + C48121 * C1330) * C48227) *
                   C42728) *
                  C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C293 +
            (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48227) *
               C42726 +
           (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C42727 +
           C42960 * C42728) *
              C47900 * C48275 +
          ((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C42726 +
           (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C42727 +
           (C42951 - (C42952 + C42953) + C42954 - C42955 - C42956) * C42728) *
              C47900 * C48264 +
          (C42960 * C42726 +
           (C42953 + C42952 - C42951 - C42954 + C42955 + C42956) * C42727 +
           (C12673 * C293 + C12672 * C287 - C12671 * C294 - C12670 * C288 +
            (C113 * C2020 + C48121 * C2031) * C295 +
            (C113 * C2032 + C48121 * C2038) * C48227) *
               C42728) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1089 +
            (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
            C169 * C48258 + C170 * C1091 + C171 * C48227) *
               C42726 +
           (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C42727 +
           (C12408 + C12407 - C12406 - C12409 + C12410 + C12411) * C42728) *
              C47900 * C47935 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C48121 * C326) * C48271 +
             (C113 * C297 + C48121 * C308) * C1089) +
            C362 * C48258 - C363 * C1091 - C364 * C48227) *
               C42726 +
           (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C42727 +
           (C2198 * C1090 - (C11739 * C48271 + C11738 * C1089) +
            C2199 * C48258 - C2200 * C1091 - C2201 * C48227) *
               C42728) *
              C47900 * C47935 * C1087 +
          (((C113 * C301 + C48121 * C316) * C1089 +
            (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
            C368 * C48258 + C369 * C1091 + C370 * C48227) *
               C42726 +
           (C11740 * C1089 + C11741 * C48271 - C1612 * C1090 - C1613 * C48258 +
            C1614 * C1091 + C1615 * C48227) *
               C42727 +
           (C11745 * C1089 + C11744 * C48271 - C11743 * C1090 -
            C11742 * C48258 + (C113 * C1303 + C48121 * C1320) * C1091 +
            (C113 * C1321 + C48121 * C1330) * C48227) *
               C42728) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1160 +
            (C113 * C127 + C48121 * C140) * C47871) *
               C42726 +
           (C11706 + C11707) * C42727 + (C11713 + C11712) * C42728) *
              C47900 * C47935 * C1155 -
          ((C11747 + C11746) * C42728 + (C11715 + C11714) * C42727 +
           ((C113 * C307 + C48121 * C326) * C47871 +
            (C113 * C297 + C48121 * C308) * C1160) *
               C42726) *
              C47900 * C47935 * C1156 +
          (((C113 * C301 + C48121 * C316) * C1160 +
            (C113 * C317 + C48121 * C331) * C47871) *
               C42726 +
           (C11748 + C11749) * C42727 + (C11753 + C11752) * C42728) *
              C47900 * C47935 * C1157 -
          (((C113 * C6108 + C48121 * C6111) * C47871 +
            (C113 * C6105 + C48121 * C6107) * C1160) *
               C42728 +
           (C12247 + C12246) * C42727 +
           ((C113 * C1171 + C48121 * C1181) * C47871 +
            (C113 * C1163 + C48121 * C1172) * C1160) *
               C42726) *
              C47900 * C47935 * C1158 +
          (((C113 * C1164 + C48121 * C1173) * C1160 +
            (C113 * C1174 + C48121 * C1182) * C47871) *
               C42726 +
           ((C113 * C6591 + C48121 * C6593) * C1160 +
            (C113 * C6594 + C48121 * C6597) * C47871) *
               C42727 +
           ((C113 * C22860 + C48121 * C22861) * C1160 +
            (C113 * C22862 + C48121 * C22863) * C47871) *
               C42728) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C48275 -
           ((C12675 + C12674) * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C48264 +
           (C43599 * C42726 + (C12674 + C12675) * C42727 +
            (C12679 + C12678) * C42728) *
               C47900 * C48238) *
              C1086 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            (C13173 + C13172) * C42728) *
               C47900 * C48264 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C48275 -
           (((C113 * C6976 + C48121 * C6979) * C47871 +
             (C113 * C6973 + C48121 * C6975) * C1160) *
                C42728 +
            (C13172 + C13173) * C42727 + C43600 * C42726) *
               C47900 * C48238) *
              C1087 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C42726 +
            (C11748 + C11749) * C42727 + C43601 * C42728) *
               C47900 * C48275 -
           ((C43608 + C43609) * C42728 + (C11752 + C11753) * C42727 +
            (C11749 + C11748) * C42726) *
               C47900 * C48264 +
           (C43601 * C42726 + (C43609 + C43608) * C42727 +
            ((C113 * C23492 + C48121 * C23493) * C1160 +
             (C113 * C23494 + C48121 * C23495) * C47871) *
                C42728) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1089 +
            (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
            C169 * C48258 + C170 * C1091 + C171 * C48227) *
               C42726 +
           (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C42727 +
           C44084 * C42728) *
              C47900 * C1835 +
          ((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C42726 +
           (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C42727 +
           (C44075 - (C44076 + C44077) + C44078 - C44079 - C44080) * C42728) *
              C47900 * C1836 +
          (C44084 * C42726 +
           (C44077 + C44076 - C44075 - C44078 + C44079 + C44080) * C42727 +
           (C12673 * C1089 + C12672 * C48271 - C12671 * C1090 -
            C12670 * C48258 + (C113 * C2020 + C48121 * C2031) * C1091 +
            (C113 * C2032 + C48121 * C2038) * C48227) *
               C42728) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C1835 -
           ((C12675 + C12674) * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C1836 +
           (C43599 * C42726 + (C12674 + C12675) * C42727 +
            (C12679 + C12678) * C42728) *
               C47900 * C48238) *
              C48274 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            (C13173 + C13172) * C42728) *
               C47900 * C1836 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C1835 -
           (((C113 * C6976 + C48121 * C6979) * C47871 +
             (C113 * C6973 + C48121 * C6975) * C1160) *
                C42728 +
            (C13172 + C13173) * C42727 + C43600 * C42726) *
               C47900 * C48238) *
              C48262 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C42726 +
            (C11748 + C11749) * C42727 + C43601 * C42728) *
               C47900 * C1835 -
           ((C43608 + C43609) * C42728 + (C11752 + C11753) * C42727 +
            (C11749 + C11748) * C42726) *
               C47900 * C1836 +
           (C43601 * C42726 + (C43609 + C43608) * C42727 +
            ((C113 * C23492 + C48121 * C23493) * C1160 +
             (C113 * C23494 + C48121 * C23495) * C47871) *
                C42728) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1160 +
            (C113 * C127 + C48121 * C140) * C47871) *
               C42726 +
           (C11706 + C11707) * C42727 + C43599 * C42728) *
              C47900 * C2010 -
          (C44261 * C42728 + (C11712 + C11713) * C42727 +
           (C11707 + C11706) * C42726) *
              C47900 * C2011 +
          (C43599 * C42726 + (C12674 + C12675) * C42727 + C44262 * C42728) *
              C47900 * C2012 -
          ((C44269 + C44270) * C42728 + (C12678 + C12679) * C42727 +
           C44261 * C42726) *
              C47900 * C2013 +
          (C44262 * C42726 + (C44270 + C44269) * C42727 +
           ((C113 * C44256 + C48121 * C44257) * C1160 +
            (C113 * C44258 + C48121 * C44259) * C47871) *
               C42728) *
              C47900 * C2014) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C42726 +
            (C12084 + C12085 - C12086 - C12087) * C42727 +
            (C12876 + C12875 - C12874 - C12877) * C42728) *
               C47900 * C48204 +
           ((C12086 - (C12085 + C12084) + C12087) * C42726 +
            (C12874 - (C12875 + C12876) + C12877) * C42727 +
            (C13028 - (C13027 + C13026) + C13029) * C42728) *
               C47900 * C48022) *
              C1086 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C42726 +
            (C12092 - (C12093 + C12094) + C12095) * C42727 +
            (C12884 - (C12883 + C12882) + C12885) * C42728) *
               C47900 * C48204 +
           ((C12094 + C12093 - C12092 - C12095) * C42726 +
            (C12882 + C12883 - C12884 - C12885) * C42727 +
            (C13171 * C46986 + C13170 * C48186 - C12894 * C46967 -
             C12895 * C47881) *
                C42728) *
               C47900 * C48022) *
              C1087 +
          ((((C113 * C301 + C48121 * C316) * C46986 +
             (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
             C368 * C47881) *
                C42726 +
            (C12100 + C12101 - C12102 - C12103) * C42727 +
            (C43854 + C43855 - C43856 - C43857) * C42728) *
               C47900 * C48204 +
           ((C12102 - (C12101 + C12100) + C12103) * C42726 +
            (C43856 - (C43855 + C43854) + C43857) * C42727 +
            ((C113 * C7460 + C48121 * C7463) * C46967 -
             (C43606 * C48186 + C43607 * C46986) +
             (C113 * C7464 + C48121 * C7466) * C47881) *
                C42728) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C665 +
            (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
               C42726 +
           (C11104 + C11105 - C11106 - C11107 + C11108 + C11109 - C11110 -
            C11111) *
               C42727 +
           (C43157 + C43158 - C43159 - C43160 + C43161 + C43162 - C43163 -
            C43164) *
               C42728) *
              C47900 * C48204 +
          ((C11106 - (C11105 + C11104) + C11107 - C11108 - C11109 + C11110 +
            C11111) *
               C42726 +
           (C43159 - (C43158 + C43157) + C43160 - C43161 - C43162 + C43163 +
            C43164) *
               C42727 +
           (C2316 * C666 - (C12669 * C659 + C12668 * C665) + C2317 * C660 -
            C2318 * C667 - C2319 * C661 +
            (C113 * C2303 + C48121 * C2304) * C668 +
            (C113 * C2305 + C48121 * C2306) * C48239) *
               C42728) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C46986 +
            (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
            C169 * C47881) *
               C42726 +
           (C12084 + C12085 - C12086 - C12087) * C42727 + C44425 * C42728) *
              C47900 * C2299 +
          ((C12086 - (C12085 + C12084) + C12087) * C42726 +
           (C12874 - (C12875 + C12876) + C12877) * C42727 + C44531 * C42728) *
              C47900 * C2300 +
          (C44425 * C42726 + (C13026 + C13027 - C13028 - C13029) * C42727 +
           (C44526 + C44527 - C44528 - C44529) * C42728) *
              C47900 * C2301 +
          (C44531 * C42726 + (C44528 - (C44527 + C44526) + C44529) * C42727 +
           ((C113 * C12646 + C48121 * C12649) * C46967 -
            (C44267 * C48186 + C44268 * C46986) +
            (C113 * C12650 + C48121 * C12652) * C47881) *
               C42728) *
              C47900 * C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C293 +
            (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48227) *
               C42726 +
           (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C42727 +
           (C10843 + C10842 - C10822 - C10827 + C10828 + C10829) * C42728) *
              C47900 * C47935 * C48274 +
          ((C361 * C294 -
            ((C113 * C307 + C48121 * C326) * C287 +
             (C113 * C297 + C48121 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C48227) *
               C42726 +
           (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C42727 +
           (C2198 * C294 - (C11739 * C287 + C11738 * C293) + C2199 * C288 -
            C2200 * C295 - C2201 * C48227) *
               C42728) *
              C47900 * C47935 * C48262 +
          (((C113 * C301 + C48121 * C316) * C293 +
            (C113 * C317 + C48121 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C48227) *
               C42726 +
           (C11740 * C293 + C11741 * C287 - C1612 * C294 - C1613 * C288 +
            C1614 * C295 + C1615 * C48227) *
               C42727 +
           (C11745 * C293 + C11744 * C287 - C11743 * C294 - C11742 * C288 +
            (C113 * C1303 + C48121 * C1320) * C295 +
            (C113 * C1321 + C48121 * C1330) * C48227) *
               C42728) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48121 * C126) * C114 +
           (C113 * C127 + C48121 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C42726 +
          (C10836 * C114 + C10837 * C102 - C550 * C115 - C551 * C103 +
           C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 + C788 * C118 +
           C789 * C106) *
              C42727 +
          (C10839 * C114 + C10838 * C102 - C556 * C115 - C557 * C103 +
           C558 * C116 + C559 * C104 - C560 * C117 - C561 * C105 +
           (C113 * C494 + C48121 * C513) * C118 +
           (C113 * C514 + C48121 * C524) * C106) *
              C42728) *
         C47900 * C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1089 +
            (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
            C169 * C48258 + C170 * C1091 + C171 * C48227) *
               C42726 +
           (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C42727 +
           (C12408 + C12407 - C12406 - C12409 + C12410 + C12411) * C42728) *
              C47900 * C47935 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C48121 * C326) * C48271 +
             (C113 * C297 + C48121 * C308) * C1089) +
            C362 * C48258 - C363 * C1091 - C364 * C48227) *
               C42726 +
           (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C42727 +
           (C2198 * C1090 - (C11739 * C48271 + C11738 * C1089) +
            C2199 * C48258 - C2200 * C1091 - C2201 * C48227) *
               C42728) *
              C47900 * C47935 * C1087 +
          (((C113 * C301 + C48121 * C316) * C1089 +
            (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
            C368 * C48258 + C369 * C1091 + C370 * C48227) *
               C42726 +
           (C11740 * C1089 + C11741 * C48271 - C1612 * C1090 - C1613 * C48258 +
            C1614 * C1091 + C1615 * C48227) *
               C42727 +
           (C11745 * C1089 + C11744 * C48271 - C11743 * C1090 -
            C11742 * C48258 + (C113 * C1303 + C48121 * C1320) * C1091 +
            (C113 * C1321 + C48121 * C1330) * C48227) *
               C42728) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1160 +
            (C113 * C127 + C48121 * C140) * C47871) *
               C42726 +
           (C11706 + C11707) * C42727 + (C11713 + C11712) * C42728) *
              C47900 * C47935 * C1155 -
          ((C11747 + C11746) * C42728 + (C11715 + C11714) * C42727 +
           ((C113 * C307 + C48121 * C326) * C47871 +
            (C113 * C297 + C48121 * C308) * C1160) *
               C42726) *
              C47900 * C47935 * C1156 +
          (((C113 * C301 + C48121 * C316) * C1160 +
            (C113 * C317 + C48121 * C331) * C47871) *
               C42726 +
           (C11748 + C11749) * C42727 + (C11753 + C11752) * C42728) *
              C47900 * C47935 * C1157 -
          (((C113 * C6108 + C48121 * C6111) * C47871 +
            (C113 * C6105 + C48121 * C6107) * C1160) *
               C42728 +
           (C12247 + C12246) * C42727 +
           ((C113 * C1171 + C48121 * C1181) * C47871 +
            (C113 * C1163 + C48121 * C1172) * C1160) *
               C42726) *
              C47900 * C47935 * C1158 +
          (((C113 * C1164 + C48121 * C1173) * C1160 +
            (C113 * C1174 + C48121 * C1182) * C47871) *
               C42726 +
           ((C113 * C6591 + C48121 * C6593) * C1160 +
            (C113 * C6594 + C48121 * C6597) * C47871) *
               C42727 +
           ((C113 * C22860 + C48121 * C22861) * C1160 +
            (C113 * C22862 + C48121 * C22863) * C47871) *
               C42728) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1089 +
            (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
            C169 * C48258 + C170 * C1091 + C171 * C48227) *
               C42726 +
           (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C42727 +
           C44084 * C42728) *
              C47900 * C1835 +
          ((C12396 - (C12395 + C12394) + C12397 - C12398 - C12399) * C42726 +
           (C12406 - (C12407 + C12408) + C12409 - C12410 - C12411) * C42727 +
           (C44075 - (C44076 + C44077) + C44078 - C44079 - C44080) * C42728) *
              C47900 * C1836 +
          (C44084 * C42726 +
           (C44077 + C44076 - C44075 - C44078 + C44079 + C44080) * C42727 +
           (C12673 * C1089 + C12672 * C48271 - C12671 * C1090 -
            C12670 * C48258 + (C113 * C2020 + C48121 * C2031) * C1091 +
            (C113 * C2032 + C48121 * C2038) * C48227) *
               C42728) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C1835 -
           ((C12675 + C12674) * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C1836 +
           (C43599 * C42726 + (C12674 + C12675) * C42727 +
            (C12679 + C12678) * C42728) *
               C47900 * C48238) *
              C48274 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            (C13173 + C13172) * C42728) *
               C47900 * C1836 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C1835 -
           (((C113 * C6976 + C48121 * C6979) * C47871 +
             (C113 * C6973 + C48121 * C6975) * C1160) *
                C42728 +
            (C13172 + C13173) * C42727 + C43600 * C42726) *
               C47900 * C48238) *
              C48262 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C42726 +
            (C11748 + C11749) * C42727 + C43601 * C42728) *
               C47900 * C1835 -
           ((C43608 + C43609) * C42728 + (C11752 + C11753) * C42727 +
            (C11749 + C11748) * C42726) *
               C47900 * C1836 +
           (C43601 * C42726 + (C43609 + C43608) * C42727 +
            ((C113 * C23492 + C48121 * C23493) * C1160 +
             (C113 * C23494 + C48121 * C23495) * C47871) *
                C42728) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46996 +
             (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
             C169 * C47884 + C170 * C47002 + C171 * C2901) *
                C42726 +
            (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C42727 +
            (C15046 + C15045 - C15044 - C15047 + C15048 + C15049) * C42728) *
               C47900 * C3298 +
           ((C14002 - (C14001 + C14000) + C14003 - C14004 - C14005) * C42726 +
            (C15044 - (C15045 + C15046) + C15047 - C15048 - C15049) * C42727 +
            (C2316 * C46992 - (C12669 * C47876 + C12668 * C46996) +
             C2317 * C47884 - C2318 * C47002 - C2319 * C2901) *
                C42728) *
               C47900 * C48022) *
              C48203 +
          (((C361 * C46992 -
             ((C113 * C307 + C48121 * C326) * C47876 +
              (C113 * C297 + C48121 * C308) * C46996) +
             C362 * C47884 - C363 * C47002 - C364 * C2901) *
                C42726 +
            (C14012 - (C14013 + C14014) + C14015 - C14016 - C14017) * C42727 +
            (C45247 - (C45248 + C45249) + C45250 - C45251 - C45252) * C42728) *
               C47900 * C3298 +
           ((C14014 + C14013 - C14012 - C14015 + C14016 + C14017) * C42726 +
            (C45249 + C45248 - C45247 - C45250 + C45251 + C45252) * C42727 +
            (C13171 * C46996 + C13170 * C47876 - C12894 * C46992 -
             C12895 * C47884 + (C113 * C2419 + C48121 * C2424) * C47002 +
             (C113 * C2425 + C48121 * C2428) * C2901) *
                C42728) *
               C47900 * C48022) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C42726 +
            (C13628 + C13629 - C13630 - C13631) * C42727 + C44989 * C42728) *
               C47900 * C48018 +
           ((C13630 - (C13629 + C13628) + C13631) * C42726 +
            (C13636 - (C13637 + C13638) + C13639) * C42727 + C45759 * C42728) *
               C47900 * C48025 +
           (C44989 * C42726 + (C14696 + C14697 - C14698 - C14699) * C42727 +
            (C45754 + C45755 - C45756 - C45757) * C42728) *
               C47900 * C3806) *
              C48203 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C42726 +
            (C13644 - (C13645 + C13646) + C13647) * C42727 + C44990 * C42728) *
               C47900 * C48018 +
           ((C13646 + C13645 - C13644 - C13647) * C42726 +
            (C13652 + C13653 - C13654 - C13655) * C42727 +
            (C44983 + C44984 - C44985 - C44986) * C42728) *
               C47900 * C48025 +
           (C44990 * C42726 + (C44985 - (C44984 + C44983) + C44986) * C42727 +
            ((C113 * C6974 + C48121 * C6977) * C2642 -
             (C44635 * C2635 + C44636 * C2641) +
             (C113 * C6978 + C48121 * C6980) * C47881) *
                C42728) *
               C47900 * C3806) *
              C47982)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C42726 +
            (C13628 + C13629 - C13630 - C13631) * C42727 + C44989 * C42728) *
               C47900 * C3298 +
           ((C13630 - (C13629 + C13628) + C13631) * C42726 +
            (C13636 - (C13637 + C13638) + C13639) * C42727 +
            (C14698 - (C14697 + C14696) + C14699) * C42728) *
               C47900 * C48022) *
              C48274 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C42726 +
            (C13644 - (C13645 + C13646) + C13647) * C42727 + C44990 * C42728) *
               C47900 * C3298 +
           ((C13646 + C13645 - C13644 - C13647) * C42726 +
            (C13652 + C13653 - C13654 - C13655) * C42727 +
            (C44983 + C44984 - C44985 - C44986) * C42728) *
               C47900 * C48022) *
              C48262 +
          ((((C113 * C301 + C48121 * C316) * C2641 +
             (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
             C368 * C47881) *
                C42726 +
            (C14218 + C14219 - C14220 - C14221) * C42727 +
            (C45399 + C45400 - C45401 - C45402) * C42728) *
               C47900 * C3298 +
           ((C14220 - (C14219 + C14218) + C14221) * C42726 +
            (C45401 - (C45400 + C45399) + C45402) * C42727 +
            ((C113 * C7460 + C48121 * C7463) * C2642 -
             (C43606 * C2635 + C43607 * C2641) +
             (C113 * C7464 + C48121 * C7466) * C47881) *
                C42728) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2533 +
            (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
            C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
            C173 * C48239) *
               C42726 +
           (C14356 + C14357 - C14358 - C14359 + C14360 + C14361 - C14362 -
            C14363) *
               C42727 +
           (C45501 + C45502 - C45503 - C45504 + C45505 + C45506 - C45507 -
            C45508) *
               C42728) *
              C47900 * C3298 +
          ((C14358 - (C14357 + C14356) + C14359 - C14360 - C14361 + C14362 +
            C14363) *
               C42726 +
           (C45503 - (C45502 + C45501) + C45504 - C45505 - C45506 + C45507 +
            C45508) *
               C42727 +
           (C2316 * C2534 - (C12669 * C48280 + C12668 * C2533) +
            C2317 * C48273 - C2318 * C2535 - C2319 * C48260 +
            (C113 * C2303 + C48121 * C2304) * C2536 +
            (C113 * C2305 + C48121 * C2306) * C48239) *
               C42728) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2641 +
            (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
            C169 * C47881) *
               C42726 +
           (C13628 + C13629 - C13630 - C13631) * C42727 + C44989 * C42728) *
              C47900 * C48282 +
          ((C13630 - (C13629 + C13628) + C13631) * C42726 +
           (C13636 - (C13637 + C13638) + C13639) * C42727 + C45759 * C42728) *
              C47900 * C48279 +
          (C44989 * C42726 + (C14696 + C14697 - C14698 - C14699) * C42727 +
           (C45754 + C45755 - C45756 - C45757) * C42728) *
              C47900 * C48270 +
          (C45759 * C42726 + (C45756 - (C45755 + C45754) + C45757) * C42727 +
           ((C113 * C12646 + C48121 * C12649) * C2642 -
            (C44267 * C2635 + C44268 * C2641) +
            (C113 * C12650 + C48121 * C12652) * C47881) *
               C42728) *
              C47900 * C48251) *
         C47923) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C46996 +
            (C113 * C127 + C48121 * C140) * C47876 - C168 * C46992 -
            C169 * C47884 + C170 * C47002 + C171 * C2901) *
               C42726 +
           (C14000 + C14001 - C14002 - C14003 + C14004 + C14005) * C42727 +
           C46026 * C42728) *
              C47900 * C48018 +
          ((C14002 - (C14001 + C14000) + C14003 - C14004 - C14005) * C42726 +
           (C15044 - (C15045 + C15046) + C15047 - C15048 - C15049) * C42727 +
           (C46017 - (C46018 + C46019) + C46020 - C46021 - C46022) * C42728) *
              C47900 * C48025 +
          (C46026 * C42726 +
           (C46019 + C46018 - C46017 - C46020 + C46021 + C46022) * C42727 +
           (C12673 * C46996 + C12672 * C47876 - C12671 * C46992 -
            C12670 * C47884 + (C113 * C2020 + C48121 * C2031) * C47002 +
            (C113 * C2032 + C48121 * C2038) * C2901) *
               C42728) *
              C47900 * C3806) *
         C47923) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C2533 +
            (C113 * C127 + C48121 * C140) * C48280 - C168 * C2534 -
            C169 * C48273 + C170 * C2535 + C171 * C48260 - C172 * C2536 -
            C173 * C48239) *
               C42726 +
           (C14356 + C14357 - C14358 - C14359 + C14360 + C14361 - C14362 -
            C14363) *
               C42727 +
           (C45501 + C45502 - C45503 - C45504 + C45505 + C45506 - C45507 -
            C45508) *
               C42728) *
              C47900 * C3298 +
          ((C14358 - (C14357 + C14356) + C14359 - C14360 - C14361 + C14362 +
            C14363) *
               C42726 +
           (C45503 - (C45502 + C45501) + C45504 - C45505 - C45506 + C45507 +
            C45508) *
               C42727 +
           (C2316 * C2534 - (C12669 * C48280 + C12668 * C2533) +
            C2317 * C48273 - C2318 * C2535 - C2319 * C48260 +
            (C113 * C2303 + C48121 * C2304) * C2536 +
            (C113 * C2305 + C48121 * C2306) * C48239) *
               C42728) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C2641 +
             (C113 * C127 + C48121 * C140) * C2635 - C168 * C2642 -
             C169 * C47881) *
                C42726 +
            (C13628 + C13629 - C13630 - C13631) * C42727 + C44989 * C42728) *
               C47900 * C3298 +
           ((C13630 - (C13629 + C13628) + C13631) * C42726 +
            (C13636 - (C13637 + C13638) + C13639) * C42727 +
            (C14698 - (C14697 + C14696) + C14699) * C42728) *
               C47900 * C48022) *
              C48274 +
          (((C361 * C2642 -
             ((C113 * C307 + C48121 * C326) * C2635 +
              (C113 * C297 + C48121 * C308) * C2641) +
             C362 * C47881) *
                C42726 +
            (C13644 - (C13645 + C13646) + C13647) * C42727 + C44990 * C42728) *
               C47900 * C3298 +
           ((C13646 + C13645 - C13644 - C13647) * C42726 +
            (C13652 + C13653 - C13654 - C13655) * C42727 +
            (C44983 + C44984 - C44985 - C44986) * C42728) *
               C47900 * C48022) *
              C48262 +
          ((((C113 * C301 + C48121 * C316) * C2641 +
             (C113 * C317 + C48121 * C331) * C2635 - C367 * C2642 -
             C368 * C47881) *
                C42726 +
            (C14218 + C14219 - C14220 - C14221) * C42727 +
            (C45399 + C45400 - C45401 - C45402) * C42728) *
               C47900 * C3298 +
           ((C14220 - (C14219 + C14218) + C14221) * C42726 +
            (C45401 - (C45400 + C45399) + C45402) * C42727 +
            ((C113 * C7460 + C48121 * C7463) * C2642 -
             (C43606 * C2635 + C43607 * C2641) +
             (C113 * C7464 + C48121 * C7466) * C47881) *
                C42728) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C665 +
            (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
               C42726 +
           (C11104 + C11105 - C11106 - C11107 + C11108 + C11109 - C11110 -
            C11111) *
               C42727 +
           (C10839 * C665 + C10838 * C659 - C556 * C666 - C557 * C660 +
            C558 * C667 + C559 * C661 - C560 * C668 - C561 * C48239) *
               C42728) *
              C47900 * C47935 * C48203 +
          ((C361 * C666 -
            ((C113 * C307 + C48121 * C326) * C659 +
             (C113 * C297 + C48121 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C48239) *
               C42726 +
           (C968 * C666 - (C11328 * C659 + C11329 * C665) + C969 * C660 -
            C970 * C667 - C971 * C661 + C972 * C668 + C973 * C48239) *
               C42727 +
           (C2198 * C666 - (C11739 * C659 + C11738 * C665) + C2199 * C660 -
            C2200 * C667 - C2201 * C661 +
            (C113 * C2185 + C48121 * C2186) * C668 +
            (C113 * C2187 + C48121 * C2188) * C48239) *
               C42728) *
              C47900 * C47935 * C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C46986 +
            (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
            C169 * C47881) *
               C42726 +
           (C12084 + C12085 - C12086 - C12087) * C42727 +
           (C12876 + C12875 - C12874 - C12877) * C42728) *
              C47900 * C47935 * C1431 +
          ((C361 * C46967 -
            ((C113 * C307 + C48121 * C326) * C48186 +
             (C113 * C297 + C48121 * C308) * C46986) +
            C362 * C47881) *
               C42726 +
           (C12092 - (C12093 + C12094) + C12095) * C42727 +
           (C12884 - (C12883 + C12882) + C12885) * C42728) *
              C47900 * C47935 * C1432 +
          (((C113 * C301 + C48121 * C316) * C46986 +
            (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
            C368 * C47881) *
               C42726 +
           (C12100 + C12101 - C12102 - C12103) * C42727 +
           (C11745 * C46986 + C11744 * C48186 - C11743 * C46967 -
            C11742 * C47881) *
               C42728) *
              C47900 * C47935 * C1433 +
          ((C1450 * C46967 -
            ((C113 * C1171 + C48121 * C1181) * C48186 +
             (C113 * C1163 + C48121 * C1172) * C46986) +
            C1451 * C47881) *
               C42726 +
           (C11888 * C46967 - (C12245 * C48186 + C12244 * C46986) +
            C11889 * C47881) *
               C42727 +
           ((C113 * C6106 + C48121 * C6109) * C46967 -
            ((C113 * C6108 + C48121 * C6111) * C48186 +
             (C113 * C6105 + C48121 * C6107) * C46986) +
            (C113 * C6110 + C48121 * C6112) * C47881) *
               C42728) *
              C47900 * C47935 * C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C293 +
             (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48227) *
                C42726 +
            (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C42727 +
            C42960 * C42728) *
               C47900 * C48204 +
           ((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C42726 +
            (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C42727 +
            (C42951 - (C42952 + C42953) + C42954 - C42955 - C42956) * C42728) *
               C47900 * C48022) *
              C48203 +
          (((C361 * C294 -
             ((C113 * C307 + C48121 * C326) * C287 +
              (C113 * C297 + C48121 * C308) * C293) +
             C362 * C288 - C363 * C295 - C364 * C48227) *
                C42726 +
            (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C42727 +
            (C43311 - (C43312 + C43313) + C43314 - C43315 - C43316) * C42728) *
               C47900 * C48204 +
           ((C11331 + C11330 - C11314 - C11319 + C11320 + C11321) * C42726 +
            (C43313 + C43312 - C43311 - C43314 + C43315 + C43316) * C42727 +
            (C13171 * C293 + C13170 * C287 - C12894 * C294 - C12895 * C288 +
             (C113 * C2419 + C48121 * C2424) * C295 +
             (C113 * C2425 + C48121 * C2428) * C48227) *
                C42728) *
               C47900 * C48022) *
              C47982)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C48204 -
           ((C12675 + C12674) * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C48022) *
              C1431 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            (C13173 + C13172) * C42728) *
               C47900 * C48022 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C48204) *
              C1432 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C42726 +
            (C11748 + C11749) * C42727 + C43601 * C42728) *
               C47900 * C48204 -
           ((C43608 + C43609) * C42728 + (C11752 + C11753) * C42727 +
            (C11749 + C11748) * C42726) *
               C47900 * C48022) *
              C1433 +
          (((C12246 + C12247) * C42726 + (C43962 + C43963) * C42727 +
            ((C113 * C23838 + C48121 * C23839) * C1160 +
             (C113 * C23840 + C48121 * C23841) * C47871) *
                C42728) *
               C47900 * C48022 -
           ((C43963 + C43962) * C42728 + (C12247 + C12246) * C42727 +
            ((C113 * C1171 + C48121 * C1181) * C47871 +
             (C113 * C1163 + C48121 * C1172) * C1160) *
                C42726) *
               C47900 * C48204) *
              C48245)) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C293 +
            (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48227) *
               C42726 +
           (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C42727 +
           (C10843 + C10842 - C10822 - C10827 + C10828 + C10829) * C42728) *
              C47900 * C47935 * C48274 +
          ((C361 * C294 -
            ((C113 * C307 + C48121 * C326) * C287 +
             (C113 * C297 + C48121 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C48227) *
               C42726 +
           (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C42727 +
           (C2198 * C294 - (C11739 * C287 + C11738 * C293) + C2199 * C288 -
            C2200 * C295 - C2201 * C48227) *
               C42728) *
              C47900 * C47935 * C48262 +
          (((C113 * C301 + C48121 * C316) * C293 +
            (C113 * C317 + C48121 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C48227) *
               C42726 +
           (C11740 * C293 + C11741 * C287 - C1612 * C294 - C1613 * C288 +
            C1614 * C295 + C1615 * C48227) *
               C42727 +
           (C11745 * C293 + C11744 * C287 - C11743 * C294 - C11742 * C288 +
            (C113 * C1303 + C48121 * C1320) * C295 +
            (C113 * C1321 + C48121 * C1330) * C48227) *
               C42728) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48121 * C126) * C114 +
           (C113 * C127 + C48121 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C42726 +
          (C10836 * C114 + C10837 * C102 - C550 * C115 - C551 * C103 +
           C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 + C788 * C118 +
           C789 * C106) *
              C42727 +
          (C10839 * C114 + C10838 * C102 - C556 * C115 - C557 * C103 +
           C558 * C116 + C559 * C104 - C560 * C117 - C561 * C105 +
           (C113 * C494 + C48121 * C513) * C118 +
           (C113 * C514 + C48121 * C524) * C106) *
              C42728) *
         C47900 * C47935 * C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C293 +
            (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48227) *
               C42726 +
           (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C42727 +
           C42960 * C42728) *
              C47900 * C48275 +
          ((C10812 - (C10841 + C10840) + C10813 - C10814 - C10815) * C42726 +
           (C10822 - (C10842 + C10843) + C10827 - C10828 - C10829) * C42727 +
           (C42951 - (C42952 + C42953) + C42954 - C42955 - C42956) * C42728) *
              C47900 * C48264 +
          (C42960 * C42726 +
           (C42953 + C42952 - C42951 - C42954 + C42955 + C42956) * C42727 +
           (C12673 * C293 + C12672 * C287 - C12671 * C294 - C12670 * C288 +
            (C113 * C2020 + C48121 * C2031) * C295 +
            (C113 * C2032 + C48121 * C2038) * C48227) *
               C42728) *
              C47900 * C48238) *
         C47923) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1089 +
            (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
            C169 * C48258 + C170 * C1091 + C171 * C48227) *
               C42726 +
           (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C42727 +
           (C12408 + C12407 - C12406 - C12409 + C12410 + C12411) * C42728) *
              C47900 * C47935 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C48121 * C326) * C48271 +
             (C113 * C297 + C48121 * C308) * C1089) +
            C362 * C48258 - C363 * C1091 - C364 * C48227) *
               C42726 +
           (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C42727 +
           (C2198 * C1090 - (C11739 * C48271 + C11738 * C1089) +
            C2199 * C48258 - C2200 * C1091 - C2201 * C48227) *
               C42728) *
              C47900 * C47935 * C1087 +
          (((C113 * C301 + C48121 * C316) * C1089 +
            (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
            C368 * C48258 + C369 * C1091 + C370 * C48227) *
               C42726 +
           (C11740 * C1089 + C11741 * C48271 - C1612 * C1090 - C1613 * C48258 +
            C1614 * C1091 + C1615 * C48227) *
               C42727 +
           (C11745 * C1089 + C11744 * C48271 - C11743 * C1090 -
            C11742 * C48258 + (C113 * C1303 + C48121 * C1320) * C1091 +
            (C113 * C1321 + C48121 * C1330) * C48227) *
               C42728) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1160 +
            (C113 * C127 + C48121 * C140) * C47871) *
               C42726 +
           (C11706 + C11707) * C42727 + (C11713 + C11712) * C42728) *
              C47900 * C47935 * C1155 -
          ((C11747 + C11746) * C42728 + (C11715 + C11714) * C42727 +
           ((C113 * C307 + C48121 * C326) * C47871 +
            (C113 * C297 + C48121 * C308) * C1160) *
               C42726) *
              C47900 * C47935 * C1156 +
          (((C113 * C301 + C48121 * C316) * C1160 +
            (C113 * C317 + C48121 * C331) * C47871) *
               C42726 +
           (C11748 + C11749) * C42727 + (C11753 + C11752) * C42728) *
              C47900 * C47935 * C1157 -
          (((C113 * C6108 + C48121 * C6111) * C47871 +
            (C113 * C6105 + C48121 * C6107) * C1160) *
               C42728 +
           (C12247 + C12246) * C42727 +
           ((C113 * C1171 + C48121 * C1181) * C47871 +
            (C113 * C1163 + C48121 * C1172) * C1160) *
               C42726) *
              C47900 * C47935 * C1158 +
          (((C113 * C1164 + C48121 * C1173) * C1160 +
            (C113 * C1174 + C48121 * C1182) * C47871) *
               C42726 +
           ((C113 * C6591 + C48121 * C6593) * C1160 +
            (C113 * C6594 + C48121 * C6597) * C47871) *
               C42727 +
           ((C113 * C22860 + C48121 * C22861) * C1160 +
            (C113 * C22862 + C48121 * C22863) * C47871) *
               C42728) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C1160 +
             (C113 * C127 + C48121 * C140) * C47871) *
                C42726 +
            (C11706 + C11707) * C42727 + C43599 * C42728) *
               C47900 * C48275 -
           ((C12675 + C12674) * C42728 + (C11712 + C11713) * C42727 +
            (C11707 + C11706) * C42726) *
               C47900 * C48264 +
           (C43599 * C42726 + (C12674 + C12675) * C42727 +
            (C12679 + C12678) * C42728) *
               C47900 * C48238) *
              C1086 +
          (((C11714 + C11715) * C42726 + (C11746 + C11747) * C42727 +
            (C13173 + C13172) * C42728) *
               C47900 * C48264 -
           (C43600 * C42728 + (C11715 + C11714) * C42727 +
            ((C113 * C307 + C48121 * C326) * C47871 +
             (C113 * C297 + C48121 * C308) * C1160) *
                C42726) *
               C47900 * C48275 -
           (((C113 * C6976 + C48121 * C6979) * C47871 +
             (C113 * C6973 + C48121 * C6975) * C1160) *
                C42728 +
            (C13172 + C13173) * C42727 + C43600 * C42726) *
               C47900 * C48238) *
              C1087 +
          ((((C113 * C301 + C48121 * C316) * C1160 +
             (C113 * C317 + C48121 * C331) * C47871) *
                C42726 +
            (C11748 + C11749) * C42727 + C43601 * C42728) *
               C47900 * C48275 -
           ((C43608 + C43609) * C42728 + (C11752 + C11753) * C42727 +
            (C11749 + C11748) * C42726) *
               C47900 * C48264 +
           (C43601 * C42726 + (C43609 + C43608) * C42727 +
            ((C113 * C23492 + C48121 * C23493) * C1160 +
             (C113 * C23494 + C48121 * C23495) * C47871) *
                C42728) *
               C47900 * C48238) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C665 +
            (C113 * C127 + C48121 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48239) *
               C42726 +
           (C11104 + C11105 - C11106 - C11107 + C11108 + C11109 - C11110 -
            C11111) *
               C42727 +
           (C43157 + C43158 - C43159 - C43160 + C43161 + C43162 - C43163 -
            C43164) *
               C42728) *
              C47900 * C48204 +
          ((C11106 - (C11105 + C11104) + C11107 - C11108 - C11109 + C11110 +
            C11111) *
               C42726 +
           (C43159 - (C43158 + C43157) + C43160 - C43161 - C43162 + C43163 +
            C43164) *
               C42727 +
           (C2316 * C666 - (C12669 * C659 + C12668 * C665) + C2317 * C660 -
            C2318 * C667 - C2319 * C661 +
            (C113 * C2303 + C48121 * C2304) * C668 +
            (C113 * C2305 + C48121 * C2306) * C48239) *
               C42728) *
              C47900 * C48022) *
         C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48121 * C126) * C46986 +
             (C113 * C127 + C48121 * C140) * C48186 - C168 * C46967 -
             C169 * C47881) *
                C42726 +
            (C12084 + C12085 - C12086 - C12087) * C42727 +
            (C12876 + C12875 - C12874 - C12877) * C42728) *
               C47900 * C48204 +
           ((C12086 - (C12085 + C12084) + C12087) * C42726 +
            (C12874 - (C12875 + C12876) + C12877) * C42727 +
            (C13028 - (C13027 + C13026) + C13029) * C42728) *
               C47900 * C48022) *
              C1086 +
          (((C361 * C46967 -
             ((C113 * C307 + C48121 * C326) * C48186 +
              (C113 * C297 + C48121 * C308) * C46986) +
             C362 * C47881) *
                C42726 +
            (C12092 - (C12093 + C12094) + C12095) * C42727 +
            (C12884 - (C12883 + C12882) + C12885) * C42728) *
               C47900 * C48204 +
           ((C12094 + C12093 - C12092 - C12095) * C42726 +
            (C12882 + C12883 - C12884 - C12885) * C42727 +
            (C13171 * C46986 + C13170 * C48186 - C12894 * C46967 -
             C12895 * C47881) *
                C42728) *
               C47900 * C48022) *
              C1087 +
          ((((C113 * C301 + C48121 * C316) * C46986 +
             (C113 * C317 + C48121 * C331) * C48186 - C367 * C46967 -
             C368 * C47881) *
                C42726 +
            (C12100 + C12101 - C12102 - C12103) * C42727 +
            (C43854 + C43855 - C43856 - C43857) * C42728) *
               C47900 * C48204 +
           ((C12102 - (C12101 + C12100) + C12103) * C42726 +
            (C43856 - (C43855 + C43854) + C43857) * C42727 +
            ((C113 * C7460 + C48121 * C7463) * C46967 -
             (C43606 * C48186 + C43607 * C46986) +
             (C113 * C7464 + C48121 * C7466) * C47881) *
                C42728) *
               C47900 * C48022) *
              C48235)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48121 * C126) * C114 +
           (C113 * C127 + C48121 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C42726 +
          (C10836 * C114 + C10837 * C102 - C550 * C115 - C551 * C103 +
           C552 * C116 + C553 * C104 - C554 * C117 - C555 * C105 + C788 * C118 +
           C789 * C106) *
              C42727 +
          (C10839 * C114 + C10838 * C102 - C556 * C115 - C557 * C103 +
           C558 * C116 + C559 * C104 - C560 * C117 - C561 * C105 +
           (C113 * C494 + C48121 * C513) * C118 +
           (C113 * C514 + C48121 * C524) * C106) *
              C42728) *
         C47900 * C47935 * C47923) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C293 +
            (C113 * C127 + C48121 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48227) *
               C42726 +
           (C10840 + C10841 - C10812 - C10813 + C10814 + C10815) * C42727 +
           (C10843 + C10842 - C10822 - C10827 + C10828 + C10829) * C42728) *
              C47900 * C47935 * C48274 +
          ((C361 * C294 -
            ((C113 * C307 + C48121 * C326) * C287 +
             (C113 * C297 + C48121 * C308) * C293) +
            C362 * C288 - C363 * C295 - C364 * C48227) *
               C42726 +
           (C11314 - (C11330 + C11331) + C11319 - C11320 - C11321) * C42727 +
           (C2198 * C294 - (C11739 * C287 + C11738 * C293) + C2199 * C288 -
            C2200 * C295 - C2201 * C48227) *
               C42728) *
              C47900 * C47935 * C48262 +
          (((C113 * C301 + C48121 * C316) * C293 +
            (C113 * C317 + C48121 * C331) * C287 - C367 * C294 - C368 * C288 +
            C369 * C295 + C370 * C48227) *
               C42726 +
           (C11740 * C293 + C11741 * C287 - C1612 * C294 - C1613 * C288 +
            C1614 * C295 + C1615 * C48227) *
               C42727 +
           (C11745 * C293 + C11744 * C287 - C11743 * C294 - C11742 * C288 +
            (C113 * C1303 + C48121 * C1320) * C295 +
            (C113 * C1321 + C48121 * C1330) * C48227) *
               C42728) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1089 +
            (C113 * C127 + C48121 * C140) * C48271 - C168 * C1090 -
            C169 * C48258 + C170 * C1091 + C171 * C48227) *
               C42726 +
           (C12394 + C12395 - C12396 - C12397 + C12398 + C12399) * C42727 +
           (C12408 + C12407 - C12406 - C12409 + C12410 + C12411) * C42728) *
              C47900 * C47935 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C48121 * C326) * C48271 +
             (C113 * C297 + C48121 * C308) * C1089) +
            C362 * C48258 - C363 * C1091 - C364 * C48227) *
               C42726 +
           (C15444 - (C15445 + C15446) + C15447 - C15448 - C15449) * C42727 +
           (C2198 * C1090 - (C11739 * C48271 + C11738 * C1089) +
            C2199 * C48258 - C2200 * C1091 - C2201 * C48227) *
               C42728) *
              C47900 * C47935 * C1087 +
          (((C113 * C301 + C48121 * C316) * C1089 +
            (C113 * C317 + C48121 * C331) * C48271 - C367 * C1090 -
            C368 * C48258 + C369 * C1091 + C370 * C48227) *
               C42726 +
           (C11740 * C1089 + C11741 * C48271 - C1612 * C1090 - C1613 * C48258 +
            C1614 * C1091 + C1615 * C48227) *
               C42727 +
           (C11745 * C1089 + C11744 * C48271 - C11743 * C1090 -
            C11742 * C48258 + (C113 * C1303 + C48121 * C1320) * C1091 +
            (C113 * C1321 + C48121 * C1330) * C48227) *
               C42728) *
              C47900 * C47935 * C48235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48121 * C126) * C1160 +
            (C113 * C127 + C48121 * C140) * C47871) *
               C42726 +
           (C11706 + C11707) * C42727 + (C11713 + C11712) * C42728) *
              C47900 * C47935 * C1155 -
          ((C11747 + C11746) * C42728 + (C11715 + C11714) * C42727 +
           ((C113 * C307 + C48121 * C326) * C47871 +
            (C113 * C297 + C48121 * C308) * C1160) *
               C42726) *
              C47900 * C47935 * C1156 +
          (((C113 * C301 + C48121 * C316) * C1160 +
            (C113 * C317 + C48121 * C331) * C47871) *
               C42726 +
           (C11748 + C11749) * C42727 + (C11753 + C11752) * C42728) *
              C47900 * C47935 * C1157 -
          (((C113 * C6108 + C48121 * C6111) * C47871 +
            (C113 * C6105 + C48121 * C6107) * C1160) *
               C42728 +
           (C12247 + C12246) * C42727 +
           ((C113 * C1171 + C48121 * C1181) * C47871 +
            (C113 * C1163 + C48121 * C1172) * C1160) *
               C42726) *
              C47900 * C47935 * C1158 +
          (((C113 * C1164 + C48121 * C1173) * C1160 +
            (C113 * C1174 + C48121 * C1182) * C47871) *
               C42726 +
           ((C113 * C6591 + C48121 * C6593) * C1160 +
            (C113 * C6594 + C48121 * C6597) * C47871) *
               C42727 +
           ((C113 * C22860 + C48121 * C22861) * C1160 +
            (C113 * C22862 + C48121 * C22863) * C47871) *
               C42728) *
              C47900 * C47935 * C1159)) /
            (p * q * std::sqrt(p + q));
}
